\settings {
"#Proof-Settings-Config-File
#Thu Sep 17 14:48:20 CEST 2009
[General]SoundNotification=false
[View]FontIndex=2
[StrategyProperty]GOALCHOOSER_OPTIONS_KEY=GOALCHOOSER_DEFAULT
[General]UseOCL=false
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_HIGH
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_LOW
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_LOW
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[DecisionProcedure]Timeout=60
[View]ShowWholeTaclet=false
[General]ProofAssistant=false
[View]MaxTooltipLines=40
[General]DnDDirectionSensitive=true
[SimultaneousUpdateSimplifier]EagerSimplification=true
[General]StupidMode=true
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=500
[Libraries]Default=acc.key-false, stringRules.key-false, /Users/geilmann/.key/libraries/deprecatedRules.key-false, /Users/geilmann/.key/libraries/acc.key-false, /Users/geilmann/.key/libraries/stringRules.key-false, deprecatedRules.key-false
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_NONE
[Choice]DefaultChoices=throughout-throughout\:toutOn , transactions-transactions\:transactionsOn , assertions-assertions\:on , intRules-intRules\:arithmeticSemanticsIgnoringOF , programRules-programRules\:Java , initialisation-initialisation\:disableStaticInitialisation , transactionAbort-transactionAbort\:abortOn , nullPointerPolicy-nullPointerPolicy\:nullCheck , stringRules-stringRules\:withoutStringPool , javacard-javacard\:jcOff
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[DecisionProcedure]ActiveRule=_noname_
[General]UseJML=true
[View]HideClosedSubtrees=false
[Choice]Choices=throughout-throughout\:toutOn-throughout\:toutOff , transactions-transactions\:transactionsOn-transactions\:transactionsOff , assertions-assertions\:on-assertions\:off-assertions\:safe , intRules-intRules\:javaSemantics-intRules\:arithmeticSemanticsIgnoringOF-intRules\:arithmeticSemanticsCheckingOF , programRules-programRules\:Java-programRules\:ODL , initialisation-initialisation\:enableStaticInitialisation-initialisation\:disableStaticInitialisation , transactionAbort-transactionAbort\:abortOn-transactionAbort\:abortOff , nullPointerPolicy-nullPointerPolicy\:noNullCheck-nullPointerPolicy\:nullCheck , stringRules-stringRules\:withStringPool-stringRules\:withoutStringPool-stringRules\:platformIndependent , javacard-javacard\:jcOff-javacard\:jcOn
[View]HideIntermediateProofsteps=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\include "./example1.key";

\programVariables {
java.lang.String _s;
java.lang.Throwable exc;
StringSet self;
java.lang.String s;
boolean result;
}

\functions {
}

\predicates {
}

\problem {
     inReachableState
   & \forall StringSet s_0; 
       (     s_0.<created>@(java.lang.Object) = TRUE
           & !s_0 = null
        -> s_0.size@(StringSet) >  (jint)(0))
   & \forall StringSet s_0; 
       (     s_0.<created>@(java.lang.Object) = TRUE
           & !s_0 = null
        ->   !s_0.elements@(StringSet) = null
           &   s_0.elements@(StringSet).length
             = s_0.size@(StringSet))
   & (    !s = null
        &   self.elements@(StringSet)[(jint)(javaMod(s.hashCode@(java.lang.String)(),
                                                     self.size@(StringSet)))]
          = null
      | s = null
      | !s = null
      & !  self.elements@(StringSet)[(jint)(javaMod(s.hashCode@(java.lang.String)(),
                                                    self.size@(StringSet)))]
         = null)
   & (  self.<created>@(java.lang.Object) = TRUE
      & !self = null)
   & (s.<created>@(java.lang.Object) = TRUE | s = null)
-> {_s:=s}
     \[{
         exc=null;try {
           result=self.insert(_s)@StringSet;
         }  catch (java.lang.Throwable e) {
           exc=e;
         }
       }\] (  \forall StringSet s_0; 
                (       s_0.<created>@(java.lang.Object)
                      = TRUE
                    & !s_0 = null
                 -> s_0.size@(StringSet) >  (jint)(0))
            & \forall StringSet s_0; 
                (       s_0.<created>@(java.lang.Object)
                      = TRUE
                    & !s_0 = null
                 ->   !s_0.elements@(StringSet) = null
                    &   s_0.elements@(StringSet).length
                      = s_0.size@(StringSet)))

}

\proof {
(keyLog "0" (keyUser "geilmann" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "13117")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "castDelInt" (formula "8") (term "1,1,0,0,0,1"))
(rule "castDelInt" (formula "4") (term "1,0,1,0,0"))
(rule "castDelInt" (formula "4") (term "1,0,0,1,1"))
(rule "castDelInt" (formula "2") (term "1,1,0"))
(rule "translateJavaMod" (formula "4") (term "1,0,1,0,0"))
(rule "translateJavaMod" (formula "4") (term "1,0,0,1,1"))
(rule "inEqSimp_gtToGeq" (formula "8") (term "1,0,0,0,1"))
(rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "8") (term "0,0,1,0,0,0,1"))
(rule "inEqSimp_gtToGeq" (formula "2") (term "1,0"))
(rule "times_zero_1" (formula "2") (term "1,0,0,1,0"))
(rule "add_zero_right" (formula "2") (term "0,0,1,0"))
(rule "jmod_axiom" (formula "4") (term "1,0,1,0,0"))
(rule "polySimp_mulComm1" (formula "4") (term "1,1,0,1,0,0"))
(rule "jmod_axiom" (formula "4") (term "1,0,0,1,1"))
(rule "polySimp_mulComm1" (formula "4") (term "1,1,0,0,1,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0"))
(rule "mul_literals" (formula "2") (term "1,1,0"))
(rule "nnf_imp2or" (formula "3") (term "0"))
(rule "nnf_imp2or" (formula "2") (term "0"))
(rule "nnf_imp2or" (formula "8") (term "0,1,0,1"))
(rule "nnf_notAnd" (formula "3") (term "0,0"))
(rule "double_not" (formula "3") (term "1,0,0"))
(rule "nnf_notAnd" (formula "2") (term "0,0"))
(rule "double_not" (formula "2") (term "1,0,0"))
(rule "nnf_imp2or" (formula "8") (term "0,0,0,1"))
(rule "nnf_notAnd" (formula "8") (term "0,0,1,0,1"))
(rule "double_not" (formula "8") (term "1,0,0,1,0,1"))
(rule "nnf_notAnd" (formula "8") (term "0,0,0,0,1"))
(rule "double_not" (formula "8") (term "1,0,0,0,0,1"))
(rule "commute_or" (formula "3") (term "0,0"))
(rule "commute_or" (formula "2") (term "0,0"))
(rule "cnf_rightDist" (formula "3") (term "0"))
(rule "distr_forallAnd" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "commute_or" (formula "4") (term "0"))
(rule "assignment" (formula "9") (term "1"))
(builtin "Update Simplification" (formula "9"))
(rule "jdiv_axiom" (formula "5") (term "0,0,1,1,0,1,0,0"))
(rule "eqSymm" (formula "5"))
(rule "allLeft" (formula "2") (inst "t=self"))
(rule "replace_known_left" (formula "2") (term "0,1,0") (ifseqformula "8"))
(rule "concrete_not_1" (formula "2") (term "1,0"))
(rule "concrete_or_4" (formula "2") (term "0"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "10"))
(rule "concrete_or_2" (formula "2"))
(rule "allLeft" (formula "4") (inst "t=self"))
(rule "replace_known_left" (formula "4") (term "0,1,0") (ifseqformula "9"))
(rule "concrete_not_1" (formula "4") (term "1,0"))
(rule "concrete_or_4" (formula "4") (term "0"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "11"))
(rule "concrete_or_2" (formula "4"))
(rule "notLeft" (formula "4"))
(rule "allLeft" (formula "5") (inst "t=self"))
(rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "12"))
(rule "concrete_or_2" (formula "5") (term "0"))
(rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "9"))
(rule "concrete_not_1" (formula "5") (term "0"))
(rule "concrete_or_2" (formula "5"))
(rule "methodBodyExpand" (formula "13") (term "2"))
(rule "ifElseUnfold" (formula "13") (term "2") (inst "#boolv=b"))
(rule "variableDeclaration" (formula "13") (term "2") (newnames "b"))
(rule "compound_assignment_5" (formula "13") (term "2"))
(rule "ifElseUnfold" (formula "13") (term "2") (inst "#boolv=b_1"))
(rule "variableDeclaration" (formula "13") (term "2") (newnames "b_1"))
(rule "equality_comparison_new" (formula "13") (term "2"))
(builtin "Update Simplification" (formula "13"))
(rule "ifthenelse_negated_for" (formula "13"))
(rule "ifthenelse_split_for" (formula "13"))
(branch " s = null TRUE"
   (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "1"))
   (rule "concrete_or_3" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "replace_known_left" (formula "9") (term "0,0,1") (ifseqformula "1"))
   (rule "concrete_not_1" (formula "9") (term "0,1"))
   (rule "concrete_and_2" (formula "9") (term "1"))
   (rule "concrete_or_4" (formula "9"))
   (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "1"))
   (rule "concrete_or_3" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "applyEq" (formula "8") (term "0,0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "8") (term "0,0,1") (ifseqformula "1"))
   (rule "applyEq" (formula "12") (term "0") (ifseqformula "1"))
   (rule "applyEq" (formula "8") (term "0,0,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "8") (term "0,0,0,0,2,0") (ifseqformula "1"))
   (rule "ifElseSkipElse" (formula "12") (term "2"))
   (rule "assignment" (formula "12") (term "2"))
   (builtin "Update Simplification" (formula "12"))
   (rule "ifElseSkipElse" (formula "12") (term "2"))
   (builtin "Update Simplification" (formula "12"))
   (rule "assignment" (formula "12") (term "1"))
   (builtin "Update Simplification" (formula "12"))
   (rule "blockReturn" (formula "12") (term "1"))
   (rule "methodCallReturn" (formula "12") (term "1"))
   (rule "assignment" (formula "12") (term "1"))
   (builtin "Update Simplification" (formula "12"))
   (rule "methodCallEmpty" (formula "12") (term "1"))
   (rule "tryEmpty" (formula "12") (term "1"))
   (builtin "Update Simplification" (formula "12"))
   (rule "emptyModality" (formula "12"))
   (rule "andRight" (formula "12"))
   (branch " Case 1"
      (rule "allRight" (formula "12") (inst "sk=s_0_0"))
      (rule "orRight" (formula "12"))
      (rule "orRight" (formula "12"))
      (rule "notRight" (formula "12"))
      (rule "inEqSimp_geqRight" (formula "14"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "jdiv_axiom" (formula "10") (term "1"))
      (rule "eqSymm" (formula "10"))
      (rule "ifthenelse_split" (formula "10") (term "0"))
      (branch " null.hashCode@(java.lang.String)() >= 0 TRUE"
         (rule "eqSymm" (formula "11"))
         (rule "allLeft" (formula "6") (inst "t=s_0_0"))
         (rule "replace_known_left" (formula "6") (term "0,1,0") (ifseqformula "2"))
         (rule "concrete_not_1" (formula "6") (term "1,0"))
         (rule "concrete_or_4" (formula "6") (term "0"))
         (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "16"))
         (rule "concrete_or_2" (formula "6"))
         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "1"))
         (rule "qeq_literals" (formula "6") (term "0"))
         (rule "concrete_and_2" (formula "6"))
         (rule "closeFalse" (formula "6"))
      )
      (branch " null.hashCode@(java.lang.String)() >= 0 FALSE"
         (rule "eqSymm" (formula "10"))
         (rule "inEqSimp_geqRight" (formula "12"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "allLeft" (formula "7") (inst "t=s_0_0"))
         (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "16"))
         (rule "concrete_or_2" (formula "7") (term "0"))
         (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "3"))
         (rule "concrete_not_1" (formula "7") (term "0"))
         (rule "concrete_or_2" (formula "7"))
         (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "7"))
         (rule "qeq_literals" (formula "2") (term "0"))
         (rule "concrete_and_2" (formula "2"))
         (rule "closeFalse" (formula "2"))
      )
   )
   (branch " Case 2"
      (rule "allRight" (formula "12") (inst "sk=s_0_1"))
      (rule "orRight" (formula "12"))
      (rule "orRight" (formula "12"))
      (rule "notRight" (formula "12"))
      (rule "jdiv_axiom" (formula "9") (term "1"))
      (rule "eqSymm" (formula "9"))
      (rule "ifthenelse_split" (formula "9") (term "0"))
      (branch " null.hashCode@(java.lang.String)() >= 0 TRUE"
         (rule "eqSymm" (formula "10"))
         (rule "div_axiom" (formula "10") (term "1") (inst "quotient=quotient_2"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,1"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,1,1,1"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,2,1,1"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,1,1,1"))
         (rule "inEqSimp_contradEq7" (formula "10") (term "0") (ifseqformula "4"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0"))
         (rule "leq_literals" (formula "10") (term "0,0"))
         (rule "concrete_and_2" (formula "10") (term "0"))
         (rule "concrete_or_2" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "applyEq" (formula "13") (term "1") (ifseqformula "10"))
         (rule "inEqSimp_subsumption1" (formula "12") (term "0") (ifseqformula "4"))
         (rule "leq_literals" (formula "12") (term "0,0"))
         (rule "concrete_or_1" (formula "12") (term "0"))
         (rule "ifthenelse_true_for" (formula "12"))
         (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "11"))
         (rule "polySimp_rightDist" (formula "12") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0"))
         (rule "polySimp_rightDist" (formula "12") (term "0,0,0"))
         (rule "mul_literals" (formula "12") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor2b" (formula "12") (term "0,0"))
         (rule "add_literals" (formula "12") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,0"))
         (rule "add_literals" (formula "12") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12"))
         (rule "mul_literals" (formula "12") (term "1"))
         (rule "cut_direct" (formula "18") (term "0,0"))
         (branch " CUT: s_0_1.elements = null TRUE"
            (rule "concrete_not_1" (formula "19") (term "0"))
            (rule "concrete_and_2" (formula "19"))
            (rule "false_right" (formula "19"))
            (rule "allLeft" (formula "7") (inst "t=s_0_1"))
            (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "19"))
            (rule "concrete_or_2" (formula "7") (term "0"))
            (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "2"))
            (rule "concrete_not_1" (formula "7") (term "0"))
            (rule "concrete_or_2" (formula "7"))
            (rule "notLeft" (formula "7"))
            (rule "close" (formula "16") (ifseqformula "1"))
         )
         (branch " CUT: s_0_1.elements = null FALSE"
            (rule "concrete_not_2" (formula "19") (term "0"))
            (rule "concrete_and_1" (formula "19"))
            (rule "allLeft" (formula "5") (inst "t=s_0_1"))
            (rule "replace_known_left" (formula "5") (term "0,1,0") (ifseqformula "1"))
            (rule "concrete_not_1" (formula "5") (term "1,0"))
            (rule "concrete_or_4" (formula "5") (term "0"))
            (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "18"))
            (rule "concrete_or_2" (formula "5"))
            (rule "allLeft" (formula "9") (inst "t=s_0_1"))
            (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "19"))
            (rule "concrete_or_2" (formula "9") (term "0"))
            (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "1"))
            (rule "concrete_not_1" (formula "9") (term "0"))
            (rule "concrete_or_2" (formula "9"))
            (rule "close" (formula "21") (ifseqformula "9"))
         )
      )
      (branch " null.hashCode@(java.lang.String)() >= 0 FALSE"
         (rule "eqSymm" (formula "9"))
         (rule "inEqSimp_geqRight" (formula "11"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "div_axiom" (formula "10") (term "0,1") (inst "quotient=quotient_3"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,1"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,1,1,1"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,2,1,1"))
         (rule "inEqSimp_contradEq7" (formula "10") (term "0") (ifseqformula "5"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0"))
         (rule "leq_literals" (formula "10") (term "0,0"))
         (rule "concrete_and_2" (formula "10") (term "0"))
         (rule "concrete_or_2" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "applyEq" (formula "13") (term "0,1") (ifseqformula "10"))
         (rule "inEqSimp_subsumption1" (formula "12") (term "0") (ifseqformula "5"))
         (rule "leq_literals" (formula "12") (term "0,0"))
         (rule "concrete_or_1" (formula "12") (term "0"))
         (rule "ifthenelse_true_for" (formula "12"))
         (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "11"))
         (rule "polySimp_rightDist" (formula "12") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0"))
         (rule "polySimp_rightDist" (formula "12") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
         (rule "mul_literals" (formula "12") (term "0,0,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
         (rule "add_literals" (formula "12") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,0"))
         (rule "add_literals" (formula "12") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12"))
         (rule "mul_literals" (formula "12") (term "1"))
         (rule "cut_direct" (formula "18") (term "0,0"))
         (branch " CUT: s_0_1.elements = null TRUE"
            (rule "concrete_not_1" (formula "19") (term "0"))
            (rule "concrete_and_2" (formula "19"))
            (rule "false_right" (formula "19"))
            (rule "allLeft" (formula "8") (inst "t=s_0_1"))
            (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "19"))
            (rule "concrete_or_2" (formula "8") (term "0"))
            (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "3"))
            (rule "concrete_not_1" (formula "8") (term "0"))
            (rule "concrete_or_2" (formula "8"))
            (rule "notLeft" (formula "8"))
            (rule "close" (formula "16") (ifseqformula "1"))
         )
         (branch " CUT: s_0_1.elements = null FALSE"
            (rule "concrete_not_2" (formula "19") (term "0"))
            (rule "concrete_and_1" (formula "19"))
            (rule "allLeft" (formula "6") (inst "t=s_0_1"))
            (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "18"))
            (rule "concrete_or_2" (formula "6") (term "0"))
            (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "2"))
            (rule "concrete_not_1" (formula "6") (term "0"))
            (rule "concrete_or_2" (formula "6"))
            (rule "allLeft" (formula "10") (inst "t=s_0_1"))
            (rule "replace_known_left" (formula "10") (term "0,1,0") (ifseqformula "2"))
            (rule "concrete_not_1" (formula "10") (term "1,0"))
            (rule "concrete_or_4" (formula "10") (term "0"))
            (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "19"))
            (rule "concrete_or_2" (formula "10"))
            (rule "close" (formula "21") (ifseqformula "10"))
         )
      )
   )
)
(branch " s = null FALSE"
   (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "13"))
   (rule "concrete_or_4" (formula "10"))
   (rule "replace_known_right" (formula "8") (term "0,0,0,0") (ifseqformula "13"))
   (rule "concrete_not_2" (formula "8") (term "0,0,0"))
   (rule "concrete_and_1" (formula "8") (term "0,0"))
   (rule "replace_known_right" (formula "8") (term "0,0,1") (ifseqformula "13"))
   (rule "concrete_not_2" (formula "8") (term "0,1"))
   (rule "concrete_and_1" (formula "8") (term "1"))
   (rule "replace_known_right" (formula "8") (term "1,0") (ifseqformula "13"))
   (rule "concrete_or_4" (formula "8") (term "0"))
   (rule "neq_or" (formula "8"))
   (rule "true_left" (formula "8"))
   (rule "ifElseSkipThen" (formula "13") (term "2"))
   (rule "assignment" (formula "13") (term "2"))
   (builtin "Update Simplification" (formula "13"))
   (rule "compound_greater_equal_than_comparison_1" (formula "13") (term "2") (inst "#v0=j"))
   (rule "variableDeclarationAssign" (formula "13") (term "2"))
   (rule "variableDeclaration" (formula "13") (term "2") (newnames "j"))
   (rule "compound_modulo_1" (formula "13") (term "2") (inst "#v=j_1"))
   (rule "variableDeclarationAssign" (formula "13") (term "2"))
   (rule "variableDeclaration" (formula "13") (term "2") (newnames "j_1"))
   (rule "methodCallWithAssignment" (formula "13") (term "2") (inst "#v0=j_2"))
   (branch " Normal Execution (_s != null)"
      (builtin "Update Simplification" (formula "13"))
      (rule "variableDeclaration" (formula "13") (term "2") (newnames "j_2"))
      (rule "only_created_object_are_referenced_non_null" (formula "5") (term "0,0") (ifseqformula "8") (ifseqformula "1") (ifseqformula "10"))
      (rule "array_length_non_negative_3" (formula "6") (term "0") (ifseqformula "1") (ifseqformula "5") (ifseqformula "11"))
      (rule "applyEq" (formula "6") (term "0") (ifseqformula "7"))
      (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "2"))
      (rule "leq_literals" (formula "6") (term "0"))
      (rule "concrete_or_1" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "div_axiom" (formula "8") (term "1,0") (inst "quotient=quotient_0"))
      (rule "polySimp_mulComm0" (formula "8") (term "0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "8") (term "0,2,1,1"))
      (rule "polySimp_mulComm0" (formula "8") (term "0,1,1,1"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1,1,1,1"))
      (rule "inEqSimp_contradEq7" (formula "8") (term "0") (ifseqformula "2"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0"))
      (rule "leq_literals" (formula "8") (term "0,0"))
      (rule "concrete_and_2" (formula "8") (term "0"))
      (rule "concrete_or_2" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "8"))
      (rule "inEqSimp_subsumption1" (formula "10") (term "0") (ifseqformula "2"))
      (rule "leq_literals" (formula "10") (term "0,0"))
      (rule "concrete_or_1" (formula "10") (term "0"))
      (rule "ifthenelse_true_for" (formula "10"))
      (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "9"))
      (rule "polySimp_rightDist" (formula "10") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "10") (term "0"))
      (rule "polySimp_rightDist" (formula "10") (term "0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor2b" (formula "10") (term "0,0"))
      (rule "add_literals" (formula "10") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10"))
      (rule "mul_literals" (formula "10") (term "1"))
      (rule "div_axiom" (formula "11") (term "0,2,0") (inst "quotient=quotient_1"))
      (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "0,2,1,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,1"))
      (rule "inEqSimp_contradEq7" (formula "11") (term "0") (ifseqformula "2"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "11") (term "0,0,0"))
      (rule "leq_literals" (formula "11") (term "0,0"))
      (rule "concrete_and_2" (formula "11") (term "0"))
      (rule "concrete_or_2" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "applyEq" (formula "14") (term "0,2,0") (ifseqformula "11"))
      (rule "inEqSimp_subsumption1" (formula "13") (term "0") (ifseqformula "2"))
      (rule "leq_literals" (formula "13") (term "0,0"))
      (rule "concrete_or_1" (formula "13") (term "0"))
      (rule "ifthenelse_true_for" (formula "13"))
      (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "12"))
      (rule "polySimp_rightDist" (formula "13") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "13") (term "0"))
      (rule "polySimp_rightDist" (formula "13") (term "0,0,0"))
      (rule "mul_literals" (formula "13") (term "0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
      (rule "add_literals" (formula "13") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0"))
      (rule "add_literals" (formula "13") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13"))
      (rule "mul_literals" (formula "13") (term "1"))
      (rule "lengthGEq0" (newnames "L_0"))
      (builtin "Use Operation Contract" (formula "21") (term "2") (newnames "result_1") (contract "hashCode;;"))
      (branch " Pre"
         (builtin "Update Simplification" (formula "21"))
         (rule "replace_known_right" (formula "21") (term "0,1,1") (ifseqformula "20"))
         (rule "concrete_not_2" (formula "21") (term "1,1"))
         (rule "concrete_and_3" (formula "21") (term "1"))
         (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "17"))
         (rule "concrete_and_3" (formula "21"))
         (rule "close" (formula "21") (ifseqformula "2"))
      )
      (branch " Post"
         (builtin "Update Simplification" (formula "21"))
         (rule "inInt" (formula "21") (term "1,1,0,0"))
         (rule "concrete_and_3" (formula "21") (term "1,0,0"))
         (rule "impRight" (formula "21"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "2"))
         (rule "eqSymm" (formula "2"))
         (rule "blockEmpty" (formula "23") (term "3"))
         (rule "assignment" (formula "23") (term "3"))
         (builtin "Update Simplification" (formula "23"))
         (rule "assignmentModulo" (formula "23") (term "3"))
         (builtin "Update Simplification" (formula "23"))
         (rule "translateJavaMod" (formula "23") (term "2,1"))
         (rule "inEqSimp_contradEq7" (formula "23") (term "0,0") (ifseqformula "5"))
         (rule "times_zero_1" (formula "23") (term "1,0,0,0,0"))
         (rule "add_literals" (formula "23") (term "0,0,0,0"))
         (rule "leq_literals" (formula "23") (term "0,0,0"))
         (rule "concrete_and_2" (formula "23") (term "0,0"))
         (rule "concrete_not_2" (formula "23") (term "0"))
         (rule "ifthenelse_true_for" (formula "23"))
         (rule "greater_equal_than_comparison_new" (formula "23") (term "3"))
         (builtin "Update Simplification" (formula "23"))
         (rule "castDelInt" (formula "23") (term "0,0"))
         (rule "jmod_axiom" (formula "23") (term "0,0"))
         (rule "polySimp_mulComm1" (formula "23") (term "1,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "23") (term "0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
         (rule "polySimp_addComm0" (formula "23") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0"))
         (rule "polySimp_mulAssoc" (formula "23") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "23") (term "0,1,0"))
         (rule "jdiv_axiom" (formula "23") (term "0,0,0"))
         (rule "eqSymm" (formula "1"))
         (rule "ifthenelse_split_for" (formula "24"))
         (branch "    jdiv(result_0, self.size) * self.size
<= result_0
 + self.size * -1 TRUE"
            (rule "ifElseSkipElseConditionInBlock" (formula "25") (term "2"))
            (builtin "Update Simplification" (formula "25"))
            (rule "assignment" (formula "25") (term "1"))
            (builtin "Update Simplification" (formula "25"))
            (rule "blockEmpty" (formula "25") (term "1"))
            (rule "blockReturn" (formula "25") (term "1"))
            (rule "methodCallReturn" (formula "25") (term "1"))
            (rule "assignment" (formula "25") (term "1"))
            (builtin "Update Simplification" (formula "25"))
            (rule "methodCallEmpty" (formula "25") (term "1"))
            (rule "tryEmpty" (formula "25") (term "1"))
            (builtin "Update Simplification" (formula "25"))
            (rule "emptyModality" (formula "25"))
            (rule "andRight" (formula "25"))
            (branch " Case 1"
               (rule "allRight" (formula "25") (inst "sk=s_0_2"))
               (rule "orRight" (formula "25"))
               (rule "orRight" (formula "25"))
               (rule "notRight" (formula "25"))
               (rule "inEqSimp_geqRight" (formula "27"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "ifthenelse_split" (formula "21") (term "0"))
               (branch " s.hashCode@(java.lang.String)() >= 0 TRUE"
                  (rule "eqSymm" (formula "22"))
                  (rule "ifthenelse_split" (formula "4") (term "0"))
                  (branch " result_0 >= 0 TRUE"
                     (rule "eqSymm" (formula "5"))
                     (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "5"))
                     (rule "allLeft" (formula "11") (inst "t=s_0_2"))
                     (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "30"))
                     (rule "concrete_or_2" (formula "11") (term "0"))
                     (rule "replace_known_left" (formula "11") (term "0,0") (ifseqformula "2"))
                     (rule "concrete_not_1" (formula "11") (term "0"))
                     (rule "concrete_or_2" (formula "11"))
                     (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "11") (term "0"))
                     (rule "concrete_and_2" (formula "11"))
                     (rule "closeFalse" (formula "11"))
                  )
                  (branch " result_0 >= 0 FALSE"
                     (rule "eqSymm" (formula "4"))
                     (rule "inEqSimp_geqRight" (formula "25"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "5"))
                     (rule "polySimp_mulComm1" (formula "4") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1"))
                     (rule "polySimp_rightDist" (formula "4") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,1"))
                     (rule "allLeft" (formula "11") (inst "t=s_0_2"))
                     (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "30"))
                     (rule "concrete_or_2" (formula "11") (term "0"))
                     (rule "replace_known_left" (formula "11") (term "0,0") (ifseqformula "3"))
                     (rule "concrete_not_1" (formula "11") (term "0"))
                     (rule "concrete_or_2" (formula "11"))
                     (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "11") (term "0"))
                     (rule "concrete_and_2" (formula "11"))
                     (rule "closeFalse" (formula "11"))
                  )
               )
               (branch " s.hashCode@(java.lang.String)() >= 0 FALSE"
                  (rule "eqSymm" (formula "21"))
                  (rule "inEqSimp_geqRight" (formula "24"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "ifthenelse_split" (formula "5") (term "0"))
                  (branch " result_0 >= 0 TRUE"
                     (rule "eqSymm" (formula "6"))
                     (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "6"))
                     (rule "allLeft" (formula "12") (inst "t=s_0_2"))
                     (rule "replace_known_left" (formula "12") (term "0,1,0") (ifseqformula "3"))
                     (rule "concrete_not_1" (formula "12") (term "1,0"))
                     (rule "concrete_or_4" (formula "12") (term "0"))
                     (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "30"))
                     (rule "concrete_or_2" (formula "12"))
                     (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "12") (term "0"))
                     (rule "concrete_and_2" (formula "12"))
                     (rule "closeFalse" (formula "12"))
                  )
                  (branch " result_0 >= 0 FALSE"
                     (rule "eqSymm" (formula "5"))
                     (rule "inEqSimp_geqRight" (formula "25"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "6"))
                     (rule "polySimp_mulComm1" (formula "5") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1"))
                     (rule "polySimp_rightDist" (formula "5") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "5") (term "0,1"))
                     (rule "allLeft" (formula "12") (inst "t=s_0_2"))
                     (rule "replace_known_left" (formula "12") (term "0,1,0") (ifseqformula "4"))
                     (rule "concrete_not_1" (formula "12") (term "1,0"))
                     (rule "concrete_or_4" (formula "12") (term "0"))
                     (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "30"))
                     (rule "concrete_or_2" (formula "12"))
                     (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "12") (term "0"))
                     (rule "concrete_and_2" (formula "12"))
                     (rule "closeFalse" (formula "12"))
                  )
               )
            )
            (branch " Case 2"
               (rule "allRight" (formula "25") (inst "sk=s_0_3"))
               (rule "orRight" (formula "25"))
               (rule "orRight" (formula "25"))
               (rule "notRight" (formula "25"))
               (rule "ifthenelse_split" (formula "20") (term "0"))
               (branch " s.hashCode@(java.lang.String)() >= 0 TRUE"
                  (rule "eqSymm" (formula "21"))
                  (rule "ifthenelse_split" (formula "3") (term "0"))
                  (branch " result_0 >= 0 TRUE"
                     (rule "eqSymm" (formula "4"))
                     (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "4"))
                     (rule "div_axiom" (formula "4") (term "1") (inst "quotient=quotient_4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,2,1,1"))
                     (rule "inEqSimp_contradEq7" (formula "4") (term "0") (ifseqformula "10"))
                     (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "4") (term "0,0,0"))
                     (rule "leq_literals" (formula "4") (term "0,0"))
                     (rule "concrete_and_2" (formula "4") (term "0"))
                     (rule "concrete_or_2" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "4"))
                     (rule "polySimp_mulComm0" (formula "2") (term "0"))
                     (rule "applyEq" (formula "7") (term "1") (ifseqformula "4"))
                     (rule "inEqSimp_subsumption1" (formula "6") (term "0") (ifseqformula "12"))
                     (rule "leq_literals" (formula "6") (term "0,0"))
                     (rule "concrete_or_1" (formula "6") (term "0"))
                     (rule "ifthenelse_true_for" (formula "6"))
                     (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "6"))
                     (rule "andLeft" (formula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,1,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0"))
                     (rule "add_zero_right" (formula "2") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,1,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0"))
                     (rule "add_zero_right" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch " result_0 >= 0 FALSE"
                     (rule "eqSymm" (formula "3"))
                     (rule "inEqSimp_geqRight" (formula "24"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "4"))
                     (rule "polySimp_mulComm1" (formula "3") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "3") (term "0,1"))
                     (rule "div_axiom" (formula "4") (term "0,1") (inst "quotient=quotient_9"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,2,1,1"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1,1"))
                     (rule "inEqSimp_contradEq7" (formula "4") (term "0") (ifseqformula "10"))
                     (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "4") (term "0,0,0"))
                     (rule "leq_literals" (formula "4") (term "0,0"))
                     (rule "concrete_and_2" (formula "4") (term "0"))
                     (rule "concrete_or_2" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "4"))
                     (rule "polySimp_mulComm0" (formula "3") (term "0"))
                     (rule "applyEq" (formula "7") (term "0,1") (ifseqformula "4"))
                     (rule "inEqSimp_subsumption1" (formula "6") (term "0") (ifseqformula "12"))
                     (rule "leq_literals" (formula "6") (term "0,0"))
                     (rule "concrete_or_1" (formula "6") (term "0"))
                     (rule "ifthenelse_true_for" (formula "6"))
                     (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                     (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "6") (term "0"))
                     (rule "polySimp_rightDist" (formula "6") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "6") (term "0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0"))
                     (rule "add_literals" (formula "6") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "6") (term "1,0,0"))
                     (rule "add_zero_right" (formula "6") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                     (rule "mul_literals" (formula "6") (term "1"))
                     (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "5"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                     (rule "polySimp_mulAssoc" (formula "3") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "polySimp_pullOutFactor1" (formula "3") (term "0,0"))
                     (rule "add_literals" (formula "3") (term "1,0,0"))
                     (rule "times_zero_1" (formula "3") (term "0,0"))
                     (rule "add_zero_left" (formula "3") (term "0"))
                     (rule "inEqSimp_invertInEq1" (formula "3"))
                     (rule "times_zero_2" (formula "3") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "13"))
                     (rule "qeq_literals" (formula "3") (term "0"))
                     (rule "concrete_and_2" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
               )
               (branch " s.hashCode@(java.lang.String)() >= 0 FALSE"
                  (rule "eqSymm" (formula "20"))
                  (rule "inEqSimp_geqRight" (formula "23"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "ifthenelse_split" (formula "4") (term "0"))
                  (branch " result_0 >= 0 TRUE"
                     (rule "eqSymm" (formula "5"))
                     (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "5"))
                     (rule "cut_direct" (formula "29") (term "0,0"))
                     (branch " CUT: s_0_3.elements = null TRUE"
                        (rule "concrete_not_1" (formula "30") (term "0"))
                        (rule "concrete_and_2" (formula "30"))
                        (rule "false_right" (formula "30"))
                        (rule "div_axiom" (formula "6") (term "1") (inst "quotient=quotient_5"))
                        (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "0,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "0,2,1,1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,1,1,1,1"))
                        (rule "inEqSimp_contradEq7" (formula "6") (term "0") (ifseqformula "12"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "6") (term "0,0,0"))
                        (rule "leq_literals" (formula "6") (term "0,0"))
                        (rule "concrete_and_2" (formula "6") (term "0"))
                        (rule "concrete_or_2" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "6"))
                        (rule "polySimp_mulComm0" (formula "4") (term "0"))
                        (rule "applyEq" (formula "9") (term "1") (ifseqformula "6"))
                        (rule "inEqSimp_subsumption1" (formula "8") (term "0") (ifseqformula "14"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_1" (formula "8") (term "0"))
                        (rule "ifthenelse_true_for" (formula "8"))
                        (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "4"))
                        (rule "andLeft" (formula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "1,1,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0"))
                        (rule "add_zero_right" (formula "8") (term "0"))
                        (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "1,1,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0"))
                        (rule "add_zero_right" (formula "8") (term "0"))
                        (rule "leq_literals" (formula "8"))
                        (rule "closeFalse" (formula "8"))
                     )
                     (branch " CUT: s_0_3.elements = null FALSE"
                        (rule "concrete_not_2" (formula "30") (term "0"))
                        (rule "concrete_and_1" (formula "30"))
                        (rule "div_axiom" (formula "5") (term "1") (inst "quotient=quotient_6"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,2,1,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,1,1,1"))
                        (rule "inEqSimp_contradEq7" (formula "5") (term "0") (ifseqformula "11"))
                        (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                        (rule "add_literals" (formula "5") (term "0,0,0"))
                        (rule "leq_literals" (formula "5") (term "0,0"))
                        (rule "concrete_and_2" (formula "5") (term "0"))
                        (rule "concrete_or_2" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "5"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0"))
                        (rule "applyEq" (formula "8") (term "1") (ifseqformula "5"))
                        (rule "inEqSimp_subsumption1" (formula "7") (term "0") (ifseqformula "13"))
                        (rule "leq_literals" (formula "7") (term "0,0"))
                        (rule "concrete_or_1" (formula "7") (term "0"))
                        (rule "ifthenelse_true_for" (formula "7"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "7"))
                        (rule "andLeft" (formula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "1,1,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0"))
                        (rule "add_zero_right" (formula "3") (term "0"))
                        (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "1,1,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0"))
                        (rule "add_literals" (formula "3") (term "0"))
                        (rule "leq_literals" (formula "3"))
                        (rule "closeFalse" (formula "3"))
                     )
                  )
                  (branch " result_0 >= 0 FALSE"
                     (rule "eqSymm" (formula "4"))
                     (rule "inEqSimp_geqRight" (formula "24"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "5"))
                     (rule "polySimp_mulComm1" (formula "4") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1"))
                     (rule "polySimp_rightDist" (formula "4") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,1"))
                     (rule "cut_direct" (formula "29") (term "0,0"))
                     (branch " CUT: s_0_3.elements = null TRUE"
                        (rule "concrete_not_1" (formula "30") (term "0"))
                        (rule "concrete_and_2" (formula "30"))
                        (rule "false_right" (formula "30"))
                        (rule "div_axiom" (formula "6") (term "0,1") (inst "quotient=quotient_10"))
                        (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "0,2,1,1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,1,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "0,1,1,1"))
                        (rule "inEqSimp_contradEq7" (formula "6") (term "0") (ifseqformula "12"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "6") (term "0,0,0"))
                        (rule "leq_literals" (formula "6") (term "0,0"))
                        (rule "concrete_and_2" (formula "6") (term "0"))
                        (rule "concrete_or_2" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "6"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0"))
                        (rule "applyEq" (formula "9") (term "0,1") (ifseqformula "6"))
                        (rule "inEqSimp_subsumption1" (formula "8") (term "0") (ifseqformula "14"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_1" (formula "8") (term "0"))
                        (rule "ifthenelse_true_for" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "7"))
                        (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                        (rule "polySimp_mulAssoc" (formula "5") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "5") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "5") (term "0,0"))
                        (rule "add_literals" (formula "5") (term "1,0,0"))
                        (rule "times_zero_1" (formula "5") (term "0,0"))
                        (rule "add_zero_left" (formula "5") (term "0"))
                        (rule "inEqSimp_invertInEq1" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                        (rule "times_zero_2" (formula "5") (term "1"))
                        (rule "polySimp_elimOne" (formula "5") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "15"))
                        (rule "qeq_literals" (formula "5") (term "0"))
                        (rule "concrete_and_2" (formula "5"))
                        (rule "closeFalse" (formula "5"))
                     )
                     (branch " CUT: s_0_3.elements = null FALSE"
                        (rule "concrete_not_2" (formula "30") (term "0"))
                        (rule "concrete_and_1" (formula "30"))
                        (rule "div_axiom" (formula "5") (term "0,1") (inst "quotient=quotient_11"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,1,1,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "0,2,1,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1,1"))
                        (rule "inEqSimp_contradEq7" (formula "5") (term "0") (ifseqformula "11"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                        (rule "add_literals" (formula "5") (term "0,0,0"))
                        (rule "leq_literals" (formula "5") (term "0,0"))
                        (rule "concrete_and_2" (formula "5") (term "0"))
                        (rule "concrete_or_2" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "5"))
                        (rule "polySimp_mulComm0" (formula "4") (term "0"))
                        (rule "applyEq" (formula "8") (term "0,1") (ifseqformula "5"))
                        (rule "inEqSimp_subsumption1" (formula "7") (term "0") (ifseqformula "13"))
                        (rule "leq_literals" (formula "7") (term "0,0"))
                        (rule "concrete_or_1" (formula "7") (term "0"))
                        (rule "ifthenelse_true_for" (formula "7"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "mul_literals" (formula "7") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "6"))
                        (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                        (rule "polySimp_mulAssoc" (formula "4") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "0,0"))
                        (rule "add_zero_left" (formula "4") (term "0"))
                        (rule "inEqSimp_invertInEq1" (formula "4"))
                        (rule "times_zero_2" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "14") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "14") (term "0"))
                        (rule "concrete_and_2" (formula "14"))
                        (rule "closeFalse" (formula "14"))
                     )
                  )
               )
            )
         )
         (branch "    jdiv(result_0, self.size) * self.size
<= result_0
 + self.size * -1 FALSE"
            (rule "inEqSimp_leqRight" (formula "24"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
            (rule "mul_literals" (formula "1") (term "0,0,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
            (rule "ifElseSkipThenConditionInBlock" (formula "25") (term "2"))
            (rule "assignment" (formula "25") (term "2"))
            (builtin "Update Simplification" (formula "25"))
            (rule "blockEmpty" (formula "25") (term "2"))
            (rule "ifElseUnfold" (formula "25") (term "2") (inst "#boolv=b"))
            (rule "variableDeclaration" (formula "25") (term "2") (newnames "b_2"))
            (rule "compound_equality_comparison_1" (formula "25") (term "2") (inst "#v0=v_String"))
            (rule "variableDeclarationAssign" (formula "25") (term "2"))
            (rule "variableDeclaration" (formula "25") (term "2") (newnames "v_String"))
            (rule "eval_order_array_access5" (formula "25") (term "2") (inst "#v1=j") (inst "#ar1=var"))
            (rule "variableDeclarationAssign" (formula "25") (term "2"))
            (rule "variableDeclaration" (formula "25") (term "2") (newnames "var"))
            (rule "assignment" (formula "25") (term "2"))
            (builtin "Update Simplification" (formula "25"))
            (rule "variableDeclarationAssign" (formula "25") (term "3"))
            (rule "variableDeclaration" (formula "25") (term "3") (newnames "j_3"))
            (rule "compound_modulo_1" (formula "25") (term "3") (inst "#v=j_4"))
            (rule "variableDeclarationAssign" (formula "25") (term "3"))
            (rule "variableDeclaration" (formula "25") (term "3") (newnames "j_4"))
            (rule "methodCallWithAssignment" (formula "25") (term "3") (inst "#v0=j_5"))
            (branch " Normal Execution (_s != null)"
               (builtin "Update Simplification" (formula "25"))
               (rule "variableDeclaration" (formula "25") (term "3") (newnames "j_5"))
               (rule "div_axiom" (formula "2") (term "1,0") (inst "quotient=quotient_7"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,1"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,2,1,1"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,1,1,1"))
               (rule "inEqSimp_contradEq7" (formula "2") (term "0") (ifseqformula "8"))
               (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "2") (term "0,0,0"))
               (rule "leq_literals" (formula "2") (term "0,0"))
               (rule "concrete_and_2" (formula "2") (term "0"))
               (rule "concrete_or_2" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "2"))
               (rule "inEqSimp_subsumption1" (formula "4") (term "0") (ifseqformula "10"))
               (rule "leq_literals" (formula "4") (term "0,0"))
               (rule "concrete_or_1" (formula "4") (term "0"))
               (rule "ifthenelse_true_for" (formula "4"))
               (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "3"))
               (rule "polySimp_rightDist" (formula "4") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
               (rule "polySimp_elimOne" (formula "4") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0"))
               (rule "polySimp_rightDist" (formula "4") (term "0,0,0"))
               (rule "mul_literals" (formula "4") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "4") (term "0,0"))
               (rule "add_literals" (formula "4") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "4") (term "1,0,0"))
               (rule "add_literals" (formula "4") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1"))
               (rule "div_axiom" (formula "5") (term "0,2,0") (inst "quotient=quotient_8"))
               (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,1"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,1,1,1,1"))
               (rule "polySimp_mulComm0" (formula "5") (term "0,2,1,1"))
               (rule "polySimp_mulComm0" (formula "5") (term "0,1,1,1"))
               (rule "inEqSimp_contradEq7" (formula "5") (term "0") (ifseqformula "11"))
               (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "5") (term "0,0,0"))
               (rule "leq_literals" (formula "5") (term "0,0"))
               (rule "concrete_and_2" (formula "5") (term "0"))
               (rule "concrete_or_2" (formula "5"))
               (rule "andLeft" (formula "5"))
               (rule "andLeft" (formula "5"))
               (rule "applyEq" (formula "8") (term "0,2,0") (ifseqformula "5"))
               (rule "inEqSimp_subsumption1" (formula "7") (term "0") (ifseqformula "13"))
               (rule "leq_literals" (formula "7") (term "0,0"))
               (rule "concrete_or_1" (formula "7") (term "0"))
               (rule "ifthenelse_true_for" (formula "7"))
               (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
               (rule "polySimp_rightDist" (formula "7") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
               (rule "mul_literals" (formula "7") (term "0,0,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "1,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
               (rule "add_literals" (formula "7") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "7") (term "1,0,0"))
               (rule "add_literals" (formula "7") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7"))
               (rule "mul_literals" (formula "7") (term "1"))
               (builtin "Use Operation Contract" (formula "31") (term "3") (newnames "result_3") (contract "hashCode;;"))
               (branch " Pre"
                  (builtin "Update Simplification" (formula "31"))
                  (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "12"))
                  (rule "concrete_and_1" (formula "31"))
                  (rule "replace_known_right" (formula "31") (term "0,1") (ifseqformula "30"))
                  (rule "concrete_not_2" (formula "31") (term "1"))
                  (rule "concrete_and_3" (formula "31"))
                  (rule "close" (formula "31") (ifseqformula "27"))
               )
               (branch " Post"
                  (builtin "Update Simplification" (formula "31"))
                  (rule "inInt" (formula "31") (term "1,1,0,0"))
                  (rule "concrete_and_3" (formula "31") (term "1,0,0"))
                  (rule "impRight" (formula "31"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "2"))
                  (rule "eqSymm" (formula "2"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "12"))
                  (rule "eqSymm" (formula "2"))
                  (rule "applyEq" (formula "33") (term "2") (ifseqformula "2"))
                  (rule "blockEmpty" (formula "33") (term "4"))
                  (rule "assignment" (formula "33") (term "4"))
                  (builtin "Update Simplification" (formula "33"))
                  (rule "assignmentModulo" (formula "33") (term "4"))
                  (builtin "Update Simplification" (formula "33"))
                  (rule "translateJavaMod" (formula "33") (term "2,1"))
                  (rule "inEqSimp_contradEq7" (formula "33") (term "0,0") (ifseqformula "15"))
                  (rule "times_zero_1" (formula "33") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "33") (term "0,0,0,0"))
                  (rule "leq_literals" (formula "33") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "33") (term "0,0"))
                  (rule "concrete_not_2" (formula "33") (term "0"))
                  (rule "ifthenelse_true_for" (formula "33"))
                  (rule "assignment_array2" (formula "33") (term "4"))
                  (branch " Normal Execution (var != null)"
                     (builtin "Update Simplification" (formula "34"))
                     (builtin "Update Simplification" (formula "33"))
                     (rule "orRight" (formula "33"))
                     (rule "orRight" (formula "33"))
                     (rule "castDelInt" (formula "35") (term "1,2"))
                     (rule "castDelInt" (formula "34") (term "0"))
                     (rule "castDelInt" (formula "33") (term "1"))
                     (rule "inEqSimp_ltRight" (formula "34"))
                     (rule "times_zero_1" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "34"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "21"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "jmod_axiom" (formula "2") (term "0"))
                     (rule "polySimp_mulComm1" (formula "2") (term "1,0"))
                     (rule "jmod_axiom" (formula "1") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_mulComm1" (formula "1") (term "1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
                     (rule "mul_literals" (formula "1") (term "0,0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
                     (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                     (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "polySimp_rightDist" (formula "4") (term "0,0,0"))
                     (rule "mul_literals" (formula "4") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "4") (term "0,0"))
                     (rule "add_literals" (formula "4") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "4") (term "1,0,0"))
                     (rule "add_literals" (formula "4") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "mul_literals" (formula "4") (term "1"))
                     (rule "equality_comparison_new" (formula "34") (term "3"))
                     (builtin "Update Simplification" (formula "34"))
                     (rule "jmod_axiom" (formula "34") (term "1,0,0,0"))
                     (rule "polySimp_mulComm1" (formula "34") (term "1,1,0,0,0"))
                     (rule "ifthenelse_negated_for" (formula "34"))
                     (rule "ifthenelse_split_for" (formula "34"))
                     (branch "   self.elements[  result_0
                +   jdiv(result_0, self.size)
                  * self.size
                  * -1]
= null TRUE"
                        (rule "ifElseSkipElse" (formula "35") (term "2"))
                        (rule "assignment" (formula "35") (term "2"))
                        (builtin "Update Simplification" (formula "35"))
                        (rule "eval_order_array_access2" (formula "35") (term "2") (inst "#v0=j") (inst "#ar1=var"))
                        (rule "variableDeclarationAssign" (formula "35") (term "2"))
                        (rule "variableDeclaration" (formula "35") (term "2") (newnames "var_1"))
                        (rule "assignment" (formula "35") (term "2"))
                        (builtin "Update Simplification" (formula "35"))
                        (rule "variableDeclarationAssign" (formula "35") (term "3"))
                        (rule "variableDeclaration" (formula "35") (term "3") (newnames "j_6"))
                        (rule "compound_modulo_1" (formula "35") (term "3") (inst "#v=j_7"))
                        (rule "variableDeclarationAssign" (formula "35") (term "3"))
                        (rule "variableDeclaration" (formula "35") (term "3") (newnames "j_10"))
                        (rule "methodCallWithAssignment" (formula "35") (term "3") (inst "#v0=j_11"))
                        (branch " Normal Execution (_s != null)"
                           (builtin "Update Simplification" (formula "35"))
                           (rule "variableDeclaration" (formula "35") (term "3") (newnames "j_11"))
                           (builtin "Use Operation Contract" (formula "35") (term "3") (newnames "result_5") (contract "hashCode;;"))
                           (branch " Pre"
                              (builtin "Update Simplification" (formula "35"))
                              (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "16"))
                              (rule "concrete_and_1" (formula "35"))
                              (rule "replace_known_right" (formula "35") (term "0,1") (ifseqformula "34"))
                              (rule "concrete_not_2" (formula "35") (term "1"))
                              (rule "concrete_and_3" (formula "35"))
                              (rule "close" (formula "35") (ifseqformula "31"))
                           )
                           (branch " Post"
                              (builtin "Update Simplification" (formula "35"))
                              (rule "inInt" (formula "35") (term "1,1,0,0"))
                              (rule "concrete_and_3" (formula "35") (term "1,0,0"))
                              (rule "impRight" (formula "35"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "2"))
                              (rule "eqSymm" (formula "2"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "16"))
                              (rule "eqSymm" (formula "2"))
                              (rule "applyEq" (formula "37") (term "2") (ifseqformula "2"))
                              (rule "blockEmpty" (formula "37") (term "4"))
                              (rule "assignment" (formula "37") (term "4"))
                              (builtin "Update Simplification" (formula "37"))
                              (rule "assignmentModulo" (formula "37") (term "4"))
                              (builtin "Update Simplification" (formula "37"))
                              (rule "translateJavaMod" (formula "37") (term "2,1"))
                              (rule "inEqSimp_contradEq7" (formula "37") (term "0,0") (ifseqformula "19"))
                              (rule "times_zero_1" (formula "37") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "37") (term "0,0,0,0"))
                              (rule "leq_literals" (formula "37") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "37") (term "0,0"))
                              (rule "concrete_not_2" (formula "37") (term "0"))
                              (rule "ifthenelse_true_for" (formula "37"))
                              (rule "assignment_to_reference_array_component" (formula "37") (term "4"))
                              (branch " Normal Execution (var_1 != null)"
                                 (builtin "Update Simplification" (formula "38"))
                                 (builtin "Update Simplification" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "castDelInt" (formula "40") (term "2"))
                                 (rule "castDelInt" (formula "2") (term "0"))
                                 (rule "castDelInt" (formula "1") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "26"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "jmod_axiom" (formula "2") (term "0"))
                                 (rule "polySimp_mulComm1" (formula "2") (term "1,0"))
                                 (rule "jmod_axiom" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm1" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "array_store_static_analyse" (formula "1") (ifseqformula "35"))
                                 (rule "true_left" (formula "1"))
                                 (rule "methodCallReturn" (formula "37") (term "4"))
                                 (rule "assignment" (formula "37") (term "4"))
                                 (builtin "Update Simplification" (formula "37"))
                                 (rule "methodCallEmpty" (formula "37") (term "4"))
                                 (rule "tryEmpty" (formula "37") (term "4"))
                                 (builtin "Update Simplification" (formula "37"))
                                 (rule "emptyModality" (formula "37") (term "3"))
                                 (builtin "Update Simplification" (formula "37"))
                                 (rule "andRight" (formula "37"))
                                 (branch " Case 1"
                                    (rule "allRight" (formula "37") (inst "sk=s_0_6"))
                                    (rule "orRight" (formula "37"))
                                    (rule "orRight" (formula "37"))
                                    (rule "notRight" (formula "37"))
                                    (rule "inEqSimp_geqRight" (formula "39"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "ifthenelse_split" (formula "16") (term "0"))
                                    (branch " result_0 >= 0 TRUE"
                                       (rule "eqSymm" (formula "17"))
                                       (rule "applyEq" (formula "5") (term "0,0,1,1,0") (ifseqformula "17"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "0,1,1,0"))
                                       (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "17"))
                                       (rule "polySimp_mulComm0" (formula "6") (term "0"))
                                       (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "16"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "0"))
                                       (rule "ifthenelse_split" (formula "32") (term "0"))
                                       (branch " s.hashCode@(java.lang.String)() >= 0 TRUE"
                                          (rule "eqSymm" (formula "33"))
                                          (rule "allLeft" (formula "21") (inst "t=s_0_6"))
                                          (rule "replace_known_left" (formula "21") (term "0,1,0") (ifseqformula "2"))
                                          (rule "concrete_not_1" (formula "21") (term "1,0"))
                                          (rule "concrete_or_4" (formula "21") (term "0"))
                                          (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "40"))
                                          (rule "concrete_or_2" (formula "21"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "21"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                          (rule "concrete_and_2" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch " s.hashCode@(java.lang.String)() >= 0 FALSE"
                                          (rule "eqSymm" (formula "32"))
                                          (rule "inEqSimp_geqRight" (formula "35"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "allLeft" (formula "22") (inst "t=s_0_6"))
                                          (rule "replace_known_left" (formula "22") (term "0,1,0") (ifseqformula "3"))
                                          (rule "concrete_not_1" (formula "22") (term "1,0"))
                                          (rule "concrete_or_4" (formula "22") (term "0"))
                                          (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "40"))
                                          (rule "concrete_or_2" (formula "22"))
                                          (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "22"))
                                          (rule "qeq_literals" (formula "2") (term "0"))
                                          (rule "concrete_and_2" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                    )
                                    (branch " result_0 >= 0 FALSE"
                                       (rule "eqSymm" (formula "16"))
                                       (rule "inEqSimp_geqRight" (formula "36"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "17"))
                                       (rule "polySimp_mulComm1" (formula "10") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "10"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "1,0"))
                                       (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "17"))
                                       (rule "polySimp_mulComm1" (formula "7") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "7") (term "0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "7"))
                                       (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                                       (rule "polySimp_elimOne" (formula "7") (term "1,0"))
                                       (rule "applyEq" (formula "6") (term "0,0,1,1,0") (ifseqformula "17"))
                                       (rule "polySimp_mulComm1" (formula "6") (term "0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0"))
                                       (rule "polySimp_elimOne" (formula "6") (term "1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "6") (term "1,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "10") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "10") (term "0,1"))
                                       (rule "mul_literals" (formula "10") (term "0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                       (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "15"))
                                       (rule "applyEq" (formula "16") (term "0") (ifseqformula "7"))
                                       (rule "inEqSimp_homoInEq0" (formula "16"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,0"))
                                       (rule "polySimp_pullOutFactor2" (formula "16") (term "0"))
                                       (rule "add_literals" (formula "16") (term "1,0"))
                                       (rule "times_zero_1" (formula "16") (term "0"))
                                       (rule "qeq_literals" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "applyEq" (formula "16") (term "0") (ifseqformula "7"))
                                       (rule "inEqSimp_homoInEq1" (formula "16"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "16") (term "0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "16") (term "0,0"))
                                       (rule "add_literals" (formula "16") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "16") (term "1,0,0"))
                                       (rule "add_literals" (formula "16") (term "0,0"))
                                       (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                                       (rule "inEqSimp_homoInEq1" (formula "8"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "1,0"))
                                       (rule "polySimp_pullOutFactor2" (formula "8") (term "0"))
                                       (rule "add_literals" (formula "8") (term "1,0"))
                                       (rule "times_zero_1" (formula "8") (term "0"))
                                       (rule "leq_literals" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "applyEq" (formula "6") (term "1,1,0") (ifseqformula "7"))
                                       (rule "polySimp_pullOutFactor1" (formula "6") (term "1,0"))
                                       (rule "add_literals" (formula "6") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "6") (term "1,0"))
                                       (rule "applyEq" (formula "10") (term "0") (ifseqformula "7"))
                                       (rule "inEqSimp_homoInEq0" (formula "10"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "10") (term "0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "10") (term "0,0"))
                                       (rule "add_literals" (formula "10") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "10") (term "1,0,0"))
                                       (rule "add_literals" (formula "10") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                                       (rule "mul_literals" (formula "10") (term "1"))
                                       (rule "ifthenelse_split" (formula "31") (term "0"))
                                       (branch " s.hashCode@(java.lang.String)() >= 0 TRUE"
                                          (rule "eqSymm" (formula "32"))
                                          (rule "allLeft" (formula "20") (inst "t=s_0_6"))
                                          (rule "replace_known_left" (formula "20") (term "0,1,0") (ifseqformula "3"))
                                          (rule "concrete_not_1" (formula "20") (term "1,0"))
                                          (rule "concrete_or_4" (formula "20") (term "0"))
                                          (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "39"))
                                          (rule "concrete_or_2" (formula "20"))
                                          (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "20"))
                                          (rule "qeq_literals" (formula "2") (term "0"))
                                          (rule "concrete_and_2" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                       (branch " s.hashCode@(java.lang.String)() >= 0 FALSE"
                                          (rule "eqSymm" (formula "31"))
                                          (rule "inEqSimp_geqRight" (formula "34"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "allLeft" (formula "21") (inst "t=s_0_6"))
                                          (rule "replace_known_left" (formula "21") (term "0,1,0") (ifseqformula "4"))
                                          (rule "concrete_not_1" (formula "21") (term "1,0"))
                                          (rule "concrete_or_4" (formula "21") (term "0"))
                                          (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "39"))
                                          (rule "concrete_or_2" (formula "21"))
                                          (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "21") (term "0"))
                                          (rule "concrete_and_2" (formula "21"))
                                          (rule "closeFalse" (formula "21"))
                                       )
                                    )
                                 )
                                 (branch " Case 2"
                                    (rule "allRight" (formula "37") (inst "sk=s_0_7"))
                                    (rule "orRight" (formula "37"))
                                    (rule "orRight" (formula "37"))
                                    (rule "notRight" (formula "37"))
                                    (rule "ifthenelse_split" (formula "15") (term "0"))
                                    (branch " result_0 >= 0 TRUE"
                                       (rule "eqSymm" (formula "16"))
                                       (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "16"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "0"))
                                       (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "15"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "0"))
                                       (rule "applyEq" (formula "4") (term "0,0,1,1,0") (ifseqformula "14"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "0,1,1,0"))
                                       (rule "ifthenelse_split" (formula "31") (term "0"))
                                       (branch " s.hashCode@(java.lang.String)() >= 0 TRUE"
                                          (rule "eqSymm" (formula "32"))
                                          (rule "cut_direct" (formula "39") (term "0,0"))
                                          (branch " CUT: s_0_7.elements = null TRUE"
                                             (rule "concrete_not_1" (formula "40") (term "0"))
                                             (rule "concrete_and_2" (formula "40"))
                                             (rule "false_right" (formula "40"))
                                             (rule "allLeft" (formula "25") (inst "t=s_0_7"))
                                             (rule "replace_known_left" (formula "25") (term "0,1,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "25") (term "1,0"))
                                             (rule "concrete_or_4" (formula "25") (term "0"))
                                             (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "40"))
                                             (rule "concrete_or_2" (formula "25"))
                                             (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "25"))
                                             (rule "allLeft" (formula "21") (inst "t=s_0_7"))
                                             (rule "replace_known_left" (formula "21") (term "0,1,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "21") (term "1,0"))
                                             (rule "concrete_or_4" (formula "21") (term "0"))
                                             (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "41"))
                                             (rule "concrete_or_2" (formula "21"))
                                             (rule "applyEq" (formula "21") (term "0") (ifseqformula "26"))
                                             (rule "allLeft" (formula "23") (inst "t=s_0_7"))
                                             (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "42"))
                                             (rule "concrete_or_2" (formula "23") (term "0"))
                                             (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "23") (term "0"))
                                             (rule "concrete_or_2" (formula "23"))
                                             (rule "notLeft" (formula "23"))
                                             (rule "close" (formula "38") (ifseqformula "1"))
                                          )
                                          (branch " CUT: s_0_7.elements = null FALSE"
                                             (rule "concrete_not_2" (formula "40") (term "0"))
                                             (rule "concrete_and_1" (formula "40"))
                                             (rule "allLeft" (formula "24") (inst "t=s_0_7"))
                                             (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "39"))
                                             (rule "concrete_or_2" (formula "24") (term "0"))
                                             (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "1"))
                                             (rule "concrete_not_1" (formula "24") (term "0"))
                                             (rule "concrete_or_2" (formula "24"))
                                             (rule "close" (formula "41") (ifseqformula "24"))
                                          )
                                       )
                                       (branch " s.hashCode@(java.lang.String)() >= 0 FALSE"
                                          (rule "eqSymm" (formula "31"))
                                          (rule "inEqSimp_geqRight" (formula "34"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "cut_direct" (formula "39") (term "0,0"))
                                          (branch " CUT: s_0_7.elements = null TRUE"
                                             (rule "concrete_not_1" (formula "40") (term "0"))
                                             (rule "concrete_and_2" (formula "40"))
                                             (rule "false_right" (formula "40"))
                                             (rule "allLeft" (formula "23") (inst "t=s_0_7"))
                                             (rule "replace_known_left" (formula "23") (term "0,1,0") (ifseqformula "3"))
                                             (rule "concrete_not_1" (formula "23") (term "1,0"))
                                             (rule "concrete_or_4" (formula "23") (term "0"))
                                             (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "40"))
                                             (rule "concrete_or_2" (formula "23"))
                                             (rule "notLeft" (formula "23"))
                                             (rule "close" (formula "36") (ifseqformula "1"))
                                          )
                                          (branch " CUT: s_0_7.elements = null FALSE"
                                             (rule "concrete_not_2" (formula "40") (term "0"))
                                             (rule "concrete_and_1" (formula "40"))
                                             (rule "allLeft" (formula "25") (inst "t=s_0_7"))
                                             (rule "replace_known_left" (formula "25") (term "0,1,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "25") (term "1,0"))
                                             (rule "concrete_or_4" (formula "25") (term "0"))
                                             (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "39"))
                                             (rule "concrete_or_2" (formula "25"))
                                             (rule "close" (formula "41") (ifseqformula "25"))
                                          )
                                       )
                                    )
                                    (branch " result_0 >= 0 FALSE"
                                       (rule "eqSymm" (formula "15"))
                                       (rule "inEqSimp_geqRight" (formula "35"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0"))
                                       (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "16"))
                                       (rule "polySimp_mulComm1" (formula "6") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "6") (term "0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "6"))
                                       (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                                       (rule "polySimp_elimOne" (formula "6") (term "1,0"))
                                       (rule "applyEq" (formula "5") (term "0,0,1,1,0") (ifseqformula "16"))
                                       (rule "polySimp_mulComm1" (formula "5") (term "0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                                       (rule "polySimp_elimOne" (formula "5") (term "1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1,1,0"))
                                       (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "16"))
                                       (rule "polySimp_mulComm1" (formula "9") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "9"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1"))
                                       (rule "polySimp_rightDist" (formula "9") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "9") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "9") (term "0,1"))
                                       (rule "mul_literals" (formula "9") (term "0,0,1"))
                                       (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "14"))
                                       (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "6"))
                                       (rule "polySimp_pullOutFactor1" (formula "5") (term "1,0"))
                                       (rule "add_literals" (formula "5") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "5") (term "1,0"))
                                       (rule "applyEq" (formula "16") (term "0") (ifseqformula "6"))
                                       (rule "inEqSimp_homoInEq1" (formula "16"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "16") (term "0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "16") (term "0,0"))
                                       (rule "add_literals" (formula "16") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "16") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "16") (term "0,0"))
                                       (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                       (rule "inEqSimp_homoInEq1" (formula "7"))
                                       (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                                       (rule "polySimp_elimOne" (formula "7") (term "1,0"))
                                       (rule "polySimp_pullOutFactor2" (formula "7") (term "0"))
                                       (rule "add_literals" (formula "7") (term "1,0"))
                                       (rule "times_zero_1" (formula "7") (term "0"))
                                       (rule "leq_literals" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "applyEq" (formula "14") (term "0") (ifseqformula "6"))
                                       (rule "inEqSimp_homoInEq0" (formula "14"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,0"))
                                       (rule "polySimp_pullOutFactor2" (formula "14") (term "0"))
                                       (rule "add_literals" (formula "14") (term "1,0"))
                                       (rule "times_zero_1" (formula "14") (term "0"))
                                       (rule "qeq_literals" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "applyEq" (formula "9") (term "0") (ifseqformula "6"))
                                       (rule "inEqSimp_homoInEq0" (formula "9"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "9") (term "0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "9") (term "0,0"))
                                       (rule "add_literals" (formula "9") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "9") (term "1,0,0"))
                                       (rule "add_literals" (formula "9") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                       (rule "mul_literals" (formula "9") (term "1"))
                                       (rule "ifthenelse_split" (formula "30") (term "0"))
                                       (branch " s.hashCode@(java.lang.String)() >= 0 TRUE"
                                          (rule "eqSymm" (formula "31"))
                                          (rule "cut_direct" (formula "38") (term "0,0"))
                                          (branch " CUT: s_0_7.elements = null TRUE"
                                             (rule "concrete_not_1" (formula "39") (term "0"))
                                             (rule "concrete_and_2" (formula "39"))
                                             (rule "false_right" (formula "39"))
                                             (rule "polyDiv_pullOut" (formula "13") (term "0") (inst "polyDivCoeff=quotient_8"))
                                             (rule "polySimp_mulComm1" (formula "13") (term "1,0,0,2,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0,2,0"))
                                             (rule "polySimp_addComm0" (formula "13") (term "2,0"))
                                             (rule "applyEq" (formula "13") (term "0,1,0,1,2,0") (ifseqformula "7"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,2,0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "1,0,1,2,0"))
                                             (rule "polySimp_pullOutFactor2" (formula "13") (term "0,1,2,0"))
                                             (rule "add_literals" (formula "13") (term "1,0,1,2,0"))
                                             (rule "times_zero_1" (formula "13") (term "0,1,2,0"))
                                             (rule "inEqSimp_contradEq7" (formula "13") (term "0,0") (ifseqformula "19"))
                                             (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
                                             (rule "add_literals" (formula "13") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "13") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "13") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "13") (term "0"))
                                             (rule "polySimp_homoEq" (formula "13"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "13") (term "0"))
                                             (rule "polySimp_pullOutFactor1" (formula "13") (term "0,0"))
                                             (rule "add_literals" (formula "13") (term "1,0,0"))
                                             (rule "times_zero_1" (formula "13") (term "0,0"))
                                             (rule "add_zero_left" (formula "13") (term "0"))
                                             (rule "polySimp_invertEq" (formula "13"))
                                             (rule "times_zero_2" (formula "13") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "0"))
                                             (rule "polyDiv_zero" (formula "13") (term "0"))
                                             (rule "div_literals" (formula "13") (term "1,0"))
                                             (rule "inEqSimp_contradEq7" (formula "13") (term "0,0") (ifseqformula "19"))
                                             (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "13") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "13") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "13") (term "0"))
                                             (rule "eqClose" (formula "13"))
                                             (rule "true_left" (formula "13"))
                                             (rule "polyDiv_pullOut" (formula "10") (term "0") (inst "polyDivCoeff=quotient_8 * -1"))
                                             (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,2,0"))
                                             (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,2,0"))
                                             (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,2,0"))
                                             (rule "polySimp_addComm0" (formula "10") (term "2,0"))
                                             (rule "applyEq" (formula "10") (term "1,0,1,2,0") (ifseqformula "7"))
                                             (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,2,0"))
                                             (rule "add_literals" (formula "10") (term "1,0,1,2,0"))
                                             (rule "times_zero_1" (formula "10") (term "0,1,2,0"))
                                             (rule "inEqSimp_contradEq7" (formula "10") (term "0,0") (ifseqformula "18"))
                                             (rule "times_zero_1" (formula "10") (term "1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "10") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "10") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "10") (term "0"))
                                             (rule "polySimp_homoEq" (formula "10"))
                                             (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                                             (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0"))
                                             (rule "polySimp_elimOne" (formula "10") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "10") (term "0"))
                                             (rule "polySimp_addComm0" (formula "10") (term "0,0"))
                                             (rule "polySimp_sepNegMonomial" (formula "10"))
                                             (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                             (rule "polySimp_elimOne" (formula "10") (term "0"))
                                             (rule "polyDiv_zero" (formula "10") (term "0"))
                                             (rule "div_literals" (formula "10") (term "1,0"))
                                             (rule "inEqSimp_contradEq7" (formula "10") (term "0,0") (ifseqformula "18"))
                                             (rule "times_zero_1" (formula "10") (term "1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "10") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "10") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "10") (term "0"))
                                             (rule "polySimp_homoEq" (formula "10"))
                                             (rule "times_zero_2" (formula "10") (term "1,0"))
                                             (rule "add_zero_right" (formula "10") (term "0"))
                                             (rule "polySimp_sepPosMonomial" (formula "10"))
                                             (rule "applyEqRigid" (formula "12") (term "1,0") (ifseqformula "10"))
                                             (rule "polySimp_mulAssoc" (formula "12") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "12"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                                             (rule "polySimp_elimOne" (formula "12") (term "1,0"))
                                             (rule "applyEqRigid" (formula "11") (term "1,0") (ifseqformula "10"))
                                             (rule "polySimp_mulAssoc" (formula "11") (term "0"))
                                             (rule "inEqSimp_homoInEq0" (formula "11"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "1,0"))
                                             (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "7"))
                                             (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                                             (rule "add_literals" (formula "11") (term "1,0"))
                                             (rule "times_zero_1" (formula "11") (term "0"))
                                             (rule "qeq_literals" (formula "11"))
                                             (rule "true_left" (formula "11"))
                                             (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "7"))
                                             (rule "polySimp_addComm1" (formula "11") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
                                             (rule "add_literals" (formula "11") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "11") (term "1,0,0"))
                                             (rule "add_literals" (formula "11") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "0"))
                                             (rule "allLeft" (formula "18") (inst "t=s_0_7"))
                                             (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "1"))
                                             (rule "concrete_not_1" (formula "18") (term "1"))
                                             (rule "concrete_or_4" (formula "18"))
                                             (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "36"))
                                             (rule "concrete_or_2" (formula "18"))
                                             (rule "notLeft" (formula "18"))
                                             (rule "close" (formula "32") (ifseqformula "3"))
                                          )
                                          (branch " CUT: s_0_7.elements = null FALSE"
                                             (rule "concrete_not_2" (formula "39") (term "0"))
                                             (rule "concrete_and_1" (formula "39"))
                                             (rule "polyDiv_pullOut" (formula "12") (term "0") (inst "polyDivCoeff=quotient_8"))
                                             (rule "polySimp_mulComm1" (formula "12") (term "1,0,0,2,0"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0,2,0"))
                                             (rule "polySimp_addComm0" (formula "12") (term "2,0"))
                                             (rule "applyEq" (formula "12") (term "0,1,0,1,2,0") (ifseqformula "6"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,2,0"))
                                             (rule "polySimp_elimOne" (formula "12") (term "1,0,1,2,0"))
                                             (rule "polySimp_pullOutFactor2" (formula "12") (term "0,1,2,0"))
                                             (rule "add_literals" (formula "12") (term "1,0,1,2,0"))
                                             (rule "times_zero_1" (formula "12") (term "0,1,2,0"))
                                             (rule "inEqSimp_contradEq7" (formula "12") (term "0,0") (ifseqformula "18"))
                                             (rule "times_zero_1" (formula "12") (term "1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "12") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "12") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "12") (term "0"))
                                             (rule "polySimp_homoEq" (formula "12"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "12") (term "0"))
                                             (rule "polySimp_pullOutFactor1" (formula "12") (term "0,0"))
                                             (rule "add_literals" (formula "12") (term "1,0,0"))
                                             (rule "times_zero_1" (formula "12") (term "0,0"))
                                             (rule "add_zero_left" (formula "12") (term "0"))
                                             (rule "polySimp_invertEq" (formula "12"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                             (rule "times_zero_2" (formula "12") (term "1"))
                                             (rule "polySimp_elimOne" (formula "12") (term "0"))
                                             (rule "polyDiv_zero" (formula "12") (term "0"))
                                             (rule "div_literals" (formula "12") (term "1,0"))
                                             (rule "inEqSimp_contradEq7" (formula "12") (term "0,0") (ifseqformula "18"))
                                             (rule "times_zero_1" (formula "12") (term "1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "12") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "12") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "12") (term "0"))
                                             (rule "eqClose" (formula "12"))
                                             (rule "true_left" (formula "12"))
                                             (rule "polyDiv_pullOut" (formula "9") (term "0") (inst "polyDivCoeff=quotient_8 * -1"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,2,0"))
                                             (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,2,0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,2,0"))
                                             (rule "polySimp_addComm0" (formula "9") (term "2,0"))
                                             (rule "applyEq" (formula "9") (term "1,0,1,2,0") (ifseqformula "6"))
                                             (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,2,0"))
                                             (rule "add_literals" (formula "9") (term "1,0,1,2,0"))
                                             (rule "times_zero_1" (formula "9") (term "0,1,2,0"))
                                             (rule "inEqSimp_contradEq7" (formula "9") (term "0,0") (ifseqformula "17"))
                                             (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "9") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "9") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "9") (term "0"))
                                             (rule "polySimp_homoEq" (formula "9"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                                             (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0"))
                                             (rule "polySimp_elimOne" (formula "9") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "9") (term "0"))
                                             (rule "polySimp_addComm0" (formula "9") (term "0,0"))
                                             (rule "polySimp_sepNegMonomial" (formula "9"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                             (rule "polySimp_elimOne" (formula "9") (term "0"))
                                             (rule "polyDiv_zero" (formula "9") (term "0"))
                                             (rule "div_literals" (formula "9") (term "1,0"))
                                             (rule "inEqSimp_contradEq7" (formula "9") (term "0,0") (ifseqformula "17"))
                                             (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "9") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "9") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "9") (term "0"))
                                             (rule "polySimp_homoEq" (formula "9"))
                                             (rule "mul_literals" (formula "9") (term "1,0"))
                                             (rule "add_zero_right" (formula "9") (term "0"))
                                             (rule "polySimp_sepPosMonomial" (formula "9"))
                                             (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "9"))
                                             (rule "polySimp_mulAssoc" (formula "11") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "11"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "1,0"))
                                             (rule "applyEqRigid" (formula "10") (term "1,0") (ifseqformula "9"))
                                             (rule "polySimp_mulAssoc" (formula "10") (term "0"))
                                             (rule "inEqSimp_homoInEq0" (formula "10"))
                                             (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                                             (rule "polySimp_elimOne" (formula "10") (term "1,0"))
                                             (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "6"))
                                             (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
                                             (rule "add_literals" (formula "10") (term "1,0"))
                                             (rule "times_zero_1" (formula "10") (term "0"))
                                             (rule "qeq_literals" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "6"))
                                             (rule "polySimp_addComm1" (formula "10") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                                             (rule "add_literals" (formula "10") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "10") (term "1,0,0"))
                                             (rule "add_literals" (formula "10") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                                             (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                             (rule "polySimp_elimOne" (formula "10") (term "0"))
                                             (rule "allLeft" (formula "20") (inst "t=s_0_7"))
                                             (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "35"))
                                             (rule "concrete_or_2" (formula "20") (term "0"))
                                             (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "2"))
                                             (rule "concrete_not_1" (formula "20") (term "0"))
                                             (rule "concrete_or_2" (formula "20"))
                                             (rule "close" (formula "37") (ifseqformula "20"))
                                          )
                                       )
                                       (branch " s.hashCode@(java.lang.String)() >= 0 FALSE"
                                          (rule "eqSymm" (formula "30"))
                                          (rule "inEqSimp_geqRight" (formula "33"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "cut_direct" (formula "38") (term "0,0"))
                                          (branch " CUT: s_0_7.elements = null TRUE"
                                             (rule "concrete_not_1" (formula "39") (term "0"))
                                             (rule "concrete_and_2" (formula "39"))
                                             (rule "false_right" (formula "39"))
                                             (rule "polyDiv_pullOut" (formula "14") (term "0") (inst "polyDivCoeff=quotient_8"))
                                             (rule "polySimp_mulComm1" (formula "14") (term "1,0,0,2,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "0,1,0,0,2,0"))
                                             (rule "polySimp_addComm0" (formula "14") (term "2,0"))
                                             (rule "applyEq" (formula "14") (term "0,1,0,1,2,0") (ifseqformula "8"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,2,0"))
                                             (rule "polySimp_elimOne" (formula "14") (term "1,0,1,2,0"))
                                             (rule "polySimp_pullOutFactor2" (formula "14") (term "0,1,2,0"))
                                             (rule "add_literals" (formula "14") (term "1,0,1,2,0"))
                                             (rule "times_zero_1" (formula "14") (term "0,1,2,0"))
                                             (rule "inEqSimp_contradEq7" (formula "14") (term "0,0") (ifseqformula "20"))
                                             (rule "times_zero_1" (formula "14") (term "1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "14") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "14") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "14") (term "0"))
                                             (rule "polySimp_homoEq" (formula "14"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "14") (term "0"))
                                             (rule "polySimp_pullOutFactor1" (formula "14") (term "0,0"))
                                             (rule "add_literals" (formula "14") (term "1,0,0"))
                                             (rule "times_zero_1" (formula "14") (term "0,0"))
                                             (rule "add_zero_left" (formula "14") (term "0"))
                                             (rule "polySimp_invertEq" (formula "14"))
                                             (rule "times_zero_2" (formula "14") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                             (rule "polySimp_elimOne" (formula "14") (term "0"))
                                             (rule "polyDiv_zero" (formula "14") (term "0"))
                                             (rule "div_literals" (formula "14") (term "1,0"))
                                             (rule "inEqSimp_contradEq7" (formula "14") (term "0,0") (ifseqformula "20"))
                                             (rule "times_zero_1" (formula "14") (term "1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "14") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "14") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "14") (term "0"))
                                             (rule "eqClose" (formula "14"))
                                             (rule "true_left" (formula "14"))
                                             (rule "polyDiv_pullOut" (formula "11") (term "0") (inst "polyDivCoeff=quotient_8 * -1"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,2,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,2,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,2,0"))
                                             (rule "polySimp_addComm0" (formula "11") (term "2,0"))
                                             (rule "applyEq" (formula "11") (term "1,0,1,2,0") (ifseqformula "8"))
                                             (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1,2,0"))
                                             (rule "add_literals" (formula "11") (term "1,0,1,2,0"))
                                             (rule "times_zero_1" (formula "11") (term "0,1,2,0"))
                                             (rule "inEqSimp_contradEq7" (formula "11") (term "0,0") (ifseqformula "19"))
                                             (rule "times_zero_1" (formula "11") (term "1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "11") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "11") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "11") (term "0"))
                                             (rule "polySimp_homoEq" (formula "11"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                                             (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "11") (term "0"))
                                             (rule "polySimp_addComm0" (formula "11") (term "0,0"))
                                             (rule "polySimp_sepNegMonomial" (formula "11"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "0"))
                                             (rule "polyDiv_zero" (formula "11") (term "0"))
                                             (rule "div_literals" (formula "11") (term "1,0"))
                                             (rule "inEqSimp_contradEq7" (formula "11") (term "0,0") (ifseqformula "19"))
                                             (rule "times_zero_1" (formula "11") (term "1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "11") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "11") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "11") (term "0"))
                                             (rule "polySimp_homoEq" (formula "11"))
                                             (rule "times_zero_2" (formula "11") (term "1,0"))
                                             (rule "add_zero_right" (formula "11") (term "0"))
                                             (rule "polySimp_sepPosMonomial" (formula "11"))
                                             (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "11"))
                                             (rule "polySimp_mulAssoc" (formula "13") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "13"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "1,0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "1,0"))
                                             (rule "applyEqRigid" (formula "12") (term "1,0") (ifseqformula "11"))
                                             (rule "polySimp_mulAssoc" (formula "12") (term "0"))
                                             (rule "inEqSimp_homoInEq0" (formula "12"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                                             (rule "polySimp_elimOne" (formula "12") (term "1,0"))
                                             (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "8"))
                                             (rule "polySimp_pullOutFactor1" (formula "12") (term "0"))
                                             (rule "add_literals" (formula "12") (term "1,0"))
                                             (rule "times_zero_1" (formula "12") (term "0"))
                                             (rule "qeq_literals" (formula "12"))
                                             (rule "true_left" (formula "12"))
                                             (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "8"))
                                             (rule "polySimp_addComm1" (formula "12") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
                                             (rule "add_literals" (formula "12") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "12") (term "1,0,0"))
                                             (rule "add_literals" (formula "12") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                             (rule "polySimp_elimOne" (formula "12") (term "0"))
                                             (rule "allLeft" (formula "22") (inst "t=s_0_7"))
                                             (rule "replace_known_left" (formula "22") (term "0,1,0") (ifseqformula "4"))
                                             (rule "concrete_not_1" (formula "22") (term "1,0"))
                                             (rule "concrete_or_4" (formula "22") (term "0"))
                                             (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "36"))
                                             (rule "concrete_or_2" (formula "22"))
                                             (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "22"))
                                             (rule "allLeft" (formula "19") (inst "t=s_0_7"))
                                             (rule "replace_known_left" (formula "19") (term "0,1,0") (ifseqformula "4"))
                                             (rule "concrete_not_1" (formula "19") (term "1,0"))
                                             (rule "concrete_or_4" (formula "19") (term "0"))
                                             (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "37"))
                                             (rule "concrete_or_2" (formula "19"))
                                             (rule "notLeft" (formula "19"))
                                             (rule "close" (formula "33") (ifseqformula "1"))
                                          )
                                          (branch " CUT: s_0_7.elements = null FALSE"
                                             (rule "concrete_not_2" (formula "39") (term "0"))
                                             (rule "concrete_and_1" (formula "39"))
                                             (rule "polyDiv_pullOut" (formula "13") (term "0") (inst "polyDivCoeff=quotient_8"))
                                             (rule "polySimp_mulComm1" (formula "13") (term "1,0,0,2,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0,2,0"))
                                             (rule "polySimp_addComm0" (formula "13") (term "2,0"))
                                             (rule "applyEq" (formula "13") (term "0,1,0,1,2,0") (ifseqformula "7"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,2,0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "1,0,1,2,0"))
                                             (rule "polySimp_pullOutFactor2" (formula "13") (term "0,1,2,0"))
                                             (rule "add_literals" (formula "13") (term "1,0,1,2,0"))
                                             (rule "times_zero_1" (formula "13") (term "0,1,2,0"))
                                             (rule "inEqSimp_contradEq7" (formula "13") (term "0,0") (ifseqformula "19"))
                                             (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "13") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "13") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "13") (term "0"))
                                             (rule "polySimp_homoEq" (formula "13"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "13") (term "0"))
                                             (rule "polySimp_pullOutFactor1" (formula "13") (term "0,0"))
                                             (rule "add_literals" (formula "13") (term "1,0,0"))
                                             (rule "times_zero_1" (formula "13") (term "0,0"))
                                             (rule "add_zero_left" (formula "13") (term "0"))
                                             (rule "polySimp_invertEq" (formula "13"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                             (rule "times_zero_2" (formula "13") (term "1"))
                                             (rule "polySimp_elimOne" (formula "13") (term "0"))
                                             (rule "polyDiv_zero" (formula "13") (term "0"))
                                             (rule "div_literals" (formula "13") (term "1,0"))
                                             (rule "inEqSimp_contradEq7" (formula "13") (term "0,0") (ifseqformula "19"))
                                             (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "13") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "13") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "13") (term "0"))
                                             (rule "eqClose" (formula "13"))
                                             (rule "true_left" (formula "13"))
                                             (rule "polyDiv_pullOut" (formula "10") (term "0") (inst "polyDivCoeff=quotient_8 * -1"))
                                             (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,2,0"))
                                             (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,2,0"))
                                             (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,2,0"))
                                             (rule "polySimp_addComm0" (formula "10") (term "2,0"))
                                             (rule "applyEq" (formula "10") (term "1,0,1,2,0") (ifseqformula "7"))
                                             (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,2,0"))
                                             (rule "add_literals" (formula "10") (term "1,0,1,2,0"))
                                             (rule "times_zero_1" (formula "10") (term "0,1,2,0"))
                                             (rule "inEqSimp_contradEq7" (formula "10") (term "0,0") (ifseqformula "18"))
                                             (rule "times_zero_1" (formula "10") (term "1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "10") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "10") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "10") (term "0"))
                                             (rule "polySimp_homoEq" (formula "10"))
                                             (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                                             (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0"))
                                             (rule "polySimp_elimOne" (formula "10") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "10") (term "0"))
                                             (rule "polySimp_addComm0" (formula "10") (term "0,0"))
                                             (rule "polySimp_sepNegMonomial" (formula "10"))
                                             (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                             (rule "polySimp_elimOne" (formula "10") (term "0"))
                                             (rule "polyDiv_zero" (formula "10") (term "0"))
                                             (rule "div_literals" (formula "10") (term "1,0"))
                                             (rule "inEqSimp_contradEq7" (formula "10") (term "0,0") (ifseqformula "18"))
                                             (rule "times_zero_1" (formula "10") (term "1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "10") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "10") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "10") (term "0"))
                                             (rule "polySimp_homoEq" (formula "10"))
                                             (rule "times_zero_2" (formula "10") (term "1,0"))
                                             (rule "add_zero_right" (formula "10") (term "0"))
                                             (rule "polySimp_sepPosMonomial" (formula "10"))
                                             (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "10"))
                                             (rule "polySimp_mulAssoc" (formula "12") (term "0"))
                                             (rule "inEqSimp_homoInEq1" (formula "12"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                                             (rule "polySimp_elimOne" (formula "12") (term "1,0"))
                                             (rule "applyEqRigid" (formula "11") (term "1,0") (ifseqformula "10"))
                                             (rule "polySimp_mulAssoc" (formula "11") (term "0"))
                                             (rule "inEqSimp_homoInEq0" (formula "11"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "1,0"))
                                             (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "7"))
                                             (rule "polySimp_addComm1" (formula "12") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
                                             (rule "add_literals" (formula "12") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "12") (term "1,0,0"))
                                             (rule "add_literals" (formula "12") (term "0,0"))
                                             (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "7"))
                                             (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                                             (rule "add_literals" (formula "11") (term "1,0"))
                                             (rule "times_zero_1" (formula "11") (term "0"))
                                             (rule "qeq_literals" (formula "11"))
                                             (rule "true_left" (formula "11"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "0"))
                                             (rule "allLeft" (formula "21") (inst "t=s_0_7"))
                                             (rule "replace_known_left" (formula "21") (term "0,1,0") (ifseqformula "3"))
                                             (rule "concrete_not_1" (formula "21") (term "1,0"))
                                             (rule "concrete_or_4" (formula "21") (term "0"))
                                             (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "35"))
                                             (rule "concrete_or_2" (formula "21"))
                                             (rule "close" (formula "37") (ifseqformula "21"))
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch " Null Reference (var_1 = null)"
                                 (builtin "Update Simplification" (formula "38"))
                                 (builtin "Update Simplification" (formula "1"))
                                 (rule "close" (formula "35") (ifseqformula "1"))
                              )
                              (branch " Index Out of Bounds (var_1 != null, but j_6 Out of Bounds!)"
                                 (builtin "Update Simplification" (formula "38"))
                                 (builtin "Update Simplification" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "castDelInt" (formula "1") (term "1,0"))
                                 (rule "castDelInt" (formula "1") (term "0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                 (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "24"))
                                 (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
                                 (rule "jmod_axiom" (formula "1") (term "1,0,1"))
                                 (rule "polySimp_mulComm1" (formula "1") (term "1,1,0,1"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                                 (rule "jmod_axiom" (formula "1") (term "0,0"))
                                 (rule "polySimp_mulComm1" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "8"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0"))
                                 (rule "concrete_or_2" (formula "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "5"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0"))
                                 (rule "add_zero_right" (formula "1") (term "0"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch " Array Store Exception (incompatible dynamic element type of var_1 and _s)"
                                 (builtin "Update Simplification" (formula "38"))
                                 (builtin "Update Simplification" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "castDelInt" (formula "2") (term "0"))
                                 (rule "castDelInt" (formula "1") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "25"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "jmod_axiom" (formula "2") (term "0"))
                                 (rule "polySimp_mulComm1" (formula "2") (term "1,0"))
                                 (rule "jmod_axiom" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm1" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "array_store_static_analyse" (formula "34") (ifseqformula "35"))
                                 (rule "closeTrue" (formula "34"))
                              )
                           )
                           (branch " Exceptional Post"
                              (builtin "Update Simplification" (formula "35"))
                              (rule "impRight" (formula "35"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "2"))
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "close" (formula "35") (ifseqformula "3"))
                           )
                        )
                        (branch " Null Reference (_s = null)"
                           (builtin "Update Simplification" (formula "1"))
                           (rule "close" (formula "35") (ifseqformula "1"))
                        )
                     )
                     (branch "   self.elements[  result_0
                +   jdiv(result_0, self.size)
                  * self.size
                  * -1]
= null FALSE"
                        (rule "ifElseSkipThen" (formula "35") (term "2"))
                        (rule "assignment" (formula "35") (term "2"))
                        (builtin "Update Simplification" (formula "35"))
                        (rule "returnUnfold" (formula "35") (term "2") (inst "#v0=b"))
                        (rule "variableDeclarationAssign" (formula "35") (term "2"))
                        (rule "variableDeclaration" (formula "35") (term "2") (newnames "b_3"))
                        (rule "methodCallWithAssignmentUnfoldTarget" (formula "35") (term "2") (inst "#v0=v_String"))
                        (rule "variableDeclaration" (formula "35") (term "2") (newnames "v_String_1"))
                        (rule "eval_order_array_access5" (formula "35") (term "2") (inst "#v1=j") (inst "#ar1=var"))
                        (rule "variableDeclarationAssign" (formula "35") (term "2"))
                        (rule "variableDeclaration" (formula "35") (term "2") (newnames "var_2"))
                        (rule "assignment" (formula "35") (term "2"))
                        (builtin "Update Simplification" (formula "35"))
                        (rule "variableDeclarationAssign" (formula "35") (term "3"))
                        (rule "variableDeclaration" (formula "35") (term "3") (newnames "j_7"))
                        (rule "compound_modulo_1" (formula "35") (term "3") (inst "#v=j_8"))
                        (rule "variableDeclarationAssign" (formula "35") (term "3"))
                        (rule "variableDeclaration" (formula "35") (term "3") (newnames "j_8"))
                        (rule "methodCallWithAssignment" (formula "35") (term "3") (inst "#v0=j_9"))
                        (branch " Normal Execution (_s != null)"
                           (builtin "Update Simplification" (formula "35"))
                           (rule "variableDeclaration" (formula "35") (term "3") (newnames "j_9"))
                           (rule "only_created_object_are_referenced_by_arrays_non_null" (formula "34") (term "0") (ifseqformula "19") (ifseqformula "15") (ifseqformula "34"))
                           (builtin "Use Operation Contract" (formula "36") (term "3") (newnames "result_7") (contract "hashCode;;"))
                           (branch " Pre"
                              (builtin "Update Simplification" (formula "36"))
                              (rule "replace_known_left" (formula "36") (term "0,1") (ifseqformula "31"))
                              (rule "concrete_and_1" (formula "36") (term "1"))
                              (rule "replace_known_right" (formula "36") (term "0,1") (ifseqformula "34"))
                              (rule "concrete_not_2" (formula "36") (term "1"))
                              (rule "concrete_and_3" (formula "36"))
                              (rule "close" (formula "36") (ifseqformula "16"))
                           )
                           (branch " Post"
                              (builtin "Update Simplification" (formula "36"))
                              (rule "inInt" (formula "36") (term "1,1,0,0"))
                              (rule "concrete_and_3" (formula "36") (term "1,0,0"))
                              (rule "impRight" (formula "36"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "2"))
                              (rule "andLeft" (formula "1"))
                              (rule "eqSymm" (formula "1"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "16"))
                              (rule "eqSymm" (formula "1"))
                              (rule "applyEq" (formula "38") (term "2") (ifseqformula "1"))
                              (rule "blockEmpty" (formula "38") (term "4"))
                              (rule "assignment" (formula "38") (term "4"))
                              (builtin "Update Simplification" (formula "38"))
                              (rule "assignmentModulo" (formula "38") (term "4"))
                              (builtin "Update Simplification" (formula "38"))
                              (rule "translateJavaMod" (formula "38") (term "2,1"))
                              (rule "inEqSimp_contradEq7" (formula "38") (term "0,0") (ifseqformula "19"))
                              (rule "times_zero_1" (formula "38") (term "1,0,0,0,0"))
                              (rule "add_literals" (formula "38") (term "0,0,0,0"))
                              (rule "leq_literals" (formula "38") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "38") (term "0,0"))
                              (rule "concrete_not_2" (formula "38") (term "0"))
                              (rule "ifthenelse_true_for" (formula "38"))
                              (rule "assignment_array2" (formula "38") (term "4"))
                              (branch " Normal Execution (var_2 != null)"
                                 (builtin "Update Simplification" (formula "39"))
                                 (builtin "Update Simplification" (formula "38"))
                                 (rule "orRight" (formula "38"))
                                 (rule "orRight" (formula "38"))
                                 (rule "castDelInt" (formula "40") (term "1,2"))
                                 (rule "castDelInt" (formula "39") (term "0"))
                                 (rule "castDelInt" (formula "38") (term "1"))
                                 (rule "inEqSimp_ltRight" (formula "39"))
                                 (rule "mul_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_leqRight" (formula "39"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "25"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "jmod_axiom" (formula "2") (term "0"))
                                 (rule "polySimp_mulComm1" (formula "2") (term "1,0"))
                                 (rule "jmod_axiom" (formula "1") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm1" (formula "1") (term "1,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
                                 (rule "mul_literals" (formula "1") (term "0,0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
                                 (rule "methodCallWithAssignment" (formula "38") (term "3") (inst "#v0=b_4"))
                                 (branch " Normal Execution (v_String_1 != null)"
                                    (builtin "Update Simplification" (formula "38"))
                                    (rule "jmod_axiom" (formula "38") (term "1,0"))
                                    (rule "polySimp_mulComm1" (formula "38") (term "1,1,0"))
                                    (rule "variableDeclaration" (formula "38") (term "3") (newnames "b_5"))
                                    (rule "variableDeclarationAssign" (formula "38") (term "3"))
                                    (rule "variableDeclaration" (formula "38") (term "3") (newnames "arg0"))
                                    (rule "assignment" (formula "38") (term "3"))
                                    (builtin "Update Simplification" (formula "38"))
                                    (builtin "Use Operation Contract" (formula "38") (term "3") (newnames "arg0_1,result_9") (contract "equalsNormal;;"))
                                    (branch " Pre"
                                       (builtin "Update Simplification" (formula "38"))
                                       (rule "replace_known_left" (formula "38") (term "0,0") (ifseqformula "18"))
                                       (rule "concrete_and_1" (formula "38") (term "0"))
                                       (rule "replace_known_left" (formula "38") (term "0,1") (ifseqformula "33"))
                                       (rule "concrete_or_1" (formula "38") (term "1"))
                                       (rule "concrete_and_3" (formula "38"))
                                       (rule "jmod_axiom" (formula "38") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm1" (formula "38") (term "1,1,0,0,0"))
                                       (rule "replace_known_left" (formula "38") (term "0") (ifseqformula "3"))
                                       (rule "concrete_and_1" (formula "38"))
                                       (rule "notRight" (formula "38"))
                                       (rule "jmod_axiom" (formula "1") (term "1,0"))
                                       (rule "polySimp_mulComm1" (formula "1") (term "1,1,0"))
                                       (rule "close" (formula "38") (ifseqformula "1"))
                                    )
                                    (branch " Post"
                                       (builtin "Update Simplification" (formula "38"))
                                       (rule "impRight" (formula "38"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "replace_known_right" (formula "2") (term "0,0,0,1") (ifseqformula "38"))
                                       (rule "concrete_not_2" (formula "2") (term "0,0,1"))
                                       (rule "concrete_and_1" (formula "2") (term "0,1"))
                                       (rule "jmod_axiom" (formula "2") (term "1,0,0,1,1"))
                                       (rule "polySimp_mulComm1" (formula "2") (term "1,1,0,0,1,1"))
                                       (rule "instanceof_static_type" (formula "2") (term "0,0,1"))
                                       (rule "boolean_equal" (formula "2") (term "0,1"))
                                       (rule "concrete_and_1" (formula "2") (term "1"))
                                       (rule "castDel" (formula "2") (term "0,1,1"))
                                       (rule "blockEmpty" (formula "40") (term "2"))
                                       (rule "assignment" (formula "40") (term "2"))
                                       (builtin "Update Simplification" (formula "40"))
                                       (rule "methodCallReturn" (formula "40") (term "2"))
                                       (rule "assignment" (formula "40") (term "2"))
                                       (builtin "Update Simplification" (formula "40"))
                                       (rule "methodCallEmpty" (formula "40") (term "1"))
                                       (rule "tryEmpty" (formula "40") (term "1"))
                                       (builtin "Update Simplification" (formula "40"))
                                       (rule "emptyModality" (formula "40"))
                                       (rule "andRight" (formula "40"))
                                       (branch " Case 1"
                                          (rule "allRight" (formula "40") (inst "sk=s_0_8"))
                                          (rule "orRight" (formula "40"))
                                          (rule "orRight" (formula "40"))
                                          (rule "notRight" (formula "40"))
                                          (rule "inEqSimp_geqRight" (formula "42"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "ifthenelse_split" (formula "18") (term "0"))
                                          (branch " result_0 >= 0 TRUE"
                                             (rule "eqSymm" (formula "19"))
                                             (rule "applyEq" (formula "7") (term "0,0,1,1,0,0") (ifseqformula "19"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "0,1,1,0,0"))
                                             (rule "applyEq" (formula "4") (term "0,0,1,1,0,0,1") (ifseqformula "19"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "0,1,1,0,0,1"))
                                             (rule "applyEq" (formula "42") (term "0,0,1,1,0") (ifseqformula "19"))
                                             (rule "polySimp_mulComm0" (formula "42") (term "0,1,1,0"))
                                             (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "19"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "0"))
                                             (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "18"))
                                             (rule "polySimp_mulComm0" (formula "8") (term "0"))
                                             (rule "ifthenelse_split" (formula "34") (term "0"))
                                             (branch " s.hashCode@(java.lang.String)() >= 0 TRUE"
                                                (rule "eqSymm" (formula "35"))
                                                (rule "allLeft" (formula "23") (inst "t=s_0_8"))
                                                (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "43"))
                                                (rule "concrete_or_2" (formula "23") (term "0"))
                                                (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "2"))
                                                (rule "concrete_not_1" (formula "23") (term "0"))
                                                (rule "concrete_or_2" (formula "23"))
                                                (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "23"))
                                                (rule "qeq_literals" (formula "1") (term "0"))
                                                (rule "concrete_and_2" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch " s.hashCode@(java.lang.String)() >= 0 FALSE"
                                                (rule "eqSymm" (formula "34"))
                                                (rule "inEqSimp_geqRight" (formula "37"))
                                                (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "mul_literals" (formula "1") (term "1"))
                                                (rule "allLeft" (formula "24") (inst "t=s_0_8"))
                                                (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "43"))
                                                (rule "concrete_or_2" (formula "24") (term "0"))
                                                (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "3"))
                                                (rule "concrete_not_1" (formula "24") (term "0"))
                                                (rule "concrete_or_2" (formula "24"))
                                                (rule "inEqSimp_contradInEq0" (formula "24") (ifseqformula "2"))
                                                (rule "qeq_literals" (formula "24") (term "0"))
                                                (rule "concrete_and_2" (formula "24"))
                                                (rule "closeFalse" (formula "24"))
                                             )
                                          )
                                          (branch " result_0 >= 0 FALSE"
                                             (rule "eqSymm" (formula "18"))
                                             (rule "inEqSimp_geqRight" (formula "38"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "applyEq" (formula "5") (term "0,0,1,1,0,0,1") (ifseqformula "19"))
                                             (rule "polySimp_mulComm1" (formula "5") (term "0,1,1,0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,1"))
                                             (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1"))
                                             (rule "applyEq" (formula "8") (term "0,0,1,1,0,0") (ifseqformula "19"))
                                             (rule "polySimp_mulComm1" (formula "8") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                                             (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "19"))
                                             (rule "polySimp_mulComm1" (formula "12") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "12"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                                             (rule "polySimp_elimOne" (formula "12") (term "1,0"))
                                             (rule "applyEq" (formula "42") (term "0,0,1,1,0") (ifseqformula "19"))
                                             (rule "polySimp_mulComm1" (formula "42") (term "0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0"))
                                             (rule "polySimp_elimOne" (formula "42") (term "1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "42") (term "1,1,0"))
                                             (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "19"))
                                             (rule "polySimp_mulComm1" (formula "9") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "0,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "9"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
                                             (rule "polySimp_elimOne" (formula "9") (term "1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "1"))
                                             (rule "polySimp_rightDist" (formula "12") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                                             (rule "polySimp_rightDist" (formula "12") (term "0,1"))
                                             (rule "mul_literals" (formula "12") (term "0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                             (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "17"))
                                             (rule "applyEq" (formula "13") (term "0") (ifseqformula "9"))
                                             (rule "inEqSimp_homoInEq0" (formula "13"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "1,0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "13") (term "0"))
                                             (rule "polySimp_pullOutFactor2b" (formula "13") (term "0,0"))
                                             (rule "add_literals" (formula "13") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "13") (term "1,0,0"))
                                             (rule "add_literals" (formula "13") (term "0,0"))
                                             (rule "applyEq" (formula "43") (term "1,1,0") (ifseqformula "9"))
                                             (rule "polySimp_pullOutFactor1" (formula "43") (term "1,0"))
                                             (rule "add_literals" (formula "43") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "43") (term "1,0"))
                                             (rule "applyEq" (formula "19") (term "0") (ifseqformula "9"))
                                             (rule "inEqSimp_homoInEq1" (formula "19"))
                                             (rule "polySimp_mulLiterals" (formula "19") (term "1,0"))
                                             (rule "polySimp_elimOne" (formula "19") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "19") (term "0"))
                                             (rule "polySimp_pullOutFactor2b" (formula "19") (term "0,0"))
                                             (rule "add_literals" (formula "19") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "19") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "19") (term "0,0"))
                                             (rule "applyEq" (formula "5") (term "1,1,0,0,1") (ifseqformula "9"))
                                             (rule "polySimp_pullOutFactor1" (formula "5") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
                                             (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                                             (rule "inEqSimp_homoInEq1" (formula "10"))
                                             (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                                             (rule "polySimp_elimOne" (formula "10") (term "1,0"))
                                             (rule "polySimp_pullOutFactor2" (formula "10") (term "0"))
                                             (rule "add_literals" (formula "10") (term "1,0"))
                                             (rule "times_zero_1" (formula "10") (term "0"))
                                             (rule "leq_literals" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "applyEq" (formula "8") (term "1,1,0,0") (ifseqformula "9"))
                                             (rule "polySimp_pullOutFactor1" (formula "8") (term "1,0,0"))
                                             (rule "add_literals" (formula "8") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "8") (term "1,0,0"))
                                             (rule "applyEq" (formula "17") (term "0") (ifseqformula "9"))
                                             (rule "inEqSimp_homoInEq0" (formula "17"))
                                             (rule "polySimp_mulLiterals" (formula "17") (term "1,0"))
                                             (rule "polySimp_elimOne" (formula "17") (term "1,0"))
                                             (rule "polySimp_pullOutFactor2" (formula "17") (term "0"))
                                             (rule "add_literals" (formula "17") (term "1,0"))
                                             (rule "times_zero_1" (formula "17") (term "0"))
                                             (rule "qeq_literals" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                                             (rule "mul_literals" (formula "12") (term "1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "0"))
                                             (rule "ifthenelse_split" (formula "33") (term "0"))
                                             (branch " s.hashCode@(java.lang.String)() >= 0 TRUE"
                                                (rule "eqSymm" (formula "34"))
                                                (rule "allLeft" (formula "22") (inst "t=s_0_8"))
                                                (rule "replace_known_left" (formula "22") (term "0,1,0") (ifseqformula "3"))
                                                (rule "concrete_not_1" (formula "22") (term "1,0"))
                                                (rule "concrete_or_4" (formula "22") (term "0"))
                                                (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "42"))
                                                (rule "concrete_or_2" (formula "22"))
                                                (rule "inEqSimp_contradInEq0" (formula "22") (ifseqformula "2"))
                                                (rule "qeq_literals" (formula "22") (term "0"))
                                                (rule "concrete_and_2" (formula "22"))
                                                (rule "closeFalse" (formula "22"))
                                             )
                                             (branch " s.hashCode@(java.lang.String)() >= 0 FALSE"
                                                (rule "eqSymm" (formula "33"))
                                                (rule "inEqSimp_geqRight" (formula "36"))
                                                (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "mul_literals" (formula "1") (term "1"))
                                                (rule "allLeft" (formula "23") (inst "t=s_0_8"))
                                                (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "42"))
                                                (rule "concrete_or_2" (formula "23") (term "0"))
                                                (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "4"))
                                                (rule "concrete_not_1" (formula "23") (term "0"))
                                                (rule "concrete_or_2" (formula "23"))
                                                (rule "inEqSimp_contradInEq0" (formula "23") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "23") (term "0"))
                                                (rule "concrete_and_2" (formula "23"))
                                                (rule "closeFalse" (formula "23"))
                                             )
                                          )
                                       )
                                       (branch " Case 2"
                                          (rule "allRight" (formula "40") (inst "sk=s_0_9"))
                                          (rule "orRight" (formula "40"))
                                          (rule "orRight" (formula "40"))
                                          (rule "notRight" (formula "40"))
                                          (rule "ifthenelse_split" (formula "17") (term "0"))
                                          (branch " result_0 >= 0 TRUE"
                                             (rule "eqSymm" (formula "18"))
                                             (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "18"))
                                             (rule "polySimp_mulComm0" (formula "10") (term "0"))
                                             (rule "applyEq" (formula "6") (term "0,0,1,1,0,0") (ifseqformula "17"))
                                             (rule "polySimp_mulComm0" (formula "6") (term "0,1,1,0,0"))
                                             (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "17"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "0"))
                                             (rule "applyEq" (formula "39") (term "0,0,1,1,0") (ifseqformula "16"))
                                             (rule "polySimp_mulComm0" (formula "39") (term "0,1,1,0"))
                                             (rule "applyEq" (formula "3") (term "0,0,1,1,0,0,1") (ifseqformula "16"))
                                             (rule "polySimp_mulComm0" (formula "3") (term "0,1,1,0,0,1"))
                                             (rule "ifthenelse_split" (formula "33") (term "0"))
                                             (branch " s.hashCode@(java.lang.String)() >= 0 TRUE"
                                                (rule "eqSymm" (formula "34"))
                                                (rule "cut_direct" (formula "42") (term "0,0"))
                                                (branch " CUT: s_0_9.elements = null TRUE"
                                                   (rule "concrete_not_1" (formula "43") (term "0"))
                                                   (rule "concrete_and_2" (formula "43"))
                                                   (rule "false_right" (formula "43"))
                                                   (rule "allLeft" (formula "24") (inst "t=s_0_9"))
                                                   (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "43"))
                                                   (rule "concrete_or_2" (formula "24") (term "0"))
                                                   (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "2"))
                                                   (rule "concrete_not_1" (formula "24") (term "0"))
                                                   (rule "concrete_or_2" (formula "24"))
                                                   (rule "notLeft" (formula "24"))
                                                   (rule "close" (formula "38") (ifseqformula "1"))
                                                )
                                                (branch " CUT: s_0_9.elements = null FALSE"
                                                   (rule "concrete_not_2" (formula "43") (term "0"))
                                                   (rule "concrete_and_1" (formula "43"))
                                                   (rule "allLeft" (formula "22") (inst "t=s_0_9"))
                                                   (rule "replace_known_left" (formula "22") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "concrete_not_1" (formula "22") (term "1,0"))
                                                   (rule "concrete_or_4" (formula "22") (term "0"))
                                                   (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "42"))
                                                   (rule "concrete_or_2" (formula "22"))
                                                   (rule "allLeft" (formula "27") (inst "t=s_0_9"))
                                                   (rule "replace_known_right" (formula "27") (term "1") (ifseqformula "45"))
                                                   (rule "concrete_or_4" (formula "27"))
                                                   (rule "replace_known_left" (formula "27") (term "0,1") (ifseqformula "1"))
                                                   (rule "concrete_not_1" (formula "27") (term "1"))
                                                   (rule "concrete_or_4" (formula "27"))
                                                   (rule "close" (formula "43") (ifseqformula "27"))
                                                )
                                             )
                                             (branch " s.hashCode@(java.lang.String)() >= 0 FALSE"
                                                (rule "eqSymm" (formula "33"))
                                                (rule "inEqSimp_geqRight" (formula "36"))
                                                (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "mul_literals" (formula "1") (term "1"))
                                                (rule "cut_direct" (formula "42") (term "0,0"))
                                                (branch " CUT: s_0_9.elements = null TRUE"
                                                   (rule "concrete_not_1" (formula "43") (term "0"))
                                                   (rule "concrete_and_2" (formula "43"))
                                                   (rule "false_right" (formula "43"))
                                                   (rule "allLeft" (formula "25") (inst "t=s_0_9"))
                                                   (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "43"))
                                                   (rule "concrete_or_2" (formula "25") (term "0"))
                                                   (rule "replace_known_left" (formula "25") (term "0,0") (ifseqformula "3"))
                                                   (rule "concrete_not_1" (formula "25") (term "0"))
                                                   (rule "concrete_or_2" (formula "25"))
                                                   (rule "notLeft" (formula "25"))
                                                   (rule "close" (formula "38") (ifseqformula "1"))
                                                )
                                                (branch " CUT: s_0_9.elements = null FALSE"
                                                   (rule "concrete_not_2" (formula "43") (term "0"))
                                                   (rule "concrete_and_1" (formula "43"))
                                                   (rule "allLeft" (formula "27") (inst "t=s_0_9"))
                                                   (rule "replace_known_left" (formula "27") (term "0,1,0") (ifseqformula "2"))
                                                   (rule "concrete_not_1" (formula "27") (term "1,0"))
                                                   (rule "concrete_or_4" (formula "27") (term "0"))
                                                   (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "42"))
                                                   (rule "concrete_or_2" (formula "27"))
                                                   (rule "close" (formula "44") (ifseqformula "27"))
                                                )
                                             )
                                          )
                                          (branch " result_0 >= 0 FALSE"
                                             (rule "eqSymm" (formula "17"))
                                             (rule "inEqSimp_geqRight" (formula "37"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "18"))
                                             (rule "polySimp_mulComm1" (formula "11") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "11"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "1,0"))
                                             (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "18"))
                                             (rule "polySimp_mulComm1" (formula "8") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "1,0"))
                                             (rule "applyEq" (formula "4") (term "0,0,1,1,0,0,1") (ifseqformula "18"))
                                             (rule "polySimp_mulComm1" (formula "4") (term "0,1,1,0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,1"))
                                             (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,1"))
                                             (rule "applyEq" (formula "7") (term "0,0,1,1,0,0") (ifseqformula "18"))
                                             (rule "polySimp_mulComm1" (formula "7") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                                             (rule "applyEq" (formula "41") (term "0,0,1,1,0") (ifseqformula "18"))
                                             (rule "polySimp_mulComm1" (formula "41") (term "0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0"))
                                             (rule "polySimp_elimOne" (formula "41") (term "1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "41") (term "1,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1"))
                                             (rule "polySimp_rightDist" (formula "11") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "11") (term "1,1"))
                                             (rule "polySimp_rightDist" (formula "11") (term "0,1"))
                                             (rule "mul_literals" (formula "11") (term "0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                             (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "16"))
                                             (rule "applyEq" (formula "12") (term "0") (ifseqformula "8"))
                                             (rule "inEqSimp_homoInEq0" (formula "12"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                                             (rule "polySimp_elimOne" (formula "12") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "12") (term "0"))
                                             (rule "polySimp_pullOutFactor2b" (formula "12") (term "0,0"))
                                             (rule "add_literals" (formula "12") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "12") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "12") (term "0,0"))
                                             (rule "applyEq" (formula "18") (term "0") (ifseqformula "8"))
                                             (rule "inEqSimp_homoInEq1" (formula "18"))
                                             (rule "polySimp_mulLiterals" (formula "18") (term "1,0"))
                                             (rule "polySimp_elimOne" (formula "18") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "18") (term "0"))
                                             (rule "polySimp_pullOutFactor2b" (formula "18") (term "0,0"))
                                             (rule "add_literals" (formula "18") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "18") (term "1,0,0"))
                                             (rule "add_literals" (formula "18") (term "0,0"))
                                             (rule "applyEq" (formula "42") (term "1,1,0") (ifseqformula "8"))
                                             (rule "polySimp_pullOutFactor1" (formula "42") (term "1,0"))
                                             (rule "add_literals" (formula "42") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "42") (term "1,0"))
                                             (rule "applyEq" (formula "4") (term "1,1,0,0,1") (ifseqformula "8"))
                                             (rule "polySimp_pullOutFactor1" (formula "4") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "4") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "4") (term "1,0,0,1"))
                                             (rule "applyEq" (formula "17") (term "0") (ifseqformula "8"))
                                             (rule "inEqSimp_homoInEq0" (formula "17"))
                                             (rule "polySimp_mulLiterals" (formula "17") (term "1,0"))
                                             (rule "polySimp_elimOne" (formula "17") (term "1,0"))
                                             (rule "polySimp_pullOutFactor2" (formula "17") (term "0"))
                                             (rule "add_literals" (formula "17") (term "1,0"))
                                             (rule "times_zero_1" (formula "17") (term "0"))
                                             (rule "qeq_literals" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
                                             (rule "inEqSimp_homoInEq1" (formula "9"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
                                             (rule "polySimp_pullOutFactor0" (formula "9") (term "0"))
                                             (rule "add_literals" (formula "9") (term "1,0"))
                                             (rule "times_zero_1" (formula "9") (term "0"))
                                             (rule "leq_literals" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "applyEq" (formula "7") (term "1,1,0,0") (ifseqformula "8"))
                                             (rule "polySimp_pullOutFactor1" (formula "7") (term "1,0,0"))
                                             (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "7") (term "1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                                             (rule "mul_literals" (formula "11") (term "1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "0"))
                                             (rule "ifthenelse_split" (formula "32") (term "0"))
                                             (branch " s.hashCode@(java.lang.String)() >= 0 TRUE"
                                                (rule "eqSymm" (formula "33"))
                                                (rule "cut_direct" (formula "41") (term "0,0"))
                                                (branch " CUT: s_0_9.elements = null TRUE"
                                                   (rule "concrete_not_1" (formula "42") (term "0"))
                                                   (rule "concrete_and_2" (formula "42"))
                                                   (rule "false_right" (formula "42"))
                                                   (rule "allLeft" (formula "23") (inst "t=s_0_9"))
                                                   (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "42"))
                                                   (rule "concrete_or_2" (formula "23") (term "0"))
                                                   (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "3"))
                                                   (rule "concrete_not_1" (formula "23") (term "0"))
                                                   (rule "concrete_or_2" (formula "23"))
                                                   (rule "notLeft" (formula "23"))
                                                   (rule "close" (formula "37") (ifseqformula "1"))
                                                )
                                                (branch " CUT: s_0_9.elements = null FALSE"
                                                   (rule "concrete_not_2" (formula "42") (term "0"))
                                                   (rule "concrete_and_1" (formula "42"))
                                                   (rule "allLeft" (formula "25") (inst "t=s_0_9"))
                                                   (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "43"))
                                                   (rule "concrete_or_4" (formula "25"))
                                                   (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "41"))
                                                   (rule "concrete_or_2" (formula "25"))
                                                   (rule "notLeft" (formula "25"))
                                                   (rule "close" (formula "36") (ifseqformula "2"))
                                                )
                                             )
                                             (branch " s.hashCode@(java.lang.String)() >= 0 FALSE"
                                                (rule "eqSymm" (formula "32"))
                                                (rule "inEqSimp_geqRight" (formula "35"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "mul_literals" (formula "1") (term "1"))
                                                (rule "cut_direct" (formula "41") (term "0,0"))
                                                (branch " CUT: s_0_9.elements = null TRUE"
                                                   (rule "concrete_not_1" (formula "42") (term "0"))
                                                   (rule "concrete_and_2" (formula "42"))
                                                   (rule "false_right" (formula "42"))
                                                   (rule "allLeft" (formula "24") (inst "t=s_0_9"))
                                                   (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "42"))
                                                   (rule "concrete_or_2" (formula "24") (term "0"))
                                                   (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "4"))
                                                   (rule "concrete_not_1" (formula "24") (term "0"))
                                                   (rule "concrete_or_2" (formula "24"))
                                                   (rule "notLeft" (formula "24"))
                                                   (rule "close" (formula "37") (ifseqformula "1"))
                                                )
                                                (branch " CUT: s_0_9.elements = null FALSE"
                                                   (rule "concrete_not_2" (formula "42") (term "0"))
                                                   (rule "concrete_and_1" (formula "42"))
                                                   (rule "allLeft" (formula "26") (inst "t=s_0_9"))
                                                   (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "43"))
                                                   (rule "concrete_or_4" (formula "26"))
                                                   (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "41"))
                                                   (rule "concrete_or_2" (formula "26"))
                                                   (rule "notLeft" (formula "26"))
                                                   (rule "close" (formula "36") (ifseqformula "3"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch " Exceptional Post"
                                       (builtin "Update Simplification" (formula "38"))
                                       (rule "impRight" (formula "38"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "close" (formula "37") (ifseqformula "3"))
                                    )
                                 )
                                 (branch " Null Reference (v_String_1 = null)"
                                    (builtin "Update Simplification" (formula "39"))
                                    (builtin "Update Simplification" (formula "1"))
                                    (rule "jmod_axiom" (formula "1") (term "1,0"))
                                    (rule "polySimp_mulComm1" (formula "1") (term "1,1,0"))
                                    (rule "close" (formula "38") (ifseqformula "1"))
                                 )
                              )
                              (branch " Null Reference (var_2 = null)"
                                 (builtin "Update Simplification" (formula "39"))
                                 (builtin "Update Simplification" (formula "1"))
                                 (rule "close" (formula "35") (ifseqformula "1"))
                              )
                              (branch " Index Out of Bounds (var_2 != null, but j_7 Out of Bounds!)"
                                 (builtin "Update Simplification" (formula "39"))
                                 (builtin "Update Simplification" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "castDelInt" (formula "1") (term "0,1"))
                                 (rule "castDelInt" (formula "1") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "1") (term "0,0,1"))
                                 (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "24"))
                                 (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
                                 (rule "jmod_axiom" (formula "1") (term "1,0,1"))
                                 (rule "polySimp_mulComm1" (formula "1") (term "1,1,0,1"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                                 (rule "jmod_axiom" (formula "1") (term "0,0"))
                                 (rule "polySimp_mulComm1" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "8"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0"))
                                 (rule "concrete_or_2" (formula "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "5"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0"))
                                 (rule "add_zero_right" (formula "1") (term "0"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch " Exceptional Post"
                              (builtin "Update Simplification" (formula "36"))
                              (rule "impRight" (formula "36"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "2"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "close" (formula "35") (ifseqformula "3"))
                           )
                        )
                        (branch " Null Reference (_s = null)"
                           (builtin "Update Simplification" (formula "1"))
                           (rule "close" (formula "34") (ifseqformula "1"))
                        )
                     )
                  )
                  (branch " Null Reference (var = null)"
                     (builtin "Update Simplification" (formula "34"))
                     (builtin "Update Simplification" (formula "1"))
                     (rule "close" (formula "31") (ifseqformula "1"))
                  )
                  (branch " Index Out of Bounds (var != null, but j_3 Out of Bounds!)"
                     (builtin "Update Simplification" (formula "34"))
                     (builtin "Update Simplification" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "castDelInt" (formula "1") (term "1,0"))
                     (rule "castDelInt" (formula "1") (term "0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "20"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
                     (rule "jmod_axiom" (formula "1") (term "1,0,1"))
                     (rule "polySimp_mulComm1" (formula "1") (term "1,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                     (rule "jmod_axiom" (formula "1") (term "0,0"))
                     (rule "polySimp_mulComm1" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "1") (term "0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0"))
                     (rule "leq_literals" (formula "1") (term "0,0"))
                     (rule "concrete_and_2" (formula "1") (term "0"))
                     (rule "concrete_or_2" (formula "1"))
                     (rule "throwUnfold" (formula "34") (term "2") (inst "#v0=v_ArrayIndexOutOfBoundsException"))
                     (rule "variableDeclarationAssign" (formula "34") (term "2"))
                     (rule "variableDeclaration" (formula "34") (term "2") (newnames "v_ArrayIndexOutOfBoundsException"))
                     (rule "instanceCreationAssignment" (formula "34") (term "2") (inst "#v0=v_ArrayIndexOutOfBoundsException_1"))
                     (rule "variableDeclarationAssign" (formula "34") (term "2"))
                     (rule "variableDeclaration" (formula "34") (term "2") (newnames "v_ArrayIndexOutOfBoundsException_1"))
                     (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "34") (term "2") (inst "#v0=v_ArrayIndexOutOfBoundsException_2"))
                     (rule "variableDeclaration" (formula "34") (term "2") (newnames "v_ArrayIndexOutOfBoundsException_2"))
                     (rule "methodBodyExpand" (formula "34") (term "2"))
                     (rule "variableDeclaration" (formula "34") (term "2") (newnames "__NEW__"))
                     (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "34") (term "2") (inst "#v0=v_ArrayIndexOutOfBoundsException_3"))
                     (rule "variableDeclaration" (formula "34") (term "2") (newnames "v_ArrayIndexOutOfBoundsException_3"))
                     (rule "allocateInstance" (formula "34") (term "2"))
                     (builtin "Update Simplification" (formula "34"))
                     (rule "polySimp_addComm0" (formula "34") (term "3"))
                     (rule "blockEmpty" (formula "34") (term "6"))
                     (rule "assignment" (formula "34") (term "6"))
                     (builtin "Update Simplification" (formula "34"))
                     (rule "methodBodyExpand" (formula "34") (term "6"))
                     (rule "assignment" (formula "34") (term "6"))
                     (builtin "Update Simplification" (formula "34"))
                     (rule "assignment" (formula "34") (term "8"))
                     (builtin "Update Simplification" (formula "34"))
                     (rule "methodCallWithinClass" (formula "34") (term "10"))
                     (rule "methodBodyExpand" (formula "34") (term "10"))
                     (rule "methodCallSuper" (formula "34") (term "10"))
                     (rule "nextToCreate_non_negative" (formula "34") (term "0,8") (ifseqformula "15"))
                     (rule "methodBodyExpand" (formula "35") (term "10"))
                     (rule "methodCallSuper" (formula "35") (term "10"))
                     (rule "methodBodyExpand" (formula "35") (term "10"))
                     (rule "methodCallSuper" (formula "35") (term "10"))
                     (rule "methodBodyExpand" (formula "35") (term "10"))
                     (rule "methodCallSuper" (formula "35") (term "10"))
                     (rule "methodBodyExpand" (formula "35") (term "10"))
                     (rule "methodCallSuper" (formula "35") (term "10"))
                     (rule "methodBodyExpand" (formula "35") (term "10"))
                     (rule "methodCallEmpty" (formula "35") (term "10"))
                     (rule "blockEmpty" (formula "35") (term "10"))
                     (rule "assignment" (formula "35") (term "10"))
                     (builtin "Update Simplification" (formula "35"))
                     (rule "assignment" (formula "35") (term "12"))
                     (builtin "Update Simplification" (formula "35"))
                     (rule "methodCallEmpty" (formula "35") (term "14"))
                     (rule "methodCallEmpty" (formula "35") (term "14"))
                     (rule "methodCallEmpty" (formula "35") (term "14"))
                     (rule "methodCallEmpty" (formula "35") (term "14"))
                     (rule "methodCallEmpty" (formula "35") (term "14"))
                     (rule "blockEmpty" (formula "35") (term "14"))
                     (rule "methodCallReturnIgnoreResult" (formula "35") (term "14"))
                     (rule "methodCallReturn" (formula "35") (term "14"))
                     (rule "assignment" (formula "35") (term "14"))
                     (builtin "Update Simplification" (formula "35"))
                     (rule "methodCallEmpty" (formula "35") (term "14"))
                     (rule "blockEmpty" (formula "35") (term "14"))
                     (rule "assignment" (formula "35") (term "14"))
                     (builtin "Update Simplification" (formula "35"))
                     (rule "methodBodyExpand" (formula "35") (term "14"))
                     (rule "methodCallSuper" (formula "35") (term "14"))
                     (rule "methodBodyExpand" (formula "35") (term "14"))
                     (rule "methodCallSuper" (formula "35") (term "14"))
                     (rule "methodBodyExpand" (formula "35") (term "14"))
                     (rule "methodCallSuper" (formula "35") (term "14"))
                     (rule "methodBodyExpand" (formula "35") (term "14"))
                     (rule "methodCallSuper" (formula "35") (term "14"))
                     (rule "methodBodyExpand" (formula "35") (term "14"))
                     (rule "methodCallSuper" (formula "35") (term "14"))
                     (rule "methodBodyExpand" (formula "35") (term "14"))
                     (rule "methodCallEmpty" (formula "35") (term "14"))
                     (rule "blockEmpty" (formula "35") (term "14"))
                     (rule "assignment" (formula "35") (term "14"))
                     (builtin "Update Simplification" (formula "35"))
                     (rule "assignment" (formula "35") (term "14"))
                     (builtin "Update Simplification" (formula "35"))
                     (rule "methodCallEmpty" (formula "35") (term "14"))
                     (rule "methodCallEmpty" (formula "35") (term "14"))
                     (rule "methodCallEmpty" (formula "35") (term "14"))
                     (rule "methodCallEmpty" (formula "35") (term "14"))
                     (rule "methodCallEmpty" (formula "35") (term "14"))
                     (rule "blockEmpty" (formula "35") (term "14"))
                     (rule "assignment_write_attribute" (formula "35") (term "14"))
                     (branch " Normal Execution (v_ArrayIndexOutOfBoundsException_1 != null)"
                        (builtin "Update Simplification" (formula "36"))
                        (builtin "Update Simplification" (formula "35"))
                        (rule "repository_object_non_null" (formula "35"))
                        (rule "false_right" (formula "35"))
                        (rule "assignment" (formula "35") (term "14"))
                        (builtin "Update Simplification" (formula "35"))
                        (rule "methodCallParamThrow" (formula "35") (term "14"))
                        (builtin "Update Simplification" (formula "35"))
                        (rule "tryCatchThrow" (formula "35") (term "13"))
                        (rule "ifElseUnfold" (formula "35") (term "13") (inst "#boolv=b"))
                        (rule "variableDeclaration" (formula "35") (term "13") (newnames "b_4"))
                        (rule "equality_comparison_new" (formula "35") (term "13"))
                        (builtin "Update Simplification" (formula "35"))
                        (rule "repository_object_non_null" (formula "35") (term "0,0"))
                        (rule "concrete_not_2" (formula "35") (term "0"))
                        (rule "ifthenelse_true_for" (formula "35"))
                        (rule "ifElseSkipThen" (formula "35") (term "13"))
                        (rule "assignment" (formula "35") (term "13"))
                        (builtin "Update Simplification" (formula "35"))
                        (rule "ifElse" (formula "35") (term "13"))
                        (builtin "Update Simplification" (formula "35"))
                        (rule "repository_object_non_null" (formula "35") (term "0,0,0"))
                        (rule "ifthenelse_false" (formula "35") (term "0,0"))
                        (rule "instanceof_static_type" (formula "35") (term "0,0"))
                        (rule "boolean_equal" (formula "35") (term "0"))
                        (rule "ifthenelse_true_for" (formula "35"))
                        (rule "variableDeclaration" (formula "35") (term "13") (newnames "e"))
                        (rule "assignment" (formula "35") (term "13"))
                        (builtin "Update Simplification" (formula "35"))
                        (rule "assignment" (formula "35") (term "13"))
                        (builtin "Update Simplification" (formula "35"))
                        (rule "emptyModality" (formula "35") (term "11"))
                        (builtin "Update Simplification" (formula "35"))
                        (rule "andRight" (formula "35"))
                        (branch " Case 1"
                           (rule "allRight" (formula "35") (inst "sk=s_0_4"))
                           (rule "orRight" (formula "35"))
                           (rule "orRight" (formula "35"))
                           (rule "notRight" (formula "35"))
                           (rule "inEqSimp_geqRight" (formula "37"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "ifthenelse_split" (formula "14") (term "0"))
                           (branch " result_0 >= 0 TRUE"
                              (rule "eqSymm" (formula "15"))
                              (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "15"))
                              (rule "polySimp_mulComm0" (formula "4") (term "0"))
                              (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "15"))
                              (rule "polySimp_mulComm0" (formula "7") (term "0"))
                              (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "8"))
                              (rule "andLeft" (formula "4"))
                              (rule "inEqSimp_homoInEq1" (formula "4"))
                              (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                              (rule "add_literals" (formula "4") (term "1,1,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0"))
                              (rule "add_zero_right" (formula "4") (term "0"))
                              (rule "leq_literals" (formula "4"))
                              (rule "closeFalse" (formula "4"))
                           )
                           (branch " result_0 >= 0 FALSE"
                              (rule "eqSymm" (formula "14"))
                              (rule "inEqSimp_geqRight" (formula "34"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "15"))
                              (rule "polySimp_mulComm1" (formula "5") (term "0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "5"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,0"))
                              (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "15"))
                              (rule "polySimp_mulComm1" (formula "8") (term "0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "8"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1"))
                              (rule "polySimp_rightDist" (formula "5") (term "1"))
                              (rule "mul_literals" (formula "5") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1"))
                              (rule "polySimp_rightDist" (formula "8") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "8") (term "0,1"))
                              (rule "mul_literals" (formula "8") (term "0,0,1"))
                              (rule "inEqSimp_subsumption0" (formula "13") (ifseqformula "5"))
                              (rule "inEqSimp_homoInEq0" (formula "13") (term "0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "13") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "13") (term "0,0"))
                              (rule "add_literals" (formula "13") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "13") (term "1,0,0"))
                              (rule "add_zero_right" (formula "13") (term "0,0"))
                              (rule "qeq_literals" (formula "13") (term "0"))
                              (rule "concrete_or_1" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "5"))
                              (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "13") (term "0"))
                              (rule "polySimp_rightDist" (formula "13") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
                              (rule "add_literals" (formula "13") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
                              (rule "add_literals" (formula "13") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "13") (term "1,0,0"))
                              (rule "add_zero_right" (formula "13") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                              (rule "mul_literals" (formula "13") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "13"))
                              (rule "leq_literals" (formula "20") (term "0"))
                              (rule "concrete_or_1" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "8"))
                              (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0"))
                              (rule "polySimp_addComm1" (formula "14") (term "0,0"))
                              (rule "polySimp_pullOutFactor3b" (formula "14") (term "0"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
                              (rule "add_literals" (formula "14") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0"))
                              (rule "add_literals" (formula "14") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "14") (term "1,0,0"))
                              (rule "add_zero_right" (formula "14") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                              (rule "mul_literals" (formula "14") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "14") (ifseqformula "13"))
                              (rule "greater_literals" (formula "14") (term "0,0"))
                              (rule "concrete_and_1" (formula "14") (term "0"))
                              (rule "mul_literals" (formula "14") (term "1,0"))
                              (rule "leq_literals" (formula "14") (term "0"))
                              (rule "concrete_or_1" (formula "14"))
                              (rule "true_left" (formula "14"))
                              (rule "ifthenelse_split" (formula "31") (term "0"))
                              (branch " s.hashCode@(java.lang.String)() >= 0 TRUE"
                                 (rule "eqSymm" (formula "32"))
                                 (rule "allLeft" (formula "20") (inst "t=s_0_4"))
                                 (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "39"))
                                 (rule "concrete_or_2" (formula "20") (term "0"))
                                 (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "3"))
                                 (rule "concrete_not_1" (formula "20") (term "0"))
                                 (rule "concrete_or_2" (formula "20"))
                                 (rule "inEqSimp_contradInEq0" (formula "20") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "20") (term "0"))
                                 (rule "concrete_and_2" (formula "20"))
                                 (rule "closeFalse" (formula "20"))
                              )
                              (branch " s.hashCode@(java.lang.String)() >= 0 FALSE"
                                 (rule "eqSymm" (formula "31"))
                                 (rule "inEqSimp_geqRight" (formula "34"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "allLeft" (formula "21") (inst "t=s_0_4"))
                                 (rule "replace_known_left" (formula "21") (term "0,1,0") (ifseqformula "4"))
                                 (rule "concrete_not_1" (formula "21") (term "1,0"))
                                 (rule "concrete_or_4" (formula "21") (term "0"))
                                 (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "39"))
                                 (rule "concrete_or_2" (formula "21"))
                                 (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "21"))
                                 (rule "qeq_literals" (formula "3") (term "0"))
                                 (rule "concrete_and_2" (formula "3"))
                                 (rule "closeFalse" (formula "3"))
                              )
                           )
                        )
                        (branch " Case 2"
                           (rule "allRight" (formula "35") (inst "sk=s_0_5"))
                           (rule "orRight" (formula "35"))
                           (rule "orRight" (formula "35"))
                           (rule "notRight" (formula "35"))
                           (rule "ifthenelse_split" (formula "13") (term "0"))
                           (branch " result_0 >= 0 TRUE"
                              (rule "eqSymm" (formula "14"))
                              (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "14"))
                              (rule "polySimp_mulComm0" (formula "3") (term "0"))
                              (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "14"))
                              (rule "polySimp_mulComm0" (formula "6") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "3"))
                              (rule "andLeft" (formula "7"))
                              (rule "inEqSimp_homoInEq1" (formula "7"))
                              (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                              (rule "add_literals" (formula "7") (term "1,1,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0"))
                              (rule "add_zero_right" (formula "7") (term "0"))
                              (rule "leq_literals" (formula "7"))
                              (rule "closeFalse" (formula "7"))
                           )
                           (branch " result_0 >= 0 FALSE"
                              (rule "eqSymm" (formula "13"))
                              (rule "inEqSimp_geqRight" (formula "33"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "14"))
                              (rule "polySimp_mulComm1" (formula "4") (term "0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,0"))
                              (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "14"))
                              (rule "polySimp_mulComm1" (formula "7") (term "0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "7"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1"))
                              (rule "polySimp_rightDist" (formula "7") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                              (rule "mul_literals" (formula "7") (term "0,0,1"))
                              (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "4"))
                              (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "12") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "12") (term "0,0"))
                              (rule "add_literals" (formula "12") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "12") (term "1,0,0"))
                              (rule "add_zero_right" (formula "12") (term "0,0"))
                              (rule "qeq_literals" (formula "12") (term "0"))
                              (rule "concrete_or_1" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "4"))
                              (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "12") (term "0"))
                              (rule "polySimp_rightDist" (formula "12") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "12") (term "0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "12") (term "0,0,0"))
                              (rule "add_literals" (formula "12") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
                              (rule "add_literals" (formula "12") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "12") (term "1,0,0"))
                              (rule "add_zero_right" (formula "12") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                              (rule "mul_literals" (formula "12") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "12"))
                              (rule "leq_literals" (formula "19") (term "0"))
                              (rule "concrete_or_1" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "7"))
                              (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0"))
                              (rule "polySimp_addComm1" (formula "13") (term "0,0"))
                              (rule "polySimp_pullOutFactor3b" (formula "13") (term "0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
                              (rule "add_literals" (formula "13") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
                              (rule "add_literals" (formula "13") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "13") (term "1,0,0"))
                              (rule "add_zero_right" (formula "13") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                              (rule "mul_literals" (formula "13") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "13") (ifseqformula "12"))
                              (rule "mul_literals" (formula "13") (term "1,1,0"))
                              (rule "greater_literals" (formula "13") (term "0,0"))
                              (rule "concrete_and_1" (formula "13") (term "0"))
                              (rule "leq_literals" (formula "13") (term "0"))
                              (rule "concrete_or_1" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "ifthenelse_split" (formula "30") (term "0"))
                              (branch " s.hashCode@(java.lang.String)() >= 0 TRUE"
                                 (rule "eqSymm" (formula "31"))
                                 (rule "cut_direct" (formula "38") (term "0,0"))
                                 (branch " CUT: s_0_5.elements = null TRUE"
                                    (rule "concrete_not_1" (formula "39") (term "0"))
                                    (rule "concrete_and_2" (formula "39"))
                                    (rule "false_right" (formula "39"))
                                    (rule "allLeft" (formula "21") (inst "t=s_0_5"))
                                    (rule "replace_known_right" (formula "21") (term "0,0") (ifseqformula "39"))
                                    (rule "concrete_or_2" (formula "21") (term "0"))
                                    (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "3"))
                                    (rule "concrete_not_1" (formula "21") (term "0"))
                                    (rule "concrete_or_2" (formula "21"))
                                    (rule "notLeft" (formula "21"))
                                    (rule "close" (formula "35") (ifseqformula "1"))
                                 )
                                 (branch " CUT: s_0_5.elements = null FALSE"
                                    (rule "concrete_not_2" (formula "39") (term "0"))
                                    (rule "concrete_and_1" (formula "39"))
                                    (rule "allLeft" (formula "23") (inst "t=s_0_5"))
                                    (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "40"))
                                    (rule "concrete_or_4" (formula "23"))
                                    (rule "replace_known_left" (formula "23") (term "0,1") (ifseqformula "2"))
                                    (rule "concrete_not_1" (formula "23") (term "1"))
                                    (rule "concrete_or_4" (formula "23"))
                                    (rule "close" (formula "38") (ifseqformula "23"))
                                 )
                              )
                              (branch " s.hashCode@(java.lang.String)() >= 0 FALSE"
                                 (rule "eqSymm" (formula "30"))
                                 (rule "inEqSimp_geqRight" (formula "33"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "cut_direct" (formula "38") (term "0,0"))
                                 (branch " CUT: s_0_5.elements = null TRUE"
                                    (rule "concrete_not_1" (formula "39") (term "0"))
                                    (rule "concrete_and_2" (formula "39"))
                                    (rule "false_right" (formula "39"))
                                    (rule "allLeft" (formula "22") (inst "t=s_0_5"))
                                    (rule "replace_known_right" (formula "22") (term "0,0") (ifseqformula "39"))
                                    (rule "concrete_or_2" (formula "22") (term "0"))
                                    (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "4"))
                                    (rule "concrete_not_1" (formula "22") (term "0"))
                                    (rule "concrete_or_2" (formula "22"))
                                    (rule "notLeft" (formula "22"))
                                    (rule "close" (formula "35") (ifseqformula "1"))
                                 )
                                 (branch " CUT: s_0_5.elements = null FALSE"
                                    (rule "concrete_not_2" (formula "39") (term "0"))
                                    (rule "concrete_and_1" (formula "39"))
                                    (rule "allLeft" (formula "24") (inst "t=s_0_5"))
                                    (rule "replace_known_left" (formula "24") (term "0,1,0") (ifseqformula "3"))
                                    (rule "concrete_not_1" (formula "24") (term "1,0"))
                                    (rule "concrete_or_4" (formula "24") (term "0"))
                                    (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "38"))
                                    (rule "concrete_or_2" (formula "24"))
                                    (rule "close" (formula "40") (ifseqformula "24"))
                                 )
                              )
                           )
                        )
                     )
                     (branch " Null Reference (v_ArrayIndexOutOfBoundsException_1 = null)"
                        (builtin "Update Simplification" (formula "1"))
                        (rule "repository_object_non_null" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
               (branch " Exceptional Post"
                  (builtin "Update Simplification" (formula "31"))
                  (rule "impRight" (formula "31"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "2"))
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "2"))
                  (rule "close" (formula "31") (ifseqformula "3"))
               )
            )
            (branch " Null Reference (_s = null)"
               (builtin "Update Simplification" (formula "1"))
               (rule "close" (formula "25") (ifseqformula "1"))
            )
         )
      )
      (branch " Exceptional Post"
         (builtin "Update Simplification" (formula "21"))
         (rule "impRight" (formula "21"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "notLeft" (formula "2"))
         (rule "close" (formula "21") (ifseqformula "3"))
      )
   )
   (branch " Null Reference (_s = null)"
      (builtin "Update Simplification" (formula "1"))
      (rule "close" (formula "13") (ifseqformula "1"))
   )
)
)

}
