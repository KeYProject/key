\settings {
"#Proof-Settings-Config-File
#Thu Sep 17 14:57:24 CEST 2009
[General]SoundNotification=false
[View]FontIndex=2
[StrategyProperty]GOALCHOOSER_OPTIONS_KEY=GOALCHOOSER_DEFAULT
[General]UseOCL=false
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_HIGH
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_LOW
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_LOW
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[DecisionProcedure]Timeout=60
[View]ShowWholeTaclet=false
[General]ProofAssistant=false
[View]MaxTooltipLines=40
[General]DnDDirectionSensitive=true
[SimultaneousUpdateSimplifier]EagerSimplification=true
[General]StupidMode=true
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=500
[Libraries]Default=acc.key-false, stringRules.key-false, /Users/geilmann/.key/libraries/deprecatedRules.key-false, /Users/geilmann/.key/libraries/acc.key-false, /Users/geilmann/.key/libraries/stringRules.key-false, deprecatedRules.key-false
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_NONE
[Choice]DefaultChoices=throughout-throughout\:toutOn , transactions-transactions\:transactionsOn , assertions-assertions\:on , intRules-intRules\:arithmeticSemanticsIgnoringOF , programRules-programRules\:Java , initialisation-initialisation\:disableStaticInitialisation , transactionAbort-transactionAbort\:abortOn , nullPointerPolicy-nullPointerPolicy\:nullCheck , stringRules-stringRules\:withoutStringPool , javacard-javacard\:jcOff
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[DecisionProcedure]ActiveRule=_noname_
[General]UseJML=true
[View]HideClosedSubtrees=false
[Choice]Choices=throughout-throughout\:toutOn-throughout\:toutOff , transactions-transactions\:transactionsOn-transactions\:transactionsOff , assertions-assertions\:on-assertions\:off-assertions\:safe , intRules-intRules\:javaSemantics-intRules\:arithmeticSemanticsIgnoringOF-intRules\:arithmeticSemanticsCheckingOF , programRules-programRules\:Java-programRules\:ODL , initialisation-initialisation\:enableStaticInitialisation-initialisation\:disableStaticInitialisation , transactionAbort-transactionAbort\:abortOn-transactionAbort\:abortOff , nullPointerPolicy-nullPointerPolicy\:noNullCheck-nullPointerPolicy\:nullCheck , stringRules-stringRules\:withStringPool-stringRules\:withoutStringPool-stringRules\:platformIndependent , javacard-javacard\:jcOff-javacard\:jcOn
[View]HideIntermediateProofsteps=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\include "./example1.key";

\programVariables {
java.lang.String _s;
java.lang.Throwable exc;
StringSet self;
java.lang.String s;
boolean result;
}

\functions {
}

\predicates {
}

\problem {
     inReachableState
   & \forall StringSet s_0; 
       (     s_0.<created>@(java.lang.Object) = TRUE
           & !s_0 = null
        ->   !s_0.elements@(StringSet) = null
           &   s_0.elements@(StringSet).length
             = s_0.size@(StringSet))
   & \forall StringSet s_0; 
       (     s_0.<created>@(java.lang.Object) = TRUE
           & !s_0 = null
        -> s_0.size@(StringSet) >  (jint)(0))
   & (  self.<created>@(java.lang.Object) = TRUE
      & !self = null)
   & (s.<created>@(java.lang.Object) = TRUE | s = null)
   & s = null
-> {_s:=s}
     \<{
         exc=null;try {
           result=self.insert(_s)@StringSet;
         }  catch (java.lang.Throwable e) {
           exc=e;
         }
       }\> (!result = TRUE & exc = null)

}

\proof {
(keyLog "0" (keyUser "geilmann" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "1189")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "castDelInt" (formula "3") (term "1,1,0"))
(rule "replace_known_left" (formula "5") (term "1") (ifseqformula "6"))
(rule "concrete_or_3" (formula "5"))
(rule "true_left" (formula "5"))
(rule "inEqSimp_gtToGeq" (formula "3") (term "1,0"))
(rule "times_zero_1" (formula "3") (term "1,0,0,1,0"))
(rule "add_zero_right" (formula "3") (term "0,0,1,0"))
(rule "applyEq" (formula "7") (term "0") (ifseqformula "5"))
(rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0"))
(rule "mul_literals" (formula "3") (term "1,1,0"))
(rule "nnf_imp2or" (formula "2") (term "0"))
(rule "nnf_imp2or" (formula "3") (term "0"))
(rule "nnf_notAnd" (formula "2") (term "0,0"))
(rule "double_not" (formula "2") (term "1,0,0"))
(rule "nnf_notAnd" (formula "3") (term "0,0"))
(rule "double_not" (formula "3") (term "1,0,0"))
(rule "commute_or" (formula "2") (term "0,0"))
(rule "commute_or" (formula "3") (term "0,0"))
(rule "cnf_rightDist" (formula "2") (term "0"))
(rule "distr_forallAnd" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "commute_or" (formula "3") (term "0"))
(rule "assignment" (formula "8") (term "1"))
(builtin "Update Simplification" (formula "8"))
(rule "methodBodyExpand" (formula "8") (term "2"))
(rule "ifElseUnfold" (formula "8") (term "2") (inst "#boolv=b"))
(rule "variableDeclaration" (formula "8") (term "2") (newnames "b"))
(rule "evaluate_lazy_or" (formula "8") (term "2"))
(rule "ifElseUnfold" (formula "8") (term "2") (inst "#boolv=b_1"))
(rule "variableDeclaration" (formula "8") (term "2") (newnames "b_1"))
(rule "equality_comparison_new" (formula "8") (term "2"))
(builtin "Update Simplification" (formula "8"))
(rule "eqClose" (formula "8") (term "0,0"))
(rule "concrete_not_1" (formula "8") (term "0"))
(rule "ifthenelse_false_for" (formula "8"))
(rule "ifElseSkipElse" (formula "8") (term "2"))
(rule "assignment" (formula "8") (term "2"))
(builtin "Update Simplification" (formula "8"))
(rule "ifElseSkipElseConditionInBlock" (formula "8") (term "2"))
(builtin "Update Simplification" (formula "8"))
(rule "assignment" (formula "8") (term "1"))
(builtin "Update Simplification" (formula "8"))
(rule "blockEmpty" (formula "8") (term "1"))
(rule "blockReturn" (formula "8") (term "1"))
(rule "methodCallReturn" (formula "8") (term "1"))
(rule "assignment" (formula "8") (term "1"))
(builtin "Update Simplification" (formula "8"))
(rule "methodCallEmpty" (formula "8") (term "2"))
(rule "tryEmpty" (formula "8") (term "2"))
(rule "emptyModality" (formula "8") (term "2"))
(builtin "Update Simplification" (formula "8"))
(rule "boolean_not_equal_2" (formula "8") (term "0,0"))
(rule "eqClose" (formula "8") (term "1"))
(rule "concrete_not_2" (formula "8") (term "0"))
(rule "eq_and" (formula "8"))
(rule "closeTrue" (formula "8"))
)

}
