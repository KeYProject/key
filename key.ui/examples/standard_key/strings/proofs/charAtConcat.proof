\settings {
"#Proof-Settings-Config-File
#Tue Jul 21 12:32:21 CEST 2009
[General]SoundNotification=false
[View]FontIndex=2
[StrategyProperty]GOALCHOOSER_OPTIONS_KEY=GOALCHOOSER_DEFAULT
[General]UseOCL=false
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_HIGH
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_LOW
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_LOW
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[DecisionProcedure]Timeout=60
[View]ShowWholeTaclet=false
[General]ProofAssistant=false
[View]MaxTooltipLines=40
[General]DnDDirectionSensitive=true
[SimultaneousUpdateSimplifier]EagerSimplification=true
[General]StupidMode=true
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=500
[Libraries]Default=acc.key-false, stringRules.key-false, /Users/geilmann/.key/libraries/deprecatedRules.key-false, /Users/geilmann/.key/libraries/acc.key-false, /Users/geilmann/.key/libraries/stringRules.key-false, deprecatedRules.key-false
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_NONE
[Choice]DefaultChoices=transactions-transactions\:transactionsOn , throughout-throughout\:toutOn , assertions-assertions\:on , programRules-programRules\:Java , intRules-intRules\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\:disableStaticInitialisation , transactionAbort-transactionAbort\:abortOn , nullPointerPolicy-nullPointerPolicy\:nullCheck , stringRules-stringRules\:withoutStringPool , javacard-javacard\:jcOff
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[DecisionProcedure]ActiveRule=_noname_
[General]UseJML=false
[View]HideClosedSubtrees=false
[Choice]Choices=transactions-transactions\:transactionsOn-transactions\:transactionsOff , throughout-throughout\:toutOn-throughout\:toutOff , assertions-assertions\:on-assertions\:off-assertions\:safe , programRules-programRules\:Java-programRules\:ODL , intRules-intRules\:javaSemantics-intRules\:arithmeticSemanticsIgnoringOF-intRules\:arithmeticSemanticsCheckingOF , initialisation-initialisation\:enableStaticInitialisation-initialisation\:disableStaticInitialisation , transactionAbort-transactionAbort\:abortOn-transactionAbort\:abortOff , nullPointerPolicy-nullPointerPolicy\:noNullCheck-nullPointerPolicy\:nullCheck , stringRules-stringRules\:withStringPool-stringRules\:withoutStringPool-stringRules\:platformIndependent , javacard-javacard\:jcOff-javacard\:jcOn
[View]HideIntermediateProofsteps=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}


\functions {
\nonRigid int i_384;
\nonRigid CharList l2_382;
\nonRigid CharList l1_383;
}

\problem {
  charAt(i_384, concat(l1_383, l2_382))
= \if (  i_384 >= 0
       & i_384 <  length(l1_383) + length(l2_382))
      \then (\if (i_384 <  length(l1_383))
                 \then (charAt(i_384, l1_383))
                 \else (charAt(i_384 - length(l1_383),
                               l2_382)))
      \else (charAt(i_384, concat(l1_383, l2_382)))

}

\proof {
(keyLog "0" (keyUser "geilmann" ) (keyVersion "342f4d7a64be81e3f32b04772bbe5fb52625e73b"))

(autoModeTime "2162")

(branch "dummy ID"
(rule "ifthenelse_split" (formula "1") (term "1") (userinteraction))
(branch " i_384 >= 0 & i_384 <  length(l1_383) + length(l2_382) TRUE"
   (rule "ifthenelse_split" (formula "2") (term "1") (userinteraction))
   (branch " i_384 <  length(l1_383) TRUE"
      (rule "andLeft" (formula "2") (userinteraction))
      (rule "hide_left" (formula "3") (userinteraction))
      (rule "charlist_induction" (inst "phi=\\forall int i; 
  \\forall CharList l2; 
    (   i <  length(l1) & i >= 0
     -> charAt(i, concat(l1, l2)) = charAt(i, l1))") (inst "lv=l1") (inst "cv=c") (userinteraction))
      (branch " Base Case"
         (rule "allRight" (formula "3") (inst "sk=i_1") (userinteraction))
         (rule "allRight" (formula "3") (inst "sk=l2_3") (userinteraction))
         (rule "impRight" (formula "3") (userinteraction))
         (rule "andLeft" (formula "1") (userinteraction))
         (rule "lengthEmpty" (formula "1") (term "1") (userinteraction))
         (rule "hide_right" (formula "5") (userinteraction))
         (rule "hide_right" (formula "5") (userinteraction))
         (rule "inEqSimp_ltToLeq" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
         (rule "qeq_literals" (formula "1") (term "0"))
         (rule "concrete_and_2" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch " Step Case"
         (rule "hide_right" (formula "4") (userinteraction))
         (rule "hide_left" (formula "1") (userinteraction))
         (rule "hide_left" (formula "1") (userinteraction))
         (rule "allRight" (formula "1") (inst "sk=l1_1") (userinteraction))
         (rule "allRight" (formula "1") (inst "sk=c_1") (userinteraction))
         (rule "impRight" (formula "1") (userinteraction))
         (rule "andLeft" (formula "1") (userinteraction))
         (rule "inChar" (formula "1") (userinteraction))
         (rule "true_left" (formula "1") (userinteraction))
         (rule "allRight" (formula "2") (inst "sk=i_2") (userinteraction))
         (rule "allRight" (formula "2") (inst "sk=l2_4") (userinteraction))
         (rule "impRight" (formula "2") (userinteraction))
         (rule "andLeft" (formula "1") (userinteraction))
         (rule "concatConsDep" (formula "4") (term "1,0") (userinteraction))
         (rule "charAtI" (formula "4") (term "0") (userinteraction))
         (rule "charAtI" (formula "4") (term "1") (userinteraction))
         (rule "ifthenelse_split" (formula "4") (term "0") (userinteraction))
         (branch " i_2 >  0 TRUE"
            (rule "replace_known_left" (formula "5") (term "0,1") (ifseqformula "1"))
            (rule "ifthenelse_true" (formula "5") (term "1") (userinteraction))
            (rule "instAll" (formula "5") (term "0,0") (ifseqformula "4") (userinteraction))
            (rule "hide_left" (formula "5") (userinteraction))
            (rule "instAll" (formula "5") (term "1,1,0") (ifseqformula "1") (userinteraction))
            (rule "hide_left" (formula "2") (userinteraction))
            (rule "impLeft" (formula "1") (userinteraction))
            (branch " Case 1"
               (rule "andRight" (formula "4") (userinteraction))
               (branch " Case 1"
                  (rule "lengthCons" (formula "2") (term "1") (userinteraction))
                  (rule "hide_right" (formula "5") (userinteraction))
                  (rule "polySimp_elimSub" (formula "4") (term "0"))
                  (rule "mul_literals" (formula "4") (term "1,0"))
                  (rule "inEqSimp_ltRight" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "inEqSimp_gtToGeq" (formula "2"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "3"))
                  (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0"))
                  (rule "add_zero_left" (formula "3") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                  (rule "leq_literals" (formula "4") (term "0"))
                  (rule "concrete_or_1" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
                  (rule "andLeft" (formula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "1,1,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0"))
                  (rule "add_zero_right" (formula "3") (term "0"))
                  (rule "leq_literals" (formula "3"))
                  (rule "closeFalse" (formula "3"))
               )
               (branch " Case 2"
                  (rule "hide_right" (formula "5") (userinteraction))
                  (rule "lengthCons" (formula "2") (term "1") (userinteraction))
                  (rule "polySimp_elimSub" (formula "4") (term "0"))
                  (rule "mul_literals" (formula "4") (term "1,0"))
                  (rule "inEqSimp_geqRight" (formula "4"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "3"))
                  (rule "inEqSimp_gtToGeq" (formula "2"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0"))
                  (rule "add_zero_left" (formula "3") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                  (rule "leq_literals" (formula "4") (term "0"))
                  (rule "concrete_or_1" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                  (rule "concrete_and_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch " Case 2"
               (rule "close" (formula "5") (ifseqformula "1") (userinteraction))
            )
         )
         (branch " i_2 >  0 FALSE"
            (rule "replace_known_right" (formula "5") (term "0,1") (ifseqformula "4"))
            (rule "ifthenelse_false" (formula "5") (term "1") (userinteraction))
            (rule "cut" (inst "cutFormula=i_2 = 0") (userinteraction))
            (branch " CUT: i_2 = 0 TRUE"
               (rule "applyEqRigid" (formula "6") (term "0,0") (ifseqformula "1") (userinteraction))
               (rule "applyEqRigid" (formula "6") (term "0,1") (ifseqformula "1") (userinteraction))
               (rule "charAt0" (formula "6") (term "0") (userinteraction))
               (rule "charAt0" (formula "6") (term "1") (userinteraction))
               (rule "eqClose" (formula "6") (userinteraction))
               (rule "closeTrue" (formula "6") (userinteraction))
            )
            (branch " CUT: i_2 = 0 FALSE"
               (rule "hide_left" (formula "3") (userinteraction))
               (rule "hide_right" (formula "5") (userinteraction))
               (rule "inEqSimp_gtRight" (formula "4"))
               (rule "times_zero_1" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "4"))
               (rule "add_zero_right" (formula "1") (term "1"))
               (rule "inEqSimp_contradEq3" (formula "4") (ifseqformula "1"))
               (rule "times_zero_1" (formula "4") (term "1,0,0"))
               (rule "add_zero_right" (formula "4") (term "0,0"))
               (rule "qeq_literals" (formula "4") (term "0"))
               (rule "concrete_and_2" (formula "4"))
               (rule "false_right" (formula "4"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
               (rule "qeq_literals" (formula "1") (term "0"))
               (rule "concrete_and_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch " Use Case"
         (rule "instAll" (formula "4") (term "0,1,0") (ifseqformula "1") (userinteraction))
         (rule "instAll" (formula "5") (term "0,0") (ifseqformula "1") (userinteraction))
         (rule "instAll" (formula "6") (term "1,1,0") (ifseqformula "1") (userinteraction))
         (rule "hide_left" (formula "2") (userinteraction))
         (rule "hide_left" (formula "2") (userinteraction))
         (rule "hide_left" (formula "2") (userinteraction))
         (rule "impLeft" (formula "1") (userinteraction))
         (branch " Case 1"
            (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "1"))
            (rule "concrete_and_1" (formula "3"))
            (rule "close" (formula "3") (ifseqformula "2"))
         )
         (branch " Case 2"
            (rule "close" (formula "4") (ifseqformula "1"))
         )
      )
   )
   (branch " i_384 <  length(l1_383) FALSE"
      (rule "andLeft" (formula "1") (userinteraction))
      (rule "charlist_induction" (inst "phi=\\forall int i; 
  \\forall CharList l2; 
    (   i >= length(l1)
     ->   charAt(i, concat(l1, l2))
        = charAt(i - length(l1), l2))") (inst "lv=l1") (inst "cv=c") (userinteraction))
      (branch " Base Case"
         (rule "allRight" (formula "3") (inst "sk=i_3") (userinteraction))
         (rule "allRight" (formula "3") (inst "sk=l2_5") (userinteraction))
         (rule "hide_right" (formula "5") (userinteraction))
         (rule "impRight" (formula "3") (userinteraction))
         (rule "lengthEmpty" (formula "1") (term "1") (userinteraction))
         (rule "concatEmpty1" (formula "4") (term "1,0") (userinteraction))
         (rule "lengthEmpty" (formula "4") (term "1,0,1") (userinteraction))
         (rule "sub_zero_2" (formula "4") (term "0,1") (userinteraction))
         (rule "eqClose" (formula "4") (userinteraction))
         (rule "closeTrue" (formula "4") (userinteraction))
      )
      (branch " Step Case"
         (rule "hide_right" (formula "5") (userinteraction))
         (rule "hide_left" (formula "2") (userinteraction))
         (rule "hide_left" (formula "1") (userinteraction))
         (rule "hide_right" (formula "2") (userinteraction))
         (rule "allRight" (formula "1") (inst "sk=l1_2") (userinteraction))
         (rule "allRight" (formula "1") (inst "sk=c_2") (userinteraction))
         (rule "impRight" (formula "1") (userinteraction))
         (rule "andLeft" (formula "1") (userinteraction))
         (rule "inChar" (formula "1") (userinteraction))
         (rule "true_left" (formula "1") (userinteraction))
         (rule "allRight" (formula "2") (inst "sk=i_4") (userinteraction))
         (rule "allRight" (formula "2") (inst "sk=l2_6") (userinteraction))
         (rule "impRight" (formula "2") (userinteraction))
         (rule "lengthCons" (formula "1") (term "1") (userinteraction))
         (rule "concatConsDep" (formula "3") (term "1,0") (userinteraction))
         (rule "lengthCons" (formula "3") (term "1,0,1") (userinteraction))
         (rule "charAtI" (formula "3") (term "0") (userinteraction))
         (rule "ifthenelse_split" (formula "3") (term "0") (userinteraction))
         (branch " i_4 >  0 TRUE"
            (rule "instAll" (formula "4") (term "0,0") (ifseqformula "3") (userinteraction))
            (rule "hide_left" (formula "4") (userinteraction))
            (rule "instAll" (formula "4") (term "1,1,0") (ifseqformula "1") (userinteraction))
            (rule "hide_left" (formula "2") (userinteraction))
            (rule "impLeft" (formula "1") (userinteraction))
            (branch " Case 1"
               (rule "polySimp_elimSub" (formula "3") (term "0"))
               (rule "mul_literals" (formula "3") (term "1,0"))
               (rule "polySimp_elimSub" (formula "4") (term "0,1"))
               (rule "polySimp_elimSub" (formula "4") (term "0,0"))
               (rule "mul_literals" (formula "4") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,1"))
               (rule "inEqSimp_geqRight" (formula "3"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_gtToGeq" (formula "2"))
               (rule "times_zero_1" (formula "2") (term "1,0,0"))
               (rule "add_zero_right" (formula "2") (term "0,0"))
               (rule "polySimp_addComm0" (formula "3") (term "1"))
               (rule "polySimp_addComm0" (formula "4") (term "0,0"))
               (rule "polySimp_addComm0" (formula "4") (term "1,1,0,1"))
               (rule "polySimp_addComm0" (formula "1") (term "1,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "polySimp_rightDist" (formula "4") (term "1,0,1"))
               (rule "mul_literals" (formula "4") (term "0,1,0,1"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
               (rule "polySimp_addComm0" (formula "4") (term "0,0,1"))
               (rule "inEqSimp_homoInEq1" (formula "3"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1"))
               (rule "polySimp_rightDist" (formula "3") (term "1"))
               (rule "mul_literals" (formula "3") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1"))
               (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "3"))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_homoInEq1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm0" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "leq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch " Case 2"
               (rule "polySimp_elimSub" (formula "1") (term "0,0,1"))
               (rule "mul_literals" (formula "1") (term "1,0,0,1"))
               (rule "polySimp_elimSub" (formula "4") (term "0,1"))
               (rule "polySimp_elimSub" (formula "1") (term "0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "polySimp_elimSub" (formula "4") (term "0,0"))
               (rule "mul_literals" (formula "4") (term "1,0,0"))
               (rule "polySimp_elimSub" (formula "1") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,1"))
               (rule "inEqSimp_gtToGeq" (formula "2"))
               (rule "times_zero_1" (formula "2") (term "1,0,0"))
               (rule "add_zero_right" (formula "2") (term "0,0"))
               (rule "polySimp_addComm0" (formula "3") (term "1"))
               (rule "polySimp_addComm0" (formula "1") (term "0,0"))
               (rule "polySimp_addComm0" (formula "4") (term "0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0,0,1"))
               (rule "polySimp_addComm0" (formula "4") (term "1,1,0,1"))
               (rule "polySimp_rightDist" (formula "4") (term "1,0,1"))
               (rule "mul_literals" (formula "4") (term "0,1,0,1"))
               (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
               (rule "polySimp_addComm0" (formula "4") (term "0,0,1"))
               (rule "close" (formula "4") (ifseqformula "1"))
            )
         )
         (branch " i_4 >  0 FALSE"
            (rule "lengthGEq0" (inst "l=l1_2") (userinteraction))
            (rule "hide_left" (formula "3") (userinteraction))
            (rule "hide_right" (formula "4") (userinteraction))
            (rule "inEqSimp_gtRight" (formula "3"))
            (rule "times_zero_1" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "polySimp_addComm0" (formula "3") (term "1"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1"))
            (rule "polySimp_rightDist" (formula "3") (term "1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
            (rule "mul_literals" (formula "3") (term "0,1"))
            (rule "polySimp_elimOne" (formula "3") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
            (rule "times_zero_1" (formula "2") (term "0,0"))
            (rule "add_zero_left" (formula "2") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
            (rule "qeq_literals" (formula "2") (term "0"))
            (rule "concrete_and_2" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
      )
      (branch " Use Case"
         (rule "instAll" (formula "5") (term "0,1,0") (ifseqformula "1") (userinteraction))
         (rule "hide_left" (formula "2") (userinteraction))
         (rule "instAll" (formula "5") (term "0,0") (ifseqformula "1") (userinteraction))
         (rule "hide_left" (formula "2") (userinteraction))
         (rule "instAll" (formula "5") (term "1,1,0") (ifseqformula "1") (userinteraction))
         (rule "hide_left" (formula "2") (userinteraction))
         (rule "impLeft" (formula "1") (userinteraction))
         (branch " Case 1"
            (rule "polySimp_elimSub" (formula "5") (term "0,1"))
            (rule "inEqSimp_geqRight" (formula "3"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_ltRight" (formula "4"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "4"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
            (rule "polySimp_addComm1" (formula "4") (term "0"))
            (rule "polySimp_addComm1" (formula "4") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0"))
            (rule "polySimp_elimOne" (formula "4") (term "0"))
            (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
            (rule "andLeft" (formula "2"))
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "1,1,0"))
            (rule "times_zero_1" (formula "2") (term "1,0"))
            (rule "add_zero_right" (formula "2") (term "0"))
            (rule "leq_literals" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
         (branch " Case 2"
            (rule "close" (formula "5") (ifseqformula "1") (userinteraction))
         )
      )
   )
)
(branch " i_384 >= 0 & i_384 <  length(l1_383) + length(l2_382) FALSE"
   (rule "eqClose" (formula "2") (userinteraction))
   (rule "closeTrue" (formula "2") (userinteraction))
)
)

}
