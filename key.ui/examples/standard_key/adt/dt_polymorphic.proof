\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:on",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "finalFields" : "finalFields:immutable",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:treatAsAxiom",
        "moreSeqRules" : "moreSeqRules:off",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:ban",
        "sequences" : "sequences:on",
        "soundDefaultContracts" : "soundDefaultContracts:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 10000,
        "Timeout" : -1,
        "options" : { 
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_SCOPE_INV_TACLET",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_DEF_OPS",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_OFF",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_DEFAULT",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\heuristicsDecl {
	LIST;
}

\sorts {
    \generic E;
    \generic F;
    S;
}

\datatypes {
	List<[E]> = Nil | Cons(E head, List<[E]> tail);
}

\predicates {
   contains<[E]>(E, List<[E]>);
}

\functions{
	// append to lists
	List<[E]> app<[E]>(List<[E]>, List<[E]>);
	// revert a list
	List<[E]> rev<[E]>(List<[E]>);
}

\schemaVariables {
    \term List<[E]> list, list1;
    \term E e;
    \variables List<[E]> nv;
    \variables E el;
    \formula b;
}

\rules {
	// axioms
	concat_base{
        \find (app<[E]>(Nil<[E]>, list))
        \replacewith (list)
        \heuristics (LIST)
    };
	concat_step{
            \find( app<[E]>(Cons<[E]>(e, list1), list) )
	        \replacewith (Cons<[E]>(e, app<[E]>(list1,list) ))
		    \heuristics (LIST)};

	// definition of revert
	revert_base {\find (rev<[E]>(Nil<[E]>)) \replacewith(Nil<[E]>) };
	revert_step {\find (rev<[E]>(Cons<[E]>(e,list))) \replacewith (app<[E]>(rev<[E]>(list),Cons<[E]>(e,Nil<[E]>)))};

    // This tests that rules are not applicable if uninstantiated generic sorts remain.
	my_weird_sort {
	    \add(==> Nil<[F]> = Nil<[F]>)
	};
}
\problem {
\forall List<[S]> l; app<[S]>(l, Nil<[S]>) = l
}

\proof {
(keyLog "0" (keyUser "daniel" ) (keyVersion "04c4de851611b1341e40b4e6f9ebe57d93bed7ea"))

(autoModeTime "0")

(branch "dummy ID"
(rule "DT_List<[E]>_Induction" (newnames "heapAtPre,savedHeapAtPre,arg0AtPre,arg1AtPre,heapAtPre,savedHeapAtPre,arg0AtPre,arg1AtPre,heapAtPre,savedHeapAtPre,arg0AtPre,heapAtPre,savedHeapAtPre,vAtPre") (inst "phi=(app<[S]>(l, Nil<[S]>) = l)<<origin(\"User_Interaction @ node 0 (DT List<[E]> Induction)\",\"[]\")>>") (inst "x=l:List<[S]>") (inst "tail=tail:List<[S]>") (inst "head=head:S") (userinteraction))
(branch "Nil"
   (rule "concat_base" (formula "1") (term "0") (userinteraction))
    (builtin "One Step Simplification" (formula "1") (userinteraction))
   (rule "closeTrue" (formula "1") (userinteraction))
)
(branch "Cons(Ehead,List<[E]>tail)"
   (rule "allRight" (formula "1") (inst "sk=tail_0:List<[S]>") (userinteraction))
   (rule "allRight" (formula "1") (inst "sk=head_0:S") (userinteraction))
   (rule "impRight" (formula "1") (userinteraction))
   (rule "concat_step" (formula "2") (term "0") (userinteraction))
   (rule "applyEqRigid" (formula "2") (term "1,0") (ifseqformula "1") (userinteraction))
    (builtin "One Step Simplification" (formula "2") (userinteraction))
   (rule "closeTrue" (formula "2") (userinteraction))
)
(branch "Use case of List"
   (rule "closeAntec" (formula "1") (ifseqformula "2") (userinteraction))
)
)
}
