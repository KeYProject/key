\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sat Sep 23 17:58:44 CEST 2023
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:off, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[Labels]UseOriginLabels=true
[SMTSettings]SelectedTaclets=
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]maxGenericSorts=2
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[Strategy]ActiveStrategy=JavaCardDLStrategy
[Strategy]MaximumNumberOfAutomaticApplications=500
[Strategy]Timeout=-1
"
}

\heuristicsDecl {
	LIST;
}

\datatypes {
	List = Nil | Cons(any head, List tail);
}

\predicates {
   contains(any, List);
}

\functions{
	// append to lists
	List app(List, List);
	// revert a list
	List rev(List);
}

\schemaVariables {
    \term List list, list1;
    \term any e;
    \variables List nv;
    \variables any el;
    \formula b;
}

\rules {
	// axioms
	concat_base{
        \find (app(Nil, list))
        \replacewith (list) 
        \heuristics (LIST)
    };
	concat_step{
            \find( app(Cons(e, list1), list) )
	        \replacewith (Cons(e, app(list1,list) ))
		    \heuristics (LIST)};

	// definition of revert
	revert_base {\find (rev(Nil)) \replacewith(Nil) };
	revert_step {\find (rev(Cons(e,list))) \replacewith (app(rev(list),Cons(e,Nil)))};

	// we need a rule for structural induction on lists
    // WATCHOUT: Woj: I modified this rule, only schema variables should be allowed here
	/*structuralInduction_on_lists {
        \varcond(\notFreeIn(el,b))
		\add ( ==> {\subst nv; Nil}(b) );
		\add ( ==> \forall el; \forall nv; (b->{\subst nv; Cons(el,nv)}b) );
		\add ( \forall nv; b ==>)};
	*/
}

\axioms {
	\lemma lemma1 { \forall List l1;\forall List l2;( rev(app(l1,l2))=app(rev(l2),rev(l1)) ) };
	\lemma lemma2 { \forall List l;( app(l,Nil)=l  ) };
    \lemma lemma3 { \forall List l1;\forall List l2;\forall List l3;( app(l1,app(l2,l3))=app(app(l1,l2),l3) ) };
}
\problem {
\forall List l; rev(rev(l)) = l
}

\proof {
(keyLog "0" (keyUser "weigl" ) (keyVersion "a2d4fe7cbe94d8423abafb4759831fd75cadc21f"))

(autoModeTime "22638")

(branch "dummy ID"
(rule "List_Ind" (inst "phi=(rev(rev(l)) = l)<<origin(\"User_Interaction @ node 0 (InductionforList)\",\"[]\")>>") (inst "x=l") (userinteraction))
(branch "Nil"
   (rule "allRight" (formula "2") (inst "sk=l_0"))
   (rule "revert_base" (formula "1") (term "0,0") (userinteraction))
   (rule "revert_base" (formula "1") (term "0") (userinteraction))
    (builtin "One Step Simplification" (formula "1"))
   (rule "closeTrue" (formula "1"))
)
(branch "Cons(anyhead,Listtail)"
   (rule "allRight" (formula "1") (inst "sk=tail_0") (userinteraction))
   (rule "allRight" (formula "1") (inst "sk=head_0") (userinteraction))
   (rule "hide_right" (formula "2") (userinteraction))
   (rule "impRight" (formula "1") (userinteraction))
   (rule "lemma1" (userinteraction))
   (rule "lemma2" (userinteraction))
   (rule "lemma3" (userinteraction))
   (rule "revert_step" (formula "5") (term "0,0") (userinteraction))
   (rule "instAll" (formula "5") (term "0,0,0") (ifseqformula "3") (userinteraction))
   (rule "instAll" (formula "6") (term "1,0,0") (ifseqformula "1") (userinteraction))
   (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "1") (userinteraction))
   (rule "applyEqRigid" (formula "7") (term "1,0") (ifseqformula "6") (userinteraction))
   (rule "hide_left" (formula "1") (userinteraction))
   (rule "hide_left" (formula "1") (userinteraction))
   (rule "revert_step" (formula "5") (term "0,0") (userinteraction))
   (rule "revert_base" (formula "5") (term "0,0,0") (userinteraction))
   (rule "concat_base" (formula "5") (term "0,0") (userinteraction))
   (rule "concat_step" (formula "5") (term "0") (userinteraction))
   (rule "concat_base" (formula "5") (term "1,0") (userinteraction))
    (builtin "One Step Simplification" (formula "5"))
   (rule "closeTrue" (formula "5"))
)
(branch "Use case of List"
   (rule "close" (formula "2") (ifseqformula "1"))
)
)
}
