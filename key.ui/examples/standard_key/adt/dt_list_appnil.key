
// In this example, the abstract data type list is defined. The ADT has
// the constructors "Nil" and "cons".  The proof obligations states that
// a function "rev" really has the intended behaviour, namely to revert a
// list. To successfully finish the proof several lemmata have to be proven
// as subgoals (currently the lemmata have to be introduced by cuts):

// 1. \forall List l1;\forall List l2;( rev(app(l1,l2))=app(rev(l2),rev(l1)) )
// 2. \forall List l;( app(l,Nil)=l  )
// 3. \forall List l1;\forall List l2;\forall List l3;( app(l1,app(l2,l3))=app(app(l1,l2),l3) )

// This example is taken from an introduction to Isabelle/HOL. You can
// find the relevant pages describing the proof in file isabelleTutorial.ps.gz.
// Take a look at it if you get stuck in the proof.


\heuristicsDecl {
	LIST;
}

\datatypes {
	List = Nil | Cons(any head, List tail);
}

\predicates {
   contains(any, List);
}

\functions{
	// append to lists
	List app(List, List);
	// revert a list
	List rev(List);
}

\schemaVariables {
    \term List list, list1;
    \term any e;
    \variables List nv;
    \variables any el;
    \formula b;
}

\rules {
	// axioms
	concat_base{
        \find (app(Nil, list))
        \replacewith (list) 
        \heuristics (LIST)
    };
	concat_step{
            \find( app(Cons(e, list1), list) )
	        \replacewith (Cons(e, app(list1,list) ))
		    \heuristics (LIST)};

	// definition of revert
	revert_base {\find (rev(Nil)) \replacewith(Nil) };
	revert_step {\find (rev(Cons(e,list))) \replacewith (app(rev(list),Cons(e,Nil)))};
}

\problem {
	\forall List l;( app(l,Nil)=l  )
}

