// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 

\settings {
"#Proof-Settings-Config-File
#Mon Apr 11 17:32:09 CEST 2005
[General]SoundNotification=false
[View]FontIndex=0
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[General]SuggestiveVarNames=false
[General]ProofAssistant=false
[View]ShowWholeTaclet=false
[View]MaxTooltipLines=40
[General]StupidMode=true
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_OFF
[Choice]DefaultChoices=transactionsPolicy-transactionsPolicy\\:abortTransaction , programRules-programRules\\:Java , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , nullPointerPolicy-nullPointerPolicy\\:nullCheck
[OCLRef]Null=true
[OCLRef]ExcThrown=true
[Model]Source=1
[Choice]Choices=programRules-programRules\\:ODL-programRules\\:Java , transactionsPolicy-transactionsPolicy\\:abortTransaction-transactionsPolicy\\:noAbortTransaction , initialisation-initialisation\\:disableStaticInitialisation-initialisation\\:enableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsCheckingOF-intRules\\:javaSemantics-intRules\\:arithmeticSemanticsIgnoringOF , nullPointerPolicy-nullPointerPolicy\\:noNullCheck-nullPointerPolicy\\:nullCheck
[OCLRef]Array=true
[DecisionProcedure]=SIMPLIFY
[General]OuterRenaming=true
[Strategy]ActiveStrategy=JavaCardDLStrategy
"
}


//

// File     : PUZ031+1 : TPTP v2.5.0. Released v2.0.0.
// Domain   : Puzzles
// Problem  : Schubert's Steamroller
// Version  : Especial.
// English  : Wolves, foxes, birds, caterpillars, and snails are animals, and
//            there are some of each of them. Also there are some grains, and
//            grains are plants. Every animal either likes to eat \forall S plants
//            or \forall S animals much smaller than itself that like to eat some
//            plants. Caterpillars and snails are much smaller than birds,
//            which are much smaller than foxes, which in turn are much
//            smaller than wolves. Wolves do not like to eat foxes or grains,
//            while birds like to eat caterpillars but not snails.
//            Caterpillars and snails like to eat some plants. Therefore
//            there is an animal that likes to eat a grain eating animal.




\sorts {
  S;
}

\functions {
}

\predicates {
  wolf(S);
  animal(S);
  fox(S);
  bird(S);
  caterpillar(S);
  snail(S);
  grain(S);
  plant(S);
  eats(S,S);
  much_smaller(S,S);
}


\problem {
     \forall S X;  (wolf(X) -> animal(X))
   & \exists S X1;  wolf(X1)
   & \forall S X;  (fox(X) -> animal(X))
   & \exists S X1;  fox(X1)
   & \forall S X;  (bird(X) -> animal(X))
   & \exists S X1;  bird(X1)
   & \forall S X;  (caterpillar(X) -> animal(X))
   & \exists S X1;  caterpillar(X1)
   & \forall S X;  (snail(X) -> animal(X))
   & \exists S X1;  snail(X1)
   & \exists S X;  grain(X)
   & \forall S X1;  (grain(X1) -> plant(X1))
   & \forall S X; 
       (   animal(X)
        ->   \forall S Y;  (plant(Y) -> eats(X, Y))
           | \forall S Y1; 
               (     (animal(Y1) & much_smaller(Y1, X))
                   & \exists S Z;  (plant(Z) & eats(Y1, Z))
                -> eats(X, Y1)))
   & \forall S X; 
       \forall S Y; 
         (   bird(Y) & (snail(X) | caterpillar(X))
          -> much_smaller(X, Y))
   & \forall S X; 
       \forall S Y; 
         (bird(X) & fox(Y) -> much_smaller(X, Y))
   & \forall S X; 
       \forall S Y; 
         (fox(X) & wolf(Y) -> much_smaller(X, Y))
   & \forall S X; 
       \forall S Y; 
         (wolf(X) & (fox(Y) | grain(Y)) -> !eats(X, Y))
   & \forall S X; 
       \forall S Y; 
         (bird(X) & caterpillar(Y) -> eats(X, Y))
   & \forall S X; 
       \forall S Y;  (bird(X) & snail(Y) -> !eats(X, Y))
   & \forall S X; 
       (   caterpillar(X)
         | snail(X)
        -> \exists S Y;  (plant(Y) & eats(X, Y)))
-> \exists S X; 
     \exists S Y; 
       (  (animal(X) & animal(Y))
        & \exists S Z; 
            ((grain(Z) & eats(Y, Z)) & eats(X, Y)))

}

