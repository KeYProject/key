// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 

\settings {
"#Proof-Settings-Config-File
#Tue Oct 03 17:37:13 CEST 2006
[General]SoundNotification=false
[View]FontIndex=4
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_NORMAL
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_COMPLETION
[General]SuggestiveVarNames=false
[View]ShowWholeTaclet=true
[General]ProofAssistant=false
[View]MaxTooltipLines=40
[General]DnDDirectionSensitive=false
[SimultaneousUpdateSimplifier]EagerSimplification=true
[General]StupidMode=true
[Strategy]MaximumNumberOfAutomaticApplications=10000

[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_NONE
[Choice]DefaultChoices=transactions-transactions\\:transactionsOn , testGeneration-testGeneration\\:testOff , dfaPolicy-dfaPolicy\\:off , programRules-programRules\\:Java , throughout-throughout\\:toutOn , transactionAbort-transactionAbort\\:abortOn , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , assertions-assertions\\:on , nullPointerPolicy-nullPointerPolicy\\:nullCheck
[Model]Source=1
[Choice]Choices=testGeneration-testGeneration\\:testOn-testGeneration\\:testOff , transactions-transactions\\:transactionsOn-transactions\\:transactionsOff , dfaPolicy-dfaPolicy\\:on-dfaPolicy\\:off , programRules-programRules\\:ODL-programRules\\:Java , transactionAbort-transactionAbort\\:abortOff-transactionAbort\\:abortOn , initialisation-initialisation\\:disableStaticInitialisation-initialisation\\:enableStaticInitialisation , throughout-throughout\\:toutOff-throughout\\:toutOn , intRules-intRules\\:arithmeticSemanticsCheckingOF-intRules\\:javaSemantics-intRules\\:arithmeticSemanticsIgnoringOF , assertions-assertions\\:safe-assertions\\:off-assertions\\:on , nullPointerPolicy-nullPointerPolicy\\:noNullCheck-nullPointerPolicy\\:nullCheck
[DecisionProcedure]=SIMPLIFY
[General]OuterRenaming=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
"
}



\functions {
	int abs(int);
	int n; int q; int d;
}


\problem {
	\if (d*(abs(q)+1)>=0) \then (abs(d*(abs(q)+1))=d*(abs(q)+1)) \else (abs(d*(abs(q)+1))=-d*(abs(q)+1))
->
	\if (q>=0) \then (abs(q)=q) \else (abs(q)=-q)
->
	\if (d>=0) \then (abs(d)=d) \else (abs(d)=-d)
->
	\if (n>=0) \then (abs(n)=n) \else (abs(n)=-n)
->
	\if (d*q>=0) \then (abs(d*q)=d*q) \else (abs(d*q)=-d*q)
->
	\forall int x; \if (x>=0) \then (abs(x)=x) \else (abs(x)=-x)
->
	q = jdiv(n,d)
->
	d != 0
->
(
	abs(d*q) <= abs(n)
	&
	abs(d*(abs(q)+1)) > abs(n)
	&
	( abs(n) >= abs(d) -> (n>=0 <-> d>=0) -> q > 0 )
	&
	( abs(n) >= abs(d) -> (n>=0 <-> !(d>=0)) -> q < 0 )
)
}
