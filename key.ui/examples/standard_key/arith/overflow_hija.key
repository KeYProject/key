// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 


\settings {
"#Proof-Settings-Config-File
#Tue Oct 03 17:37:13 CEST 2006
[General]SoundNotification=false
[View]FontIndex=4
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NONE
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_NORMAL
[General]SuggestiveVarNames=false
[View]ShowWholeTaclet=true
[General]ProofAssistant=false
[View]MaxTooltipLines=40
[General]DnDDirectionSensitive=false
[SimultaneousUpdateSimplifier]EagerSimplification=true
[General]StupidMode=true
[Strategy]MaximumNumberOfAutomaticApplications=10000

[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_NONE
[Choice]DefaultChoices=transactions-transactions\\:transactionsOn , testGeneration-testGeneration\\:testOff , dfaPolicy-dfaPolicy\\:off , programRules-programRules\\:Java , throughout-throughout\\:toutOn , transactionAbort-transactionAbort\\:abortOn , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , assertions-assertions\\:on , nullPointerPolicy-nullPointerPolicy\\:nullCheck
[Model]Source=1
[Choice]Choices=testGeneration-testGeneration\\:testOn-testGeneration\\:testOff , transactions-transactions\\:transactionsOn-transactions\\:transactionsOff , dfaPolicy-dfaPolicy\\:on-dfaPolicy\\:off , programRules-programRules\\:ODL-programRules\\:Java , transactionAbort-transactionAbort\\:abortOff-transactionAbort\\:abortOn , initialisation-initialisation\\:disableStaticInitialisation-initialisation\\:enableStaticInitialisation , throughout-throughout\\:toutOff-throughout\\:toutOn , intRules-intRules\\:arithmeticSemanticsCheckingOF-intRules\\:javaSemantics-intRules\\:arithmeticSemanticsIgnoringOF , assertions-assertions\\:safe-assertions\\:off-assertions\\:on , nullPointerPolicy-nullPointerPolicy\\:noNullCheck-nullPointerPolicy\\:nullCheck
[DecisionProcedure]=SIMPLIFY
[General]OuterRenaming=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
"
}


\programVariables{
     int nano; 
     int mili;
}

//leq(m_l, ~d( 9223372036854775807, div(n_l, 1000000))) &
//geq(m_l,  +(-9223372036854775808, div(n_l, 1000000))) &
// gt(m_l,0) & gt(n_l,0)  &

\problem {
\forall int m_l;\forall int n_l;
(
 ( (n_l <= 2147483647) & (n_l >= -2147483648) &
   (m_l <= 9223372036854775807 - div(n_l, 1000000)) & 
   (m_l >= -9223372036854775808 + - div(n_l, 1000000)) &
   (m_l > 0 & n_l > 0) 
 )  
->
{nano:=n_l || mili:=m_l}\<{ int c, n; long m;
   n = nano;
   m =  mili; 
   c = n / 1000000;
   n = n - c*1000000;
   m = m+c;
    if (m == 0) ; 
      else if (m > 0) {
        if (n < 0) {
          n = n+ 1000000;
          m = m - 1;         
        } 
    }
     else if (m <0) {
       if (n > 0) {
         n = n - 1000000;
         m = m + 1;
       }
    }
   mili = m;
   nano = n;
}\>
  (
  ((mili>0) -> (nano >= 0)) &
  ((mili<0) -> (nano<=0))&
  (nano >= -999999) &
  (nano <= 999999) &
  (mili + ((nano - n_l) / 1000000)) = m_l &
  nano = (n_l - ((n_l / 1000000) * 1000000))
  )

)

}
