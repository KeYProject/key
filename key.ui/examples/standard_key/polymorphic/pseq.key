\sorts {
    \generic E;
    PSeq<[E]>;
}

\functions {
    PSeq<[int]> s1;
    PSeq<[int]> s2;

    // getters
    E pseqGet<[E]>(PSeq<[E]>, int);
    int pseqLen<[E]>(PSeq<[E]>);
    int pseqIndexOf<[E]>(PSeq<[E]>, E);
    E pseqGetOutside<[E]>;

    // constructors
    PSeq<[E]> pseqEmpty<[E]>;
    PSeq<[E]> pseqSingleton<[E]>(E);
    PSeq<[E]> pseqConcat<[E]>(PSeq<[E]>, PSeq<[E]>);
    PSeq<[E]> pseqSub<[E]>(PSeq<[E]>, int, int);
    PSeq<[E]> pseqReverse<[E]>(PSeq<[E]>);
    PSeq<[E]> pseqUpd<[E]>(PSeq<[E]>, int, E);
    PSeq<[E]> pseqDef {false, false, true}(int, int, E);

    PSeq<[E]> pseqSwap<[E]>(PSeq<[E]>, int, int);
    PSeq<[E]> pseqRemove<[E]>(PSeq<[E]>, int);
    PSeq<[E]> pseqNPermInv<[E]>(PSeq<[E]>);
}

\problem {
    s1 = pseqConcat<[int]>(pseqConcat<[int]>(pseqSingleton<[int]>(54), pseqSingleton<[int]>(4)), pseqSingleton<[int]>(100))
    & s2 = pseqConcat<[int]>(pseqEmpty<[int]>, pseqSub<[int]>(s1, 1, 3))
    ->
    \forall int i; (0 <= i & i < pseqLen<[int]>(s1) -> pseqGet<[int]>(s1, i) > 0)
    & pseqGet<[int]>(s1, 1) = 4
    & pseqLen<[int]>(s1) = 3
    & pseqLen<[int]>(s2) = 2
    & pseqGet<[int]>(s2, 1) = 100
    & pseqReverse<[int]>(s1) = pseqConcat<[int]>(pseqConcat<[int]>(pseqSingleton<[int]>(100), pseqSingleton<[int]>(4)), pseqSingleton<[int]>(54))
    & pseqConcat<[int]>(pseqEmpty<[int]>, pseqReverse<[int]>(pseqEmpty<[int]>)) = pseqEmpty<[int]>
    & \forall PSeq<[int]> s; (pseqSub<[int]>(s, 0, pseqLen<[int]>(s)) = s)
}