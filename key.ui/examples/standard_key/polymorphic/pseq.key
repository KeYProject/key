\sorts {
    \generic E;
    PSeq<[E]>;
}

\functions {
    PSeq<[int]> s1;
    PSeq<[int]> s2;

    // getters
    E pseqGet<[E]>(PSeq<[E]>, int);
    int pseqLen<[E]>(PSeq<[E]>);
    int pseqIndexOf<[E]>(PSeq<[E]>, E);
    E pseqGetOutside<[E]>;

    // constructors
    PSeq<[E]> pseqEmpty<[E]>;
    PSeq<[E]> pseqSingleton<[E]>(E);
    PSeq<[E]> pseqConcat<[E]>(PSeq<[E]>, PSeq<[E]>);
    PSeq<[E]> pseqSub<[E]>(PSeq<[E]>, int, int);
    PSeq<[E]> pseqReverse<[E]>(PSeq<[E]>);
    PSeq<[E]> pseqUpd<[E]>(PSeq<[E]>, int, E);
    PSeq<[E]> pseqDef<[E]> {false, false, true}(int, int, E);

    PSeq<[E]> pseqSwap<[E]>(PSeq<[E]>, int, int);
    PSeq<[E]> pseqRemove<[E]>(PSeq<[E]>, int);
    PSeq<[E]> pseqNPermInv<[E]>(PSeq<[E]>);
}

\rules {
    \lemma
    pseqConcatWithPSeqEmpty1 {
        \schemaVar \term Seq seq;

        \find(seqConcat(seq, seqEmpty))

        \replacewith(seq)

        \heuristics(concrete)
        \displayname "pseqConcatWithEmpty"
    };

    \lemma
    pseqConcatWithPSeqEmpty2 {
        \schemaVar \term PSeq<[E]> seq;

        \find(pseqConcat<[E]>(pseqEmpty<[E]>, seq))

        \replacewith(seq)

        \heuristics(concrete)
        \displayname "pseqConcatWithEmpty"
    };

    \lemma
    pseqReverseOfPSeqEmpty {
        \find(pseqReverse<[E]>(pseqEmpty<[E]>))

        \replacewith(pseqEmpty<[E]>)

        \heuristics(concrete)
    };

    subPSeqEmpty {
        \schemaVar \term PSeq<[E]> seq;
        \schemaVar \term int i;
        \find(pseqSub<[E]>(seq, i, i))
        \replacewith(pseqEmpty<[E]>)
        \heuristics(concrete)
    };

    \lemma
    subPSeqComplete {
        \schemaVar \term PSeq<[E]> seq;

        \find(pseqSub<[E]>(seq, 0, pseqLen<[E]>(seq)))
        \replacewith(seq)
        \heuristics(concrete)
    };

    subPSeqSingleton {
        \schemaVar \term PSeq<[E]> seq;
        \schemaVar \term E x;

        \find(pseqSub<[E]>(pseqSingleton<[E]>(x), 0, 1))

        \replacewith(pseqSingleton<[E]>(x))

        \heuristics(concrete)
    };

    subPSeqConcat {
        \schemaVar \term PSeq<[E]> s1, s2;
        \schemaVar \term int l, u;

        \find(pseqSub<[E]>(pseqConcat<[E]>(s1, s2), l, u))

        \replacewith(pseqConcat<[E]>(pseqSub<[E]>(s1, l, \if(pseqLen<[E]>(s1) < u) \then(pseqLen<[E]>(s1)) \else(u)),
                pseqSub<[E]>(s2, \if(l < pseqLen<[E]>(s1)) \then(0) \else(l - pseqLen<[E]>(s1)), u - pseqLen<[E]>(s1))))

        \heuristics(simplify_enlarging)
    };

    \lemma
    lenOfPSeqSubEQ {
        \schemaVar \term PSeq<[E]> seq;
        \schemaVar \term int from, to;
        \schemaVar \term PSeq<[E]> EQ;

        \assumes(pseqSub<[E]>(seq, from, to) = EQ ==>)
        \find(pseqLen<[E]>(EQ))
        \sameUpdateLevel

        \replacewith(\if(from < to) \then(to - from) \else(0))

        \heuristics(simplify, find_term_not_in_assumes)
        \displayname "lenOfSeqSub"
    };

    \lemma
    lenOfPSeqSingleton {
        \schemaVar \term E x;

        \find(pseqLen<[E]>(pseqSingleton<[E]>(x)))

        \replacewith(1)

        \heuristics(concrete)
    };

    \lemma
    lenOfPSeqConcat {
        \schemaVar \term PSeq<[E]> seq, seq2;

        \find(pseqLen<[E]>(pseqConcat<[E]>(seq, seq2)))

        \replacewith(pseqLen<[E]>(seq) + pseqLen<[E]>(seq2))

        \heuristics(simplify)
    };

    \lemma
    lenOfPSeqReverse {
        \schemaVar \term PSeq<[E]> seq;

        \find(pseqLen<[E]>(pseqReverse<[E]>(seq)))

        \replacewith(pseqLen<[E]>(seq))

        \heuristics(simplify)
    };

    \lemma
    getOfPSeqSingleton {
        \schemaVar \term E x;
        \schemaVar \term int idx;

        \find(pseqGet<[E]>(pseqSingleton<[E]>(x), idx))

        \replacewith(\if(idx = 0)
                \then(x)
                \else(pseqGetOutside<[E]>))

        \heuristics(simplify)
    };

    \lemma
    getOfPSeqSingletonConcrete {
        \schemaVar \term E x;
        \find(pseqGet<[E]>(pseqSingleton<[E]>(x), 0))
        \replacewith(x)
        \heuristics(concrete)
    };

    \lemma
    getOfPSeqConcat {
        \schemaVar \term PSeq<[E]> seq, seq2;
        \schemaVar \term int idx;

        \find(pseqGet<[E]>(pseqConcat<[E]>(seq, seq2), idx))

        \replacewith(\if(idx < pseqLen<[E]>(seq))
                \then(pseqGet<[E]>(seq, idx))
                \else(pseqGet<[E]>(seq2, idx - pseqLen<[E]>(seq))))

        \heuristics(simplify_enlarging)
    };

    \lemma
    getOfPSeqReverse {
        \schemaVar \term PSeq<[E]> seq;
        \schemaVar \term int idx;

        \find(pseqGet<[E]>(pseqReverse<[E]>(seq), idx))

        \replacewith(pseqGet<[E]>(seq, pseqLen<[E]>(seq) - 1 - idx))

        \heuristics(simplify_enlarging)
    };

    \lemma
    equalityToPSeqGetAndPSeqLenRight {
        \schemaVar \term PSeq<[E]> s, s2;
        \schemaVar \variables int iv;

        \find( ==> s = s2)
        \varcond(\notFreeIn(iv, s, s2))

        \replacewith( ==> pseqLen<[E]>(s) = pseqLen<[E]>(s2)
            & \forall iv; (0 <= iv & iv < pseqLen<[E]>(s)
                -> pseqGet<[E]>(s, iv) = pseqGet<[E]>(s2, iv)))

        \heuristics(simplify_enlarging)
    };
}

\problem {
    s1 = pseqConcat<[int]>(pseqConcat<[int]>(pseqSingleton<[int]>(54), pseqSingleton<[int]>(4)), pseqSingleton<[int]>(100))
    & s2 = pseqConcat<[int]>(pseqEmpty<[int]>, pseqSub<[int]>(s1, 1, 3))
    ->
    \forall int i; (0 <= i & i < pseqLen<[int]>(s1) -> pseqGet<[int]>(s1, i) > 0)
    & pseqGet<[int]>(s1, 1) = 4
    & pseqLen<[int]>(s1) = 3
    & pseqLen<[int]>(s2) = 2
    & pseqGet<[int]>(s2, 1) = 100
    & pseqReverse<[int]>(s1) = pseqConcat<[int]>(pseqConcat<[int]>(pseqSingleton<[int]>(100), pseqSingleton<[int]>(4)), pseqSingleton<[int]>(54))
    & pseqConcat<[int]>(pseqEmpty<[int]>, pseqReverse<[int]>(pseqEmpty<[int]>)) = pseqEmpty<[int]>
    & \forall PSeq<[int]> s; (pseqSub<[int]>(s, 0, pseqLen<[int]>(s)) = s)
}

\proof {
    (branch "dummy ID"
        (rule "pseqConcatWithPSeqEmpty2" (formula "1") (term "1,1,0"))
        (rule "subPSeqComplete" (formula "1") (term "0,0,1,1"))
        (rule "eqClose" (formula "1") (term "0,1,1"))
        (rule "pseqConcatWithPSeqEmpty2" (formula "1") (term "0,1,0,1"))
        (rule "pseqReverseOfPSeqEmpty" (formula "1") (term "0,1,0,1"))
        (rule "eqClose" (formula "1") (term "1,0,1"))
        (rule "concrete_and_3" (formula "1") (term "0,1"))
        (rule "impRight" (formula "1"))
        (rule "andLeft" (formula "1"))
        (rule "eqSymm" (formula "2"))
        (rule "lenOfPSeqSubEQ" (formula "3") (term "0,1,0,0,0") (ifseqformula "2"))
        (rule "less_literals" (formula "3") (term "0,0,1,0,0,0"))
        (rule "ifthenelse_true" (formula "3") (term "0,1,0,0,0"))
        (rule "sub_literals" (formula "3") (term "0,1,0,0,0"))
        (rule "eqClose" (formula "3") (term "1,0,0,0"))
        (rule "concrete_and_3" (formula "3") (term "0,0,0"))
        (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,0,0,0,0,0"))
        (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0,0,0,0,0,0"))
        (rule "inEqSimp_gtToGeq" (formula "3") (term "1,0,0,0,0,0,0"))
        (rule "times_zero_1" (formula "3") (term "1,0,0,1,0,0,0,0,0,0"))
        (rule "add_literals" (formula "3") (term "0,0,1,0,0,0,0,0,0"))
        (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,0,0,0,0,0"))
        (rule "applyEqRigid" (formula "2") (term "0,0") (ifseqformula "1"))
        (rule "applyEqRigid" (formula "3") (term "0,0,1,0") (ifseqformula "1"))
        (rule "applyEqRigid" (formula "3") (term "0,1,0,1,0,0,0,0,0,0") (ifseqformula "1"))
        (rule "applyEq" (formula "3") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
        (rule "applyEq" (formula "3") (term "0,0,1,0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
        (rule "lenOfPSeqConcat" (formula "3") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
        (rule "lenOfPSeqSingleton" (formula "3") (term "1,0,1,0,0,1,0,0,0,0,0,0,0"))
        (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0,0,0,0,0,0"))
        (rule "polySimp_addComm0" (formula "3") (term "1,1,0,0,1,0,0,0,0,0,0,0"))
        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,0,0,0,0,0"))
        (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
        (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0,0,0,0,0"))
        (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0,0,0,0,0"))
        (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,0,0,0,0,0"))
        (rule "lenOfPSeqConcat" (formula "3") (term "0,0,0,1,0,0,0,0,0,0,0"))
        (rule "lenOfPSeqSingleton" (formula "3") (term "1,0,0,0,1,0,0,0,0,0,0,0"))
        (rule "lenOfPSeqSingleton" (formula "3") (term "0,0,0,0,1,0,0,0,0,0,0,0"))
        (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0,0,0,0,0"))
        (rule "mul_literals" (formula "3") (term "0,0,1,0,0,0,0,0,0,0"))
        (rule "applyEqRigid" (formula "3") (term "0,0,1,0,0,0") (ifseqformula "1"))
        (rule "lenOfPSeqConcat" (formula "3") (term "0,1,0,0,0"))
        (rule "lenOfPSeqSingleton" (formula "3") (term "1,0,1,0,0,0"))
        (rule "polySimp_homoEq" (formula "3") (term "1,0,0,0"))
        (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0,0"))
        (rule "polySimp_addComm0" (formula "3") (term "1,1,0,1,0,0,0"))
        (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0,0"))
        (rule "mul_literals" (formula "3") (term "0,1,0,1,0,0,0"))
        (rule "polySimp_addAssoc" (formula "3") (term "0,1,0,0,0"))
        (rule "add_literals" (formula "3") (term "0,0,1,0,0,0"))
        (rule "lenOfPSeqConcat" (formula "3") (term "0,1,0,1,0,0,0"))
        (rule "lenOfPSeqSingleton" (formula "3") (term "0,0,1,0,1,0,0,0"))
        (rule "lenOfPSeqSingleton" (formula "3") (term "1,0,1,0,1,0,0,0"))
        (rule "add_literals" (formula "3") (term "0,1,0,1,0,0,0"))
        (rule "mul_literals" (formula "3") (term "1,0,1,0,0,0"))
        (rule "add_literals" (formula "3") (term "0,1,0,0,0"))
        (rule "eqClose" (formula "3") (term "1,0,0,0"))
        (rule "concrete_and_3" (formula "3") (term "0,0,0"))
        (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,0,0,0,0"))
        (rule "mul_literals" (formula "3") (term "1,1,0,0,0,0,0,0"))
        (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0,0,0"))
        (rule "mul_literals" (formula "3") (term "1,1,0,0,0,0,0"))
        (rule "subPSeqConcat" (formula "2") (term "0"))
        (rule "polySimp_elimSub" (formula "2") (term "2,1,1,0"))
        (rule "polySimp_elimSub" (formula "2") (term "2,1,0"))
        (rule "lenOfPSeqConcat" (formula "2") (term "1,2,0,0"))
        (rule "lenOfPSeqSingleton" (formula "2") (term "1,1,2,0,0"))
        (rule "lenOfPSeqSingleton" (formula "2") (term "0,1,2,0,0"))
        (rule "add_literals" (formula "2") (term "1,2,0,0"))
        (rule "lenOfPSeqConcat" (formula "2") (term "0,0,2,0,0"))
        (rule "lenOfPSeqSingleton" (formula "2") (term "1,0,0,2,0,0"))
        (rule "lenOfPSeqSingleton" (formula "2") (term "0,0,0,2,0,0"))
        (rule "add_literals" (formula "2") (term "0,0,2,0,0"))
        (rule "less_literals" (formula "2") (term "0,2,0,0"))
        (rule "ifthenelse_true" (formula "2") (term "2,0,0"))
        (rule "lenOfPSeqConcat" (formula "2") (term "1,0,1,1,0"))
        (rule "lenOfPSeqSingleton" (formula "2") (term "0,1,0,1,1,0"))
        (rule "lenOfPSeqSingleton" (formula "2") (term "1,1,0,1,1,0"))
        (rule "add_literals" (formula "2") (term "1,0,1,1,0"))
        (rule "less_literals" (formula "2") (term "0,1,1,0"))
        (rule "ifthenelse_true" (formula "2") (term "1,1,0"))
        (rule "lenOfPSeqConcat" (formula "2") (term "0,1,2,1,0"))
        (rule "lenOfPSeqSingleton" (formula "2") (term "0,0,1,2,1,0"))
        (rule "lenOfPSeqSingleton" (formula "2") (term "1,0,1,2,1,0"))
        (rule "add_literals" (formula "2") (term "0,1,2,1,0"))
        (rule "mul_literals" (formula "2") (term "1,2,1,0"))
        (rule "add_literals" (formula "2") (term "2,1,0"))
        (rule "subPSeqSingleton" (formula "2") (term "1,0"))
        (rule "getOfPSeqConcat" (formula "3") (term "0,1,0,0,0"))
        (rule "polySimp_elimSub" (formula "3") (term "1,2,0,1,0,0,0"))
        (rule "lenOfPSeqConcat" (formula "3") (term "1,0,0,1,0,0,0"))
        (rule "lenOfPSeqSingleton" (formula "3") (term "1,1,0,0,1,0,0,0"))
        (rule "lenOfPSeqSingleton" (formula "3") (term "0,1,0,0,1,0,0,0"))
        (rule "add_literals" (formula "3") (term "1,0,0,1,0,0,0"))
        (rule "less_literals" (formula "3") (term "0,0,1,0,0,0"))
        (rule "ifthenelse_true" (formula "3") (term "0,1,0,0,0"))
        (rule "getOfPSeqConcat" (formula "3") (term "0,1,0,0,0,0,0"))
        (rule "polySimp_elimSub" (formula "3") (term "1,2,0,1,0,0,0,0,0"))
        (rule "polySimp_addComm0" (formula "3") (term "1,2,0,1,0,0,0,0,0"))
        (rule "lenOfPSeqConcat" (formula "3") (term "1,0,0,1,0,0,0,0,0"))
        (rule "lenOfPSeqSingleton" (formula "3") (term "1,1,0,0,1,0,0,0,0,0"))
        (rule "lenOfPSeqSingleton" (formula "3") (term "0,1,0,0,1,0,0,0,0,0"))
        (rule "add_literals" (formula "3") (term "1,0,0,1,0,0,0,0,0"))
        (rule "lenOfPSeqConcat" (formula "3") (term "0,0,1,2,0,1,0,0,0,0,0"))
        (rule "lenOfPSeqSingleton" (formula "3") (term "1,0,0,1,2,0,1,0,0,0,0,0"))
        (rule "lenOfPSeqSingleton" (formula "3") (term "0,0,0,1,2,0,1,0,0,0,0,0"))
        (rule "add_literals" (formula "3") (term "0,0,1,2,0,1,0,0,0,0,0"))
        (rule "mul_literals" (formula "3") (term "0,1,2,0,1,0,0,0,0,0"))
        (rule "getOfPSeqSingleton" (formula "3") (term "2,0,1,0,0,0,0,0"))
        (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,0,0,0,0,0"))
        (rule "mul_literals" (formula "3") (term "1,0,0,0,0,1,0,0,0,0,0"))
        (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0,0,0,0"))
        (rule "polySimp_sepPosMonomial" (formula "3") (term "0,2,0,1,0,0,0,0,0"))
        (rule "mul_literals" (formula "3") (term "1,0,2,0,1,0,0,0,0,0"))
        (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,1,0,0,0,0,0"))
        (rule "mul_literals" (formula "3") (term "1,0,0,1,0,0,0,0,0"))
        (rule "subPSeqConcat" (formula "2") (term "0,0"))
        (rule "lenOfPSeqSingleton" (formula "2") (term "1,2,0,0,0"))
        (rule "lenOfPSeqSingleton" (formula "2") (term "1,2,1,0,0"))
        (rule "lenOfPSeqSingleton" (formula "2") (term "1,2,1,1,0,0"))
        (rule "lenOfPSeqSingleton" (formula "2") (term "0,0,2,0,0,0"))
        (rule "lenOfPSeqSingleton" (formula "2") (term "1,0,1,1,0,0"))
        (rule "sub_literals" (formula "2") (term "2,1,0,0"))
        (rule "sub_literals" (formula "2") (term "2,1,1,0,0"))
        (rule "ifthenelse_same_branches" (formula "2") (term "1,1,0,0"))
        (rule "subPSeqSingleton" (formula "2") (term "1,0,0"))
        (rule "less_literals" (formula "2") (term "0,2,0,0,0"))
        (rule "ifthenelse_true" (formula "2") (term "2,0,0,0"))
        (rule "subPSeqEmpty" (formula "2") (term "0,0,0"))
        (rule "pseqConcatWithPSeqEmpty2" (formula "2") (term "0,0"))
        (rule "eqSymm" (formula "2"))
        (rule "applyEq" (formula "3") (term "0,0,1,0,0") (ifseqformula "2"))
        (rule "getOfPSeqConcat" (formula "3") (term "0,1,0,0,0"))
        (rule "lenOfPSeqSingleton" (formula "3") (term "1,0,0,1,0,0,0"))
        (rule "lenOfPSeqSingleton" (formula "3") (term "1,1,2,0,1,0,0,0"))
        (rule "less_literals" (formula "3") (term "0,0,1,0,0,0"))
        (rule "ifthenelse_false" (formula "3") (term "0,1,0,0,0"))
        (rule "sub_literals" (formula "3") (term "1,0,1,0,0,0"))
        (rule "getOfPSeqSingletonConcrete" (formula "3") (term "0,1,0,0,0"))
        (rule "eqClose" (formula "3") (term "1,0,0,0"))
        (rule "concrete_and_3" (formula "3") (term "0,0,0"))
        (rule "getOfPSeqConcat" (formula "3") (term "0,1,0,0"))
        (rule "lenOfPSeqSingleton" (formula "3") (term "1,0,0,1,0,0"))
        (rule "lenOfPSeqSingleton" (formula "3") (term "1,1,2,0,1,0,0"))
        (rule "less_literals" (formula "3") (term "0,0,1,0,0"))
        (rule "ifthenelse_false" (formula "3") (term "0,1,0,0"))
        (rule "sub_literals" (formula "3") (term "1,0,1,0,0"))
        (rule "getOfPSeqSingletonConcrete" (formula "3") (term "0,1,0,0"))
        (rule "eqClose" (formula "3") (term "1,0,0"))
        (rule "concrete_and_3" (formula "3") (term "0,0"))
        (rule "getOfPSeqConcat" (formula "3") (term "1,0,1,0,0,0"))
        (rule "lenOfPSeqSingleton" (formula "3") (term "1,0,1,0,1,0,0,0"))
        (rule "lenOfPSeqSingleton" (formula "3") (term "1,1,2,1,0,1,0,0,0"))
        (rule "polySimp_elimSub" (formula "3") (term "1,2,1,0,1,0,0,0"))
        (rule "mul_literals" (formula "3") (term "1,1,2,1,0,1,0,0,0"))
        (rule "polySimp_addComm0" (formula "3") (term "1,2,1,0,1,0,0,0"))
        (rule "getOfPSeqSingleton" (formula "3") (term "1,1,0,1,0,0,0"))
        (rule "getOfPSeqSingleton" (formula "3") (term "2,1,0,1,0,0,0"))
        (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1,0,1,0,0,0"))
        (rule "mul_literals" (formula "3") (term "1,0,0,0,1,0,1,0,0,0"))
        (rule "add_literals" (formula "3") (term "0,0,0,1,0,1,0,0,0"))
        (rule "add_zero_left" (formula "3") (term "0,0,1,0,1,0,0,0"))
        (rule "polySimp_sepPosMonomial" (formula "3") (term "0,2,1,0,1,0,0,0"))
        (rule "mul_literals" (formula "3") (term "1,0,2,1,0,1,0,0,0"))
        (rule "all_unused" (formula "3") (term "1"))
        (rule "concrete_and_3" (formula "3"))
        (rule "nnf_imp2or" (formula "3") (term "0,0"))
        (rule "nnf_notAnd" (formula "3") (term "0,0,0"))
        (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,0"))
        (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0,0"))
        (rule "add_zero_right" (formula "3") (term "0,0,0,0,0,0"))
        (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,0"))
        (rule "mul_literals" (formula "3") (term "1,0,0,0,0"))
        (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0,0"))
        (rule "mul_literals" (formula "3") (term "1,0,0,1,0,0,0"))
        (rule "add_literals" (formula "3") (term "0,0,1,0,0,0"))
        (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0"))
        (rule "mul_literals" (formula "3") (term "1,1,0,0,0"))
        (rule "cut_direct" (formula "3") (term "1"))
        (branch "CUT: pseqReverse(pseqConcat(pseqConcat(pseqSingleton(54), pseqSingleton(4)), pseqSingleton(100))) = pseqConcat(pseqConcat(pseqSingleton(100), pseqSingleton(4)), pseqSingleton(54)) TRUE"
           (rule "concrete_and_3" (formula "4"))
           (rule "allRight" (formula "4") (inst "sk=i_0"))
           (rule "orRight" (formula "4"))
           (rule "orRight" (formula "4"))
           (rule "inEqSimp_geqRight" (formula "6"))
           (rule "mul_literals" (formula "1") (term "1,0,0"))
           (rule "add_literals" (formula "1") (term "0,0"))
           (rule "add_zero_left" (formula "1") (term "0"))
           (rule "inEqSimp_geqRight" (formula "6"))
           (rule "mul_literals" (formula "1") (term "1,0,0"))
           (rule "add_literals" (formula "1") (term "0,0"))
           (rule "inEqSimp_leqRight" (formula "6"))
           (rule "mul_literals" (formula "1") (term "1,0,0"))
           (rule "add_literals" (formula "1") (term "0,0"))
           (rule "add_zero_left" (formula "1") (term "0"))
           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
           (rule "mul_literals" (formula "2") (term "1"))
           (rule "ifthenelse_split" (formula "3") (term "0"))
           (branch "i_0 <= 1 TRUE"
              (rule "ifthenelse_split" (formula "4") (term "0"))
              (branch "i_0 <= 0 TRUE"
                 (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "4"))
                 (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "1"))
                 (rule "ifthenelse_true" (formula "6") (term "0"))
                 (rule "leq_literals" (formula "6"))
                 (rule "closeFalse" (formula "6"))
              )
              (branch "i_0 <= 0 FALSE"
                 (rule "inEqSimp_leqRight" (formula "8"))
                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                 (rule "add_zero_right" (formula "1") (term "0,0"))
                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                 (rule "mul_literals" (formula "1") (term "1"))
                 (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "4"))
                 (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "1"))
                 (rule "ifthenelse_true" (formula "6") (term "0"))
                 (rule "leq_literals" (formula "6"))
                 (rule "closeFalse" (formula "6"))
              )
           )
           (branch "i_0 <= 1 FALSE"
              (rule "inEqSimp_leqRight" (formula "7"))
              (rule "mul_literals" (formula "1") (term "1,0,0"))
              (rule "add_literals" (formula "1") (term "0,0"))
              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
              (rule "mul_literals" (formula "1") (term "1"))
              (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "3"))
              (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "1"))
              (rule "ifthenelse_true" (formula "5") (term "0"))
              (rule "leq_literals" (formula "5"))
              (rule "closeFalse" (formula "5"))
           )
        )
        (branch "b"
            (rule "equalityToPSeqGetAndPSeqLenRight" (formula "3") (inst "iv=iv"))
            (rule "lenOfPSeqReverse" (formula "3") (term "1,1,0,0,1"))
            (rule "lenOfPSeqConcat" (formula "3") (term "1,0"))
            (rule "lenOfPSeqSingleton" (formula "3") (term "1,1,0"))
            (rule "polySimp_addComm0" (formula "3") (term "1,0"))
            (rule "lenOfPSeqReverse" (formula "3") (term "0,0"))
            (rule "lenOfPSeqConcat" (formula "3") (term "1,1,0,0,1"))
            (rule "lenOfPSeqSingleton" (formula "3") (term "1,1,1,0,0,1"))
            (rule "polySimp_addComm0" (formula "3") (term "1,1,0,0,1"))
            (rule "lenOfPSeqConcat" (formula "3") (term "1,1,0"))
            (rule "lenOfPSeqSingleton" (formula "3") (term "1,1,1,0"))
            (rule "lenOfPSeqSingleton" (formula "3") (term "0,1,1,0"))
            (rule "add_literals" (formula "3") (term "1,1,0"))
            (rule "add_literals" (formula "3") (term "1,0"))
            (rule "lenOfPSeqConcat" (formula "3") (term "0,0"))
            (rule "lenOfPSeqSingleton" (formula "3") (term "1,0,0"))
            (rule "polySimp_homoEq" (formula "3") (term "0"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
            (rule "polySimp_addComm0" (formula "3") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
            (rule "mul_literals" (formula "3") (term "0,1,0,0"))
            (rule "lenOfPSeqConcat" (formula "3") (term "1,1,1,0,0,1"))
            (rule "lenOfPSeqSingleton" (formula "3") (term "0,1,1,1,0,0,1"))
            (rule "lenOfPSeqSingleton" (formula "3") (term "1,1,1,1,0,0,1"))
            (rule "add_literals" (formula "3") (term "1,1,1,0,0,1"))
            (rule "add_literals" (formula "3") (term "1,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
            (rule "add_literals" (formula "3") (term "0,0,0"))
            (rule "lenOfPSeqConcat" (formula "3") (term "0,1,0,0"))
            (rule "lenOfPSeqSingleton" (formula "3") (term "1,0,1,0,0"))
            (rule "lenOfPSeqSingleton" (formula "3") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "3") (term "0,1,0,0"))
            (rule "mul_literals" (formula "3") (term "1,0,0"))
            (rule "add_literals" (formula "3") (term "0,0"))
            (rule "eqClose" (formula "3") (term "0"))
            (rule "concrete_and_1" (formula "3"))
            (rule "allRight" (formula "3") (inst "sk=iv_0"))
            (rule "impRight" (formula "3"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_ltToLeq" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1,0,0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "getOfPSeqConcat" (formula "5") (term "1"))
            (rule "eqSymm" (formula "5"))
            (rule "polySimp_elimSub" (formula "5") (term "1,2,0"))
            (rule "lenOfPSeqConcat" (formula "5") (term "1,0,0"))
            (rule "lenOfPSeqSingleton" (formula "5") (term "1,1,0,0"))
            (rule "lenOfPSeqSingleton" (formula "5") (term "0,1,0,0"))
            (rule "add_literals" (formula "5") (term "1,0,0"))
            (rule "getOfPSeqSingleton" (formula "5") (term "2,0"))
            (rule "lenOfPSeqConcat" (formula "5") (term "0,1,0,0,2,0"))
            (rule "lenOfPSeqSingleton" (formula "5") (term "1,0,1,0,0,2,0"))
            (rule "lenOfPSeqSingleton" (formula "5") (term "0,0,1,0,0,2,0"))
            (rule "add_literals" (formula "5") (term "0,1,0,0,2,0"))
            (rule "mul_literals" (formula "5") (term "1,0,0,2,0"))
            (rule "polySimp_addComm0" (formula "5") (term "0,0,2,0"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0"))
            (rule "mul_literals" (formula "5") (term "1,0,0,0,0"))
            (rule "add_literals" (formula "5") (term "0,0,0,0"))
            (rule "polySimp_sepPosMonomial" (formula "5") (term "0,2,0"))
            (rule "mul_literals" (formula "5") (term "1,0,2,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0"))
            (rule "mul_literals" (formula "5") (term "1,0,0"))
            (rule "getOfPSeqConcat" (formula "5") (term "1,0"))
            (rule "lenOfPSeqSingleton" (formula "5") (term "1,0,1,0"))
            (rule "lenOfPSeqSingleton" (formula "5") (term "1,1,2,1,0"))
            (rule "polySimp_elimSub" (formula "5") (term "1,2,1,0"))
            (rule "mul_literals" (formula "5") (term "1,1,2,1,0"))
            (rule "polySimp_addComm0" (formula "5") (term "1,2,1,0"))
            (rule "getOfPSeqSingleton" (formula "5") (term "1,1,0"))
            (rule "getOfPSeqSingleton" (formula "5") (term "2,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "0,1,0"))
            (rule "mul_literals" (formula "5") (term "1,0,0,0,1,0"))
            (rule "add_literals" (formula "5") (term "0,0,0,1,0"))
            (rule "add_zero_left" (formula "5") (term "0,0,1,0"))
            (rule "polySimp_sepPosMonomial" (formula "5") (term "0,2,1,0"))
            (rule "mul_literals" (formula "5") (term "1,0,2,1,0"))
            (rule "getOfPSeqReverse" (formula "5") (term "1"))
            (rule "polySimp_elimSub" (formula "5") (term "0,1,1"))
            (rule "mul_literals" (formula "5") (term "1,0,1,1"))
            (rule "polySimp_elimSub" (formula "5") (term "1,1"))
            (rule "polySimp_addComm0" (formula "5") (term "0,1,1"))
            (rule "polySimp_addComm1" (formula "5") (term "1,1"))
            (rule "lenOfPSeqConcat" (formula "5") (term "1,1,1"))
            (rule "lenOfPSeqSingleton" (formula "5") (term "1,1,1,1"))
            (rule "polySimp_addComm0" (formula "5") (term "1,1,1"))
            (rule "polySimp_addAssoc" (formula "5") (term "1,1"))
            (rule "polySimp_addComm1" (formula "5") (term "0,1,1"))
            (rule "add_literals" (formula "5") (term "0,0,1,1"))
            (rule "add_zero_left" (formula "5") (term "0,1,1"))
            (rule "lenOfPSeqConcat" (formula "5") (term "1,1,1"))
            (rule "lenOfPSeqSingleton" (formula "5") (term "1,1,1,1"))
            (rule "lenOfPSeqSingleton" (formula "5") (term "0,1,1,1"))
            (rule "add_literals" (formula "5") (term "1,1,1"))
            (rule "polySimp_addComm0" (formula "5") (term "1,1"))
            (rule "getOfPSeqConcat" (formula "5") (term "1"))
            (rule "eqSymm" (formula "5"))
            (rule "polySimp_elimSub" (formula "5") (term "1,2,0"))
            (rule "lenOfPSeqConcat" (formula "5") (term "1,0,0"))
            (rule "lenOfPSeqSingleton" (formula "5") (term "0,1,0,0"))
            (rule "lenOfPSeqSingleton" (formula "5") (term "1,1,0,0"))
            (rule "add_literals" (formula "5") (term "1,0,0"))
            (rule "getOfPSeqSingleton" (formula "5") (term "2,0"))
            (rule "lenOfPSeqConcat" (formula "5") (term "0,1,0,0,2,0"))
            (rule "lenOfPSeqSingleton" (formula "5") (term "0,0,1,0,0,2,0"))
            (rule "lenOfPSeqSingleton" (formula "5") (term "1,0,1,0,0,2,0"))
            (rule "add_literals" (formula "5") (term "0,1,0,0,2,0"))
            (rule "mul_literals" (formula "5") (term "1,0,0,2,0"))
            (rule "polySimp_addComm1" (formula "5") (term "0,0,2,0"))
            (rule "add_literals" (formula "5") (term "0,0,0,2,0"))
            (rule "add_zero_left" (formula "5") (term "0,0,2,0"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0"))
            (rule "mul_literals" (formula "5") (term "1,0,0,0,0"))
            (rule "add_literals" (formula "5") (term "0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,0,0"))
            (rule "add_literals" (formula "5") (term "0,0,0,0"))
            (rule "polySimp_invertEq" (formula "5") (term "0,2,0"))
            (rule "times_zero_2" (formula "5") (term "1,0,2,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0,0,2,0"))
            (rule "polySimp_elimOne" (formula "5") (term "0,0,2,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0"))
            (rule "eqSymm" (formula "5"))
            (rule "polySimp_elimOne" (formula "5") (term "0,0,1"))
            (rule "getOfPSeqConcat" (formula "5") (term "1,1"))
            (rule "lenOfPSeqSingleton" (formula "5") (term "1,0,1,1"))
            (rule "lenOfPSeqSingleton" (formula "5") (term "1,1,2,1,1"))
            (rule "eqSymm" (formula "5"))
            (rule "polySimp_elimSub" (formula "5") (term "1,2,1,0"))
            (rule "mul_literals" (formula "5") (term "1,1,2,1,0"))
            (rule "polySimp_addComm1" (formula "5") (term "1,2,1,0"))
            (rule "add_literals" (formula "5") (term "0,1,2,1,0"))
            (rule "getOfPSeqSingleton" (formula "5") (term "1,1,0"))
            (rule "getOfPSeqSingleton" (formula "5") (term "2,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "0,1,0"))
            (rule "mul_literals" (formula "5") (term "1,0,0,0,1,0"))
            (rule "add_literals" (formula "5") (term "0,0,0,1,0"))
            (rule "add_zero_left" (formula "5") (term "0,0,1,0"))
            (rule "polySimp_sepNegMonomial" (formula "5") (term "0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "5") (term "0,0,1,1,0"))
            (rule "polySimp_sepNegMonomial" (formula "5") (term "0,2,1,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0,0,2,1,0"))
            (rule "polySimp_elimOne" (formula "5") (term "0,0,2,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0,0,1,0"))
            (rule "eqSymm" (formula "5"))
            (rule "polySimp_elimOne" (formula "5") (term "0,0,1,1"))
            (rule "ifthenelse_split" (formula "5") (term "2,0"))
            (branch "iv_0 = 2 TRUE"
                (rule "replace_known_left" (formula "6") (term "0,1,1,1") (ifseqformula "1"))
                (rule "ifthenelse_true" (formula "6") (term "1,1,1"))
                (rule "applyEqRigid" (formula "6") (term "0,0,2,1,0") (ifseqformula "1"))
                (rule "equal_literals" (formula "6") (term "0,2,1,0"))
                (rule "ifthenelse_false" (formula "6") (term "2,1,0"))
                (rule "applyEq" (formula "6") (term "0,0,0") (ifseqformula "1"))
                (rule "leq_literals" (formula "6") (term "0,0"))
                (rule "ifthenelse_false" (formula "6") (term "0"))
                (rule "eqSymm" (formula "6"))
                (rule "ifEqualsInteger" (formula "6"))
                (rule "ifthenelse_concrete3" (formula "6") (term "1,0"))
                (rule "orRight" (formula "6"))
                (rule "ifEqualsInteger" (formula "6") (term "1,1"))
                (rule "equal_literals" (formula "6") (term "1,0,1,1"))
                (rule "concrete_and_4" (formula "6") (term "0,1,1"))
                (rule "concrete_or_2" (formula "6") (term "1,1"))
                (rule "applyEq" (formula "6") (term "0,0,0,1,1") (ifseqformula "1"))
                (rule "equal_literals" (formula "6") (term "0,0,1,1"))
                (rule "concrete_not_2" (formula "6") (term "0,1,1"))
                (rule "concrete_and_1" (formula "6") (term "1,1"))
                (rule "applyEq" (formula "6") (term "0,0,1") (ifseqformula "1"))
                (rule "qeq_literals" (formula "6") (term "0,1"))
                (rule "concrete_or_1" (formula "6") (term "1"))
                (rule "concrete_and_3" (formula "6"))
                (rule "inEqSimp_geqRight" (formula "6"))
                (rule "mul_literals" (formula "1") (term "1,0,0"))
                (rule "add_literals" (formula "1") (term "0,0"))
                (rule "add_zero_left" (formula "1") (term "0"))
                (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "2"))
                (rule "leq_literals" (formula "1"))
                (rule "closeFalse" (formula "1"))
            )
            (branch "iv_0 = 2 FALSE"
                (rule "replace_known_right" (formula "6") (term "0,1,1,1") (ifseqformula "5"))
                (rule "ifthenelse_false" (formula "6") (term "1,1,1"))
                (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "5"))
                (rule "add_literals" (formula "2") (term "1"))
                (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "2"))
                (rule "ifthenelse_true" (formula "6") (term "0"))
                (rule "inEqSimp_contradInEq0" (formula "6") (term "0,1,1") (ifseqformula "2"))
                (rule "qeq_literals" (formula "6") (term "0,0,1,1"))
                (rule "concrete_and_2" (formula "6") (term "0,1,1"))
                (rule "ifthenelse_false" (formula "6") (term "1,1"))
                (rule "ifthenelse_split" (formula "6") (term "2,1"))
                (branch "iv_0 = 0 TRUE"
                    (rule "replace_known_left" (formula "7") (term "0,1,0") (ifseqformula "1"))
                    (rule "ifthenelse_true" (formula "7") (term "1,0"))
                    (rule "applyEqRigid" (formula "7") (term "0,0,2,0") (ifseqformula "1"))
                    (rule "equal_literals" (formula "7") (term "0,2,0"))
                    (rule "ifthenelse_false" (formula "7") (term "2,0"))
                    (rule "applyEq" (formula "7") (term "0,0,0") (ifseqformula "1"))
                    (rule "leq_literals" (formula "7") (term "0,0"))
                    (rule "ifthenelse_true" (formula "7") (term "0"))
                    (rule "eqSymm" (formula "7"))
                    (rule "ifthenelse_concrete4" (formula "7"))
                    (rule "orRight" (formula "7"))
                    (rule "notRight" (formula "7"))
                    (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "2"))
                    (rule "qeq_literals" (formula "1"))
                    (rule "closeFalse" (formula "1"))
                )
                (branch "iv_0 = 0 FALSE"
                    (rule "replace_known_right" (formula "7") (term "0,1,0") (ifseqformula "6"))
                    (rule "ifthenelse_false" (formula "7") (term "1,0"))
                    (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "6"))
                    (rule "add_zero_right" (formula "1") (term "1"))
                    (rule "replace_known_left" (formula "7") (term "0,1") (ifseqformula "1"))
                    (rule "ifthenelse_true" (formula "7") (term "1"))
                    (rule "ifthenelse_concrete4" (formula "7"))
                    (rule "orRight" (formula "7"))
                    (rule "notRight" (formula "7"))
                    (rule "eqSymm" (formula "8"))
                    (rule "ifthenelse_concrete4" (formula "8"))
                    (rule "orRight" (formula "8"))
                    (rule "notRight" (formula "8"))
                    (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                    (rule "leq_literals" (formula "2"))
                    (rule "closeFalse" (formula "2"))
                )
            )
        )
    )
}