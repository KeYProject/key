


\sorts {
	S;
}


\predicates {
	p(S);
}


\schemaVariables {
	\term S sv;
	\formula phi, post;
	\program Statement #s, #t;
	\program Expression #e0, #e1;
	\program Variable #pv;

	\program[list] Statement #slist;
	\program Expression #e;
}


\rules {
	testTaclet0 { \find ( \<{ int #pv; #pv = #e ? 1 : 2; }\> phi ) \sameUpdateLevel
                      \replacewith ( \<{ int #pv; if ( #e ) #pv = 1; else #pv = 2;
		      }\> phi ) };

 break_in_block_nolabel { \find(\<{.. { break; } ...}\>post) 
	\replacewith (\<{..  break;  ...}\>post) \heuristics(simplify_prog) };

 break_empty { \find(\<{ break; #slist }\>post) 
	\replacewith (false) \heuristics(simplify_prog) };

  throw_ignore_trail { \find (\<{ throw #e; #slist }\>post)
	\replacewith (false) \heuristics(simplify_prog) };

}


\problem {
false

}

\proof {
(log "0" (user "daniels" ) (keyVersion "danielsRunAllTests.10"))
(branch "dummy ID"
(rule "false_right" (formula "1"))
(opengoal "false ")
)

}
