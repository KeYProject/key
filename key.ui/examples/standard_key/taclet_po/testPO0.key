
\javaSource ".";

\sorts {
	S;
}


\predicates {
	p(S);
}


\schemaVariables {
	\term S sv;
	\formula phi, post;
	\program Statement #s, #t;
	\program Label #l;

	\program[list] Statement #slist;
	\program Expression #e;
}


\rules {
	testTaclet0 { \find ( \<{ #l: if ( 0 == 1 ) #s else #t }\> ( p ( sv ) |
	phi ) ) \sameUpdateLevel
                      \replacewith ( \<{ #l: if ( 0 == 0 ) #t else #s }\> ( phi | p ( sv ) ) ) };
	testTaclet1 { \find ( \<{ int j = 0; #s }\> ( p ( sv ) | phi ) ) \sameUpdateLevel
                      \replacewith ( phi | p ( sv ) ) };

 break_in_block_nolabel { \find(\<{.. { break; } ...}\>post) 
	\replacewith (\<{..  break;  ...}\>post) \heuristics(simplify_prog) };

  throw_ignore_trail { \find (\<{ throw #e; #slist }\>post)
	\replacewith (false) \heuristics(simplify_prog) };

  throw_ignore_trail2 { \find (\<{ throw #e; }\>post)
	\replacewith (false) \heuristics(simplify_prog) };

  throw_ignore_label { \find (\<{.. #l: throw #e; ...}\>post)
	\replacewith (\<{.. throw #e; ...}\>post) \heuristics(simplify_prog) };
}


