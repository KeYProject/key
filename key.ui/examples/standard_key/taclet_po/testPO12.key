// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 



\sorts {
	S;
}


\predicates {
	p(S);
}


\schemaVariables {
	\term S sv;
	\formula phi, post, f0, f1, f2;
	\program Statement #s, #t;
	\program Expression #e0, #e1;
	\program Variable #pv, #pv2;

	\program[list] Statement #slist;
	\program Expression #e;
}


\rules {

   testTaclet0 { \find ( \<{ try { if ( #pv2 + 1 == #pv2 ) { #s } } catch
     (java.lang.Throwable #pv){ #t } }\> phi ) \sameUpdateLevel
		       \replacewith ( phi ) };

 break_in_block_nolabel { \find(\<{.. { break; } ...}\>post) 
	\replacewith (\<{..  break;  ...}\>post) \heuristics(simplify_prog) };

 break_empty { \find(\<{ break; #slist }\>post) 
	\replacewith (false) \heuristics(simplify_prog) };

  throw_ignore_trail { \find (\<{ throw #e; #slist }\>post)
	\replacewith (false) \heuristics(simplify_prog) };

 break_empty2 { \find(\<{ break; }\>post) 
	\replacewith (false) \heuristics(simplify_prog) };

  throw_ignore_trail2 { \find (\<{ throw #e; }\>post)
	\replacewith (false) \heuristics(simplify_prog) };

  dist_formula0 { \find ( f0 | f1 & f2 ) \replacewith ( ( f0 | f1 ) & ( f0 | f2 ) ) };
  neg_formula1 { \find ( f0 -> f1 ) \replacewith ( !f0 | f1 ) };
  dist_formula3 { \find ( f0 & ( f1 | f2 ) ) \replacewith ( f0 & f1 | f0 & f2 ) };
  assoc_formula4 { \find ( ( f0 | f1 ) | f2 ) \replacewith ( f0 | ( f1 | f2 ) ) };
  assoc_formula5 { \find ( f0 | ( f1 | f2 ) ) \replacewith ( ( f0 | f1 ) | f2 ) };
  taut_formula6 { \find ( f0 | !f0 ) \replacewith ( true ) };
  taut_formula7 { \find ( !f0 | f0 ) \replacewith ( true ) };
  taut_formula8 { \find ( f0 & !f0 ) \replacewith ( false ) };
  taut_formula9 { \find ( !f0 & f0 ) \replacewith ( false ) };

}


\problem {
	false
}

\proof {
(log "0" (user "daniels" ) (keyVersion "danielsRunAllTests.10"))
(branch "dummy ID"
(rule "false_right" (formula "1"))
(opengoal "false ")
)

}
