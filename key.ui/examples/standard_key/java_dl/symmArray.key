// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 

\settings {
"#Proof-Settings-Config-File
#Sat Jul 21 21:02:55 CEST 2007
[General]SoundNotification=false
[DecisionProcedure]SmtBenchmarkArchiving=false
[View]FontIndex=0
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[General]SuggestiveVarNames=false
[View]ShowWholeTaclet=false
[General]ProofAssistant=false
[View]MaxTooltipLines=40
[General]DnDDirectionSensitive=false
[SimultaneousUpdateSimplifier]EagerSimplification=true
[General]StupidMode=false
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=30000

[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_NONE
[Choice]DefaultChoices=transactions-transactions\:transactionsOn , programRules-programRules\:Java , initialisation-initialisation\:disableStaticInitialisation , transactionAbort-transactionAbort\:abortOn , throughout-throughout\:toutOn , intRules-intRules\:arithmeticSemanticsIgnoringOF , assertions-assertions\:on , nullPointerPolicy-nullPointerPolicy\:nullCheck
[DecisionProcedure]SmtZipProblemDir=false
[DecisionProcedureForTest]=SIMPLIFY
[Model]Source=1
[Choice]Choices=transactions-transactions\:transactionsOn-transactions\:transactionsOff , programRules-programRules\:ODL-programRules\:Java , throughout-throughout\:toutOff-throughout\:toutOn , initialisation-initialisation\:disableStaticInitialisation-initialisation\:enableStaticInitialisation , transactionAbort-transactionAbort\:abortOff-transactionAbort\:abortOn , intRules-intRules\:arithmeticSemanticsCheckingOF-intRules\:javaSemantics-intRules\:arithmeticSemanticsIgnoringOF , assertions-assertions\:safe-assertions\:off-assertions\:on , nullPointerPolicy-nullPointerPolicy\:noNullCheck-nullPointerPolicy\:nullCheck
[DecisionProcedure]SmtUseQuantifiers=true
[View]HideIntermediateProofsteps=false
[DecisionProcedure]=SIMPLIFY
[General]OuterRenaming=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "symmArray_java/";

\withOptions runtimeExceptions:allow;


\programVariables {
SymmArray self_SymmArray;
}

\functions {
}

\problem {
   wellFormed(heap)
-> \forall SymmArray self_SymmArray_lv; 
     {self_SymmArray:=self_SymmArray_lv}
       (     !self_SymmArray = null
           &   self_SymmArray.(java.lang.Object::<created>)
             = TRUE
           & (     self_SymmArray.(SymmArray::ar).length
                >= 10
              & \forall int i; 
                  \forall int j; 
                    (     i >= 0
                        & (     i
                             <  self_SymmArray.(SymmArray::ar).length
                           & (  j >= 0
                              &    j
                                <  self_SymmArray.(SymmArray::ar).length))
                     ->   self_SymmArray.(SymmArray::ar)[i][j]
                        = self_SymmArray.(SymmArray::ar)[j][i]))
           & (  !self_SymmArray.(SymmArray::ar) = null
              & (  \forall int i; 
                     (     i >= 0
                         &    i
                           <  self_SymmArray.(SymmArray::ar).length
                      ->   !  self_SymmArray.(SymmArray::ar)[i]
                            = null
                         &   self_SymmArray.(SymmArray::ar)[i].length
                           = self_SymmArray.(SymmArray::ar).length)
                 & \forall int i; 
                     \forall int j; 
                       (     i >= 0
                           & (     i
                                <  self_SymmArray.(SymmArray::ar).length
                              & (  j >= 0
                                 & (     j
                                      <  self_SymmArray.(SymmArray::ar).length
                                    & !i = j)))
                        -> !  self_SymmArray.(SymmArray::ar)[i]
                            = self_SymmArray.(SymmArray::ar)[j])))
        -> \<{ {
                 self_SymmArray.assignA()@SymmArray;
               }
             }\> \forall int i; 
                   \forall int j; 
                     (     i >= 0
                         & (     i
                              <  self_SymmArray.(SymmArray::ar).length
                            & (  j >= 0
                               &    j
                                 <  self_SymmArray.(SymmArray::ar).length))
                      ->   self_SymmArray.(SymmArray::ar)[i][j]
                         = self_SymmArray.(SymmArray::ar)[j][i]))

}
