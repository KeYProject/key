// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 

/**
@provable automatic
@statistic nodes 430
@statistic branches 14
@author Sebastian Wirkert (doc)

Demonstrates treatment of <em>program</em> casts in KeY.<br>
<ol>
<li> The <tt>null</tt> reference can be casted to any other reference type.</li>
<li> <tt>[p] false</tt> evaluates to true iff the program <tt>p</tt></li>
terminates abruptly. Here the termination completes abruptly due to an uncaught
<tt>ClassCastException</tt> thrown as <tt>Base</tt> is not a subclass of
<tt>ConcreteDerived</tt></li>. 
<li> Since the object <tt>a</tt> points to an object of type <tt>ConcreteDerived</tt>, it can be cast to an object of type <tt>ConcreteDerived</tt>.</li>
<li> The identy conversion is always a valid cast.</li>
</ol>

*/

\javaSource "methodcall_java/";

// Input file for KeY standalone prover version 0.703


\problem {
\<{ Object a = null; AbstractBase o = (AbstractBase)a; }\> true
&
\[{ Object a = new Base (); ConcreteDerived c = (ConcreteDerived)a; }\] false
&
\<{ Object a = new ConcreteDerived (); int j = ((ConcreteDerived)a).m(); }\> j = 2
&
\<{ int j = ((ConcreteDerived)new ConcreteDerived ()).m(); }\> j = 2
}
