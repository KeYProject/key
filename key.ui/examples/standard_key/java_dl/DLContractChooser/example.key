// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 


/**@provable interactive

This is an example how to specify method contracts in JavaCardDL directly and
how to use DL Contract Chooser to verify that the methods respect their
specification. Both methods have been proveable.
*/

\javaSource "code/";

\programVariables {
  MyClass mc;
}

\contracts {

  MyClass_addTwenty {
    \programVariables {
        Heap heapAtPre;
    }
    
    true ->
      {heapAtPre := heap}
      \<{
        mc.addTwenty();
      }\> (mc.a = int::select(heapAtPre, mc, MyClass::$a) + 20)
      
    \modifies singleton(mc, MyClass::$a)
  };

  MyClass_addTen {
    \programVariables {
        Heap heapAtPre;
    }  
  
    true ->
    {heapAtPre := heap}
      \<{
        mc.addTen();
      }\> (mc.a = int::select(heapAtPre, mc, MyClass::$a) + 10)
      
    \modifies singleton(mc, MyClass::$a)
  };

}

\chooseContract
