// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Wed May 14 11:55:44 CEST 2008
 */
package java.awt;

public class Font extends java.lang.Object implements java.io.Serializable
{
   public final static java.lang.String DIALOG = "Dialog";
   public final static java.lang.String DIALOG_INPUT = "DialogInput";
   public final static java.lang.String SANS_SERIF = "SansSerif";
   public final static java.lang.String SERIF = "Serif";
   public final static java.lang.String MONOSPACED = "Monospaced";
   public final static int PLAIN = 0;
   public final static int BOLD = 1;
   public final static int ITALIC = 2;
   public final static int ROMAN_BASELINE = 0;
   public final static int CENTER_BASELINE = 1;
   public final static int HANGING_BASELINE = 2;
   public final static int TRUETYPE_FONT = 0;
   public final static int TYPE1_FONT = 1;
   protected java.lang.String name;
   protected int style;
   protected int size;
   protected float pointSize;
   public final static int LAYOUT_LEFT_TO_RIGHT = 0;
   public final static int LAYOUT_RIGHT_TO_LEFT = 1;
   public final static int LAYOUT_NO_START_CONTEXT = 2;
   public final static int LAYOUT_NO_LIMIT_CONTEXT = 4;

   public java.awt.peer.FontPeer getPeer();
   public Font(java.lang.String arg0, int arg1, int arg2);
   public Font(java.util.Map arg0);
   protected Font(java.awt.Font arg0);
   public static java.awt.Font getFont(java.util.Map arg0);
   public static java.awt.Font createFont(int arg0, java.io.InputStream arg1) throws java.awt.FontFormatException, java.io.IOException;
   public static java.awt.Font createFont(int arg0, java.io.File arg1) throws java.awt.FontFormatException, java.io.IOException;
   public java.awt.geom.AffineTransform getTransform();
   public java.lang.String getFamily();
   public java.lang.String getFamily(java.util.Locale arg0);
   public java.lang.String getPSName();
   public java.lang.String getName();
   public java.lang.String getFontName();
   public java.lang.String getFontName(java.util.Locale arg0);
   public int getStyle();
   public int getSize();
   public float getSize2D();
   public boolean isPlain();
   public boolean isBold();
   public boolean isItalic();
   public boolean isTransformed();
   public boolean hasLayoutAttributes();
   public static java.awt.Font getFont(java.lang.String arg0);
   public static java.awt.Font decode(java.lang.String arg0);
   public static java.awt.Font getFont(java.lang.String arg0, java.awt.Font arg1);
   public int hashCode();
   public boolean equals(java.lang.Object arg0);
   public java.lang.String toString();
   public int getNumGlyphs();
   public int getMissingGlyphCode();
   public byte getBaselineFor(char arg0);
   public java.util.Map getAttributes();
   public java.text.AttributedCharacterIterator$Attribute[] getAvailableAttributes();
   public java.awt.Font deriveFont(int arg0, float arg1);
   public java.awt.Font deriveFont(int arg0, java.awt.geom.AffineTransform arg1);
   public java.awt.Font deriveFont(float arg0);
   public java.awt.Font deriveFont(java.awt.geom.AffineTransform arg0);
   public java.awt.Font deriveFont(int arg0);
   public java.awt.Font deriveFont(java.util.Map arg0);
   public boolean canDisplay(char arg0);
   public boolean canDisplay(int arg0);
   public int canDisplayUpTo(java.lang.String arg0);
   public int canDisplayUpTo(char[] arg0, int arg1, int arg2);
   public int canDisplayUpTo(java.text.CharacterIterator arg0, int arg1, int arg2);
   public float getItalicAngle();
   public boolean hasUniformLineMetrics();
   public java.awt.font.LineMetrics getLineMetrics(java.lang.String arg0, java.awt.font.FontRenderContext arg1);
   public java.awt.font.LineMetrics getLineMetrics(java.lang.String arg0, int arg1, int arg2, java.awt.font.FontRenderContext arg3);
   public java.awt.font.LineMetrics getLineMetrics(char[] arg0, int arg1, int arg2, java.awt.font.FontRenderContext arg3);
   public java.awt.font.LineMetrics getLineMetrics(java.text.CharacterIterator arg0, int arg1, int arg2, java.awt.font.FontRenderContext arg3);
   public java.awt.geom.Rectangle2D getStringBounds(java.lang.String arg0, java.awt.font.FontRenderContext arg1);
   public java.awt.geom.Rectangle2D getStringBounds(java.lang.String arg0, int arg1, int arg2, java.awt.font.FontRenderContext arg3);
   public java.awt.geom.Rectangle2D getStringBounds(char[] arg0, int arg1, int arg2, java.awt.font.FontRenderContext arg3);
   public java.awt.geom.Rectangle2D getStringBounds(java.text.CharacterIterator arg0, int arg1, int arg2, java.awt.font.FontRenderContext arg3);
   public java.awt.geom.Rectangle2D getMaxCharBounds(java.awt.font.FontRenderContext arg0);
   public java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext arg0, java.lang.String arg1);
   public java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext arg0, char[] arg1);
   public java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext arg0, java.text.CharacterIterator arg1);
   public java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext arg0, int[] arg1);
   public java.awt.font.GlyphVector layoutGlyphVector(java.awt.font.FontRenderContext arg0, char[] arg1, int arg2, int arg3, int arg4);
   protected void finalize() throws java.lang.Throwable;
}
