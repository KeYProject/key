// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 

/**  @provable interactive
 introduce by cut:
 \forall int i;  \forall int j; 
 (!i = j -> i >= 0 -> j >= 0 -> i <= len -> j <= len -> !nodes(i) = nodes(j))

 in order to proof the cutted formula, make an induction over i for:
  (   j_2 + i <= len
      -> i_10 + i <= len
      -> nodes(j_2 + i) = nodes(i_10 + i))

 invariant:
 \exists int j; ( j >= 0 & j <= len & a = nodes(j)
    &
    \forall int i; (i >= 0 & i < j -> nodes(i).next = nodes(i-1)) &
    \forall int i; (i >= 0 & i < j -> nodes(i).prev = nodes(i+1)) &
    \forall int i; (i >= j & i < len -> nodes(i).next = nodes(i+1)) &
    \forall int i; (i >= j & i < len -> nodes(i).prev = nodes(i-1)) )

 variant:
 len - (\ifEx int i; (a=nodes(i)) \then (i) \else (0))


*/

\javaSource "src/";

\programVariables {
	list x;
}

\functions {
	int len;
	list nodes(int);
}

\problem {
	len >= 0 ->
	\forall int i; ((i >= 0 & i < len) <-> nodes(i) != null) ->
	\forall int i; (i >= 0 & i < len -> nodes(i).next = nodes(i+1)) ->
	\forall int i; (i >= 0 & i < len -> nodes(i).prev = nodes(i-1)) ->
	{x := nodes(0)}
	\<{ list.rev(x); }\>
	(
	\forall int i; (i >= 0 & i < len -> nodes(i).next = nodes(i-1)) &
	\forall int i; (i >= 0 & i < len -> nodes(i).prev = nodes(i+1))
	)
}
