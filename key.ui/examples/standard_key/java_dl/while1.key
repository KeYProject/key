// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 

/**
@provable interactive
@statistic nodes 396
@statistic branches 5
@author Sebastian Wirkert (doc)

Proof example showing how loops are evaluated using invariantes. <br><br>

Proofing this example needs some interaction: <br>
<ol>
<li> In the tab "Proof Search Strategy" select "None" on the topic "Loop treatment" and "Expand" on the topic "Method treatment"
<li> Run the strategy
<li> Select the formula inclusive updates and select the rule "while_invariant"
<li> in the cell "#modifies" enter "i"
<li> in the cell "inv (formula)" enter "i > 0  & i>=j"
<li> Click on the "Apply" button
<li> Once again run the strategy
</ol>

<br><br>
By performing this interaction, you told key, it should proof the loop by using the invariant i>0 & i>=j.
The modifies clause tells KeY, which elements can be modified inside the while loop to prove the invariant.
<br><br>
Note that this example uses the box modality. Meaning that "j>=3 & r=3" holds, for all x>0, if the program terminates normal (i.e. without any 
uncaught exception). Because of the box modality, it also evaluates true, then the program doesn't terminate normally, which is the case for all x>3 
due to the nature of the loop.
*/

\javaSource "while_demo/";

\problem {
\<{ int j;}\>\forall int x; (x >0 -> {j:=x}\[{int r=While.loop22(j);}\](j<=3 & r=3))

}

// invariant is 
// i> 0  & i>=j
// modifies clause is "i"


