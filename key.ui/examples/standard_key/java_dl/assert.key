// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 

/**
@provable automatic

Because the assert statement in this example throws an exception, you
need to turn off the assertions in the taclet options. The calculus
models then the behaviour of a JVM started with the
<tt>-disableassertions</tt> switch (default).

There are three taclet options available modelling assertions:
<ol>
<li>assertionsOn: the calculus models the JVM behaviour when
assertions are enabled globally. This means the assert statement is
symbolically executed. This includes evaluation of the subexpressions
of an assert statement.</li>
<li>assertionsOff: the calculus models the JVM behaviour where
assertions are switched off globally. This means the assert statement
is skipped completely, in particular the subexpressions of this
statement are not evaluated at all.</li>
<li>assertionsSafe: proving a program using this options ensures that
the program is correct wrt. its specification no matter whether
assertions are turned on or off. In fact one has to show that possible
side effects of the assertion due not influence the property to be
shown (i.e. usually one has to show that there are no side effects)
and that the assertions condition always evaluates to true.</li>
</ol>
*/

\javaSource "attributes_java/";


\problem {
   \<{ int i = 2; int j = 0; assert (j = 0) == 2; j += i + 1;  }\> (i = 2 & j = 3)  
}

