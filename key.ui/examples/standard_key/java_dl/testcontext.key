// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 

\classpath "classpath";

/**
@provable automatic
@statistic nodes 329
@statistic branches 10
@author Sebastian Wirkert (doc)

Proof example showing how the context in wich a method is called, 
affects the method invoked.
To understand this example, one must understand, how java evaluates the 
method to call. First of course, for a method to be called, it has to be 
visible in the context calling it. The private int m(int i) does not 
fulfill this prerequisite in the first two expressions:<br>

<ol>
<li><tt>c=A.callMviaB ();</tt></li>
<li><tt>b=B.callM ();</tt></li>
</ol>
Therefore the compiler will call the public int m(long i).
<br>
Things are different in case of 
<ol><li><tt>a=A.callM ();</tt></li> </ol>
The compiler now gets to choose between
<ol><li><tt> public  byte m(long i) { return 2; }</tt></li>
    <li><tt> private int m(int i) { return 1; }</tt></li>
</ol>
since<br>
<tt>
  static int callM() {<br>
     A a = new A();<br>
     return a.m(1);<br>
  }
</tt><br>
calls <tt>m</tt> with an integer value (1L would be a long value), the
compiler chooses the <tt>private int m(int i) { return 1; }</tt>
to be executed.
Note, that the compiler doesn't care for the type of the return value, 
its decicion is solely based on the type of the parameters.
*/

\javaSource "testcontext_java/";

\programVariables {
  int a,b,c;
}

\problem {
\<{
   c=A.callMviaB ();
   b=B.callM ();
   a=A.callM ();
 }\> (a = 1 & b = 2 & c = 2)

}


