
/**
@provable automatic
@statistic nodes 94
@statistic branches 4
@author Sebastian Wirkert (doc)

Example showing how the invocation of methods work.
The class <tt>ConcreteDerived</tt> overrides the method <tt>m</tt> in class <tt>AbstractBase</
tt>. Although the reference to object <tt>o</tt> is of type 
<tt>AbstractBase</tt>, the actual object is of type <tt>ConcreteDerived</tt>.
When calling
   <tt>int j =o.m ();</tt>
The method <tt>m</tt> of class <tt>ConcreteDerived</tt> is called, since it overrides the method <tt>m</tt> from class <tt>AbstractBase</tt>. There is no way 
to access method <tt>m</tt> from class <tt>AbstractBase</tt> for an instance of <tt>ConcreteDerived</tt> from outside the body of <tt>ConcreteDerived</tt>.
Note that fields behave in a different way. They are not overridden, but hidden.
*/

\javaSource "methodcall_java/";

\programVariables {
  int j;
}


\problem {
\<{
   AbstractBase o =new ConcreteDerived ();
   j =o.m ();
 }\> j = 2

}

