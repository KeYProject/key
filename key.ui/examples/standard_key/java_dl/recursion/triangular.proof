\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Sep 25 13:37:22 CEST 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Fri Sep 25 13:37:22 CEST 2015
name=Triangular[Triangular\\:\\:tria(int)].JML normal_behavior operation contract.0
contract=Triangular[Triangular\\:\\:tria(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "daniel" ) (keyVersion "eff963a736c991e023578259348f159cd5643230"))

(autoModeTime "757990054")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "n,self,result,exc,heapAtPre,o,f"))
(rule "translateJavaMulInt" (formula "1") (term "0,0,0,0,1,1"))
(rule "translateJavaMulInt" (formula "1") (term "1,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "1,1,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "polySimp_mulComm0" (formula "8") (term "0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "8") (term "1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1"))
(rule "polySimp_homoEq" (formula "8") (term "0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "0,0,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "8") (term "0,0,0,0,1"))
(rule "assignment" (formula "8") (term "1"))
(builtin "One Step Simplification" (formula "8"))
(rule "polySimp_sepPosMonomial" (formula "8") (term "0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "0,1,0,0,0,1"))
(rule "Class_invariant_axiom_for_Triangular" (formula "6") (ifseqformula "3"))
(rule "true_left" (formula "6"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_tria,savedHeapBefore_tria"))
(builtin "One Step Simplification" (formula "7"))
(rule "ifElseUnfold" (formula "7") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x"))
(rule "less_equal_than_comparison_simple" (formula "7") (term "1"))
(builtin "One Step Simplification" (formula "7"))
(rule "ifElseSplit" (formula "7"))
(branch "if x true"
   (builtin "One Step Simplification" (formula "8"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "1"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "6"))
   (rule "leq_literals" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
   (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
   (rule "qeq_literals" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "methodCallReturn" (formula "7") (term "1"))
   (rule "assignment" (formula "7") (term "1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "methodCallEmpty" (formula "7") (term "1"))
   (rule "tryEmpty" (formula "7") (term "1"))
   (rule "emptyModality" (formula "7") (term "1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "times_zero_2" (formula "7") (term "1,1,0"))
   (rule "add_zero_right" (formula "7") (term "1,0"))
   (rule "applyEq" (formula "7") (term "0,0,0") (ifseqformula "5"))
   (rule "times_zero_2" (formula "7") (term "0,0"))
   (rule "eqSymm" (formula "7") (term "0"))
   (rule "applyEq" (formula "7") (term "0,0,0") (ifseqformula "5"))
   (rule "times_zero_2" (formula "7") (term "0,0"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "Class_invariant_axiom_for_Triangular" (formula "7") (ifseqformula "3"))
   (rule "closeTrue" (formula "7"))
)
(branch "if x false"
   (builtin "One Step Simplification" (formula "8"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "inEqSimp_leqRight" (formula "6"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "1"))
   (rule "leq_literals" (formula "6") (term "0"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "returnUnfold" (formula "7") (term "1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_1"))
   (rule "compound_addition_2" (formula "7") (term "1") (inst "#v1=x_3") (inst "#v0=x_2"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_2"))
   (rule "assignment" (formula "7") (term "1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_3"))
   (rule "methodCallWithAssignmentUnfoldArguments" (formula "7") (term "1"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "var"))
   (rule "assignmentSubtractionInt" (formula "7") (term "1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "translateJavaSubInt" (formula "7") (term "0,1,0"))
   (rule "polySimp_elimSub" (formula "7") (term "0,1,0"))
   (rule "mul_literals" (formula "7") (term "1,0,1,0"))
   (rule "polySimp_addComm0" (formula "7") (term "0,1,0"))
   (builtin "Use Operation Contract" (formula "7") (newnames "heapBefore_tria_0,result_0,exc_0,heapAfter_tria,anon_heap_tria") (contract "Triangular[Triangular::tria(int)].JML normal_behavior operation contract.0"))
   (branch "Post (tria)"
      (builtin "One Step Simplification" (formula "7"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "translateJavaMulInt" (formula "7") (term "0,0,0,1,1"))
      (rule "translateJavaMulInt" (formula "7") (term "1,0,0,1,1"))
      (rule "translateJavaAddInt" (formula "7") (term "1,1,0,0,1,1"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "polySimp_mulComm0" (formula "9") (term "0"))
      (rule "polySimp_addComm1" (formula "9") (term "1,1"))
      (rule "add_literals" (formula "9") (term "0,1,1"))
      (rule "add_zero_left" (formula "9") (term "1,1"))
      (rule "polySimp_mulComm0" (formula "9") (term "1"))
      (rule "polySimp_rightDist" (formula "9") (term "1"))
      (rule "polySimp_homoEq" (formula "9"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
      (rule "polySimp_addComm1" (formula "9") (term "0"))
      (rule "assignment" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "blockEmpty" (formula "12") (term "1"))
      (rule "polySimp_sepPosMonomial" (formula "9"))
      (rule "polySimp_mulComm0" (formula "9") (term "1"))
      (rule "polySimp_rightDist" (formula "9") (term "1"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
      (rule "polySimp_mulAssoc" (formula "9") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "9") (term "0,0,1"))
      (rule "polySimp_mulLiterals" (formula "9") (term "0,1"))
      (rule "polySimp_elimOne" (formula "9") (term "0,1"))
      (rule "add_non_neg_square" (inst "squareFac=n"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "Class_invariant_axiom_for_Triangular" (formula "11") (ifseqformula "5"))
      (rule "true_left" (formula "11"))
      (rule "assignmentAdditionInt" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "translateJavaAddInt" (formula "12") (term "0,1,0"))
      (rule "methodCallReturn" (formula "12") (term "1"))
      (rule "assignment" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "methodCallEmpty" (formula "12") (term "1"))
      (rule "tryEmpty" (formula "12") (term "1"))
      (rule "emptyModality" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "1,0"))
      (rule "polySimp_pullOutFactor0" (formula "12") (term "0,1,0"))
      (rule "add_literals" (formula "12") (term "1,0,1,0"))
      (rule "polySimp_elimOne" (formula "12") (term "0,1,0"))
      (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "10"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "Class_invariant_axiom_for_Triangular" (formula "12") (ifseqformula "5"))
      (rule "closeTrue" (formula "12"))
   )
   (branch "Exceptional Post (tria)"
      (builtin "One Step Simplification" (formula "9"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "translateJavaMulInt" (formula "7") (term "0,0,0,1,1"))
      (rule "translateJavaMulInt" (formula "7") (term "1,0,0,1,1"))
      (rule "translateJavaAddInt" (formula "7") (term "1,1,0,0,1,1"))
      (rule "andLeft" (formula "7"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "8") (term "1,0") (ifseqformula "7"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "8"))
      (rule "close" (formula "12") (ifseqformula "11"))
   )
   (branch "Pre (tria)"
      (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "2")))
      (rule "measuredByCheck" (formula "7") (term "1") (ifseqformula "5"))
      (rule "precOfInt" (formula "7") (term "1"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "1,1"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,1,1"))
      (rule "polySimp_addComm1" (formula "7") (term "0,0,1,1"))
      (rule "add_literals" (formula "7") (term "0,0,0,1,1"))
      (rule "add_zero_left" (formula "7") (term "0,0,1,1"))
      (rule "polySimp_pullOutFactor2" (formula "7") (term "0,1,1"))
      (rule "add_literals" (formula "7") (term "1,0,1,1"))
      (rule "times_zero_1" (formula "7") (term "0,1,1"))
      (rule "leq_literals" (formula "7") (term "1,1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_homoInEq0" (formula "7") (term "1"))
      (rule "times_zero_2" (formula "7") (term "1,0,1"))
      (rule "add_zero_right" (formula "7") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0"))
      (rule "mul_literals" (formula "7") (term "1,0,0"))
      (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1"))
      (rule "mul_literals" (formula "7") (term "1,1"))
      (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "Class_invariant_axiom_for_Triangular" (formula "7") (ifseqformula "4"))
      (rule "closeTrue" (formula "7"))
   )
)
)

}
