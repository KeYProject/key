\settings {
"#Proof-Settings-Config-File
#Mon Feb 07 08:28:34 CET 2005
[Strategy]MaximumNumberOfAutomaticApplications=10000
[View]ShowWholeTaclet=false
[General]StupidMode=true
[Choice]DefaultChoices=floatingPoints-floatingPoints\\:javaSemantics , programRules-programRules\\:Java , transactionsPolicy-transactionsPolicy\\:abortTransaction , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , nullPointerPolicy-nullPointerPolicy\\:nullCheck
[OCLRef]Null=true
[OCLRef]ExcThrown=true
[View]FontIndex=0
[View]MaxTooltipLines=40
[General]ProofAssistant=false
[General]SuggestiveVarNames=false
[OCLRef]Array=true
[Model]Source=1
[Strategy]ActiveStrategy=Simple JavaCardDL without unwinding loops
[DecisionProcedure]=SIMPLIFY
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[Choice]Choices=floatingPoints-floatingPoints\\:javaSemantics , programRules-programRules\\:ODL-programRules\\:Java , transactionsPolicy-transactionsPolicy\\:abortTransaction-transactionsPolicy\\:noAbortTransaction , initialisation-initialisation\\:disableStaticInitialisation-initialisation\\:enableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsCheckingOF-intRules\\:javaSemantics-intRules\\:arithmeticSemanticsIgnoringOF , nullPointerPolicy-nullPointerPolicy\\:noNullCheck-nullPointerPolicy\\:nullCheck
"
}



\javaSource "attributes_java/";

// Input file for KeY standalone prover version 0.1083

\sorts {
   \generic S;
   \generic T;
}


\schemaVariables {
   \program Variable #a, #a1, #a2;
   \term ListElement t1;
   \term ListElement t2;
   \term ListElement t3;

   \variables ListElement m;   
   \variables int k;
   \term int l,n;
}

\predicates {
  \nonRigid reach[next@(ListElement);](ListElement, ListElement, int);
  \nonRigid reach[#a;](ListElement, ListElement, int);
}


\programVariables {
   ListElement r;
   ListElement s;
}


\rules {

 reachable_single {
      \find(reach[#a;](t1, t2, n)) 
	\replacewith( (t1 = t2 & n = 0 ) | (gt(n,0) & !(t1=null) & reach[#a;](t1.#a, t2, sub(n,1))))
  };

 reachable_unique_1 {
      \assumes (reach[#a;](t1, t2, n)==>) 
      \find (reach[#a;](t1, t3, n)==>) \add(t2 = t3==>)
  };

 reachable_decomposition {
      \find(reach[#a;](t1, t2, n)==>) 
	\varcond (\notFreeIn(m, t1, t2, n), \notFreeIn(k, t1, t2, n))
        \add(\forall k; (geq(k,0) & leq(k,n) -> \exists m; (reach[#a;](t1, m, k) & reach[#a;](m, t2, sub(n,k))))==>)
 };

  reachable_single_base_1 {
      \find(reach[#a;](t1, t2, 0)) \replacewith(t1 = t2)
 };

 reachable_single_base_2 {
      \assumes (n = 0 ==>) \find(reach[#a;](t1, t2, n)) \replacewith(t1 = t2)
 };

 reachable_base {
      \assumes (lt(n,0)==>) 
      \find(reach[#a;](t1, t2, n)) \sameUpdateLevel \replacewith(false)
 };

 reachable_step_snd_arg {
      \find(reach[#a;](t1, t2, n) ==>) \add(t2 = null | reach[#a;](t1, t2.#a, add(n,1))==>)
 };

 reachable_step_fst_arg {
      \find(reach[#a;](t1, t2, n) ==>) \add(t1 = null | reach[#a;](t1.#a, t2, sub(n,1))==>)
 };

 reachable_unique_2 {
      \assumes (reach[#a;](t1, t2, n) ==>) \find(reach[#a;](t1, t2, l) ==>) \add(t1 = null | n = l ==>)
 };

 reachable_step_back_fst_arg {
      \find(reach[#a;](t1.#a, t2, n) ==>) \add(reach[#a;](t1, t2, add(n,1)) | !(t1 = null)==>)
 };

}



/*
all l:ListElement.(!(l=null) -> all m:ListElement.all m2:ListElement.
   (!m=null & !m2=null  & reach[next@(ListElement);](l,m,iv) & ex n:int.(geq(n,0) & leq(n,iv) & reach[ListElement::next;](l,m2,n) & reach[ListElement::next;](m2,m,sub(iv,n))) & 
    m.next@(ListElement) = null ->
    {s:=l || l.help@(ListElement):=m2} <{  
    {method-frame(_var0,ListElement(s))
      : {
          while ( help.next!=null ) {
            help=help.next;
          }
            return help;
        }
      }
      r=_var0;
    }> r = m)m2_1.ListElement




all l1:ListElement.all l2:ListElement.all last:ListElement.
 (ex n:int.(!(l1=null) & !(last=null) & 
             geq(n,0) & reach[next@(ListElement);](l1,l2,n) & 
	     reach[next@(ListElement);](l2,last,iv) &  
             last.next@(ListElement) = null->
{s:=l1 || l1.help@(ListElement):=l2}
   <{ {method-frame(_var0,ListElement(s))
      : {
          while ( help.next!=null ) {
            help=help.next;
          }
            return help;
        }
      }
      r=_var0;
    }> r = last)

*/

\problem {
   \forall ListElement l;
     \exists int size;
       (  geq(size, 0)
        & reach[next@(ListElement);](l, null, size))
-> \forall ListElement l;
     \forall ListElement m;
       \forall int n;
         (     !l = null
             & geq(n, 0)
             & reach[next@(ListElement);](l, m, n)
             & !m = null
             & m.next@(ListElement) = null
          -> {s:=l}
               \<{
                  r=s.getLast ();
                }\> r = m)

}

\proof {
(keyLog "0" (keyUser "bubel" ) (keyVersion "reachable.13"))
(keyLog "1" (keyUser "bubel" ) (keyVersion "reachable.13"))
(keyLog "2" (keyUser "bubel" ) (keyVersion "reachable.13"))

(branch "dummy ID"
(rule "imp_right" (formula "1"))
(rule "all_right" (formula "2") (inst "sk=l_0"))
(rule "all_right" (formula "2") (inst "sk=m_0"))
(rule "all_right" (formula "2") (inst "sk=n_0"))
(rule "imp_right" (formula "2"))
(rule "and_left" (formula "1"))
(rule "not_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "2"))
(rule "and_left" (formula "3"))
(rule "not_left" (formula "3"))
(rule "make_insert_eq_nonrigid" (formula "3"))
(rule "geq_to_lt" (formula "4") (term "0,0,0"))
(rule "method_call_with_assignment" (formula "7") (term "1") (inst "#v0=_var0"))
(branch "Normal Execution (s != null)"
   (builtin "Update Simplification" (formula "7"))
   (rule "geq_to_lt" (formula "1"))
   (rule "not_left" (formula "1"))
   (rule "eliminate_variable_declaration" (formula "7") (term "1"))
   (rule "method_body_expand" (formula "7") (term "1"))
   (rule "assignment_normalassign" (formula "7") (term "1"))
   (builtin "Update Simplification" (formula "7"))
   (rule "int_induction" (inst "b=all l1:ListElement.
  all l2:ListElement.
    all last:ListElement.
      (   ex n:int.
            (  !l1 = null
             & !last = null
             & geq(n, 0)
             & reach[next@(ListElement);](l1, l2, n)
             & reach[next@(ListElement);](l2, last, iv)
             & last.next@(ListElement) = null)
       -> {s:=l1 ||
            l1.help@(ListElement):=l2}
            <{ {method-frame(_var0,ListElement(s))
               : {
                   while ( help.next!=null ) {
                     help=help.next;
                   }
                                                   return help;
                 }
               }
               r=_var0;
             }> r = last)") (inst "nv=iv"))
   (branch "Base Case"
      (rule "hide_right" (formula "8"))
      (rule "all_right" (formula "4") (inst "sk=l1_0"))
      (rule "all_right" (formula "4") (inst "sk=l2_0"))
      (rule "all_right" (formula "4") (inst "sk=last_0"))
      (rule "imp_right" (formula "4"))
      (rule "ex_left" (formula "1") (inst "sk=n_1"))
      (rule "and_left" (formula "1"))
      (rule "not_left" (formula "1"))
      (rule "and_left" (formula "1"))
      (rule "not_left" (formula "1"))
      (rule "and_left" (formula "1"))
      (rule "and_left" (formula "2"))
      (rule "and_left" (formula "3"))
      (rule "make_insert_eq_nonrigid" (formula "4"))
      (rule "geq_to_lt" (formula "1"))
      (rule "not_left" (formula "1"))
      (rule "reachable_single_base_1" (formula "2"))
      (rule "unwind_while" (formula "10") (term "3"))
      (rule "if_eval" (formula "10") (term "3") (inst "#boolv=_var3"))
      (rule "eliminate_variable_declaration_boolean" (formula "10") (term "3"))
      (rule "compound_inequality_comparision_1" (formula "10") (term "3") (inst "#v0=_var4"))
      (rule "variable_declaration_allmodal" (formula "10") (term "3"))
      (rule "eliminate_variable_declaration" (formula "10") (term "3"))
      (rule "assignment_read_attribute" (formula "10") (term "3"))
      (branch "Normal Execution (help != null)"
         (builtin "Update Simplification" (formula "10"))
         (builtin "Update Simplification" (formula "11"))
         (rule "apply_eq_rigid" (formula "11") (term "0,0") (ifseqformula "2"))
         (rule "apply_eq" (formula "11") (term "0") (ifseqformula "3"))
         (rule "inequality_comparision" (formula "11") (term "4"))
         (builtin "Update Simplification" (formula "11"))
         (rule "close_eq" (formula "11") (term "0,0,0"))
         (rule "concrete_not_1" (formula "11") (term "0,0"))
         (rule "concrete_impl_2" (formula "11") (term "0"))
         (rule "concrete_and_1" (formula "11"))
         (rule "close_eq" (formula "11") (term "0"))
         (rule "concrete_impl_1" (formula "11"))
         (rule "if_skip_then" (formula "11") (term "3"))
         (rule "assignment_normalassign" (formula "11") (term "3"))
         (builtin "Update Simplification" (formula "11"))
         (rule "method_call_return_ignore_trail" (formula "11") (term "3"))
         (rule "assignment_normalassign" (formula "11") (term "3"))
         (builtin "Update Simplification" (formula "11"))
         (rule "method_call_empty" (formula "11") (term "4"))
         (builtin "Update Simplification" (formula "11"))
         (rule "empty_block" (formula "11") (term "3"))
         (rule "assignment_normalassign" (formula "11") (term "3"))
         (builtin "Update Simplification" (formula "11"))
         (rule "empty_modality" (formula "11") (term "3"))
         (builtin "Update Simplification" (formula "11"))
         (rule "close_goal" (formula "11") (ifseqformula "2"))
      )
      (branch "Null Reference (help = null)"
         (builtin "Update Simplification" (formula "1"))
         (rule "commute_eq" (formula "3"))
         (rule "apply_eq_rigid" (formula "3") (term "1") (ifseqformula "1"))
         (rule "close_goal_antec" (formula "3") (ifseqformula "9"))
      )
   )
   (branch "Step Case"
      (rule "all_right" (formula "4") (inst "sk=iv_0"))
      (rule "imp_right" (formula "4"))
      (rule "and_left" (formula "1"))
      (rule "all_right" (formula "6") (inst "sk=l1_1"))
      (rule "all_right" (formula "6") (inst "sk=l2_1"))
      (rule "all_right" (formula "6") (inst "sk=last_1"))
      (rule "imp_right" (formula "6"))
      (rule "ex_left" (formula "1") (inst "sk=n_2"))
      (rule "and_left" (formula "1"))
      (rule "not_left" (formula "1"))
      (rule "and_left" (formula "1"))
      (rule "and_left" (formula "2"))
      (rule "not_left" (formula "1"))
      (rule "and_left" (formula "2"))
      (rule "and_left" (formula "3"))
      (rule "make_insert_eq_nonrigid" (formula "4"))
      (rule "geq_to_lt" (formula "5"))
      (rule "not_left" (formula "5"))
      (rule "geq_to_lt" (formula "5") (term "0,1,1,0,0,0,0,0"))
      (rule "geq_to_lt" (formula "1"))
      (rule "not_left" (formula "1"))
      (rule "succ_to_plusone" (formula "2") (term "2"))
      (rule "hide_right" (formula "16"))
      (rule "unwind_while" (formula "12") (term "3"))
      (rule "if_eval" (formula "12") (term "3") (inst "#boolv=_var5"))
      (rule "eliminate_variable_declaration_boolean" (formula "12") (term "3"))
      (rule "compound_inequality_comparision_1" (formula "12") (term "3") (inst "#v0=_var6"))
      (rule "variable_declaration_allmodal" (formula "12") (term "3"))
      (rule "eliminate_variable_declaration" (formula "12") (term "3"))
      (rule "make_insert_eq_nonrigid" (formula "6"))
      (rule "make_insert_eq_nonrigid" (formula "3"))
      (rule "assignment_read_attribute" (formula "12") (term "3"))
      (branch "Normal Execution (help != null)"
         (builtin "Update Simplification" (formula "13"))
         (builtin "Update Simplification" (formula "12"))
         (rule "inequality_comparision" (formula "13") (term "4"))
         (builtin "Update Simplification" (formula "13"))
         (rule "and_right" (formula "13"))
         (branch "null"
            (rule "imp_right" (formula "13"))
            (rule "not_left" (formula "1"))
            (rule "if_enter_then" (formula "14") (term "3"))
            (rule "assignment_normalassign" (formula "14") (term "3"))
            (builtin "Update Simplification" (formula "14"))
            (rule "assignment_read_attribute" (formula "14") (term "3"))
            (branch "Normal Execution (help != null)"
               (builtin "Update Simplification" (formula "15"))
               (builtin "Update Simplification" (formula "14"))
               (rule "empty_block" (formula "14") (term "3"))
               (rule "inst_all" (formula "14") (term "0") (ifseqformula "4"))
               (rule "hide_left" (formula "5"))
               (rule "all_left_hide" (formula "1") (inst "t=l2_1.next@(ListElement)"))
               (rule "all_left_hide" (formula "1") (inst "t=last_1"))
               (rule "elim_double_block_3" (formula "14") (term "3"))
               (rule "replace_known_right" (formula "1") (term "3,1") (ifseqformula "14"))
               (builtin "Update Simplification" (formula "1"))
               (rule "concrete_impl_3" (formula "1"))
               (rule "not_left" (formula "1"))
               (rule "ex_right_hide" (formula "7") (inst "t=add(n_2, 1)"))
               (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "12"))
               (rule "replace_known_right" (formula "7") (term "0,0,1") (ifseqformula "11"))
               (rule "reachable_step_snd_arg" (formula "1"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "14"))
               (rule "concrete_or_2" (formula "1"))
               (rule "reachable_step_fst_arg" (formula "2"))
               (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "14"))
               (rule "concrete_or_2" (formula "2"))
               (rule "replace_known_left" (formula "9") (term "0,1,1,1") (ifseqformula "1"))
               (rule "reachable_step_fst_arg" (formula "4"))
               (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "16"))
               (rule "concrete_or_2" (formula "4"))
               (rule "sub" (formula "4") (term "2"))
               (rule "switch_brackets" (formula "4") (term "2"))
               (rule "add_sub_elim_right" (formula "4") (term "1,2"))
               (rule "add_zero_right" (formula "4") (term "2"))
               (rule "replace_known_left" (formula "10") (term "0,1,1,1,1") (ifseqformula "4"))
               (rule "concrete_and_1" (formula "10") (term "1,1,1,1"))
               (rule "concrete_not_2" (formula "10") (term "0,1"))
               (rule "concrete_not_2" (formula "10") (term "0"))
               (rule "concrete_and_1" (formula "10") (term "1,1,1"))
               (rule "concrete_and_1" (formula "10"))
               (rule "concrete_and_1" (formula "10"))
               (rule "apply_eq" (formula "10") (term "0,1") (ifseqformula "6"))
               (rule "close_eq" (formula "10") (term "1"))
               (rule "concrete_and_3" (formula "10"))
               (rule "not_right" (formula "10"))
               (rule "sub" (formula "3") (term "2"))
               (rule "neg_literal" (formula "3") (term "1,2"))
               (rule "relax_inequation_3" (formula "12") (inst "j=-1"))
               (rule "less_literals" (formula "12") (term "0"))
               (rule "concrete_and_1" (formula "12"))
               (rule "add_less" (formula "12") (inst "i1=1"))
               (rule "add_literals" (formula "12") (term "1"))
               (rule "switch_params" (formula "12") (term "0"))
               (rule "close_goal" (formula "12") (ifseqformula "1"))
            )
            (branch "Null Reference (help = null)"
               (builtin "Update Simplification" (formula "1"))
               (rule "close_goal" (formula "14") (ifseqformula "1"))
            )
         )
         (branch "null"
            (rule "imp_right" (formula "13"))
            (rule "make_insert_eq_nonrigid" (formula "1"))
            (rule "if_skip_then" (formula "14") (term "3"))
            (rule "assignment_normalassign" (formula "14") (term "3"))
            (builtin "Update Simplification" (formula "14"))
            (rule "method_call_return_ignore_trail" (formula "14") (term "3"))
            (rule "assignment_normalassign" (formula "14") (term "3"))
            (builtin "Update Simplification" (formula "14"))
            (rule "method_call_empty" (formula "14") (term "4"))
            (builtin "Update Simplification" (formula "14"))
            (rule "empty_block" (formula "14") (term "3"))
            (rule "assignment_normalassign" (formula "14") (term "3"))
            (builtin "Update Simplification" (formula "14"))
            (rule "empty_modality" (formula "14") (term "3"))
            (builtin "Update Simplification" (formula "14"))
            (rule "commute_eq" (formula "14"))
            (rule "reachable_step_fst_arg" (formula "3"))
            (rule "apply_eq" (formula "3") (term "0,1") (ifseqformula "1"))
            (rule "reachable_single" (formula "3") (term "1"))
            (rule "close_eq" (formula "3") (term "0,0,1,1,1"))
            (rule "concrete_not_1" (formula "3") (term "0,1,1,1"))
            (rule "concrete_and_2" (formula "3") (term "1,1,1"))
            (rule "concrete_and_4" (formula "3") (term "1,1"))
            (rule "concrete_or_4" (formula "3") (term "1"))
            (rule "commute_eq" (formula "3") (term "0,1"))
            (rule "replace_known_right" (formula "3") (term "0,1") (ifseqformula "12"))
            (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "14"))
            (rule "concrete_and_2" (formula "3") (term "1"))
            (rule "concrete_or_2" (formula "3"))
            (rule "close_by_false" (formula "3"))
         )
      )
      (branch "Null Reference (help = null)"
         (builtin "Update Simplification" (formula "1"))
         (rule "apply_eq_rigid" (formula "13") (term "2") (ifseqformula "1"))
         (rule "apply_eq_rigid" (formula "3") (term "0") (ifseqformula "1"))
         (rule "apply_eq" (formula "2") (term "1") (ifseqformula "1"))
         (rule "make_insert_eq_nonrigid" (formula "1"))
         (rule "make_insert_eq" (formula "1"))
         (rule "throw_evaluate_non_simple" (formula "13") (term "3") (inst "#v0=_var0"))
         (rule "variable_declaration_allmodal" (formula "13") (term "3"))
         (rule "eliminate_variable_declaration" (formula "13") (term "3"))
         (rule "object_creation_assignment" (formula "13") (term "3") (inst "#v0=_var1"))
         (rule "variable_declaration_allmodal" (formula "13") (term "3"))
         (rule "eliminate_variable_declaration" (formula "13") (term "3"))
         (rule "static_method_call_static_with_assignment_via_typereference" (formula "13") (term "3") (inst "#v0=_var2"))
         (rule "eliminate_variable_declaration" (formula "13") (term "3"))
         (rule "method_body_expand" (formula "13") (term "3"))
         (rule "eliminate_variable_declaration" (formula "13") (term "3"))
         (rule "assignment_read_static_attribute" (formula "13") (term "3"))
         (builtin "Update Simplification" (formula "13"))
         (rule "method_call" (formula "13") (term "4"))
         (branch "Normal Execution (<newNullPointerException0> != null )"
            (rule "implicit_field_non_null_2" (formula "13") (term "4"))
            (builtin "Update Simplification" (formula "13"))
            (rule "false_right" (formula "13"))
            (rule "method_body_expand" (formula "13") (term "4"))
            (rule "assignment_normalassign" (formula "13") (term "4"))
            (builtin "Update Simplification" (formula "13"))
            (rule "assignment_normalassign" (formula "13") (term "6"))
            (builtin "Update Simplification" (formula "13"))
            (rule "assignment_write_static_attribute" (formula "13") (term "8"))
            (builtin "Update Simplification" (formula "13"))
            (rule "assignment_normalassign" (formula "13") (term "9"))
            (builtin "Update Simplification" (formula "13"))
            (rule "method_call_within_class" (formula "13") (term "11"))
            (rule "method_body_expand" (formula "13") (term "11"))
            (rule "method_call_super" (formula "13") (term "11"))
            (rule "method_body_expand" (formula "13") (term "11"))
            (rule "method_call_super" (formula "13") (term "11"))
            (rule "method_body_expand" (formula "13") (term "11"))
            (rule "method_call_super" (formula "13") (term "11"))
            (rule "method_body_expand" (formula "13") (term "11"))
            (rule "method_call_super" (formula "13") (term "11"))
            (rule "method_body_expand" (formula "13") (term "11"))
            (rule "method_call_empty" (formula "13") (term "11"))
            (rule "method_call_empty" (formula "13") (term "11"))
            (rule "method_call_empty" (formula "13") (term "11"))
            (rule "method_call_empty" (formula "13") (term "11"))
            (rule "method_call_empty" (formula "13") (term "11"))
            (rule "empty_block" (formula "13") (term "11"))
            (rule "method_call_return_ignore_result" (formula "13") (term "11"))
            (rule "empty_block" (formula "13") (term "11"))
            (rule "method_call_return_ignore_trail" (formula "13") (term "11"))
            (rule "assignment_normalassign" (formula "13") (term "11"))
            (builtin "Update Simplification" (formula "13"))
            (rule "method_call_empty" (formula "13") (term "11"))
            (rule "empty_block" (formula "13") (term "11"))
            (rule "assignment_normalassign" (formula "13") (term "11"))
            (builtin "Update Simplification" (formula "13"))
            (rule "method_call" (formula "13") (term "11"))
            (branch "Normal Execution (_var1 != null )"
               (builtin "Update Simplification" (formula "13"))
               (rule "implicit_field_non_null_2" (formula "13"))
               (rule "false_right" (formula "13"))
               (rule "method_body_expand" (formula "13") (term "11"))
               (rule "method_call_super" (formula "13") (term "11"))
               (rule "method_body_expand" (formula "13") (term "11"))
               (rule "method_call_super" (formula "13") (term "11"))
               (rule "method_body_expand" (formula "13") (term "11"))
               (rule "method_call_super" (formula "13") (term "11"))
               (rule "method_body_expand" (formula "13") (term "11"))
               (rule "method_call_super" (formula "13") (term "11"))
               (rule "method_body_expand" (formula "13") (term "11"))
               (rule "method_call_empty" (formula "13") (term "11"))
               (rule "method_call_empty" (formula "13") (term "11"))
               (rule "method_call_empty" (formula "13") (term "11"))
               (rule "method_call_empty" (formula "13") (term "11"))
               (rule "method_call_empty" (formula "13") (term "11"))
               (rule "empty_block" (formula "13") (term "11"))
               (rule "assignment_write_attribute" (formula "13") (term "11"))
               (branch "Normal Execution (_var1 != null)"
                  (builtin "Update Simplification" (formula "14"))
                  (builtin "Update Simplification" (formula "13"))
                  (rule "implicit_field_non_null_2" (formula "13"))
                  (rule "false_right" (formula "13"))
                  (rule "assignment_normalassign" (formula "13") (term "11"))
                  (builtin "Update Simplification" (formula "13"))
                  (rule "method_call_throw_with_param_ignore_trail" (formula "13") (term "11"))
                  (builtin "Update Simplification" (formula "13"))
                  (rule "throw_in_block_ignore_trail" (formula "13") (term "10"))
                  (rule "throw_single_total" (formula "13") (term "10"))
                  (builtin "Update Simplification" (formula "13"))
                  (rule "false_right" (formula "13"))
                  (rule "reachable_single" (formula "3"))
                  (rule "commute_eq" (formula "3") (term "0,0"))
                  (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "11"))
                  (rule "concrete_and_2" (formula "3") (term "0"))
                  (rule "concrete_or_2" (formula "3"))
                  (rule "close_eq" (formula "3") (term "0,0,1"))
                  (rule "concrete_not_1" (formula "3") (term "0,1"))
                  (rule "concrete_and_2" (formula "3") (term "1"))
                  (rule "concrete_and_4" (formula "3"))
                  (rule "close_by_false" (formula "3"))
               )
               (branch "Null Reference (_var1 = null)"
                  (builtin "Update Simplification" (formula "1"))
                  (rule "implicit_field_non_null_2" (formula "1"))
                  (rule "close_by_false" (formula "1"))
               )
            )
            (branch "Null Reference (_var1 = null)"
               (builtin "Update Simplification" (formula "1"))
               (rule "implicit_field_non_null_2" (formula "1"))
               (rule "close_by_false" (formula "1"))
            )
         )
         (branch "Null Reference (<newNullPointerException0> = null)"
            (rule "implicit_field_non_null_2" (formula "1") (term "4"))
            (builtin "Update Simplification" (formula "1"))
            (rule "close_by_false" (formula "1"))
         )
      )
   )
   (branch "Use Case"
      (rule "make_insert_eq_nonrigid" (formula "3"))
      (rule "geq_to_lt" (formula "1") (term "0,0"))
      (rule "geq_to_lt" (formula "1") (term "0,1,1,0,0,0,0,0,1,0"))
      (rule "inst_all" (formula "5") (term "0") (ifseqformula "1"))
      (rule "hide_left" (formula "2"))
      (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "5"))
      (rule "concrete_not_2" (formula "1") (term "0"))
      (rule "concrete_impl_1" (formula "1"))
      (rule "inst_all" (formula "8") (term "0") (ifseqformula "1"))
      (rule "hide_left" (formula "2"))
      (rule "inst_all" (formula "8") (term "2") (ifseqformula "1"))
      (rule "hide_left" (formula "2"))
      (rule "inst_all" (formula "8") (term "1,0,3") (ifseqformula "1"))
      (rule "hide_left" (formula "2"))
      (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "8"))
      (rule "concrete_impl_3" (formula "1"))
      (rule "not_left" (formula "1"))
      (rule "inst_ex" (formula "5") (term "1") (ifseqformula "4"))
      (rule "reachable_single_base_1" (formula "5") (term "0,1,1,1"))
      (rule "replace_known_left" (formula "5") (term "0,1,1,1,1") (ifseqformula "1"))
      (rule "replace_known_left" (formula "5") (term "1,1,1,1,1") (ifseqformula "2"))
      (rule "concrete_and_1" (formula "5") (term "1,1,1,1"))
      (rule "close_eq" (formula "5") (term "0,1,1,1"))
      (rule "concrete_and_1" (formula "5") (term "1,1,1"))
      (rule "concrete_and_3" (formula "5") (term "1,1"))
      (rule "less_literals" (formula "5") (term "0,1,1"))
      (rule "concrete_not_2" (formula "5") (term "1,1"))
      (rule "concrete_and_3" (formula "5") (term "1"))
      (rule "apply_eq" (formula "4") (term "0,1,1,1,1,1,0") (ifseqformula "2"))
      (rule "close_eq" (formula "4") (term "1,1,1,1,1,0"))
      (rule "concrete_and_3" (formula "4") (term "1,1,1,1,0"))
      (rule "replace_known_left" (formula "4") (term "1,1,1,1,0") (ifseqformula "1"))
      (rule "concrete_and_3" (formula "4") (term "1,1,1,0"))
      (rule "and_right" (formula "5"))
      (branch "null"
         (rule "not_right" (formula "5"))
         (rule "close_goal" (formula "8") (ifseqformula "1"))
      )
      (branch "null"
         (rule "not_right" (formula "5"))
         (rule "close_goal" (formula "7") (ifseqformula "1"))
      )
   )
)
(branch "Null Reference (s = null)"
   (builtin "Update Simplification" (formula "1"))
   (builtin "Update Simplification" (formula "8"))
   (rule "close_goal" (formula "7") (ifseqformula "1"))
)
)

}
