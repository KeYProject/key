// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 

\javaSource "attributes_java/";

// Input file for KeY standalone prover version 0.1083

\sorts {
   \generic S;
   \generic T;
}


\schemaVariables {
   \program Variable #a, #a1, #a2;
   \term ListElement t1;
   \term ListElement t2;
   \term ListElement t3;

   \variables ListElement m;   
   \variables int k;
   \term int n, l;
}

\predicates {
  \nonRigid reach[next@(ListElement);](ListElement, ListElement, int);
  \nonRigid reach[#a;](ListElement, ListElement, int);
  //p[#a;](int); // parser test, should cause KeYSemanticException
}

\functions {
  //non_rigid int f(int);
  //int g[#a;](int); // parser test, should cause KeYSemanticException
}

\programVariables {
   ListElement s;
}


\rules {


 reachable_single {
      \find(reach[#a;](t1, t2, n)) 
	\replacewith( (t1 = t2 & n = 0 ) | (gt(n,0) & !(t1=null) & reach[#a;](t1.#a, t2, sub(n,1))))
  };

 reachable_unique_1 {
      \assumes (reach[#a;](t1, t2, n)==>) 
      \find (reach[#a;](t1, t3, n)==>) \add(t2 = t3==>)
  };


 reachable_unique_2 {
      \assumes (reach[#a;](t1, t2, n) ==>) \find(reach[#a;](t1, t2, l) ==>) 
      \add(t1 = null | n = l ==>)
 };

 reachable_decomposition {
      \find(reach[#a;](t1, t2, n)==>) 
	\varcond (\notFreeIn(m, t1, t2, n), \notFreeIn(k, t1, t2, n))
        \add(\forall k; (geq(k,0) & leq(k,n) -> \exists m; (reach[#a;](t1, m, k) & reach[#a;](m, t2, sub(n,k))))==>)
 };

 reachable_single_base_1 {
      \find(reach[#a;](t1, t2, 0)) \replacewith(t1 = t2)
 };

 reachable_single_base_2 {
      \assumes (n = 0 ==>) \find(reach[#a;](t1, t2, n)) \replacewith(t1 = t2)
 };

 reachable_base {
      \assumes (lt(n,0)==>) 
      \find(reach[#a;](t1, t2, n)) \sameUpdateLevel \replacewith(false)
 };

 reachable_step_snd_arg {
      \find(reach[#a;](t1, t2, n) ==>) \add(t2 = null | reach[#a;](t1, t2.#a, add(n,1))==>)
 };

 reachable_step_fst_arg {
      \find(reach[#a;](t1, t2, n) ==>) 
      \add(t1 = null | reach[#a;](t1.#a, t2, sub(n,1))==>)
 };


 reachable_step_back_fst_arg {
      \find(reach[#a;](t1.#a, t2, n) ==>) 
      \add(reach[#a;](t1, t2, add(n,1)) | !(t1 = null)==>)
 };

}

/*

all sl:ListElement.(!(sl=null) -> 
(
    all cur:ListElement.all prev:ListElement.all ltmp:ListElement.
        all curDist:int.(
		(geq(curDist,0) & !(cur = null) &
		 reach[next@(ListElement);](sl,cur,curDist) & 
		 reach[next@(ListElement);](cur,null,iv) & 
		 ((reach[next@(ListElement);](sl,prev,sub(curDist,1)) & 
                 prev.next@(ListElement)=cur) | (prev = null & sl = cur)) ->                
                 all le:ListElement.all leDist:int.(reach[ListElement::next;](cur,le,leDist) & geq(leDist,0) -> 
    		 {c:=cur || p:=prev || s:=sl || tmp:=ltmp}
		   <{method-frame(ListElement(s)): {
		        while ( c!=null ) {
		          tmp=c;
		          c=c.next;
		          tmp.next=p;
		          p=tmp;
		        }
	            return  p;
		  }
    		}> (  le.oldNext.ListElement::next = le | le.oldNext = null)))
)))



hilfsinduktion
   all i:int.all m:ListElement.(geq(i,0) & leq(i, indVar) -> (reach[ListElement::next;](cur_0, m, i) -> (m = cur_0 | m = cur_0.ListElement::next) ))


*/

\problem {
\forall ListElement l; (\exists int size; (geq(size,0) & reach[next@(ListElement);](l, null, size)) & l.oldNext = l.ListElement::next) ->

(\forall ListElement ls; ( !(ls = null) ->
     (\forall ListElement l; \forall int dist; (!(l=null) & geq(dist,0) & reach[next@(ListElement);](ls,l,dist) ->
	{s:=ls}\<{ s.reverse(); }\> (l.oldNext.next@(ListElement) = l | l.oldNext = null) )
     )
  )
 )
  
}
