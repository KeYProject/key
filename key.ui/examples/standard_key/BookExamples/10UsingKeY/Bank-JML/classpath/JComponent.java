// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Wed May 14 11:55:40 CEST 2008
 */
package javax.swing;

public abstract class JComponent extends java.awt.Container implements java.io.Serializable, javax.swing.TransferHandler$HasGetTransferHandler
{
   protected javax.swing.plaf.ComponentUI ui;
   protected javax.swing.event.EventListenerList listenerList;
   public final static int WHEN_FOCUSED = 0;
   public final static int WHEN_ANCESTOR_OF_FOCUSED_COMPONENT = 1;
   public final static int WHEN_IN_FOCUSED_WINDOW = 2;
   public final static int UNDEFINED_CONDITION = -1;
   public final static java.lang.String TOOL_TIP_TEXT_KEY = "ToolTipText";
   protected javax.accessibility.AccessibleContext accessibleContext;

   public void setInheritsPopupMenu(boolean arg0);
   public boolean getInheritsPopupMenu();
   public void setComponentPopupMenu(javax.swing.JPopupMenu arg0);
   public javax.swing.JPopupMenu getComponentPopupMenu();
   public JComponent();
   public void updateUI();
   protected void setUI(javax.swing.plaf.ComponentUI arg0);
   public java.lang.String getUIClassID();
   protected java.awt.Graphics getComponentGraphics(java.awt.Graphics arg0);
   protected void paintComponent(java.awt.Graphics arg0);
   protected void paintChildren(java.awt.Graphics arg0);
   protected void paintBorder(java.awt.Graphics arg0);
   public void update(java.awt.Graphics arg0);
   public void paint(java.awt.Graphics arg0);
   public void printAll(java.awt.Graphics arg0);
   public void print(java.awt.Graphics arg0);
   protected void printComponent(java.awt.Graphics arg0);
   protected void printChildren(java.awt.Graphics arg0);
   protected void printBorder(java.awt.Graphics arg0);
   public boolean isPaintingTile();
   public final boolean isPaintingForPrint();
   public boolean isManagingFocus();
   public void setNextFocusableComponent(java.awt.Component arg0);
   public java.awt.Component getNextFocusableComponent();
   public void setRequestFocusEnabled(boolean arg0);
   public boolean isRequestFocusEnabled();
   public void requestFocus();
   public boolean requestFocus(boolean arg0);
   public boolean requestFocusInWindow();
   protected boolean requestFocusInWindow(boolean arg0);
   public void grabFocus();
   public void setVerifyInputWhenFocusTarget(boolean arg0);
   public boolean getVerifyInputWhenFocusTarget();
   public java.awt.FontMetrics getFontMetrics(java.awt.Font arg0);
   public void setPreferredSize(java.awt.Dimension arg0);
   public java.awt.Dimension getPreferredSize();
   public void setMaximumSize(java.awt.Dimension arg0);
   public java.awt.Dimension getMaximumSize();
   public void setMinimumSize(java.awt.Dimension arg0);
   public java.awt.Dimension getMinimumSize();
   public boolean contains(int arg0, int arg1);
   public void setBorder(javax.swing.border.Border arg0);
   public javax.swing.border.Border getBorder();
   public java.awt.Insets getInsets();
   public java.awt.Insets getInsets(java.awt.Insets arg0);
   public float getAlignmentY();
   public void setAlignmentY(float arg0);
   public float getAlignmentX();
   public void setAlignmentX(float arg0);
   public void setInputVerifier(javax.swing.InputVerifier arg0);
   public javax.swing.InputVerifier getInputVerifier();
   public java.awt.Graphics getGraphics();
   public void setDebugGraphicsOptions(int arg0);
   public int getDebugGraphicsOptions();
   public void registerKeyboardAction(java.awt.event.ActionListener arg0, java.lang.String arg1, javax.swing.KeyStroke arg2, int arg3);
   public void registerKeyboardAction(java.awt.event.ActionListener arg0, javax.swing.KeyStroke arg1, int arg2);
   public void unregisterKeyboardAction(javax.swing.KeyStroke arg0);
   public javax.swing.KeyStroke[] getRegisteredKeyStrokes();
   public int getConditionForKeyStroke(javax.swing.KeyStroke arg0);
   public java.awt.event.ActionListener getActionForKeyStroke(javax.swing.KeyStroke arg0);
   public void resetKeyboardActions();
   public final void setInputMap(int arg0, javax.swing.InputMap arg1);
   public final javax.swing.InputMap getInputMap(int arg0);
   public final javax.swing.InputMap getInputMap();
   public final void setActionMap(javax.swing.ActionMap arg0);
   public final javax.swing.ActionMap getActionMap();
   public int getBaseline(int arg0, int arg1);
   public java.awt.Component$BaselineResizeBehavior getBaselineResizeBehavior();
   public boolean requestDefaultFocus();
   public void setVisible(boolean arg0);
   public void setEnabled(boolean arg0);
   public void setForeground(java.awt.Color arg0);
   public void setBackground(java.awt.Color arg0);
   public void setFont(java.awt.Font arg0);
   public static java.util.Locale getDefaultLocale();
   public static void setDefaultLocale(java.util.Locale arg0);
   protected void processComponentKeyEvent(java.awt.event.KeyEvent arg0);
   protected void processKeyEvent(java.awt.event.KeyEvent arg0);
   protected boolean processKeyBinding(javax.swing.KeyStroke arg0, java.awt.event.KeyEvent arg1, int arg2, boolean arg3);
   public void setToolTipText(java.lang.String arg0);
   public java.lang.String getToolTipText();
   public java.lang.String getToolTipText(java.awt.event.MouseEvent arg0);
   public java.awt.Point getToolTipLocation(java.awt.event.MouseEvent arg0);
   public java.awt.Point getPopupLocation(java.awt.event.MouseEvent arg0);
   public javax.swing.JToolTip createToolTip();
   public void scrollRectToVisible(java.awt.Rectangle arg0);
   public void setAutoscrolls(boolean arg0);
   public boolean getAutoscrolls();
   public void setTransferHandler(javax.swing.TransferHandler arg0);
   public javax.swing.TransferHandler getTransferHandler();
   protected void processMouseEvent(java.awt.event.MouseEvent arg0);
   protected void processMouseMotionEvent(java.awt.event.MouseEvent arg0);
   public void enable();
   public void disable();
   public javax.accessibility.AccessibleContext getAccessibleContext();
   public final java.lang.Object getClientProperty(java.lang.Object arg0);
   public final void putClientProperty(java.lang.Object arg0, java.lang.Object arg1);
   public void setFocusTraversalKeys(int arg0, java.util.Set arg1);
   public static boolean isLightweightComponent(java.awt.Component arg0);
   public void reshape(int arg0, int arg1, int arg2, int arg3);
   public java.awt.Rectangle getBounds(java.awt.Rectangle arg0);
   public java.awt.Dimension getSize(java.awt.Dimension arg0);
   public java.awt.Point getLocation(java.awt.Point arg0);
   public int getX();
   public int getY();
   public int getWidth();
   public int getHeight();
   public boolean isOpaque();
   public void setOpaque(boolean arg0);
   public void computeVisibleRect(java.awt.Rectangle arg0);
   public java.awt.Rectangle getVisibleRect();
   public void firePropertyChange(java.lang.String arg0, boolean arg1, boolean arg2);
   public void firePropertyChange(java.lang.String arg0, int arg1, int arg2);
   public void firePropertyChange(java.lang.String arg0, char arg1, char arg2);
   protected void fireVetoableChange(java.lang.String arg0, java.lang.Object arg1, java.lang.Object arg2) throws java.beans.PropertyVetoException;
   public void addVetoableChangeListener(java.beans.VetoableChangeListener arg0);
   public void removeVetoableChangeListener(java.beans.VetoableChangeListener arg0);
   public java.beans.VetoableChangeListener[] getVetoableChangeListeners();
   public java.awt.Container getTopLevelAncestor();
   public void addAncestorListener(javax.swing.event.AncestorListener arg0);
   public void removeAncestorListener(javax.swing.event.AncestorListener arg0);
   public javax.swing.event.AncestorListener[] getAncestorListeners();
   public java.util.EventListener[] getListeners(java.lang.Class arg0);
   public void addNotify();
   public void removeNotify();
   public void repaint(long arg0, int arg1, int arg2, int arg3, int arg4);
   public void repaint(java.awt.Rectangle arg0);
   public void revalidate();
   public boolean isValidateRoot();
   public boolean isOptimizedDrawingEnabled();
   public void paintImmediately(int arg0, int arg1, int arg2, int arg3);
   public void paintImmediately(java.awt.Rectangle arg0);
   public void setDoubleBuffered(boolean arg0);
   public boolean isDoubleBuffered();
   public javax.swing.JRootPane getRootPane();
   protected java.lang.String paramString();
}
