\settings {
"#Proof-Settings-Config-File
#Fri Feb 01 18:44:52 CET 2013
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_INSTANTIATE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]RETREAT_MODE_OPTIONS_KEY=RETREAT_MODE_NONE
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , modelFields-modelFields\\:treatAsAxiom , initialisation-initialisation\\:disableStaticInitialisation , runtimeExceptions-runtimeExceptions\\:ban
[SMTSettings]useConstantsForBigOrSmallIntegers=false
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_NORMAL
"
}

//Example from page 339
//comments on the problem section
//line 1   : definition of   balance@pre
//line 2   : precondition
//line 3-4 : invariant. \phi in Template 5
//line 5   : {self.balance:=l_balance(self)} is
//            the anonymizing update 
//line 6   : postcondition
//line 7   : anonymizing update 
//line 8-9 : invariant
//

\javaSource "paycardChapt8";

\functions {
  int balanceAtpre(PayCard);
  int l_balance(PayCard);
  PayCard self;
  boolean created(PayCard);
}

\programVariables {
  int amount;
}
\problem {
     \forall PayCard pc;
         balanceAtpre(pc)
       = int::select(heap, pc, PayCard::$balance)
   & lt(add(int::select(heap, self, PayCard::$balance),
            amount),
        int::select(heap, self, PayCard::$limit))
   & geq(amount, Z(0(#)))
   & \forall PayCard pc;
       (     boolean::select(heap,
                             pc,
                             java.lang.Object::<created>)
           = TRUE
        ->   leq(Z(0(#)),
                 int::select(heap,
                             pc,
                             PayCard::$balance))
           & leq(int::select(heap,
                             pc,
                             PayCard::$balance),
                 int::select(heap, pc, PayCard::$limit)))
   &   {heap:=store(heap,
                    self,
                    PayCard::$balance,
                    l_balance(self))}
         int::select(heap, self, PayCard::$balance)
     = add(balanceAtpre(self), amount)
-> {heap:=store(heap,
                self,
                PayCard::$balance,
                l_balance(self))}
     \forall PayCard pc;
       (     boolean::select(heap,
                             pc,
                             java.lang.Object::<created>)
           = TRUE
        ->   leq(Z(0(#)),
                 int::select(heap,
                             pc,
                             PayCard::$balance))
           & leq(int::select(heap,
                             pc,
                             PayCard::$balance),
                 int::select(heap, pc, PayCard::$limit)))

}

\proof {
(keyLog "0" (keyUser "daniel" ) (keyVersion "0cb106b91c62c367896e8efc96a38716f72c0188"))

(autoModeTime "1416")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "allRight" (formula "6") (inst "sk=pc_0"))
(rule "impRight" (formula "6"))
(rule "eqSymm" (formula "2") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "3"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
(rule "polySimp_addComm0" (formula "6") (term "1"))
(rule "polySimp_addComm0" (formula "3") (term "1,0"))
(rule "polySimp_addComm1" (formula "3") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "1,1,0"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "1"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0"))
(rule "polySimp_addAssoc" (formula "3") (term "0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "3"))
(rule "polySimp_mulLiterals" (formula "3") (term "0"))
(rule "polySimp_elimOne" (formula "3") (term "0"))
(rule "selectOfStore" (formula "6") (term "0"))
(builtin "One Step Simplification" (formula "6"))
(rule "castDel" (formula "6") (term "0"))
(rule "applyEq" (formula "7") (term "3,0,0,0") (ifseqformula "6"))
(rule "applyEq" (formula "1") (term "3,0,0") (ifseqformula "6"))
(rule "applyEq" (formula "7") (term "3,0,0,1") (ifseqformula "6"))
(rule "inEqSimp_commuteGeq" (formula "7") (term "1"))
(rule "applyEq" (formula "7") (term "3,0,0,1") (ifseqformula "6"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "1"))
(rule "selectOfStore" (formula "7") (term "0,0"))
(builtin "One Step Simplification" (formula "7"))
(rule "castDel" (formula "7") (term "1,0,0"))
(rule "selectOfStore" (formula "1") (term "0"))
(builtin "One Step Simplification" (formula "1"))
(rule "selectOfStore" (formula "7") (term "1,1"))
(builtin "One Step Simplification" (formula "7"))
(rule "castDel" (formula "7") (term "1,1,1"))
(rule "inEqSimp_commuteGeq" (formula "7") (term "1"))
(rule "selectOfStore" (formula "7") (term "1,1"))
(builtin "One Step Simplification" (formula "7"))
(rule "nnf_imp2or" (formula "5") (term "0"))
(rule "cnf_rightDist" (formula "5") (term "0"))
(rule "distr_forallAnd" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "commute_or" (formula "6") (term "0"))
(rule "ifthenelse_split" (formula "8") (term "0,1"))
(branch "self = pc_0 TRUE"
   (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "1"))
   (rule "applyEq" (formula "4") (term "1,1,1") (ifseqformula "1"))
   (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "1"))
   (rule "polySimp_homoEq" (formula "8"))
   (rule "polySimp_addComm1" (formula "8") (term "0"))
   (rule "applyEqRigid" (formula "4") (term "1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "9") (term "0,1,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "9") (term "0,1,1,1") (ifseqformula "1"))
   (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "1"))
   (rule "polySimp_addComm1" (formula "8") (term "0"))
   (rule "polySimp_sepNegMonomial" (formula "8"))
   (rule "polySimp_mulLiterals" (formula "8") (term "0"))
   (rule "polySimp_elimOne" (formula "8") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0"))
   (rule "allLeft" (formula "3") (inst "t=pc_0"))
   (rule "applyEq" (formula "5") (term "1,1") (ifseqformula "3"))
   (rule "inEqSimp_subsumption1" (formula "10") (term "1") (ifseqformula "5"))
   (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1"))
   (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1"))
   (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0,0,1"))
   (rule "add_literals" (formula "10") (term "1,1,0,0,0,0,1"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,1"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0,1"))
   (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
   (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
   (rule "add_literals" (formula "10") (term "0,0,1"))
   (rule "qeq_literals" (formula "10") (term "0,1"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "inEqSimp_geqRight" (formula "10"))
   (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "0,1"))
   (rule "allLeft" (formula "9") (inst "t=pc_0"))
   (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "3"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "applyEq" (formula "9") (term "1") (ifseqformula "4"))
   (rule "allLeft" (formula "8") (inst "t=pc_0"))
   (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "3"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "applyEq" (formula "8") (term "0") (ifseqformula "4"))
   (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "1"))
   (rule "times_zero_1" (formula "8") (term "0,0"))
   (rule "add_zero_left" (formula "8") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "8"))
   (rule "polySimp_mulLiterals" (formula "8") (term "0"))
   (rule "polySimp_elimOne" (formula "8") (term "0"))
   (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "8"))
   (rule "qeq_literals" (formula "7") (term "0"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "closeFalse" (formula "7"))
)
(branch "self = pc_0 FALSE"
   (rule "replace_known_right" (formula "9") (term "0,0,0") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "1"))
   (rule "allLeft" (formula "2") (inst "t=pc_0"))
   (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "2"))
   (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "2"))
   (rule "allLeft" (formula "3") (inst "t=self"))
   (rule "applyEq" (formula "5") (term "1,1") (ifseqformula "3"))
   (rule "allLeft" (formula "8") (inst "t=pc_0"))
   (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "applyEq" (formula "8") (term "1") (ifseqformula "2"))
   (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "inEqSimp_geqRight" (formula "12"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "allLeft" (formula "8") (inst "t=pc_0"))
   (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "2"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "applyEq" (formula "8") (term "0") (ifseqformula "3"))
   (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "1"))
   (rule "qeq_literals" (formula "8") (term "0"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "closeFalse" (formula "8"))
)
)

}
