// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 

// Russian multiplication with invariant rule

/*
\heuristicsDecl{
  bauer;
}

\sorts{
  int;
  numbers;
}

\schemaVariables{
  \variables int  k,a,nv,l,m,a0,b0,z0;
  \formula b;
  \term int i,j,m,n;
  \program Variable #v, #v0, #v1, #slhs, #slhs0;
  \program[list] Statement #slist;

}
*/


\problem{
\forall int a0; \forall int b0; (geq(a0,0)&geq(b0,0) ->
 (\<{int a;int b;int z;}\>{a:=a0}{b:=b0}{z:=0}
 \<{while(a!=0){ if(a/2*2!=a){z=z+b;} a=a/2;b=b*2;}}\>z=mul(a0,b0)))
}


// using the while invariant rule, this can be proven automatically 
// if arithmetic treatment DefOps is on.

// invariant:
//    a*b + z_1 = a0_0*b0_0 & a >= 0 & b >= 0
// variant:
//    a
// modifies:
//    { a, b, z_1 }

// (works with KeY-1.2.121-beta (MU))
// (works with KeY-1.3.631-beta=RC1.4) (MU))
