/**
This problem should be solved automatically by Yices.
The complexity of this problem is based on the fact,
that the external prover must use several different
 types of taclets. Furthermore the terms (1) and (2)
contain terms making a statement about attribute of objects. 

Options:
- Choose all supported taclets.
- Maximum number of generic sorts: 2 (at least).
*/


\javaSource "./javaSource/";
\sorts {
  MySort;
// Test;
}


\functions {
  boolean b;
  MySort f;
  java.lang.Object o;


}

\programVariables {
  Test A;
  Test B;
  Test [] arrayTest;
  java.lang.Object[] array;
}


\problem {

  (   ((A.<created>=TRUE & wellFormed(heap))->				// (1)
     (A.F@(Test).<created> = TRUE | A.F@(Test)=null) 
     )

  &  	((A.F.<created>=TRUE & wellFormed(heap))->			// (2)
	(A.F.F@(Test).<created> = TRUE | A.F.F@(Test)=null))
  &
	((A.<created>=TRUE & wellFormed(heap) & !(A.F@(Test)=null))-> (A.F.F@(Test).<created>=TRUE | A.F.F@(Test)=null))
  &
	(java.lang.Object::exactInstance(o) = TRUE & wellFormed(heap) & o.<created>=TRUE ->
        \exists int iv; java.lang.Object::<get>(iv) = o)

  &  (java.lang.Object::<get>(5) = o & wellFormed(heap) & o.<created>=TRUE -> 
     5 < java.lang.Object.<nextToCreate>))
  

   
          
    
  
     


}