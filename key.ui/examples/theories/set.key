///////////////////////////////////////////////////////////////////////////////
//                                                                           //
//  Theory of untyped sets.                                                  //
//  See ../../doc/README.user_ADTs on how to use it.                         //
//  Currently, the rules are mostly copied from the LocSet theory. There is  //
//  no distinction between axiom and lemma rules, and no soundness proofs.   //
//  Functions and predicates are named such that there is no conflict with   //
//  the definitions in locSet.key. See also map.key for a more general the-  //
//  ory of partial maps.                                                     //
//  @author Daniel Bruns <bruns@kit.edu>                                     //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////


\sorts {
    Free;
}

\functions {
    Free atom; // the empty set, named atom for technical reasons
    Free single(any);
    Free cup(Free, Free);
    Free cap(Free, Free);
    Free difference(Free, Free);
    Free bigcup{true}(Free);    
}

\predicates {
    contains(any, Free);
    subseteq(Free, Free);
    emptyCap(Free, Free);
}

\schemaVariables {
  \term any a,b;
  \term Free s,s1,s2,s3,EQ,commEqLeft,commEqRight;
}


\rules {
 
    //--------------------------------------------------------------------------
    //axioms for contains
    //--------------------------------------------------------------------------
   
    elementOfEmpty2 {
        
        \find(contains(a,  atom))
        
        \replacewith(false)
        
        \heuristics(concrete)
    };
   
    elementOfSingleton2 {
        \find(contains(a, single(b)))
        
        \replacewith(a = b)
        
        \heuristics(simplify)
    };
    
    
    elementOfUnion2 {
        
        \find(contains(a,  cup(s, s2)))
        
        \replacewith(contains(a,  s) | contains(a, s2))
        
        \heuristics(simplify_enlarging)
    };
    
    
    elementOfIntersect2 {
        
        \find(contains(a, cap(s, s2)))
        
        \replacewith(contains(a, s) & contains(a, s2))
        
        \heuristics(simplify_enlarging)
    };
    
        
    elementOfSetMinus2 {
        
        \find(contains(a, difference(s, s2)))
        
        \replacewith(contains(a, s) & !contains(a, s2))
        
        \heuristics(simplify_enlarging)
    };
       
    
    elementOfInfiniteUnion2 {
	\schemaVar \variables any av;
        
        \find(contains(a,  bigcup{av;}(s)))
        \varcond(\notFreeIn(av, a))
        
        \replacewith(\exists av; contains(a, s))
        
        \heuristics(simplify)
    };
    
            
    elementOfInfiniteUnion2Vars2 {
	\schemaVar \variables any av;
	\schemaVar \variables beta bv;
        
        \find(contains(a, bigcup{av, bv;}(s)))
        \varcond(\notFreeIn(av, a), \notFreeIn(bv, a))
        
        \replacewith(\exists av; \exists bv; contains(a, s))
        
        \heuristics(simplify)
    };    
    
            
    

    //--------------------------------------------------------------------------
    //EQ versions of axioms (these are lemmata)
    //--------------------------------------------------------------------------
       
    elementOfEmptyEQ2 {
        
        \assumes(atom = EQ ==>)        
        \find(contains(a, EQ))
        \sameUpdateLevel
        
        \replacewith(false)
        
        \heuristics(concrete)
    };
    
   
    elementOfSingletonEQ2 {
        
        \assumes(single(b) = EQ ==>)
        \find(contains(a, EQ))        
        \sameUpdateLevel
        
        \replacewith(a=b)
        
        \heuristics(simplify)
    };
    
    
    elementOfUnionEQ2 {
        
        \assumes(cup(s, s2) = EQ ==>)
        \find(contains(a, EQ))               
        \sameUpdateLevel
        
        \replacewith(contains(a, s) | contains(a, s2))
        
        \heuristics(simplify_enlarging)
    };
    
    
    elementOfIntersectEQ2 {
        
        \assumes(cap(s, s2) = EQ ==>)
        \find(contains(a, EQ))
        \sameUpdateLevel
        
        \replacewith(contains(a, s) & contains(a, s2))
        
        \heuristics(simplify_enlarging)
    };
    
        
    elementOfSetMinusEQ2 {
        
        \assumes(difference(s, s2) = EQ ==>)
        \find(contains(a, EQ))        
        \sameUpdateLevel
        
        \replacewith(contains(a, s) & !contains(a, s2))
        
        \heuristics(simplify_enlarging)
    };
    
    
    elementOfInfiniteUnionEQ2 {
	\schemaVar \variables any av;
        
        \assumes(bigcup{av;}(s) = EQ ==>)
        \find(contains(a, EQ))
        \sameUpdateLevel        
        \varcond(\notFreeIn(av, a))
                
        \replacewith(\exists av; contains(a, s))
        
        \heuristics(simplify)
    };    
    
    
    elementOfInfiniteUnion2VarsEQ2 {
	\schemaVar \variables any av;
	\schemaVar \variables beta bv;
        
        \assumes(bigcup{av, bv;}(s) = EQ ==>)
        \find(contains(a, EQ))
        \sameUpdateLevel        
        \varcond(\notFreeIn(av, a), \notFreeIn(bv, a))
        
        \replacewith(\exists av; \exists bv; contains(a, s))
        
        \heuristics(simplify)
    };        
        
    
    //--------------------------------------------------------------------------
    //axioms for set predicates (reduce to contains)
    //--------------------------------------------------------------------------
    
    equalityToElementOf2 {
	\schemaVar \variables any ov;
    	
    	\find(s = s2)
	\varcond(\notFreeIn(ov, s, s2))
	
    	\replacewith(\forall ov; (contains(ov,  s) <-> contains(ov,  s2)))
    };


    emptyEqualsSingleton2 {
    	
    	\find(atom = single(a))
	
    	\replacewith(false)

        \heuristics(concrete)
    };


    singletonEqualsEmpty2 {
    	
    	\find(single(a) = atom)
	   	\replacewith(false)

        \heuristics(concrete)
    };


    unionWithSingletonEqualsUnionWithSingleton2 {

        \find(cup(s1, single(a)) = cup(s2, single(a)))

        \replacewith(difference(s1, single(a)) = difference(s2, single(a)))

        \heuristics(simplify)
    };


    unionWithSingletonEqualsUnionWithSingleton_22 {

        \find(cup(single(a), s1) = cup(single(a), s2))

        \replacewith(difference(s1, single(a)) = difference(s2, single(a)))

        \heuristics(simplify)
    };


    subsetToElementOf2 {
	\schemaVar \variables any ov;
        
        \find(subseteq(s, s2))
	\varcond(\notFreeIn(ov, s, s2))
	
	\replacewith(\forall ov;  (contains(ov,  s) -> contains(ov,  s2)))
	
        \heuristics(simplify)
    };

    
    disjointToElementOf2 {
	\schemaVar \variables any ov;
        
        \find(emptyCap(s, s2))
	\varcond(\notFreeIn(ov, s, s2))
	
        \replacewith(\forall ov; (!contains(ov,  s) | !contains(ov,  s2)))
        
        \heuristics(simplify)
    };
    
   
    
    //--------------------------------------------------------------------------
    //lemmata for atom and allLocs
    //--------------------------------------------------------------------------
    
    unionWithEmpty12 {
        
        \find(cup(s, atom))
        
        \replacewith(s)
        
        \heuristics(concrete)
    };
    
    
    unionWithEmpty22 {
        
        \find(cup(atom, s))
        
        \replacewith(s)
        
        \heuristics(concrete)
    };
    
       
    
    intersectWithEmpty12 {
        
        \find(cap(s, atom))
        
        \replacewith(atom)
        
        \heuristics(concrete)
    };


    intersectWithEmpty22 {
        
        \find(cap(atom, s))
        
        \replacewith(atom)
        
        \heuristics(concrete)
    };
    
   
    setMinusWithEmpty12 {
        
        \find(difference(s, atom))
        
        \replacewith(s)
        
        \heuristics(concrete)
    };


    setMinusWithEmpty22 {
        
        \find(difference(atom, s))
        
        \replacewith(atom)
        
        \heuristics(concrete)
    };
    
       
    
    //--------------------------------------------------------------------------
    //lemmata for subseteq
    //--------------------------------------------------------------------------
    
    subsetWithEmpty2 {
        
        \find(subseteq(atom, s))
        
        \replacewith(true)
        
        \heuristics(concrete)
    };
  

    //--------------------------------------------------------------------------
    //lemmata for emptyCap
    //--------------------------------------------------------------------------   
    
    disjointWithEmpty12 {
        
        \find(emptyCap(atom, s))
        
        \replacewith(true)
        
        \heuristics(concrete)
    };
    
    
    disjointWithEmpty22 {
        
        \find(emptyCap(s, atom))
        
        \replacewith(true)
        
        \heuristics(concrete)
    };
    
    commuteDisjoint2 {
    	\find(emptyCap(s1,s2))
    	\replacewith(emptyCap(s2,s1))
    };
    
       
    
    
        
    //--------------------------------------------------------------------------
    //some other lemmata
    //--------------------------------------------------------------------------
    
    unionWithItself2 {
        
        \find(cup(s, s))
        
        \replacewith(s)
        
        \heuristics(concrete)
    };
    
    
    intersectWithItself2 {
        
        \find(cap(s, s))
        
        \replacewith(s)
        
        \heuristics(concrete)
    };    
    

    distributeIntersection2 {
        
        \find(cap(s1, cup(s2, s3)))
        
        \replacewith(cup(cap(s1, s2), cap(s1, s3)))
        
        \heuristics(simplify_enlarging)
    };    


    distributeIntersection_22 {
        
        \find(cap(cup(s2, s3), s1))
        
        \replacewith(cup(cap(s2, s1), cap(s3, s1)))
        
        \heuristics(simplify_enlarging)
    };    


    intersectWithSingleton2 {
        
        \find(cap(s, single(a)))
        
        \replacewith(\if(contains(a, s)) \then(single(a)) \else(atom))
        
        \heuristics(simplify_enlarging)
    };    


    intersectWithSingleton_22 {
        
        \find(cap(single(a), s))
        
        \replacewith(\if(contains(a, s)) \then(single(a)) \else(atom))
        
        \heuristics(simplify_enlarging)
    };    

    
    setMinusItself2 {
        
        \find(difference(s, s))
        
        \replacewith(atom)
        
        \heuristics(concrete)
    };
    

    setMinusSingleton2 {

        \assumes(==> contains(a, s))
        
        \find(difference(s, single(a)))
        
        \replacewith(s)
        
        \heuristics(simplify)
    };
    

    intersectionSetMinusItself2 {
        
        \find(cap(difference(s1, s2), s2))
        
        \replacewith(atom)
        
        \heuristics(concrete)
    };

    
    intersectionSetMinusItself_22 {
        
        \find(cap(s2, difference(s1, s2)))
        
        \replacewith(atom)
        
        \heuristics(concrete)
    };

    
    unionIntersectItself2 {
        
        \find(cup(cap(s1, s2), s1))
        
        \replacewith(s1)
        
        \heuristics(simplify)
    };
    

    unionIntersectItself_22 {
        
        \find(cup(cap(s2, s1), s1))
        
        \replacewith(s1)
        
        \heuristics(simplify)
    };
    

    unionIntersectItself_32 {
        
        \find(cup(cup(s, cap(s1, s2)), s1))
        
        \replacewith(cup(s, s1))
        
        \heuristics(simplify)
    };
    

    unionIntersectItself_42 {
        
        \find(cup(cup(s, cap(s2, s1)), s1))
        
        \replacewith(cup(s, s1))
        
        \heuristics(simplify)
    };
    

    unionIntersectItself_52 {
        
        \find(cup(cup(cap(s1, s2), s), s1))
        
        \replacewith(cup(s, s1))
        
        \heuristics(simplify)
    };
    

    unionIntersectItself_62 {
        
        \find(cup(cup(cap(s2, s1), s), s1))
        
        \replacewith(cup(s, s1))
        
        \heuristics(simplify)
    };
    

    infiniteUnionUnused2 {
	\schemaVar \variables any av;	
        
        \find(bigcup{av;}(s))
        \varcond(\notFreeIn(av, s))
        
        \replacewith(s)
        
        \heuristics(concrete)
    };
    
    
    subsetOfItself2 {
        
        \find(subseteq(s, s))
        
        \replacewith(true)
        
        \heuristics(concrete)    
    };
    
    
    elementOfGuardedSet2 {
        \schemaVar \formula phi;
        
        \find(contains(a, \if(phi)\then(s)\else(atom)))
        
        \replacewith(phi & contains(a, s))
        
        \heuristics(concrete)
    };
    

    commuteUnion2 {

    	\find(cup(commEqLeft, commEqRight))

    	\replacewith(cup(commEqRight, commEqLeft))

        \heuristics(order_terms)
    };


    commuteUnion_22 {

    	\find(cup(cup(s, commEqLeft), commEqRight))

    	\replacewith(cup(cup(s, commEqRight), commEqLeft))

        \heuristics(order_terms)
    };
    

    commuteIntersection2 {

    	\find(cap(commEqLeft, commEqRight))

    	\replacewith(cap(commEqRight, commEqLeft))

        \heuristics(order_terms)
    };


    commuteIntersection_22 {

    	\find(cap(cap(s, commEqLeft), commEqRight))

    	\replacewith(cap(cap(s, commEqRight), commEqLeft))

        \heuristics(order_terms)
    };
    

    associativeLawUnion2 {

    	\find(cup(s1, cup(s2, s3)))

    	\replacewith(cup(cup(s1, s2), s3))

        \heuristics(simplify)
    };


    associativeLawUnion_22 {

    	\find(cup(cup(s1, s2), s3))

    	\replacewith(cup(s1, cup(s2, s3)))
    };
    

    associativeLawIntersect2 {

    	\find(cap(s1, cap(s2, s3)))

    	\replacewith(cap(cap(s1, s2), s3))

        \heuristics(simplify)
    };


    associativeLawIntersect_22 {

    	\find(cap(cap(s1, s2), s3))

    	\replacewith(cap(s1, cap(s2, s3)))
    };

    containsItself {
        \find(contains(s,s))
        \replacewith(false)
        \heuristics(concrete)
    };
}
