// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 


/** Abstract datatype of (untyped) partial maps.
 * @author Daniel Bruns
 */

\sorts {
    Free;
}


\functions {
    //getters
    any mapGet(Free, any);
    \unique any mapUndef;
    
    //constructors
    Free mapForeach{true,true}(boolean, any);
    Free atom; // the empty map (named atom for technical reasons)
    Free mapSingleton(any, any);
    Free mapOverride(Free, Free);
    Free seq2map(Seq);
}

\predicates {
    inDomain(Free, any);
}

\schemaVariables {
   \term Free m, m0, m1;
   \term boolean b;
   \term any x, y, z;
   \term alpha xa, za;
   \variables alpha v;
   \variables any vy;
}

\rules {

    //--------------------------------------------------------------------------
    //axioms
    //--------------------------------------------------------------------------

    getOfMapForeach {
        \find(mapGet(mapForeach{v;}(b,y),x))
        \sameUpdateLevel
        \replacewith({\subst v; alpha::cast(x)}
			\if(b=TRUE)\then(y)\else(mapUndef))
      	\heuristics(simplify_enlarging)
    };

    //--------------------------------------------------------------------------
    //definitions (conservative extensions)
    //--------------------------------------------------------------------------

    inDomainOfMapForeach {
        \find(inDomain(mapForeach{v;}(b,y),x))
        \replacewith({\subst v; alpha::cast(x)}b = TRUE
		& alpha::instance(x)=TRUE )
        \heuristics(simplify)
    };

    defMapEmpty {
        \find(atom)
        \replacewith(mapForeach{vy;}(FALSE,42))
    };

    defMapSingleton {
        \find(mapSingleton(xa, y))
        \varcond(\notFreeIn(vy,xa,y))
        \replacewith(mapForeach{vy;}(
		\if(vy=any::cast(xa))\then(TRUE)\else(FALSE),y)
        )
    };

    defMapOverride {
        \find(mapOverride(m0,m1))
        \varcond(\notFreeIn(vy,m0,m1))
        \replacewith(mapForeach{vy;}(
		\if(inDomain(m0,vy)|inDomain(m1,vy))\then(TRUE)\else(FALSE),
		\if(inDomain(m1,vy))
			\then(mapGet(m1,vy))\else(mapGet(m0,vy))
	))
    };

    defSeq2Map {
        \schemaVar \term Seq s;
        \schemaVar \variables int ix;
        \find(seq2map(s))
        \varcond(\notFreeIn(ix,s))
        \replacewith(mapForeach{ix;}(
		\if(0 <= ix & ix < seqLen(s))\then(TRUE)\else(FALSE),
		any::seqGet(s,ix)
	))
    };

    //--------------------------------------------------------------------------
    //derived rules (proven sound in KeY)
    //--------------------------------------------------------------------------

    inDomainOfMapEmpty {
        \find(inDomain(atom, x))
        \replacewith(false)
        \heuristics(concrete)
    };

    inDomainOfMapSingleton {
        \find(inDomain(mapSingleton(x,y),z))
        \replacewith(x=z)
        \heuristics(simplify)
    };

    inDomainOfMapOverride {
        \find(inDomain(mapOverride(m0,m1),x))
        \replacewith(inDomain(m0,x)|inDomain(m1,x))
        \heuristics(simplify)
    };

    inDomainOfSeq2Map {
        \schemaVar \term Seq s;
        \find(inDomain(seq2map(s),x))
        \replacewith(int::instance(x) = TRUE & 
		0 <= int::cast(x) & int::cast(x) < seqLen(s))
        \heuristics(simplify)
    };

    getOfMapSingleton {
        \find(mapGet(mapSingleton(x,y),z))
        \sameUpdateLevel
        \replacewith(\if(x=z)\then(y)\else(mapUndef))
        \heuristics(simplify)
    };

    getOfMapOverride {
        \find(mapGet(mapOverride(m0,m1),x))
        \sameUpdateLevel
	\replacewith(\if(inDomain(m1,x))
		\then(mapGet(m1,x))\else(mapGet(m0,x)))
      	\heuristics(simplify_enlarging)
    };

    getOfSeq2Map {
        \schemaVar \term Seq s;
	\schemaVar \term int n;
        \find(mapGet(seq2map(s),n))
        \sameUpdateLevel
        \replacewith(\if(0 <= n & n < seqLen(s))
                     \then(any::seqGet(s,n))\else(mapUndef))
      	\heuristics(simplify_enlarging)
    };

    // actually an axiom, cannot be proven without HOL
    inDomainConcrete {
        \assumes(==> mapUndef = y)
        \find(mapGet(m,x) = y ==>)
        \add(inDomain(m,x) ==>)
        \heuristics(inReachableStateImplication)
    };
} 

