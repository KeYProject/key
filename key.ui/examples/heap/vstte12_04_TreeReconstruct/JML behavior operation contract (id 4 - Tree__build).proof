\settings {
"#Proof-Settings-Config-File
#Thu Nov 10 13:52:11 CET 2011
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , programRules-programRules\\:Java , intRules-intRules\\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\\:disableStaticInitialisation , runtimeExceptions-runtimeExceptions\\:ban
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[View]HideIntermediateProofsteps=false
[View]HideClosedSubtrees=true
[General]UseOCL=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[View]ShowWholeTaclet=false
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMinimum=-2147483645
[General]StupidMode=true
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[General]OneStepSimplification=true
[General]UseJML=true
[SMTSettings]integersMaximum=2147483645
[General]DnDDirectionSensitive=true
[View]FontIndex=2
[View]UseSystemLookAndFeel=false
[SMTSettings]useUninterpretedMultiplication=true
[Strategy]MaximumNumberOfAutomaticApplications=10000
[View]MaxTooltipLines=40
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[SMTSettings]explicitTypeHierarchy=false
"
}

\javaSource "src";

\chooseContract "JML behavior operation contract [id: 4 / Tree::build]";

\proof {
(keyLog "0" (keyUser "mattias" ) (keyVersion "1d23877b4d7e54300af1151f620642fdcafd3c1b"))

(autoModeTime "1019")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "4"))
(rule "assignment" (formula "5") (term "1"))
(builtin "One Step Simplification" (formula "5"))
(rule "eqSymm" (formula "5") (term "1,0,1,0,1,0,0,1"))
(rule "eqSymm" (formula "5") (term "0,0,1,0,0,1"))
(rule "replace_known_right" (formula "2") (term "1") (ifseqformula "4"))
(builtin "One Step Simplification" (formula "2"))
(rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,0,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,1,0,1,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1,0,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
(rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,0,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1,0,1,0,0,1"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1,0,1,0,0,1"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0,1,0,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1,0,1,0,0,1"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1,0,1,0,0,1"))
(rule "castedGetAny" (formula "5") (term "0,1,0,1,0,1,0,0,1"))
(rule "eqSymm" (formula "5") (term "1,0,1,0,1,0,0,1"))
(rule "nnf_imp2or" (formula "3") (term "0"))
(rule "nnf_notAnd" (formula "3") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "3") (term "0,0,0"))
(rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "3") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0"))
(rule "mul_literals" (formula "3") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "3") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
(rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "3") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
(rule "nnf_imp2or" (formula "5") (term "0,1,0,1,0,0,1"))
(rule "nnf_notAnd" (formula "5") (term "0,0,1,0,1,0,0,1"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,1,0,1,0,0,1"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,1,0,1,0,0,1"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,1,0,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,1,0,1,0,0,1"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0,1,0,1,0,0,1"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,0,1,0,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,1,0,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,1,0,1,0,0,1"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,1,0,1,0,0,1"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,1,0,1,0,0,1"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,1,0,1,0,0,1"))
(rule "add_literals" (formula "5") (term "0,0,0,0,0,1,0,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,1,0,1,0,0,1"))
(rule "mul_literals" (formula "5") (term "1,0,0,0,1,0,1,0,0,1"))
(rule "methodBodyExpand" (formula "5") (term "1") (newnames "heapBefore_build,savedHeapBefore_build"))
(builtin "One Step Simplification" (formula "5"))
(rule "variableDeclarationAssign" (formula "5") (term "1"))
(rule "variableDeclaration" (formula "5") (term "1") (newnames "s"))
(builtin "Use Operation Contract" (formula "5") (newnames "heapBefore_List,self_4,exc_4,heapAfter_List,anonHeap_List") (contract "JML normal_behavior operation contract [id: 2 / List::List]"))
(branch "Post (List)"
   (builtin "One Step Simplification" (formula "7"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "selectCreatedOfAnonEQ" (formula "6") (term "0,1,0,1,0") (ifseqformula "5"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "7"))
   (rule "notLeft" (formula "7"))
   (rule "notLeft" (formula "7"))
   (rule "assignment" (formula "15") (term "1"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "variableDeclarationAssign" (formula "15") (term "1"))
   (rule "variableDeclaration" (formula "15") (term "1") (newnames "t"))
   (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "12"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "selectOfAnonEQ" (formula "9") (term "0") (ifseqformula "5"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "selectOfAnonEQ" (formula "10") (term "0") (ifseqformula "5"))
   (builtin "One Step Simplification" (formula "10"))
   (builtin "Use Operation Contract" (formula "15") (newnames "heapBefore_build_0,result_1,exc_5,heapAfter_build,anonHeap_build") (contract "JML behavior operation contract [id: 3 / Tree::build]"))
   (branch "Post (build)"
      (builtin "One Step Simplification" (formula "13"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "selectCreatedOfAnonEQ" (formula "13") (term "0,0,1,0,1,0,1,1") (ifseqformula "5"))
      (rule "andLeft" (formula "13"))
      (rule "selectCreatedOfAnonEQ" (formula "14") (term "0,0,1,0") (ifseqformula "13"))
      (rule "selectCreatedOfAnonEQ" (formula "14") (term "0,0,0,0,1,0") (ifseqformula "5"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "14"))
      (rule "typeEqDerived" (formula "17") (term "0,1") (ifseqformula "14"))
      (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "14")))
      (rule "true_left" (formula "17"))
      (rule "assignment" (formula "20") (term "1"))
      (builtin "One Step Simplification" (formula "20"))
      (rule "translateJavaSubInt" (formula "16") (term "1,1,0,0,0,1"))
      (rule "translateJavaAddInt" (formula "16") (term "0,1,0,1,0,0,1"))
      (rule "add_zero_right" (formula "16") (term "0,1,0,1,0,0,1"))
      (rule "translateJavaAddInt" (formula "16") (term "0,2,1,1,0,1,0,0,1"))
      (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "14"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "notLeft" (formula "18"))
      (rule "andLeft" (formula "16"))
      (rule "notLeft" (formula "18"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "replace_known_right" (formula "15") (term "0,0,0") (ifseqformula "20"))
      (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "21")))
      (rule "polySimp_elimSub" (formula "18") (term "1"))
      (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_gtToGeq" (formula "17"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
      (rule "polySimp_addComm0" (formula "18") (term "1"))
      (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
      (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "18"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
      (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17"))
      (rule "polySimp_mulComm0" (formula "17") (term "1"))
      (rule "polySimp_rightDist" (formula "17") (term "1"))
      (rule "mul_literals" (formula "17") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
      (rule "polySimp_rightDist" (formula "19") (term "0,1,1,0,0"))
      (rule "mul_literals" (formula "19") (term "0,0,1,1,0,0"))
      (rule "castedGetAny" (formula "19") (term "0,1,0"))
      (rule "eqSymm" (formula "19") (term "1,0"))
      (rule "selectOfAnonEQ" (formula "18") (term "0,0") (ifseqformula "13"))
      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "21")))
      (rule "selectCreatedOfAnonEQ" (formula "18") (term "0,0,1,0,0,0") (ifseqformula "5"))
      (rule "replace_known_right" (formula "18") (term "0,1,0,0,0") (ifseqformula "20"))
      (builtin "One Step Simplification" (formula "18"))
      (rule "selectOfAnonEQ" (formula "17") (term "0") (ifseqformula "13"))
      (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "23")))
      (rule "selectCreatedOfAnonEQ" (formula "17") (term "0,0,1,0,0") (ifseqformula "5"))
      (rule "replace_known_right" (formula "17") (term "0,0,0,1,0,0") (ifseqformula "22"))
      (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "7")))
      (rule "elementOfSingleton" (formula "17") (term "0,0"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "inEqSimp_homoInEq1" (formula "17"))
      (rule "polySimp_addComm1" (formula "17") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17"))
      (rule "polySimp_mulComm0" (formula "17") (term "1"))
      (rule "polySimp_rightDist" (formula "17") (term "1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
      (rule "mul_literals" (formula "17") (term "0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1"))
      (rule "selectOfAnonEQ" (formula "19") (term "1,1,1,0,0") (ifseqformula "13"))
      (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "23")))
      (rule "selectCreatedOfAnonEQ" (formula "19") (term "0,0,1,0,1,1,1,0,0") (ifseqformula "5"))
      (rule "replace_known_right" (formula "19") (term "0,0,0,1,0,1,1,1,0,0") (ifseqformula "22"))
      (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "7")))
      (rule "elementOfSingleton" (formula "19") (term "0,1,1,1,0,0"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "polySimp_addComm1" (formula "19") (term "1,1,0,0"))
      (rule "selectOfAnonEQ" (formula "18") (term "1,1") (ifseqformula "13"))
      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "23")))
      (rule "selectCreatedOfAnonEQ" (formula "18") (term "0,0,1,0,1,1") (ifseqformula "5"))
      (rule "replace_known_right" (formula "18") (term "0,0,0,1,0,1,1") (ifseqformula "22"))
      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "7")))
      (rule "polySimp_homoEq" (formula "18"))
      (rule "polySimp_addComm1" (formula "18") (term "0"))
      (rule "polySimp_sepPosMonomial" (formula "18"))
      (rule "polySimp_mulComm0" (formula "18") (term "1"))
      (rule "polySimp_rightDist" (formula "18") (term "1"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
      (rule "polySimp_elimOne" (formula "18") (term "1,1"))
      (rule "polySimp_mulAssoc" (formula "18") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "18") (term "0,0,1"))
      (rule "polySimp_mulLiterals" (formula "18") (term "0,1"))
      (rule "polySimp_elimOne" (formula "18") (term "0,1"))
      (rule "elementOfSingleton" (formula "18") (term "0,0"))
      (builtin "One Step Simplification" (formula "18"))
      (rule "polySimp_homoEq" (formula "18"))
      (rule "polySimp_addComm1" (formula "18") (term "0"))
      (rule "polySimp_addComm0" (formula "18") (term "0,0"))
      (rule "polySimp_sepPosMonomial" (formula "18"))
      (rule "polySimp_mulComm0" (formula "18") (term "1"))
      (rule "polySimp_rightDist" (formula "18") (term "1"))
      (rule "polySimp_mulAssoc" (formula "18") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "18") (term "0,0,1"))
      (rule "polySimp_mulLiterals" (formula "18") (term "0,1"))
      (rule "polySimp_elimOne" (formula "18") (term "0,1"))
      (rule "selectOfAnonEQ" (formula "17") (term "0") (ifseqformula "5"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "inEqSimp_homoInEq0" (formula "17"))
      (rule "polySimp_addComm1" (formula "17") (term "0"))
      (rule "applyEq" (formula "17") (term "0,1,0,0") (ifseqformula "10"))
      (rule "times_zero_2" (formula "17") (term "1,0,0"))
      (rule "add_literals" (formula "17") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17"))
      (rule "mul_literals" (formula "17") (term "1"))
      (rule "selectOfAnonEQ" (formula "19") (term "0,1,1,0") (ifseqformula "13"))
      (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "21")))
      (rule "selectCreatedOfAnonEQ" (formula "19") (term "0,0,1,0,0,1,1,0") (ifseqformula "5"))
      (rule "replace_known_right" (formula "19") (term "0,1,0,0,1,1,0") (ifseqformula "20"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "selectOfAnonEQ" (formula "18") (term "0,1,1") (ifseqformula "5"))
      (builtin "One Step Simplification" (formula "18"))
      (rule "polySimp_addComm0" (formula "18") (term "1"))
      (rule "applyEq" (formula "18") (term "0,0,1") (ifseqformula "10"))
      (rule "times_zero_2" (formula "18") (term "0,1"))
      (rule "add_zero_left" (formula "18") (term "1"))
      (rule "selectOfAnonEQ" (formula "19") (term "1,0,1,0") (ifseqformula "13"))
      (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "23")))
      (rule "selectCreatedOfAnonEQ" (formula "19") (term "0,0,1,0,1,0,1,0") (ifseqformula "5"))
      (rule "replace_known_right" (formula "19") (term "0,0,0,1,0,1,0,1,0") (ifseqformula "22"))
      (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "7")))
      (rule "elementOfSingleton" (formula "19") (term "0,1,0,1,0"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "selectOfAnonEQ" (formula "19") (term "1,0,1,0") (ifseqformula "5"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "applyEq" (formula "19") (term "1,0,1,0") (ifseqformula "9"))
      (rule "selectOfAnonEQ" (formula "19") (term "0,1,0") (ifseqformula "13"))
      (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "24")))
      (rule "selectCreatedOfAnonEQ" (formula "19") (term "0,0,1,0,0,1,0") (ifseqformula "5"))
      (rule "replace_known_left" (formula "19") (term "0,0,0,1,0,0,1,0") (ifseqformula "2"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "elementOfSingleton" (formula "19") (term "0,0,1,0"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "selectOfAnonEQ" (formula "19") (term "0,1,1,1,0,0") (ifseqformula "5"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "polySimp_addComm1" (formula "19") (term "1,1,0,0"))
      (rule "applyEq" (formula "19") (term "0,1,0,1,1,0,0") (ifseqformula "10"))
      (rule "times_zero_2" (formula "19") (term "1,0,1,1,0,0"))
      (rule "add_literals" (formula "19") (term "0,1,1,0,0"))
      (rule "selectOfAnonEQ" (formula "19") (term "0,1,0") (ifseqformula "5"))
      (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "24")) (ifInst ""  (formula "2")))
      (rule "eqSymm" (formula "19") (term "0,0,1,0"))
      (rule "sortsDisjointModuloNull" (formula "19") (term "0,0,1,0"))
      (rule "replace_known_right" (formula "19") (term "0,0,0,1,0") (ifseqformula "23"))
      (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "24")))
      (rule "selectOfAnonEQ" (formula "19") (term "0,0,2,0,1,0") (ifseqformula "5"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "applyEq" (formula "19") (term "0,0,2,0,1,0") (ifseqformula "10"))
      (rule "add_zero_left" (formula "19") (term "0,2,0,1,0"))
      (rule "nnf_imp2or" (formula "19") (term "0"))
      (rule "nnf_notAnd" (formula "19") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
      (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
      (rule "mul_literals" (formula "19") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
      (rule "ifUnfold" (formula "25") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_1"))
      (rule "arrayLengthNotNegative" (formula "3") (term "1,1,0,0"))
      (rule "compound_assignment_2" (formula "26") (term "1") (inst "#v=x_2"))
      (rule "variableDeclarationAssign" (formula "26") (term "1"))
      (rule "variableDeclaration" (formula "26") (term "1") (newnames "x_2"))
      (rule "lenNonNegative" (formula "19") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "19"))
      (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
      (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "18"))
      (rule "leq_literals" (formula "19") (term "0"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "true_left" (formula "19"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "0") (ifseqformula "5"))
      (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "11"))
      (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "11"))
      (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "26"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "methodCallWithAssignment" (formula "27") (inst "#v0=x_3"))
      (branch "Normal Execution (s != null)"
         (rule "variableDeclaration" (formula "27") (term "1") (newnames "x_3"))
         (rule "methodBodyExpand" (formula "27") (term "1") (newnames "heapBefore_isEmpty,savedHeapBefore_isEmpty"))
         (builtin "One Step Simplification" (formula "27"))
         (rule "returnUnfold" (formula "27") (term "1") (inst "#v0=x_4"))
         (rule "variableDeclarationAssign" (formula "27") (term "1"))
         (rule "variableDeclaration" (formula "27") (term "1") (newnames "x_4"))
         (rule "compound_equality_comparison_2" (formula "27") (term "1") (inst "#v1=x_6") (inst "#v0=x_5"))
         (rule "variableDeclarationAssign" (formula "27") (term "1"))
         (rule "variableDeclaration" (formula "27") (term "1") (newnames "x_5"))
         (rule "assignment" (formula "27") (term "1"))
         (builtin "One Step Simplification" (formula "27"))
         (rule "variableDeclarationAssign" (formula "27") (term "1"))
         (rule "variableDeclaration" (formula "27") (term "1") (newnames "x_6"))
         (rule "assignment_read_length" (formula "27"))
         (branch "Normal Execution (a != null)"
            (builtin "One Step Simplification" (formula "27"))
            (rule "selectOfAnonEQ" (formula "27") (term "0,1,0,0") (ifseqformula "15"))
            (builtin "One Step Simplification" (formula "27"))
            (rule "selectCreatedOfAnonEQ" (formula "27") (term "0,0,1,1,0,0,1,0,0") (ifseqformula "6"))
            (rule "replace_known_right" (formula "27") (term "0,0,0,1,1,0,0,1,0,0") (ifseqformula "24"))
            (builtin "One Step Simplification" (formula "27"))
            (rule "replace_known_right" (formula "27") (term "0,0,1,0,0,1,0,0") (ifseqformula "25"))
            (builtin "One Step Simplification" (formula "27"))
            (rule "replace_known_left" (formula "27") (term "0,1,0,0,1,0,0") (ifseqformula "8"))
            (builtin "One Step Simplification" (formula "27"))
            (rule "elementOfSingleton" (formula "27") (term "0,0,1,0,0"))
            (builtin "One Step Simplification" (formula "27"))
            (rule "selectOfAnonEQ" (formula "27") (term "0,0,1,0") (ifseqformula "15"))
            (builtin "One Step Simplification" (formula "27"))
            (rule "selectCreatedOfAnonEQ" (formula "27") (term "0,0,1,1,0,0,0,1,0") (ifseqformula "6"))
            (rule "replace_known_right" (formula "27") (term "0,0,1,0,0,0,1,0") (ifseqformula "25"))
            (builtin "One Step Simplification" (formula "27"))
            (rule "replace_known_right" (formula "27") (term "0,0,0,1,0,0,0,1,0") (ifseqformula "24"))
            (builtin "One Step Simplification" (formula "27"))
            (rule "replace_known_left" (formula "27") (term "0,1,0,0,0,1,0") (ifseqformula "8"))
            (builtin "One Step Simplification" (formula "27"))
            (rule "elementOfSingleton" (formula "27") (term "0,0,0,1,0"))
            (builtin "One Step Simplification" (formula "27"))
            (rule "selectOfAnonEQ" (formula "27") (term "0,0,1,0") (ifseqformula "6"))
            (builtin "One Step Simplification" (formula "27"))
            (rule "applyEq" (formula "27") (term "0,0,1,0") (ifseqformula "11"))
            (rule "equality_comparison_new" (formula "27") (term "1"))
            (builtin "One Step Simplification" (formula "27"))
            (rule "assignment" (formula "27") (term "1,1"))
            (builtin "One Step Simplification" (formula "27"))
            (rule "assignment" (formula "27") (term "1,2"))
            (builtin "One Step Simplification" (formula "27"))
            (rule "ifthenelse_negated_for" (formula "27"))
            (rule "ifthenelse_split_for" (formula "27"))
            (branch "int::select(anonHeap_build, self_4, p) = array_0.length TRUE"
               (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "20") (term "0") (ifseqformula "1"))
               (rule "applyEq" (formula "21") (term "1") (ifseqformula "1"))
               (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "20"))
               (rule "leq_literals" (formula "4") (term "0"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "methodCallReturn" (formula "27") (term "1"))
               (rule "assignment" (formula "27") (term "1"))
               (builtin "One Step Simplification" (formula "27"))
               (rule "methodCallEmpty" (formula "27") (term "1"))
               (builtin "One Step Simplification" (formula "27"))
               (rule "blockEmpty" (formula "27") (term "1"))
               (rule "assignment" (formula "27") (term "1"))
               (builtin "One Step Simplification" (formula "27"))
               (rule "compound_assignment_1" (formula "27") (term "1"))
               (rule "ifElseSplit" (formula "27"))
               (branch "if x_2 true"
                  (builtin "One Step Simplification" (formula "1"))
                  (builtin "One Step Simplification" (formula "28"))
                  (rule "true_left" (formula "1"))
                  (rule "assignment" (formula "27") (term "1"))
                  (builtin "One Step Simplification" (formula "27"))
                  (rule "if" (formula "27") (term "1"))
                  (builtin "One Step Simplification" (formula "27"))
                  (rule "methodCallReturn" (formula "27") (term "1"))
                  (rule "assignment" (formula "27") (term "1"))
                  (builtin "One Step Simplification" (formula "27"))
                  (rule "methodCallEmpty" (formula "27") (term "1"))
                  (rule "tryEmpty" (formula "27") (term "1"))
                  (rule "emptyModality" (formula "27") (term "1"))
                  (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "23")))
                  (rule "selectOfAnonEQ" (formula "27") (term "0,0,0") (ifseqformula "15"))
                  (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "23")))
                  (rule "selectCreatedOfAnonEQ" (formula "27") (term "0,0,1,0,0,0,0") (ifseqformula "6"))
                  (rule "replace_known_right" (formula "27") (term "0,1,0,0,0,0") (ifseqformula "22"))
                  (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "20")))
                  (rule "allRight" (formula "27") (inst "sk=i_1"))
                  (rule "orRight" (formula "27"))
                  (rule "orRight" (formula "27"))
                  (rule "eqSymm" (formula "29"))
                  (rule "inEqSimp_geqRight" (formula "28"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_leqRight" (formula "28"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "selectOfAnonEQ" (formula "29") (term "1") (ifseqformula "17"))
                  (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "28")))
                  (rule "selectCreatedOfAnonEQ" (formula "29") (term "0,0,1,0,1") (ifseqformula "8"))
                  (rule "eqSymm" (formula "29"))
                  (rule "replace_known_left" (formula "29") (term "0,0,0,1,0,0") (ifseqformula "5"))
                  (builtin "One Step Simplification" (formula "29"))
                  (rule "elementOfSingleton" (formula "29") (term "0,0"))
                  (builtin "One Step Simplification" (formula "29"))
                  (rule "eqSymm" (formula "29"))
                  (rule "selectOfAnonEQ" (formula "29") (term "0,0") (ifseqformula "17"))
                  (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "25")))
                  (rule "selectCreatedOfAnonEQ" (formula "29") (term "0,0,1,0,0,0") (ifseqformula "8"))
                  (rule "replace_known_right" (formula "29") (term "0,1,0,0,0") (ifseqformula "24"))
                  (builtin "One Step Simplification" (formula "29"))
                  (rule "selectOfAnonEQ" (formula "29") (term "1") (ifseqformula "8"))
                  (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "28")) (ifInst ""  (formula "5")))
                  (rule "eqSymm" (formula "29"))
                  (rule "eqSymm" (formula "29") (term "0,0"))
                  (rule "sortsDisjointModuloNull" (formula "29") (term "0,0"))
                  (rule "replace_known_right" (formula "29") (term "1,0,0") (ifseqformula "28"))
                  (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "27")))
                  (rule "eqSymm" (formula "29"))
                  (rule "ifthenelse_split" (formula "24") (term "0"))
                  (branch "result_1.<created> = TRUE TRUE"
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "closeTrue" (formula "25"))
                  )
                  (branch "result_1.<created> = TRUE FALSE"
                     (rule "allLeft" (formula "23") (inst "t=i_1"))
                     (rule "eqSymm" (formula "23") (term "1"))
                     (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "31"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "23") (term "0,0"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "inEqSimp_contradInEq1" (formula "23") (ifseqformula "2"))
                     (rule "andLeft" (formula "23"))
                     (rule "inEqSimp_homoInEq1" (formula "23"))
                     (rule "polySimp_pullOutFactor1b" (formula "23") (term "0"))
                     (rule "add_literals" (formula "23") (term "1,1,0"))
                     (rule "times_zero_1" (formula "23") (term "1,0"))
                     (rule "add_literals" (formula "23") (term "0"))
                     (rule "leq_literals" (formula "23"))
                     (rule "closeFalse" (formula "23"))
                  )
               )
               (branch "if x_2 false"
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "int::select(anonHeap_build, self_4, p) = array_0.length FALSE"
               (rule "methodCallReturn" (formula "28") (term "1"))
               (rule "assignment" (formula "28") (term "1"))
               (builtin "One Step Simplification" (formula "28"))
               (rule "methodCallEmpty" (formula "28") (term "1"))
               (builtin "One Step Simplification" (formula "28"))
               (rule "blockEmpty" (formula "28") (term "1"))
               (rule "assignment" (formula "28") (term "1"))
               (builtin "One Step Simplification" (formula "28"))
               (rule "compound_assignment_1" (formula "28") (term "1"))
               (rule "ifElse" (formula "28") (term "1"))
               (builtin "One Step Simplification" (formula "28"))
               (rule "assignment" (formula "28") (term "1"))
               (builtin "One Step Simplification" (formula "28"))
               (rule "if" (formula "28") (term "1"))
               (builtin "One Step Simplification" (formula "28"))
               (rule "throwUnfold" (formula "28") (term "1") (inst "#v0=t_1"))
               (rule "variableDeclarationAssign" (formula "28") (term "1"))
               (rule "variableDeclaration" (formula "28") (term "1") (newnames "t_1"))
               (rule "instanceCreationAssignment" (formula "28") (term "1") (inst "#v0=t_2"))
               (rule "variableDeclarationAssign" (formula "28") (term "1"))
               (rule "variableDeclaration" (formula "28") (term "1") (newnames "t_2"))
               (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "28") (term "1") (inst "#v0=t_3"))
               (rule "variableDeclaration" (formula "28") (term "1") (newnames "t_3"))
               (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
               (builtin "One Step Simplification" (formula "28"))
               (rule "variableDeclaration" (formula "28") (term "1") (newnames "__NEW__"))
               (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "28") (term "1") (inst "#v0=t_4"))
               (rule "variableDeclaration" (formula "28") (term "1") (newnames "t_4"))
               (rule "allocateInstance" (formula "28"))
               (builtin "One Step Simplification" (formula "29"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "selectCreatedOfAnonEQ" (formula "1") (term "0,0,1,1,0") (ifseqformula "16"))
               (rule "selectCreatedOfAnonEQ" (formula "1") (term "0,0,0,0,1,1,0") (ifseqformula "7"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "blockEmpty" (formula "31") (term "1"))
               (rule "assignment" (formula "31") (term "1"))
               (builtin "One Step Simplification" (formula "31"))
               (rule "methodBodyExpand" (formula "31") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
               (builtin "One Step Simplification" (formula "31"))
               (rule "assignment" (formula "31") (term "1"))
               (builtin "One Step Simplification" (formula "31"))
               (rule "methodCallWithinClass" (formula "31") (term "1"))
               (rule "methodBodyExpand" (formula "31") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
               (builtin "One Step Simplification" (formula "31"))
               (rule "methodCallSuper" (formula "31") (term "1"))
               (rule "methodBodyExpand" (formula "31") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
               (builtin "One Step Simplification" (formula "31"))
               (rule "methodCallSuper" (formula "31") (term "1"))
               (rule "methodBodyExpand" (formula "31") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>"))
               (builtin "One Step Simplification" (formula "31"))
               (rule "methodCallSuper" (formula "31") (term "1"))
               (rule "methodBodyExpand" (formula "31") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>"))
               (builtin "One Step Simplification" (formula "31"))
               (rule "methodCallEmpty" (formula "31") (term "1"))
               (rule "blockEmpty" (formula "31") (term "1"))
               (rule "assignment" (formula "31") (term "1"))
               (builtin "One Step Simplification" (formula "31"))
               (rule "assignment" (formula "31") (term "1"))
               (builtin "One Step Simplification" (formula "31"))
               (rule "methodCallEmpty" (formula "31") (term "1"))
               (rule "methodCallEmpty" (formula "31") (term "1"))
               (rule "methodCallEmpty" (formula "31") (term "1"))
               (rule "blockEmpty" (formula "31") (term "1"))
               (rule "methodCallReturnIgnoreResult" (formula "31") (term "1"))
               (rule "methodCallReturn" (formula "31") (term "1"))
               (rule "assignment" (formula "31") (term "1"))
               (builtin "One Step Simplification" (formula "31"))
               (rule "methodCallEmpty" (formula "31") (term "1"))
               (rule "blockEmpty" (formula "31") (term "1"))
               (rule "assignment" (formula "31") (term "1"))
               (builtin "One Step Simplification" (formula "31"))
               (rule "methodBodyExpand" (formula "31") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
               (builtin "One Step Simplification" (formula "31"))
               (rule "methodCallSuper" (formula "31") (term "1"))
               (rule "methodBodyExpand" (formula "31") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>"))
               (builtin "One Step Simplification" (formula "31"))
               (rule "methodCallSuper" (formula "31") (term "1"))
               (rule "methodBodyExpand" (formula "31") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>"))
               (builtin "One Step Simplification" (formula "31"))
               (rule "methodCallSuper" (formula "31") (term "1"))
               (rule "methodBodyExpand" (formula "31") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>"))
               (builtin "One Step Simplification" (formula "31"))
               (rule "methodCallEmpty" (formula "31") (term "1"))
               (rule "blockEmpty" (formula "31") (term "1"))
               (rule "assignment" (formula "31") (term "1"))
               (builtin "One Step Simplification" (formula "31"))
               (rule "assignment" (formula "31") (term "1"))
               (builtin "One Step Simplification" (formula "31"))
               (rule "methodCallEmpty" (formula "31") (term "1"))
               (rule "methodCallEmpty" (formula "31") (term "1"))
               (rule "methodCallEmpty" (formula "31") (term "1"))
               (rule "blockEmpty" (formula "31") (term "1"))
               (rule "assignment_write_attribute" (formula "31"))
               (branch "Normal Execution (t_2 != null)"
                  (builtin "One Step Simplification" (formula "31"))
                  (rule "assignment" (formula "31") (term "1"))
                  (builtin "One Step Simplification" (formula "31"))
                  (rule "methodCallParamThrow" (formula "31") (term "1"))
                  (builtin "One Step Simplification" (formula "31"))
                  (rule "tryCatchThrow" (formula "31") (term "1"))
                  (rule "ifElseUnfold" (formula "31") (term "1") (inst "#boolv=x"))
                  (rule "variableDeclaration" (formula "31") (term "1") (newnames "x_7"))
                  (rule "equality_comparison_new" (formula "31") (term "1"))
                  (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "24")))
                  (rule "assignment" (formula "31") (term "1"))
                  (builtin "One Step Simplification" (formula "31"))
                  (rule "ifElse" (formula "31") (term "1"))
                  (builtin "One Step Simplification" (formula "31"))
                  (rule "ifElseSplit" (formula "31"))
                  (branch "if t_1 instanceof java.lang.Exception true"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
                     (rule "variableDeclaration" (formula "32") (term "1") (newnames "e_1"))
                     (rule "instanceof_static_type" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "reference_type_cast" (formula "31"))
                     (branch "Normal Execution (t_1 instanceof java.lang.Exception)"
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "assignment" (formula "31") (term "1"))
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "emptyModality" (formula "31") (term "1"))
                        (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "24")) (ifInst ""  (formula "24")))
                        (rule "instanceof_static_type" (formula "31") (term "0"))
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "closeTrue" (formula "31"))
                     )
                     (branch "ClassCastException (!(t_1 instanceof java.lang.Exception))"
                        (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "24")))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "false_right" (formula "32"))
                        (rule "instanceof_static_type" (formula "31") (term "0"))
                        (builtin "One Step Simplification" (formula "31"))
                        (rule "closeTrue" (formula "31"))
                     )
                  )
                  (branch "if t_1 instanceof java.lang.Exception false"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
                     (rule "notLeft" (formula "1"))
                     (rule "blockThrow" (formula "32") (term "1"))
                     (rule "instanceof_static_type" (formula "24") (term "0"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "closeTrue" (formula "24"))
                  )
               )
               (branch "Null Reference (t_2 = null)"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "Null Reference (a = null)"
            (builtin "One Step Simplification" (formula "1"))
            (builtin "One Step Simplification" (formula "28"))
            (rule "false_right" (formula "28"))
            (rule "selectOfAnonEQ" (formula "1") (term "0") (ifseqformula "16"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")))
            (rule "selectCreatedOfAnonEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "7"))
            (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "25"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "selectOfAnonEQ" (formula "1") (term "0") (ifseqformula "7"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEq" (formula "12") (term "0") (ifseqformula "1"))
            (rule "eqSymm" (formula "12"))
            (rule "close" (formula "27") (ifseqformula "12"))
         )
      )
      (branch "Null Reference (s = null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Exceptional Post (build)"
      (builtin "One Step Simplification" (formula "17"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectCreatedOfAnonEQ" (formula "13") (term "0,0,1,0,1,0,1,1") (ifseqformula "5"))
      (rule "andLeft" (formula "13"))
      (rule "selectCreatedOfAnonEQ" (formula "14") (term "0,1,0") (ifseqformula "13"))
      (rule "selectCreatedOfAnonEQ" (formula "14") (term "0,0,0,1,0") (ifseqformula "5"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "14"))
      (rule "notLeft" (formula "14"))
      (rule "translateJavaAddInt" (formula "15") (term "0,2,1,1,0,1,0,0,1"))
      (rule "translateJavaAddInt" (formula "15") (term "0,1,0,1,0,0,1"))
      (rule "add_zero_right" (formula "15") (term "0,1,0,1,0,0,1"))
      (rule "translateJavaSubInt" (formula "15") (term "1,1,0,0,0,1"))
      (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "17"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "17"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "methodCallParamThrow" (formula "20") (term "1"))
      (builtin "One Step Simplification" (formula "20"))
      (rule "tryCatchThrow" (formula "20") (term "1"))
      (rule "ifElseUnfold" (formula "20") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "20") (term "1") (newnames "x"))
      (rule "equality_comparison_new" (formula "20") (term "1"))
      (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "16")))
      (rule "assignment" (formula "20") (term "1"))
      (builtin "One Step Simplification" (formula "20"))
      (rule "arrayLengthNotNegative" (formula "3") (term "1,1,0,0"))
      (rule "ifElse" (formula "21") (term "1"))
      (builtin "One Step Simplification" (formula "21"))
      (rule "ifElseSplit" (formula "21"))
      (branch "if exc_5 instanceof java.lang.Exception true"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
         (rule "variableDeclaration" (formula "22") (term "1") (newnames "e"))
         (rule "instanceof_static_type" (formula "1") (term "0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "reference_type_cast" (formula "21"))
         (branch "Normal Execution (exc_5 instanceof java.lang.Exception)"
            (builtin "One Step Simplification" (formula "21"))
            (rule "assignment" (formula "21") (term "1"))
            (builtin "One Step Simplification" (formula "21"))
            (rule "emptyModality" (formula "21") (term "1"))
            (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "17")) (ifInst ""  (formula "17")) (ifInst ""  (formula "16")))
            (rule "closeTrue" (formula "21"))
         )
         (branch "ClassCastException (!(exc_5 instanceof java.lang.Exception))"
            (builtin "One Step Simplification" (formula "22"))
            (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "17")))
            (rule "closeTypeSwitched" (formula "21") (ifseqformula "16"))
         )
      )
      (branch "if exc_5 instanceof java.lang.Exception false"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
         (rule "notLeft" (formula "1"))
         (rule "closeType" (formula "16") (ifseqformula "17"))
      )
   )
   (branch "Pre (build)"
      (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "11")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
      (rule "selectCreatedOfAnonEQ" (formula "15") (term "0,1,1") (ifseqformula "5"))
      (rule "qeq_literals" (formula "15") (term "0"))
      (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "12")) (ifInst ""  (formula "7")))
      (rule "wellFormedAnonEQ" (formula "15") (ifseqformula "5"))
      (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "4")))
      (rule "closeTrue" (formula "15"))
   )
)
(branch "Exceptional Post (List)"
   (builtin "One Step Simplification" (formula "5"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "andLeft" (formula "5"))
   (rule "selectCreatedOfAnonEQ" (formula "6") (term "0,1,0,0") (ifseqformula "5"))
   (rule "selectCreatedOfAnonEQ" (formula "6") (term "0,1,0,1,0") (ifseqformula "5"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "6"))
   (rule "close" (formula "13") (ifseqformula "12"))
)
(branch "Pre (List)"
   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "4")) (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
   (rule "allRight" (formula "5") (inst "sk=i_0"))
   (rule "impRight" (formula "5"))
   (rule "andLeft" (formula "1"))
   (rule "inEqSimp_geqRight" (formula "7"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "inEqSimp_ltToLeq" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "2"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "polySimp_elimOne" (formula "3") (term "0"))
   (rule "allLeft" (formula "6") (inst "t=i_0"))
   (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
   (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0") (ifseqformula "2"))
   (rule "qeq_literals" (formula "6") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "inEqSimp_contradInEq0" (formula "6") (term "1") (ifseqformula "1"))
   (rule "qeq_literals" (formula "6") (term "0,1"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "6"))
   (rule "andLeft" (formula "3"))
   (rule "inEqSimp_homoInEq1" (formula "3"))
   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
   (rule "add_literals" (formula "3") (term "1,1,0"))
   (rule "times_zero_1" (formula "3") (term "1,0"))
   (rule "add_zero_right" (formula "3") (term "0"))
   (rule "leq_literals" (formula "3"))
   (rule "closeFalse" (formula "3"))
)
)

}
