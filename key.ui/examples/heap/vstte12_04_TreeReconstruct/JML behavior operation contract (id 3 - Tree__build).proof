\settings {
"#Proof-Settings-Config-File
#Thu Nov 10 13:52:13 CET 2011
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , programRules-programRules\\:Java , intRules-intRules\\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\\:disableStaticInitialisation , runtimeExceptions-runtimeExceptions\\:ban
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[View]HideIntermediateProofsteps=false
[View]HideClosedSubtrees=true
[General]UseOCL=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[View]ShowWholeTaclet=false
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMinimum=-2147483645
[General]StupidMode=true
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[General]OneStepSimplification=true
[General]UseJML=true
[SMTSettings]integersMaximum=2147483645
[General]DnDDirectionSensitive=true
[View]FontIndex=2
[View]UseSystemLookAndFeel=false
[SMTSettings]useUninterpretedMultiplication=true
[Strategy]MaximumNumberOfAutomaticApplications=10000
[View]MaxTooltipLines=40
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[SMTSettings]explicitTypeHierarchy=false
"
}

\javaSource "src";

\chooseContract "JML behavior operation contract [id: 3 / Tree::build]";

\proof {
(keyLog "0" (keyUser "mattias" ) (keyVersion "1d23877b4d7e54300af1151f620642fdcafd3c1b"))

(autoModeTime "10994")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "notLeft" (formula "6"))
(rule "assignment" (formula "7") (term "1"))
(builtin "One Step Simplification" (formula "7"))
(rule "eqSymm" (formula "3"))
(rule "eqSymm" (formula "7") (term "1,0,0,1,0,1"))
(rule "translateJavaAddInt" (formula "7") (term "0,2,1,1,0,1,0,0,1,0,0,0,1"))
(rule "translateJavaAddInt" (formula "7") (term "0,1,0,1,0,0,1,0,0,0,1"))
(rule "translateJavaSubInt" (formula "7") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "translateJavaSubInt" (formula "3") (term "0"))
(rule "replace_known_right" (formula "2") (term "1") (ifseqformula "6"))
(builtin "One Step Simplification" (formula "2"))
(rule "polySimp_homoEq" (formula "7") (term "1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "7") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "3") (term "0"))
(rule "polySimp_homoEq" (formula "3"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0"))
(rule "inEqSimp_gtToGeq" (formula "7") (term "1,0,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "7") (term "1,1,0,1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "3") (term "1,1,0"))
(rule "polySimp_addComm1" (formula "7") (term "0,1,0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "0,1,0,1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "3") (term "1,0"))
(rule "polySimp_mulAssoc" (formula "3") (term "0,1,0"))
(rule "polySimp_mulComm0" (formula "3") (term "0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "3") (term "0,1,0"))
(rule "polySimp_elimOne" (formula "3") (term "0,1,0"))
(rule "polySimp_addAssoc" (formula "7") (term "0,1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "7") (term "0,0,1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "3") (term "0"))
(rule "polySimp_addComm0" (formula "3") (term "0,0"))
(rule "polySimp_sepNegMonomial" (formula "7") (term "1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "0,1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "0,1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "3"))
(rule "polySimp_mulLiterals" (formula "3") (term "0"))
(rule "polySimp_elimOne" (formula "3") (term "0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial1" (formula "7") (term "1,0,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "0,1,0,0,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "0,1,0,0,0,0,1,0,0,0,1"))
(rule "elementOfSingleton" (formula "7") (term "0,0,0,0,1,0,1"))
(rule "castedGetAny" (formula "7") (term "0,1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_homoEq" (formula "7") (term "1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addComm1" (formula "7") (term "0,1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_sepPosMonomial" (formula "7") (term "1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_mulAssoc" (formula "7") (term "0,1,1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "0,0,1,1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "0,1,1,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "0,1,1,0,1,0,0,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "7") (term "0,1,0,0,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "7") (term "0,0,1,0,0,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1,0,0,1,0,0,0,1"))
(rule "add_zero_left" (formula "7") (term "0,0,1,0,0,1,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,1,0,0,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,1,0,0,1,0,0,0,1"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,1,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "7") (term "0,0,0,0,0,1,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,0,0,1,0,0,1,0,0,0,1"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_build,savedHeapBefore_build"))
(builtin "One Step Simplification" (formula "7"))
(rule "ifUnfold" (formula "7") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x"))
(rule "methodCallWithAssignment" (formula "7") (inst "#v0=x_1"))
(branch "Normal Execution (_s != null)"
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_1"))
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_isEmpty,savedHeapBefore_isEmpty"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "returnUnfold" (formula "7") (term "1") (inst "#v0=x_2"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_2"))
   (rule "compound_equality_comparison_2" (formula "7") (term "1") (inst "#v1=x_4") (inst "#v0=x_3"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_3"))
   (rule "assignment" (formula "7") (term "1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_4"))
   (rule "assignment_read_length" (formula "7"))
   (branch "Normal Execution (a != null)"
      (builtin "One Step Simplification" (formula "7"))
      (rule "equality_comparison_new" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "assignment" (formula "7") (term "1,1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "assignment" (formula "7") (term "1,2"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "ifthenelse_negated_for" (formula "7"))
      (rule "ifthenelse_split_for" (formula "7"))
      (branch "s.p = s.a.length TRUE"
         (rule "methodCallReturn" (formula "8") (term "1"))
         (rule "assignment" (formula "8") (term "1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "methodCallEmpty" (formula "8") (term "1"))
         (rule "blockEmpty" (formula "8") (term "1"))
         (rule "assignment" (formula "8") (term "1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "if" (formula "8") (term "1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "blockThrow" (formula "8") (term "1"))
         (rule "throwUnfold" (formula "8") (term "1") (inst "#v0=t"))
         (rule "variableDeclarationAssign" (formula "8") (term "1"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "t_6"))
         (rule "arrayLengthNotNegative" (formula "1") (term "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "2") (term "0,1") (ifseqformula "3"))
         (rule "instanceCreationAssignment" (formula "10") (term "1") (inst "#v0=t_7"))
         (rule "variableDeclarationAssign" (formula "10") (term "1"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "t_7"))
         (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "10") (term "1") (inst "#v0=t_8"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "t_8"))
         (rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_<createObject>_0,savedHeapBefore_<createObject>"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "__NEW___1"))
         (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "10") (term "1") (inst "#v0=t_9"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "t_9"))
         (rule "allocateInstance" (formula "10"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
         (builtin "One Step Simplification" (formula "11"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "blockEmpty" (formula "13") (term "1"))
         (rule "assignment" (formula "13") (term "1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_<create>_0,savedHeapBefore_<create>"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "assignment" (formula "13") (term "1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "methodCallWithinClass" (formula "13") (term "1"))
         (rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_<prepareEnter>_0,savedHeapBefore_<prepareEnter>"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "methodCallSuper" (formula "13") (term "1"))
         (rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "methodCallSuper" (formula "13") (term "1"))
         (rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_<prepare>_3,savedHeapBefore_<prepare>"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "methodCallSuper" (formula "13") (term "1"))
         (rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_<prepare>_4,savedHeapBefore_<prepare>"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "methodCallEmpty" (formula "13") (term "1"))
         (rule "blockEmpty" (formula "13") (term "1"))
         (rule "assignment" (formula "13") (term "1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "assignment" (formula "13") (term "1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "methodCallEmpty" (formula "13") (term "1"))
         (rule "methodCallEmpty" (formula "13") (term "1"))
         (rule "methodCallEmpty" (formula "13") (term "1"))
         (rule "blockEmpty" (formula "13") (term "1"))
         (rule "methodCallReturnIgnoreResult" (formula "13") (term "1"))
         (rule "methodCallReturn" (formula "13") (term "1"))
         (rule "assignment" (formula "13") (term "1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "methodCallEmpty" (formula "13") (term "1"))
         (rule "blockEmpty" (formula "13") (term "1"))
         (rule "assignment" (formula "13") (term "1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "methodCallSuper" (formula "13") (term "1"))
         (rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_<init>_4,savedHeapBefore_<init>"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "methodCallSuper" (formula "13") (term "1"))
         (rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_<init>_5,savedHeapBefore_<init>"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "methodCallSuper" (formula "13") (term "1"))
         (rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_<init>_6,savedHeapBefore_<init>"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "methodCallEmpty" (formula "13") (term "1"))
         (rule "blockEmpty" (formula "13") (term "1"))
         (rule "assignment" (formula "13") (term "1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "assignment" (formula "13") (term "1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "methodCallEmpty" (formula "13") (term "1"))
         (rule "methodCallEmpty" (formula "13") (term "1"))
         (rule "methodCallEmpty" (formula "13") (term "1"))
         (rule "blockEmpty" (formula "13") (term "1"))
         (rule "assignment_write_attribute" (formula "13"))
         (branch "Normal Execution (t_7 != null)"
            (builtin "One Step Simplification" (formula "13"))
            (rule "assignment" (formula "13") (term "1"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "methodCallParamThrow" (formula "13") (term "1"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "tryCatchThrow" (formula "13") (term "1"))
            (rule "ifElseUnfold" (formula "13") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_12"))
            (rule "equality_comparison_new" (formula "13") (term "1"))
            (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "11")))
            (rule "assignment" (formula "13") (term "1"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "ifElseSplit" (formula "13"))
            (branch "if x_12 true"
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_12 false"
               (builtin "One Step Simplification" (formula "1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "1"))
               (rule "ifElseSplit" (formula "13"))
               (branch "if t_6 instanceof java.lang.Exception true"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
                  (rule "variableDeclaration" (formula "14") (term "1") (newnames "e_3"))
                  (rule "instanceof_static_type" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "reference_type_cast" (formula "13"))
                  (branch "Normal Execution (t_6 instanceof java.lang.Exception)"
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "assignment" (formula "13") (term "1"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "emptyModality" (formula "13") (term "1"))
                     (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "11")) (ifInst ""  (formula "11")))
                     (rule "eqSymm" (formula "13") (term "1,0,0,1"))
                     (rule "instanceof_static_type" (formula "13") (term "0,0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "allRight" (formula "13") (inst "sk=f_9"))
                     (rule "allRight" (formula "13") (inst "sk=o_9"))
                     (rule "orRight" (formula "13"))
                     (rule "orRight" (formula "13"))
                     (rule "selectOfStore" (formula "15") (term "0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "eqSymm" (formula "15") (term "0,0,0"))
                     (rule "eqSymm" (formula "15") (term "1,0,0"))
                     (rule "castDel" (formula "15") (term "1,0"))
                     (rule "selectOfStore" (formula "15") (term "2,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "eqSymm" (formula "15") (term "1,0,2,0"))
                     (rule "eqSymm" (formula "15") (term "0,0,2,0"))
                     (rule "castDel" (formula "15") (term "1,2,0"))
                     (rule "selectOfStore" (formula "15") (term "2,2,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "eqSymm" (formula "15") (term "1,0,2,2,0"))
                     (rule "eqSymm" (formula "15") (term "0,0,2,2,0"))
                     (rule "castDel" (formula "15") (term "1,2,2,0"))
                     (rule "selectOfCreate" (formula "15") (term "2,2,2,0"))
                     (rule "eqSymm" (formula "15") (term "0,0,0,2,2,2,0"))
                     (rule "replace_known_right" (formula "15") (term "0,1,0,0,2,2,2,0") (ifseqformula "11"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "castDel" (formula "15") (term "1,2,2,2,0"))
                     (rule "commute_and" (formula "15") (term "0,2,2,2,0"))
                     (rule "commute_and" (formula "15") (term "0,0"))
                     (rule "commute_and" (formula "15") (term "0,2,2,0"))
                     (rule "commute_and" (formula "15") (term "0,2,0"))
                     (rule "cut_direct" (formula "3") (term "0"))
                     (branch "CUT: s.a = null TRUE"
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "4") (term "0,1") (ifseqformula "3"))
                        (rule "cut_direct" (formula "13") (term "1"))
                        (branch "CUT: f_9 = p TRUE"
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "applyEqRigid" (formula "16") (term "2,2,2,2,2,0") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "16") (term "0,0,0,2,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "applyEqRigid" (formula "16") (term "2,1") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "16") (term "0,0,0,2,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "applyEqRigid" (formula "16") (term "0,0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "applyEq" (formula "16") (term "0,0,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "closeTrue" (formula "16"))
                        )
                        (branch "CUT: f_9 = p FALSE"
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "false_right" (formula "14"))
                           (rule "cut_direct" (formula "14") (term "0,0"))
                           (branch "CUT: o_9 = null TRUE"
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "false_right" (formula "15"))
                              (rule "applyEq" (formula "15") (term "0,1,0,2,2,2,0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "15") (term "1,0,2,2,2,0"))
                              (rule "replace_known_right" (formula "15") (term "1,0,2,2,2,0") (ifseqformula "12"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "applyEq" (formula "15") (term "1,2,2,2,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "15") (term "0,1,0,2,0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "15") (term "1,0,2,0"))
                              (rule "replace_known_right" (formula "15") (term "1,0,2,0") (ifseqformula "12"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "applyEq" (formula "15") (term "0,1,0,0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "15") (term "1,0,0"))
                              (rule "replace_known_right" (formula "15") (term "1,0,0") (ifseqformula "12"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "applyEq" (formula "15") (term "0,1,0,0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "15") (term "1,0,0"))
                              (rule "replace_known_right" (formula "15") (term "1,0,0") (ifseqformula "12"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "eqSymm" (formula "15"))
                              (rule "applyEqRigid" (formula "15") (term "1,0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "closeTrue" (formula "15"))
                           )
                           (branch "CUT: o_9 = null FALSE"
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "notRight" (formula "15"))
                              (rule "ifthenelse_split" (formula "16") (term "2,2,2,0"))
                              (branch "f_9 = <created> & o_9 = t_9 TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "replace_known_left" (formula "18") (term "1,0,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "2")) (ifInst ""  (formula "2")))
                                 (rule "applyEqRigid" (formula "18") (term "0,0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "applyEq" (formula "17") (term "0") (ifseqformula "2"))
                                 (rule "applyEqRigid" (formula "16") (term "0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "false_right" (formula "16"))
                                 (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "2"))
                                 (rule "close" (formula "13") (ifseqformula "3"))
                              )
                              (branch "f_9 = <created> & o_9 = t_9 FALSE"
                                 (rule "ifthenelse_split" (formula "17") (term "2,2,0"))
                                 (branch "f_9 = cause & o_9 = t_9 TRUE"
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "replace_known_left" (formula "19") (term "1,0,0") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "applyEqRigid" (formula "16") (term "0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "false_right" (formula "16"))
                                    (rule "applyEq" (formula "18") (term "1,1") (ifseqformula "2"))
                                    (rule "applyEqRigid" (formula "18") (term "2,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "18") (term "0,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "eqSymm" (formula "18"))
                                    (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "2"))
                                    (rule "close" (formula "13") (ifseqformula "3"))
                                 )
                                 (branch "f_9 = cause & o_9 = t_9 FALSE"
                                    (rule "ifthenelse_split" (formula "18") (term "0"))
                                    (branch "f_9 = <initialized> & o_9 = t_9 TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "eqSymm" (formula "20"))
                                       (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "applyEqRigid" (formula "20") (term "2,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "false_right" (formula "18"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "false_right" (formula "18"))
                                       (rule "applyEq" (formula "16") (term "0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "false_right" (formula "16"))
                                       (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "2"))
                                       (rule "close" (formula "13") (ifseqformula "3"))
                                    )
                                    (branch "f_9 = <initialized> & o_9 = t_9 FALSE"
                                       (rule "ifthenelse_split" (formula "19") (term "0"))
                                       (branch "f_9 = message & o_9 = t_9 TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "eqSymm" (formula "21"))
                                          (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "18"))
                                          (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "2"))
                                          (rule "close" (formula "13") (ifseqformula "3"))
                                       )
                                       (branch "f_9 = message & o_9 = t_9 FALSE"
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "closeTrue" (formula "20"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                     (branch "CUT: s.a = null FALSE"
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "cut_direct" (formula "14") (term "0"))
                        (branch "CUT: o_9 = s TRUE"
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "applyEq" (formula "16") (term "0,0,0") (ifseqformula "1"))
                           (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "notRight" (formula "16"))
                           (rule "applyEq" (formula "17") (term "0,1,0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "17") (term "0,1,0,2,2,2,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "17") (term "0,1,0,2,2,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "17") (term "1,1") (ifseqformula "2"))
                           (rule "applyEq" (formula "17") (term "1,2,2,2,2,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "17") (term "0,1,0,2,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                           (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,0"))
                           (rule "replace_known_right" (formula "16") (term "0,1,0,0") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "13")))
                           (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,2,0"))
                           (rule "replace_known_right" (formula "16") (term "0,1,0,2,0") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "13")))
                           (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,0"))
                           (rule "replace_known_right" (formula "16") (term "0,1,0,0") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "13")))
                           (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,0"))
                           (rule "replace_known_right" (formula "16") (term "0,1,0,0") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "13")))
                           (rule "closeTrue" (formula "16"))
                        )
                        (branch "CUT: o_9 = s FALSE"
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "false_right" (formula "15"))
                           (rule "cut_direct" (formula "15") (term "0,0"))
                           (branch "CUT: o_9 = null TRUE"
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "false_right" (formula "16"))
                              (rule "applyEq" (formula "16") (term "0,1,0,2,0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "16") (term "1,0,2,0"))
                              (rule "replace_known_right" (formula "16") (term "1,0,2,0") (ifseqformula "13"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "applyEq" (formula "15") (term "0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "15"))
                              (rule "applyEqRigid" (formula "15") (term "0,1,0,2,2,0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "15") (term "1,0,2,2,0"))
                              (rule "replace_known_right" (formula "15") (term "1,0,2,2,0") (ifseqformula "13"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "applyEqRigid" (formula "15") (term "1,1") (ifseqformula "1"))
                              (rule "applyEqRigid" (formula "15") (term "1,2,2,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "15") (term "0,1,0,0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "15") (term "1,0,0"))
                              (rule "replace_known_right" (formula "15") (term "1,0,0") (ifseqformula "13"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "applyEq" (formula "15") (term "0,1,0,0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "15") (term "1,0,0"))
                              (rule "replace_known_right" (formula "15") (term "1,0,0") (ifseqformula "13"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "closeTrue" (formula "15"))
                           )
                           (branch "CUT: o_9 = null FALSE"
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "notRight" (formula "16"))
                              (rule "ifthenelse_split" (formula "17") (term "2,2,2,0"))
                              (branch "f_9 = <created> & o_9 = t_9 TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "replace_known_left" (formula "19") (term "1,0,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "2")) (ifInst ""  (formula "2")))
                                 (rule "applyEq" (formula "19") (term "1,1") (ifseqformula "2"))
                                 (rule "applyEq" (formula "17") (term "0") (ifseqformula "2"))
                                 (rule "eqSymm" (formula "17"))
                                 (rule "applyEq" (formula "18") (term "0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "18") (term "0,0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "2"))
                                 (rule "close" (formula "14") (ifseqformula "3"))
                              )
                              (branch "f_9 = <created> & o_9 = t_9 FALSE"
                                 (rule "ifthenelse_split" (formula "18") (term "2,0"))
                                 (branch "f_9 = message & o_9 = t_9 TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "replace_known_left" (formula "20") (term "1,0,0") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "eqSymm" (formula "20"))
                                    (rule "applyEq" (formula "19") (term "0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "false_right" (formula "19"))
                                    (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "2"))
                                    (rule "close" (formula "14") (ifseqformula "3"))
                                 )
                                 (branch "f_9 = message & o_9 = t_9 FALSE"
                                    (rule "ifthenelse_split" (formula "19") (term "0"))
                                    (branch "f_9 = <initialized> & o_9 = t_9 TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "eqSymm" (formula "21"))
                                       (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "2"))
                                       (rule "close" (formula "14") (ifseqformula "3"))
                                    )
                                    (branch "f_9 = <initialized> & o_9 = t_9 FALSE"
                                       (rule "ifthenelse_split" (formula "20") (term "0"))
                                       (branch "f_9 = cause & o_9 = t_9 TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "eqSymm" (formula "22"))
                                          (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "applyEq" (formula "22") (term "2,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "19") (term "0") (ifseqformula "1"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "false_right" (formula "19"))
                                          (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "2"))
                                          (rule "close" (formula "14") (ifseqformula "3"))
                                       )
                                       (branch "f_9 = cause & o_9 = t_9 FALSE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "closeTrue" (formula "21"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )
                  (branch "ClassCastException (!(t_6 instanceof java.lang.Exception))"
                     (builtin "One Step Simplification" (formula "14"))
                     (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "11")))
                     (rule "false_right" (formula "14"))
                     (rule "instanceof_static_type" (formula "13") (term "0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "closeTrue" (formula "13"))
                  )
               )
               (branch "if t_6 instanceof java.lang.Exception false"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
                  (rule "notLeft" (formula "1"))
                  (rule "blockThrow" (formula "14") (term "1"))
                  (rule "instanceof_static_type" (formula "10") (term "0"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "closeTrue" (formula "10"))
               )
            )
         )
         (branch "Null Reference (t_7 = null)"
            (builtin "One Step Simplification" (formula "14"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "s.p = s.a.length FALSE"
         (rule "methodCallReturn" (formula "8") (term "1"))
         (rule "assignment" (formula "8") (term "1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "methodCallEmpty" (formula "8") (term "1"))
         (rule "blockEmpty" (formula "8") (term "1"))
         (rule "assignment" (formula "8") (term "1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "if" (formula "8") (term "1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "variableDeclarationAssign" (formula "8") (term "1"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "h"))
         (rule "arrayLengthNotNegative" (formula "7") (term "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "0,1") (ifseqformula "2"))
         (rule "methodCallWithAssignment" (formula "10") (inst "#v0=x"))
         (branch "Normal Execution (_s != null)"
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_5"))
            (rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_head,savedHeapBefore_head"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "returnUnfold" (formula "10") (term "1") (inst "#v0=x_6"))
            (rule "variableDeclarationAssign" (formula "10") (term "1"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_6"))
            (rule "assignment_array2" (formula "10"))
            (branch "Normal Execution (a != null)"
               (builtin "One Step Simplification" (formula "10"))
               (rule "methodCallReturn" (formula "10") (term "1"))
               (rule "assignment" (formula "10") (term "1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "methodCallEmpty" (formula "10") (term "1"))
               (rule "blockEmpty" (formula "10") (term "1"))
               (rule "assignment" (formula "10") (term "1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_7"))
               (rule "less_than_comparison_new" (formula "10") (term "1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "assignment" (formula "10") (term "1,1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "assignment" (formula "10") (term "1,2"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,0"))
               (rule "ifthenelse_split_for" (formula "10"))
               (branch "s.a[s.p] <= -1 + d TRUE"
                  (rule "ifSplit" (formula "11"))
                  (branch "if x_7 true"
                     (builtin "One Step Simplification" (formula "12"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "blockThrow" (formula "11") (term "1"))
                     (rule "throwUnfold" (formula "11") (term "1") (inst "#v0=t"))
                     (rule "variableDeclarationAssign" (formula "11") (term "1"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "t_2"))
                     (rule "instanceCreationAssignment" (formula "11") (term "1") (inst "#v0=t_3"))
                     (rule "variableDeclarationAssign" (formula "11") (term "1"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "t_3"))
                     (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "11") (term "1") (inst "#v0=t_4"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "t_4"))
                     (rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "__NEW__"))
                     (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "11") (term "1") (inst "#v0=t_5"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "t_5"))
                     (rule "allocateInstance" (formula "11"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "andLeft" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "blockEmpty" (formula "14") (term "1"))
                     (rule "assignment" (formula "14") (term "1"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "assignment" (formula "14") (term "1"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "methodCallWithinClass" (formula "14") (term "1"))
                     (rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "methodCallSuper" (formula "14") (term "1"))
                     (rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "methodCallSuper" (formula "14") (term "1"))
                     (rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "methodCallSuper" (formula "14") (term "1"))
                     (rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "methodCallEmpty" (formula "14") (term "1"))
                     (rule "blockEmpty" (formula "14") (term "1"))
                     (rule "assignment" (formula "14") (term "1"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "assignment" (formula "14") (term "1"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "methodCallEmpty" (formula "14") (term "1"))
                     (rule "methodCallEmpty" (formula "14") (term "1"))
                     (rule "methodCallEmpty" (formula "14") (term "1"))
                     (rule "blockEmpty" (formula "14") (term "1"))
                     (rule "methodCallReturnIgnoreResult" (formula "14") (term "1"))
                     (rule "methodCallReturn" (formula "14") (term "1"))
                     (rule "assignment" (formula "14") (term "1"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "methodCallEmpty" (formula "14") (term "1"))
                     (rule "blockEmpty" (formula "14") (term "1"))
                     (rule "assignment" (formula "14") (term "1"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "methodCallSuper" (formula "14") (term "1"))
                     (rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "methodCallSuper" (formula "14") (term "1"))
                     (rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "methodCallSuper" (formula "14") (term "1"))
                     (rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "methodCallEmpty" (formula "14") (term "1"))
                     (rule "blockEmpty" (formula "14") (term "1"))
                     (rule "assignment" (formula "14") (term "1"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "assignment" (formula "14") (term "1"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "methodCallEmpty" (formula "14") (term "1"))
                     (rule "methodCallEmpty" (formula "14") (term "1"))
                     (rule "methodCallEmpty" (formula "14") (term "1"))
                     (rule "blockEmpty" (formula "14") (term "1"))
                     (rule "assignment_write_attribute" (formula "14"))
                     (branch "Normal Execution (t_3 != null)"
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "assignment" (formula "14") (term "1"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "methodCallParamThrow" (formula "14") (term "1"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "tryCatchThrow" (formula "14") (term "1"))
                        (rule "ifElseUnfold" (formula "14") (term "1") (inst "#boolv=x"))
                        (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_11"))
                        (rule "equality_comparison_new" (formula "14") (term "1"))
                        (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "11")))
                        (rule "assignment" (formula "14") (term "1"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "ifElseSplit" (formula "14"))
                        (branch "if x_11 true"
                           (builtin "One Step Simplification" (formula "15"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if x_11 false"
                           (builtin "One Step Simplification" (formula "1"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "true_left" (formula "1"))
                           (rule "ifElse" (formula "14") (term "1"))
                           (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "11")))
                           (rule "variableDeclaration" (formula "14") (term "1,1") (newnames "e_2"))
                           (rule "blockThrow" (formula "14") (term "1,2"))
                           (rule "instanceof_static_type" (formula "14") (term "0,0"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "reference_type_cast" (formula "14"))
                           (branch "Normal Execution (t_2 instanceof java.lang.Exception)"
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "assignment" (formula "14") (term "1"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "emptyModality" (formula "14") (term "1"))
                              (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "11")) (ifInst ""  (formula "11")))
                              (rule "eqSymm" (formula "14") (term "1,0,0,1"))
                              (rule "instanceof_static_type" (formula "14") (term "0,0"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "allRight" (formula "14") (inst "sk=f_8"))
                              (rule "allRight" (formula "14") (inst "sk=o_8"))
                              (rule "orRight" (formula "14"))
                              (rule "orRight" (formula "14"))
                              (rule "selectOfStore" (formula "16") (term "0"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "eqSymm" (formula "16") (term "1,0,0"))
                              (rule "eqSymm" (formula "16") (term "0,0,0"))
                              (rule "castDel" (formula "16") (term "1,0"))
                              (rule "selectOfStore" (formula "16") (term "2,0"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "eqSymm" (formula "16") (term "1,0,2,0"))
                              (rule "eqSymm" (formula "16") (term "0,0,2,0"))
                              (rule "castDel" (formula "16") (term "1,2,0"))
                              (rule "selectOfStore" (formula "16") (term "2,2,0"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "eqSymm" (formula "16") (term "1,0,2,2,0"))
                              (rule "eqSymm" (formula "16") (term "0,0,2,2,0"))
                              (rule "castDel" (formula "16") (term "1,2,2,0"))
                              (rule "selectOfCreate" (formula "16") (term "2,2,2,0"))
                              (rule "eqSymm" (formula "16") (term "0,0,0,2,2,2,0"))
                              (rule "replace_known_right" (formula "16") (term "0,1,0,0,2,2,2,0") (ifseqformula "11"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "castDel" (formula "16") (term "1,2,2,2,0"))
                              (rule "commute_and" (formula "16") (term "0,2,2,0"))
                              (rule "commute_and" (formula "16") (term "0,2,0"))
                              (rule "commute_and" (formula "16") (term "0,2,2,2,0"))
                              (rule "commute_and" (formula "16") (term "0,0"))
                              (rule "cut_direct" (formula "3") (term "0"))
                              (branch "CUT: s.a = null TRUE"
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "13") (term "0,1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "3"))
                                 (rule "cut_direct" (formula "15") (term "0,0"))
                                 (branch "CUT: o_8 = null TRUE"
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "false_right" (formula "16"))
                                    (rule "applyEq" (formula "16") (term "0,1,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "16") (term "1,0,0"))
                                    (rule "replace_known_right" (formula "16") (term "1,0,0") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "applyEqRigid" (formula "15") (term "0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "15") (term "0"))
                                    (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "false_right" (formula "15"))
                                    (rule "applyEq" (formula "15") (term "0,1,0,2,2,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "15") (term "1,0,2,2,0"))
                                    (rule "replace_known_right" (formula "15") (term "1,0,2,2,0") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "applyEqRigid" (formula "15") (term "1,2,2,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "15") (term "0,1,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "15") (term "1,0,0"))
                                    (rule "replace_known_right" (formula "15") (term "1,0,0") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "applyEq" (formula "15") (term "1,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "15") (term "0,1,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "15") (term "1,0,0"))
                                    (rule "replace_known_right" (formula "15") (term "1,0,0") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "closeTrue" (formula "15"))
                                 )
                                 (branch "CUT: o_8 = null FALSE"
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "notRight" (formula "16"))
                                    (rule "cut_direct" (formula "15") (term "0"))
                                    (branch "CUT: o_8 = s TRUE"
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "applyEq" (formula "18") (term "0,1,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "16") (term "0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "16") (term "1,1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "16") (term "0,1,0,2,2,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "16") (term "0,1,0,2,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "16") (term "1,2,2,2,2,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "16") (term "0,1,0,2,2,2,0") (ifseqformula "1"))
                                       (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,0"))
                                       (rule "replace_known_right" (formula "16") (term "0,1,0,0") (ifseqformula "13"))
                                       (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "12")))
                                       (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,2,0"))
                                       (rule "replace_known_right" (formula "16") (term "0,1,0,2,0") (ifseqformula "13"))
                                       (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "12")))
                                       (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,0"))
                                       (rule "replace_known_right" (formula "16") (term "1,1,0,0") (ifseqformula "12"))
                                       (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "13")))
                                       (rule "sortsDisjointModuloNull" (formula "16") (term "1,0,0"))
                                       (rule "replace_known_right" (formula "16") (term "0,1,0,0") (ifseqformula "13"))
                                       (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "12")))
                                       (rule "closeTrue" (formula "16"))
                                    )
                                    (branch "CUT: o_8 = s FALSE"
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "false_right" (formula "16"))
                                       (rule "ifthenelse_split" (formula "17") (term "2,0"))
                                       (branch "f_8 = message & o_8 = t_5 TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "replace_known_left" (formula "19") (term "1,0,0") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "applyEq" (formula "17") (term "0") (ifseqformula "2"))
                                          (rule "eqSymm" (formula "17"))
                                          (rule "applyEq" (formula "18") (term "0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "2"))
                                          (rule "close" (formula "13") (ifseqformula "3"))
                                       )
                                       (branch "f_8 = message & o_8 = t_5 FALSE"
                                          (rule "ifthenelse_split" (formula "18") (term "2,2,0"))
                                          (branch "f_8 = <created> & o_8 = t_5 TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "replace_known_left" (formula "20") (term "1,0,2,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "2")))
                                             (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "applyEq" (formula "20") (term "0,0,2,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "eqSymm" (formula "20"))
                                             (rule "applyEq" (formula "17") (term "0") (ifseqformula "2"))
                                             (rule "eqSymm" (formula "17"))
                                             (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "2"))
                                             (rule "close" (formula "13") (ifseqformula "3"))
                                          )
                                          (branch "f_8 = <created> & o_8 = t_5 FALSE"
                                             (rule "ifthenelse_split" (formula "19") (term "2,0"))
                                             (branch "f_8 = cause & o_8 = t_5 TRUE"
                                                (rule "andLeft" (formula "1"))
                                                (rule "replace_known_left" (formula "21") (term "1,0,0") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "21"))
                                                (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "19"))
                                                (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "20"))
                                                (rule "applyEq" (formula "21") (term "1,1") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "19"))
                                                (rule "false_right" (formula "19"))
                                                (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "20"))
                                                (rule "eqSymm" (formula "20"))
                                                (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "19"))
                                                (rule "false_right" (formula "19"))
                                                (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "2"))
                                                (rule "close" (formula "13") (ifseqformula "3"))
                                             )
                                             (branch "f_8 = cause & o_8 = t_5 FALSE"
                                                (rule "ifthenelse_split" (formula "20") (term "0"))
                                                (branch "f_8 = <initialized> & o_8 = t_5 TRUE"
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "eqSymm" (formula "22"))
                                                   (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "2"))
                                                   (builtin "One Step Simplification" (formula "19"))
                                                   (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "2"))
                                                   (builtin "One Step Simplification" (formula "21"))
                                                   (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "2"))
                                                   (builtin "One Step Simplification" (formula "20"))
                                                   (rule "applyEq" (formula "18") (term "0") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "2"))
                                                   (rule "close" (formula "13") (ifseqformula "3"))
                                                )
                                                (branch "f_8 = <initialized> & o_8 = t_5 FALSE"
                                                   (builtin "One Step Simplification" (formula "21"))
                                                   (rule "closeTrue" (formula "21"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch "CUT: s.a = null FALSE"
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "cut_direct" (formula "16") (term "0,0"))
                                 (branch "CUT: o_8 = null TRUE"
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "false_right" (formula "17"))
                                    (rule "applyEq" (formula "17") (term "1,2,2,2,2,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "17") (term "0,1,0,2,2,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "17") (term "1,0,2,2,0"))
                                    (rule "replace_known_right" (formula "17") (term "1,0,2,2,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "16") (term "0"))
                                    (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "false_right" (formula "16"))
                                    (rule "applyEq" (formula "16") (term "0,1,0,2,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "16") (term "1,0,2,0"))
                                    (rule "replace_known_right" (formula "16") (term "1,0,2,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "applyEqRigid" (formula "16") (term "0,1,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "16") (term "1,0,0"))
                                    (rule "replace_known_right" (formula "16") (term "1,0,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "applyEqRigid" (formula "16") (term "1,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "16") (term "0,1,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "16") (term "1,0,0"))
                                    (rule "replace_known_right" (formula "16") (term "1,0,0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "closeTrue" (formula "16"))
                                 )
                                 (branch "CUT: o_8 = null FALSE"
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "notRight" (formula "17"))
                                    (rule "cut_direct" (formula "16") (term "1"))
                                    (branch "CUT: f_8 = p TRUE"
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "applyEqRigid" (formula "19") (term "0,0,0,2,2,0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "applyEq" (formula "19") (term "2,2,2,2,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "19") (term "0,0,0,2,2,0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "applyEqRigid" (formula "19") (term "0,0,0,2,0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "applyEqRigid" (formula "19") (term "0,0,0,0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "eqSymm" (formula "19"))
                                       (rule "applyEqRigid" (formula "19") (term "2,0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "closeTrue" (formula "19"))
                                    )
                                    (branch "CUT: f_8 = p FALSE"
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "false_right" (formula "17"))
                                       (rule "ifthenelse_split" (formula "18") (term "2,2,0"))
                                       (branch "f_8 = cause & o_8 = t_5 TRUE"
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "replace_known_left" (formula "20") (term "1,0,0") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "applyEq" (formula "20") (term "2,1") (ifseqformula "1"))
                                          (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "2"))
                                          (rule "close" (formula "14") (ifseqformula "3"))
                                       )
                                       (branch "f_8 = cause & o_8 = t_5 FALSE"
                                          (rule "ifthenelse_split" (formula "19") (term "2,0"))
                                          (branch "f_8 = message & o_8 = t_5 TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "replace_known_left" (formula "21") (term "1,0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "applyEq" (formula "21") (term "1,1") (ifseqformula "2"))
                                             (rule "applyEqRigid" (formula "21") (term "0,0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "eqSymm" (formula "21"))
                                             (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "false_right" (formula "18"))
                                             (rule "applyEq" (formula "18") (term "0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "false_right" (formula "18"))
                                             (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "2"))
                                             (rule "close" (formula "14") (ifseqformula "3"))
                                          )
                                          (branch "f_8 = message & o_8 = t_5 FALSE"
                                             (rule "ifthenelse_split" (formula "20") (term "0"))
                                             (branch "f_8 = <initialized> & o_8 = t_5 TRUE"
                                                (rule "andLeft" (formula "1"))
                                                (rule "eqSymm" (formula "22"))
                                                (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "20"))
                                                (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "21"))
                                                (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "20"))
                                                (rule "false_right" (formula "20"))
                                                (rule "applyEq" (formula "21") (term "2,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "2"))
                                                (rule "close" (formula "14") (ifseqformula "3"))
                                             )
                                             (branch "f_8 = <initialized> & o_8 = t_5 FALSE"
                                                (rule "ifthenelse_split" (formula "21") (term "0"))
                                                (branch "f_8 = <created> & o_8 = t_5 TRUE"
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "eqSymm" (formula "23"))
                                                   (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "2"))
                                                   (builtin "One Step Simplification" (formula "20"))
                                                   (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "2"))
                                                   (builtin "One Step Simplification" (formula "21"))
                                                   (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "2"))
                                                   (builtin "One Step Simplification" (formula "22"))
                                                   (rule "applyEq" (formula "20") (term "0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "20"))
                                                   (rule "false_right" (formula "20"))
                                                   (rule "applyEq" (formula "20") (term "0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "20"))
                                                   (rule "false_right" (formula "20"))
                                                   (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "20"))
                                                   (rule "false_right" (formula "20"))
                                                   (rule "applyEq" (formula "19") (term "0") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "19") (term "2,0") (ifseqformula "1"))
                                                   (rule "castTrueImpliesOriginalTrue" (formula "19") (ifseqformula "3"))
                                                   (rule "closeTrue" (formula "19"))
                                                )
                                                (branch "f_8 = <created> & o_8 = t_5 FALSE"
                                                   (builtin "One Step Simplification" (formula "22"))
                                                   (rule "closeTrue" (formula "22"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "ClassCastException (!(t_2 instanceof java.lang.Exception))"
                              (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "11")))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "false_right" (formula "15"))
                              (rule "instanceof_static_type" (formula "14") (term "0"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "closeTrue" (formula "14"))
                           )
                        )
                     )
                     (branch "Null Reference (t_3 = null)"
                        (builtin "One Step Simplification" (formula "15"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "if x_7 false"
                     (builtin "One Step Simplification" (formula "12"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "s.a[s.p] <= -1 + d FALSE"
                  (rule "inEqSimp_leqRight" (formula "10"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1"))
                  (rule "ifSplit" (formula "11"))
                  (branch "if x_7 true"
                     (builtin "One Step Simplification" (formula "12"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if x_7 false"
                     (builtin "One Step Simplification" (formula "1"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "1"))
                     (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_8"))
                     (rule "equality_comparison_new" (formula "11") (term "1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "assignment" (formula "11") (term "1,2"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "assignment" (formula "11") (term "1,1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "ifthenelse_negated_for" (formula "11"))
                     (rule "ifthenelse_split_for" (formula "11"))
                     (branch "s.a[s.p] = d TRUE"
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "2"))
                        (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "1,0"))
                        (rule "times_zero_1" (formula "2") (term "0"))
                        (rule "leq_literals" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "ifSplit" (formula "11"))
                        (branch "if x_8 true"
                           (builtin "One Step Simplification" (formula "1"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "1"))
                           (builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_pop,result_4,exc_8,heapAfter_pop,anonHeap_pop") (contract "JML operation contract [id: 1 / List::pop]"))
                           (branch "Post (pop)"
                              (builtin "One Step Simplification" (formula "13"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "12"))
                              (rule "translateJavaAddInt" (formula "12") (term "1,0,1"))
                              (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "11"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "andLeft" (formula "12"))
                              (rule "polySimp_addComm0" (formula "12") (term "1"))
                              (rule "selectOfAnonEQ" (formula "12") (term "0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")) (ifInst ""  (formula "5")))
                              (rule "elementOfSingleton" (formula "12") (term "0,0"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "returnUnfold" (formula "16") (term "1") (inst "#v0=t"))
                              (rule "variableDeclarationAssign" (formula "16") (term "1"))
                              (rule "variableDeclaration" (formula "16") (term "1") (newnames "t_1"))
                              (builtin "Use Operation Contract" (formula "16") (newnames "heapBefore_Tree_0,self_5,exc_9,heapAfter_Tree_0,anonHeap_Tree_0") (contract "JML normal_behavior operation contract [id: 7 / Tree::Tree]"))
                              (branch "Post (Tree)"
                                 (builtin "One Step Simplification" (formula "18"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "selectCreatedOfAnonEQ" (formula "15") (term "0,0,1,0,0,1,0,1") (ifseqformula "10"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "selectCreatedOfAnonEQ" (formula "16") (term "0,1,0,1,0") (ifseqformula "15"))
                                 (rule "selectCreatedOfAnonEQ" (formula "16") (term "0,0,0,1,0,1,0") (ifseqformula "10"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "notLeft" (formula "17"))
                                 (rule "notLeft" (formula "16"))
                                 (rule "assignment" (formula "27") (term "1"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "blockReturn" (formula "27") (term "1"))
                                 (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "selectOfAnonEQ" (formula "20") (term "0") (ifseqformula "15"))
                                 (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "23")))
                                 (rule "selectCreatedOfAnonEQ" (formula "20") (term "0,0,0,0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "20") (term "0,0,0") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "selectOfAnonEQ" (formula "19") (term "0") (ifseqformula "15"))
                                 (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "23")))
                                 (rule "selectCreatedOfAnonEQ" (formula "19") (term "0,0,0,0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "selectOfAnonEQ" (formula "18") (term "0") (ifseqformula "15"))
                                 (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "23")))
                                 (rule "selectCreatedOfAnonEQ" (formula "18") (term "0,0,0,0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "Class_invariant_axiom_for_Tree" (formula "21") (inst "i=_var67") (inst "sk=sk_1") (ifseqformula "17"))
                                 (branch "Use Axiom"
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "eqSymm" (formula "23") (term "1"))
                                    (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                                    (rule "castedGetAny" (formula "22") (term "0,1,0"))
                                    (rule "eqSymm" (formula "22") (term "1,0"))
                                    (rule "selectOfAnonEQ" (formula "23") (term "0,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "26")))
                                    (rule "selectCreatedOfAnonEQ" (formula "23") (term "0,0,0,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "23") (term "0,0,0,0,0") (ifseqformula "27"))
                                    (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "18")))
                                    (rule "true_left" (formula "23"))
                                    (rule "selectOfAnonEQ" (formula "21") (term "0,1") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "25")))
                                    (rule "selectCreatedOfAnonEQ" (formula "21") (term "0,0,0,0,1") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "21") (term "0,0,0,1") (ifseqformula "26"))
                                    (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "19")))
                                    (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "21"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "applyEq" (formula "22") (term "0,1,1,1,0,0") (ifseqformula "23"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "add_literals" (formula "22") (term "1,1,0,0"))
                                    (rule "applyEq" (formula "22") (term "0,1,1,0") (ifseqformula "23"))
                                    (rule "applyEq" (formula "22") (term "0,0,1,0") (ifseqformula "23"))
                                    (rule "getOfSeqSingleton" (formula "22") (term "1,1,0"))
                                    (rule "castDelInt" (formula "22") (term "1,1,1,0"))
                                    (rule "eqSymm" (formula "22") (term "1,0"))
                                    (rule "getOfSeqSingleton" (formula "22") (term "1,1,0"))
                                    (rule "eqSymm" (formula "22") (term "1,0"))
                                    (rule "castDel" (formula "22") (term "1,0,1,0"))
                                    (rule "selectOfAnonEQ" (formula "23") (term "0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "25")))
                                    (rule "selectCreatedOfAnonEQ" (formula "23") (term "0,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "23") (term "0,0,0") (ifseqformula "26"))
                                    (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "20")))
                                    (rule "true_left" (formula "23"))
                                    (rule "selectOfAnonEQ" (formula "21") (term "0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "24")))
                                    (rule "selectCreatedOfAnonEQ" (formula "21") (term "0,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "21") (term "0,0,0") (ifseqformula "25"))
                                    (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "18")))
                                    (rule "true_left" (formula "21"))
                                    (rule "nnf_imp2or" (formula "21") (term "0"))
                                    (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,1,0,0"))
                                    (rule "inEqSimp_or_antiSymm0" (formula "21") (term "0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "add_literals" (formula "21") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "21") (term "0"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "castDelInt" (formula "21") (term "0,0,1,0"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "castDelInt" (formula "21") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "methodCallReturn" (formula "26") (term "1"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "assignment" (formula "26") (term "1"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "methodCallEmpty" (formula "26") (term "1"))
                                    (rule "tryEmpty" (formula "26") (term "1"))
                                    (rule "emptyModality" (formula "26") (term "1"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "22")))
                                    (rule "eqSymm" (formula "26") (term "1,0,0,1"))
                                    (rule "polySimp_addComm0" (formula "26") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "26") (term "1,0,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "26") (term "0,1,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0,0"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "0,1,1,1,0,1,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "22")))
                                    (rule "selectCreatedOfAnonEQ" (formula "26") (term "0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "26") (term "0,0,0,1,1,1,0,1,0,0") (ifseqformula "23"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "applyEq" (formula "26") (term "0,1,1,1,0,1,0,0") (ifseqformula "20"))
                                    (rule "getOfSeqSingleton" (formula "26") (term "1,1,1,0,1,0,0"))
                                    (rule "castDelInt" (formula "26") (term "1,1,1,1,0,1,0,0"))
                                    (rule "polySimp_homoEq" (formula "26") (term "1,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "26") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "26") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "0,1,1,0,1,0,0"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "0,1,1,0,0,1,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "22")))
                                    (rule "selectCreatedOfAnonEQ" (formula "26") (term "0,0,0,0,1,1,0,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "26") (term "0,0,0,1,1,0,0,1,0,0") (ifseqformula "23"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "applyEq" (formula "26") (term "0,1,1,0,0,1,0,0") (ifseqformula "20"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "0,1,0,0,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")))
                                    (rule "selectCreatedOfAnonEQ" (formula "26") (term "0,0,0,0,1,0,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "26") (term "0,0,0,0,0,1,0,0,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "1,1,1,0,1,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "selectCreatedOfAnonEQ" (formula "26") (term "0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "0,0,1,0,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "22")))
                                    (rule "selectCreatedOfAnonEQ" (formula "26") (term "0,0,0,0,0,1,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "26") (term "0,0,0,0,1,0,0,0") (ifseqformula "23"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "applyEq" (formula "26") (term "0,0,1,0,0,0") (ifseqformula "20"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "polySimp_homoEq" (formula "26") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "26") (term "1,0,1,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "26") (term "0,1,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "26") (term "0,0,1,0,0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "26") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "1,2,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")))
                                    (rule "selectCreatedOfAnonEQ" (formula "26") (term "0,0,0,1,2,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "26") (term "0,0,0,0,1,2,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "0,1,0,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")))
                                    (rule "selectCreatedOfAnonEQ" (formula "26") (term "0,0,0,0,1,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "26") (term "0,0,0,0,0,1,0,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")))
                                    (rule "selectCreatedOfAnonEQ" (formula "26") (term "0,0,0,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "26") (term "0,0,0,0,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "0,1,0,0,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")) (ifInst ""  (formula "5")))
                                    (rule "applyEq" (formula "26") (term "1,0,1,0,0,0,0") (ifseqformula "12"))
                                    (rule "elementOfSingleton" (formula "26") (term "0,0,1,0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_homoInEq1" (formula "26") (term "1,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "26") (term "0,1,0,0,0,0"))
                                    (rule "add_literals" (formula "26") (term "1,0,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "26") (term "0,1,0,0,0,0"))
                                    (rule "leq_literals" (formula "26") (term "1,0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "1,0,0,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")))
                                    (rule "selectCreatedOfAnonEQ" (formula "26") (term "0,0,0,1,0,0,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "26") (term "0,0,0,0,1,0,0,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "1,2,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "26") (term "0,1,2,0,0,1,0,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "1,2,1,1,1,0,1,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")))
                                    (rule "selectCreatedOfAnonEQ" (formula "26") (term "0,0,0,1,2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "26") (term "0,0,0,0,1,2,1,1,1,0,1,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "0,1,0,0,1") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "selectCreatedOfAnonEQ" (formula "26") (term "0,0,1,0,0,1,0,0,1") (ifseqformula "10"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "26") (term "0,0,0,0,0,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "polySimp_homoEq" (formula "26") (term "1,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "26") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "26") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,1,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "26") (term "0,1,1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "0,0,1,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "0,1,1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "0,1,1,0,1,0,0"))
                                    (rule "elementOfSingleton" (formula "26") (term "0,0,2,0,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "polySimp_homoEq" (formula "26") (term "1,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "26") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "26") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "0,1,1,0,1,0,0"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "1,1,1,1,1,0,1,0,0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")))
                                    (rule "selectCreatedOfAnonEQ" (formula "26") (term "0,0,0,1,1,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "26") (term "0,0,0,0,1,1,1,1,1,0,1,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "1,0,0,1,0,2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "26") (term "0,1,0,0,1,0,2,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "0,1,0,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")) (ifInst ""  (formula "5")))
                                    (rule "applyEq" (formula "26") (term "1,0,1,0,0,0") (ifseqformula "12"))
                                    (rule "elementOfSingleton" (formula "26") (term "0,0,1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "1,2,2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "26") (term "0,1,2,2,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "2,0,1,0,0,1") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "elementOfSingleton" (formula "26") (term "0,0,0,2,0,1,0,0,1"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "1,1,2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "26") (term "0,1,1,2,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "1,1,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "26") (term "0,1,1,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "0,0,0,0,2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "26") (term "0,0,0,0,0,2,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "selectOfAnonEQ" (formula "26") (term "1,0,0,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "26") (term "0,1,0,0,0,0,1,0,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_or_antiSymm0" (formula "26") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "26") (term "0,0,0,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "add_literals" (formula "26") (term "1,0,0,0,1,0,0"))
                                    (rule "ifthenelse_split" (formula "23") (term "0"))
                                    (branch "self_5.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "closeTrue" (formula "24"))
                                    )
                                    (branch "self_5.<created> = TRUE FALSE"
                                       (rule "replace_known_right" (formula "27") (term "0,1,0") (ifseqformula "23"))
                                       (builtin "One Step Simplification" (formula "27"))
                                       (rule "cut_direct" (formula "2") (term "0"))
                                       (branch "CUT: s.a = null TRUE"
                                          (builtin "One Step Simplification" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "replace_known_left" (formula "27") (term "0,0,0,2,1,1,1,0,1,0") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "2")))
                                          (rule "applyEq" (formula "26") (term "0,1") (ifseqformula "2"))
                                          (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "27") (term "1,1,1,1,0,1,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                                          (rule "equalityToSeqGetAndSeqLenLeft" (formula "20") (inst "iv=_var73"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "andLeft" (formula "20"))
                                          (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                          (rule "applyEq" (formula "21") (term "0,0,1,0,0,1,0,0") (ifseqformula "22"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "mul_literals" (formula "21") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "21") (term "0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "21") (term "0,1,0,0"))
                                          (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "22"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "true_left" (formula "20"))
                                          (rule "applyEq" (formula "20") (term "0,0,1,0") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "true_left" (formula "20"))
                                          (rule "cut_direct" (formula "27") (term "0,0"))
                                          (branch "CUT: java.lang.Object::<inv>(heapAfter_Tree_0, s) TRUE"
                                             (builtin "One Step Simplification" (formula "28"))
                                             (rule "andRight" (formula "28"))
                                             (branch
                                                (rule "allRight" (formula "28") (inst "sk=i_5"))
                                                (rule "orRight" (formula "28"))
                                                (rule "notRight" (formula "28"))
                                                (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "polySimp_homoEq" (formula "29"))
                                                (rule "times_zero_2" (formula "29") (term "1,0"))
                                                (rule "add_zero_right" (formula "29") (term "0"))
                                                (rule "polySimp_addComm0" (formula "29") (term "0,2,1,0"))
                                                (rule "applyEq" (formula "29") (term "0,0,2,1,0") (ifseqformula "1"))
                                                (rule "add_zero_left" (formula "29") (term "0,2,1,0"))
                                                (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "3"))
                                                (rule "polySimp_pullOutFactor2" (formula "29") (term "0"))
                                                (rule "add_literals" (formula "29") (term "1,0"))
                                                (rule "times_zero_1" (formula "29") (term "0"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "closeTrue" (formula "29"))
                                             )
                                             (branch
                                                (rule "allRight" (formula "28") (inst "sk=f_7"))
                                                (rule "allRight" (formula "28") (inst "sk=o_7"))
                                                (rule "orRight" (formula "28"))
                                                (rule "orRight" (formula "28"))
                                                (rule "replace_known_right" (formula "30") (term "1,0,2,0") (ifseqformula "29"))
                                                (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "28")))
                                                (rule "ifthenelse_split" (formula "30") (term "0,0,1,0,0"))
                                                (branch "o_7.<created> = TRUE TRUE"
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "closeTrue" (formula "31"))
                                                )
                                                (branch "o_7.<created> = TRUE FALSE"
                                                   (rule "replace_known_right" (formula "29") (term "0,1") (ifseqformula "30"))
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "notRight" (formula "29"))
                                                   (rule "replace_known_left" (formula "31") (term "0,0,0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "closeTrue" (formula "31"))
                                                )
                                             )
                                          )
                                          (branch "CUT: java.lang.Object::<inv>(heapAfter_Tree_0, s) FALSE"
                                             (builtin "One Step Simplification" (formula "28"))
                                             (rule "false_right" (formula "28"))
                                             (rule "arrayLengthNotNegative" (formula "26") (term "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "14"))
                                             (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "20"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "true_left" (formula "19"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0") (ifseqformula "14"))
                                             (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "19"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "true_left" (formula "18"))
                                             (builtin "Use Dependency Contract" (formula "13") (ifInst ""  (formula "7")) (ifInst ""  (formula "10")) (contract "JML accessible clause [id: 0 / java.lang.Object::<inv> for List]"))
                                             (branch "Dependencies unchanged by write to {(s, p)}
"
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "notLeft" (formula "24"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "13"))
                                                (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "7")))
                                                (rule "true_left" (formula "22"))
                                                (rule "applyEq" (formula "23") (term "0,1,1") (ifseqformula "2"))
                                                (rule "disjointToElementOf" (formula "23") (inst "ov=_var77") (inst "fv=_var76"))
                                                (rule "elementOfSingleton" (formula "23") (term "0,0,0,0"))
                                                (rule "elementOfUnion" (formula "23") (term "0,1,0,0"))
                                                (builtin "One Step Simplification" (formula "23"))
                                                (rule "nnf_notOr" (formula "23") (term "1,0,0"))
                                                (rule "nnf_notAnd" (formula "23") (term "0,0,0"))
                                                (rule "commute_and" (formula "23") (term "1,0,0"))
                                                (rule "cnf_rightDist" (formula "23") (term "0,0"))
                                                (rule "distr_forallAnd" (formula "23") (term "0"))
                                                (rule "distr_forallAnd" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "commute_or_2" (formula "23") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "23"))
                                                (rule "instanceof_static_type" (formula "23") (term "0,0,1,0"))
                                                (builtin "One Step Simplification" (formula "23"))
                                                (rule "typeEqDerived2" (formula "23") (term "0,0,1") (ifseqformula "2"))
                                                (builtin "One Step Simplification" (formula "23"))
                                                (rule "notLeft" (formula "23"))
                                                (rule "castDel" (formula "24") (term "0"))
                                                (rule "eqSymm" (formula "24"))
                                                (rule "shift_paren_or" (formula "23") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "23"))
                                                (rule "instanceof_static_type" (formula "23") (term "0,0,1,0"))
                                                (builtin "One Step Simplification" (formula "23"))
                                                (rule "notLeft" (formula "23"))
                                                (rule "instanceof_static_type" (formula "23") (term "0"))
                                                (builtin "One Step Simplification" (formula "23"))
                                                (rule "closeTrue" (formula "23"))
                                             )
                                             (branch "Dependencies changed by write to {(s, p)}
"
                                                (rule "replace_known_left" (formula "22") (term "1,0") (ifseqformula "7"))
                                                (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "4")) (ifInst ""  (formula "26")) (ifInst ""  (formula "5")))
                                                (rule "applyEq" (formula "22") (term "0,1,1,1") (ifseqformula "2"))
                                                (rule "disjointToElementOf" (formula "22") (term "1") (inst "ov=_var75") (inst "fv=_var74"))
                                                (rule "elementOfSingleton" (formula "22") (term "0,0,0,0,1"))
                                                (rule "elementOfUnion" (formula "22") (term "0,1,0,0,1"))
                                                (builtin "One Step Simplification" (formula "22"))
                                                (rule "nnf_notOr" (formula "22") (term "1,0,0,1"))
                                                (rule "nnf_notAnd" (formula "22") (term "0,0,0,1"))
                                                (rule "cut_direct" (formula "22") (term "0"))
                                                (branch "CUT: wellFormed(heapAfter_pop) TRUE"
                                                   (builtin "One Step Simplification" (formula "23"))
                                                   (rule "allRight" (formula "23") (inst "sk=_var75_0"))
                                                   (rule "allRight" (formula "23") (inst "sk=_var74_0"))
                                                   (rule "orRight" (formula "23"))
                                                   (rule "orRight" (formula "23"))
                                                   (rule "notRight" (formula "23"))
                                                   (rule "notRight" (formula "24"))
                                                   (rule "replace_known_left" (formula "25") (term "0,0") (ifseqformula "2"))
                                                   (builtin "One Step Simplification" (formula "25"))
                                                   (rule "false_right" (formula "25"))
                                                   (builtin "Use Dependency Contract" (formula "30") (ifInst ""  (formula "18") (term "0")) (ifInst ""  (formula "18")) (contract "JML accessible clause [id: 0 / java.lang.Object::<inv> for List]"))
                                                   (branch "Dependencies unchanged by write to {}
"
                                                      (rule "selectCreatedOfAnonEQ" (formula "26") (term "0,1,0") (ifseqformula "13"))
                                                      (rule "andLeft" (formula "26"))
                                                      (rule "andLeft" (formula "26"))
                                                      (rule "andLeft" (formula "26"))
                                                      (rule "andLeft" (formula "26"))
                                                      (rule "notLeft" (formula "27"))
                                                      (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "8"))
                                                      (builtin "One Step Simplification" (formula "27"))
                                                      (rule "true_left" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "16"))
                                                      (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "32")))
                                                      (rule "closeFalse" (formula "25"))
                                                   )
                                                   (branch "Dependencies changed by write to {}
"
                                                      (rule "selectCreatedOfAnonEQ" (formula "25") (term "0,1,0") (ifseqformula "13"))
                                                      (rule "replace_known_right" (formula "25") (term "0,1,0,0") (ifseqformula "29"))
                                                      (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "3")) (ifInst ""  (formula "8")) (ifInst ""  (formula "16")))
                                                      (rule "wellFormedAnonEQ" (formula "25") (ifseqformula "18"))
                                                      (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "17")))
                                                      (rule "closeTrue" (formula "25"))
                                                   )
                                                )
                                                (branch "CUT: wellFormed(heapAfter_pop) FALSE"
                                                   (builtin "One Step Simplification" (formula "23"))
                                                   (rule "false_right" (formula "23"))
                                                   (rule "wellFormedAnonEQ" (formula "22") (ifseqformula "10"))
                                                   (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "9")))
                                                   (rule "closeTrue" (formula "22"))
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: s.a = null FALSE"
                                          (builtin "One Step Simplification" (formula "2"))
                                          (rule "replace_known_right" (formula "28") (term "0,0,0,1,1,1,0,1,0") (ifseqformula "22"))
                                          (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "2")) (ifInst ""  (formula "22")) (ifInst ""  (formula "2")))
                                          (rule "equalityToSeqGetAndSeqLenLeft" (formula "20") (inst "iv=_var68"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "andLeft" (formula "20"))
                                          (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                          (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "22"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "true_left" (formula "20"))
                                          (rule "applyEq" (formula "20") (term "0,0,1,0") (ifseqformula "21"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "true_left" (formula "20"))
                                          (rule "cut_direct" (formula "28") (term "0,0"))
                                          (branch "CUT: java.lang.Object::<inv>(heapAfter_Tree_0, s) TRUE"
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "andRight" (formula "29"))
                                             (branch
                                                (rule "allRight" (formula "29") (inst "sk=i_4"))
                                                (rule "orRight" (formula "29"))
                                                (rule "notRight" (formula "29"))
                                                (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "30"))
                                                (rule "polySimp_homoEq" (formula "30"))
                                                (rule "mul_literals" (formula "30") (term "1,0"))
                                                (rule "add_zero_right" (formula "30") (term "0"))
                                                (rule "polySimp_addComm0" (formula "30") (term "0,2,1,0"))
                                                (rule "applyEq" (formula "30") (term "0,0,2,1,0") (ifseqformula "1"))
                                                (rule "add_zero_left" (formula "30") (term "0,2,1,0"))
                                                (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "3"))
                                                (rule "polySimp_pullOutFactor2" (formula "30") (term "0"))
                                                (rule "add_literals" (formula "30") (term "1,0"))
                                                (rule "times_zero_1" (formula "30") (term "0"))
                                                (builtin "One Step Simplification" (formula "30"))
                                                (rule "closeTrue" (formula "30"))
                                             )
                                             (branch
                                                (rule "allRight" (formula "29") (inst "sk=f_6"))
                                                (rule "allRight" (formula "29") (inst "sk=o_6"))
                                                (rule "orRight" (formula "29"))
                                                (rule "orRight" (formula "29"))
                                                (rule "replace_known_right" (formula "31") (term "0,0,0,2,0") (ifseqformula "29"))
                                                (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "30")))
                                                (rule "ifthenelse_split" (formula "31") (term "0,0,1,0,0"))
                                                (branch "o_6.<created> = TRUE TRUE"
                                                   (builtin "One Step Simplification" (formula "32"))
                                                   (rule "closeTrue" (formula "32"))
                                                )
                                                (branch "o_6.<created> = TRUE FALSE"
                                                   (rule "replace_known_right" (formula "30") (term "0,1") (ifseqformula "31"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "notRight" (formula "30"))
                                                   (rule "replace_known_left" (formula "32") (term "0,0,0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "32"))
                                                   (rule "closeTrue" (formula "32"))
                                                )
                                             )
                                          )
                                          (branch "CUT: java.lang.Object::<inv>(heapAfter_Tree_0, s) FALSE"
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "false_right" (formula "29"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "14"))
                                             (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "20"))
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "true_left" (formula "19"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0") (ifseqformula "14"))
                                             (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "19"))
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "true_left" (formula "18"))
                                             (builtin "Use Dependency Contract" (formula "13") (ifInst ""  (formula "7")) (ifInst ""  (formula "10")) (contract "JML accessible clause [id: 0 / java.lang.Object::<inv> for List]"))
                                             (branch "Dependencies unchanged by write to {(s, p)}
"
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "notLeft" (formula "24"))
                                                (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "13"))
                                                (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "7")))
                                                (rule "true_left" (formula "22"))
                                                (rule "disjointToElementOf" (formula "23") (inst "ov=_var72") (inst "fv=_var71"))
                                                (rule "elementOfSingleton" (formula "23") (term "0,0,0,0"))
                                                (rule "elementOfUnion" (formula "23") (term "0,1,0,0"))
                                                (builtin "One Step Simplification" (formula "23"))
                                                (rule "nnf_notAnd" (formula "23") (term "0,0,0"))
                                                (rule "nnf_notOr" (formula "23") (term "1,0,0"))
                                                (rule "cnf_rightDist" (formula "23") (term "0,0"))
                                                (rule "distr_forallAnd" (formula "23") (term "0"))
                                                (rule "distr_forallAnd" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "commute_or_2" (formula "23") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "23"))
                                                (rule "instanceof_static_type" (formula "23") (term "0,0,1,0"))
                                                (builtin "One Step Simplification" (formula "23"))
                                                (rule "notLeft" (formula "23"))
                                                (rule "instanceof_static_type" (formula "24") (term "0"))
                                                (builtin "One Step Simplification" (formula "24"))
                                                (rule "closeTrue" (formula "24"))
                                             )
                                             (branch "Dependencies changed by write to {(s, p)}
"
                                                (rule "replace_known_left" (formula "22") (term "1,0") (ifseqformula "7"))
                                                (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "4")) (ifInst ""  (formula "27")) (ifInst ""  (formula "5")))
                                                (rule "disjointToElementOf" (formula "22") (term "1") (inst "ov=_var70") (inst "fv=_var69"))
                                                (rule "elementOfSingleton" (formula "22") (term "0,0,0,0,1"))
                                                (rule "elementOfUnion" (formula "22") (term "0,1,0,0,1"))
                                                (builtin "One Step Simplification" (formula "22"))
                                                (rule "nnf_notAnd" (formula "22") (term "0,0,0,1"))
                                                (rule "nnf_notOr" (formula "22") (term "1,0,0,1"))
                                                (rule "cut_direct" (formula "22") (term "0"))
                                                (branch "CUT: wellFormed(heapAfter_pop) TRUE"
                                                   (builtin "One Step Simplification" (formula "23"))
                                                   (rule "allRight" (formula "23") (inst "sk=_var70_0"))
                                                   (rule "allRight" (formula "23") (inst "sk=_var69_0"))
                                                   (rule "orRight" (formula "23"))
                                                   (rule "orRight" (formula "23"))
                                                   (rule "notRight" (formula "23"))
                                                   (rule "notRight" (formula "24"))
                                                   (rule "replace_known_left" (formula "25") (term "0,0") (ifseqformula "2"))
                                                   (builtin "One Step Simplification" (formula "25"))
                                                   (rule "false_right" (formula "25"))
                                                   (builtin "Use Dependency Contract" (formula "31") (ifInst ""  (formula "18") (term "0")) (ifInst ""  (formula "18")) (contract "JML accessible clause [id: 0 / java.lang.Object::<inv> for List]"))
                                                   (branch "Dependencies unchanged by write to {}
"
                                                      (rule "selectCreatedOfAnonEQ" (formula "26") (term "0,1,0") (ifseqformula "13"))
                                                      (rule "andLeft" (formula "26"))
                                                      (rule "andLeft" (formula "26"))
                                                      (rule "andLeft" (formula "26"))
                                                      (rule "andLeft" (formula "26"))
                                                      (rule "notLeft" (formula "27"))
                                                      (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "8"))
                                                      (builtin "One Step Simplification" (formula "27"))
                                                      (rule "true_left" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "16"))
                                                      (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "33")))
                                                      (rule "closeFalse" (formula "25"))
                                                   )
                                                   (branch "Dependencies changed by write to {}
"
                                                      (rule "selectCreatedOfAnonEQ" (formula "25") (term "0,1,0") (ifseqformula "13"))
                                                      (rule "replace_known_left" (formula "25") (term "0,0,0,0") (ifseqformula "3"))
                                                      (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")) (ifInst ""  (formula "8")) (ifInst ""  (formula "16")))
                                                      (rule "wellFormedAnonEQ" (formula "25") (ifseqformula "18"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "17"))
                                                      (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "3")))
                                                      (rule "closeTrue" (formula "25"))
                                                   )
                                                )
                                                (branch "CUT: wellFormed(heapAfter_pop) FALSE"
                                                   (builtin "One Step Simplification" (formula "23"))
                                                   (rule "false_right" (formula "23"))
                                                   (rule "wellFormedAnonEQ" (formula "22") (ifseqformula "10"))
                                                   (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "4"))
                                                   (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "9")))
                                                   (rule "closeTrue" (formula "22"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch "Show Axiom Satisfiability"
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "closeTrue" (formula "23"))
                                 )
                              )
                              (branch "Exceptional Post (Tree)"
                                 (builtin "One Step Simplification" (formula "15"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "selectCreatedOfAnonEQ" (formula "15") (term "0,0,1,0,0,1,0,1") (ifseqformula "10"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "selectCreatedOfAnonEQ" (formula "16") (term "0,1,0,1,0") (ifseqformula "15"))
                                 (rule "selectCreatedOfAnonEQ" (formula "16") (term "0,1,0,0") (ifseqformula "15"))
                                 (rule "selectCreatedOfAnonEQ" (formula "16") (term "0,0,0,1,0,1,0") (ifseqformula "10"))
                                 (rule "selectCreatedOfAnonEQ" (formula "16") (term "0,0,0,1,0,0") (ifseqformula "10"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "20"))
                                 (rule "notLeft" (formula "16"))
                                 (rule "close" (formula "23") (ifseqformula "22"))
                              )
                              (branch "Pre (Tree)"
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "wellFormedAnonEQ" (formula "16") (ifseqformula "10"))
                                 (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "9")))
                                 (rule "closeTrue" (formula "16"))
                              )
                           )
                           (branch "Exceptional Post (pop)"
                              (builtin "One Step Simplification" (formula "13"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "selectCreatedOfAnonEQ" (formula "11") (term "0,1,0") (ifseqformula "10"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "11"))
                              (rule "notLeft" (formula "11"))
                              (rule "close" (formula "14") (ifseqformula "13"))
                           )
                           (branch "Pre (pop)"
                              (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "4")) (ifInst ""  (formula "7")))
                              (rule "inEqSimp_ltRight" (formula "11"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "11"))
                              (rule "inEqSimp_contradEq7" (formula "11") (ifseqformula "1"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
                              (rule "add_literals" (formula "11") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "11") (term "1,0,0"))
                              (rule "add_zero_right" (formula "11") (term "0,0"))
                              (rule "leq_literals" (formula "11") (term "0"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "false_right" (formula "11"))
                              (rule "cut_direct" (formula "3") (term "0"))
                              (branch "CUT: s.a = null TRUE"
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "1") (term "0,1,1") (ifseqformula "3"))
                                 (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                 (rule "Partial_inv_axiom_for_JML_class_invariant_nr_7_in_List" (formula "8") (inst "i=_var66"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                                 (rule "applyEq" (formula "8") (term "0,0,1,0,0,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "8") (term "1,0,1,0") (ifseqformula "3"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "8") (term "0"))
                                 (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                                 (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_List" (formula "9"))
                                 (rule "notLeft" (formula "9"))
                                 (rule "close" (formula "11") (ifseqformula "3"))
                              )
                              (branch "CUT: s.a = null FALSE"
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "Partial_inv_axiom_for_JML_class_invariant_nr_7_in_List" (formula "8") (inst "i=_var64"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "8") (term "0"))
                                 (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                                 (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_List" (formula "9"))
                                 (rule "notLeft" (formula "9"))
                                 (rule "Partial_inv_axiom_for_JML_class_invariant_nr_5_in_List" (formula "9") (inst "i=_var65"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0"))
                                 (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "7"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "9") (term "0"))
                                 (rule "nnf_notAnd" (formula "9") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                                 (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                 (rule "Partial_inv_axiom_for_JML_class_invariant_nr_1_in_List" (formula "10"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "inEqSimp_commuteLeq" (formula "10"))
                                 (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "1"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "inEqSimp_homoInEq1" (formula "11"))
                                 (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                 (rule "add_literals" (formula "11") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0"))
                                 (rule "add_zero_right" (formula "11") (term "0"))
                                 (rule "leq_literals" (formula "11"))
                                 (rule "closeFalse" (formula "11"))
                              )
                           )
                           (branch "Null reference (_s = null)"
                              (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "9")))
                              (rule "closeTrue" (formula "11"))
                           )
                        )
                        (branch "if x_8 false"
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "s.a[s.p] = d FALSE"
                        (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "11"))
                        (rule "inEqSimp_contradEq7" (formula "11") (ifseqformula "1"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0"))
                        (rule "leq_literals" (formula "11") (term "0"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "false_right" (formula "11"))
                        (rule "if" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "variableDeclarationAssign" (formula "11") (term "1"))
                        (rule "variableDeclaration" (formula "11") (term "1") (newnames "l_1"))
                        (rule "methodCallWithAssignmentUnfoldArguments" (formula "11") (term "1"))
                        (rule "variableDeclarationAssign" (formula "11") (term "1"))
                        (rule "variableDeclaration" (formula "11") (term "1") (newnames "var"))
                        (rule "assignmentAdditionInt" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "variableDeclarationAssign" (formula "11") (term "1"))
                        (rule "variableDeclaration" (formula "11") (term "1") (newnames "var_1"))
                        (rule "assignment" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "translateJavaAddInt" (formula "11") (term "0,1,0,0"))
                        (rule "polySimp_addComm0" (formula "11") (term "0,1,0,0"))
                        (builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_build_0,result_2,exc_5,heapAfter_build,anonHeap_build") (contract "JML behavior operation contract [id: 3 / Tree::build]"))
                        (branch "Post (build)"
                           (builtin "One Step Simplification" (formula "13"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "selectCreatedOfAnonEQ" (formula "11") (term "0,0,1,0") (ifseqformula "10"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "11"))
                           (rule "typeEqDerived" (formula "13") (term "0,1,1") (ifseqformula "11"))
                           (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "11")) (ifInst ""  (formula "11")))
                           (rule "andLeft" (formula "13"))
                           (rule "notLeft" (formula "14"))
                           (rule "andLeft" (formula "13"))
                           (rule "notLeft" (formula "14"))
                           (rule "andLeft" (formula "13"))
                           (rule "andLeft" (formula "13"))
                           (rule "andLeft" (formula "13"))
                           (rule "assignment" (formula "21") (term "1"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "blockEmpty" (formula "21") (term "1"))
                           (rule "variableDeclarationAssign" (formula "21") (term "1"))
                           (rule "variableDeclaration" (formula "21") (term "1") (newnames "r_1"))
                           (rule "translateJavaAddInt" (formula "16") (term "0,2,1,1,0"))
                           (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
                           (rule "translateJavaSubInt" (formula "15") (term "1"))
                           (rule "replace_known_right" (formula "12") (term "0,0,0") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "18")))
                           (rule "polySimp_homoEq" (formula "16") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_gtToGeq" (formula "14"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "1"))
                           (rule "polySimp_addComm0" (formula "16") (term "1,1,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "0,1,0,1,0"))
                           (rule "mul_literals" (formula "16") (term "0,0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1,0"))
                           (rule "polySimp_addComm0" (formula "16") (term "0,0,1,0"))
                           (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                           (rule "polySimp_sepNegMonomial" (formula "16") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1"))
                           (rule "polySimp_rightDist" (formula "14") (term "1"))
                           (rule "mul_literals" (formula "14") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "0,1,1,0,0"))
                           (rule "mul_literals" (formula "16") (term "0,0,1,1,0,0"))
                           (rule "castedGetAny" (formula "16") (term "0,1,0"))
                           (rule "polySimp_homoEq" (formula "16") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "16") (term "0,1,0"))
                           (rule "polySimp_sepPosMonomial" (formula "16") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,1,0"))
                           (rule "mul_literals" (formula "16") (term "0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,0,1,1,0"))
                           (rule "selectOfAnonEQ" (formula "15") (term "1,1") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "19")) (ifInst ""  (formula "5")))
                           (rule "polySimp_homoEq" (formula "15"))
                           (rule "polySimp_addComm1" (formula "15") (term "0"))
                           (rule "polySimp_sepPosMonomial" (formula "15"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1"))
                           (rule "polySimp_rightDist" (formula "15") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                           (rule "polySimp_mulAssoc" (formula "15") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "15") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,1"))
                           (rule "elementOfSingleton" (formula "15") (term "0,0"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "polySimp_homoEq" (formula "15"))
                           (rule "polySimp_addComm1" (formula "15") (term "0"))
                           (rule "polySimp_sepPosMonomial" (formula "15"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1"))
                           (rule "polySimp_rightDist" (formula "15") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "15") (term "0,1"))
                           (rule "selectOfAnonEQ" (formula "16") (term "1,1,1,0,0") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "19")) (ifInst ""  (formula "5")))
                           (rule "elementOfSingleton" (formula "16") (term "0,1,1,1,0,0"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "selectOfAnonEQ" (formula "14") (term "0") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "19")) (ifInst ""  (formula "5")))
                           (rule "elementOfSingleton" (formula "14") (term "0,0"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "selectOfAnonEQ" (formula "15") (term "0,0") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "18")) (ifInst ""  (formula "17")))
                           (rule "selectOfAnonEQ" (formula "16") (term "0,1,0") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "elementOfSingleton" (formula "16") (term "0,0,0,1,0"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "selectOfAnonEQ" (formula "16") (term "0,0,0,0,0,1,0") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "19")) (ifInst ""  (formula "5")))
                           (rule "elementOfSingleton" (formula "16") (term "0,0,0,0,0,0,1,0"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "selectOfAnonEQ" (formula "16") (term "1,2,0,1,0") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "19")) (ifInst ""  (formula "5")))
                           (rule "elementOfSingleton" (formula "16") (term "0,1,2,0,1,0"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "selectOfAnonEQ" (formula "16") (term "1,0,0,1,0,0,1,0") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "19")) (ifInst ""  (formula "5")))
                           (rule "elementOfSingleton" (formula "16") (term "0,1,0,0,1,0,0,1,0"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "selectOfAnonEQ" (formula "16") (term "1,1,0,1,0") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "19")) (ifInst ""  (formula "5")))
                           (rule "elementOfSingleton" (formula "16") (term "0,1,1,0,1,0"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "selectOfAnonEQ" (formula "16") (term "0,1,1,1,0") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "18")) (ifInst ""  (formula "17")))
                           (rule "nnf_imp2or" (formula "16") (term "0"))
                           (rule "nnf_notAnd" (formula "16") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "0,1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "16") (term "0,0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "16") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "0,1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                           (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                           (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                           (rule "ifthenelse_to_or_left" (formula "16") (term "1,0"))
                           (rule "nnf_notAnd" (formula "16") (term "0,0,1,0"))
                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "2")))
                           (rule "commute_or" (formula "16") (term "1,0"))
                           (rule "cnf_rightDist" (formula "16") (term "1,0"))
                           (rule "commute_or" (formula "16") (term "1,1,0"))
                           (rule "cnf_rightDist" (formula "16") (term "0"))
                           (rule "distr_forallAnd" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "commute_or_2" (formula "17") (term "0"))
                           (rule "commute_or" (formula "17") (term "0,0"))
                           (rule "shift_paren_or" (formula "16") (term "0"))
                           (rule "methodCallWithAssignmentUnfoldArguments" (formula "22") (term "1"))
                           (rule "variableDeclarationAssign" (formula "22") (term "1"))
                           (rule "variableDeclaration" (formula "22") (term "1") (newnames "var_2"))
                           (rule "assignmentAdditionInt" (formula "22") (term "1"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "variableDeclarationAssign" (formula "22") (term "1"))
                           (rule "variableDeclaration" (formula "22") (term "1") (newnames "var_3"))
                           (rule "assignment" (formula "22") (term "1"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "translateJavaAddInt" (formula "22") (term "0,1,0,0"))
                           (rule "polySimp_addComm0" (formula "22") (term "0,1,0,0"))
                           (builtin "Use Operation Contract" (formula "22") (newnames "heapBefore_build_1,result_3,exc_6,heapAfter_build_0,anonHeap_build_0") (contract "JML behavior operation contract [id: 3 / Tree::build]"))
                           (branch "Post (build)"
                              (builtin "One Step Simplification" (formula "24"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "selectCreatedOfAnonEQ" (formula "19") (term "0,0,1,0,1,0,1,1") (ifseqformula "10"))
                              (rule "andLeft" (formula "19"))
                              (rule "selectCreatedOfAnonEQ" (formula "20") (term "0,0,1,0") (ifseqformula "19"))
                              (rule "selectCreatedOfAnonEQ" (formula "20") (term "0,0,0,0,1,0") (ifseqformula "10"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "20"))
                              (rule "typeEqDerived" (formula "23") (term "0,1") (ifseqformula "20"))
                              (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "20")))
                              (rule "true_left" (formula "23"))
                              (rule "assignment" (formula "27") (term "1"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "blockEmpty" (formula "27") (term "1"))
                              (rule "translateJavaSubInt" (formula "22") (term "1,1,0,0,0,1"))
                              (rule "translateJavaAddInt" (formula "22") (term "0,2,1,1,0,1,0,0,1"))
                              (rule "translateJavaAddInt" (formula "22") (term "0,1,0,1,0,0,1"))
                              (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "20"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "andLeft" (formula "22"))
                              (rule "notLeft" (formula "23"))
                              (rule "andLeft" (formula "22"))
                              (rule "notLeft" (formula "23"))
                              (rule "andLeft" (formula "22"))
                              (rule "andLeft" (formula "22"))
                              (rule "andLeft" (formula "22"))
                              (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "27"))
                              (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "26")))
                              (rule "polySimp_homoEq" (formula "25") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "24") (term "1"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_gtToGeq" (formula "23"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                              (rule "polySimp_addComm0" (formula "24") (term "1"))
                              (rule "polySimp_addComm0" (formula "25") (term "1,1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "0,1,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "25") (term "0,0,1,0"))
                              (rule "applyEq" (formula "25") (term "0,1,0,0,1,0,0") (ifseqformula "24"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                              (rule "polySimp_sepNegMonomial" (formula "25") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1"))
                              (rule "polySimp_rightDist" (formula "23") (term "1"))
                              (rule "mul_literals" (formula "23") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "0,1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,0,1,1,0,0"))
                              (rule "castedGetAny" (formula "25") (term "0,1,0"))
                              (rule "polySimp_homoEq" (formula "25") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "25") (term "0,1,0"))
                              (rule "polySimp_sepPosMonomial" (formula "25") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "0,1,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,0,1,1,0"))
                              (rule "selectOfAnonEQ" (formula "24") (term "1,1") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "30")))
                              (rule "selectCreatedOfAnonEQ" (formula "24") (term "0,0,1,0,1,1") (ifseqformula "10"))
                              (rule "replace_known_left" (formula "24") (term "0,0,0,1,0,1,1") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "polySimp_homoEq" (formula "24"))
                              (rule "polySimp_addComm1" (formula "24") (term "0"))
                              (rule "polySimp_sepPosMonomial" (formula "24"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1"))
                              (rule "polySimp_rightDist" (formula "24") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                              (rule "polySimp_mulAssoc" (formula "24") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "24") (term "0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "24") (term "0,1"))
                              (rule "elementOfSingleton" (formula "24") (term "0,0"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "polySimp_homoEq" (formula "24"))
                              (rule "polySimp_addComm1" (formula "24") (term "0"))
                              (rule "polySimp_addComm0" (formula "24") (term "0,0"))
                              (rule "polySimp_sepPosMonomial" (formula "24"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1"))
                              (rule "polySimp_rightDist" (formula "24") (term "1"))
                              (rule "polySimp_mulAssoc" (formula "24") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "24") (term "0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "24") (term "0,1"))
                              (rule "selectOfAnonEQ" (formula "23") (term "0") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "30")))
                              (rule "selectCreatedOfAnonEQ" (formula "23") (term "0,0,1,0,0") (ifseqformula "10"))
                              (rule "replace_known_left" (formula "23") (term "0,0,0,1,0,0") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "elementOfSingleton" (formula "23") (term "0,0"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "inEqSimp_homoInEq1" (formula "23"))
                              (rule "polySimp_addComm1" (formula "23") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "23"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1"))
                              (rule "polySimp_rightDist" (formula "23") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
                              (rule "mul_literals" (formula "23") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1"))
                              (rule "selectOfAnonEQ" (formula "25") (term "0,1,0") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectCreatedOfAnonEQ" (formula "25") (term "0,0,1,1,0,0,1,0") (ifseqformula "10"))
                              (rule "elementOfSingleton" (formula "25") (term "0,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "24") (term "0,0") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "27")))
                              (rule "selectCreatedOfAnonEQ" (formula "24") (term "0,0,1,0,0,0") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "24") (term "0,1,0,0,0") (ifseqformula "26"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "selectOfAnonEQ" (formula "25") (term "2,0,1,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "elementOfSingleton" (formula "25") (term "0,0,2,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "23") (term "0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "30")) (ifInst ""  (formula "5")))
                              (rule "elementOfSingleton" (formula "23") (term "0,0"))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "inEqSimp_homoInEq0" (formula "23"))
                              (rule "polySimp_addComm1" (formula "23") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1"))
                              (rule "polySimp_rightDist" (formula "23") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
                              (rule "mul_literals" (formula "23") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1"))
                              (rule "selectOfAnonEQ" (formula "25") (term "0,0,2,2,2,0,1,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")) (ifInst ""  (formula "5")))
                              (rule "elementOfSingleton" (formula "25") (term "0,0,0,2,2,2,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "24") (term "0,1,1") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "30")) (ifInst ""  (formula "5")))
                              (rule "polySimp_homoEq" (formula "24"))
                              (rule "polySimp_addComm1" (formula "24") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "24"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                              (rule "polySimp_elimOne" (formula "24") (term "0"))
                              (rule "elementOfSingleton" (formula "24") (term "0,0"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "polySimp_homoEq" (formula "24"))
                              (rule "polySimp_addComm1" (formula "24") (term "0"))
                              (rule "polySimp_addComm0" (formula "24") (term "0,0"))
                              (rule "polySimp_sepNegMonomial" (formula "24"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                              (rule "polySimp_elimOne" (formula "24") (term "0"))
                              (rule "selectOfAnonEQ" (formula "25") (term "1,1,1,0,0") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")))
                              (rule "selectCreatedOfAnonEQ" (formula "25") (term "0,0,1,0,1,1,1,0,0") (ifseqformula "10"))
                              (rule "replace_known_left" (formula "25") (term "0,0,0,1,0,1,1,1,0,0") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "elementOfSingleton" (formula "25") (term "0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "polySimp_addComm1" (formula "25") (term "1,1,0,0"))
                              (rule "selectOfAnonEQ" (formula "25") (term "0,0,0,0,0,1,0") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")))
                              (rule "selectCreatedOfAnonEQ" (formula "25") (term "0,0,1,0,0,0,0,0,0,1,0") (ifseqformula "10"))
                              (rule "replace_known_left" (formula "25") (term "0,0,0,1,0,0,0,0,0,0,1,0") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "elementOfSingleton" (formula "25") (term "0,0,0,0,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "25") (term "0,1,1,1,0") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "27")))
                              (rule "selectCreatedOfAnonEQ" (formula "25") (term "0,0,1,0,0,1,1,1,0") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "25") (term "0,1,0,0,1,1,1,0") (ifseqformula "26"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "25") (term "1,0,0,1,0,2,0,1,0") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")))
                              (rule "selectCreatedOfAnonEQ" (formula "25") (term "0,0,1,0,1,0,0,1,0,2,0,1,0") (ifseqformula "10"))
                              (rule "replace_known_left" (formula "25") (term "0,0,0,1,0,1,0,0,1,0,2,0,1,0") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "elementOfSingleton" (formula "25") (term "0,1,0,0,1,0,2,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "25") (term "1,2,0,0,1,0,0,1,0") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")))
                              (rule "selectCreatedOfAnonEQ" (formula "25") (term "0,0,1,0,1,2,0,0,1,0,0,1,0") (ifseqformula "10"))
                              (rule "replace_known_left" (formula "25") (term "0,0,0,1,0,1,2,0,0,1,0,0,1,0") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "elementOfSingleton" (formula "25") (term "0,1,2,0,0,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "25") (term "0,0,2,1,2,0,1,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")) (ifInst ""  (formula "5")))
                              (rule "elementOfSingleton" (formula "25") (term "0,0,0,2,1,2,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "25") (term "1,1,2,0,1,0") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")))
                              (rule "selectCreatedOfAnonEQ" (formula "25") (term "0,0,1,0,1,1,2,0,1,0") (ifseqformula "10"))
                              (rule "replace_known_left" (formula "25") (term "0,0,0,1,0,1,1,2,0,1,0") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "elementOfSingleton" (formula "25") (term "0,1,1,2,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "25") (term "1,1,2,0,1,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")) (ifInst ""  (formula "5")))
                              (rule "elementOfSingleton" (formula "25") (term "0,1,1,2,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "25") (term "1,0,0,1,0,2,0,1,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")) (ifInst ""  (formula "5")))
                              (rule "elementOfSingleton" (formula "25") (term "0,1,0,0,1,0,2,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "25") (term "1,2,2,0,1,0") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")))
                              (rule "selectCreatedOfAnonEQ" (formula "25") (term "0,0,1,0,1,2,2,0,1,0") (ifseqformula "10"))
                              (rule "replace_known_left" (formula "25") (term "0,0,0,1,0,1,2,2,0,1,0") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "elementOfSingleton" (formula "25") (term "0,1,2,2,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "25") (term "0,0,2,1,0,1,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")) (ifInst ""  (formula "5")))
                              (rule "elementOfSingleton" (formula "25") (term "0,0,0,2,1,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "25") (term "1,1,0,1,0") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")))
                              (rule "selectCreatedOfAnonEQ" (formula "25") (term "0,0,1,0,1,1,0,1,0") (ifseqformula "10"))
                              (rule "replace_known_left" (formula "25") (term "0,0,0,1,0,1,1,0,1,0") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "elementOfSingleton" (formula "25") (term "0,1,1,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "25") (term "1,0,0,0,0,1,0,0,1,0") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")))
                              (rule "selectCreatedOfAnonEQ" (formula "25") (term "0,0,1,0,1,0,0,0,0,1,0,0,1,0") (ifseqformula "10"))
                              (rule "replace_known_left" (formula "25") (term "0,0,0,1,0,1,0,0,0,0,1,0,0,1,0") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "elementOfSingleton" (formula "25") (term "0,1,0,0,0,0,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "25") (term "1,2,0,0,1,0,0,1,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")) (ifInst ""  (formula "5")))
                              (rule "elementOfSingleton" (formula "25") (term "0,1,2,0,0,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "25") (term "1,0,0,0,0,1,0,0,1,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")) (ifInst ""  (formula "5")))
                              (rule "elementOfSingleton" (formula "25") (term "0,1,0,0,0,0,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "25") (term "0,0,0,0,2,0,1,0") (ifseqformula "19"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")))
                              (rule "selectCreatedOfAnonEQ" (formula "25") (term "0,0,1,0,0,0,0,0,2,0,1,0") (ifseqformula "10"))
                              (rule "replace_known_left" (formula "25") (term "0,0,0,1,0,0,0,0,0,2,0,1,0") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "elementOfSingleton" (formula "25") (term "0,0,0,0,0,2,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "25") (term "0,1,1,1,0,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")) (ifInst ""  (formula "5")))
                              (rule "elementOfSingleton" (formula "25") (term "0,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "polySimp_addComm1" (formula "25") (term "1,1,0,0"))
                              (rule "selectOfAnonEQ" (formula "25") (term "0,0,0,0,2,0,1,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")) (ifInst ""  (formula "5")))
                              (rule "elementOfSingleton" (formula "25") (term "0,0,0,0,0,2,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "25") (term "0,0,0,0,0,1,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")) (ifInst ""  (formula "5")))
                              (rule "elementOfSingleton" (formula "25") (term "0,0,0,0,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "25") (term "1,1,0,1,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")) (ifInst ""  (formula "5")))
                              (rule "elementOfSingleton" (formula "25") (term "0,1,1,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "selectOfAnonEQ" (formula "25") (term "1,2,2,0,1,0") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")) (ifInst ""  (formula "5")))
                              (rule "elementOfSingleton" (formula "25") (term "0,1,2,2,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "nnf_imp2or" (formula "25") (term "0"))
                              (rule "nnf_notAnd" (formula "25") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,0,1,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "25") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "0,1,1,0,0"))
                              (rule "returnUnfold" (formula "32") (term "1") (inst "#v0=t"))
                              (rule "variableDeclarationAssign" (formula "32") (term "1"))
                              (rule "variableDeclaration" (formula "32") (term "1") (newnames "t"))
                              (rule "lenNonNegative" (formula "15") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "15"))
                              (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1"))
                              (rule "polySimp_elimOne" (formula "15") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "14"))
                              (rule "inEqSimp_homoInEq0" (formula "15") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0"))
                              (rule "add_literals" (formula "15") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "15") (term "1,0,0"))
                              (rule "add_zero_right" (formula "15") (term "0,0"))
                              (rule "qeq_literals" (formula "15") (term "0"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "ifthenelse_to_or_left" (formula "25") (term "1,0"))
                              (rule "nnf_notAnd" (formula "25") (term "0,0,1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "commute_or_2" (formula "25") (term "0,1,0"))
                              (rule "commute_or" (formula "25") (term "1,1,0"))
                              (rule "commute_or" (formula "25") (term "0,0,1,0"))
                              (rule "cnf_rightDist" (formula "25") (term "1,1,0"))
                              (rule "commute_or" (formula "25") (term "1,1,1,0"))
                              (rule "cnf_rightDist" (formula "25") (term "0"))
                              (rule "distr_forallAnd" (formula "25"))
                              (rule "andLeft" (formula "25"))
                              (rule "commute_or" (formula "26") (term "0"))
                              (rule "shift_paren_or" (formula "25") (term "0"))
                              (rule "shift_paren_or" (formula "25") (term "0,0"))
                              (rule "cnf_rightDist" (formula "26") (term "0"))
                              (rule "distr_forallAnd" (formula "26"))
                              (rule "andLeft" (formula "26"))
                              (rule "commute_or_2" (formula "27") (term "0"))
                              (rule "commute_or" (formula "27") (term "0,0"))
                              (rule "shift_paren_or" (formula "26") (term "0"))
                              (rule "ifthenelse_to_or_left" (formula "25") (term "1,0"))
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "shift_paren_or" (formula "25") (term "0"))
                              (rule "ifthenelse_to_or_left2" (formula "27") (term "1,0"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "cnf_rightDist" (formula "27") (term "0"))
                              (rule "distr_forallAnd" (formula "27"))
                              (rule "andLeft" (formula "27"))
                              (rule "commute_or_2" (formula "28") (term "0"))
                              (rule "commute_or" (formula "28") (term "0,0"))
                              (rule "ifthenelse_to_or_left" (formula "26") (term "1,0,0"))
                              (rule "nnf_notAnd" (formula "26") (term "0,0,1,0,0"))
                              (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "2")))
                              (rule "commute_or" (formula "26") (term "1,0,0"))
                              (rule "cnf_rightDist" (formula "26") (term "1,0,0"))
                              (rule "commute_or" (formula "26") (term "1,1,0,0"))
                              (rule "commute_or_2" (formula "26") (term "0"))
                              (rule "cnf_rightDist" (formula "26") (term "0"))
                              (rule "distr_forallAnd" (formula "26"))
                              (rule "andLeft" (formula "26"))
                              (rule "commute_or_2" (formula "27") (term "0"))
                              (rule "shift_paren_or" (formula "26") (term "0"))
                              (rule "commute_or_2" (formula "26") (term "0,0"))
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "shift_paren_or" (formula "27") (term "0,0"))
                              (rule "commute_or" (formula "27") (term "0,0,0"))
                              (rule "ifthenelse_to_or_left" (formula "28") (term "1,0,0"))
                              (rule "nnf_notAnd" (formula "28") (term "0,0,1,0,0"))
                              (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "2")))
                              (rule "commute_or" (formula "28") (term "1,0,0"))
                              (rule "cnf_rightDist" (formula "28") (term "1,0,0"))
                              (rule "commute_or_2" (formula "28") (term "0"))
                              (rule "commute_or" (formula "28") (term "1,1,0"))
                              (rule "cnf_rightDist" (formula "28") (term "0"))
                              (rule "distr_forallAnd" (formula "28"))
                              (rule "andLeft" (formula "28"))
                              (rule "commute_or_2" (formula "28") (term "0"))
                              (rule "shift_paren_or" (formula "29") (term "0"))
                              (rule "commute_or_2" (formula "29") (term "0,0"))
                              (builtin "One Step Simplification" (formula "29"))
                              (rule "commute_or" (formula "29") (term "0,0"))
                              (rule "shift_paren_or" (formula "28") (term "0,0"))
                              (rule "ifthenelse_to_or_left" (formula "29") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "29") (term "0,0,1,0,0,0"))
                              (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "2")))
                              (rule "commute_or" (formula "29") (term "1,0,0,0"))
                              (rule "cnf_rightDist" (formula "29") (term "1,0,0,0"))
                              (rule "commute_or" (formula "29") (term "1,1,0,0,0"))
                              (rule "commute_or_2" (formula "29") (term "0,0"))
                              (rule "commute_or_2" (formula "29") (term "0"))
                              (rule "cnf_rightDist" (formula "29") (term "0"))
                              (rule "distr_forallAnd" (formula "29"))
                              (rule "andLeft" (formula "29"))
                              (rule "commute_or_2" (formula "29") (term "0"))
                              (rule "commute_or_2" (formula "29") (term "0,0"))
                              (rule "shift_paren_or" (formula "30") (term "0"))
                              (rule "shift_paren_or" (formula "29") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "30") (term "0,0"))
                              (rule "commute_or_2" (formula "30") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "lenNonNegative" (formula "24") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "24"))
                              (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1"))
                              (rule "polySimp_elimOne" (formula "24") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "23"))
                              (rule "inEqSimp_homoInEq0" (formula "24") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0"))
                              (rule "add_literals" (formula "24") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "24") (term "1,0,0"))
                              (rule "add_literals" (formula "24") (term "0,0"))
                              (rule "qeq_literals" (formula "24") (term "0"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (builtin "Use Operation Contract" (formula "36") (newnames "heapBefore_Tree,self_4,exc_7,heapAfter_Tree,anonHeap_Tree") (contract "JML normal_behavior operation contract [id: 8 / Tree::Tree]"))
                              (branch "Post (Tree)"
                                 (builtin "One Step Simplification" (formula "38"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "selectCreatedOfAnonEQ" (formula "31") (term "0,0,1,0,0,1,0,1") (ifseqformula "19"))
                                 (rule "selectCreatedOfAnonEQ" (formula "31") (term "0,0,0,0,1,0,0,1,0,1") (ifseqformula "10"))
                                 (rule "andLeft" (formula "31"))
                                 (rule "selectCreatedOfAnonEQ" (formula "32") (term "0,1,0,1,0") (ifseqformula "31"))
                                 (rule "selectCreatedOfAnonEQ" (formula "32") (term "0,0,0,1,0,1,0") (ifseqformula "19"))
                                 (rule "selectCreatedOfAnonEQ" (formula "32") (term "0,0,0,0,0,1,0,1,0") (ifseqformula "10"))
                                 (rule "andLeft" (formula "32"))
                                 (rule "andLeft" (formula "32"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "andLeft" (formula "35"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "andLeft" (formula "37"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "andLeft" (formula "35"))
                                 (rule "assignment" (formula "48") (term "1"))
                                 (builtin "One Step Simplification" (formula "48"))
                                 (rule "replace_known_right" (formula "33") (term "0,0") (ifseqformula "41"))
                                 (builtin "One Step Simplification" (formula "33"))
                                 (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0"))
                                 (rule "applyEq" (formula "38") (term "0,0,1,0,0,1,0,0") (ifseqformula "37"))
                                 (rule "applyEq" (formula "38") (term "0,0,0,1,0") (ifseqformula "37"))
                                 (rule "eqSymm" (formula "38") (term "1,0"))
                                 (rule "applyEq" (formula "38") (term "0,0,1,0") (ifseqformula "37"))
                                 (rule "eqSymm" (formula "38") (term "1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "38") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0"))
                                 (rule "getOfSeqInc" (formula "38") (term "1,1,0"))
                                 (rule "polySimp_addComm0" (formula "38") (term "1,1,0"))
                                 (rule "castedGetAny" (formula "38") (term "0,1,0"))
                                 (rule "polySimp_homoEq" (formula "38") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "38") (term "0,1,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "38") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "38") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "38") (term "1,1,0"))
                                 (rule "mul_literals" (formula "38") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0"))
                                 (rule "lenOfSeqInc" (formula "38") (term "1,1,1,0,0"))
                                 (rule "castedGetAny" (formula "38") (term "0,1,0"))
                                 (rule "polySimp_homoEq" (formula "38") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "38") (term "0,1,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "38") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "38") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "38") (term "1,1,0"))
                                 (rule "mul_literals" (formula "38") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0"))
                                 (rule "lenOfSeqConcat" (formula "38") (term "1,1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "38") (term "1,1,0,0"))
                                 (rule "getOfSeqInc" (formula "38") (term "0,1,0"))
                                 (rule "castDelInt" (formula "38") (term "0,0,1,0"))
                                 (rule "polySimp_homoEq" (formula "38") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "38") (term "1,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "38") (term "1,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "38") (term "1,0,1,0"))
                                 (rule "mul_literals" (formula "38") (term "0,1,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "38") (term "0,1,0"))
                                 (rule "polySimp_addComm1" (formula "38") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "38") (term "0,0,0,1,0"))
                                 (rule "add_zero_left" (formula "38") (term "0,0,1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "38") (term "0,1,0"))
                                 (rule "add_literals" (formula "38") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "38") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "38"))
                                 (rule "true_left" (formula "38"))
                                 (rule "selectOfAnonEQ" (formula "37") (term "1,0,1") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "42")))
                                 (rule "selectCreatedOfAnonEQ" (formula "37") (term "0,0,0,1,0,1") (ifseqformula "19"))
                                 (rule "selectCreatedOfAnonEQ" (formula "37") (term "0,0,0,0,0,1,0,1") (ifseqformula "10"))
                                 (rule "eqSymm" (formula "37"))
                                 (rule "replace_known_right" (formula "37") (term "0,0,0,0,1,0,0") (ifseqformula "41"))
                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "21")))
                                 (rule "selectOfAnonEQ" (formula "35") (term "0") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "39")))
                                 (rule "selectCreatedOfAnonEQ" (formula "35") (term "0,0,0,0") (ifseqformula "19"))
                                 (rule "selectCreatedOfAnonEQ" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "35") (term "0,0,0") (ifseqformula "40"))
                                 (builtin "One Step Simplification" (formula "35"))
                                 (rule "selectOfAnonEQ" (formula "36") (term "0") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "39")))
                                 (rule "selectCreatedOfAnonEQ" (formula "36") (term "0,0,0,0") (ifseqformula "19"))
                                 (rule "selectCreatedOfAnonEQ" (formula "36") (term "0,0,0,0,0,0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "36") (term "0,0,0") (ifseqformula "40"))
                                 (builtin "One Step Simplification" (formula "36"))
                                 (rule "selectOfAnonEQ" (formula "37") (term "1,0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "42")))
                                 (rule "selectCreatedOfAnonEQ" (formula "37") (term "0,0,1,0,1,0,0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "37") (term "0,1,0,1,0,0") (ifseqformula "41"))
                                 (builtin "One Step Simplification" (formula "37"))
                                 (rule "eqSymm" (formula "37"))
                                 (rule "selectOfAnonEQ" (formula "37") (term "0") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "39")))
                                 (rule "selectCreatedOfAnonEQ" (formula "37") (term "0,0,0,0") (ifseqformula "19"))
                                 (rule "selectCreatedOfAnonEQ" (formula "37") (term "0,0,0,0,0,0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "37") (term "0,0,0") (ifseqformula "40"))
                                 (builtin "One Step Simplification" (formula "37"))
                                 (rule "eqSymm" (formula "37"))
                                 (rule "selectOfAnonEQ" (formula "37") (term "0,0,0") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "44")))
                                 (rule "selectCreatedOfAnonEQ" (formula "37") (term "0,0,0,0,0,0") (ifseqformula "19"))
                                 (rule "selectCreatedOfAnonEQ" (formula "37") (term "0,0,0,0,0,0,0,0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "37") (term "0,0,0,0,0,0,0,0,0") (ifseqformula "43"))
                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "12")))
                                 (rule "selectOfAnonEQ" (formula "37") (term "0,0,0") (ifseqformula "19"))
                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "44")))
                                 (rule "selectCreatedOfAnonEQ" (formula "37") (term "0,0,1,0,0,0,0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "37") (term "0,0,0,1,0,0,0,0") (ifseqformula "43"))
                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "12")))
                                 (rule "elementOfSingleton" (formula "37") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "37"))
                                 (rule "selectOfAnonEQ" (formula "37") (term "0,0,0") (ifseqformula "10"))
                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "44")) (ifInst ""  (formula "43")))
                                 (rule "methodCallReturn" (formula "47") (term "1"))
                                 (rule "assignment" (formula "47") (term "1"))
                                 (builtin "One Step Simplification" (formula "47"))
                                 (rule "Class_invariant_axiom_for_Tree" (formula "38") (inst "i=_var30") (inst "sk=sk_0") (ifseqformula "34"))
                                 (branch "Use Axiom"
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "andLeft" (formula "38"))
                                    (rule "andLeft" (formula "38"))
                                    (rule "andLeft" (formula "38"))
                                    (rule "eqSymm" (formula "40") (term "1"))
                                    (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "39") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0"))
                                    (rule "castedGetAny" (formula "39") (term "0,1,0"))
                                    (rule "eqSymm" (formula "39") (term "1,0"))
                                    (rule "selectOfAnonEQ" (formula "38") (term "0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "42")))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,0,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,0,0") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "0,0") (ifseqformula "35"))
                                    (rule "replace_known_right" (formula "38") (term "0") (ifseqformula "47"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "notLeft" (formula "38"))
                                    (rule "selectOfAnonEQ" (formula "39") (term "0,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "42")))
                                    (rule "selectCreatedOfAnonEQ" (formula "39") (term "0,0,0,0,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "39") (term "0,0,0,0,0,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "39") (term "0,0,0,0,0") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "applyEq" (formula "39") (term "0,0,0") (ifseqformula "35"))
                                    (rule "replace_known_right" (formula "39") (term "0,0") (ifseqformula "47"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "lenOfSeqIncEQ" (formula "38") (term "1,1,1,0,0") (ifseqformula "39"))
                                    (rule "getOfSeqIncEQ" (formula "38") (term "1,1,0") (ifseqformula "39"))
                                    (rule "castDelInt" (formula "38") (term "0,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "38") (term "1,1,0"))
                                    (rule "getOfSeqIncEQ" (formula "38") (term "0,1,0") (ifseqformula "39"))
                                    (rule "polySimp_homoEq" (formula "38") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,1,0"))
                                    (rule "polySimp_addComm0" (formula "38") (term "1,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,1,0"))
                                    (rule "polySimp_addComm1" (formula "38") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "38") (term "0,0,0,1,0"))
                                    (rule "add_zero_left" (formula "38") (term "0,0,1,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "38") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "0,1,0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "0,1,0"))
                                    (rule "lenOfSeqConcat" (formula "38") (term "1,1,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "1,1,0,0"))
                                    (rule "castedGetAny" (formula "38") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "true_left" (formula "38"))
                                    (rule "selectOfAnonEQ" (formula "39") (term "0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "41")))
                                    (rule "selectCreatedOfAnonEQ" (formula "39") (term "0,0,0,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "39") (term "0,0,0,0,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "39") (term "0,0,0,0") (ifseqformula "42"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "applyEq" (formula "39") (term "0,0") (ifseqformula "35"))
                                    (rule "replace_known_right" (formula "39") (term "0") (ifseqformula "46"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "true_left" (formula "39"))
                                    (rule "selectOfAnonEQ" (formula "38") (term "1,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "39")))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,1,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,0,0,1,0,0") (ifseqformula "10"))
                                    (rule "ifthenelse_negated" (formula "38") (term "1,0,0"))
                                    (rule "selectOfAnonEQ" (formula "39") (term "0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "40")))
                                    (rule "selectCreatedOfAnonEQ" (formula "39") (term "0,0,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "39") (term "0,0,0,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "39") (term "0,0,0") (ifseqformula "41"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "applyEq" (formula "39") (term "0") (ifseqformula "36"))
                                    (rule "selectOfAnonEQ" (formula "38") (term "0,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,1,0,0,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,0,1,0,0,0,0") (ifseqformula "10"))
                                    (rule "selectOfAnonEQ" (formula "38") (term "1") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "39")))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,1") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,0,0,1") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,1") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "selectOfAnonEQ" (formula "38") (term "1,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "39")))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,1,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,1,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "1,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "35"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,0,0,0,1,0,0,0,0") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "selectOfAnonEQ" (formula "38") (term "1,2,0,0,0,0,1,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "39")))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,1,2,0,0,0,0,1,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,0,0,1,2,0,0,0,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,1,2,0,0,0,0,1,0,0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "1,2,0,0,0,0,1,0,0") (ifseqformula "36"))
                                    (rule "selectOfAnonEQ" (formula "38") (term "1,0,0,0,0,0,0,1,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "39")))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,1,0,0,0,0,0,0,1,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,0,0,1,0,0,0,0,0,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,1,0,0,0,0,0,0,1,0,0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "1,0,0,0,0,0,0,1,0,0") (ifseqformula "36"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,0,1,0,0") (ifseqformula "41"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "selectOfAnonEQ" (formula "38") (term "1,1,1,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "39")))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,1,1,1,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,0,0,1,1,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,1,1,1,0,0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "1,1,1,0,0") (ifseqformula "36"))
                                    (rule "selectOfAnonEQ" (formula "38") (term "1,2,1,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "39")))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,1,2,1,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,0,0,1,2,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,1,2,1,0,0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "1,2,1,0,0") (ifseqformula "36"))
                                    (rule "selectOfAnonEQ" (formula "38") (term "1,2,0,0,1,0,0,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "39")))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,1,2,0,0,1,0,0,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,0,0,1,2,0,0,1,0,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,1,2,0,0,1,0,0,0,0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "1,2,0,0,1,0,0,0,0") (ifseqformula "35"))
                                    (rule "selectOfAnonEQ" (formula "38") (term "1,2,0,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "39")))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,1,2,0,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,0,0,1,2,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,1,2,0,0,0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "1,2,0,0,0") (ifseqformula "35"))
                                    (rule "selectOfAnonEQ" (formula "38") (term "1,1,0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "42")))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,1,0,1,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "38") (term "0,1,0,1,1,0,0") (ifseqformula "41"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "selectOfAnonEQ" (formula "38") (term "0,0,0,0,0,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "39")))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,0,0,0,0,0,0,0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "0,0,0,0,0,0,0") (ifseqformula "35"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,0,0,0,0") (ifseqformula "44"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "ifthenelse_negated" (formula "38") (term "0,0,0"))
                                    (rule "selectOfAnonEQ" (formula "38") (term "1,2,0,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "39")))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,1,2,0,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,0,0,1,2,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,1,2,0,0,0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "1,2,0,0,0") (ifseqformula "35"))
                                    (rule "selectOfAnonEQ" (formula "38") (term "1,0,0,1,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "39")))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,1,0,0,1,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,0,0,1,0,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,1,0,0,1,0,0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "1,0,0,1,0,0") (ifseqformula "36"))
                                    (rule "replace_known_left" (formula "38") (term "0,1,0,0") (ifseqformula "21"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "selectOfAnonEQ" (formula "38") (term "1,0,0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "44")))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,1,0,1,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,0,1,0,1,0,0,0") (ifseqformula "43"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "12")))
                                    (rule "elementOfSingleton" (formula "38") (term "0,1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "selectOfAnonEQ" (formula "38") (term "1,0,0,0,0,0,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "39")))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "38") (term "0,0,0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "38") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "40"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "applyEq" (formula "38") (term "1,0,0,0,0,0,0,0") (ifseqformula "35"))
                                    (rule "replace_known_left" (formula "38") (term "0,0,0,0,0,0") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "selectOfAnonEQ" (formula "38") (term "0,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "44")) (ifInst ""  (formula "43")) (ifInst ""  (formula "37")))
                                    (rule "true_left" (formula "38"))
                                    (rule "methodCallEmpty" (formula "46") (term "1"))
                                    (rule "tryEmpty" (formula "46") (term "1"))
                                    (rule "emptyModality" (formula "46") (term "1"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "38")))
                                    (rule "eqSymm" (formula "46") (term "1,0,0,1"))
                                    (rule "polySimp_addComm0" (formula "46") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "46") (term "1,0,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "46") (term "0,1,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "1,1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "1,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "46") (term "0,1,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "1,1,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "1,1,1,0,0,0,0"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "0,1,1,1,0,1,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "38")))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "46") (term "0,0,0,1,1,1,0,1,0,0") (ifseqformula "39"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "getOfSeqIncEQ" (formula "46") (term "1,1,1,0,1,0,0") (ifseqformula "37"))
                                    (rule "castDelInt" (formula "46") (term "0,1,1,1,0,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "46") (term "1,1,1,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "46") (term "1,1,0,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "46") (term "0,1,1,0,1,0,0"))
                                    (rule "getOfSeqConcat" (formula "46") (term "1,1,1,0,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "46") (term "1,2,1,1,1,0,1,0,0"))
                                    (rule "polySimp_homoEq" (formula "46") (term "1,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "46") (term "0,1,0,0,1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0,1,0,0,1,0,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "46") (term "1,2,1,0,0,1,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "46") (term "0,1,0,1,0,0"))
                                    (rule "applyEq" (formula "46") (term "0,0,1,2,1,0,1,0,1,0,0") (ifseqformula "15"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "0,1,2,1,0,1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "0,1,2,1,0,1,0,1,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "46") (term "0,0,1,2,1,0,1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "0,0,0,1,2,1,0,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "0,0,1,2,1,0,1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "0,0,1,2,1,0,1,0,1,0,0"))
                                    (rule "applyEq" (formula "46") (term "0,1,0,0,0,1,0,1,0,1,0,0") (ifseqformula "15"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0,1,0,1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "1,0,0,0,1,0,1,0,1,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "46") (term "0,1,0,0,0,1,0,1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "0,0,1,0,0,0,1,0,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "0,1,0,0,0,1,0,1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "0,1,0,0,0,1,0,1,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "46") (term "0,0,0,1,0,1,0,1,0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "46") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "1,1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "1,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "1,1,1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "1,1,1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "0,1,1,0,1,0,0"))
                                    (rule "mul_literals" (formula "46") (term "0,0,1,1,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "0,0,1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "1,0,0,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0,1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0,1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "0,1,0,0,1,0,1,0,0"))
                                    (rule "mul_literals" (formula "46") (term "0,0,1,0,0,1,0,1,0,0"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "0,1,0,0,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,0,0,1,0,0,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "46") (term "0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "0,0,1,0,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "38")))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,0,0,0,1,0,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,0,0,0,0,0,1,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "46") (term "0,0,0,0,1,0,0,0") (ifseqformula "39"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "lenOfSeqIncEQ" (formula "46") (term "0,1,0,0,0") (ifseqformula "37"))
                                    (rule "lenOfSeqConcat" (formula "46") (term "0,1,0,0,0"))
                                    (rule "polySimp_homoEq" (formula "46") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "1,0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "1,0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "0,1,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "46") (term "0,1,0,0,0"))
                                    (rule "applyEq" (formula "46") (term "0,1,0,1,0,0,0") (ifseqformula "24"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "1,0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "1,0,1,0,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "46") (term "0,1,0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "0,0,1,0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "0,1,0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "0,1,0,1,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "46") (term "0,1,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "46") (term "0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "46") (term "0,0,0,1,0,0,0"))
                                    (rule "applyEq" (formula "46") (term "0,1,0,1,0,0,0") (ifseqformula "15"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "1,0,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "1,0,1,0,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "46") (term "0,1,0,1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "0,0,1,0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "0,1,0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "0,1,0,1,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "46") (term "0,1,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "46") (term "0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "46") (term "0,0,0,1,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "46") (term "0,0,0,0,1,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "46") (term "0,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "46") (term "1,1,0,0,0,1,0,0,0"))
                                    (rule "times_zero_1" (formula "46") (term "1,0,0,0,1,0,0,0"))
                                    (rule "add_zero_right" (formula "46") (term "0,0,0,1,0,0,0"))
                                    (rule "polySimp_pullOutFactor2" (formula "46") (term "0,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "46") (term "1,0,0,0,1,0,0,0"))
                                    (rule "times_zero_1" (formula "46") (term "0,0,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "46") (term "0,0,1,0,0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "46") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0,0"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "0,1,1,0,0,1,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "38")))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,0,0,1,1,0,0,1,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,0,0,0,0,1,1,0,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_right" (formula "46") (term "0,0,0,1,1,0,0,1,0,0") (ifseqformula "39"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "lenOfSeqIncEQ" (formula "46") (term "1,1,0,0,1,0,0") (ifseqformula "37"))
                                    (rule "lenOfSeqConcat" (formula "46") (term "1,1,0,0,1,0,0"))
                                    (rule "applyEq" (formula "46") (term "1,1,1,0,0,1,0,0") (ifseqformula "24"))
                                    (rule "polySimp_addComm0" (formula "46") (term "1,1,0,0,1,0,0"))
                                    (rule "applyEq" (formula "46") (term "1,1,1,0,0,1,0,0") (ifseqformula "15"))
                                    (rule "polySimp_addComm1" (formula "46") (term "1,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "46") (term "0,1,1,0,0,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "46") (term "0,0,1,1,0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "46") (term "0,1,1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "46") (term "1,1,0,1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "46") (term "1,0,1,1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "46") (term "0,1,1,0,0,1,0,0"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "1,1,1,1,0,1,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,0,1,1,1,1,0,1,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,0,0,0,1,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "46") (term "0,0,0,0,0,0,1,1,1,1,0,1,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "1,1,1,0,1,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,1,0,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "46") (term "0,0,0,1,0,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "elementOfSingleton" (formula "46") (term "0,0,0,0,0,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "1,2,0,0,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,1,0,1,2,0,0,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "46") (term "0,0,0,1,0,1,2,0,0,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "elementOfSingleton" (formula "46") (term "0,1,2,0,0,0,0,1,0,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "2,1,1,1,0,1,0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,1,1,0,2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "polySimp_homoEq" (formula "46") (term "1,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "46") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "46") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "1,1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "1,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "1,1,1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "1,1,1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "0,1,1,0,1,0,0"))
                                    (rule "mul_literals" (formula "46") (term "0,0,1,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "1,0,1,1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "1,0,1,1,0,1,0,0"))
                                    (rule "elementOfSingleton" (formula "46") (term "0,0,2,0,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "polySimp_homoEq" (formula "46") (term "1,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "46") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "46") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "1,1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "1,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "1,1,1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "1,1,1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "0,1,1,0,1,0,0"))
                                    (rule "mul_literals" (formula "46") (term "0,0,1,1,0,1,0,0"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "0,1,0,0,0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,1,0,0,1,0,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "46") (term "0,0,0,1,0,0,1,0,0,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "elementOfSingleton" (formula "46") (term "0,0,1,0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "0,0,0,0,2,1,1,1,0,1,0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,1,0,0,0,0,0,2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "46") (term "0,0,0,1,0,0,0,0,0,2,1,1,1,0,1,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "elementOfSingleton" (formula "46") (term "0,0,0,0,0,2,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "0,0,0,0,2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "46") (term "0,0,0,0,0,2,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "1,1,2,1,1,1,0,1,0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,1,0,1,1,2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "46") (term "0,0,0,1,0,1,1,2,1,1,1,0,1,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "elementOfSingleton" (formula "46") (term "0,1,1,2,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "1,2,0,0,1,0,2,1,1,1,0,1,0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,1,0,1,2,0,0,1,0,2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "46") (term "0,0,0,1,0,1,2,0,0,1,0,2,1,1,1,0,1,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "elementOfSingleton" (formula "46") (term "0,1,2,0,0,1,0,2,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "1,0,0,0,0,1,0,2,1,1,1,0,1,0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,1,0,1,0,0,0,0,1,0,2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "46") (term "0,0,0,1,0,1,0,0,0,0,1,0,2,1,1,1,0,1,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "elementOfSingleton" (formula "46") (term "0,1,0,0,0,0,1,0,2,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "0,1,0,0,0") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,0,0,1,0,0,0") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,0,0,0,0,1,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "46") (term "0,0,0,0,0,0,0,1,0,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "1,0,0,0,0,1,0,2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "46") (term "0,1,0,0,0,0,1,0,2,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "1,0,0,0,0,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,1,0,1,0,0,0,0,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "46") (term "0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "elementOfSingleton" (formula "46") (term "0,1,0,0,0,0,0,0,1,0,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "0,1,0,0,1") (ifseqformula "31"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,1,0,0,1,0,0,1") (ifseqformula "19"))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,0,0,1,0,0,1,0,0,1") (ifseqformula "10"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "1,2,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,1,0,1,2,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "46") (term "0,0,0,1,0,1,2,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "elementOfSingleton" (formula "46") (term "0,1,2,0,0,1,0,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "46") (term "0,0,0,0,0,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "1,2,2,1,1,1,0,1,0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,1,0,1,2,2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "46") (term "0,0,0,1,0,1,2,2,1,1,1,0,1,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "elementOfSingleton" (formula "46") (term "0,1,2,2,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "1,1,1,1,1,0,1,0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,1,0,1,1,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "46") (term "0,0,0,1,0,1,1,1,1,1,0,1,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "elementOfSingleton" (formula "46") (term "0,1,1,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "1,0,0,0,0,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "46") (term "0,1,0,0,0,0,0,0,1,0,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "1,2,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "46") (term "0,1,2,0,0,1,0,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "1,1,2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "46") (term "0,1,1,2,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "1,1,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "46") (term "0,1,1,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "1,2,0,0,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "46") (term "0,1,2,0,0,0,0,1,0,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "0,1,0,0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,1,0,0,1,0,0,0") (ifseqformula "10"))
                                    (rule "replace_known_left" (formula "46") (term "0,0,0,1,0,0,1,0,0,0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "elementOfSingleton" (formula "46") (term "0,0,1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "1,2,0,0,1,0,2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "46") (term "0,1,2,0,0,1,0,2,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "2,2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "polySimp_homoEq" (formula "46") (term "1,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "46") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "46") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "1,1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "1,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "1,1,1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "1,1,1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "0,1,1,0,1,0,0"))
                                    (rule "mul_literals" (formula "46") (term "0,0,1,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "1,0,1,1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "1,0,1,1,0,1,0,0"))
                                    (rule "elementOfSingleton" (formula "46") (term "0,0,2,2,0,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "polySimp_homoEq" (formula "46") (term "1,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "46") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "46") (term "1,0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "1,1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "1,1,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "1,1,1,0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "46") (term "1,1,1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "46") (term "0,1,1,0,1,0,0"))
                                    (rule "mul_literals" (formula "46") (term "0,0,1,1,0,1,0,0"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "0,0,0,0,2,2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "46") (term "0,0,0,0,0,2,2,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "1,2,2,2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "46") (term "0,1,2,2,2,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "2,0,1,0,0,1") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectCreatedOfAnonEQ" (formula "46") (term "0,0,1,1,0,2,0,1,0,0,1") (ifseqformula "10"))
                                    (rule "elementOfSingleton" (formula "46") (term "0,0,0,2,0,1,0,0,1"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "1,1,2,2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "46") (term "0,1,1,2,2,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "1,0,0,1,0,2,2,1,1,1,0,1,0,0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "44")) (ifInst ""  (formula "5")))
                                    (rule "elementOfSingleton" (formula "46") (term "0,1,0,0,1,0,2,2,1,1,1,0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "selectOfAnonEQ" (formula "46") (term "2,2,0,1,0,0,1") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "elementOfSingleton" (formula "46") (term "0,0,0,2,2,0,1,0,0,1"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "37") (inst "iv=_var31"))
                                    (rule "andLeft" (formula "37"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0"))
                                    (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "39"))
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "true_left" (formula "37"))
                                    (rule "applyEq" (formula "37") (term "0,0,1,0,0,1,0,0") (ifseqformula "38"))
                                    (rule "applyEq" (formula "37") (term "0,0,1,0") (ifseqformula "38"))
                                    (builtin "One Step Simplification" (formula "37"))
                                    (rule "true_left" (formula "37"))
                                    (rule "ifthenelse_split" (formula "39") (term "0"))
                                    (branch " if (self_4.<created> = TRUE) then (TRUE) else (boolean::select(anonHeap_build, self_4, <created>)) = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "40"))
                                       (rule "closeTrue" (formula "40"))
                                    )
                                    (branch " if (self_4.<created> = TRUE) then (TRUE) else (boolean::select(anonHeap_build, self_4, <created>)) = TRUE FALSE"
                                       (rule "ifthenelse_split" (formula "41") (term "0"))
                                       (branch "result_3.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "42"))
                                          (rule "closeTrue" (formula "42"))
                                       )
                                       (branch "result_3.<created> = TRUE FALSE"
                                          (rule "cut_direct" (formula "2") (term "0"))
                                          (branch "CUT: s.a = null TRUE"
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "true_left" (formula "3"))
                                             (rule "replace_known_left" (formula "27") (term "0,1,0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "28")))
                                             (rule "true_left" (formula "27"))
                                             (rule "replace_known_left" (formula "16") (term "0,1,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "replace_known_left" (formula "28") (term "0,1,0,0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "28"))
                                             (rule "replace_known_left" (formula "26") (term "0,1,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "26"))
                                             (rule "replace_known_left" (formula "25") (term "1,0,0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "true_left" (formula "25"))
                                             (rule "replace_known_left" (formula "46") (term "0,0,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "2")) (ifInst ""  (formula "2")))
                                             (rule "applyEq" (formula "17") (term "1,0,1,0,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "26") (term "1,0,1,0,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "26") (term "1,0,0,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "17") (term "1,0,0,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "25") (term "1,0,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "27") (term "1,0,1,0,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "27") (term "1,0,1,0,0,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "16") (term "1,0,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "27") (term "1,0,0,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "46") (term "1,1,1,1,0,1,0,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "45") (term "0,1") (ifseqformula "2"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "34") (term "0") (ifseqformula "28"))
                                             (rule "applyEq" (formula "34") (term "1,0,1") (ifseqformula "35"))
                                             (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "35"))
                                             (rule "replace_known_right" (formula "34") (term "0") (ifseqformula "42"))
                                             (builtin "One Step Simplification" (formula "34"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "33") (term "0") (ifseqformula "28"))
                                             (rule "applyEq" (formula "33") (term "1,0,1") (ifseqformula "34"))
                                             (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "34"))
                                             (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "45"))
                                             (builtin "One Step Simplification" (formula "33"))
                                             (rule "ifthenelse_split" (formula "39") (term "0"))
                                             (branch "self_4.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "40"))
                                                (rule "closeTrue" (formula "40"))
                                             )
                                             (branch "self_4.<created> = TRUE FALSE"
                                                (rule "replace_known_right" (formula "49") (term "0,1,0") (ifseqformula "39"))
                                                (builtin "One Step Simplification" (formula "49"))
                                                (rule "cut_direct" (formula "26") (term "0,1,0"))
                                                (branch "CUT: java.lang.Object.<created> = TRUE TRUE"
                                                   (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "25")))
                                                   (rule "true_left" (formula "27"))
                                                   (rule "replace_known_left" (formula "27") (term "1,0,0") (ifseqformula "26"))
                                                   (builtin "One Step Simplification" (formula "27"))
                                                   (rule "true_left" (formula "27"))
                                                   (rule "replace_known_left" (formula "17") (term "0,1,0") (ifseqformula "26"))
                                                   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")))
                                                   (rule "true_left" (formula "17"))
                                                   (rule "cut_direct" (formula "47") (term "1,0,0"))
                                                   (branch "CUT: int::select(anonHeap_build_0, s, p) >= 1 + s.p TRUE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "cut_direct" (formula "48") (term "0,0"))
                                                      (branch "CUT: java.lang.Object::<inv>(heapAfter_Tree, s) TRUE"
                                                         (builtin "One Step Simplification" (formula "49"))
                                                         (rule "andRight" (formula "49"))
                                                         (branch
                                                            (rule "allRight" (formula "49") (inst "sk=i_3"))
                                                            (rule "orRight" (formula "49"))
                                                            (rule "orRight" (formula "49"))
                                                            (rule "inEqSimp_leqRight" (formula "49"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "inEqSimp_geqRight" (formula "50"))
                                                            (rule "polySimp_addComm0" (formula "51") (term "0,2,1,1"))
                                                            (rule "polySimp_addComm1" (formula "51") (term "1,2,0"))
                                                            (rule "polySimp_addComm0" (formula "51") (term "0,1,2,0"))
                                                            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                            (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0"))
                                                            (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
                                                            (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
                                                            (rule "inEqSimp_homoInEq0" (formula "51") (term "0,0"))
                                                            (rule "polySimp_addComm1" (formula "51") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "51") (term "0,0,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                            (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "51") (term "0,0"))
                                                            (rule "polySimp_mulComm0" (formula "51") (term "1,0,0"))
                                                            (rule "polySimp_rightDist" (formula "51") (term "1,0,0"))
                                                            (rule "polySimp_mulLiterals" (formula "51") (term "1,1,0,0"))
                                                            (rule "polySimp_elimOne" (formula "51") (term "1,1,0,0"))
                                                            (rule "polySimp_rightDist" (formula "51") (term "0,1,0,0"))
                                                            (rule "mul_literals" (formula "51") (term "0,0,1,0,0"))
                                                            (rule "polySimp_mulLiterals" (formula "51") (term "1,0,1,0,0"))
                                                            (rule "polySimp_elimOne" (formula "51") (term "1,0,1,0,0"))
                                                            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                            (rule "ifthenelse_split" (formula "51") (term "0"))
                                                            (branch "int::select(anonHeap_build, s, p) >= 1 + i_3 + s.p TRUE"
                                                               (rule "allLeft" (formula "21") (inst "t=i_3"))
                                                               (rule "polySimp_homoEq" (formula "21") (term "1"))
                                                               (rule "polySimp_addComm0" (formula "21") (term "0,2,0,1,0,1"))
                                                               (rule "polySimp_addComm1" (formula "21") (term "0,1"))
                                                               (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0"))
                                                               (rule "polySimp_addComm1" (formula "21") (term "0,1,0"))
                                                               (rule "polySimp_addComm0" (formula "21") (term "0,0,1,0"))
                                                               (rule "polySimp_sepPosMonomial" (formula "21") (term "1"))
                                                               (rule "polySimp_mulComm0" (formula "21") (term "1,1"))
                                                               (rule "polySimp_rightDist" (formula "21") (term "1,1"))
                                                               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1"))
                                                               (rule "polySimp_elimOne" (formula "21") (term "1,1,1"))
                                                               (rule "polySimp_rightDist" (formula "21") (term "0,1,1"))
                                                               (rule "mul_literals" (formula "21") (term "0,0,1,1"))
                                                               (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "53"))
                                                               (builtin "One Step Simplification" (formula "21"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1"))
                                                               (rule "polySimp_mulComm0" (formula "21") (term "1,1"))
                                                               (rule "polySimp_rightDist" (formula "21") (term "1,1"))
                                                               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1"))
                                                               (rule "polySimp_elimOne" (formula "21") (term "1,1,1"))
                                                               (rule "polySimp_mulAssoc" (formula "21") (term "0,1,1"))
                                                               (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,1"))
                                                               (rule "polySimp_mulLiterals" (formula "21") (term "0,1,1"))
                                                               (rule "polySimp_elimOne" (formula "21") (term "0,1,1"))
                                                               (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "1"))
                                                               (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                                                               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
                                                               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1"))
                                                               (rule "polySimp_mulComm0" (formula "21") (term "0,1,0,0,1"))
                                                               (rule "polySimp_addAssoc" (formula "21") (term "0,0,1"))
                                                               (rule "polySimp_addComm1" (formula "21") (term "0,0,0,1"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                                                               (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                                                               (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                                               (rule "add_zero_right" (formula "21") (term "0,0,1"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                                                               (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                                                               (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                                               (rule "add_literals" (formula "21") (term "0,0,1"))
                                                               (rule "leq_literals" (formula "21") (term "0,1"))
                                                               (builtin "One Step Simplification" (formula "21"))
                                                               (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "3"))
                                                               (rule "qeq_literals" (formula "21") (term "0"))
                                                               (builtin "One Step Simplification" (formula "21"))
                                                               (rule "closeFalse" (formula "21"))
                                                            )
                                                            (branch "int::select(anonHeap_build, s, p) >= 1 + i_3 + s.p FALSE"
                                                               (rule "inEqSimp_geqRight" (formula "51"))
                                                               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                                               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                               (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                               (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
                                                               (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
                                                               (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                                                               (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                                                               (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "1"))
                                                               (rule "polySimp_rightDist" (formula "19") (term "0,0"))
                                                               (rule "mul_literals" (formula "19") (term "0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "19") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "19") (term "0,0"))
                                                               (rule "polySimp_pullOutFactor2b" (formula "19") (term "0"))
                                                               (rule "add_literals" (formula "19") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "19") (term "1,0"))
                                                               (rule "add_zero_right" (formula "19") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                                                               (rule "mul_literals" (formula "19") (term "1"))
                                                               (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "19"))
                                                               (rule "leq_literals" (formula "3") (term "0"))
                                                               (builtin "One Step Simplification" (formula "3"))
                                                               (rule "true_left" (formula "3"))
                                                               (rule "allLeft" (formula "29") (inst "t=add(add(i_3, int::select(heap, s, List::$p)),
    mul(int::select(anonHeap_build, s, List::$p),
        Z(neglit(1(#)))))"))
                                                               (rule "polySimp_homoEq" (formula "29") (term "1"))
                                                               (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                                                               (rule "polySimp_addAssoc" (formula "29") (term "0,2,0,1,0,0,1"))
                                                               (rule "polySimp_addComm0" (formula "29") (term "0,0,2,0,1,0,0,1"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,2,0,1,0,0,1"))
                                                               (rule "add_literals" (formula "29") (term "1,1,0,2,0,1,0,0,1"))
                                                               (rule "times_zero_1" (formula "29") (term "1,0,2,0,1,0,0,1"))
                                                               (rule "add_zero_right" (formula "29") (term "0,2,0,1,0,0,1"))
                                                               (rule "inEqSimp_homoInEq0" (formula "29") (term "0,0"))
                                                               (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "29") (term "0,1,0,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0,0,0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0"))
                                                               (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0"))
                                                               (rule "polySimp_rightDist" (formula "29") (term "1,0,1,0"))
                                                               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,0"))
                                                               (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,0"))
                                                               (rule "polySimp_rightDist" (formula "29") (term "0,1,0,1,0"))
                                                               (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0,1,0"))
                                                               (rule "polySimp_addComm1" (formula "29") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "29") (term "0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0"))
                                                               (rule "polySimp_addComm0" (formula "29") (term "0,0,0,1,0"))
                                                               (rule "polySimp_pullOutFactor2b" (formula "29") (term "0,0,1,0"))
                                                               (rule "add_literals" (formula "29") (term "1,1,0,0,1,0"))
                                                               (rule "times_zero_1" (formula "29") (term "1,0,0,1,0"))
                                                               (rule "add_zero_right" (formula "29") (term "0,0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,0"))
                                                               (rule "polySimp_sepPosMonomial" (formula "29") (term "1"))
                                                               (rule "polySimp_mulComm0" (formula "29") (term "1,1"))
                                                               (rule "polySimp_rightDist" (formula "29") (term "1,1"))
                                                               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1"))
                                                               (rule "polySimp_elimOne" (formula "29") (term "1,1,1"))
                                                               (rule "polySimp_rightDist" (formula "29") (term "0,1,1"))
                                                               (rule "mul_literals" (formula "29") (term "0,0,1,1"))
                                                               (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "53"))
                                                               (builtin "One Step Simplification" (formula "29"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1"))
                                                               (rule "polySimp_mulComm0" (formula "29") (term "1,1"))
                                                               (rule "polySimp_rightDist" (formula "29") (term "1,1"))
                                                               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1"))
                                                               (rule "polySimp_elimOne" (formula "29") (term "1,1,1"))
                                                               (rule "polySimp_mulAssoc" (formula "29") (term "0,1,1"))
                                                               (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,1"))
                                                               (rule "polySimp_mulLiterals" (formula "29") (term "0,1,1"))
                                                               (rule "polySimp_elimOne" (formula "29") (term "0,1,1"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0"))
                                                               (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                                                               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                                                               (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                                                               (rule "polySimp_rightDist" (formula "29") (term "0,1,0"))
                                                               (rule "mul_literals" (formula "29") (term "0,0,1,0"))
                                                               (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0"))
                                                               (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0"))
                                                               (rule "inEqSimp_contradInEq0" (formula "29") (term "0") (ifseqformula "1"))
                                                               (rule "inEqSimp_homoInEq1" (formula "29") (term "0,0"))
                                                               (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "29") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "29") (term "0,0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0"))
                                                               (rule "add_literals" (formula "29") (term "1,1,0,0,0"))
                                                               (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
                                                               (rule "add_zero_right" (formula "29") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0"))
                                                               (rule "add_literals" (formula "29") (term "1,1,0,0,0"))
                                                               (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
                                                               (rule "add_literals" (formula "29") (term "0,0,0"))
                                                               (rule "leq_literals" (formula "29") (term "0,0"))
                                                               (builtin "One Step Simplification" (formula "29"))
                                                               (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "29"))
                                                               (rule "andLeft" (formula "2"))
                                                               (rule "inEqSimp_homoInEq1" (formula "2"))
                                                               (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                               (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                               (rule "add_literals" (formula "2") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "2") (term "1,0"))
                                                               (rule "add_zero_right" (formula "2") (term "0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                               (rule "add_literals" (formula "2") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "2") (term "1,0"))
                                                               (rule "add_zero_right" (formula "2") (term "0"))
                                                               (rule "leq_literals" (formula "2"))
                                                               (rule "closeFalse" (formula "2"))
                                                            )
                                                         )
                                                         (branch
                                                            (rule "allRight" (formula "49") (inst "sk=f_5"))
                                                            (rule "allRight" (formula "49") (inst "sk=o_5"))
                                                            (rule "orRight" (formula "49"))
                                                            (rule "orRight" (formula "49"))
                                                            (rule "replace_known_right" (formula "51") (term "0,0,0,2,0") (ifseqformula "49"))
                                                            (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "49")) (ifInst ""  (formula "50")))
                                                            (rule "ifthenelse_split" (formula "51") (term "0,0,0,0,1,0,0"))
                                                            (branch "o_5.<created> = TRUE TRUE"
                                                               (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "1")))
                                                               (rule "closeTrue" (formula "52"))
                                                            )
                                                            (branch "o_5.<created> = TRUE FALSE"
                                                               (rule "replace_known_right" (formula "52") (term "0,0,0,1,0,2,0") (ifseqformula "51"))
                                                               (builtin "One Step Simplification" (formula "52"))
                                                               (rule "replace_known_right" (formula "50") (term "0,1") (ifseqformula "51"))
                                                               (builtin "One Step Simplification" (formula "50"))
                                                               (rule "notRight" (formula "50"))
                                                               (rule "replace_known_left" (formula "52") (term "0,0,0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "1")))
                                                               (rule "closeTrue" (formula "52"))
                                                            )
                                                         )
                                                      )
                                                      (branch "CUT: java.lang.Object::<inv>(heapAfter_Tree, s) FALSE"
                                                         (builtin "One Step Simplification" (formula "49"))
                                                         (rule "false_right" (formula "49"))
                                                         (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                                         (builtin "Use Dependency Contract" (formula "14") (ifInst ""  (formula "8")) (ifInst ""  (formula "11")) (contract "JML accessible clause [id: 0 / java.lang.Object::<inv> for List]"))
                                                         (branch "Dependencies unchanged by write to {(s, p)}
"
                                                            (rule "andLeft" (formula "38"))
                                                            (rule "andLeft" (formula "38"))
                                                            (rule "andLeft" (formula "38"))
                                                            (rule "andLeft" (formula "38"))
                                                            (rule "andLeft" (formula "38"))
                                                            (rule "notLeft" (formula "39"))
                                                            (rule "replace_known_left" (formula "37") (term "1") (ifseqformula "8"))
                                                            (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "14")))
                                                            (rule "true_left" (formula "37"))
                                                            (rule "applyEq" (formula "38") (term "0,1,1") (ifseqformula "3"))
                                                            (rule "disjointToElementOf" (formula "38") (inst "ov=_var63") (inst "fv=_var62"))
                                                            (rule "elementOfSingleton" (formula "38") (term "0,0,0,0"))
                                                            (rule "elementOfUnion" (formula "38") (term "0,1,0,0"))
                                                            (builtin "One Step Simplification" (formula "38"))
                                                            (rule "nnf_notOr" (formula "38") (term "1,0,0"))
                                                            (rule "nnf_notAnd" (formula "38") (term "0,0,0"))
                                                            (rule "commute_and" (formula "38") (term "1,0,0"))
                                                            (rule "cnf_rightDist" (formula "38") (term "0,0"))
                                                            (rule "distr_forallAnd" (formula "38") (term "0"))
                                                            (rule "distr_forallAnd" (formula "38"))
                                                            (rule "andLeft" (formula "38"))
                                                            (rule "commute_or_2" (formula "38") (term "0,0"))
                                                            (builtin "One Step Simplification" (formula "38"))
                                                            (rule "instanceof_static_type" (formula "38") (term "0,0,1,0"))
                                                            (builtin "One Step Simplification" (formula "38"))
                                                            (rule "typeEqDerived2" (formula "38") (term "0,0,1") (ifseqformula "3"))
                                                            (builtin "One Step Simplification" (formula "38"))
                                                            (rule "notLeft" (formula "38"))
                                                            (rule "castDel" (formula "39") (term "0"))
                                                            (rule "eqSymm" (formula "39"))
                                                            (rule "shift_paren_or" (formula "38") (term "0,0"))
                                                            (builtin "One Step Simplification" (formula "38"))
                                                            (rule "instanceof_static_type" (formula "38") (term "0,0,1,0"))
                                                            (builtin "One Step Simplification" (formula "38"))
                                                            (rule "notLeft" (formula "38"))
                                                            (rule "instanceof_static_type" (formula "38") (term "0"))
                                                            (builtin "One Step Simplification" (formula "38"))
                                                            (rule "closeTrue" (formula "38"))
                                                         )
                                                         (branch "Dependencies changed by write to {(s, p)}
"
                                                            (rule "replace_known_left" (formula "37") (term "1,0") (ifseqformula "8"))
                                                            (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "5")) (ifInst ""  (formula "47")) (ifInst ""  (formula "6")))
                                                            (rule "applyEq" (formula "37") (term "0,1,1,1") (ifseqformula "3"))
                                                            (rule "disjointToElementOf" (formula "37") (term "1") (inst "ov=_var57") (inst "fv=_var56"))
                                                            (rule "elementOfSingleton" (formula "37") (term "0,0,0,0,1"))
                                                            (rule "elementOfUnion" (formula "37") (term "0,1,0,0,1"))
                                                            (builtin "One Step Simplification" (formula "37"))
                                                            (rule "nnf_notOr" (formula "37") (term "1,0,0,1"))
                                                            (rule "nnf_notAnd" (formula "37") (term "0,0,0,1"))
                                                            (rule "cut_direct" (formula "37") (term "0"))
                                                            (branch "CUT: wellFormed(heapAfter_build) TRUE"
                                                               (builtin "One Step Simplification" (formula "38"))
                                                               (rule "allRight" (formula "38") (inst "sk=_var57_0"))
                                                               (rule "allRight" (formula "38") (inst "sk=_var56_0"))
                                                               (rule "orRight" (formula "38"))
                                                               (rule "orRight" (formula "38"))
                                                               (rule "notRight" (formula "38"))
                                                               (rule "notRight" (formula "39"))
                                                               (rule "replace_known_left" (formula "40") (term "0,0") (ifseqformula "2"))
                                                               (builtin "One Step Simplification" (formula "40"))
                                                               (rule "false_right" (formula "40"))
                                                               (builtin "Use Dependency Contract" (formula "25") (ifInst ""  (formula "17")) (ifInst ""  (formula "22")) (contract "JML accessible clause [id: 0 / java.lang.Object::<inv> for List]"))
                                                               (branch "Dependencies unchanged by write to {(s, p)}
"
                                                                  (rule "selectCreatedOfAnonEQ" (formula "41") (term "0,1,0,0") (ifseqformula "14"))
                                                                  (rule "andLeft" (formula "41"))
                                                                  (rule "andLeft" (formula "41"))
                                                                  (rule "andLeft" (formula "41"))
                                                                  (rule "andLeft" (formula "41"))
                                                                  (rule "andLeft" (formula "41"))
                                                                  (rule "notLeft" (formula "42"))
                                                                  (rule "replace_known_left" (formula "42") (term "0,0") (ifseqformula "9"))
                                                                  (builtin "One Step Simplification" (formula "42"))
                                                                  (rule "true_left" (formula "42"))
                                                                  (rule "replace_known_left" (formula "40") (term "1") (ifseqformula "17"))
                                                                  (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "25")))
                                                                  (rule "true_left" (formula "40"))
                                                                  (rule "disjointToElementOf" (formula "41") (inst "ov=_var61") (inst "fv=_var60"))
                                                                  (rule "elementOfSingleton" (formula "41") (term "0,0,0,0"))
                                                                  (rule "elementOfUnion" (formula "41") (term "0,1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "41"))
                                                                  (rule "selectOfAnonEQ" (formula "41") (term "1,1,0,1,0,0") (ifseqformula "14"))
                                                                  (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "51")) (ifInst ""  (formula "9")))
                                                                  (rule "applyEq" (formula "41") (term "2,1,1,0,1,0,0") (ifseqformula "6"))
                                                                  (rule "elementOfSingleton" (formula "41") (term "0,1,1,0,1,0,0"))
                                                                  (builtin "One Step Simplification" (formula "41"))
                                                                  (rule "nnf_notOr" (formula "41") (term "1,0,0"))
                                                                  (rule "nnf_notAnd" (formula "41") (term "0,0,0"))
                                                                  (rule "commute_and" (formula "41") (term "1,0,0"))
                                                                  (rule "cnf_rightDist" (formula "41") (term "0,0"))
                                                                  (rule "distr_forallAnd" (formula "41") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "41"))
                                                                  (rule "andLeft" (formula "41"))
                                                                  (rule "commute_or_2" (formula "41") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "41"))
                                                                  (rule "typeEqDerived2" (formula "41") (term "0,0,1,0") (ifseqformula "1"))
                                                                  (builtin "One Step Simplification" (formula "41"))
                                                                  (rule "typeEqDerived2" (formula "41") (term "0,0,1") (ifseqformula "6"))
                                                                  (builtin "One Step Simplification" (formula "41"))
                                                                  (rule "notLeft" (formula "41"))
                                                                  (rule "castDel" (formula "42") (term "0"))
                                                                  (rule "eqSymm" (formula "42"))
                                                                  (rule "shift_paren_or" (formula "41") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "41"))
                                                                  (rule "typeEqDerived2" (formula "41") (term "0,0,1,0") (ifseqformula "1"))
                                                                  (builtin "One Step Simplification" (formula "41"))
                                                                  (rule "typeEqDerived2" (formula "41") (term "0,0") (ifseqformula "2"))
                                                                  (builtin "One Step Simplification" (formula "41"))
                                                                  (rule "closeFalse" (formula "41"))
                                                               )
                                                               (branch "Dependencies changed by write to {(s, p)}
"
                                                                  (rule "selectCreatedOfAnonEQ" (formula "40") (term "0,1,0,0") (ifseqformula "14"))
                                                                  (rule "replace_known_left" (formula "40") (term "0,0,0,0,0") (ifseqformula "3"))
                                                                  (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "50")) (ifInst ""  (formula "9")) (ifInst ""  (formula "17")))
                                                                  (rule "disjointToElementOf" (formula "40") (term "1") (inst "ov=_var59") (inst "fv=_var58"))
                                                                  (rule "elementOfSingleton" (formula "40") (term "0,0,0,0,1"))
                                                                  (rule "elementOfUnion" (formula "40") (term "0,1,0,0,1"))
                                                                  (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "selectOfAnonEQ" (formula "40") (term "1,1,0,1,0,0,1") (ifseqformula "14"))
                                                                  (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "50")) (ifInst ""  (formula "9")))
                                                                  (rule "applyEq" (formula "40") (term "2,1,1,0,1,0,0,1") (ifseqformula "6"))
                                                                  (rule "elementOfSingleton" (formula "40") (term "0,1,1,0,1,0,0,1"))
                                                                  (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "nnf_notAnd" (formula "40") (term "0,0,0,1"))
                                                                  (rule "nnf_notOr" (formula "40") (term "1,0,0,1"))
                                                                  (rule "cut_direct" (formula "40") (term "0"))
                                                                  (branch "CUT: wellFormed(heapAfter_build_0) TRUE"
                                                                     (builtin "One Step Simplification" (formula "41"))
                                                                     (rule "allRight" (formula "41") (inst "sk=_var59_0"))
                                                                     (rule "allRight" (formula "41") (inst "sk=_var58_0"))
                                                                     (rule "orRight" (formula "41"))
                                                                     (rule "orRight" (formula "41"))
                                                                     (rule "notRight" (formula "41"))
                                                                     (rule "notRight" (formula "42"))
                                                                     (rule "replace_known_left" (formula "43") (term "0,0") (ifseqformula "2"))
                                                                     (builtin "One Step Simplification" (formula "43"))
                                                                     (rule "false_right" (formula "43"))
                                                                     (builtin "Use Dependency Contract" (formula "54") (ifInst ""  (formula "34") (term "0")) (ifInst ""  (formula "34")) (contract "JML accessible clause [id: 0 / java.lang.Object::<inv> for List]"))
                                                                     (branch "Dependencies unchanged by write to {}
"
                                                                        (rule "selectCreatedOfAnonEQ" (formula "44") (term "0,1,0") (ifseqformula "25"))
                                                                        (rule "selectCreatedOfAnonEQ" (formula "44") (term "0,0,0,1,0") (ifseqformula "17"))
                                                                        (rule "andLeft" (formula "44"))
                                                                        (rule "andLeft" (formula "44"))
                                                                        (rule "andLeft" (formula "44"))
                                                                        (rule "andLeft" (formula "44"))
                                                                        (rule "notLeft" (formula "45"))
                                                                        (rule "replace_known_left" (formula "45") (term "0,0,0,0") (ifseqformula "12"))
                                                                        (builtin "One Step Simplification" (formula "45"))
                                                                        (rule "true_left" (formula "45"))
                                                                        (rule "replace_known_left" (formula "43") (term "1") (ifseqformula "28"))
                                                                        (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "56")))
                                                                        (rule "closeFalse" (formula "43"))
                                                                     )
                                                                     (branch "Dependencies changed by write to {}
"
                                                                        (rule "selectCreatedOfAnonEQ" (formula "43") (term "0,1,0") (ifseqformula "25"))
                                                                        (rule "selectCreatedOfAnonEQ" (formula "43") (term "0,0,0,1,0") (ifseqformula "17"))
                                                                        (rule "replace_known_left" (formula "43") (term "0,0,0,0") (ifseqformula "3"))
                                                                        (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "53")) (ifInst ""  (formula "12")) (ifInst ""  (formula "28")))
                                                                        (rule "wellFormedAnonEQ" (formula "43") (ifseqformula "34"))
                                                                        (rule "replace_known_left" (formula "43") (term "1") (ifseqformula "33"))
                                                                        (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "3")))
                                                                        (rule "closeTrue" (formula "43"))
                                                                     )
                                                                  )
                                                                  (branch "CUT: wellFormed(heapAfter_build_0) FALSE"
                                                                     (builtin "One Step Simplification" (formula "41"))
                                                                     (rule "false_right" (formula "41"))
                                                                     (rule "wellFormedAnonEQ" (formula "40") (ifseqformula "22"))
                                                                     (rule "replace_known_left" (formula "40") (term "0") (ifseqformula "3"))
                                                                     (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "21")))
                                                                     (rule "closeTrue" (formula "40"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "CUT: wellFormed(heapAfter_build) FALSE"
                                                               (builtin "One Step Simplification" (formula "38"))
                                                               (rule "false_right" (formula "38"))
                                                               (rule "wellFormedAnonEQ" (formula "37") (ifseqformula "11"))
                                                               (rule "replace_known_left" (formula "37") (term "1") (ifseqformula "10"))
                                                               (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "5")))
                                                               (rule "closeTrue" (formula "37"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                   (branch "CUT: int::select(anonHeap_build_0, s, p) >= 1 + s.p FALSE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "false_right" (formula "48"))
                                                      (rule "inEqSimp_geqRight" (formula "47"))
                                                      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "1"))
                                                      (rule "polySimp_rightDist" (formula "23") (term "0,0"))
                                                      (rule "mul_literals" (formula "23") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "23") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "23"))
                                                      (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "23") (term "0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "15") (ifseqformula "23"))
                                                      (rule "andLeft" (formula "15"))
                                                      (rule "inEqSimp_homoInEq1" (formula "15"))
                                                      (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                                                      (rule "mul_literals" (formula "15") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "15") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                                                      (rule "add_literals" (formula "15") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                                                      (rule "add_literals" (formula "15") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "15") (term "1,0"))
                                                      (rule "add_zero_right" (formula "15") (term "0"))
                                                      (rule "leq_literals" (formula "15"))
                                                      (rule "closeFalse" (formula "15"))
                                                   )
                                                )
                                                (branch "CUT: java.lang.Object.<created> = TRUE FALSE"
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "true_left" (formula "26"))
                                                   (rule "replace_known_right" (formula "26") (term "1,0,0") (ifseqformula "37"))
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "replace_known_right" (formula "17") (term "0,1,0") (ifseqformula "37"))
                                                   (builtin "One Step Simplification" (formula "17"))
                                                   (rule "true_left" (formula "17"))
                                                   (rule "cut_direct" (formula "25") (term "0,1,0"))
                                                   (branch "CUT: boolean::select(anonHeap_build, null, <created>) = TRUE TRUE"
                                                      (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")))
                                                      (rule "true_left" (formula "26"))
                                                      (rule "cut_direct" (formula "48") (term "1,0,0"))
                                                      (branch "CUT: int::select(anonHeap_build_0, s, p) >= 1 + s.p TRUE"
                                                         (builtin "One Step Simplification" (formula "49"))
                                                         (rule "cut_direct" (formula "49") (term "0,0"))
                                                         (branch "CUT: java.lang.Object::<inv>(heapAfter_Tree, s) TRUE"
                                                            (builtin "One Step Simplification" (formula "50"))
                                                            (rule "andRight" (formula "50"))
                                                            (branch
                                                               (rule "allRight" (formula "50") (inst "sk=i_2"))
                                                               (rule "orRight" (formula "50"))
                                                               (rule "orRight" (formula "50"))
                                                               (rule "inEqSimp_geqRight" (formula "51"))
                                                               (rule "inEqSimp_leqRight" (formula "51"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "polySimp_addComm0" (formula "52") (term "0,2,1,1"))
                                                               (rule "polySimp_addComm1" (formula "52") (term "1,2,0"))
                                                               (rule "polySimp_addComm0" (formula "52") (term "0,1,2,0"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                                                               (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0"))
                                                               (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0"))
                                                               (rule "inEqSimp_homoInEq0" (formula "52") (term "0,0"))
                                                               (rule "polySimp_addComm1" (formula "52") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "52") (term "0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                               (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "52") (term "0,0"))
                                                               (rule "polySimp_mulComm0" (formula "52") (term "1,0,0"))
                                                               (rule "polySimp_rightDist" (formula "52") (term "1,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "52") (term "1,1,0,0"))
                                                               (rule "polySimp_elimOne" (formula "52") (term "1,1,0,0"))
                                                               (rule "polySimp_rightDist" (formula "52") (term "0,1,0,0"))
                                                               (rule "mul_literals" (formula "52") (term "0,0,1,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "52") (term "1,0,1,0,0"))
                                                               (rule "polySimp_elimOne" (formula "52") (term "1,0,1,0,0"))
                                                               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                               (rule "ifthenelse_split" (formula "52") (term "0"))
                                                               (branch "int::select(anonHeap_build, s, p) >= 1 + i_2 + s.p TRUE"
                                                                  (rule "allLeft" (formula "21") (inst "t=i_2"))
                                                                  (rule "polySimp_homoEq" (formula "21") (term "1"))
                                                                  (rule "polySimp_addComm0" (formula "21") (term "0,2,0,1,0,1"))
                                                                  (rule "polySimp_addComm1" (formula "21") (term "0,1"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0"))
                                                                  (rule "polySimp_addComm1" (formula "21") (term "0,1,0"))
                                                                  (rule "polySimp_addComm0" (formula "21") (term "0,0,1,0"))
                                                                  (rule "polySimp_sepPosMonomial" (formula "21") (term "1"))
                                                                  (rule "polySimp_mulComm0" (formula "21") (term "1,1"))
                                                                  (rule "polySimp_rightDist" (formula "21") (term "1,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1"))
                                                                  (rule "polySimp_elimOne" (formula "21") (term "1,1,1"))
                                                                  (rule "polySimp_rightDist" (formula "21") (term "0,1,1"))
                                                                  (rule "mul_literals" (formula "21") (term "0,0,1,1"))
                                                                  (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "54"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1"))
                                                                  (rule "polySimp_mulComm0" (formula "21") (term "1,1"))
                                                                  (rule "polySimp_rightDist" (formula "21") (term "1,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1"))
                                                                  (rule "polySimp_elimOne" (formula "21") (term "1,1,1"))
                                                                  (rule "polySimp_mulAssoc" (formula "21") (term "0,1,1"))
                                                                  (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "21") (term "0,1,1"))
                                                                  (rule "polySimp_elimOne" (formula "21") (term "0,1,1"))
                                                                  (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "2"))
                                                                  (rule "qeq_literals" (formula "21") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "1"))
                                                                  (rule "andLeft" (formula "21"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "21"))
                                                                  (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                                                                  (rule "polySimp_rightDist" (formula "21") (term "1,0"))
                                                                  (rule "polySimp_mulComm0" (formula "21") (term "0,1,0"))
                                                                  (rule "polySimp_addAssoc" (formula "21") (term "0"))
                                                                  (rule "polySimp_addComm1" (formula "21") (term "0,0"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "21") (term "0"))
                                                                  (rule "add_literals" (formula "21") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "21") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "21") (term "0"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "21") (term "0"))
                                                                  (rule "add_literals" (formula "21") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "21") (term "1,0"))
                                                                  (rule "add_literals" (formula "21") (term "0"))
                                                                  (rule "leq_literals" (formula "21"))
                                                                  (rule "closeFalse" (formula "21"))
                                                               )
                                                               (branch "int::select(anonHeap_build, s, p) >= 1 + i_2 + s.p FALSE"
                                                                  (rule "inEqSimp_geqRight" (formula "52"))
                                                                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                                                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                                                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "1") (term "0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                                  (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
                                                                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                                                                  (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "1"))
                                                                  (rule "polySimp_rightDist" (formula "19") (term "0,0"))
                                                                  (rule "mul_literals" (formula "19") (term "0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "19") (term "0"))
                                                                  (rule "polySimp_addComm1" (formula "19") (term "0,0"))
                                                                  (rule "polySimp_pullOutFactor2b" (formula "19") (term "0"))
                                                                  (rule "add_literals" (formula "19") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "19") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "19") (term "0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                                                                  (rule "mul_literals" (formula "19") (term "1"))
                                                                  (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "19"))
                                                                  (rule "leq_literals" (formula "2") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "allLeft" (formula "29") (inst "t=add(add(i_2, int::select(heap, s, List::$p)),
    mul(int::select(anonHeap_build, s, List::$p),
        Z(neglit(1(#)))))"))
                                                                  (rule "polySimp_homoEq" (formula "29") (term "1"))
                                                                  (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                                                                  (rule "polySimp_addAssoc" (formula "29") (term "0,2,0,1,0,0,1"))
                                                                  (rule "polySimp_addComm0" (formula "29") (term "0,0,2,0,1,0,0,1"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,2,0,1,0,0,1"))
                                                                  (rule "add_literals" (formula "29") (term "1,1,0,2,0,1,0,0,1"))
                                                                  (rule "times_zero_1" (formula "29") (term "1,0,2,0,1,0,0,1"))
                                                                  (rule "add_zero_right" (formula "29") (term "0,2,0,1,0,0,1"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0"))
                                                                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0"))
                                                                  (rule "polySimp_rightDist" (formula "29") (term "1,0,1,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,0"))
                                                                  (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,0"))
                                                                  (rule "polySimp_rightDist" (formula "29") (term "0,1,0,1,0"))
                                                                  (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0,1,0"))
                                                                  (rule "polySimp_addComm1" (formula "29") (term "0,1,0"))
                                                                  (rule "inEqSimp_homoInEq0" (formula "29") (term "0,0"))
                                                                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "29") (term "0,1,0,0,0"))
                                                                  (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0"))
                                                                  (rule "polySimp_addComm0" (formula "29") (term "0,0,0,1,0"))
                                                                  (rule "polySimp_pullOutFactor2b" (formula "29") (term "0,0,1,0"))
                                                                  (rule "add_literals" (formula "29") (term "1,1,0,0,1,0"))
                                                                  (rule "times_zero_1" (formula "29") (term "1,0,0,1,0"))
                                                                  (rule "add_zero_right" (formula "29") (term "0,0,1,0"))
                                                                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,0"))
                                                                  (rule "polySimp_sepPosMonomial" (formula "29") (term "1"))
                                                                  (rule "polySimp_mulComm0" (formula "29") (term "1,1"))
                                                                  (rule "polySimp_rightDist" (formula "29") (term "1,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1"))
                                                                  (rule "polySimp_elimOne" (formula "29") (term "1,1,1"))
                                                                  (rule "polySimp_rightDist" (formula "29") (term "0,1,1"))
                                                                  (rule "mul_literals" (formula "29") (term "0,0,1,1"))
                                                                  (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "54"))
                                                                  (builtin "One Step Simplification" (formula "29"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0"))
                                                                  (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                                                                  (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                                                                  (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                                                                  (rule "polySimp_rightDist" (formula "29") (term "0,1,0"))
                                                                  (rule "mul_literals" (formula "29") (term "0,0,1,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0"))
                                                                  (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1"))
                                                                  (rule "polySimp_mulComm0" (formula "29") (term "1,1"))
                                                                  (rule "polySimp_rightDist" (formula "29") (term "1,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1"))
                                                                  (rule "polySimp_elimOne" (formula "29") (term "1,1,1"))
                                                                  (rule "polySimp_mulAssoc" (formula "29") (term "0,1,1"))
                                                                  (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "29") (term "0,1,1"))
                                                                  (rule "polySimp_elimOne" (formula "29") (term "0,1,1"))
                                                                  (rule "inEqSimp_contradInEq0" (formula "29") (term "0") (ifseqformula "1"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "29") (term "0,0"))
                                                                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0"))
                                                                  (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,0"))
                                                                  (rule "polySimp_addComm1" (formula "29") (term "0,0,0,0"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0"))
                                                                  (rule "add_literals" (formula "29") (term "1,1,0,0,0"))
                                                                  (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
                                                                  (rule "add_zero_right" (formula "29") (term "0,0,0"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0"))
                                                                  (rule "add_literals" (formula "29") (term "1,1,0,0,0"))
                                                                  (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
                                                                  (rule "add_zero_right" (formula "29") (term "0,0,0"))
                                                                  (rule "leq_literals" (formula "29") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "29"))
                                                                  (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "29"))
                                                                  (rule "andLeft" (formula "2"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "2"))
                                                                  (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                                  (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                                  (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
                                                                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                                  (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
                                                                  (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                                                                  (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                                                                  (rule "add_literals" (formula "2") (term "0,0,0"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                                  (rule "add_literals" (formula "2") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "2") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "2") (term "0"))
                                                                  (rule "leq_literals" (formula "2"))
                                                                  (rule "closeFalse" (formula "2"))
                                                               )
                                                            )
                                                            (branch
                                                               (rule "allRight" (formula "50") (inst "sk=f_4"))
                                                               (rule "allRight" (formula "50") (inst "sk=o_4"))
                                                               (rule "orRight" (formula "50"))
                                                               (rule "orRight" (formula "50"))
                                                               (rule "replace_known_right" (formula "52") (term "0,0,0,2,0") (ifseqformula "50"))
                                                               (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "50")) (ifInst ""  (formula "51")))
                                                               (rule "ifthenelse_split" (formula "52") (term "0,0,1,0,0"))
                                                               (branch " if (o_4.<created> = TRUE) then (TRUE) else (boolean::select(anonHeap_build, o_4, <created>)) = TRUE TRUE"
                                                                  (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "1")))
                                                                  (rule "closeTrue" (formula "53"))
                                                               )
                                                               (branch " if (o_4.<created> = TRUE) then (TRUE) else (boolean::select(anonHeap_build, o_4, <created>)) = TRUE FALSE"
                                                                  (rule "replace_known_right" (formula "53") (term "0,1,0,2,0") (ifseqformula "52"))
                                                                  (builtin "One Step Simplification" (formula "53"))
                                                                  (rule "ifthenelse_negated" (formula "53") (term "2,0"))
                                                                  (rule "ifthenelse_split" (formula "52") (term "0"))
                                                                  (branch "o_4.<created> = TRUE TRUE"
                                                                     (builtin "One Step Simplification" (formula "53"))
                                                                     (rule "closeTrue" (formula "53"))
                                                                  )
                                                                  (branch "o_4.<created> = TRUE FALSE"
                                                                     (rule "replace_known_right" (formula "51") (term "0,1") (ifseqformula "52"))
                                                                     (builtin "One Step Simplification" (formula "51"))
                                                                     (rule "notRight" (formula "51"))
                                                                     (rule "replace_known_left" (formula "54") (term "0,2,0") (ifseqformula "1"))
                                                                     (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "1")))
                                                                     (rule "closeTrue" (formula "54"))
                                                                  )
                                                               )
                                                            )
                                                         )
                                                         (branch "CUT: java.lang.Object::<inv>(heapAfter_Tree, s) FALSE"
                                                            (builtin "One Step Simplification" (formula "50"))
                                                            (rule "false_right" (formula "50"))
                                                            (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                                            (builtin "Use Dependency Contract" (formula "14") (ifInst ""  (formula "8")) (ifInst ""  (formula "11")) (contract "JML accessible clause [id: 0 / java.lang.Object::<inv> for List]"))
                                                            (branch "Dependencies unchanged by write to {(s, p)}
"
                                                               (rule "andLeft" (formula "38"))
                                                               (rule "andLeft" (formula "38"))
                                                               (rule "andLeft" (formula "38"))
                                                               (rule "andLeft" (formula "38"))
                                                               (rule "andLeft" (formula "38"))
                                                               (rule "notLeft" (formula "39"))
                                                               (rule "replace_known_left" (formula "37") (term "0") (ifseqformula "14"))
                                                               (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "8")))
                                                               (rule "true_left" (formula "37"))
                                                               (rule "applyEq" (formula "38") (term "0,1,1") (ifseqformula "3"))
                                                               (rule "disjointToElementOf" (formula "38") (inst "ov=_var55") (inst "fv=_var54"))
                                                               (rule "elementOfSingleton" (formula "38") (term "0,0,0,0"))
                                                               (rule "elementOfUnion" (formula "38") (term "0,1,0,0"))
                                                               (builtin "One Step Simplification" (formula "38"))
                                                               (rule "nnf_notAnd" (formula "38") (term "0,0,0"))
                                                               (rule "nnf_notOr" (formula "38") (term "1,0,0"))
                                                               (rule "commute_and" (formula "38") (term "1,0,0"))
                                                               (rule "cnf_rightDist" (formula "38") (term "0,0"))
                                                               (rule "distr_forallAnd" (formula "38") (term "0"))
                                                               (rule "distr_forallAnd" (formula "38"))
                                                               (rule "andLeft" (formula "38"))
                                                               (rule "commute_or_2" (formula "38") (term "0,0"))
                                                               (builtin "One Step Simplification" (formula "38"))
                                                               (rule "instanceof_static_type" (formula "38") (term "0,0,1,0"))
                                                               (builtin "One Step Simplification" (formula "38"))
                                                               (rule "typeEqDerived2" (formula "38") (term "0,0,1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "38"))
                                                               (rule "notLeft" (formula "38"))
                                                               (rule "castDel" (formula "39") (term "0"))
                                                               (rule "eqSymm" (formula "39"))
                                                               (rule "shift_paren_or" (formula "38") (term "0,0"))
                                                               (builtin "One Step Simplification" (formula "38"))
                                                               (rule "instanceof_static_type" (formula "38") (term "0,0,1,0"))
                                                               (builtin "One Step Simplification" (formula "38"))
                                                               (rule "notLeft" (formula "38"))
                                                               (rule "instanceof_static_type" (formula "38") (term "0"))
                                                               (builtin "One Step Simplification" (formula "38"))
                                                               (rule "closeTrue" (formula "38"))
                                                            )
                                                            (branch "Dependencies changed by write to {(s, p)}
"
                                                               (rule "replace_known_right" (formula "37") (term "0,1,0,0,0") (ifseqformula "48"))
                                                               (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "8")))
                                                               (rule "applyEq" (formula "37") (term "0,1,1,1") (ifseqformula "3"))
                                                               (rule "disjointToElementOf" (formula "37") (term "1") (inst "ov=_var49") (inst "fv=_var48"))
                                                               (rule "elementOfSingleton" (formula "37") (term "0,0,0,0,1"))
                                                               (rule "elementOfUnion" (formula "37") (term "0,1,0,0,1"))
                                                               (builtin "One Step Simplification" (formula "37"))
                                                               (rule "nnf_notAnd" (formula "37") (term "0,0,0,1"))
                                                               (rule "nnf_notOr" (formula "37") (term "1,0,0,1"))
                                                               (rule "cut_direct" (formula "37") (term "0"))
                                                               (branch "CUT: wellFormed(heapAfter_build) TRUE"
                                                                  (builtin "One Step Simplification" (formula "38"))
                                                                  (rule "allRight" (formula "38") (inst "sk=_var49_0"))
                                                                  (rule "allRight" (formula "38") (inst "sk=_var48_0"))
                                                                  (rule "orRight" (formula "38"))
                                                                  (rule "orRight" (formula "38"))
                                                                  (rule "notRight" (formula "39"))
                                                                  (rule "notRight" (formula "39"))
                                                                  (rule "replace_known_left" (formula "40") (term "0,0") (ifseqformula "1"))
                                                                  (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "false_right" (formula "40"))
                                                                  (builtin "Use Dependency Contract" (formula "25") (ifInst ""  (formula "17")) (ifInst ""  (formula "22")) (contract "JML accessible clause [id: 0 / java.lang.Object::<inv> for List]"))
                                                                  (branch "Dependencies unchanged by write to {(s, p)}
"
                                                                     (rule "selectCreatedOfAnonEQ" (formula "41") (term "0,1,0,0") (ifseqformula "14"))
                                                                     (rule "andLeft" (formula "41"))
                                                                     (rule "andLeft" (formula "41"))
                                                                     (rule "andLeft" (formula "41"))
                                                                     (rule "andLeft" (formula "41"))
                                                                     (rule "notLeft" (formula "42"))
                                                                     (rule "andLeft" (formula "41"))
                                                                     (rule "replace_known_left" (formula "42") (term "0,0") (ifseqformula "9"))
                                                                     (builtin "One Step Simplification" (formula "42"))
                                                                     (rule "true_left" (formula "42"))
                                                                     (rule "replace_known_left" (formula "40") (term "0") (ifseqformula "25"))
                                                                     (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "17")))
                                                                     (rule "true_left" (formula "40"))
                                                                     (rule "disjointToElementOf" (formula "41") (inst "ov=_var53") (inst "fv=_var52"))
                                                                     (rule "elementOfSingleton" (formula "41") (term "0,0,0,0"))
                                                                     (rule "elementOfUnion" (formula "41") (term "0,1,0,0"))
                                                                     (builtin "One Step Simplification" (formula "41"))
                                                                     (rule "selectOfAnonEQ" (formula "41") (term "1,1,0,1,0,0") (ifseqformula "14"))
                                                                     (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "52")) (ifInst ""  (formula "9")))
                                                                     (rule "applyEq" (formula "41") (term "2,1,1,0,1,0,0") (ifseqformula "6"))
                                                                     (rule "elementOfSingleton" (formula "41") (term "0,1,1,0,1,0,0"))
                                                                     (builtin "One Step Simplification" (formula "41"))
                                                                     (rule "nnf_notAnd" (formula "41") (term "0,0,0"))
                                                                     (rule "nnf_notOr" (formula "41") (term "1,0,0"))
                                                                     (rule "commute_and" (formula "41") (term "1,0,0"))
                                                                     (rule "cnf_rightDist" (formula "41") (term "0,0"))
                                                                     (rule "distr_forallAnd" (formula "41") (term "0"))
                                                                     (rule "distr_forallAnd" (formula "41"))
                                                                     (rule "andLeft" (formula "41"))
                                                                     (rule "commute_or_2" (formula "41") (term "0,0"))
                                                                     (builtin "One Step Simplification" (formula "41"))
                                                                     (rule "typeEqDerived2" (formula "41") (term "0,0,1,0") (ifseqformula "2"))
                                                                     (builtin "One Step Simplification" (formula "41"))
                                                                     (rule "typeEqDerived2" (formula "41") (term "0,0,1") (ifseqformula "6"))
                                                                     (builtin "One Step Simplification" (formula "41"))
                                                                     (rule "notLeft" (formula "41"))
                                                                     (rule "castDel" (formula "42") (term "0"))
                                                                     (rule "eqSymm" (formula "42"))
                                                                     (rule "shift_paren_or" (formula "41") (term "0,0"))
                                                                     (builtin "One Step Simplification" (formula "41"))
                                                                     (rule "typeEqDerived2" (formula "41") (term "0,0,1,0") (ifseqformula "2"))
                                                                     (builtin "One Step Simplification" (formula "41"))
                                                                     (rule "typeEqDerived2" (formula "41") (term "0,0") (ifseqformula "1"))
                                                                     (builtin "One Step Simplification" (formula "41"))
                                                                     (rule "closeFalse" (formula "41"))
                                                                  )
                                                                  (branch "Dependencies changed by write to {(s, p)}
"
                                                                     (rule "selectCreatedOfAnonEQ" (formula "40") (term "0,1,0,0") (ifseqformula "14"))
                                                                     (rule "replace_known_left" (formula "40") (term "0,0,0,0,0") (ifseqformula "3"))
                                                                     (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "51")) (ifInst ""  (formula "9")) (ifInst ""  (formula "17")))
                                                                     (rule "disjointToElementOf" (formula "40") (term "1") (inst "ov=_var51") (inst "fv=_var50"))
                                                                     (rule "elementOfSingleton" (formula "40") (term "0,0,0,0,1"))
                                                                     (rule "elementOfUnion" (formula "40") (term "0,1,0,0,1"))
                                                                     (builtin "One Step Simplification" (formula "40"))
                                                                     (rule "selectOfAnonEQ" (formula "40") (term "1,1,0,1,0,0,1") (ifseqformula "14"))
                                                                     (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "51")) (ifInst ""  (formula "9")))
                                                                     (rule "applyEq" (formula "40") (term "2,1,1,0,1,0,0,1") (ifseqformula "6"))
                                                                     (rule "elementOfSingleton" (formula "40") (term "0,1,1,0,1,0,0,1"))
                                                                     (builtin "One Step Simplification" (formula "40"))
                                                                     (rule "nnf_notOr" (formula "40") (term "1,0,0,1"))
                                                                     (rule "nnf_notAnd" (formula "40") (term "0,0,0,1"))
                                                                     (rule "cut_direct" (formula "40") (term "0"))
                                                                     (branch "CUT: wellFormed(heapAfter_build_0) TRUE"
                                                                        (builtin "One Step Simplification" (formula "41"))
                                                                        (rule "allRight" (formula "41") (inst "sk=_var51_0"))
                                                                        (rule "allRight" (formula "41") (inst "sk=_var50_0"))
                                                                        (rule "orRight" (formula "41"))
                                                                        (rule "orRight" (formula "41"))
                                                                        (rule "notRight" (formula "42"))
                                                                        (rule "notRight" (formula "42"))
                                                                        (rule "replace_known_left" (formula "43") (term "0,0") (ifseqformula "1"))
                                                                        (builtin "One Step Simplification" (formula "43"))
                                                                        (rule "false_right" (formula "43"))
                                                                        (builtin "Use Dependency Contract" (formula "55") (ifInst ""  (formula "34") (term "0")) (ifInst ""  (formula "34")) (contract "JML accessible clause [id: 0 / java.lang.Object::<inv> for List]"))
                                                                        (branch "Dependencies unchanged by write to {}
"
                                                                           (rule "selectCreatedOfAnonEQ" (formula "44") (term "0,1,0") (ifseqformula "25"))
                                                                           (rule "selectCreatedOfAnonEQ" (formula "44") (term "0,0,0,1,0") (ifseqformula "17"))
                                                                           (rule "andLeft" (formula "44"))
                                                                           (rule "andLeft" (formula "44"))
                                                                           (rule "andLeft" (formula "44"))
                                                                           (rule "notLeft" (formula "45"))
                                                                           (rule "andLeft" (formula "44"))
                                                                           (rule "replace_known_left" (formula "45") (term "0,0,0,0") (ifseqformula "12"))
                                                                           (builtin "One Step Simplification" (formula "45"))
                                                                           (rule "true_left" (formula "45"))
                                                                           (rule "replace_known_left" (formula "43") (term "1") (ifseqformula "28"))
                                                                           (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "57")))
                                                                           (rule "closeFalse" (formula "43"))
                                                                        )
                                                                        (branch "Dependencies changed by write to {}
"
                                                                           (rule "selectCreatedOfAnonEQ" (formula "43") (term "0,1,0") (ifseqformula "25"))
                                                                           (rule "selectCreatedOfAnonEQ" (formula "43") (term "0,0,0,1,0") (ifseqformula "17"))
                                                                           (rule "replace_known_right" (formula "43") (term "0,1,0,0") (ifseqformula "54"))
                                                                           (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "3")) (ifInst ""  (formula "12")) (ifInst ""  (formula "28")))
                                                                           (rule "wellFormedAnonEQ" (formula "43") (ifseqformula "34"))
                                                                           (rule "replace_known_left" (formula "43") (term "0") (ifseqformula "3"))
                                                                           (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "33")))
                                                                           (rule "closeTrue" (formula "43"))
                                                                        )
                                                                     )
                                                                     (branch "CUT: wellFormed(heapAfter_build_0) FALSE"
                                                                        (builtin "One Step Simplification" (formula "41"))
                                                                        (rule "false_right" (formula "41"))
                                                                        (rule "wellFormedAnonEQ" (formula "40") (ifseqformula "22"))
                                                                        (rule "replace_known_left" (formula "40") (term "1") (ifseqformula "21"))
                                                                        (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "3")))
                                                                        (rule "closeTrue" (formula "40"))
                                                                     )
                                                                  )
                                                               )
                                                               (branch "CUT: wellFormed(heapAfter_build) FALSE"
                                                                  (builtin "One Step Simplification" (formula "38"))
                                                                  (rule "false_right" (formula "38"))
                                                                  (rule "wellFormedAnonEQ" (formula "37") (ifseqformula "11"))
                                                                  (rule "replace_known_left" (formula "37") (term "0") (ifseqformula "5"))
                                                                  (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "10")))
                                                                  (rule "closeTrue" (formula "37"))
                                                               )
                                                            )
                                                         )
                                                      )
                                                      (branch "CUT: int::select(anonHeap_build_0, s, p) >= 1 + s.p FALSE"
                                                         (builtin "One Step Simplification" (formula "49"))
                                                         (rule "false_right" (formula "49"))
                                                         (rule "inEqSimp_geqRight" (formula "48"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "23") (term "0,0"))
                                                         (rule "mul_literals" (formula "23") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "23") (term "0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "23"))
                                                         (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "23") (term "0"))
                                                         (rule "inEqSimp_contradInEq1" (formula "23") (ifseqformula "15"))
                                                         (rule "andLeft" (formula "23"))
                                                         (rule "inEqSimp_homoInEq1" (formula "23"))
                                                         (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "23") (term "1,0"))
                                                         (rule "mul_literals" (formula "23") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "23") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "23") (term "0,0"))
                                                         (rule "add_literals" (formula "23") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "23") (term "0"))
                                                         (rule "add_literals" (formula "23") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "23") (term "1,0"))
                                                         (rule "add_literals" (formula "23") (term "0"))
                                                         (rule "leq_literals" (formula "23"))
                                                         (rule "closeFalse" (formula "23"))
                                                      )
                                                   )
                                                   (branch "CUT: boolean::select(anonHeap_build, null, <created>) = TRUE FALSE"
                                                      (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "cut_direct" (formula "48") (term "1,0,0"))
                                                      (branch "CUT: int::select(anonHeap_build_0, s, p) >= 1 + s.p TRUE"
                                                         (builtin "One Step Simplification" (formula "49"))
                                                         (rule "cut_direct" (formula "49") (term "0,0"))
                                                         (branch "CUT: java.lang.Object::<inv>(heapAfter_Tree, s) TRUE"
                                                            (builtin "One Step Simplification" (formula "50"))
                                                            (rule "andRight" (formula "50"))
                                                            (branch
                                                               (rule "allRight" (formula "50") (inst "sk=i_1"))
                                                               (rule "orRight" (formula "50"))
                                                               (rule "orRight" (formula "50"))
                                                               (rule "inEqSimp_leqRight" (formula "50"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_geqRight" (formula "51"))
                                                               (rule "polySimp_addComm0" (formula "52") (term "0,2,1,1"))
                                                               (rule "polySimp_addComm1" (formula "52") (term "1,2,0"))
                                                               (rule "polySimp_addComm0" (formula "52") (term "0,1,2,0"))
                                                               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                               (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
                                                               (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
                                                               (rule "inEqSimp_homoInEq0" (formula "52") (term "0,0"))
                                                               (rule "polySimp_addComm1" (formula "52") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "52") (term "0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                               (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "52") (term "0,0"))
                                                               (rule "polySimp_mulComm0" (formula "52") (term "1,0,0"))
                                                               (rule "polySimp_rightDist" (formula "52") (term "1,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "52") (term "1,1,0,0"))
                                                               (rule "polySimp_elimOne" (formula "52") (term "1,1,0,0"))
                                                               (rule "polySimp_rightDist" (formula "52") (term "0,1,0,0"))
                                                               (rule "mul_literals" (formula "52") (term "0,0,1,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "52") (term "1,0,1,0,0"))
                                                               (rule "polySimp_elimOne" (formula "52") (term "1,0,1,0,0"))
                                                               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                               (rule "ifthenelse_split" (formula "52") (term "0"))
                                                               (branch "int::select(anonHeap_build, s, p) >= 1 + i_1 + s.p TRUE"
                                                                  (rule "allLeft" (formula "21") (inst "t=i_1"))
                                                                  (rule "polySimp_homoEq" (formula "21") (term "1"))
                                                                  (rule "polySimp_addComm1" (formula "21") (term "0,1"))
                                                                  (rule "polySimp_addComm0" (formula "21") (term "0,2,0,1,0,0,1"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0"))
                                                                  (rule "polySimp_addComm1" (formula "21") (term "0,1,0"))
                                                                  (rule "polySimp_addComm0" (formula "21") (term "0,0,1,0"))
                                                                  (rule "polySimp_sepPosMonomial" (formula "21") (term "1"))
                                                                  (rule "polySimp_mulComm0" (formula "21") (term "1,1"))
                                                                  (rule "polySimp_rightDist" (formula "21") (term "1,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1"))
                                                                  (rule "polySimp_elimOne" (formula "21") (term "1,1,1"))
                                                                  (rule "polySimp_rightDist" (formula "21") (term "0,1,1"))
                                                                  (rule "mul_literals" (formula "21") (term "0,0,1,1"))
                                                                  (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "54"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1"))
                                                                  (rule "polySimp_mulComm0" (formula "21") (term "1,1"))
                                                                  (rule "polySimp_rightDist" (formula "21") (term "1,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1"))
                                                                  (rule "polySimp_elimOne" (formula "21") (term "1,1,1"))
                                                                  (rule "polySimp_mulAssoc" (formula "21") (term "0,1,1"))
                                                                  (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "21") (term "0,1,1"))
                                                                  (rule "polySimp_elimOne" (formula "21") (term "0,1,1"))
                                                                  (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "1"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                                                                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
                                                                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1"))
                                                                  (rule "polySimp_mulComm0" (formula "21") (term "0,1,0,0,1"))
                                                                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,1"))
                                                                  (rule "polySimp_addComm1" (formula "21") (term "0,0,0,1"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,0,0,1"))
                                                                  (rule "add_literals" (formula "21") (term "1,1,0,0,0,0,1"))
                                                                  (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,1"))
                                                                  (rule "add_literals" (formula "21") (term "0,0,0,0,1"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                                                                  (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                                                                  (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                                                  (rule "add_literals" (formula "21") (term "0,0,1"))
                                                                  (rule "leq_literals" (formula "21") (term "0,1"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "3"))
                                                                  (rule "qeq_literals" (formula "21") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "21"))
                                                                  (rule "closeFalse" (formula "21"))
                                                               )
                                                               (branch "int::select(anonHeap_build, s, p) >= 1 + i_1 + s.p FALSE"
                                                                  (rule "inEqSimp_geqRight" (formula "52"))
                                                                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                                                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                                                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                                                  (rule "add_zero_left" (formula "1") (term "0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                                  (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
                                                                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                                                                  (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "1"))
                                                                  (rule "polySimp_rightDist" (formula "19") (term "0,0"))
                                                                  (rule "mul_literals" (formula "19") (term "0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "19") (term "0"))
                                                                  (rule "polySimp_addComm1" (formula "19") (term "0,0"))
                                                                  (rule "polySimp_pullOutFactor2b" (formula "19") (term "0"))
                                                                  (rule "add_literals" (formula "19") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "19") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "19") (term "0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                                                                  (rule "mul_literals" (formula "19") (term "1"))
                                                                  (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "19"))
                                                                  (rule "leq_literals" (formula "3") (term "0"))
                                                                  (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "allLeft" (formula "29") (inst "t=add(add(i_1, int::select(heap, s, List::$p)),
    mul(int::select(anonHeap_build, s, List::$p),
        Z(neglit(1(#)))))"))
                                                                  (rule "polySimp_homoEq" (formula "29") (term "1"))
                                                                  (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                                                                  (rule "polySimp_addAssoc" (formula "29") (term "0,2,0,1,0,0,1"))
                                                                  (rule "polySimp_addComm0" (formula "29") (term "0,0,2,0,1,0,0,1"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,2,0,1,0,0,1"))
                                                                  (rule "add_literals" (formula "29") (term "1,1,0,2,0,1,0,0,1"))
                                                                  (rule "times_zero_1" (formula "29") (term "1,0,2,0,1,0,0,1"))
                                                                  (rule "add_zero_right" (formula "29") (term "0,2,0,1,0,0,1"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0"))
                                                                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0"))
                                                                  (rule "polySimp_rightDist" (formula "29") (term "1,0,1,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,0"))
                                                                  (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,0"))
                                                                  (rule "polySimp_rightDist" (formula "29") (term "0,1,0,1,0"))
                                                                  (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0,1,0"))
                                                                  (rule "polySimp_addComm1" (formula "29") (term "0,1,0"))
                                                                  (rule "inEqSimp_homoInEq0" (formula "29") (term "0,0"))
                                                                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0"))
                                                                  (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "29") (term "0,1,0,0,0"))
                                                                  (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0"))
                                                                  (rule "polySimp_addComm0" (formula "29") (term "0,0,0,1,0"))
                                                                  (rule "polySimp_pullOutFactor2b" (formula "29") (term "0,0,1,0"))
                                                                  (rule "add_literals" (formula "29") (term "1,1,0,0,1,0"))
                                                                  (rule "times_zero_1" (formula "29") (term "1,0,0,1,0"))
                                                                  (rule "add_zero_right" (formula "29") (term "0,0,1,0"))
                                                                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,0"))
                                                                  (rule "polySimp_sepPosMonomial" (formula "29") (term "1"))
                                                                  (rule "polySimp_mulComm0" (formula "29") (term "1,1"))
                                                                  (rule "polySimp_rightDist" (formula "29") (term "1,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1"))
                                                                  (rule "polySimp_elimOne" (formula "29") (term "1,1,1"))
                                                                  (rule "polySimp_rightDist" (formula "29") (term "0,1,1"))
                                                                  (rule "mul_literals" (formula "29") (term "0,0,1,1"))
                                                                  (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "54"))
                                                                  (builtin "One Step Simplification" (formula "29"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0"))
                                                                  (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                                                                  (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                                                                  (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                                                                  (rule "polySimp_rightDist" (formula "29") (term "0,1,0"))
                                                                  (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0"))
                                                                  (rule "mul_literals" (formula "29") (term "0,0,1,0"))
                                                                  (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1"))
                                                                  (rule "polySimp_mulComm0" (formula "29") (term "1,1"))
                                                                  (rule "polySimp_rightDist" (formula "29") (term "1,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1"))
                                                                  (rule "polySimp_elimOne" (formula "29") (term "1,1,1"))
                                                                  (rule "polySimp_mulAssoc" (formula "29") (term "0,1,1"))
                                                                  (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "29") (term "0,1,1"))
                                                                  (rule "polySimp_elimOne" (formula "29") (term "0,1,1"))
                                                                  (rule "inEqSimp_contradInEq0" (formula "29") (term "0") (ifseqformula "1"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "29") (term "0,0"))
                                                                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                                                                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0"))
                                                                  (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,0"))
                                                                  (rule "polySimp_addComm1" (formula "29") (term "0,0,0,0"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0"))
                                                                  (rule "add_literals" (formula "29") (term "1,1,0,0,0"))
                                                                  (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
                                                                  (rule "add_zero_right" (formula "29") (term "0,0,0"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0"))
                                                                  (rule "add_literals" (formula "29") (term "1,1,0,0,0"))
                                                                  (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
                                                                  (rule "add_literals" (formula "29") (term "0,0,0"))
                                                                  (rule "leq_literals" (formula "29") (term "0,0"))
                                                                  (builtin "One Step Simplification" (formula "29"))
                                                                  (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "29"))
                                                                  (rule "andLeft" (formula "2"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "2"))
                                                                  (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                                  (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                                  (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
                                                                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                                  (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
                                                                  (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                                                                  (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                                                                  (rule "add_zero_right" (formula "2") (term "0,0,0"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                                  (rule "add_literals" (formula "2") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "2") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "2") (term "0"))
                                                                  (rule "leq_literals" (formula "2"))
                                                                  (rule "closeFalse" (formula "2"))
                                                               )
                                                            )
                                                            (branch
                                                               (rule "allRight" (formula "50") (inst "sk=f_3"))
                                                               (rule "allRight" (formula "50") (inst "sk=o_3"))
                                                               (rule "orRight" (formula "50"))
                                                               (rule "orRight" (formula "50"))
                                                               (rule "replace_known_right" (formula "52") (term "0,0,0,2,0") (ifseqformula "50"))
                                                               (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "50")) (ifInst ""  (formula "51")))
                                                               (rule "ifthenelse_split" (formula "52") (term "0"))
                                                               (branch " !o_3 = null & ! if ( if (o_3.<created> = TRUE) then (TRUE) else (boolean::select(anonHeap_build, o_3, <created>)) = TRUE) then (TRUE) else (boolean::select(anonHeap_build_0, o_3, <created>)) = TRUE TRUE"
                                                                  (rule "andLeft" (formula "1"))
                                                                  (rule "notLeft" (formula "1"))
                                                                  (rule "notLeft" (formula "1"))
                                                                  (rule "replace_known_right" (formula "53") (term "0,0") (ifseqformula "38"))
                                                                  (builtin "One Step Simplification" (formula "53"))
                                                                  (rule "notRight" (formula "53"))
                                                                  (rule "replace_known_left" (formula "38") (term "0,0,0,0") (ifseqformula "1"))
                                                                  (builtin "One Step Simplification" (formula "38"))
                                                                  (rule "closeTrue" (formula "38"))
                                                               )
                                                               (branch " !o_3 = null & ! if ( if (o_3.<created> = TRUE) then (TRUE) else (boolean::select(anonHeap_build, o_3, <created>)) = TRUE) then (TRUE) else (boolean::select(anonHeap_build_0, o_3, <created>)) = TRUE FALSE"
                                                                  (rule "ifthenelse_split" (formula "53") (term "0,0,1,0,0"))
                                                                  (branch "o_3.<created> = TRUE TRUE"
                                                                     (builtin "One Step Simplification" (formula "54"))
                                                                     (rule "closeTrue" (formula "54"))
                                                                  )
                                                                  (branch "o_3.<created> = TRUE FALSE"
                                                                     (rule "replace_known_right" (formula "51") (term "0,1") (ifseqformula "53"))
                                                                     (builtin "One Step Simplification" (formula "51"))
                                                                     (rule "notRight" (formula "51"))
                                                                     (rule "replace_known_left" (formula "54") (term "0,0,0,0") (ifseqformula "1"))
                                                                     (builtin "One Step Simplification" (formula "54"))
                                                                     (rule "closeTrue" (formula "54"))
                                                                  )
                                                               )
                                                            )
                                                         )
                                                         (branch "CUT: java.lang.Object::<inv>(heapAfter_Tree, s) FALSE"
                                                            (builtin "One Step Simplification" (formula "50"))
                                                            (rule "false_right" (formula "50"))
                                                            (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                                            (builtin "Use Dependency Contract" (formula "14") (ifInst ""  (formula "8")) (ifInst ""  (formula "11")) (contract "JML accessible clause [id: 0 / java.lang.Object::<inv> for List]"))
                                                            (branch "Dependencies unchanged by write to {(s, p)}
"
                                                               (rule "andLeft" (formula "37"))
                                                               (rule "andLeft" (formula "37"))
                                                               (rule "andLeft" (formula "37"))
                                                               (rule "andLeft" (formula "37"))
                                                               (rule "andLeft" (formula "37"))
                                                               (rule "notLeft" (formula "38"))
                                                               (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "14"))
                                                               (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "8")))
                                                               (rule "true_left" (formula "36"))
                                                               (rule "applyEq" (formula "37") (term "0,1,1") (ifseqformula "3"))
                                                               (rule "disjointToElementOf" (formula "37") (inst "ov=_var47") (inst "fv=_var46"))
                                                               (rule "elementOfSingleton" (formula "37") (term "0,0,0,0"))
                                                               (rule "elementOfUnion" (formula "37") (term "0,1,0,0"))
                                                               (builtin "One Step Simplification" (formula "37"))
                                                               (rule "nnf_notAnd" (formula "37") (term "0,0,0"))
                                                               (rule "nnf_notOr" (formula "37") (term "1,0,0"))
                                                               (rule "commute_and" (formula "37") (term "1,0,0"))
                                                               (rule "cnf_rightDist" (formula "37") (term "0,0"))
                                                               (rule "distr_forallAnd" (formula "37") (term "0"))
                                                               (rule "distr_forallAnd" (formula "37"))
                                                               (rule "andLeft" (formula "37"))
                                                               (rule "commute_or_2" (formula "37") (term "0,0"))
                                                               (builtin "One Step Simplification" (formula "37"))
                                                               (rule "instanceof_static_type" (formula "37") (term "0,0,1,0"))
                                                               (builtin "One Step Simplification" (formula "37"))
                                                               (rule "typeEqDerived2" (formula "37") (term "0,0,1") (ifseqformula "3"))
                                                               (builtin "One Step Simplification" (formula "37"))
                                                               (rule "notLeft" (formula "37"))
                                                               (rule "castDel" (formula "38") (term "0"))
                                                               (rule "eqSymm" (formula "38"))
                                                               (rule "shift_paren_or" (formula "37") (term "0,0"))
                                                               (builtin "One Step Simplification" (formula "37"))
                                                               (rule "instanceof_static_type" (formula "37") (term "0,0,1,0"))
                                                               (builtin "One Step Simplification" (formula "37"))
                                                               (rule "notLeft" (formula "37"))
                                                               (rule "instanceof_static_type" (formula "37") (term "0"))
                                                               (builtin "One Step Simplification" (formula "37"))
                                                               (rule "closeTrue" (formula "37"))
                                                            )
                                                            (branch "Dependencies changed by write to {(s, p)}
"
                                                               (rule "replace_known_left" (formula "36") (term "1,0") (ifseqformula "8"))
                                                               (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "5")) (ifInst ""  (formula "48")) (ifInst ""  (formula "6")))
                                                               (rule "applyEq" (formula "36") (term "0,1,1,1") (ifseqformula "3"))
                                                               (rule "disjointToElementOf" (formula "36") (term "1") (inst "ov=_var41") (inst "fv=_var40"))
                                                               (rule "elementOfSingleton" (formula "36") (term "0,0,0,0,1"))
                                                               (rule "elementOfUnion" (formula "36") (term "0,1,0,0,1"))
                                                               (builtin "One Step Simplification" (formula "36"))
                                                               (rule "nnf_notOr" (formula "36") (term "1,0,0,1"))
                                                               (rule "nnf_notAnd" (formula "36") (term "0,0,0,1"))
                                                               (rule "cut_direct" (formula "36") (term "0"))
                                                               (branch "CUT: wellFormed(heapAfter_build) TRUE"
                                                                  (builtin "One Step Simplification" (formula "37"))
                                                                  (rule "allRight" (formula "37") (inst "sk=_var41_0"))
                                                                  (rule "allRight" (formula "37") (inst "sk=_var40_0"))
                                                                  (rule "orRight" (formula "37"))
                                                                  (rule "orRight" (formula "37"))
                                                                  (rule "notRight" (formula "37"))
                                                                  (rule "notRight" (formula "38"))
                                                                  (rule "replace_known_left" (formula "39") (term "0,0") (ifseqformula "2"))
                                                                  (builtin "One Step Simplification" (formula "39"))
                                                                  (rule "false_right" (formula "39"))
                                                                  (builtin "Use Dependency Contract" (formula "25") (ifInst ""  (formula "17")) (ifInst ""  (formula "22")) (contract "JML accessible clause [id: 0 / java.lang.Object::<inv> for List]"))
                                                                  (branch "Dependencies unchanged by write to {(s, p)}
"
                                                                     (rule "selectCreatedOfAnonEQ" (formula "40") (term "0,1,0,0") (ifseqformula "14"))
                                                                     (rule "andLeft" (formula "40"))
                                                                     (rule "andLeft" (formula "40"))
                                                                     (rule "andLeft" (formula "40"))
                                                                     (rule "andLeft" (formula "40"))
                                                                     (rule "notLeft" (formula "41"))
                                                                     (rule "andLeft" (formula "40"))
                                                                     (rule "replace_known_left" (formula "41") (term "0,0") (ifseqformula "9"))
                                                                     (builtin "One Step Simplification" (formula "41"))
                                                                     (rule "true_left" (formula "41"))
                                                                     (rule "replace_known_left" (formula "39") (term "1") (ifseqformula "17"))
                                                                     (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "25")))
                                                                     (rule "true_left" (formula "39"))
                                                                     (rule "disjointToElementOf" (formula "40") (inst "ov=_var45") (inst "fv=_var44"))
                                                                     (rule "elementOfSingleton" (formula "40") (term "0,0,0,0"))
                                                                     (rule "elementOfUnion" (formula "40") (term "0,1,0,0"))
                                                                     (builtin "One Step Simplification" (formula "40"))
                                                                     (rule "selectOfAnonEQ" (formula "40") (term "1,1,0,1,0,0") (ifseqformula "14"))
                                                                     (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "52")) (ifInst ""  (formula "9")))
                                                                     (rule "applyEq" (formula "40") (term "2,1,1,0,1,0,0") (ifseqformula "6"))
                                                                     (rule "elementOfSingleton" (formula "40") (term "0,1,1,0,1,0,0"))
                                                                     (builtin "One Step Simplification" (formula "40"))
                                                                     (rule "nnf_notAnd" (formula "40") (term "0,0,0"))
                                                                     (rule "nnf_notOr" (formula "40") (term "1,0,0"))
                                                                     (rule "commute_and" (formula "40") (term "1,0,0"))
                                                                     (rule "cnf_rightDist" (formula "40") (term "0,0"))
                                                                     (rule "distr_forallAnd" (formula "40") (term "0"))
                                                                     (rule "distr_forallAnd" (formula "40"))
                                                                     (rule "andLeft" (formula "40"))
                                                                     (rule "commute_or_2" (formula "40") (term "0,0"))
                                                                     (builtin "One Step Simplification" (formula "40"))
                                                                     (rule "typeEqDerived2" (formula "40") (term "0,0,1,0") (ifseqformula "1"))
                                                                     (builtin "One Step Simplification" (formula "40"))
                                                                     (rule "typeEqDerived2" (formula "40") (term "0,0,1") (ifseqformula "6"))
                                                                     (builtin "One Step Simplification" (formula "40"))
                                                                     (rule "notLeft" (formula "40"))
                                                                     (rule "castDel" (formula "41") (term "0"))
                                                                     (rule "eqSymm" (formula "41"))
                                                                     (rule "shift_paren_or" (formula "40") (term "0,0"))
                                                                     (builtin "One Step Simplification" (formula "40"))
                                                                     (rule "typeEqDerived2" (formula "40") (term "0,0,1,0") (ifseqformula "1"))
                                                                     (builtin "One Step Simplification" (formula "40"))
                                                                     (rule "typeEqDerived2" (formula "40") (term "0,0") (ifseqformula "2"))
                                                                     (builtin "One Step Simplification" (formula "40"))
                                                                     (rule "closeFalse" (formula "40"))
                                                                  )
                                                                  (branch "Dependencies changed by write to {(s, p)}
"
                                                                     (rule "selectCreatedOfAnonEQ" (formula "39") (term "0,1,0,0") (ifseqformula "14"))
                                                                     (rule "replace_known_left" (formula "39") (term "0,0,0,0,0") (ifseqformula "3"))
                                                                     (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "51")) (ifInst ""  (formula "9")) (ifInst ""  (formula "17")))
                                                                     (rule "disjointToElementOf" (formula "39") (term "1") (inst "ov=_var43") (inst "fv=_var42"))
                                                                     (rule "elementOfSingleton" (formula "39") (term "0,0,0,0,1"))
                                                                     (rule "elementOfUnion" (formula "39") (term "0,1,0,0,1"))
                                                                     (builtin "One Step Simplification" (formula "39"))
                                                                     (rule "selectOfAnonEQ" (formula "39") (term "1,1,0,1,0,0,1") (ifseqformula "14"))
                                                                     (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "51")) (ifInst ""  (formula "9")))
                                                                     (rule "applyEq" (formula "39") (term "2,1,1,0,1,0,0,1") (ifseqformula "6"))
                                                                     (rule "elementOfSingleton" (formula "39") (term "0,1,1,0,1,0,0,1"))
                                                                     (builtin "One Step Simplification" (formula "39"))
                                                                     (rule "nnf_notAnd" (formula "39") (term "0,0,0,1"))
                                                                     (rule "nnf_notOr" (formula "39") (term "1,0,0,1"))
                                                                     (rule "cut_direct" (formula "39") (term "0"))
                                                                     (branch "CUT: wellFormed(heapAfter_build_0) TRUE"
                                                                        (builtin "One Step Simplification" (formula "40"))
                                                                        (rule "allRight" (formula "40") (inst "sk=_var43_0"))
                                                                        (rule "allRight" (formula "40") (inst "sk=_var42_0"))
                                                                        (rule "orRight" (formula "40"))
                                                                        (rule "orRight" (formula "40"))
                                                                        (rule "notRight" (formula "40"))
                                                                        (rule "notRight" (formula "41"))
                                                                        (rule "replace_known_left" (formula "42") (term "0,0") (ifseqformula "2"))
                                                                        (builtin "One Step Simplification" (formula "42"))
                                                                        (rule "false_right" (formula "42"))
                                                                        (builtin "Use Dependency Contract" (formula "55") (ifInst ""  (formula "33") (term "0")) (ifInst ""  (formula "33")) (contract "JML accessible clause [id: 0 / java.lang.Object::<inv> for List]"))
                                                                        (branch "Dependencies unchanged by write to {}
"
                                                                           (rule "selectCreatedOfAnonEQ" (formula "43") (term "0,1,0") (ifseqformula "25"))
                                                                           (rule "selectCreatedOfAnonEQ" (formula "43") (term "0,0,0,1,0") (ifseqformula "17"))
                                                                           (rule "andLeft" (formula "43"))
                                                                           (rule "andLeft" (formula "43"))
                                                                           (rule "andLeft" (formula "43"))
                                                                           (rule "andLeft" (formula "43"))
                                                                           (rule "notLeft" (formula "44"))
                                                                           (rule "replace_known_left" (formula "44") (term "0,0,0,0") (ifseqformula "12"))
                                                                           (builtin "One Step Simplification" (formula "44"))
                                                                           (rule "true_left" (formula "44"))
                                                                           (rule "replace_known_left" (formula "42") (term "1") (ifseqformula "28"))
                                                                           (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "57")))
                                                                           (rule "closeFalse" (formula "42"))
                                                                        )
                                                                        (branch "Dependencies changed by write to {}
"
                                                                           (rule "selectCreatedOfAnonEQ" (formula "42") (term "0,1,0") (ifseqformula "25"))
                                                                           (rule "selectCreatedOfAnonEQ" (formula "42") (term "0,0,0,1,0") (ifseqformula "17"))
                                                                           (rule "replace_known_right" (formula "42") (term "0,1,0,0") (ifseqformula "54"))
                                                                           (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "3")) (ifInst ""  (formula "12")) (ifInst ""  (formula "28")))
                                                                           (rule "wellFormedAnonEQ" (formula "42") (ifseqformula "33"))
                                                                           (rule "replace_known_left" (formula "42") (term "1") (ifseqformula "32"))
                                                                           (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "3")))
                                                                           (rule "closeTrue" (formula "42"))
                                                                        )
                                                                     )
                                                                     (branch "CUT: wellFormed(heapAfter_build_0) FALSE"
                                                                        (builtin "One Step Simplification" (formula "40"))
                                                                        (rule "false_right" (formula "40"))
                                                                        (rule "wellFormedAnonEQ" (formula "39") (ifseqformula "22"))
                                                                        (rule "replace_known_left" (formula "39") (term "1") (ifseqformula "21"))
                                                                        (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "3")))
                                                                        (rule "closeTrue" (formula "39"))
                                                                     )
                                                                  )
                                                               )
                                                               (branch "CUT: wellFormed(heapAfter_build) FALSE"
                                                                  (builtin "One Step Simplification" (formula "37"))
                                                                  (rule "false_right" (formula "37"))
                                                                  (rule "wellFormedAnonEQ" (formula "36") (ifseqformula "11"))
                                                                  (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "5"))
                                                                  (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "10")))
                                                                  (rule "closeTrue" (formula "36"))
                                                               )
                                                            )
                                                         )
                                                      )
                                                      (branch "CUT: int::select(anonHeap_build_0, s, p) >= 1 + s.p FALSE"
                                                         (builtin "One Step Simplification" (formula "49"))
                                                         (rule "false_right" (formula "49"))
                                                         (rule "inEqSimp_geqRight" (formula "48"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "23") (term "0,0"))
                                                         (rule "mul_literals" (formula "23") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "23") (term "0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "23"))
                                                         (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "23") (term "0"))
                                                         (rule "inEqSimp_contradInEq1" (formula "23") (ifseqformula "15"))
                                                         (rule "andLeft" (formula "23"))
                                                         (rule "inEqSimp_homoInEq1" (formula "23"))
                                                         (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "23") (term "1,0"))
                                                         (rule "mul_literals" (formula "23") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "23") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "23") (term "0,0"))
                                                         (rule "add_literals" (formula "23") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "23") (term "0"))
                                                         (rule "add_literals" (formula "23") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "23") (term "1,0"))
                                                         (rule "add_literals" (formula "23") (term "0"))
                                                         (rule "leq_literals" (formula "23"))
                                                         (rule "closeFalse" (formula "23"))
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: s.a = null FALSE"
                                             (builtin "One Step Simplification" (formula "2"))
                                             (rule "replace_known_left" (formula "25") (term "1,0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "38")))
                                             (rule "true_left" (formula "25"))
                                             (rule "replace_known_left" (formula "17") (term "0,1,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "replace_known_left" (formula "26") (term "0,1,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "37")))
                                             (rule "true_left" (formula "26"))
                                             (rule "replace_known_left" (formula "27") (term "1,0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "36")))
                                             (rule "true_left" (formula "27"))
                                             (rule "replace_known_right" (formula "25") (term "0,1,0") (ifseqformula "35"))
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "true_left" (formula "25"))
                                             (rule "replace_known_left" (formula "25") (term "0,1,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "replace_known_right" (formula "16") (term "0,1,0") (ifseqformula "34"))
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "true_left" (formula "16"))
                                             (rule "replace_known_left" (formula "44") (term "0,0,0,0,0,1,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "33")) (ifInst ""  (formula "33")) (ifInst ""  (formula "2")) (ifInst ""  (formula "33")) (ifInst ""  (formula "2")))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "0") (ifseqformula "25"))
                                             (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "31"))
                                             (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "42"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "31"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "32") (term "0") (ifseqformula "25"))
                                             (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "33"))
                                             (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "41"))
                                             (builtin "One Step Simplification" (formula "32"))
                                             (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "33"))
                                             (rule "ifthenelse_split" (formula "37") (term "0"))
                                             (branch "self_4.<created> = TRUE TRUE"
                                                (builtin "One Step Simplification" (formula "38"))
                                                (rule "closeTrue" (formula "38"))
                                             )
                                             (branch "self_4.<created> = TRUE FALSE"
                                                (rule "replace_known_right" (formula "47") (term "0,1,0") (ifseqformula "37"))
                                                (builtin "One Step Simplification" (formula "47"))
                                                (rule "cut_direct" (formula "47") (term "1,0,0"))
                                                (branch "CUT: int::select(anonHeap_build_0, s, p) >= 1 + s.p TRUE"
                                                   (builtin "One Step Simplification" (formula "48"))
                                                   (rule "cut_direct" (formula "48") (term "0,0"))
                                                   (branch "CUT: java.lang.Object::<inv>(heapAfter_Tree, s) TRUE"
                                                      (builtin "One Step Simplification" (formula "49"))
                                                      (rule "andRight" (formula "49"))
                                                      (branch
                                                         (rule "allRight" (formula "49") (inst "sk=i_0"))
                                                         (rule "orRight" (formula "49"))
                                                         (rule "orRight" (formula "49"))
                                                         (rule "inEqSimp_leqRight" (formula "49"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_geqRight" (formula "50"))
                                                         (rule "polySimp_addComm1" (formula "51") (term "1,2,0"))
                                                         (rule "polySimp_addComm0" (formula "51") (term "0,2,1,1"))
                                                         (rule "polySimp_addComm0" (formula "51") (term "0,1,2,0"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                         (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
                                                         (rule "inEqSimp_homoInEq0" (formula "51") (term "0,0"))
                                                         (rule "polySimp_addComm1" (formula "51") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "51") (term "0,0,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                         (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "51") (term "0,0"))
                                                         (rule "polySimp_mulComm0" (formula "51") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "51") (term "1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "51") (term "1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "51") (term "1,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "51") (term "0,1,0,0"))
                                                         (rule "mul_literals" (formula "51") (term "0,0,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "51") (term "1,0,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "51") (term "1,0,1,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                         (rule "ifthenelse_split" (formula "51") (term "0"))
                                                         (branch "int::select(anonHeap_build, s, p) >= 1 + i_0 + s.p TRUE"
                                                            (rule "allLeft" (formula "21") (inst "t=i_0"))
                                                            (rule "polySimp_homoEq" (formula "21") (term "1"))
                                                            (rule "polySimp_addComm0" (formula "21") (term "0,2,0,1,0,1"))
                                                            (rule "polySimp_addComm1" (formula "21") (term "0,1"))
                                                            (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0"))
                                                            (rule "polySimp_addComm1" (formula "21") (term "0,1,0"))
                                                            (rule "polySimp_addComm0" (formula "21") (term "0,0,1,0"))
                                                            (rule "polySimp_sepPosMonomial" (formula "21") (term "1"))
                                                            (rule "polySimp_mulComm0" (formula "21") (term "1,1"))
                                                            (rule "polySimp_rightDist" (formula "21") (term "1,1"))
                                                            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1"))
                                                            (rule "polySimp_elimOne" (formula "21") (term "1,1,1"))
                                                            (rule "polySimp_rightDist" (formula "21") (term "0,1,1"))
                                                            (rule "mul_literals" (formula "21") (term "0,0,1,1"))
                                                            (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "53"))
                                                            (builtin "One Step Simplification" (formula "21"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1"))
                                                            (rule "polySimp_mulComm0" (formula "21") (term "1,1"))
                                                            (rule "polySimp_rightDist" (formula "21") (term "1,1"))
                                                            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1"))
                                                            (rule "polySimp_elimOne" (formula "21") (term "1,1,1"))
                                                            (rule "polySimp_mulAssoc" (formula "21") (term "0,1,1"))
                                                            (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,1"))
                                                            (rule "polySimp_mulLiterals" (formula "21") (term "0,1,1"))
                                                            (rule "polySimp_elimOne" (formula "21") (term "0,1,1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "1"))
                                                            (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                                                            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
                                                            (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1"))
                                                            (rule "polySimp_mulComm0" (formula "21") (term "0,1,0,0,1"))
                                                            (rule "polySimp_addAssoc" (formula "21") (term "0,0,1"))
                                                            (rule "polySimp_addComm1" (formula "21") (term "0,0,0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,0,0,1"))
                                                            (rule "add_literals" (formula "21") (term "1,1,0,0,0,0,1"))
                                                            (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,1"))
                                                            (rule "add_literals" (formula "21") (term "0,0,0,0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                                                            (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                                            (rule "add_literals" (formula "21") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "21") (term "0,1"))
                                                            (builtin "One Step Simplification" (formula "21"))
                                                            (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "3"))
                                                            (rule "qeq_literals" (formula "21") (term "0"))
                                                            (builtin "One Step Simplification" (formula "21"))
                                                            (rule "closeFalse" (formula "21"))
                                                         )
                                                         (branch "int::select(anonHeap_build, s, p) >= 1 + i_0 + s.p FALSE"
                                                            (rule "inEqSimp_geqRight" (formula "51"))
                                                            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                            (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                                            (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                            (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                            (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
                                                            (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                                                            (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "19") (term "0,0"))
                                                            (rule "mul_literals" (formula "19") (term "0,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "19") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "19") (term "0,0"))
                                                            (rule "polySimp_pullOutFactor2b" (formula "19") (term "0"))
                                                            (rule "add_literals" (formula "19") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "19") (term "1,0"))
                                                            (rule "add_zero_right" (formula "19") (term "0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                                                            (rule "mul_literals" (formula "19") (term "1"))
                                                            (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "19"))
                                                            (rule "leq_literals" (formula "3") (term "0"))
                                                            (builtin "One Step Simplification" (formula "3"))
                                                            (rule "true_left" (formula "3"))
                                                            (rule "allLeft" (formula "29") (inst "t=add(add(i_0, int::select(heap, s, List::$p)),
    mul(int::select(anonHeap_build, s, List::$p),
        Z(neglit(1(#)))))"))
                                                            (rule "polySimp_homoEq" (formula "29") (term "1"))
                                                            (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                                                            (rule "polySimp_addAssoc" (formula "29") (term "0,2,0,1,0,0,1"))
                                                            (rule "polySimp_addComm0" (formula "29") (term "0,0,2,0,1,0,0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,2,0,1,0,0,1"))
                                                            (rule "add_literals" (formula "29") (term "1,1,0,2,0,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "29") (term "1,0,2,0,1,0,0,1"))
                                                            (rule "add_zero_right" (formula "29") (term "0,2,0,1,0,0,1"))
                                                            (rule "inEqSimp_homoInEq0" (formula "29") (term "0,0"))
                                                            (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                                                            (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0"))
                                                            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0"))
                                                            (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0"))
                                                            (rule "polySimp_rightDist" (formula "29") (term "0,1,0,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0,0,0"))
                                                            (rule "inEqSimp_homoInEq1" (formula "29") (term "1,0"))
                                                            (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0"))
                                                            (rule "polySimp_rightDist" (formula "29") (term "1,0,1,0"))
                                                            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,0"))
                                                            (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,0"))
                                                            (rule "polySimp_rightDist" (formula "29") (term "0,1,0,1,0"))
                                                            (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0,1,0"))
                                                            (rule "polySimp_addComm1" (formula "29") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "29") (term "0,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0"))
                                                            (rule "polySimp_addComm0" (formula "29") (term "0,0,0,1,0"))
                                                            (rule "polySimp_pullOutFactor2b" (formula "29") (term "0,0,1,0"))
                                                            (rule "add_literals" (formula "29") (term "1,1,0,0,1,0"))
                                                            (rule "times_zero_1" (formula "29") (term "1,0,0,1,0"))
                                                            (rule "add_zero_right" (formula "29") (term "0,0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,0"))
                                                            (rule "polySimp_sepPosMonomial" (formula "29") (term "1"))
                                                            (rule "polySimp_mulComm0" (formula "29") (term "1,1"))
                                                            (rule "polySimp_rightDist" (formula "29") (term "1,1"))
                                                            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1"))
                                                            (rule "polySimp_elimOne" (formula "29") (term "1,1,1"))
                                                            (rule "polySimp_rightDist" (formula "29") (term "0,1,1"))
                                                            (rule "mul_literals" (formula "29") (term "0,0,1,1"))
                                                            (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "53"))
                                                            (builtin "One Step Simplification" (formula "29"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1"))
                                                            (rule "polySimp_mulComm0" (formula "29") (term "1,1"))
                                                            (rule "polySimp_rightDist" (formula "29") (term "1,1"))
                                                            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1"))
                                                            (rule "polySimp_elimOne" (formula "29") (term "1,1,1"))
                                                            (rule "polySimp_mulAssoc" (formula "29") (term "0,1,1"))
                                                            (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,1"))
                                                            (rule "polySimp_mulLiterals" (formula "29") (term "0,1,1"))
                                                            (rule "polySimp_elimOne" (formula "29") (term "0,1,1"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0"))
                                                            (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                                                            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                                                            (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                                                            (rule "polySimp_rightDist" (formula "29") (term "0,1,0"))
                                                            (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0"))
                                                            (rule "mul_literals" (formula "29") (term "0,0,1,0"))
                                                            (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0"))
                                                            (rule "inEqSimp_contradInEq0" (formula "29") (term "0") (ifseqformula "1"))
                                                            (rule "inEqSimp_homoInEq1" (formula "29") (term "0,0"))
                                                            (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                                                            (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "29") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "29") (term "0,0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0"))
                                                            (rule "add_literals" (formula "29") (term "1,1,0,0,0"))
                                                            (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
                                                            (rule "add_zero_right" (formula "29") (term "0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0"))
                                                            (rule "add_literals" (formula "29") (term "1,1,0,0,0"))
                                                            (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
                                                            (rule "add_zero_right" (formula "29") (term "0,0,0"))
                                                            (rule "leq_literals" (formula "29") (term "0,0"))
                                                            (builtin "One Step Simplification" (formula "29"))
                                                            (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "29"))
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "inEqSimp_homoInEq1" (formula "2"))
                                                            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                            (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                            (rule "add_literals" (formula "2") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "2") (term "1,0"))
                                                            (rule "add_zero_right" (formula "2") (term "0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                            (rule "add_literals" (formula "2") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "2") (term "1,0"))
                                                            (rule "add_literals" (formula "2") (term "0"))
                                                            (rule "leq_literals" (formula "2"))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                      )
                                                      (branch
                                                         (rule "allRight" (formula "49") (inst "sk=f_2"))
                                                         (rule "allRight" (formula "49") (inst "sk=o_2"))
                                                         (rule "orRight" (formula "49"))
                                                         (rule "orRight" (formula "49"))
                                                         (rule "replace_known_right" (formula "51") (term "0,0,0,2,2,0") (ifseqformula "49"))
                                                         (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "49")) (ifInst ""  (formula "50")))
                                                         (rule "ifthenelse_split" (formula "51") (term "0,0,1,0,0"))
                                                         (branch " if (o_2.<created> = TRUE) then (TRUE) else (boolean::select(anonHeap_build, o_2, <created>)) = TRUE TRUE"
                                                            (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "1")))
                                                            (rule "closeTrue" (formula "52"))
                                                         )
                                                         (branch " if (o_2.<created> = TRUE) then (TRUE) else (boolean::select(anonHeap_build, o_2, <created>)) = TRUE FALSE"
                                                            (rule "replace_known_right" (formula "52") (term "0,1,0,2,0") (ifseqformula "51"))
                                                            (builtin "One Step Simplification" (formula "52"))
                                                            (rule "ifthenelse_negated" (formula "52") (term "2,0"))
                                                            (rule "ifthenelse_split" (formula "51") (term "0"))
                                                            (branch "o_2.<created> = TRUE TRUE"
                                                               (builtin "One Step Simplification" (formula "52"))
                                                               (rule "closeTrue" (formula "52"))
                                                            )
                                                            (branch "o_2.<created> = TRUE FALSE"
                                                               (rule "replace_known_right" (formula "50") (term "0,1") (ifseqformula "51"))
                                                               (builtin "One Step Simplification" (formula "50"))
                                                               (rule "notRight" (formula "50"))
                                                               (rule "replace_known_left" (formula "53") (term "0,2,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "1")))
                                                               (rule "closeTrue" (formula "53"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                   (branch "CUT: java.lang.Object::<inv>(heapAfter_Tree, s) FALSE"
                                                      (builtin "One Step Simplification" (formula "49"))
                                                      (rule "false_right" (formula "49"))
                                                      (builtin "Use Dependency Contract" (formula "14") (ifInst ""  (formula "8")) (ifInst ""  (formula "11")) (contract "JML accessible clause [id: 0 / java.lang.Object::<inv> for List]"))
                                                      (branch "Dependencies unchanged by write to {(s, p)}
"
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "notLeft" (formula "38"))
                                                         (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "14"))
                                                         (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "8")))
                                                         (rule "true_left" (formula "36"))
                                                         (rule "disjointToElementOf" (formula "37") (inst "ov=_var39") (inst "fv=_var38"))
                                                         (rule "elementOfSingleton" (formula "37") (term "0,0,0,0"))
                                                         (rule "elementOfUnion" (formula "37") (term "0,1,0,0"))
                                                         (builtin "One Step Simplification" (formula "37"))
                                                         (rule "nnf_notAnd" (formula "37") (term "0,0,0"))
                                                         (rule "nnf_notOr" (formula "37") (term "1,0,0"))
                                                         (rule "cnf_rightDist" (formula "37") (term "0,0"))
                                                         (rule "distr_forallAnd" (formula "37") (term "0"))
                                                         (rule "distr_forallAnd" (formula "37"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "commute_or_2" (formula "37") (term "0,0"))
                                                         (builtin "One Step Simplification" (formula "37"))
                                                         (rule "instanceof_static_type" (formula "37") (term "0,0,1,0"))
                                                         (builtin "One Step Simplification" (formula "37"))
                                                         (rule "notLeft" (formula "37"))
                                                         (rule "instanceof_static_type" (formula "38") (term "0"))
                                                         (builtin "One Step Simplification" (formula "38"))
                                                         (rule "closeTrue" (formula "38"))
                                                      )
                                                      (branch "Dependencies changed by write to {(s, p)}
"
                                                         (rule "replace_known_right" (formula "36") (term "0,1,0,0,0") (ifseqformula "47"))
                                                         (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "8")))
                                                         (rule "disjointToElementOf" (formula "36") (term "1") (inst "ov=_var33") (inst "fv=_var32"))
                                                         (rule "elementOfSingleton" (formula "36") (term "0,0,0,0,1"))
                                                         (rule "elementOfUnion" (formula "36") (term "0,1,0,0,1"))
                                                         (builtin "One Step Simplification" (formula "36"))
                                                         (rule "nnf_notOr" (formula "36") (term "1,0,0,1"))
                                                         (rule "nnf_notAnd" (formula "36") (term "0,0,0,1"))
                                                         (rule "cut_direct" (formula "36") (term "0"))
                                                         (branch "CUT: wellFormed(heapAfter_build) TRUE"
                                                            (builtin "One Step Simplification" (formula "37"))
                                                            (rule "allRight" (formula "37") (inst "sk=_var33_0"))
                                                            (rule "allRight" (formula "37") (inst "sk=_var32_0"))
                                                            (rule "orRight" (formula "37"))
                                                            (rule "orRight" (formula "37"))
                                                            (rule "notRight" (formula "37"))
                                                            (rule "notRight" (formula "38"))
                                                            (rule "replace_known_left" (formula "39") (term "0,0") (ifseqformula "2"))
                                                            (builtin "One Step Simplification" (formula "39"))
                                                            (rule "false_right" (formula "39"))
                                                            (builtin "Use Dependency Contract" (formula "25") (ifInst ""  (formula "17")) (ifInst ""  (formula "22")) (contract "JML accessible clause [id: 0 / java.lang.Object::<inv> for List]"))
                                                            (branch "Dependencies unchanged by write to {(s, p)}
"
                                                               (rule "selectCreatedOfAnonEQ" (formula "40") (term "0,1,0,0") (ifseqformula "14"))
                                                               (rule "andLeft" (formula "40"))
                                                               (rule "andLeft" (formula "40"))
                                                               (rule "andLeft" (formula "40"))
                                                               (rule "andLeft" (formula "40"))
                                                               (rule "andLeft" (formula "40"))
                                                               (rule "notLeft" (formula "41"))
                                                               (rule "replace_known_left" (formula "41") (term "0,0") (ifseqformula "9"))
                                                               (builtin "One Step Simplification" (formula "41"))
                                                               (rule "true_left" (formula "41"))
                                                               (rule "replace_known_left" (formula "39") (term "1") (ifseqformula "17"))
                                                               (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "25")))
                                                               (rule "true_left" (formula "39"))
                                                               (rule "disjointToElementOf" (formula "40") (inst "ov=_var37") (inst "fv=_var36"))
                                                               (rule "elementOfSingleton" (formula "40") (term "0,0,0,0"))
                                                               (rule "elementOfUnion" (formula "40") (term "0,1,0,0"))
                                                               (builtin "One Step Simplification" (formula "40"))
                                                               (rule "selectOfAnonEQ" (formula "40") (term "1,1,0,1,0,0") (ifseqformula "14"))
                                                               (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "51")) (ifInst ""  (formula "9")))
                                                               (rule "elementOfSingleton" (formula "40") (term "0,1,1,0,1,0,0"))
                                                               (builtin "One Step Simplification" (formula "40"))
                                                               (rule "nnf_notOr" (formula "40") (term "1,0,0"))
                                                               (rule "nnf_notAnd" (formula "40") (term "0,0,0"))
                                                               (rule "cnf_rightDist" (formula "40") (term "0,0"))
                                                               (rule "distr_forallAnd" (formula "40") (term "0"))
                                                               (rule "distr_forallAnd" (formula "40"))
                                                               (rule "andLeft" (formula "40"))
                                                               (rule "commute_or_2" (formula "40") (term "0,0"))
                                                               (builtin "One Step Simplification" (formula "40"))
                                                               (rule "typeEqDerived2" (formula "40") (term "0,0,1,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "40"))
                                                               (rule "typeEqDerived2" (formula "40") (term "0,0") (ifseqformula "2"))
                                                               (builtin "One Step Simplification" (formula "40"))
                                                               (rule "closeFalse" (formula "40"))
                                                            )
                                                            (branch "Dependencies changed by write to {(s, p)}
"
                                                               (rule "selectCreatedOfAnonEQ" (formula "39") (term "0,1,0,0") (ifseqformula "14"))
                                                               (rule "replace_known_left" (formula "39") (term "1,0") (ifseqformula "17"))
                                                               (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "3")) (ifInst ""  (formula "50")) (ifInst ""  (formula "9")))
                                                               (rule "disjointToElementOf" (formula "39") (term "1") (inst "ov=_var35") (inst "fv=_var34"))
                                                               (rule "elementOfSingleton" (formula "39") (term "0,0,0,0,1"))
                                                               (rule "elementOfUnion" (formula "39") (term "0,1,0,0,1"))
                                                               (builtin "One Step Simplification" (formula "39"))
                                                               (rule "selectOfAnonEQ" (formula "39") (term "1,1,0,1,0,0,1") (ifseqformula "14"))
                                                               (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "50")) (ifInst ""  (formula "9")))
                                                               (rule "elementOfSingleton" (formula "39") (term "0,1,1,0,1,0,0,1"))
                                                               (builtin "One Step Simplification" (formula "39"))
                                                               (rule "nnf_notAnd" (formula "39") (term "0,0,0,1"))
                                                               (rule "nnf_notOr" (formula "39") (term "1,0,0,1"))
                                                               (rule "cut_direct" (formula "39") (term "0"))
                                                               (branch "CUT: wellFormed(heapAfter_build_0) TRUE"
                                                                  (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "allRight" (formula "40") (inst "sk=_var35_0"))
                                                                  (rule "allRight" (formula "40") (inst "sk=_var34_0"))
                                                                  (rule "orRight" (formula "40"))
                                                                  (rule "orRight" (formula "40"))
                                                                  (rule "notRight" (formula "40"))
                                                                  (rule "notRight" (formula "41"))
                                                                  (rule "replace_known_left" (formula "42") (term "0,0") (ifseqformula "2"))
                                                                  (builtin "One Step Simplification" (formula "42"))
                                                                  (rule "false_right" (formula "42"))
                                                                  (builtin "Use Dependency Contract" (formula "54") (ifInst ""  (formula "33") (term "0")) (ifInst ""  (formula "33")) (contract "JML accessible clause [id: 0 / java.lang.Object::<inv> for List]"))
                                                                  (branch "Dependencies unchanged by write to {}
"
                                                                     (rule "selectCreatedOfAnonEQ" (formula "43") (term "0,1,0") (ifseqformula "25"))
                                                                     (rule "selectCreatedOfAnonEQ" (formula "43") (term "0,0,0,1,0") (ifseqformula "17"))
                                                                     (rule "andLeft" (formula "43"))
                                                                     (rule "andLeft" (formula "43"))
                                                                     (rule "andLeft" (formula "43"))
                                                                     (rule "andLeft" (formula "43"))
                                                                     (rule "notLeft" (formula "44"))
                                                                     (rule "replace_known_left" (formula "44") (term "0,0,0,0") (ifseqformula "12"))
                                                                     (builtin "One Step Simplification" (formula "44"))
                                                                     (rule "true_left" (formula "44"))
                                                                     (rule "replace_known_left" (formula "42") (term "1") (ifseqformula "28"))
                                                                     (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "56")))
                                                                     (rule "closeFalse" (formula "42"))
                                                                  )
                                                                  (branch "Dependencies changed by write to {}
"
                                                                     (rule "selectCreatedOfAnonEQ" (formula "42") (term "0,1,0") (ifseqformula "25"))
                                                                     (rule "selectCreatedOfAnonEQ" (formula "42") (term "0,0,0,1,0") (ifseqformula "17"))
                                                                     (rule "replace_known_left" (formula "42") (term "0,0,0,0") (ifseqformula "3"))
                                                                     (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "53")) (ifInst ""  (formula "12")) (ifInst ""  (formula "28")))
                                                                     (rule "wellFormedAnonEQ" (formula "42") (ifseqformula "33"))
                                                                     (rule "replace_known_left" (formula "42") (term "0") (ifseqformula "3"))
                                                                     (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "32")))
                                                                     (rule "closeTrue" (formula "42"))
                                                                  )
                                                               )
                                                               (branch "CUT: wellFormed(heapAfter_build_0) FALSE"
                                                                  (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "false_right" (formula "40"))
                                                                  (rule "wellFormedAnonEQ" (formula "39") (ifseqformula "22"))
                                                                  (rule "replace_known_left" (formula "39") (term "0") (ifseqformula "3"))
                                                                  (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "21")))
                                                                  (rule "closeTrue" (formula "39"))
                                                               )
                                                            )
                                                         )
                                                         (branch "CUT: wellFormed(heapAfter_build) FALSE"
                                                            (builtin "One Step Simplification" (formula "37"))
                                                            (rule "false_right" (formula "37"))
                                                            (rule "wellFormedAnonEQ" (formula "36") (ifseqformula "11"))
                                                            (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "10"))
                                                            (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "5")))
                                                            (rule "closeTrue" (formula "36"))
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "CUT: int::select(anonHeap_build_0, s, p) >= 1 + s.p FALSE"
                                                   (builtin "One Step Simplification" (formula "48"))
                                                   (rule "false_right" (formula "48"))
                                                   (rule "inEqSimp_geqRight" (formula "47"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "1"))
                                                   (rule "polySimp_rightDist" (formula "23") (term "0,0"))
                                                   (rule "mul_literals" (formula "23") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "23") (term "0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "23"))
                                                   (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "23") (term "0"))
                                                   (rule "inEqSimp_contradInEq0" (formula "15") (ifseqformula "23"))
                                                   (rule "andLeft" (formula "15"))
                                                   (rule "inEqSimp_homoInEq1" (formula "15"))
                                                   (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                                                   (rule "mul_literals" (formula "15") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "15") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                                                   (rule "add_literals" (formula "15") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                                                   (rule "add_literals" (formula "15") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "15") (term "1,0"))
                                                   (rule "add_zero_right" (formula "15") (term "0"))
                                                   (rule "leq_literals" (formula "15"))
                                                   (rule "closeFalse" (formula "15"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch "Show Axiom Satisfiability"
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "closeTrue" (formula "39"))
                                 )
                              )
                              (branch "Exceptional Post (Tree)"
                                 (builtin "One Step Simplification" (formula "38"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "selectCreatedOfAnonEQ" (formula "31") (term "0,0,1,0,0,1,0,1") (ifseqformula "19"))
                                 (rule "selectCreatedOfAnonEQ" (formula "31") (term "0,0,0,0,1,0,0,1,0,1") (ifseqformula "10"))
                                 (rule "andLeft" (formula "31"))
                                 (rule "selectCreatedOfAnonEQ" (formula "32") (term "0,1,0,0") (ifseqformula "31"))
                                 (rule "selectCreatedOfAnonEQ" (formula "32") (term "0,1,0,1,0") (ifseqformula "31"))
                                 (rule "selectCreatedOfAnonEQ" (formula "32") (term "0,0,0,1,0,0") (ifseqformula "19"))
                                 (rule "selectCreatedOfAnonEQ" (formula "32") (term "0,0,0,0,0,1,0,0") (ifseqformula "10"))
                                 (rule "selectCreatedOfAnonEQ" (formula "32") (term "0,0,0,1,0,1,0") (ifseqformula "19"))
                                 (rule "selectCreatedOfAnonEQ" (formula "32") (term "0,0,0,0,0,1,0,1,0") (ifseqformula "10"))
                                 (rule "andLeft" (formula "32"))
                                 (rule "andLeft" (formula "32"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "andLeft" (formula "32"))
                                 (rule "andLeft" (formula "34"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "notLeft" (formula "32"))
                                 (rule "close" (formula "38") (ifseqformula "37"))
                              )
                              (branch "Pre (Tree)"
                                 (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "33")) (ifInst ""  (formula "31")) (ifInst ""  (formula "33")) (ifInst ""  (formula "31")))
                                 (rule "selectCreatedOfAnonEQ" (formula "36") (term "0,1") (ifseqformula "19"))
                                 (rule "selectCreatedOfAnonEQ" (formula "36") (term "0,1,0") (ifseqformula "19"))
                                 (rule "selectCreatedOfAnonEQ" (formula "36") (term "0,0,0,1") (ifseqformula "10"))
                                 (rule "selectCreatedOfAnonEQ" (formula "36") (term "0,0,0,1,0") (ifseqformula "10"))
                                 (rule "replace_known_right" (formula "36") (term "0,0,1") (ifseqformula "30"))
                                 (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "32")) (ifInst ""  (formula "12")) (ifInst ""  (formula "21")))
                                 (rule "wellFormedAnonEQ" (formula "36") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "18"))
                                 (builtin "One Step Simplification" (formula "36"))
                                 (rule "wellFormedAnonEQ" (formula "36") (ifseqformula "10"))
                                 (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "9"))
                                 (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "4")))
                                 (rule "closeTrue" (formula "36"))
                              )
                           )
                           (branch "Exceptional Post (build)"
                              (builtin "One Step Simplification" (formula "24"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "selectCreatedOfAnonEQ" (formula "19") (term "0,0,1,0,1,0,1,1") (ifseqformula "10"))
                              (rule "andLeft" (formula "19"))
                              (rule "selectCreatedOfAnonEQ" (formula "20") (term "0,1,0") (ifseqformula "19"))
                              (rule "selectCreatedOfAnonEQ" (formula "20") (term "0,0,0,1,0") (ifseqformula "10"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "20"))
                              (rule "notLeft" (formula "20"))
                              (rule "blockThrow" (formula "28") (term "1"))
                              (rule "translateJavaSubInt" (formula "21") (term "1,1,0,0,0,1"))
                              (rule "translateJavaAddInt" (formula "21") (term "0,2,1,1,0,1,0,0,1"))
                              (rule "translateJavaAddInt" (formula "21") (term "0,1,0,1,0,0,1"))
                              (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "23"))
                              (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "replace_known_right" (formula "21") (term "0,0") (ifseqformula "22"))
                              (builtin "One Step Simplification" (formula "21"))
                              (rule "methodCallParamThrow" (formula "27") (term "1"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "tryCatchThrow" (formula "27") (term "1"))
                              (rule "ifElseUnfold" (formula "27") (term "1") (inst "#boolv=x"))
                              (rule "variableDeclaration" (formula "27") (term "1") (newnames "x_10"))
                              (rule "equality_comparison_new" (formula "27") (term "1"))
                              (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "22")))
                              (rule "assignment" (formula "27") (term "1"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "lenNonNegative" (formula "15") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "15"))
                              (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1"))
                              (rule "polySimp_elimOne" (formula "15") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "14"))
                              (rule "inEqSimp_homoInEq0" (formula "15") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0"))
                              (rule "add_literals" (formula "15") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "15") (term "1,0,0"))
                              (rule "add_zero_right" (formula "15") (term "0,0"))
                              (rule "qeq_literals" (formula "15") (term "0"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "ifElseSplit" (formula "27"))
                              (branch "if x_10 true"
                                 (builtin "One Step Simplification" (formula "28"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_10 false"
                                 (builtin "One Step Simplification" (formula "28"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "ifElseSplit" (formula "27"))
                                 (branch "if exc_6 instanceof java.lang.Exception true"
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                                    (rule "variableDeclaration" (formula "28") (term "1") (newnames "e_1"))
                                    (rule "instanceof_static_type" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "reference_type_cast" (formula "27"))
                                    (branch "Normal Execution (exc_6 instanceof java.lang.Exception)"
                                       (builtin "One Step Simplification" (formula "27"))
                                       (rule "assignment" (formula "27") (term "1"))
                                       (builtin "One Step Simplification" (formula "27"))
                                       (rule "emptyModality" (formula "27") (term "1"))
                                       (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "22")) (ifInst ""  (formula "22")) (ifInst ""  (formula "21")))
                                       (rule "allRight" (formula "27") (inst "sk=f_1"))
                                       (rule "allRight" (formula "27") (inst "sk=o_1"))
                                       (rule "orRight" (formula "27"))
                                       (rule "orRight" (formula "27"))
                                       (rule "eqSymm" (formula "29"))
                                       (rule "selectOfAnonEQ" (formula "29") (term "0") (ifseqformula "19"))
                                       (builtin "One Step Simplification" (formula "29"))
                                       (rule "selectCreatedOfAnonEQ" (formula "29") (term "0,0,1,1,0,0") (ifseqformula "10"))
                                       (rule "elementOfSingleton" (formula "29") (term "0,0,0,0"))
                                       (rule "replace_known_right" (formula "29") (term "0,0,0,0") (ifseqformula "27"))
                                       (builtin "One Step Simplification" (formula "29"))
                                       (rule "selectOfAnonEQ" (formula "29") (term "2,0") (ifseqformula "10"))
                                       (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "28")))
                                       (rule "elementOfSingleton" (formula "29") (term "0,0,2,0"))
                                       (rule "replace_known_right" (formula "29") (term "0,0,2,0") (ifseqformula "27"))
                                       (builtin "One Step Simplification" (formula "29"))
                                       (rule "ifthenelse_split" (formula "20") (term "0,0,0"))
                                       (branch "exc_6.<created> = TRUE TRUE"
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "cut_direct" (formula "2") (term "0"))
                                          (branch "CUT: s.a = null TRUE"
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "true_left" (formula "3"))
                                             (rule "replace_known_left" (formula "16") (term "0,1,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "applyEq" (formula "16") (term "1,0,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "26") (term "0,1") (ifseqformula "2"))
                                             (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "17") (term "1,0,0,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "17") (term "1,0,1,0,0") (ifseqformula "2"))
                                             (rule "cut_direct" (formula "28") (term "0,0"))
                                             (branch "CUT: o_1 = null TRUE"
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "false_right" (formula "29"))
                                                (rule "replace_known_left" (formula "29") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "closeTrue" (formula "29"))
                                             )
                                             (branch "CUT: o_1 = null FALSE"
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "notRight" (formula "29"))
                                                (rule "replace_known_left" (formula "30") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "29")))
                                                (rule "closeTrue" (formula "30"))
                                             )
                                          )
                                          (branch "CUT: s.a = null FALSE"
                                             (builtin "One Step Simplification" (formula "2"))
                                             (rule "replace_known_left" (formula "17") (term "0,1,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "replace_known_right" (formula "16") (term "0,1,0") (ifseqformula "22"))
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "true_left" (formula "16"))
                                             (rule "cut_direct" (formula "28") (term "0,0"))
                                             (branch "CUT: o_1 = null TRUE"
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "false_right" (formula "29"))
                                                (rule "replace_known_left" (formula "29") (term "0,0,0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "closeTrue" (formula "29"))
                                             )
                                             (branch "CUT: o_1 = null FALSE"
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "notRight" (formula "29"))
                                                (rule "replace_known_right" (formula "30") (term "0,0,0,0") (ifseqformula "29"))
                                                (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "1")))
                                                (rule "closeTrue" (formula "30"))
                                             )
                                          )
                                       )
                                       (branch "exc_6.<created> = TRUE FALSE"
                                          (rule "cut_direct" (formula "2") (term "0"))
                                          (branch "CUT: s.a = null TRUE"
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "true_left" (formula "3"))
                                             (rule "replace_known_left" (formula "16") (term "0,1,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "16") (term "1,0,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "17") (term "1,0,1,0,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "27") (term "0,1") (ifseqformula "2"))
                                             (rule "applyEq" (formula "17") (term "1,0,0,1,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "2"))
                                             (rule "cut_direct" (formula "28") (term "1"))
                                             (branch "CUT: f_1 = p TRUE"
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "applyEq" (formula "31") (term "2,2,0") (ifseqformula "1"))
                                                (rule "applyEqRigid" (formula "31") (term "2,1,0") (ifseqformula "1"))
                                                (rule "applyEqRigid" (formula "31") (term "2,1") (ifseqformula "1"))
                                                (rule "narrowSelectType" (formula "31") (term "2,0") (ifseqformula "5"))
                                                (rule "narrowSelectType" (formula "31") (term "1,0") (ifseqformula "19"))
                                                (rule "eqSymm" (formula "31"))
                                                (rule "narrowSelectType" (formula "31") (term "0") (ifseqformula "5"))
                                                (rule "eqSymm" (formula "31"))
                                                (rule "cut_direct" (formula "30") (term "0,0"))
                                                (branch "CUT: o_1 = null TRUE"
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "false_right" (formula "31"))
                                                   (rule "replace_known_left" (formula "31") (term "0,0,0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "closeTrue" (formula "31"))
                                                )
                                                (branch "CUT: o_1 = null FALSE"
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "notRight" (formula "31"))
                                                   (rule "replace_known_left" (formula "32") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "31")))
                                                   (rule "closeTrue" (formula "32"))
                                                )
                                             )
                                             (branch "CUT: f_1 = p FALSE"
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "false_right" (formula "29"))
                                                (rule "cut_direct" (formula "29") (term "0,0"))
                                                (branch "CUT: o_1 = null TRUE"
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "false_right" (formula "30"))
                                                   (rule "replace_known_left" (formula "30") (term "0,0,0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "closeTrue" (formula "30"))
                                                )
                                                (branch "CUT: o_1 = null FALSE"
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "notRight" (formula "30"))
                                                   (rule "replace_known_left" (formula "31") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "30")))
                                                   (rule "closeTrue" (formula "31"))
                                                )
                                             )
                                          )
                                          (branch "CUT: s.a = null FALSE"
                                             (builtin "One Step Simplification" (formula "2"))
                                             (rule "replace_known_right" (formula "16") (term "0,1,0") (ifseqformula "22"))
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "true_left" (formula "16"))
                                             (rule "replace_known_left" (formula "16") (term "0,1,0") (ifseqformula "2"))
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "cut_direct" (formula "28") (term "1"))
                                             (branch "CUT: f_1 = p TRUE"
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "applyEqRigid" (formula "31") (term "2,1") (ifseqformula "1"))
                                                (rule "applyEq" (formula "31") (term "2,2,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "31") (term "2,1,0") (ifseqformula "1"))
                                                (rule "narrowSelectType" (formula "31") (term "1") (ifseqformula "5"))
                                                (rule "narrowSelectType" (formula "31") (term "2,0") (ifseqformula "5"))
                                                (rule "narrowSelectType" (formula "31") (term "1,0") (ifseqformula "18"))
                                                (rule "cut_direct" (formula "30") (term "0,0"))
                                                (branch "CUT: o_1 = null TRUE"
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "false_right" (formula "31"))
                                                   (rule "replace_known_left" (formula "31") (term "0,0,0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "closeTrue" (formula "31"))
                                                )
                                                (branch "CUT: o_1 = null FALSE"
                                                   (builtin "One Step Simplification" (formula "31"))
                                                   (rule "notRight" (formula "31"))
                                                   (rule "replace_known_left" (formula "32") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "31")))
                                                   (rule "closeTrue" (formula "32"))
                                                )
                                             )
                                             (branch "CUT: f_1 = p FALSE"
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "false_right" (formula "29"))
                                                (rule "cut_direct" (formula "29") (term "0,0"))
                                                (branch "CUT: o_1 = null TRUE"
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "false_right" (formula "30"))
                                                   (rule "replace_known_left" (formula "30") (term "0,0,0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "closeTrue" (formula "30"))
                                                )
                                                (branch "CUT: o_1 = null FALSE"
                                                   (builtin "One Step Simplification" (formula "30"))
                                                   (rule "notRight" (formula "30"))
                                                   (rule "replace_known_right" (formula "31") (term "0,0,0,0") (ifseqformula "30"))
                                                   (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "1")))
                                                   (rule "closeTrue" (formula "31"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch "ClassCastException (!(exc_6 instanceof java.lang.Exception))"
                                       (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "22")))
                                       (rule "closeType" (formula "21") (ifseqformula "27"))
                                    )
                                 )
                                 (branch "if exc_6 instanceof java.lang.Exception false"
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                                    (rule "notLeft" (formula "1"))
                                    (rule "closeType" (formula "21") (ifseqformula "22"))
                                 )
                              )
                           )
                           (branch "Pre (build)"
                              (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "13")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")))
                              (rule "selectCreatedOfAnonEQ" (formula "22") (term "0,1,1,0") (ifseqformula "10"))
                              (rule "translateJavaSubInt" (formula "22") (term "1,0,1"))
                              (rule "translateJavaSubInt" (formula "22") (term "0,1,1"))
                              (rule "replace_known_left" (formula "22") (term "0,0,1,1,0") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "polySimp_elimSub" (formula "22") (term "1,0,1"))
                              (rule "polySimp_elimSub" (formula "22") (term "0,1,1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,1,1"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "1,1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,1,0,1"))
                              (rule "mul_literals" (formula "22") (term "0,1,1,0,1"))
                              (rule "polySimp_addComm0" (formula "22") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,1,0,1,1"))
                              (rule "mul_literals" (formula "22") (term "0,1,1,0,1,1"))
                              (rule "polySimp_addComm0" (formula "22") (term "1,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,1,1"))
                              (rule "polySimp_addComm1" (formula "22") (term "0,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,1,1"))
                              (rule "add_literals" (formula "22") (term "0,0,0,0,1,1"))
                              (rule "add_zero_left" (formula "22") (term "0,0,0,1,1"))
                              (rule "inEqSimp_homoInEq0" (formula "22") (term "0,1"))
                              (rule "times_zero_2" (formula "22") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "22") (term "0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0"))
                              (rule "mul_literals" (formula "22") (term "1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,1,1"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,1,1"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,1"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,1,1"))
                              (rule "polySimp_mulAssoc" (formula "22") (term "0,1,1,1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "0,0,1,1,1"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "0,1,1,1"))
                              (rule "polySimp_elimOne" (formula "22") (term "0,1,1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,1"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,0,1"))
                              (rule "inEqSimp_subsumption1" (formula "22") (term "0,0") (ifseqformula "8"))
                              (rule "leq_literals" (formula "22") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "selectOfAnonEQ" (formula "22") (term "0,1,1") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "20")) (ifInst ""  (formula "5")))
                              (rule "applyEq" (formula "22") (term "2,0,1,1") (ifseqformula "6"))
                              (rule "elementOfSingleton" (formula "22") (term "0,0,1,1"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "inEqSimp_homoInEq0" (formula "22") (term "1,1"))
                              (rule "polySimp_pullOutFactor1" (formula "22") (term "0,1,1"))
                              (rule "add_literals" (formula "22") (term "1,0,1,1"))
                              (rule "times_zero_1" (formula "22") (term "0,1,1"))
                              (rule "qeq_literals" (formula "22") (term "1,1"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "selectOfAnonEQ" (formula "22") (term "0,1") (ifseqformula "10"))
                              (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "20")) (ifInst ""  (formula "5")))
                              (rule "applyEq" (formula "22") (term "2,0,1") (ifseqformula "6"))
                              (rule "elementOfSingleton" (formula "22") (term "0,0,1"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "inEqSimp_homoInEq1" (formula "22") (term "1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "0,1,0,1"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                              (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "22") (term "0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "22") (term "0,1"))
                              (rule "cut_direct" (formula "2") (term "0"))
                              (branch "CUT: s.a = null TRUE"
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "replace_known_left" (formula "16") (term "0,1,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "applyEq" (formula "16") (term "1,0,1,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "17") (term "1,0,1,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "17") (term "1,0,0,1,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "21") (term "0,1") (ifseqformula "2"))
                                 (rule "lenNonNegative" (formula "15") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "15"))
                                 (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "14"))
                                 (rule "inEqSimp_homoInEq0" (formula "15") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0"))
                                 (rule "add_literals" (formula "15") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "15") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "15") (term "0,0"))
                                 (rule "qeq_literals" (formula "15") (term "0"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "cut_direct" (formula "22") (term "1"))
                                 (branch "CUT: mbyAtPre >= 1 TRUE"
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "wellFormedAnonEQ" (formula "23") (ifseqformula "11"))
                                    (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "5"))
                                    (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "10")))
                                    (rule "closeTrue" (formula "23"))
                                 )
                                 (branch "CUT: mbyAtPre >= 1 FALSE"
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "false_right" (formula "23"))
                                    (rule "inEqSimp_geqRight" (formula "22"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "cut_direct" (formula "18") (term "0,1,0"))
                                    (branch "CUT: java.lang.Object.<created> = TRUE TRUE"
                                       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "17")))
                                       (rule "true_left" (formula "19"))
                                       (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                       (builtin "Use Dependency Contract" (formula "14") (ifInst ""  (formula "8")) (ifInst ""  (formula "11")) (contract "JML accessible clause [id: 0 / java.lang.Object::<inv> for List]"))
                                       (branch "Dependencies unchanged by write to {(s, p)}
"
                                          (rule "andLeft" (formula "20"))
                                          (rule "andLeft" (formula "20"))
                                          (rule "andLeft" (formula "20"))
                                          (rule "andLeft" (formula "20"))
                                          (rule "andLeft" (formula "20"))
                                          (rule "notLeft" (formula "21"))
                                          (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "14")))
                                          (rule "true_left" (formula "19"))
                                          (rule "applyEq" (formula "20") (term "0,1,1") (ifseqformula "3"))
                                          (rule "disjointToElementOf" (formula "20") (inst "ov=_var29") (inst "fv=_var28"))
                                          (rule "elementOfSingleton" (formula "20") (term "0,0,0,0"))
                                          (rule "elementOfUnion" (formula "20") (term "0,1,0,0"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "nnf_notOr" (formula "20") (term "1,0,0"))
                                          (rule "nnf_notAnd" (formula "20") (term "0,0,0"))
                                          (rule "commute_and" (formula "20") (term "1,0,0"))
                                          (rule "cnf_rightDist" (formula "20") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "20") (term "0"))
                                          (rule "distr_forallAnd" (formula "20"))
                                          (rule "andLeft" (formula "20"))
                                          (rule "commute_or_2" (formula "20") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "instanceof_static_type" (formula "20") (term "0,0,1,0"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "typeEqDerived2" (formula "20") (term "0,0,1") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "notLeft" (formula "20"))
                                          (rule "castDel" (formula "21") (term "0"))
                                          (rule "eqSymm" (formula "21"))
                                          (rule "shift_paren_or" (formula "20") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "instanceof_static_type" (formula "20") (term "0,0,1,0"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "notLeft" (formula "20"))
                                          (rule "instanceof_static_type" (formula "20") (term "0"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "closeTrue" (formula "20"))
                                       )
                                       (branch "Dependencies changed by write to {(s, p)}
"
                                          (rule "replace_known_left" (formula "19") (term "1,0") (ifseqformula "8"))
                                          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "5")) (ifInst ""  (formula "22")) (ifInst ""  (formula "6")))
                                          (rule "applyEq" (formula "19") (term "0,1,1,1") (ifseqformula "3"))
                                          (rule "disjointToElementOf" (formula "19") (term "1") (inst "ov=_var26") (inst "fv=_var25"))
                                          (rule "elementOfSingleton" (formula "19") (term "0,0,0,0,1"))
                                          (rule "elementOfUnion" (formula "19") (term "0,1,0,0,1"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "nnf_notAnd" (formula "19") (term "0,0,0,1"))
                                          (rule "nnf_notOr" (formula "19") (term "1,0,0,1"))
                                          (rule "cut_direct" (formula "19") (term "0"))
                                          (branch "CUT: wellFormed(heapAfter_build) TRUE"
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "allRight" (formula "20") (inst "sk=_var26_0"))
                                             (rule "allRight" (formula "20") (inst "sk=_var25_0"))
                                             (rule "orRight" (formula "20"))
                                             (rule "orRight" (formula "20"))
                                             (rule "notRight" (formula "21"))
                                             (rule "notRight" (formula "21"))
                                             (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "22"))
                                             (rule "false_right" (formula "22"))
                                             (rule "Partial_inv_axiom_for_JML_class_invariant_nr_7_in_List" (formula "11") (inst "i=_var27"))
                                             (builtin "One Step Simplification" (formula "11"))
                                             (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                             (rule "applyEq" (formula "11") (term "0,0,1,0,0,1,0,0") (ifseqformula "6"))
                                             (rule "applyEq" (formula "11") (term "1,0,1,0") (ifseqformula "6"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "11") (term "0"))
                                             (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                             (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                             (rule "allLeft" (formula "11") (inst "t=int::select(heap, s, List::$p)"))
                                             (rule "cut_direct" (formula "11") (term "1,0"))
                                             (branch "CUT: s.p >= null.length TRUE"
                                                (builtin "One Step Simplification" (formula "12"))
                                                (rule "true_left" (formula "12"))
                                                (rule "inEqSimp_strengthen1" (formula "11") (ifseqformula "27"))
                                                (rule "inEqSimp_contradEq7" (formula "27") (ifseqformula "11"))
                                                (rule "polySimp_mulComm0" (formula "27") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                                                (rule "add_literals" (formula "27") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "27") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "27") (term "0,0"))
                                                (rule "leq_literals" (formula "27") (term "0"))
                                                (builtin "One Step Simplification" (formula "27"))
                                                (rule "false_right" (formula "27"))
                                                (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_List" (formula "13"))
                                                (rule "notLeft" (formula "13"))
                                                (rule "close" (formula "24") (ifseqformula "6"))
                                             )
                                             (branch "CUT: s.p >= null.length FALSE"
                                                (builtin "One Step Simplification" (formula "11"))
                                                (rule "inEqSimp_geqRight" (formula "24"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                (rule "mul_literals" (formula "1") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                (rule "inEqSimp_contradEq3" (formula "28") (ifseqformula "1"))
                                                (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0"))
                                                (rule "add_literals" (formula "28") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "28") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "28") (term "0,0"))
                                                (rule "qeq_literals" (formula "28") (term "0"))
                                                (builtin "One Step Simplification" (formula "28"))
                                                (rule "false_right" (formula "28"))
                                                (rule "cut_direct" (formula "12") (term "0"))
                                                (branch "CUT: s.p <= -1 TRUE"
                                                   (builtin "One Step Simplification" (formula "13"))
                                                   (rule "true_left" (formula "13"))
                                                   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_List" (formula "14"))
                                                   (rule "notLeft" (formula "14"))
                                                   (rule "close" (formula "25") (ifseqformula "7"))
                                                )
                                                (branch "CUT: s.p <= -1 FALSE"
                                                   (builtin "One Step Simplification" (formula "12"))
                                                   (rule "inEqSimp_leqRight" (formula "25"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                                                   (rule "mul_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                   (rule "mul_literals" (formula "1") (term "1"))
                                                   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "1"))
                                                   (rule "leq_literals" (formula "10") (term "0"))
                                                   (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_List" (formula "15"))
                                                   (rule "notLeft" (formula "15"))
                                                   (rule "close" (formula "26") (ifseqformula "9"))
                                                )
                                             )
                                          )
                                          (branch "CUT: wellFormed(heapAfter_build) FALSE"
                                             (builtin "One Step Simplification" (formula "20"))
                                             (rule "false_right" (formula "20"))
                                             (rule "wellFormedAnonEQ" (formula "19") (ifseqformula "11"))
                                             (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "5"))
                                             (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "10")))
                                             (rule "closeTrue" (formula "19"))
                                          )
                                       )
                                    )
                                    (branch "CUT: java.lang.Object.<created> = TRUE FALSE"
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                       (builtin "Use Dependency Contract" (formula "14") (ifInst ""  (formula "8")) (ifInst ""  (formula "11")) (contract "JML accessible clause [id: 0 / java.lang.Object::<inv> for List]"))
                                       (branch "Dependencies unchanged by write to {(s, p)}
"
                                          (rule "andLeft" (formula "19"))
                                          (rule "andLeft" (formula "19"))
                                          (rule "andLeft" (formula "19"))
                                          (rule "andLeft" (formula "19"))
                                          (rule "notLeft" (formula "20"))
                                          (rule "andLeft" (formula "19"))
                                          (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "14"))
                                          (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "8")))
                                          (rule "true_left" (formula "18"))
                                          (rule "applyEq" (formula "19") (term "0,1,1") (ifseqformula "3"))
                                          (rule "disjointToElementOf" (formula "19") (inst "ov=_var24") (inst "fv=_var23"))
                                          (rule "elementOfSingleton" (formula "19") (term "0,0,0,0"))
                                          (rule "elementOfUnion" (formula "19") (term "0,1,0,0"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "nnf_notOr" (formula "19") (term "1,0,0"))
                                          (rule "nnf_notAnd" (formula "19") (term "0,0,0"))
                                          (rule "commute_and" (formula "19") (term "1,0,0"))
                                          (rule "cnf_rightDist" (formula "19") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "19") (term "0"))
                                          (rule "distr_forallAnd" (formula "19"))
                                          (rule "andLeft" (formula "19"))
                                          (rule "commute_or_2" (formula "19") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "instanceof_static_type" (formula "19") (term "0,0,1,0"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "typeEqDerived2" (formula "19") (term "0,0,1") (ifseqformula "3"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "notLeft" (formula "19"))
                                          (rule "castDel" (formula "20") (term "0"))
                                          (rule "eqSymm" (formula "20"))
                                          (rule "shift_paren_or" (formula "19") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "instanceof_static_type" (formula "19") (term "0,0,1,0"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "notLeft" (formula "19"))
                                          (rule "instanceof_static_type" (formula "19") (term "0"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "closeTrue" (formula "19"))
                                       )
                                       (branch "Dependencies changed by write to {(s, p)}
"
                                          (rule "replace_known_left" (formula "18") (term "1,0,0") (ifseqformula "6"))
                                          (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "5")) (ifInst ""  (formula "22")) (ifInst ""  (formula "8")))
                                          (rule "applyEq" (formula "18") (term "0,1,1,1") (ifseqformula "3"))
                                          (rule "disjointToElementOf" (formula "18") (term "1") (inst "ov=_var21") (inst "fv=_var20"))
                                          (rule "elementOfSingleton" (formula "18") (term "0,0,0,0,1"))
                                          (rule "elementOfUnion" (formula "18") (term "0,1,0,0,1"))
                                          (builtin "One Step Simplification" (formula "18"))
                                          (rule "nnf_notOr" (formula "18") (term "1,0,0,1"))
                                          (rule "nnf_notAnd" (formula "18") (term "0,0,0,1"))
                                          (rule "cut_direct" (formula "18") (term "0"))
                                          (branch "CUT: wellFormed(heapAfter_build) TRUE"
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "allRight" (formula "19") (inst "sk=_var21_0"))
                                             (rule "allRight" (formula "19") (inst "sk=_var20_0"))
                                             (rule "orRight" (formula "19"))
                                             (rule "orRight" (formula "19"))
                                             (rule "notRight" (formula "20"))
                                             (rule "notRight" (formula "20"))
                                             (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "false_right" (formula "21"))
                                             (rule "Partial_inv_axiom_for_JML_class_invariant_nr_7_in_List" (formula "11") (inst "i=_var22"))
                                             (builtin "One Step Simplification" (formula "11"))
                                             (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                             (rule "applyEq" (formula "11") (term "0,0,1,0,0,1,0,0") (ifseqformula "6"))
                                             (rule "applyEq" (formula "11") (term "1,0,1,0") (ifseqformula "6"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "11") (term "0"))
                                             (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                             (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                             (rule "allLeft" (formula "11") (inst "t=int::select(heap, s, List::$p)"))
                                             (rule "cut_direct" (formula "11") (term "1,0"))
                                             (branch "CUT: s.p >= null.length TRUE"
                                                (builtin "One Step Simplification" (formula "12"))
                                                (rule "true_left" (formula "12"))
                                                (rule "inEqSimp_strengthen1" (formula "11") (ifseqformula "27"))
                                                (rule "inEqSimp_contradEq7" (formula "27") (ifseqformula "11"))
                                                (rule "polySimp_mulComm0" (formula "27") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                                                (rule "add_literals" (formula "27") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "27") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "27") (term "0,0"))
                                                (rule "leq_literals" (formula "27") (term "0"))
                                                (builtin "One Step Simplification" (formula "27"))
                                                (rule "false_right" (formula "27"))
                                                (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_List" (formula "13"))
                                                (rule "notLeft" (formula "13"))
                                                (rule "close" (formula "23") (ifseqformula "6"))
                                             )
                                             (branch "CUT: s.p >= null.length FALSE"
                                                (builtin "One Step Simplification" (formula "11"))
                                                (rule "inEqSimp_geqRight" (formula "23"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                (rule "mul_literals" (formula "1") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                (rule "inEqSimp_contradEq3" (formula "28") (ifseqformula "1"))
                                                (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0"))
                                                (rule "add_literals" (formula "28") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "28") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "28") (term "0,0"))
                                                (rule "qeq_literals" (formula "28") (term "0"))
                                                (builtin "One Step Simplification" (formula "28"))
                                                (rule "false_right" (formula "28"))
                                                (rule "cut_direct" (formula "12") (term "0"))
                                                (branch "CUT: s.p <= -1 TRUE"
                                                   (builtin "One Step Simplification" (formula "13"))
                                                   (rule "true_left" (formula "13"))
                                                   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_List" (formula "14"))
                                                   (rule "notLeft" (formula "14"))
                                                   (rule "close" (formula "24") (ifseqformula "7"))
                                                )
                                                (branch "CUT: s.p <= -1 FALSE"
                                                   (builtin "One Step Simplification" (formula "12"))
                                                   (rule "inEqSimp_leqRight" (formula "24"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                                                   (rule "mul_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                   (rule "mul_literals" (formula "1") (term "1"))
                                                   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "1"))
                                                   (rule "leq_literals" (formula "10") (term "0"))
                                                   (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_List" (formula "15"))
                                                   (rule "notLeft" (formula "15"))
                                                   (rule "close" (formula "25") (ifseqformula "9"))
                                                )
                                             )
                                          )
                                          (branch "CUT: wellFormed(heapAfter_build) FALSE"
                                             (builtin "One Step Simplification" (formula "19"))
                                             (rule "false_right" (formula "19"))
                                             (rule "wellFormedAnonEQ" (formula "18") (ifseqformula "11"))
                                             (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "10"))
                                             (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "5")))
                                             (rule "closeTrue" (formula "18"))
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch "CUT: s.a = null FALSE"
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "replace_known_left" (formula "17") (term "0,1,0") (ifseqformula "2"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "replace_known_right" (formula "16") (term "0,1,0") (ifseqformula "18"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "lenNonNegative" (formula "15") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "15"))
                                 (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "14"))
                                 (rule "inEqSimp_homoInEq0" (formula "15") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0"))
                                 (rule "add_literals" (formula "15") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "15") (term "1,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0"))
                                 (rule "qeq_literals" (formula "15") (term "0"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "cut_direct" (formula "22") (term "1"))
                                 (branch "CUT: mbyAtPre >= 1 TRUE"
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "wellFormedAnonEQ" (formula "23") (ifseqformula "11"))
                                    (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "5")))
                                    (rule "closeTrue" (formula "23"))
                                 )
                                 (branch "CUT: mbyAtPre >= 1 FALSE"
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "false_right" (formula "23"))
                                    (rule "inEqSimp_geqRight" (formula "22"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (builtin "Use Dependency Contract" (formula "14") (ifInst ""  (formula "8")) (ifInst ""  (formula "11")) (contract "JML accessible clause [id: 0 / java.lang.Object::<inv> for List]"))
                                    (branch "Dependencies unchanged by write to {(s, p)}
"
                                       (rule "andLeft" (formula "19"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "notLeft" (formula "20"))
                                       (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "14"))
                                       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "8")))
                                       (rule "true_left" (formula "18"))
                                       (rule "disjointToElementOf" (formula "19") (inst "ov=_var19") (inst "fv=_var18"))
                                       (rule "elementOfSingleton" (formula "19") (term "0,0,0,0"))
                                       (rule "elementOfUnion" (formula "19") (term "0,1,0,0"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "nnf_notAnd" (formula "19") (term "0,0,0"))
                                       (rule "nnf_notOr" (formula "19") (term "1,0,0"))
                                       (rule "cnf_rightDist" (formula "19") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "19") (term "0"))
                                       (rule "distr_forallAnd" (formula "19"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "commute_or_2" (formula "19") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "instanceof_static_type" (formula "19") (term "0,0,1,0"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "notLeft" (formula "19"))
                                       (rule "instanceof_static_type" (formula "20") (term "0"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "closeTrue" (formula "20"))
                                    )
                                    (branch "Dependencies changed by write to {(s, p)}
"
                                       (rule "replace_known_right" (formula "18") (term "0,1,0,0,0") (ifseqformula "22"))
                                       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "8")))
                                       (rule "disjointToElementOf" (formula "18") (term "1") (inst "ov=_var13") (inst "fv=_var12"))
                                       (rule "elementOfSingleton" (formula "18") (term "0,0,0,0,1"))
                                       (rule "elementOfUnion" (formula "18") (term "0,1,0,0,1"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "nnf_notAnd" (formula "18") (term "0,0,0,1"))
                                       (rule "nnf_notOr" (formula "18") (term "1,0,0,1"))
                                       (rule "cut_direct" (formula "18") (term "0"))
                                       (branch "CUT: wellFormed(heapAfter_build) TRUE"
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "allRight" (formula "19") (inst "sk=_var13_0"))
                                          (rule "allRight" (formula "19") (inst "sk=_var12_0"))
                                          (rule "orRight" (formula "19"))
                                          (rule "orRight" (formula "19"))
                                          (rule "notRight" (formula "19"))
                                          (rule "notRight" (formula "20"))
                                          (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "2"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "false_right" (formula "21"))
                                          (rule "Partial_inv_axiom_for_JML_class_invariant_nr_7_in_List" (formula "11") (inst "i=_var14"))
                                          (builtin "One Step Simplification" (formula "11"))
                                          (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                          (rule "nnf_imp2or" (formula "11") (term "0"))
                                          (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                          (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                          (rule "allLeft" (formula "11") (inst "t=int::select(heap, s, List::$p)"))
                                          (rule "cut_direct" (formula "11") (term "0,0"))
                                          (branch "CUT: s.p <= -1 TRUE"
                                             (builtin "One Step Simplification" (formula "12"))
                                             (rule "true_left" (formula "12"))
                                             (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_List" (formula "13"))
                                             (rule "notLeft" (formula "13"))
                                             (rule "Partial_inv_axiom_for_JML_class_invariant_nr_0_in_List" (formula "13"))
                                             (rule "notLeft" (formula "13"))
                                             (rule "Partial_inv_axiom_for_JML_class_invariant_nr_5_in_List" (formula "13") (inst "i=_var17"))
                                             (builtin "One Step Simplification" (formula "13"))
                                             (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                                             (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0"))
                                             (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "10"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "13") (term "0"))
                                             (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                             (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                             (rule "Partial_inv_axiom_for_JML_class_invariant_nr_1_in_List" (formula "14"))
                                             (rule "andLeft" (formula "14"))
                                             (rule "inEqSimp_commuteLeq" (formula "14"))
                                             (rule "inEqSimp_strengthen0" (formula "15") (ifseqformula "30"))
                                             (rule "inEqSimp_contradEq3" (formula "30") (ifseqformula "15"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0"))
                                             (rule "add_literals" (formula "30") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "30") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "30") (term "0,0"))
                                             (rule "qeq_literals" (formula "30") (term "0"))
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "false_right" (formula "30"))
                                             (rule "inEqSimp_contradInEq0" (formula "14") (ifseqformula "11"))
                                             (rule "qeq_literals" (formula "14") (term "0"))
                                             (builtin "One Step Simplification" (formula "14"))
                                             (rule "closeFalse" (formula "14"))
                                          )
                                          (branch "CUT: s.p <= -1 FALSE"
                                             (builtin "One Step Simplification" (formula "11"))
                                             (rule "inEqSimp_leqRight" (formula "23"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "cut_direct" (formula "12") (term "0"))
                                             (branch "CUT: s.p >= s.a.length TRUE"
                                                (builtin "One Step Simplification" (formula "13"))
                                                (rule "true_left" (formula "13"))
                                                (rule "inEqSimp_strengthen1" (formula "12") (ifseqformula "28"))
                                                (rule "inEqSimp_contradEq7" (formula "28") (ifseqformula "12"))
                                                (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0"))
                                                (rule "add_literals" (formula "28") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "28") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "28") (term "0,0"))
                                                (rule "leq_literals" (formula "28") (term "0"))
                                                (builtin "One Step Simplification" (formula "28"))
                                                (rule "false_right" (formula "28"))
                                                (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_List" (formula "14"))
                                                (rule "notLeft" (formula "14"))
                                                (rule "Partial_inv_axiom_for_JML_class_invariant_nr_0_in_List" (formula "14"))
                                                (rule "notLeft" (formula "14"))
                                                (rule "Partial_inv_axiom_for_JML_class_invariant_nr_5_in_List" (formula "14") (inst "i=_var16"))
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                                                (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0"))
                                                (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "11"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                                (rule "nnf_imp2or" (formula "14") (term "0"))
                                                (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                                (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                                                (rule "Partial_inv_axiom_for_JML_class_invariant_nr_1_in_List" (formula "15"))
                                                (rule "andLeft" (formula "15"))
                                                (rule "inEqSimp_commuteLeq" (formula "15"))
                                                (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "15"))
                                                (rule "andLeft" (formula "12"))
                                                (rule "inEqSimp_homoInEq1" (formula "12"))
                                                (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                                                (rule "add_literals" (formula "12") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "12") (term "1,0"))
                                                (rule "add_literals" (formula "12") (term "0"))
                                                (rule "leq_literals" (formula "12"))
                                                (rule "closeFalse" (formula "12"))
                                             )
                                             (branch "CUT: s.p >= s.a.length FALSE"
                                                (builtin "One Step Simplification" (formula "12"))
                                                (rule "inEqSimp_geqRight" (formula "24"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                (rule "mul_literals" (formula "1") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                (rule "inEqSimp_contradEq3" (formula "29") (ifseqformula "1"))
                                                (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0"))
                                                (rule "add_literals" (formula "29") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "29") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "29") (term "0,0"))
                                                (rule "qeq_literals" (formula "29") (term "0"))
                                                (builtin "One Step Simplification" (formula "29"))
                                                (rule "false_right" (formula "29"))
                                                (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                                                (rule "times_zero_1" (formula "2") (term "0,0"))
                                                (rule "add_zero_left" (formula "2") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                (rule "mul_literals" (formula "2") (term "1"))
                                                (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "2"))
                                                (rule "leq_literals" (formula "10") (term "0"))
                                                (builtin "One Step Simplification" (formula "10"))
                                                (rule "true_left" (formula "10"))
                                                (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_List" (formula "15"))
                                                (rule "notLeft" (formula "15"))
                                                (rule "Partial_inv_axiom_for_JML_class_invariant_nr_0_in_List" (formula "15"))
                                                (rule "notLeft" (formula "15"))
                                                (rule "Partial_inv_axiom_for_JML_class_invariant_nr_5_in_List" (formula "15") (inst "i=_var15"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                                (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0"))
                                                (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "12"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                                (rule "nnf_imp2or" (formula "15") (term "0"))
                                                (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                                (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                                (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                                (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                                (rule "allLeft" (formula "15") (inst "t=int::select(heap, s, List::$p)"))
                                                (rule "inEqSimp_contradInEq0" (formula "15") (term "1,0") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0"))
                                                (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0"))
                                                (rule "polySimp_addComm0" (formula "15") (term "0,0,0,1,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0"))
                                                (rule "add_literals" (formula "15") (term "1,1,0,0,1,0"))
                                                (rule "times_zero_1" (formula "15") (term "1,0,0,1,0"))
                                                (rule "add_zero_right" (formula "15") (term "0,0,1,0"))
                                                (rule "leq_literals" (formula "15") (term "0,1,0"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "15") (term "0,0"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "15"))
                                                (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                                (rule "mul_literals" (formula "8") (term "0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "8") (term "0"))
                                                (rule "polySimp_pullOutFactor2b" (formula "8") (term "0,0"))
                                                (rule "add_literals" (formula "8") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "8") (term "1,0,0"))
                                                (rule "add_literals" (formula "8") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                                (rule "mul_literals" (formula "8") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "8"))
                                                (rule "qeq_literals" (formula "7") (term "0"))
                                                (builtin "One Step Simplification" (formula "7"))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                          )
                                       )
                                       (branch "CUT: wellFormed(heapAfter_build) FALSE"
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "false_right" (formula "19"))
                                          (rule "wellFormedAnonEQ" (formula "18") (ifseqformula "11"))
                                          (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "10"))
                                          (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "5")))
                                          (rule "closeTrue" (formula "18"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch "Exceptional Post (build)"
                           (builtin "One Step Simplification" (formula "10"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "andLeft" (formula "10"))
                           (rule "selectCreatedOfAnonEQ" (formula "11") (term "0,1,0") (ifseqformula "10"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "13"))
                           (rule "notLeft" (formula "11"))
                           (rule "blockThrow" (formula "17") (term "1"))
                           (rule "translateJavaAddInt" (formula "12") (term "0,2,1,1,0,1,0,0,1"))
                           (rule "translateJavaSubInt" (formula "12") (term "1,1,0,0,0,1"))
                           (rule "translateJavaAddInt" (formula "12") (term "0,1,0,1,0,0,1"))
                           (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "13"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "methodCallParamThrow" (formula "16") (term "1"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "tryCatchThrow" (formula "16") (term "1"))
                           (rule "ifElseUnfold" (formula "16") (term "1") (inst "#boolv=x"))
                           (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_9"))
                           (rule "equality_comparison_new" (formula "16") (term "1"))
                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "13")))
                           (rule "assignment" (formula "16") (term "1"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "ifElseSplit" (formula "16"))
                           (branch "if x_9 true"
                              (builtin "One Step Simplification" (formula "17"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if x_9 false"
                              (builtin "One Step Simplification" (formula "1"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "1"))
                              (rule "ifElseSplit" (formula "16"))
                              (branch "if exc_5 instanceof java.lang.Exception true"
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
                                 (rule "variableDeclaration" (formula "17") (term "1") (newnames "e"))
                                 (rule "instanceof_static_type" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "reference_type_cast" (formula "16"))
                                 (branch "Normal Execution (exc_5 instanceof java.lang.Exception)"
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "assignment" (formula "16") (term "1"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "emptyModality" (formula "16") (term "1"))
                                    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "12")))
                                    (rule "allRight" (formula "16") (inst "sk=f_0"))
                                    (rule "allRight" (formula "16") (inst "sk=o_0"))
                                    (rule "orRight" (formula "16"))
                                    (rule "orRight" (formula "16"))
                                    (rule "eqSymm" (formula "18"))
                                    (rule "selectOfAnonEQ" (formula "18") (term "0") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                                    (rule "elementOfSingleton" (formula "18") (term "0,0,0"))
                                    (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "closeTrue" (formula "18"))
                                 )
                                 (branch "ClassCastException (!(exc_5 instanceof java.lang.Exception))"
                                    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "13")))
                                    (rule "closeTypeSwitched" (formula "16") (ifseqformula "12"))
                                 )
                              )
                              (branch "if exc_5 instanceof java.lang.Exception false"
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
                                 (rule "notLeft" (formula "1"))
                                 (rule "closeType" (formula "12") (ifseqformula "13"))
                              )
                           )
                        )
                        (branch "Pre (build)"
                           (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "7")) (ifInst ""  (formula "9")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")))
                           (rule "translateJavaSubInt" (formula "11") (term "1,0,1"))
                           (rule "translateJavaSubInt" (formula "11") (term "0,1,1"))
                           (rule "polySimp_elimSub" (formula "11") (term "1,0,1"))
                           (rule "polySimp_elimSub" (formula "11") (term "0,1,1"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,1"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,1"))
                           (rule "polySimp_addComm0" (formula "11") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,1"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,1,1"))
                           (rule "polySimp_addComm0" (formula "11") (term "1,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,1,1"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,1"))
                           (rule "add_literals" (formula "11") (term "0,0,0,0,1,1"))
                           (rule "add_zero_left" (formula "11") (term "0,0,0,1,1"))
                           (rule "inEqSimp_homoInEq0" (formula "11") (term "0,1"))
                           (rule "times_zero_2" (formula "11") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "11") (term "0,0,1"))
                           (rule "applyEq" (formula "11") (term "1,0,1,1") (ifseqformula "6"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,1,1"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,0,1,1"))
                           (rule "polySimp_pullOutFactor2b" (formula "11") (term "0,1,1"))
                           (rule "add_literals" (formula "11") (term "1,1,0,1,1"))
                           (rule "times_zero_1" (formula "11") (term "1,0,1,1"))
                           (rule "add_zero_right" (formula "11") (term "0,1,1"))
                           (rule "polySimp_pullOutFactor2" (formula "11") (term "0,1,1"))
                           (rule "add_literals" (formula "11") (term "1,0,1,1"))
                           (rule "times_zero_1" (formula "11") (term "0,1,1"))
                           (rule "leq_literals" (formula "11") (term "1,1"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "applyEq" (formula "11") (term "1,0,1") (ifseqformula "6"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,1"))
                           (rule "polySimp_pullOutFactor2b" (formula "11") (term "0,0,1"))
                           (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "11") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0"))
                           (rule "mul_literals" (formula "11") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1"))
                           (rule "mul_literals" (formula "11") (term "1,1"))
                           (rule "inEqSimp_subsumption1" (formula "11") (term "0") (ifseqformula "8"))
                           (rule "leq_literals" (formula "11") (term "0,0"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "inEqSimp_geqRight" (formula "11"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "cut_direct" (formula "3") (term "0"))
                           (branch "CUT: s.a = null TRUE"
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "3"))
                              (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "3"))
                              (rule "arrayLengthNotNegative" (formula "11") (term "1"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_nr_5_in_List" (formula "8") (inst "i=_var11"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                              (rule "applyEq" (formula "8") (term "0,0,1,0,0,1,0,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "8") (term "1,1,0") (ifseqformula "7"))
                              (rule "applyEq" (formula "8") (term "1,0,1,0") (ifseqformula "3"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "8") (term "0"))
                              (rule "nnf_notAnd" (formula "8") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                              (rule "allLeft" (formula "8") (inst "t=int::select(heap, s, List::$p)"))
                              (rule "cut_direct" (formula "8") (term "1,0"))
                              (branch "CUT: s.p >= null.length TRUE"
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "inEqSimp_strengthen1" (formula "8") (ifseqformula "13"))
                                 (rule "inEqSimp_contradEq7" (formula "13") (ifseqformula "8"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
                                 (rule "add_literals" (formula "13") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "13") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "13") (term "0,0"))
                                 (rule "leq_literals" (formula "13") (term "0"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "false_right" (formula "13"))
                                 (rule "Partial_inv_axiom_for_JML_class_invariant_nr_1_in_List" (formula "10"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "inEqSimp_commuteLeq" (formula "10"))
                                 (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "3"))
                                 (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "8"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "inEqSimp_homoInEq1" (formula "11"))
                                 (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                 (rule "add_literals" (formula "11") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0"))
                                 (rule "add_literals" (formula "11") (term "0"))
                                 (rule "leq_literals" (formula "11"))
                                 (rule "closeFalse" (formula "11"))
                              )
                              (branch "CUT: s.p >= null.length FALSE"
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "inEqSimp_geqRight" (formula "12"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_contradEq3" (formula "14") (ifseqformula "1"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0"))
                                 (rule "add_literals" (formula "14") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "14") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "14") (term "0,0"))
                                 (rule "qeq_literals" (formula "14") (term "0"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "false_right" (formula "14"))
                                 (rule "cut_direct" (formula "9") (term "0"))
                                 (branch "CUT: s.p <= -1 TRUE"
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "true_left" (formula "10"))
                                    (rule "Partial_inv_axiom_for_JML_class_invariant_nr_1_in_List" (formula "11"))
                                    (rule "andLeft" (formula "11"))
                                    (rule "inEqSimp_commuteLeq" (formula "11"))
                                    (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "4"))
                                    (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
                                    (rule "add_literals" (formula "12") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "12") (term "0,0"))
                                    (rule "qeq_literals" (formula "12") (term "0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "11"))
                                    (rule "qeq_literals" (formula "9") (term "0"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "closeFalse" (formula "9"))
                                 )
                                 (branch "CUT: s.p <= -1 FALSE"
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "inEqSimp_leqRight" (formula "13"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                                    (rule "times_zero_1" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "7") (term "0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "10"))
                                    (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                                    (rule "mul_literals" (formula "5") (term "0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "5") (term "0,0"))
                                    (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                    (rule "add_literals" (formula "5") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                    (rule "mul_literals" (formula "5") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "4") (term "0"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "closeFalse" (formula "4"))
                                 )
                              )
                           )
                           (branch "CUT: s.a = null FALSE"
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_nr_7_in_List" (formula "8") (inst "i=_var7"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "8") (term "0"))
                              (rule "nnf_notAnd" (formula "8") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                              (rule "allLeft" (formula "8") (inst "t=int::select(heap, s, List::$p)"))
                              (rule "cut_direct" (formula "8") (term "0,0"))
                              (branch "CUT: s.p <= -1 TRUE"
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_List" (formula "10"))
                                 (rule "notLeft" (formula "10"))
                                 (rule "Partial_inv_axiom_for_JML_class_invariant_nr_0_in_List" (formula "10"))
                                 (rule "notLeft" (formula "10"))
                                 (rule "Partial_inv_axiom_for_JML_class_invariant_nr_5_in_List" (formula "10") (inst "i=_var10"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                                 (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "7"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "10") (term "0"))
                                 (rule "nnf_notAnd" (formula "10") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                                 (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                 (rule "Partial_inv_axiom_for_JML_class_invariant_nr_1_in_List" (formula "11"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "inEqSimp_commuteLeq" (formula "11"))
                                 (rule "inEqSimp_strengthen0" (formula "12") (ifseqformula "17"))
                                 (rule "inEqSimp_contradEq3" (formula "17") (ifseqformula "12"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0"))
                                 (rule "add_literals" (formula "17") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "17") (term "1,0,0"))
                                 (rule "add_literals" (formula "17") (term "0,0"))
                                 (rule "qeq_literals" (formula "17") (term "0"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "false_right" (formula "17"))
                                 (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "11"))
                                 (rule "qeq_literals" (formula "8") (term "0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "closeFalse" (formula "8"))
                              )
                              (branch "CUT: s.p <= -1 FALSE"
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "inEqSimp_leqRight" (formula "12"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "cut_direct" (formula "9") (term "0"))
                                 (branch "CUT: s.p >= s.a.length TRUE"
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "true_left" (formula "10"))
                                    (rule "inEqSimp_strengthen1" (formula "9") (ifseqformula "15"))
                                    (rule "inEqSimp_contradEq7" (formula "15") (ifseqformula "9"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0"))
                                    (rule "add_literals" (formula "15") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0"))
                                    (rule "leq_literals" (formula "15") (term "0"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "false_right" (formula "15"))
                                    (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_List" (formula "11"))
                                    (rule "notLeft" (formula "11"))
                                    (rule "Partial_inv_axiom_for_JML_class_invariant_nr_0_in_List" (formula "11"))
                                    (rule "notLeft" (formula "11"))
                                    (rule "Partial_inv_axiom_for_JML_class_invariant_nr_5_in_List" (formula "11") (inst "i=_var9"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                                    (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "8"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                                    (rule "nnf_imp2or" (formula "11") (term "0"))
                                    (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                                    (rule "Partial_inv_axiom_for_JML_class_invariant_nr_1_in_List" (formula "12"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "inEqSimp_commuteLeq" (formula "12"))
                                    (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "9"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "inEqSimp_homoInEq1" (formula "12"))
                                    (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                                    (rule "add_literals" (formula "12") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "12") (term "1,0"))
                                    (rule "add_zero_right" (formula "12") (term "0"))
                                    (rule "leq_literals" (formula "12"))
                                    (rule "closeFalse" (formula "12"))
                                 )
                                 (branch "CUT: s.p >= s.a.length FALSE"
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "inEqSimp_geqRight" (formula "13"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_contradEq3" (formula "16") (ifseqformula "1"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0"))
                                    (rule "add_literals" (formula "16") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0"))
                                    (rule "qeq_literals" (formula "16") (term "0"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "false_right" (formula "16"))
                                    (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                                    (rule "times_zero_1" (formula "2") (term "0,0"))
                                    (rule "add_zero_left" (formula "2") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                    (rule "mul_literals" (formula "2") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "2"))
                                    (rule "leq_literals" (formula "7") (term "0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_List" (formula "12"))
                                    (rule "notLeft" (formula "12"))
                                    (rule "Partial_inv_axiom_for_JML_class_invariant_nr_0_in_List" (formula "12"))
                                    (rule "notLeft" (formula "12"))
                                    (rule "Partial_inv_axiom_for_JML_class_invariant_nr_5_in_List" (formula "12") (inst "i=_var8"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                                    (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "9"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                    (rule "nnf_imp2or" (formula "12") (term "0"))
                                    (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                    (rule "allLeft" (formula "12") (inst "t=int::select(heap, s, List::$p)"))
                                    (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "12") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_contradInEq0" (formula "12") (term "0") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "12") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_addComm0" (formula "12") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0"))
                                    (rule "add_literals" (formula "12") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "12") (term "0,0,0"))
                                    (rule "leq_literals" (formula "12") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "12"))
                                    (rule "times_zero_1" (formula "10") (term "0,0"))
                                    (rule "add_zero_left" (formula "10") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                                    (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "13"))
                                    (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                                    (rule "mul_literals" (formula "5") (term "0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "5") (term "0,0"))
                                    (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "5") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                    (rule "mul_literals" (formula "5") (term "1"))
                                    (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "5") (term "0"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "closeFalse" (formula "5"))
                                 )
                              )
                           )
                        )
                     )
                  )
               )
            )
            (branch "Null Reference (a = null)"
               (builtin "One Step Simplification" (formula "11"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "false_right" (formula "11"))
               (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "applyEq" (formula "9") (term "0,1") (ifseqformula "1"))
               (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "1"))
               (rule "arrayLengthNotNegative" (formula "9") (term "1"))
               (rule "Partial_inv_axiom_for_JML_class_invariant_nr_7_in_List" (formula "6") (inst "i=_var6"))
               (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
               (rule "applyEq" (formula "6") (term "0,0,1,0,0,1,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "6") (term "1,0,1,0") (ifseqformula "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "6") (term "0"))
               (rule "nnf_notAnd" (formula "6") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
               (rule "mul_literals" (formula "6") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
               (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_List" (formula "7"))
               (rule "notLeft" (formula "7"))
               (rule "close" (formula "9") (ifseqformula "1"))
            )
            (branch "Index Out of Bounds (a != null, but p Out of Bounds!)"
               (builtin "One Step Simplification" (formula "11"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "false_right" (formula "11"))
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "9"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "1,1"))
               (rule "cut_direct" (formula "1") (term "1"))
               (branch "CUT: s.p <= -1 TRUE"
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "Partial_inv_axiom_for_JML_class_invariant_nr_7_in_List" (formula "7") (inst "i=_var4"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "7") (term "0"))
                  (rule "nnf_notAnd" (formula "7") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                  (rule "mul_literals" (formula "7") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
                  (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_List" (formula "8"))
                  (rule "notLeft" (formula "8"))
                  (rule "Partial_inv_axiom_for_JML_class_invariant_nr_5_in_List" (formula "8") (inst "i=_var5"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                  (rule "applyEq" (formula "8") (term "1,1,0") (ifseqformula "6"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "8") (term "0"))
                  (rule "nnf_notAnd" (formula "8") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                  (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                  (rule "Partial_inv_axiom_for_JML_class_invariant_nr_1_in_List" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "inEqSimp_commuteLeq" (formula "9"))
                  (rule "inEqSimp_strengthen0" (formula "10") (ifseqformula "15"))
                  (rule "inEqSimp_contradEq3" (formula "15") (ifseqformula "10"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0"))
                  (rule "qeq_literals" (formula "15") (term "0"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "false_right" (formula "15"))
                  (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "9") (term "0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "closeFalse" (formula "9"))
               )
               (branch "CUT: s.p <= -1 FALSE"
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_leqRight" (formula "9"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_strengthen1" (formula "2") (ifseqformula "12"))
                  (rule "inEqSimp_contradEq7" (formula "12") (ifseqformula "2"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0"))
                  (rule "leq_literals" (formula "12") (term "0"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "false_right" (formula "12"))
                  (rule "Partial_inv_axiom_for_JML_class_invariant_nr_7_in_List" (formula "8") (inst "i=_var2"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "8") (term "0"))
                  (rule "nnf_notAnd" (formula "8") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                  (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                  (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_List" (formula "9"))
                  (rule "notLeft" (formula "9"))
                  (rule "Partial_inv_axiom_for_JML_class_invariant_nr_5_in_List" (formula "9") (inst "i=_var3"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                  (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "7"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "9") (term "0"))
                  (rule "nnf_notAnd" (formula "9") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                  (rule "Partial_inv_axiom_for_JML_class_invariant_nr_1_in_List" (formula "10"))
                  (rule "andLeft" (formula "10"))
                  (rule "inEqSimp_commuteLeq" (formula "10"))
                  (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "10"))
                  (rule "andLeft" (formula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "2"))
                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                  (rule "add_literals" (formula "2") (term "1,1,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0"))
                  (rule "add_literals" (formula "2") (term "0"))
                  (rule "leq_literals" (formula "2"))
                  (rule "closeFalse" (formula "2"))
               )
            )
         )
         (branch "Null Reference (_s = null)"
            (builtin "One Step Simplification" (formula "11"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Null Reference (a = null)"
      (builtin "One Step Simplification" (formula "8"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "false_right" (formula "8"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0") (ifseqformula "2"))
      (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_7_in_List" (formula "5") (inst "i=_var0"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
      (rule "applyEq" (formula "5") (term "0,0,1,0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "5") (term "1,0,1,0") (ifseqformula "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
      (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "5") (term "0"))
      (rule "nnf_notAnd" (formula "5") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
      (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
      (rule "mul_literals" (formula "5") (term "1,0,0,0"))
      (rule "arrayLengthNotNegative" (formula "5") (term "1,1,0,0"))
      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_5_in_List" (formula "7") (inst "i=_var1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
      (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0"))
      (rule "applyEq" (formula "7") (term "0,0,1,0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "7") (term "1,1,0") (ifseqformula "4"))
      (rule "applyEq" (formula "7") (term "1,0,1,0") (ifseqformula "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "7") (term "0"))
      (rule "nnf_notAnd" (formula "7") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
      (rule "mul_literals" (formula "7") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_1_in_List" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "applyEq" (formula "9") (term "0,1") (ifseqformula "1"))
      (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "9"))
      (rule "times_zero_1" (formula "8") (term "0,0"))
      (rule "add_zero_left" (formula "8") (term "0"))
      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_List" (formula "10"))
      (rule "notLeft" (formula "10"))
      (rule "close" (formula "12") (ifseqformula "1"))
   )
)
(branch "Null Reference (_s = null)"
   (builtin "One Step Simplification" (formula "8"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
   (rule "closeFalse" (formula "1"))
)
)

}
