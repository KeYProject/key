\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Sep 06 09:11:10 CEST 2023
[Choice]DefaultChoices=JavaCard-JavaCard\\:on, Strings-Strings\\:on, assertions-assertions\\:on, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:showSatisfiability, moreSeqRules-moreSeqRules\\:on, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:allow, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[Labels]UseOriginLabels=true
[SMTSettings]SelectedTaclets=
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]maxGenericSorts=2
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[Strategy]ActiveStrategy=JavaCardDLStrategy
[Strategy]MaximumNumberOfAutomaticApplications=10000
[Strategy]Timeout=-1
"
}

\javaSource "src";

\proofObligation "#Proof Obligation Settings
#Wed Sep 06 09:11:10 CEST 2023
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
contract=Perm[Perm\\:\\:foo()].JML normal_behavior operation contract.0
name=Perm[Perm\\:\\:foo()].JML normal_behavior operation contract.0
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "008f011f15"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "008f011f15"))
(keyLog "2" (keyUser "Julian" ) (keyVersion "008f011f15"))
(keyLog "3" (keyUser "Julian" ) (keyVersion "008f011f15"))
(keyLog "4" (keyUser "Julian" ) (keyVersion "008f011f15"))
(keyLog "5" (keyUser "Julian" ) (keyVersion "44c2a312eb"))
(keyLog "6" (keyUser "arne" ) (keyVersion "6c808a3515ac39349724327a9e38578fbb2121d9"))
(keyLog "7" (keyUser "arne" ) (keyVersion "6c808a3515ac39349724327a9e38578fbb2121d9"))

(autoModeTime "0")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "8") (term "0,0,0"))
(rule "assignment" (formula "8"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_foo,savedHeapBefore_foo"))
 (builtin "One Step Simplification" (formula "8"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "s"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "loopScopeInvDia" (formula "8") (term "1") (newnames "s_0,o,f") (inst "#x=x_1") (inst "#variant=x") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_heap_LOOP=anon_heap_LOOP_0"))
(branch "Invariant Initially Valid"
   (rule "andRight" (formula "8"))
   (branch "Case 1"
       (builtin "One Step Simplification" (formula "8"))
      (rule "eqSymm" (formula "8"))
      (rule "castedGetAny" (formula "8") (term "0,2,0"))
      (rule "applyEq" (formula "8") (term "1,0") (ifseqformula "5"))
      (rule "bsum_lower_equals_upper" (formula "8") (term "0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "closeTrue" (formula "8"))
   )
   (branch "Case 2"
       (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "6")))
      (rule "closeTrue" (formula "8"))
   )
)
(branch "Invariant Preserved and Used"
    (builtin "One Step Simplification" (formula "9"))
   (rule "impRight" (formula "9"))
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "11") (term "0,0,0,1,1,0,1"))
   (rule "eqSymm" (formula "11") (term "1,0,0,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "1"))
   (rule "polySimp_elimSub" (formula "11") (term "0,1,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "11") (term "0,1,1,0"))
   (rule "polySimp_addComm0" (formula "11") (term "0,1,1,0"))
   (rule "elementOfSingleton" (formula "11") (term "0,0,0,0,1,0,1,1,0,1"))
   (rule "castedGetAny" (formula "11") (term "0,2,0,0,0,0,1,1,0,1"))
   (rule "castedGetAny" (formula "1") (term "0,2,0"))
   (rule "pullOutSelect" (formula "11") (term "0,0,0,1,1,0") (inst "selectSK=Perm_pIdx_0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")) (ifInst ""  (formula "11")))
   (rule "replace_known_right" (formula "2") (term "0,0,1,0,0,0,2,0") (ifseqformula "11"))
    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "6")) (ifInst ""  (formula "11")))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replaceKnownAuxiliaryConstant_taclet1_0" (formula "11") (term "0,0,0,1,1,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0,2,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSingleton" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "pullOutSelect" (formula "11") (term "0,1,0,1,1,0") (inst "selectSK=Perm_a_0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")) (ifInst ""  (formula "11")))
   (rule "polySimp_addComm0" (formula "12") (term "0,1,1,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "11") (term "0,0,0,1,1,0"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_1"))
   (rule "ifElseUnfold" (formula "11") (term "1") (inst "#boolv=b"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "b"))
    (builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_hasNext,result_hasNext,exc_0") (contract "Perm[Perm::hasNext()].JML normal_behavior operation contract.0") (modality "diamond"))
   (branch "Post (hasNext)"
       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "5")) (ifInst ""  (formula "11")))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "11"))
      (rule "eqSymm" (formula "11"))
      (rule "elementOfSingleton" (formula "11") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "elementOfSingleton" (formula "11") (term "0,0,1,0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "assignment" (formula "13") (term "1"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "ifElseSplit" (formula "13"))
      (branch "if b true"
          (builtin "One Step Simplification" (formula "14"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "compound_assignment_op_plus" (formula "14") (term "1"))
         (rule "compound_reference_cast_expression_primitive" (formula "14") (term "1") (inst "#v=i"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "i"))
         (rule "remove_parentheses_right" (formula "14") (term "1"))
         (rule "compound_addition_2" (formula "14") (term "1") (inst "#v1=i_2") (inst "#v0=i_1"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "i_1"))
         (rule "assignment" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "i_2"))
         (rule "remove_parentheses_right" (formula "14") (term "1"))
          (builtin "Use Operation Contract" (formula "14") (newnames "heapBefore_next,result_next,exc_1,heapAfter_next,anon_heap_next") (contract "Perm[Perm::next()].JML normal_behavior operation contract.0") (modality "diamond"))
         (branch "Post (next)"
             (builtin "One Step Simplification" (formula "16"))
             (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "6")) (ifInst ""  (formula "15")))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "17"))
            (rule "eqSymm" (formula "16"))
            (rule "polySimp_addComm0" (formula "17") (term "1"))
            (rule "elementOfSingleton" (formula "16") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "elementOfSingleton" (formula "17") (term "0,1,1"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "castedGetAny" (formula "16") (term "0,0"))
            (rule "assignment" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=Perm_pIdx_1"))
            (rule "simplifySelectOfAnonEQ" (formula "17") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "6")) (ifInst ""  (formula "20")))
            (rule "elementOfSingleton" (formula "17") (term "0,2,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "elementOfSingleton" (formula "17") (term "0,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "hideAuxiliaryEq" (formula "17"))
            (rule "replaceKnownAuxiliaryConstant_taclet0001_3" (formula "17") (term "0"))
            (rule "pullOutSelect" (formula "16") (term "0,0,0") (inst "selectSK=Perm_c_0"))
            (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "6")) (ifInst ""  (formula "20")))
            (rule "elementOfSingleton" (formula "16") (term "0,2,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "elementOfSingleton" (formula "16") (term "0,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "hideAuxiliaryEq" (formula "16"))
            (rule "replaceKnownAuxiliaryConstant_taclet0001_5" (formula "16") (term "0,0,0"))
            (rule "assignmentAdditionInt" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "translateJavaAddInt" (formula "20") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "20") (term "0,1,0"))
            (rule "widening_identity_cast_5" (formula "20") (term "1"))
            (rule "assignment" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "lsContinue" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "18")))
            (rule "selectOfAnonEQ" (formula "20") (term "1,0,0,0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "6")) (ifInst ""  (formula "19")))
            (rule "elementOfSingleton" (formula "20") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "selectOfAnonEQ" (formula "20") (term "0,0,2,0,0,0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "6")) (ifInst ""  (formula "19")))
            (rule "elementOfSingleton" (formula "20") (term "0,0,0,2,0,0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "elementOfSingleton" (formula "20") (term "0,0,0,2,0,0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "selectOfAnonEQ" (formula "20") (term "1,1,0,0,1,0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "elementOfSingleton" (formula "20") (term "0,0,0,1,1,0,0,1,0"))
            (rule "selectCreatedOfAnonAsFormula" (formula "20") (term "0,1,1,0,1,1,0,0,1,0"))
            (rule "selectOfAnon" (formula "20") (term "2,1,1,0,0,1,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "elementOfSingleton" (formula "20") (term "0,0,0,2,1,1,0,0,1,0"))
            (rule "selectOfAnonEQ" (formula "20") (term "0,1,0,1") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "6")) (ifInst ""  (formula "19")))
            (rule "elementOfSingleton" (formula "20") (term "0,2,0,1,0,1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "elementOfSingleton" (formula "20") (term "0,0,1,0,1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "selectOfAnonEQ" (formula "20") (term "0,0,0,1") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "6")) (ifInst ""  (formula "19")))
            (rule "elementOfSingleton" (formula "20") (term "0,2,0,0,0,1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "elementOfSingleton" (formula "20") (term "0,0,0,0,1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "andRight" (formula "20"))
            (branch "Case 1"
               (rule "andRight" (formula "20"))
               (branch "Case 1"
                  (rule "eqTermCut" (formula "2") (term "0") (inst "s=bsum{int i;}(Z(0(#)),
             int::select(anon_heap_LOOP_0,
                         self,
                         Perm::$pIdx),
             (int)(any::seqGet(Seq::select(heap,
                                           self,
                                           Perm::$c),
                               i)))") (userinteraction))
                  (branch "Assume bsum{int i;}(0, self.pIdx@anon_heap_LOOP_0<<anonHeapFunction>>, moduloInt((int)self.c[i])) = bsum{int i;}(0, self.pIdx@anon_heap_LOOP_0, (int)(self.c[i]))"
                     (rule "eqSymm" (formula "2"))
                     (rule "castedGetAny" (formula "2") (term "2,0"))
                     (rule "eqSymm" (formula "2"))
                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                     (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "18"))
                     (rule "bsum_induction_upper_concrete" (formula "21") (term "0"))
                     (rule "polySimp_homoEq" (formula "21"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,1,0,0"))
                     (rule "applyEq" (formula "21") (term "0,1,0") (ifseqformula "2"))
                     (rule "apply_eq_monomials" (formula "21") (term "1,0") (ifseqformula "3"))
                     (rule "polySimp_rightDist" (formula "21") (term "0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "21") (term "1,0"))
                     (rule "add_literals" (formula "21") (term "1,1,1,0"))
                     (rule "times_zero_1" (formula "21") (term "1,1,0"))
                     (rule "add_zero_right" (formula "21") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0"))
                     (rule "add_literals" (formula "21") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0"))
                     (rule "applyEq" (formula "21") (term "1,0,1,0") (ifseqformula "17"))
                     (rule "polySimp_sepNegMonomial" (formula "21"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                     (rule "polySimp_elimOne" (formula "21") (term "0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "orRight" (formula "21"))
                     (rule "inEqSimp_geqRight" (formula "21"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "pullOutSelect" (formula "3") (term "1,1") (inst "selectSK=Perm_pIdx_2"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                     (rule "applyEq" (formula "20") (term "1,1") (ifseqformula "3"))
                     (rule "Class_invariant_axiom_for_Perm" (formula "21") (inst "sk=sk_0") (inst "i=i_4") (inst "i_0=i_0") (inst "i_1=i_1_1") (inst "i_2=i_2_1") (inst "i_3=i_3") (ifseqformula "10"))
                     (branch "Use Axiom"
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "replaceKnownSelect_taclet0001_4" (formula "21") (term "0,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0001_5" (formula "21") (term "0,0,1"))
                        (rule "replaceKnownSelect_taclet0001_4" (formula "21") (term "1,1,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0001_5" (formula "21") (term "1,1,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet0001_4" (formula "21") (term "0,0,1,0,1,0,0"))
                        (rule "replaceKnownSelect_taclet0001_4" (formula "21") (term "0,1,1,0,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0001_5" (formula "21") (term "0,0,1,0,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0001_5" (formula "21") (term "0,1,1,0,0,1,0"))
                        (rule "replaceKnownSelect_taclet0001_4" (formula "21") (term "0,1,1,0,0,1,0,0"))
                        (rule "replaceKnownSelect_taclet0001_4" (formula "21") (term "0,0,0,1,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet0001_4" (formula "21") (term "0,0,0,0,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0001_5" (formula "21") (term "0,1,1,0,0,1,0,0"))
                        (rule "replaceKnownSelect_taclet0001_4" (formula "21") (term "0,0,0,1,1,0,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0001_5" (formula "21") (term "0,0,0,1,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet0001_4" (formula "21") (term "0,1,1,0,0,1,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0001_5" (formula "21") (term "0,0,0,0,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet0001_4" (formula "21") (term "0,0,0,0,1,0,1,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0001_5" (formula "21") (term "0,0,0,1,1,0,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0001_5" (formula "21") (term "0,1,1,0,0,1,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0001_5" (formula "21") (term "0,0,0,0,1,0,1,0,0,0"))
                        (rule "replaceKnownSelect_taclet0001_2" (formula "21") (term "1,0,1,0,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet0001_2" (formula "21") (term "0,1,1,0,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0001_3" (formula "21") (term "1,0,1,0,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0001_3" (formula "21") (term "0,1,1,0,0,0,0,0,0,0,0,0"))
                        (rule "expandInRangeInt" (formula "21") (term "1,1,0,1,0,0,0,0,0"))
                        (rule "expandInRangeInt" (formula "21") (term "1,1,0,1,0"))
                        (rule "replace_int_MIN" (formula "21") (term "0,1,1,1,0,1,0,0,0,0,0"))
                        (rule "replace_int_MAX" (formula "21") (term "1,0,1,1,0,1,0,0,0,0,0"))
                        (rule "replace_int_MIN" (formula "21") (term "0,1,1,1,0,1,0"))
                        (rule "replace_int_MAX" (formula "21") (term "1,0,1,1,0,1,0"))
                        (rule "andLeft" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "andLeft" (formula "21"))
                        (rule "andLeft" (formula "22"))
                        (rule "inEqSimp_commuteLeq" (formula "22"))
                        (rule "applyEq" (formula "22") (term "0") (ifseqformula "20"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                        (rule "mul_literals" (formula "22") (term "1"))
                        (rule "inEqSimp_antiSymm" (formula "22") (ifseqformula "1"))
                        (rule "applyEq" (formula "3") (term "1") (ifseqformula "22"))
                        (rule "Class_invariant_axiom_for_Perm" (formula "6") (inst "sk=sk_1") (inst "i=i_4") (inst "i_0=i_0") (inst "i_1=i_1_1") (inst "i_2=i_2_1") (inst "i_3=i_3") (ifseqformula "10"))
                        (branch "Use Axiom"
                            (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "9")) (ifInst ""  (formula "34")))
                           (rule "expandInRangeInt" (formula "6") (term "1,1,0,1,0,0,0,0,0"))
                           (rule "expandInRangeInt" (formula "6") (term "1,1,0,1,0"))
                           (rule "replace_int_MAX" (formula "6") (term "1,0,1,1,0,1,0,0,0,0,0"))
                           (rule "replace_int_MIN" (formula "6") (term "0,1,1,1,0,1,0,0,0,0,0"))
                           (rule "replace_int_MIN" (formula "6") (term "0,1,1,1,0,1,0"))
                           (rule "replace_int_MAX" (formula "6") (term "1,0,1,1,0,1,0"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "7"))
                           (rule "elementOfSingleton" (formula "7") (term "0,1"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "inEqSimp_commuteLeq" (formula "7"))
                           (rule "applyEq" (formula "7") (term "0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "7"))
                           (rule "closeFalse" (formula "7"))
                        )
                        (branch "Show Axiom Satisfiability"
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "closeTrue" (formula "34"))
                        )
                     )
                     (branch "Show Axiom Satisfiability"
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "closeTrue" (formula "22"))
                     )
                  )
                  (branch "Assume bsum{int i;}(0, self.pIdx@anon_heap_LOOP_0<<anonHeapFunction>>, moduloInt((int)self.c[i])) != bsum{int i;}(0, self.pIdx@anon_heap_LOOP_0, (int)(self.c[i]))"
                     (rule "notLeft" (formula "2"))
                     (rule "eqSymm" (formula "19"))
                     (rule "castedGetAny" (formula "19") (term "2,0"))
                     (rule "eqSymm" (formula "19"))
                     (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "17"))
                     (rule "bsum_induction_upper_concrete" (formula "21") (term "0"))
                     (rule "polySimp_homoEq" (formula "21"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "21") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,1,0,0"))
                     (rule "applyEq" (formula "19") (term "0") (ifseqformula "2"))
                     (rule "eqSymm" (formula "19"))
                     (rule "applyEq" (formula "21") (term "0,1,0") (ifseqformula "2"))
                     (rule "polySimp_addComm1" (formula "21") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0"))
                     (rule "add_literals" (formula "21") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0"))
                     (rule "applyEq" (formula "21") (term "1,0,1,0") (ifseqformula "16"))
                     (rule "polySimp_sepNegMonomial" (formula "21"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                     (rule "polySimp_elimOne" (formula "21") (term "0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "orRight" (formula "21"))
                     (rule "inEqSimp_geqRight" (formula "21"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "pullOutSelect" (formula "20") (term "1,0") (inst "selectSK=Perm_pIdx_2"))
                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                     (rule "Class_invariant_axiom_for_Perm" (formula "5") (inst "sk=sk_1") (inst "i=i_4") (inst "i_0=i_0") (inst "i_1=i_1_1") (inst "i_2=i_2_1") (inst "i_3=i_3") (ifseqformula "9"))
                     (branch "Use Axiom"
                         (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "8")) (ifInst ""  (formula "22")))
                        (rule "expandInRangeInt" (formula "5") (term "1,1,0,1,0,0,0,0,0"))
                        (rule "expandInRangeInt" (formula "5") (term "1,1,0,1,0"))
                        (rule "replace_int_MIN" (formula "5") (term "0,1,1,1,0,1,0,0,0,0,0"))
                        (rule "replace_int_MAX" (formula "5") (term "1,0,1,1,0,1,0,0,0,0,0"))
                        (rule "replace_int_MIN" (formula "5") (term "0,1,1,1,0,1,0"))
                        (rule "replace_int_MAX" (formula "5") (term "1,0,1,1,0,1,0"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "6"))
                        (rule "elementOfSingleton" (formula "6") (term "0,1"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "inEqSimp_commuteLeq" (formula "6"))
                        (rule "applyEq" (formula "6") (term "0") (ifseqformula "1"))
                        (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                     (branch "Show Axiom Satisfiability"
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "closeTrue" (formula "21"))
                     )
                  )
               )
               (branch "Case 2"
                  (rule "allRight" (formula "20") (inst "sk=f_0"))
                  (rule "allRight" (formula "20") (inst "sk=o_0"))
                  (rule "orRight" (formula "20"))
                  (rule "orRight" (formula "20"))
                  (rule "eqSymm" (formula "22"))
                  (rule "replace_known_right" (formula "22") (term "0,0,0,0") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "20")) (ifInst ""  (formula "21")))
                  (rule "orRight" (formula "22"))
                  (rule "notRight" (formula "22"))
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "orRight" (formula "19"))
                  (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "19")))
                  (rule "closeTrue" (formula "24"))
               )
            )
            (branch "Case 2"
               (rule "precOfInt" (formula "20"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "1"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "20") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,1"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
               (rule "polySimp_addComm1" (formula "20") (term "0,0,1"))
               (rule "polySimp_pullOutFactor2b" (formula "20") (term "0,0,0,1"))
               (rule "add_literals" (formula "20") (term "1,1,0,0,0,1"))
               (rule "times_zero_1" (formula "20") (term "1,0,0,0,1"))
               (rule "add_zero_right" (formula "20") (term "0,0,0,1"))
               (rule "inEqSimp_homoInEq0" (formula "20") (term "0"))
               (rule "mul_literals" (formula "20") (term "1,0,0"))
               (rule "add_zero_right" (formula "20") (term "0,0"))
               (rule "applyEq" (formula "20") (term "0,1,0,0") (ifseqformula "17"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0"))
               (rule "polySimp_addComm0" (formula "20") (term "0,0,0"))
               (rule "applyEq" (formula "20") (term "0,1,0,1") (ifseqformula "17"))
               (rule "polySimp_pullOutFactor1" (formula "20") (term "0,1"))
               (rule "add_literals" (formula "20") (term "1,0,1"))
               (rule "times_zero_1" (formula "20") (term "0,1"))
               (rule "leq_literals" (formula "20") (term "1"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "inEqSimp_geqRight" (formula "20"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "applyEq" (formula "13") (term "1") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1"))
               (rule "polySimp_rightDist" (formula "13") (term "1"))
               (rule "mul_literals" (formula "13") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1"))
               (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "1"))
               (rule "andLeft" (formula "13"))
               (rule "inEqSimp_homoInEq1" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0"))
               (rule "mul_literals" (formula "13") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0"))
               (rule "polySimp_addComm0" (formula "13") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
               (rule "add_literals" (formula "13") (term "1,1,0"))
               (rule "times_zero_1" (formula "13") (term "1,0"))
               (rule "add_zero_right" (formula "13") (term "0"))
               (rule "leq_literals" (formula "13"))
               (rule "closeFalse" (formula "13"))
            )
         )
         (branch "Exceptional Post (next)"
             (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "6")) (ifInst ""  (formula "15")))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "15"))
            (rule "notLeft" (formula "15"))
            (rule "close" (formula "18") (ifseqformula "17"))
         )
         (branch "Pre (next)"
             (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "6")) (ifInst ""  (formula "13")) (ifInst ""  (formula "3")))
            (rule "wellFormedAnon" (formula "14") (term "1"))
            (rule "replace_known_left" (formula "14") (term "0,1") (ifseqformula "5"))
             (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "4")))
            (rule "elementOfSingleton" (formula "14") (term "0,0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "elementOfSingleton" (formula "14") (term "0,0,1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "eqSymm" (formula "12"))
             (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "1")))
            (rule "closeFalse" (formula "12"))
         )
      )
      (branch "if b false"
          (builtin "One Step Simplification" (formula "14"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "apply_eq_boolean" (formula "11") (term "1") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "notLeft" (formula "11"))
         (rule "blockBreak" (formula "14") (term "1"))
         (rule "lsBreak" (formula "14") (term "1"))
         (rule "assignment" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "methodCallReturn" (formula "14") (term "1"))
         (rule "assignment" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "methodCallEmpty" (formula "14") (term "1"))
         (rule "tryEmpty" (formula "14") (term "1"))
         (rule "emptyModality" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "5")) (ifInst ""  (formula "13")) (ifInst ""  (formula "2")))
         (rule "elementOfSingleton" (formula "14") (term "0,0,0,0,1,0,2,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "elementOfSingleton" (formula "14") (term "0,1,1,2,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "elementOfSingleton" (formula "14") (term "0,0,0,0,2,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "elementOfSingleton" (formula "14") (term "0,0,2,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "elementOfSingleton" (formula "14") (term "0,0,1,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "elementOfSingleton" (formula "14") (term "0,1,2,2,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "elementOfSingleton" (formula "14") (term "0,1,0,0,1,0,2,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "0,0,0,0,2,0") (ifseqformula "4") (userinteraction))
         (rule "eqTermCut" (formula "2") (term "0") (inst "s=bsum{int i;}(Z(0(#)),
             int::select(anon_heap_LOOP_0,
                         self,
                         Perm::$pIdx),
             (int)(any::seqGet(Seq::select(heap,
                                           self,
                                           Perm::$c),
                               i)))") (userinteraction))
         (branch "Assume bsum{int i;}(0, self.pIdx@anon_heap_LOOP_0<<anonHeapFunction>>, moduloInt((int)self.c[i])) = bsum{int i;}(0, self.pIdx@anon_heap_LOOP_0, (int)(self.c[i]))"
            (rule "applyEq" (formula "3") (term "0") (ifseqformula "2") (userinteraction))
            (rule "applyEqReverse" (formula "16") (term "1") (ifseqformula "3") (userinteraction))
            (rule "equal_bsum_perm1" (formula "16") (userinteraction))
            (rule "Class_invariant_axiom_for_Perm" (formula "11") (inst "sk=sk_0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "i_2=i_2") (inst "i_3=i_3") (ifseqformula "8") (userinteraction))
            (branch "Use Axiom"
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "notLeft" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "seqPermDef" (formula "27") (inst "s=s_1") (inst "iv=iv") (userinteraction))
               (rule "andRight" (formula "27") (userinteraction))
               (branch "Case 1"
                  (rule "replace_known_right" (formula "27") (term "0,0,0,2,0,0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "replace_known_left" (formula "27") (term "0,0,2,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "castedGetAny" (formula "3") (term "2,0"))
                  (rule "inEqSimp_ltRight" (formula "24"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "lenOfSeqDef" (formula "27") (term "0"))
                  (rule "eqSymm" (formula "27"))
                  (rule "polySimp_elimSub" (formula "27") (term "1,1"))
                  (rule "mul_literals" (formula "27") (term "1,1,1"))
                  (rule "add_zero_right" (formula "27") (term "1,1"))
                  (rule "lenOfSeqDef" (formula "27") (term "0"))
                  (rule "polySimp_elimSub" (formula "27") (term "1,0"))
                  (rule "times_zero_2" (formula "27") (term "1,1,0"))
                  (rule "add_zero_right" (formula "27") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "0,1"))
                  (rule "add_zero_right" (formula "27") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0"))
                  (rule "add_zero_right" (formula "27") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1"))
                  (rule "polySimp_elimOne" (formula "27") (term "0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "0,0,0"))
                  (rule "pullOutSelect" (formula "4") (term "1,0") (inst "selectSK=Perm_pIdx_1"))
                  (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "4"))
                  (rule "applyEq" (formula "28") (term "0,0,0") (ifseqformula "4"))
                  (rule "eqSymm" (formula "28"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                  (rule "inEqSimp_commuteGeq" (formula "1"))
                  (rule "Class_invariant_axiom_for_Perm" (formula "6") (inst "sk=sk_1") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "i_2=i_2") (inst "i_3=i_3") (ifseqformula "10"))
                  (branch "Use Axiom"
                      (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "9")) (ifInst ""  (formula "27")))
                     (rule "expandInRangeInt" (formula "6") (term "1,1,0,1,0"))
                     (rule "expandInRangeInt" (formula "6") (term "1,1,0,1,0,0,0,0,0"))
                     (rule "replace_int_MIN" (formula "6") (term "0,1,1,1,0,1,0"))
                     (rule "replace_int_MAX" (formula "6") (term "1,0,1,1,0,1,0"))
                     (rule "replace_int_MIN" (formula "6") (term "0,1,1,1,0,1,0,0,0,0,0"))
                     (rule "replace_int_MAX" (formula "6") (term "1,0,1,1,0,1,0,0,0,0,0"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "7"))
                     (rule "elementOfSingleton" (formula "8") (term "0,0,1"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "elementOfSingleton" (formula "8") (term "0,0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "applyEq" (formula "8") (term "0") (ifseqformula "4"))
                     (rule "inEqSimp_commuteLeq" (formula "8"))
                     (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "40") (term "0,0,1") (ifseqformula "8"))
                     (rule "applyEqReverse" (formula "40") (term "1,1") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "closeTrue" (formula "40"))
                  )
                  (branch "Show Axiom Satisfiability"
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "closeTrue" (formula "25"))
                  )
               )
               (branch "Case 2"
                  (rule "lenOfSeqDef" (formula "27") (term "1,0,0,0") (userinteraction))
                  (rule "seqPermDef" (formula "17") (inst "s=s_1") (inst "iv=iv") (userinteraction))
                  (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "21") (userinteraction))
                  (rule "andLeft" (formula "17") (userinteraction))
                  (rule "exLeft" (formula "18") (inst "sk=s_1_0") (userinteraction))
                  (rule "andLeft" (formula "18") (userinteraction))
                  (rule "andLeft" (formula "18") (userinteraction))
                  (rule "exRight" (formula "30") (inst "t=s_1_0") (userinteraction))
                  (rule "andRight" (formula "30") (userinteraction))
                  (branch "Case 1"
                     (rule "eqSymm" (formula "15"))
                     (rule "eqSymm" (formula "18"))
                     (rule "eqSymm" (formula "30") (term "0"))
                     (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "polySimp_elimSub" (formula "30") (term "1,0"))
                     (rule "times_zero_2" (formula "30") (term "1,1,0"))
                     (rule "add_zero_right" (formula "30") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0"))
                     (rule "add_zero_right" (formula "30") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0"))
                     (rule "lenOfSeqDefEQ" (formula "18") (term "0") (ifseqformula "15"))
                     (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                     (rule "times_zero_2" (formula "18") (term "1,1,0"))
                     (rule "add_zero_right" (formula "18") (term "1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0"))
                     (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                     (rule "inEqSimp_commuteLeq" (formula "12"))
                     (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "12"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "eqSymm" (formula "18"))
                     (rule "applyEq" (formula "30") (term "1") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "orRight" (formula "30"))
                     (rule "eqSymm" (formula "31"))
                     (rule "inEqSimp_leqRight" (formula "30"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_invertInEq1" (formula "1"))
                     (rule "times_zero_2" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "31"))
                     (rule "add_zero_right" (formula "1") (term "1"))
                     (rule "inEqSimp_contradInEq0" (formula "13") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "13") (term "0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "closeFalse" (formula "13"))
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "30") (inst "sk=iv_1") (userinteraction))
                     (rule "impRight" (formula "30") (userinteraction))
                     (rule "allLeft" (formula "21") (inst "t=iv_1") (userinteraction))
                     (rule "impLeft" (formula "21") (userinteraction))
                     (branch "Case 1"
                        (rule "close" (formula "27") (ifseqformula "1"))
                     )
                     (branch "Case 2"
                        (rule "getOfSeqDef" (formula "32") (term "0") (userinteraction))
                        (rule "getOfSeqDef" (formula "32") (term "1") (userinteraction))
                        (rule "ifthenelse_split" (formula "32") (term "1") (userinteraction))
                        (branch " 0 <= (int)s_1_0[iv_1] & (int)s_1_0[iv_1] < self.pIdx@anon_heap_LOOP_0 - 0 TRUE"
                           (rule "ifthenelse_split" (formula "33") (term "0") (userinteraction))
                           (branch "0 <= iv_1 & iv_1 < self.a.length - 0 TRUE"
                              (rule "replace_known_right" (formula "34") (term "0,0,0,0,0") (ifseqformula "30") (userinteraction))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "30") (userinteraction))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_left" (formula "34") (term "0,0") (ifseqformula "4") (userinteraction))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "add_zero_right" (formula "34") (term "0,2,0") (userinteraction))
                              (rule "add_zero_right" (formula "34") (term "1,0,1") (userinteraction))
                              (rule "castedGetAny" (formula "34") (term "1") (userinteraction))
                              (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "18") (userinteraction))
                              (rule "getOfSeqDef" (formula "23") (term "0") (userinteraction))
                              (rule "sub_zero_2" (formula "23") (term "1,1,0,0") (userinteraction))
                              (rule "ifthenelse_split" (formula "23") (term "0") (userinteraction))
                              (branch "0 <= iv_1 & iv_1 < self.a.length TRUE"
                                 (rule "add_zero_right" (formula "24") (term "0,2,0,0") (userinteraction))
                                 (rule "castDel" (formula "24") (term "0") (userinteraction))
                                 (rule "eqTermCut" (formula "35") (term "1") (inst "s=any::seqGet(Seq::select(heap, self, Perm::$c),
            (int)(any::seqGet(s_1_0, iv_1)))") (userinteraction))
                                 (branch "Assume (int)self.c[(int)s_1_0[iv_1]] = self.c[(int)(s_1_0[iv_1])]"
                                    (rule "eqSymm" (formula "25"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "eqSymm" (formula "36"))
                                    (rule "castedGetAny" (formula "1") (term "1,0"))
                                    (rule "applyEq" (formula "25") (term "0") (ifseqformula "1"))
                                    (rule "close" (formula "36") (ifseqformula "25"))
                                 )
                                 (branch "Assume (int)self.c[(int)s_1_0[iv_1]] != self.c[(int)(s_1_0[iv_1])]"
                                    (rule "notLeft" (formula "1") (userinteraction))
                                    (rule "seqGetAlphaCast" (formula "31") (term "0") (userinteraction))
                                    (rule "castDel2" (formula "1") (term "0") (ifseqformula "25") (userinteraction))
                                    (rule "applyEqReverse" (formula "37") (term "1") (ifseqformula "1") (userinteraction))
                                     (builtin "One Step Simplification" (formula "37"))
                                    (rule "closeTrue" (formula "37"))
                                 )
                              )
                              (branch "0 <= iv_1 & iv_1 < self.a.length FALSE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "polySimp_elimSub" (formula "2") (term "1"))
                                 (rule "times_zero_2" (formula "2") (term "1,1"))
                                 (rule "add_zero_right" (formula "2") (term "1"))
                                 (rule "close" (formula "31") (ifseqformula "2"))
                              )
                           )
                           (branch "0 <= iv_1 & iv_1 < self.a.length - 0 FALSE"
                              (rule "andLeft" (formula "2"))
                              (rule "eqSymm" (formula "18"))
                              (rule "eqSymm" (formula "21"))
                              (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "polySimp_elimSub" (formula "34") (term "1"))
                              (rule "times_zero_2" (formula "34") (term "1,1"))
                              (rule "add_zero_right" (formula "34") (term "1"))
                              (rule "inEqSimp_ltToLeq" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "lenOfSeqDefEQ" (formula "21") (term "0") (ifseqformula "18"))
                              (rule "polySimp_elimSub" (formula "21") (term "1,0"))
                              (rule "times_zero_2" (formula "21") (term "1,1,0"))
                              (rule "add_zero_right" (formula "21") (term "1,0"))
                              (rule "inEqSimp_ltRight" (formula "34"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0"))
                              (rule "applyEq" (formula "16") (term "0") (ifseqformula "14"))
                              (rule "inEqSimp_commuteLeq" (formula "16"))
                              (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "16"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "eqSymm" (formula "22"))
                              (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "22"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
                              (rule "andLeft" (formula "4"))
                              (rule "inEqSimp_homoInEq1" (formula "4"))
                              (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                              (rule "add_literals" (formula "4") (term "1,1,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0"))
                              (rule "add_zero_right" (formula "4") (term "0"))
                              (rule "leq_literals" (formula "4"))
                              (rule "closeFalse" (formula "4"))
                           )
                        )
                        (branch " 0 <= (int)s_1_0[iv_1] & (int)s_1_0[iv_1] < self.pIdx@anon_heap_LOOP_0 - 0 FALSE"
                           (rule "seqNPermRange" (formula "20") (inst "iv=iv") (userinteraction))
                           (rule "allLeft" (formula "20") (inst "t=iv_1") (userinteraction))
                           (rule "andLeft" (formula "1"))
                           (rule "eqSymm" (formula "20"))
                           (rule "eqSymm" (formula "17"))
                           (rule "replace_known_left" (formula "21") (term "1,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "1")))
                           (rule "andLeft" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "replace_known_left" (formula "37") (term "0") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "37"))
                           (rule "polySimp_elimSub" (formula "37") (term "1"))
                           (rule "times_zero_2" (formula "37") (term "1,1"))
                           (rule "add_zero_right" (formula "37") (term "1"))
                           (rule "castedGetAny" (formula "5") (term "2,0"))
                           (rule "inEqSimp_ltRight" (formula "34"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "23"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                           (rule "inEqSimp_ltRight" (formula "37"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "lenOfSeqDefEQ" (formula "22") (term "0") (ifseqformula "19"))
                           (rule "polySimp_elimSub" (formula "22") (term "1,0"))
                           (rule "times_zero_2" (formula "22") (term "1,1,0"))
                           (rule "add_zero_right" (formula "22") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0"))
                           (rule "applyEq" (formula "16") (term "0") (ifseqformula "14"))
                           (rule "inEqSimp_commuteLeq" (formula "16"))
                           (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "16"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "eqSymm" (formula "22"))
                           (rule "applyEq" (formula "24") (term "0,1,0,0") (ifseqformula "22"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1"))
                           (rule "polySimp_rightDist" (formula "24") (term "1"))
                           (rule "mul_literals" (formula "24") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                           (rule "pullOutSelect" (formula "7") (term "1,0") (inst "selectSK=Perm_pIdx_1"))
                           (rule "applyEq" (formula "1") (term "1") (ifseqformula "7"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "7"))
                           (rule "inEqSimp_commuteGeq" (formula "2"))
                           (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "25"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "1"))
                           (rule "andLeft" (formula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                           (rule "add_literals" (formula "3") (term "1,1,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0"))
                           (rule "add_zero_right" (formula "3") (term "0"))
                           (rule "leq_literals" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                     )
                  )
               )
            )
            (branch "Show Axiom Satisfiability"
                (builtin "One Step Simplification" (formula "13"))
               (rule "closeTrue" (formula "13"))
            )
         )
         (branch "Assume bsum{int i;}(0, self.pIdx@anon_heap_LOOP_0<<anonHeapFunction>>, moduloInt((int)self.c[i])) != bsum{int i;}(0, self.pIdx@anon_heap_LOOP_0, (int)(self.c[i]))"
            (rule "notLeft" (formula "2"))
            (rule "eqSymm" (formula "12"))
            (rule "castedGetAny" (formula "12") (term "2,0"))
            (rule "eqSymm" (formula "12"))
            (rule "inEqSimp_ltRight" (formula "13"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "applyEq" (formula "13") (term "0") (ifseqformula "3"))
            (rule "eqSymm" (formula "13"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
            (rule "polySimp_elimOne" (formula "1") (term "1"))
            (rule "pullOutSelect" (formula "13") (term "1,0") (inst "selectSK=Perm_pIdx_1"))
            (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
            (rule "inEqSimp_commuteGeq" (formula "2"))
            (rule "expand_moduloInteger" (formula "4") (term "2,0"))
            (rule "replace_int_RANGE" (formula "4") (term "1,1,2,0"))
            (rule "replace_int_MIN" (formula "4") (term "0,2,0"))
            (rule "replace_int_HALFRANGE" (formula "4") (term "0,0,1,2,0"))
            (rule "mod_axiom" (formula "4") (term "1,2,0"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1,2,0"))
            (rule "polySimp_addAssoc" (formula "4") (term "2,0"))
            (rule "polySimp_addAssoc" (formula "4") (term "0,2,0"))
            (rule "add_literals" (formula "4") (term "0,0,2,0"))
            (rule "add_zero_left" (formula "4") (term "0,2,0"))
            (rule "Class_invariant_axiom_for_Perm" (formula "12") (inst "sk=sk_0") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "i_2=i_2") (inst "i_3=i_3") (ifseqformula "9"))
            (branch "Use Axiom"
                (builtin "One Step Simplification" (formula "12"))
               (rule "expandInRangeInt" (formula "12") (term "1,1,0,1,0,0,0,0,0"))
               (rule "expandInRangeInt" (formula "12") (term "1,1,0,1,0"))
               (rule "replace_int_MAX" (formula "12") (term "1,0,1,1,0,1,0,0,0,0,0"))
               (rule "replace_int_MIN" (formula "12") (term "0,1,1,1,0,1,0,0,0,0,0"))
               (rule "replace_int_MIN" (formula "12") (term "0,1,1,1,0,1,0"))
               (rule "replace_int_MAX" (formula "12") (term "1,0,1,1,0,1,0"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "castedGetAny" (formula "13") (term "0,0,1,1,0"))
               (rule "castedGetAny" (formula "13") (term "1,1,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,1,0"))
               (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "13") (term "0"))
               (rule "nnf_notAnd" (formula "13") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
               (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
               (rule "mul_literals" (formula "13") (term "1,0,0,0"))
               (rule "Class_invariant_axiom_for_Perm" (formula "5") (inst "sk=sk_1") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "i_2=i_2") (inst "i_3=i_3") (ifseqformula "9"))
               (branch "Use Axiom"
                   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "8")) (ifInst ""  (formula "18")))
                  (rule "expandInRangeInt" (formula "5") (term "1,1,0,1,0,0,0,0,0"))
                  (rule "expandInRangeInt" (formula "5") (term "1,1,0,1,0"))
                  (rule "replace_int_MIN" (formula "5") (term "0,1,1,1,0,1,0,0,0,0,0"))
                  (rule "replace_int_MAX" (formula "5") (term "1,0,1,1,0,1,0,0,0,0,0"))
                  (rule "replace_int_MIN" (formula "5") (term "0,1,1,1,0,1,0"))
                  (rule "replace_int_MAX" (formula "5") (term "1,0,1,1,0,1,0"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "6"))
                  (rule "elementOfSingleton" (formula "7") (term "0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "elementOfSingleton" (formula "7") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "applyEq" (formula "7") (term "0") (ifseqformula "1"))
                  (rule "inEqSimp_commuteLeq" (formula "7"))
                  (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "2"))
                  (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "7"))
                  (rule "applyEqReverse" (formula "28") (term "1,0") (ifseqformula "7"))
                  (rule "commute_and" (formula "25") (term "1,1,0"))
                  (rule "cnf_rightDist" (formula "25") (term "0"))
                  (rule "distr_forallAnd" (formula "25"))
                  (rule "andLeft" (formula "25"))
                  (rule "commute_or" (formula "26") (term "0"))
                  (rule "cnf_rightDist" (formula "26") (term "0"))
                  (rule "distr_forallAnd" (formula "26"))
                  (rule "andLeft" (formula "26"))
                  (rule "commute_or" (formula "27") (term "0"))
                  (rule "equal_bsum2" (formula "30") (ifseqformula "4"))
                  (rule "allRight" (formula "30") (inst "sk=i_1"))
                  (rule "impRight" (formula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "polySimp_homoEq" (formula "32"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "32") (term "0"))
                  (rule "polySimp_pullOutFactor1" (formula "32") (term "0,0"))
                  (rule "add_literals" (formula "32") (term "1,0,0"))
                  (rule "times_zero_1" (formula "32") (term "0,0"))
                  (rule "add_zero_left" (formula "32") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "elimGcdEq" (formula "32") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=div(add(Z(8(4(6(3(8(4(7(4(1(2(#))))))))))),
        int::seqGet(Seq::select(heap, self, Perm::$c),
                    i_1)),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0"))
                  (rule "add_zero_left" (formula "32") (term "0,0,0"))
                  (rule "add_zero_left" (formula "32") (term "0,0,1"))
                  (rule "add_literals" (formula "32") (term "1,0,0"))
                  (rule "add_zero_left" (formula "32") (term "0,1,0"))
                  (rule "mul_literals" (formula "32") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "0,0,1"))
                  (rule "mul_literals" (formula "32") (term "0,1,0"))
                  (rule "mul_literals" (formula "32") (term "0,0,0"))
                  (rule "mul_literals" (formula "32") (term "0,0,1"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "leq_literals" (formula "32") (term "0,0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "qeq_literals" (formula "32") (term "0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "div_axiom" (formula "32") (term "0") (inst "quotient=quotient_1"))
                  (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                  (rule "equal_literals" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "qeq_literals" (formula "1") (term "0,1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                  (rule "add_literals" (formula "3") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "3") (term "1"))
                  (rule "add_literals" (formula "3") (term "0,1"))
                  (rule "inEqSimp_homoInEq0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "applyEq" (formula "35") (term "0") (ifseqformula "1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1"))
                  (rule "polySimp_rightDist" (formula "3") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                  (rule "mul_literals" (formula "3") (term "0,1"))
                  (rule "allLeft" (formula "32") (inst "t=i_1"))
                  (rule "inEqSimp_commuteGeq" (formula "32") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0"))
                  (rule "add_literals" (formula "32") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "32") (term "1,0,0,1,0"))
                  (rule "add_literals" (formula "32") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "32") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "32") (term "0,0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "32"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                  (rule "mul_literals" (formula "2") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
                  (rule "neg_literal" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                  (rule "add_literals" (formula "2") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "qeq_literals" (formula "2") (term "0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "37"))
                  (rule "add_literals" (formula "2") (term "1"))
                  (rule "allLeft" (formula "32") (inst "t=i_1"))
                  (rule "inEqSimp_commuteGeq" (formula "32") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0"))
                  (rule "add_literals" (formula "32") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "32") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "32") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "32") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "inEqSimp_contradInEq1" (formula "32") (term "0") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "32") (term "0,0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "4"))
                  (rule "mul_literals" (formula "32") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "32") (term "0"))
                  (rule "add_literals" (formula "32") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                  (rule "mul_literals" (formula "32") (term "1"))
                  (rule "inEqSimp_contradInEq3" (formula "32") (ifseqformula "2"))
                  (rule "greater_literals" (formula "32") (term "0,0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "mul_literals" (formula "32") (term "0,0"))
                  (rule "qeq_literals" (formula "32") (term "0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "closeFalse" (formula "32"))
               )
               (branch "Show Axiom Satisfiability"
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "closeTrue" (formula "16"))
               )
            )
            (branch "Show Axiom Satisfiability"
                (builtin "One Step Simplification" (formula "14"))
               (rule "closeTrue" (formula "14"))
            )
         )
      )
   )
   (branch "Exceptional Post (hasNext)"
       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "5")) (ifInst ""  (formula "11")))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "10"))
      (rule "close" (formula "13") (ifseqformula "12"))
   )
   (branch "Pre (hasNext)"
       (builtin "One Step Simplification" (formula "11"))
      (rule "wellFormedAnon" (formula "11"))
      (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "4"))
       (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "3")))
      (rule "closeTrue" (formula "11"))
   )
)
)
}
