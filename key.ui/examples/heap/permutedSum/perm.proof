\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Nov 30 13:05:15 CET 2022
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:on , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:showSatisfiability , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:allow , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[Labels]UseOriginLabels=true
[NewSMT]Axiomatisations=false
[NewSMT]NoTypeHierarchy=false
[NewSMT]Presburger=false
[NewSMT]identifier=OPEN
[NewSMT]sqrtSMTTranslation=SMT
[SMTSettings]SelectedTaclets=
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]maxGenericSorts=2
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[Strategy]ActiveStrategy=JavaCardDLStrategy
[Strategy]MaximumNumberOfAutomaticApplications=10000
[Strategy]Timeout=-1
"
}

\javaSource "src";

\proofObligation "#Proof Obligation Settings
#Wed Nov 30 13:05:15 CET 2022
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
contract=Perm[Perm\\:\\:foo()].JML normal_behavior operation contract.0
name=Perm[Perm\\:\\:foo()].JML normal_behavior operation contract.0
";

\proof {
(keyLog "0" (keyUser "mattias" ) (keyVersion "3dfbba0764"))
(keyLog "1" (keyUser "bubel" ) (keyVersion "c47e929962"))

(autoModeTime "102397")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "translateJavaCastInt" (formula "1") (term "1,0,0,0,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "8") (term "0,0,0"))
(rule "assignment" (formula "8"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_foo,savedHeapBefore_foo"))
 (builtin "One Step Simplification" (formula "8"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "s"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "loopScopeInvDia" (formula "8") (term "1") (newnames "s_0,o,f") (inst "anon_heap_LOOP=anon_heap_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "#heapBefore_LOOP=h") (inst "#savedHeapBefore_LOOP=h_1") (inst "#permissionsBefore_LOOP=h_2") (inst "#variant=x") (inst "#x=x_1"))
(branch "Invariant Initially Valid"
   (rule "andRight" (formula "8"))
   (branch "Case 1"
       (builtin "One Step Simplification" (formula "8"))
      (rule "translateJavaCastInt" (formula "8") (term "1"))
      (rule "translateJavaCastInt" (formula "8") (term "2,1"))
      (rule "eqSymm" (formula "8"))
      (rule "castedGetAny" (formula "8") (term "2,0"))
      (rule "applyEq" (formula "8") (term "1,0") (ifseqformula "5"))
      (rule "bsum_lower_equals_upper" (formula "8") (term "0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "closeTrue" (formula "8"))
   )
   (branch "Case 2"
       (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "6")))
      (rule "closeTrue" (formula "8"))
   )
)
(branch "Invariant Preserved and Used"
    (builtin "One Step Simplification" (formula "9"))
   (rule "translateJavaCastInt" (formula "9") (term "1,0,0"))
   (rule "translateJavaSubInt" (formula "9") (term "0,1,1,1,0,1,1"))
   (rule "translateJavaCastInt" (formula "9") (term "1,0,0,0,1,1,0,1,1"))
   (rule "translateJavaSubInt" (formula "9") (term "0,1,1,0,1"))
   (rule "translateJavaCastInt" (formula "9") (term "2,1,0,0"))
   (rule "translateJavaCastInt" (formula "9") (term "2,1,0,0,0,1,1,0,1,1"))
   (rule "impRight" (formula "9"))
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "11") (term "1,0,0,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "11") (term "0,0,0,1,1,0,1"))
   (rule "eqSymm" (formula "1"))
   (rule "polySimp_elimSub" (formula "11") (term "0,1,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "11") (term "0,1,1,0"))
   (rule "polySimp_addComm0" (formula "11") (term "0,1,1,0"))
   (rule "elementOfSingleton" (formula "11") (term "0,0,0,0,1,0,1,1,0,1"))
   (rule "castedGetAny" (formula "11") (term "2,0,0,0,0,1,1,0,1"))
   (rule "castedGetAny" (formula "1") (term "2,0"))
   (rule "pullOutSelect" (formula "11") (term "0,1,0,1,1,0") (inst "selectSK=Perm_a_0"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")) (ifInst ""  (formula "6")))
   (rule "polySimp_addComm0" (formula "12") (term "0,1,1,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "applyEqReverse" (formula "12") (term "0,0,0,1,1,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "11") (term "0,1,0,1,1,0") (inst "selectSK=Perm_pIdx_0"))
   (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")) (ifInst ""  (formula "6")))
   (rule "polySimp_addComm0" (formula "12") (term "0,1,1,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "applyEqReverse" (formula "12") (term "0,0,0,1,1,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,1,1,0"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_1"))
   (rule "pullOutSelect" (formula "1") (term "0,2,0") (inst "selectSK=Perm_c_0"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")) (ifInst ""  (formula "6")))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "applyEqReverse" (formula "2") (term "0,2,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "ifElseUnfold" (formula "11") (term "1") (inst "#boolv=x_2"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_2"))
    (builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_hasNext,result_0,exc_0") (contract "Perm[Perm::hasNext()].JML normal_behavior operation contract.0"))
   (branch "Post (hasNext)"
       (builtin "One Step Simplification" (formula "10"))
      (rule "replaceKnownSelect_taclet1_2" (formula "10") (term "0,0,1,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "10") (term "0,0,1,0,1"))
      (rule "replaceKnownSelect_taclet1_0" (formula "10") (term "0,1,0,1,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "10") (term "0,1,0,1,0,1"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "11"))
      (rule "eqSymm" (formula "11"))
      (rule "assignment" (formula "13") (term "1"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "ifElseSplit" (formula "13"))
      (branch "if x_2 true"
          (builtin "One Step Simplification" (formula "14"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEq" (formula "12") (term "1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "compound_assignment_op_plus" (formula "14") (term "1"))
         (rule "compound_int_cast_expression" (formula "14") (term "1") (inst "#v=x_2"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_3"))
         (rule "remove_parentheses_right" (formula "14") (term "1"))
         (rule "compound_addition_2" (formula "14") (term "1") (inst "#v0=x_4") (inst "#v1=x_5"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_4"))
         (rule "assignment" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_5"))
         (rule "remove_parentheses_right" (formula "14") (term "1"))
          (builtin "Use Operation Contract" (formula "14") (newnames "heapBefore_next,result_1,exc_1,heapAfter_next,anon_heap_next") (contract "Perm[Perm::next()].JML normal_behavior operation contract.0"))
         (branch "Post (next)"
             (builtin "One Step Simplification" (formula "14"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "replaceKnownSelect_taclet1_2" (formula "14") (term "0,1,0,1,0,1,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "14") (term "0,1,0,1,0,1,1"))
            (rule "replaceKnownSelect_taclet1_2" (formula "14") (term "1,0,0,1,0,0,1,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "14") (term "1,0,0,1,0,0,1,1"))
            (rule "translateJavaAddInt" (formula "14") (term "1,0,1,0,1,1"))
            (rule "translateJavaCastInt" (formula "14") (term "1,0,0,1,1"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "17"))
            (rule "eqSymm" (formula "16"))
            (rule "polySimp_addComm0" (formula "17") (term "1"))
            (rule "castedGetAny" (formula "16") (term "0"))
            (rule "assignment" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=Perm_pIdx_1"))
            (rule "simplifySelectOfAnonEQ" (formula "17") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "20")))
            (rule "replaceKnownSelect_taclet1_2" (formula "17") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "17") (term "2,0"))
            (rule "polySimp_homoEq" (formula "18"))
            (rule "polySimp_addComm1" (formula "18") (term "0"))
            (rule "elementOfSingleton" (formula "17") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "applyEqReverse" (formula "18") (term "0,1,0,0") (ifseqformula "17"))
            (rule "hideAuxiliaryEq" (formula "17"))
            (rule "polySimp_addComm1" (formula "17") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "12"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
            (rule "polySimp_sepNegMonomial" (formula "17"))
            (rule "polySimp_mulLiterals" (formula "17") (term "0"))
            (rule "polySimp_elimOne" (formula "17") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12"))
            (rule "polySimp_mulComm0" (formula "12") (term "1"))
            (rule "polySimp_rightDist" (formula "12") (term "1"))
            (rule "mul_literals" (formula "12") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1"))
            (rule "pullOutSelect" (formula "16") (term "0,0") (inst "selectSK=Perm_c_1"))
            (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "20")))
            (rule "replaceKnownSelect_taclet1_4" (formula "16") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "16") (term "2,0"))
            (rule "elementOfSingleton" (formula "16") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "ifthenelse_negated" (formula "16") (term "0"))
            (rule "pullOutSelect" (formula "16") (term "0,0,0") (inst "selectSK=java_lang_Object_created__0"))
            (rule "simplifySelectOfAnon" (formula "16"))
             (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "21")) (ifInst ""  (formula "6")))
            (rule "applyEqReverse" (formula "17") (term "0,0,0") (ifseqformula "16"))
            (rule "hideAuxiliaryEq" (formula "16"))
            (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "applyEqReverse" (formula "17") (term "0,0") (ifseqformula "16"))
            (rule "hideAuxiliaryEq" (formula "16"))
            (rule "assignmentAdditionInt" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "translateJavaAddInt" (formula "20") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "20") (term "0,1,0"))
            (rule "widening_identity_cast_5" (formula "20") (term "1"))
            (rule "assignment" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "lsContinue" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "18")))
            (rule "replaceKnownSelect_taclet0001_6" (formula "20") (term "0,1,0,1"))
            (rule "replaceKnownSelect_taclet0001_6" (formula "20") (term "1,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0001_7" (formula "20") (term "0,1,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet0001_7" (formula "20") (term "1,0,0,0"))
            (rule "replaceKnownSelect_taclet0001_8" (formula "20") (term "0,2,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0001_11" (formula "20") (term "0,2,0,0,0"))
            (rule "eqSymm" (formula "20") (term "1,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "20") (term "0,1"))
            (rule "precOfInt" (formula "20") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "1,1"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1,1"))
            (rule "polySimp_mulComm0" (formula "20") (term "0,1,0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,1,1"))
            (rule "inEqSimp_homoInEq0" (formula "20") (term "0,1"))
            (rule "mul_literals" (formula "20") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "20") (term "0,0,1"))
            (rule "applyEq" (formula "20") (term "1,0,0,0") (ifseqformula "17"))
            (rule "bsum_induction_upper_concrete" (formula "20") (term "0,0,0"))
            (rule "polySimp_homoEq" (formula "20") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
            (rule "polySimp_addComm0" (formula "20") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,1,0,0,0,0"))
            (rule "applyEq" (formula "20") (term "0,1,0,0,0") (ifseqformula "2"))
            (rule "polySimp_addComm1" (formula "20") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,0,0"))
            (rule "add_literals" (formula "20") (term "1,1,0,0,0,0"))
            (rule "times_zero_1" (formula "20") (term "1,0,0,0,0"))
            (rule "add_zero_right" (formula "20") (term "0,0,0,0"))
            (rule "applyEq" (formula "20") (term "0,1,0,0,1,1") (ifseqformula "17"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,1"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,1"))
            (rule "polySimp_addComm1" (formula "20") (term "0,0,0,1,1"))
            (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1,1"))
            (rule "add_literals" (formula "20") (term "1,1,0,0,1,1"))
            (rule "times_zero_1" (formula "20") (term "1,0,0,1,1"))
            (rule "add_zero_right" (formula "20") (term "0,0,1,1"))
            (rule "polySimp_addComm1" (formula "20") (term "0,0,1,1"))
            (rule "add_literals" (formula "20") (term "0,0,0,1,1"))
            (rule "add_zero_left" (formula "20") (term "0,0,1,1"))
            (rule "applyEq" (formula "20") (term "0,0,0,0,1") (ifseqformula "17"))
            (rule "polySimp_mulComm0" (formula "20") (term "0,0,0,1"))
            (rule "polySimp_rightDist" (formula "20") (term "0,0,0,1"))
            (rule "mul_literals" (formula "20") (term "0,0,0,0,1"))
            (rule "applyEq" (formula "20") (term "1,0,1,0,0,0") (ifseqformula "16"))
            (rule "polySimp_sepNegMonomial" (formula "20") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "eqSymm" (formula "20") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,1"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,1"))
            (rule "mul_literals" (formula "20") (term "0,1,0,1"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,0,1"))
            (rule "pullOutSelect" (formula "20") (term "0,0,1,1") (inst "selectSK=Perm_a_1"))
            (rule "applyEq" (formula "21") (term "0,0,0,1") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
            (rule "replaceKnownSelect_taclet1_0" (formula "1") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "1") (term "2,0"))
            (rule "replaceKnownSelect_taclet0001_9" (formula "1") (term "0,0,1,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0001_10" (formula "1") (term "0,0,1,0,0"))
            (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "21") (term "0,0,0,1") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "21") (term "0,0,1,1") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
            (rule "polySimp_addComm1" (formula "20") (term "0,0,1"))
            (rule "inEqSimp_homoInEq0" (formula "20") (term "1,1"))
            (rule "polySimp_pullOutFactor1" (formula "20") (term "0,1,1"))
            (rule "add_literals" (formula "20") (term "1,0,1,1"))
            (rule "times_zero_1" (formula "20") (term "0,1,1"))
            (rule "qeq_literals" (formula "20") (term "1,1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,1"))
            (rule "polySimp_rightDist" (formula "20") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1"))
            (rule "mul_literals" (formula "20") (term "0,1,1"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,1"))
            (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "Class_invariant_axiom_for_Perm" (formula "18") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "sk=sk_0") (ifseqformula "7"))
            (branch "Use Axiom"
                (builtin "One Step Simplification" (formula "18"))
               (rule "replaceKnownSelect_taclet0001_8" (formula "18") (term "0,0,1"))
               (rule "replaceKnownSelect_taclet0001_12" (formula "18") (term "0,1,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet0001_11" (formula "18") (term "0,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet0001_13" (formula "18") (term "0,1,1"))
               (rule "replaceKnownSelect_taclet0001_8" (formula "18") (term "1,1,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0001_11" (formula "18") (term "1,1,0,0,0"))
               (rule "replaceKnownSelect_taclet0001_8" (formula "18") (term "0,0,1,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0001_11" (formula "18") (term "0,0,1,0,1,0"))
               (rule "replaceKnownSelect_taclet0001_8" (formula "18") (term "0,1,1,0,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0001_11" (formula "18") (term "0,1,1,0,0,1,0"))
               (rule "replaceKnownSelect_taclet0001_8" (formula "18") (term "0,0,0,1,1,0,1,0"))
               (rule "replaceKnownSelect_taclet0001_12" (formula "18") (term "0,1,1,1,0,0,0,0"))
               (rule "replaceKnownSelect_taclet0001_8" (formula "18") (term "0,1,1,0,0,1,0,0"))
               (rule "replaceKnownSelect_taclet0001_12" (formula "18") (term "1,2,1,1,0,0,0,0"))
               (rule "replaceKnownSelect_taclet0001_12" (formula "18") (term "0,1,1,0,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet0001_8" (formula "18") (term "0,0,0,0,1,0,1,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0001_11" (formula "18") (term "0,0,0,1,1,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0001_13" (formula "18") (term "0,1,1,1,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0001_11" (formula "18") (term "0,1,1,0,0,1,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0001_13" (formula "18") (term "1,2,1,1,0,0,0,0"))
               (rule "replaceKnownSelect_taclet0001_12" (formula "18") (term "0,0,0,0,0,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet0001_6" (formula "18") (term "1,0,1,0,0,0,0,0,0,0"))
               (rule "replaceKnownSelect_taclet0001_6" (formula "18") (term "0,1,1,0,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0001_13" (formula "18") (term "0,1,1,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0001_11" (formula "18") (term "0,0,0,0,1,0,1,0,0"))
               (rule "replaceKnownSelect_taclet0001_12" (formula "18") (term "0,1,1,1,0,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0001_13" (formula "18") (term "0,0,0,0,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0001_7" (formula "18") (term "1,0,1,0,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0001_7" (formula "18") (term "0,1,1,0,0,0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0001_13" (formula "18") (term "0,1,1,1,0,0,0,0,0,0,0"))
               (rule "translateJavaCastInt" (formula "18") (term "1,0,0,1,1,0,1,0,0"))
               (rule "translateJavaCastInt" (formula "18") (term "1,1,0,1,0"))
               (rule "translateJavaCastInt" (formula "18") (term "0,1,0,1,0,0"))
               (rule "translateJavaCastInt" (formula "18") (term "1,1,0,1,0,0"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "19"))
               (rule "notLeft" (formula "18"))
               (rule "eqSymm" (formula "25") (term "1,0"))
               (rule "eqSymm" (formula "24") (term "1,0"))
               (rule "eqSymm" (formula "22"))
               (rule "castedGetAny" (formula "25") (term "0,1,0"))
               (rule "eqSymm" (formula "25") (term "1,0"))
               (rule "castedGetAny" (formula "24") (term "0,1,0"))
               (rule "castedGetAny" (formula "24") (term "1,1,0"))
               (rule "castedGetAny" (formula "24") (term "1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "18"))
               (rule "applyEq" (formula "19") (term "0") (ifseqformula "17"))
               (rule "inEqSimp_homoInEq0" (formula "19"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0"))
               (rule "polySimp_addComm0" (formula "19") (term "0,0"))
               (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
               (rule "applyEq" (formula "25") (term "0,1,0,0,1,0,0") (ifseqformula "26"))
               (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "26"))
               (rule "inEqSimp_sepNegMonomial1" (formula "19"))
               (rule "polySimp_mulLiterals" (formula "19") (term "0"))
               (rule "polySimp_elimOne" (formula "19") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "18"))
               (rule "mul_literals" (formula "18") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
               (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
               (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
               (rule "getOfSeqDefEQ" (formula "23") (term "0,1,0") (ifseqformula "21"))
               (rule "castDel" (formula "23") (term "1,0,1,0"))
               (rule "add_zero_right" (formula "23") (term "0,2,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "23") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "23") (term "1,1,1,0,0,1,0"))
               (rule "add_zero_right" (formula "23") (term "1,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
               (rule "eqSeqDef2" (formula "21") (inst "iv=iv") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "true_left" (formula "21"))
               (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=Perm_b_0"))
               (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "14"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "27")))
               (rule "replaceKnownSelect_taclet0001_9" (formula "21") (term "0,0,1,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0001_10" (formula "21") (term "0,0,1,0,0"))
               (rule "replace_known_left" (formula "21") (term "0,1,0,0") (ifseqformula "6"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "elementOfSingleton" (formula "21") (term "0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "simplifySelectOfAnon" (formula "21"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "27")) (ifInst ""  (formula "6")))
               (rule "elementOfSingleton" (formula "21") (term "0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "21"))
               (rule "hideAuxiliaryEq" (formula "21"))
               (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=Perm_perm_0"))
               (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "20"))
               (rule "applyEq" (formula "23") (term "0,0,0,0,0,1,0") (ifseqformula "20"))
               (rule "applyEq" (formula "23") (term "0,0,1,0,0,1,0") (ifseqformula "20"))
               (rule "applyEq" (formula "23") (term "0,0,2,1,0,1,0") (ifseqformula "20"))
               (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "14"))
                (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "27")))
               (rule "replaceKnownSelect_taclet0001_9" (formula "20") (term "0,0,1,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0001_10" (formula "20") (term "0,0,1,0,0"))
               (rule "replace_known_left" (formula "20") (term "0,1,0,0") (ifseqformula "6"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "elementOfSingleton" (formula "20") (term "0,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "simplifySelectOfAnon" (formula "20"))
                (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "27")) (ifInst ""  (formula "6")))
               (rule "elementOfSingleton" (formula "20") (term "0,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "applyEqReverse" (formula "21") (term "0") (ifseqformula "20"))
               (rule "applyEqReverse" (formula "23") (term "0,0,2,1,0,1,0") (ifseqformula "20"))
               (rule "applyEqReverse" (formula "19") (term "0,0") (ifseqformula "20"))
               (rule "applyEqReverse" (formula "23") (term "0,0,0,0,0,1,0") (ifseqformula "20"))
               (rule "applyEqReverse" (formula "23") (term "0,0,1,0,0,1,0") (ifseqformula "20"))
               (rule "hideAuxiliaryEq" (formula "20"))
               (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "12"))
               (rule "mul_literals" (formula "18") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "18") (term "0"))
               (rule "add_literals" (formula "18") (term "0,0"))
               (rule "add_zero_left" (formula "18") (term "0"))
               (rule "nnf_imp2or" (formula "24") (term "0"))
               (rule "Class_invariant_axiom_for_Perm" (formula "10") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "sk=sk_1") (ifseqformula "7"))
               (branch "Use Axiom"
                   (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "26")) (ifInst ""  (formula "20")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "25")))
                  (rule "translateJavaCastInt" (formula "10") (term "1,1,0,1"))
                  (rule "translateJavaCastInt" (formula "10") (term "0,1,0,1,0"))
                  (rule "translateJavaCastInt" (formula "10") (term "1,1,0,1,0"))
                  (rule "translateJavaCastInt" (formula "10") (term "1,0,1,1,0,1,0"))
                  (rule "andLeft" (formula "10"))
                  (rule "andLeft" (formula "10"))
                  (rule "andLeft" (formula "10"))
                  (rule "andLeft" (formula "10"))
                  (rule "eqSymm" (formula "14") (term "1,0"))
                  (rule "eqSymm" (formula "13") (term "1,0"))
                  (rule "eqSymm" (formula "12"))
                  (rule "castedGetAny" (formula "14") (term "0,1,0"))
                  (rule "eqSymm" (formula "14") (term "1,0"))
                  (rule "castedGetAny" (formula "13") (term "1,1,0"))
                  (rule "castedGetAny" (formula "13") (term "1,0,0,1,0"))
                  (rule "castedGetAny" (formula "13") (term "0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "10"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                  (rule "qeq_literals" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                  (rule "inEqSimp_commuteLeq" (formula "10"))
                  (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "27"))
                  (rule "applyEq" (formula "11") (term "0,1,0,0,1,0,0") (ifseqformula "27"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                  (rule "getOfSeqDefEQ" (formula "11") (term "0,1,0") (ifseqformula "10"))
                  (rule "castDel" (formula "11") (term "1,0,1,0"))
                  (rule "add_zero_right" (formula "11") (term "0,2,1,0,1,0"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "11") (term "1,1,1,0,0,1,0"))
                  (rule "add_zero_right" (formula "11") (term "1,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
                  (rule "eqSeqDef2" (formula "10") (inst "iv=iv") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "Class_invariant_axiom_for_Perm" (formula "3") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "sk=sk_2") (ifseqformula "7"))
                  (branch "Use Axiom"
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "replaceKnownSelect_taclet1_4" (formula "3") (term "0,0,1"))
                     (rule "replaceKnownSelect_taclet1_0" (formula "3") (term "0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "3") (term "0,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "3") (term "0,1,1"))
                     (rule "replaceKnownSelect_taclet00001_15" (formula "3") (term "0,1,0,0,0"))
                     (rule "replaceKnownSelect_taclet1_4" (formula "3") (term "1,1,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_16" (formula "3") (term "0,1,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "3") (term "1,1,0,0,0"))
                     (rule "replaceKnownSelect_taclet1_4" (formula "3") (term "0,0,1,0,1,0"))
                     (rule "replaceKnownSelect_taclet00001_15" (formula "3") (term "0,1,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "3") (term "0,0,1,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_16" (formula "3") (term "0,1,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet1_4" (formula "3") (term "0,1,1,0,0,1,0"))
                     (rule "replaceKnownSelect_taclet00001_18" (formula "3") (term "0,1,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet1_4" (formula "3") (term "0,0,0,1,1,0,1,0"))
                     (rule "replaceKnownSelect_taclet1_0" (formula "3") (term "0,1,1,1,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet1_0" (formula "3") (term "1,2,1,1,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet1_4" (formula "3") (term "0,1,1,0,0,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "3") (term "0,1,1,0,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_19" (formula "3") (term "0,1,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet00001_15" (formula "3") (term "0,0,0,1,1,0,1,0,0"))
                     (rule "replaceKnownSelect_taclet1_4" (formula "3") (term "0,0,0,0,1,0,1,0,0"))
                     (rule "replaceKnownSelect_taclet00001_18" (formula "3") (term "0,0,1,0,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet1_0" (formula "3") (term "0,1,1,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "3") (term "0,0,0,1,1,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "3") (term "0,1,1,1,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "3") (term "1,2,1,1,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "3") (term "0,1,1,0,0,1,0,0"))
                     (rule "replaceKnownSelect_taclet1_2" (formula "3") (term "0,1,1,0,0,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet1_0" (formula "3") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet1_2" (formula "3") (term "1,0,1,0,0,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet1_0" (formula "3") (term "0,1,1,1,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_16" (formula "3") (term "0,0,0,1,1,0,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "3") (term "0,0,0,0,1,0,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_19" (formula "3") (term "0,0,1,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "3") (term "0,1,1,0,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet00001_18" (formula "3") (term "0,0,0,1,0,0,1,1,0,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "3") (term "0,1,1,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "3") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "3") (term "1,0,1,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "3") (term "0,1,1,1,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_19" (formula "3") (term "0,0,0,1,0,0,1,1,0,1,0,0"))
                     (rule "translateJavaCastInt" (formula "3") (term "1,1,0,1,0"))
                     (rule "translateJavaCastInt" (formula "3") (term "0,1,0,1,0,0"))
                     (rule "translateJavaCastInt" (formula "3") (term "1,1,0,1,0,0"))
                     (rule "translateJavaCastInt" (formula "3") (term "1,0,1,1,0,1,0,0"))
                     (rule "andLeft" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "notLeft" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "eqSymm" (formula "7") (term "1,0"))
                     (rule "eqSymm" (formula "6") (term "1,0"))
                     (rule "eqSymm" (formula "5"))
                     (rule "castedGetAny" (formula "7") (term "0,1,0"))
                     (rule "eqSymm" (formula "7") (term "1,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,0"))
                     (rule "castedGetAny" (formula "6") (term "1,1,0"))
                     (rule "castedGetAny" (formula "6") (term "1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "3"))
                     (rule "replace_known_left" (formula "33") (term "0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "33"))
                     (rule "allRight" (formula "33") (inst "sk=f_0"))
                     (rule "allRight" (formula "33") (inst "sk=o_0"))
                     (rule "orRight" (formula "33"))
                     (rule "orRight" (formula "33"))
                     (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "30"))
                     (rule "applyEq" (formula "6") (term "0,1,0,0,1,0,0") (ifseqformula "30"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                     (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "16"))
                     (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "4") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
                     (rule "add_literals" (formula "4") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "4") (term "1,0,0"))
                     (rule "add_literals" (formula "4") (term "0,0"))
                     (rule "qeq_literals" (formula "4") (term "0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "3"))
                     (rule "leq_literals" (formula "22") (term "0"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "getOfSeqDefEQ" (formula "5") (term "0,1,0") (ifseqformula "4"))
                     (rule "castDel" (formula "5") (term "1,0,1,0"))
                     (rule "add_zero_right" (formula "5") (term "0,2,1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "5") (term "1,1,0,0,1,0"))
                     (rule "times_zero_2" (formula "5") (term "1,1,1,0,0,1,0"))
                     (rule "add_zero_right" (formula "5") (term "1,1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "5") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1,0"))
                     (rule "eqSeqDef2" (formula "4") (inst "iv=iv") (ifseqformula "4"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=f_0_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "32"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "30"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "15"))
                     (rule "mul_literals" (formula "4") (term "0,0"))
                     (rule "add_zero_left" (formula "4") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "mul_literals" (formula "4") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "4"))
                     (rule "leq_literals" (formula "22") (term "0"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
                     (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "31"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "pullOutSelect" (formula "1") (term "0,0,1,0,0") (inst "selectSK=java_lang_Object_created__1"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
                     (rule "applyEqReverse" (formula "2") (term "0,0,1,0,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "31"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Show Axiom Satisfiability"
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "closeTrue" (formula "27"))
                  )
               )
               (branch "Show Axiom Satisfiability"
                   (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "27")) (ifInst ""  (formula "20")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "25")) (ifInst ""  (formula "27")) (ifInst ""  (formula "20")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "25")))
                  (rule "closeTrue" (formula "26"))
               )
            )
            (branch "Show Axiom Satisfiability"
                (builtin "One Step Simplification" (formula "19"))
               (rule "closeTrue" (formula "19"))
            )
         )
         (branch "Exceptional Post (next)"
             (builtin "One Step Simplification" (formula "16"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "replaceKnownSelect_taclet1_2" (formula "14") (term "0,1,0,1,0,1,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "14") (term "0,1,0,1,0,1,1"))
            (rule "replaceKnownSelect_taclet1_2" (formula "14") (term "1,0,0,1,0,0,1,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "14") (term "1,0,0,1,0,0,1,1"))
            (rule "translateJavaAddInt" (formula "14") (term "1,0,1,0,1,1"))
            (rule "translateJavaCastInt" (formula "14") (term "1,0,0,1,1"))
            (rule "andLeft" (formula "14"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1,0") (ifseqformula "14"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "17"))
            (rule "notLeft" (formula "15"))
            (rule "close" (formula "19") (ifseqformula "18"))
         )
         (branch "Pre (next)"
             (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "3")))
            (rule "wellFormedAnon" (formula "14") (term "1"))
            (rule "replaceKnownSelect_taclet1_2" (formula "14") (term "0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "14") (term "0,0"))
            (rule "replaceKnownSelect_taclet1_0" (formula "14") (term "0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "14") (term "0,1,0"))
            (rule "replace_known_left" (formula "14") (term "0,1") (ifseqformula "5"))
             (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "12")) (ifInst ""  (formula "4")))
            (rule "closeTrue" (formula "14"))
         )
      )
      (branch "if x_2 false"
          (builtin "One Step Simplification" (formula "14"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "apply_eq_boolean" (formula "11") (term "1") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "notLeft" (formula "11"))
         (rule "blockBreak" (formula "14") (term "1"))
         (rule "lsBreak" (formula "14") (term "1"))
         (rule "assignment" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "methodCallReturn" (formula "14") (term "1"))
         (rule "assignment" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "methodCallEmpty" (formula "14") (term "1"))
         (rule "tryEmpty" (formula "14") (term "1"))
         (rule "emptyModality" (formula "14") (term "1"))
         (rule "andRight" (formula "14"))
         (branch "Case 1"
            (rule "impRight" (formula "14"))
            (rule "andRight" (formula "15"))
            (branch "Case 1"
               (rule "andRight" (formula "15"))
               (branch "Case 1"
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "equal_bsum_perm2" (formula "15") (ifseqformula "2") (userinteraction))
                  (rule "hide_right" (formula "16") (userinteraction))
                  (rule "eqTermCut" (formula "15") (term "1") (inst "s=Seq::select(heap, self, Perm::$c)") (userinteraction))
                  (branch "Assume seqDef{int i;}(0, self.pIdx@anon_heap_LOOP_0<<anonHeapFunction>>, (int)self.c[i]) = self.c"
                     (rule "applyEq" (formula "16") (term "1") (ifseqformula "1") (userinteraction))
                     (rule "Class_invariant_axiom_for_Perm" (formula "11") (inst "sk=sk_0") (inst "i_1=i_1") (inst "i_0=i_0") (inst "i=i") (ifseqformula "8") (userinteraction))
                     (branch "Use Axiom"
                        (rule "eqTermCut" (formula "16") (term "0") (inst "s=Seq::select(heap, self, Perm::$b)") (userinteraction))
                        (branch "Assume seqDef{int j;}(0, self.a@heap[anon({(self, Perm::$pIdx)}, anon_heap_LOOP_0<<anonHeapFunction>>)].length, self.a[j]@heap[anon({(self, Perm::$pIdx)}, anon_heap_LOOP_0<<anonHeapFunction>>)]) = self.b"
                           (rule "applyEq" (formula "17") (term "0") (ifseqformula "1") (userinteraction))
                           (rule "replace_known_right" (formula "12") (term "1,0,0,0") (ifseqformula "17") (userinteraction))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "closeFalse" (formula "12"))
                        )
                        (branch "Assume seqDef{int j;}(0, self.a@heap[anon({(self, Perm::$pIdx)}, anon_heap_LOOP_0<<anonHeapFunction>>)].length, self.a[j]@heap[anon({(self, Perm::$pIdx)}, anon_heap_LOOP_0<<anonHeapFunction>>)]) != self.b"
                           (rule "notLeft" (formula "1") (userinteraction))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "13") (inst "iv=iv") (userinteraction))
                           (rule "andRight" (formula "13") (userinteraction))
                           (branch "Case 1"
                               (builtin "One Step Simplification" (formula "11"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "replaceKnownSelect_taclet1_0" (formula "16") (term "0,1,0"))
                              (rule "replaceKnownSelect_taclet1_0" (formula "16") (term "1,2,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "16") (term "0,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "16") (term "1,2,0"))
                              (rule "replaceKnownSelect_taclet1_0" (formula "12") (term "0,1,0,0"))
                              (rule "replaceKnownSelect_taclet1_0" (formula "12") (term "1,2,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "12") (term "0,1,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "12") (term "1,2,0,0"))
                              (rule "translateJavaCastInt" (formula "10") (term "1,1,0,1,0,0"))
                              (rule "translateJavaCastInt" (formula "10") (term "1,1,0,1,0"))
                              (rule "translateJavaCastInt" (formula "10") (term "0,1,0,1,0,0"))
                              (rule "translateJavaCastInt" (formula "10") (term "1,0,1,1,0,1,0,0"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "notLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "eqSymm" (formula "17") (term "1,0"))
                              (rule "eqSymm" (formula "16") (term "1,0"))
                              (rule "eqSymm" (formula "14"))
                              (rule "inEqSimp_ltRight" (formula "22"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "lenOfSeqDef" (formula "22") (term "0"))
                              (rule "polySimp_elimSub" (formula "22") (term "1,0"))
                              (rule "mul_literals" (formula "22") (term "1,1,0"))
                              (rule "add_zero_right" (formula "22") (term "1,0"))
                              (rule "castedGetAny" (formula "18") (term "0,1,0"))
                              (rule "eqSymm" (formula "18") (term "1,0"))
                              (rule "castedGetAny" (formula "17") (term "1,1,0"))
                              (rule "castedGetAny" (formula "17") (term "1,0,0,1,0"))
                              (rule "lenOfSeqDefEQ" (formula "22") (term "1") (ifseqformula "15"))
                              (rule "polySimp_elimSub" (formula "22") (term "1,1"))
                              (rule "mul_literals" (formula "22") (term "1,1,1"))
                              (rule "add_zero_right" (formula "22") (term "1,1"))
                              (rule "lenOfSeqDefEQ" (formula "17") (term "1,1,0,0") (ifseqformula "2"))
                              (rule "polySimp_elimSub" (formula "17") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "17") (term "1,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "17") (term "1,1,1,0,0"))
                              (rule "lenOfSeqDefEQ" (formula "18") (term "1,1,0,0") (ifseqformula "2"))
                              (rule "polySimp_elimSub" (formula "18") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "18") (term "1,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "18") (term "1,1,1,0,0"))
                              (rule "lenOfSeqDefEQ" (formula "19") (term "0") (ifseqformula "2"))
                              (rule "polySimp_elimSub" (formula "19") (term "1,0"))
                              (rule "mul_literals" (formula "19") (term "1,1,0"))
                              (rule "add_zero_right" (formula "19") (term "1,0"))
                              (rule "castedGetAny" (formula "17") (term "0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0"))
                              (rule "add_zero_right" (formula "22") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "11"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,1,0,0,1,0,0"))
                              (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_commuteLeq" (formula "11"))
                              (rule "replace_known_left" (formula "21") (term "0,1") (ifseqformula "11"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "orRight" (formula "21"))
                              (rule "eqSymm" (formula "22"))
                              (rule "inEqSimp_leqRight" (formula "21"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                              (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "19"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1"))
                              (rule "inEqSimp_invertInEq1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                              (rule "inEqSimp_strengthen1" (formula "12") (ifseqformula "22"))
                              (rule "add_zero_right" (formula "12") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "22") (ifseqformula "12"))
                              (rule "mul_literals" (formula "22") (term "1,0,0"))
                              (rule "add_zero_right" (formula "22") (term "0,0"))
                              (rule "leq_literals" (formula "22") (term "0"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "false_right" (formula "22"))
                              (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "12") (term "0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "13") (inst "sk=iv_0") (userinteraction))
                              (rule "impRight" (formula "13") (userinteraction))
                              (rule "selectOfAnon" (formula "14") (term "2,0,0") (userinteraction))
                              (rule "getOfSeqDef" (formula "14") (term "0") (userinteraction))
                              (rule "ifthenelse_split" (formula "14") (term "0") (userinteraction))
                              (branch " 0 <= iv_0 & iv_0 < self.a@heap[anon({(self, Perm::$pIdx)}, anon_heap_LOOP_0<<anonHeapFunction>>)].length - 0 TRUE"
                                 (rule "castDel" (formula "15") (term "0") (userinteraction))
                                 (rule "ifthenelse_split" (formula "15") (term "0") (userinteraction))
                                 (branch " (self.a@heap[anon({(self, Perm::$pIdx)}, anon_heap_LOOP_0<<anonHeapFunction>>)], arr(iv_0 + 0)) in {(self, Perm::$pIdx)} & !arr(iv_0 + 0) = java.lang.Object::<created> | (self.a@heap[anon({(self, Perm::$pIdx)}, anon_heap_LOOP_0<<anonHeapFunction>>)], arr(iv_0 + 0)) in freshLocs(heap) TRUE"
                                     (builtin "One Step Simplification" (formula "14"))
                                     (builtin "One Step Simplification" (formula "5"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "5"))
                                    (rule "replaceKnownSelect_taclet1_0" (formula "15") (term "1,0"))
                                    (rule "replaceKnownSelect_taclet1_0" (formula "1") (term "0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "15") (term "1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "1") (term "0,0"))
                                    (rule "replaceKnownSelect_taclet1_0" (formula "19") (term "0,1,0"))
                                    (rule "replaceKnownSelect_taclet1_0" (formula "19") (term "1,2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "19") (term "0,1,0"))
                                    (rule "replaceKnownSelect_taclet1_0" (formula "2") (term "0,0,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "19") (term "1,2,0"))
                                    (rule "replaceKnownSelect_taclet1_0" (formula "1") (term "0,0,0,1"))
                                    (rule "replaceKnownSelect_taclet1_0" (formula "3") (term "0,1,0,1,1"))
                                    (rule "replaceKnownSelect_taclet1_0" (formula "3") (term "1,2,0,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "2") (term "0,0,1,1"))
                                    (rule "replaceKnownSelect_taclet1_0" (formula "1") (term "1,0,0,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "1") (term "0,0,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "3") (term "0,1,0,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "3") (term "1,2,0,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "1") (term "1,0,0,1,1"))
                                    (rule "translateJavaCastInt" (formula "13") (term "0,1,0,1,0,0"))
                                    (rule "translateJavaCastInt" (formula "13") (term "1,0,0,1,1,0,1,0,0"))
                                    (rule "translateJavaCastInt" (formula "13") (term "1,1,0,1,0"))
                                    (rule "translateJavaCastInt" (formula "13") (term "1,1,0,1,0,0"))
                                    (rule "add_zero_right" (formula "15") (term "0,2,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,1,0"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "andLeft" (formula "4"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "notLeft" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "eqSymm" (formula "25"))
                                    (rule "eqSymm" (formula "21") (term "1,0"))
                                    (rule "eqSymm" (formula "20") (term "1,0"))
                                    (rule "eqSymm" (formula "18"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,1") (ifseqformula "24"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_elimSub" (formula "3") (term "1"))
                                    (rule "mul_literals" (formula "3") (term "1,1"))
                                    (rule "add_zero_right" (formula "3") (term "1"))
                                    (rule "inEqSimp_ltRight" (formula "26"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                    (rule "lenOfSeqDef" (formula "5") (term "1"))
                                    (rule "polySimp_elimSub" (formula "5") (term "1,1"))
                                    (rule "mul_literals" (formula "5") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "5") (term "1,1"))
                                    (rule "castedGetAny" (formula "22") (term "0,1,0"))
                                    (rule "eqSymm" (formula "22") (term "1,0"))
                                    (rule "castedGetAny" (formula "21") (term "1,1,0"))
                                    (rule "castedGetAny" (formula "21") (term "1,0,0,1,0"))
                                    (rule "elementOfSingleton" (formula "2") (term "0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "referencedObjectIsCreatedRight" (formula "24") (ifseqformula "25"))
                                    (rule "close" (formula "24") (ifseqformula "9"))
                                 )
                                 (branch " (self.a@heap[anon({(self, Perm::$pIdx)}, anon_heap_LOOP_0<<anonHeapFunction>>)], arr(iv_0 + 0)) in {(self, Perm::$pIdx)} & !arr(iv_0 + 0) = java.lang.Object::<created> | (self.a@heap[anon({(self, Perm::$pIdx)}, anon_heap_LOOP_0<<anonHeapFunction>>)], arr(iv_0 + 0)) in freshLocs(heap) FALSE"
                                     (builtin "One Step Simplification" (formula "13"))
                                     (builtin "One Step Simplification" (formula "4"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "4"))
                                    (rule "replaceKnownSelect_taclet1_0" (formula "15") (term "1,0"))
                                    (rule "replaceKnownSelect_taclet1_0" (formula "14") (term "0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "15") (term "1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "14") (term "0,0"))
                                    (rule "replaceKnownSelect_taclet1_0" (formula "19") (term "0,1,0"))
                                    (rule "replaceKnownSelect_taclet1_0" (formula "19") (term "1,2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "19") (term "0,1,0"))
                                    (rule "replaceKnownSelect_taclet1_0" (formula "1") (term "0,0,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "19") (term "1,2,0"))
                                    (rule "replaceKnownSelect_taclet1_0" (formula "14") (term "0,0,0,1"))
                                    (rule "replaceKnownSelect_taclet1_0" (formula "2") (term "0,1,0,1,1"))
                                    (rule "replaceKnownSelect_taclet1_0" (formula "2") (term "1,2,0,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "1") (term "0,0,1,1"))
                                    (rule "replaceKnownSelect_taclet1_0" (formula "14") (term "1,0,0,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "14") (term "0,0,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "2") (term "0,1,0,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "2") (term "1,2,0,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "14") (term "1,0,0,1,1"))
                                    (rule "translateJavaCastInt" (formula "12") (term "1,1,0,1,0"))
                                    (rule "translateJavaCastInt" (formula "12") (term "0,1,0,1,0,0"))
                                    (rule "translateJavaCastInt" (formula "12") (term "1,1,0,1,0,0"))
                                    (rule "translateJavaCastInt" (formula "12") (term "1,0,1,1,0,1,0,0"))
                                    (rule "add_zero_right" (formula "15") (term "0,2,0"))
                                    (rule "add_zero_right" (formula "14") (term "0,1,0"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "orRight" (formula "16"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "notLeft" (formula "13"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "eqSymm" (formula "26"))
                                    (rule "eqSymm" (formula "20") (term "1,0"))
                                    (rule "eqSymm" (formula "19") (term "1,0"))
                                    (rule "eqSymm" (formula "17"))
                                    (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "23"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "notRight" (formula "25"))
                                    (rule "polySimp_elimSub" (formula "3") (term "1"))
                                    (rule "mul_literals" (formula "3") (term "1,1"))
                                    (rule "add_zero_right" (formula "3") (term "1"))
                                    (rule "inEqSimp_ltRight" (formula "27"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                    (rule "lenOfSeqDef" (formula "5") (term "1"))
                                    (rule "polySimp_elimSub" (formula "5") (term "1,1"))
                                    (rule "times_zero_2" (formula "5") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "5") (term "1,1"))
                                    (rule "elementOfSingleton" (formula "26"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "false_right" (formula "26"))
                                    (rule "castedGetAny" (formula "22") (term "0,1,0"))
                                    (rule "eqSymm" (formula "22") (term "1,0"))
                                    (rule "castedGetAny" (formula "21") (term "0,1,0"))
                                    (rule "castedGetAny" (formula "21") (term "1,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                    (rule "lenOfSeqDefEQ" (formula "23") (term "0") (ifseqformula "6"))
                                    (rule "polySimp_elimSub" (formula "23") (term "1,0"))
                                    (rule "mul_literals" (formula "23") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "23") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "castedGetAny" (formula "21") (term "1,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "4"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "4") (term "0"))
                                    (rule "lenOfSeqDefEQ" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "6"))
                                    (rule "polySimp_elimSub" (formula "22") (term "1,0,1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "22") (term "1,1,0,1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "22") (term "1,0,1,0,0,1,0,0"))
                                    (rule "lenOfSeqDefEQ" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "6"))
                                    (rule "polySimp_elimSub" (formula "21") (term "1,0,1,0,0,1,0,0"))
                                    (rule "times_zero_2" (formula "21") (term "1,1,0,1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "1,0,1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "5") (term "0,1"))
                                    (rule "add_zero_right" (formula "5") (term "0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "3"))
                                    (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "15"))
                                    (rule "inEqSimp_ltToLeq" (formula "5"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "5") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,1,0,0,1,0,0"))
                                    (rule "applyEq" (formula "16") (term "0") (ifseqformula "14"))
                                    (rule "inEqSimp_commuteLeq" (formula "16"))
                                    (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
                                    (rule "qeq_literals" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "22"))
                                    (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "22"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "5") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                    (rule "polySimp_elimOne" (formula "5") (term "0"))
                                    (rule "eqSeqDef2" (formula "6") (inst "iv=iv") (ifseqformula "6"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "getOfSeqDefEQ" (formula "24") (term "0") (ifseqformula "17"))
                                    (rule "castDel" (formula "24") (term "2,0"))
                                    (rule "castDel" (formula "24") (term "1,0"))
                                    (rule "add_zero_right" (formula "24") (term "0,2,1,0"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "orRight" (formula "24"))
                                    (rule "polySimp_elimSub" (formula "24") (term "1,1"))
                                    (rule "times_zero_2" (formula "24") (term "1,1,1"))
                                    (rule "add_zero_right" (formula "24") (term "1,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "24") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1"))
                                    (rule "polySimp_addComm1" (formula "24") (term "0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "24") (term "0"))
                                    (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "inEqSimp_leqRight" (formula "24"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "1"))
                                    (rule "andLeft" (formula "5"))
                                    (rule "inEqSimp_homoInEq1" (formula "5"))
                                    (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                                    (rule "add_literals" (formula "5") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "5") (term "1,0"))
                                    (rule "add_zero_right" (formula "5") (term "0"))
                                    (rule "leq_literals" (formula "5"))
                                    (rule "closeFalse" (formula "5"))
                                 )
                              )
                              (branch " 0 <= iv_0 & iv_0 < self.a@heap[anon({(self, Perm::$pIdx)}, anon_heap_LOOP_0<<anonHeapFunction>>)].length - 0 FALSE"
                                  (builtin "One Step Simplification" (formula "12"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "replaceKnownSelect_taclet1_0" (formula "18") (term "0,1,0"))
                                 (rule "replaceKnownSelect_taclet1_0" (formula "18") (term "1,2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "18") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "18") (term "1,2,0"))
                                 (rule "replaceKnownSelect_taclet1_0" (formula "13") (term "0,0,1,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "13") (term "0,0,1,1"))
                                 (rule "replaceKnownSelect_taclet1_0" (formula "1") (term "0,1,0,1,1"))
                                 (rule "replaceKnownSelect_taclet1_0" (formula "1") (term "1,2,0,1,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "1") (term "0,1,0,1,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "1") (term "1,2,0,1,1"))
                                 (rule "castDel" (formula "14") (term "0"))
                                 (rule "translateJavaCastInt" (formula "11") (term "1,0,0,1,1,0,1,0,0"))
                                 (rule "translateJavaCastInt" (formula "11") (term "1,1,0,1,0"))
                                 (rule "translateJavaCastInt" (formula "11") (term "0,1,0,1,0,0"))
                                 (rule "translateJavaCastInt" (formula "11") (term "1,1,0,1,0,0"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "andLeft" (formula "13"))
                                 (rule "notLeft" (formula "12"))
                                 (rule "eqSymm" (formula "24"))
                                 (rule "eqSymm" (formula "19") (term "1,0"))
                                 (rule "eqSymm" (formula "18") (term "1,0"))
                                 (rule "eqSymm" (formula "16"))
                                 (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "polySimp_elimSub" (formula "23") (term "1"))
                                 (rule "mul_literals" (formula "23") (term "1,1"))
                                 (rule "add_zero_right" (formula "23") (term "1"))
                                 (rule "inEqSimp_ltRight" (formula "25"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                 (rule "lenOfSeqDef" (formula "3") (term "1"))
                                 (rule "polySimp_elimSub" (formula "3") (term "1,1"))
                                 (rule "times_zero_2" (formula "3") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "3") (term "1,1"))
                                 (rule "castedGetAny" (formula "20") (term "0,1,0"))
                                 (rule "eqSymm" (formula "20") (term "1,0"))
                                 (rule "castedGetAny" (formula "19") (term "0,1,0"))
                                 (rule "castedGetAny" (formula "19") (term "1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                                 (rule "lenOfSeqDefEQ" (formula "21") (term "0") (ifseqformula "4"))
                                 (rule "polySimp_elimSub" (formula "21") (term "1,0"))
                                 (rule "mul_literals" (formula "21") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "21") (term "1,0"))
                                 (rule "castedGetAny" (formula "19") (term "1,0,1,0"))
                                 (rule "inEqSimp_ltRight" (formula "24"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0"))
                                 (rule "lenOfSeqDefEQ" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "5"))
                                 (rule "polySimp_elimSub" (formula "20") (term "1,0,1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "20") (term "1,1,0,1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "20") (term "1,0,1,0,0,1,0,0"))
                                 (rule "lenOfSeqDefEQ" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "5"))
                                 (rule "polySimp_elimSub" (formula "21") (term "1,0,1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,1,0,1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "21") (term "1,0,1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1"))
                                 (rule "add_zero_right" (formula "4") (term "0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "3"))
                                 (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "14"))
                                 (rule "inEqSimp_ltToLeq" (formula "4"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,1,0,0,1,0,0"))
                                 (rule "applyEq" (formula "15") (term "0") (ifseqformula "13"))
                                 (rule "inEqSimp_commuteLeq" (formula "15"))
                                 (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
                                 (rule "qeq_literals" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                 (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
                                 (rule "getOfSeqDefEQ" (formula "6") (term "2,0") (ifseqformula "5"))
                                 (rule "castDel" (formula "6") (term "1,2,0"))
                                 (rule "add_zero_right" (formula "6") (term "1,1,2,0"))
                                 (rule "polySimp_elimSub" (formula "6") (term "1,1,0,2,0"))
                                 (rule "mul_literals" (formula "6") (term "1,1,1,0,2,0"))
                                 (rule "add_zero_right" (formula "6") (term "1,1,0,2,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,2,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,2,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,2,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,2,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,2,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,1,0,2,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,2,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,1,0,2,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,2,0"))
                                 (rule "eqSeqDef2" (formula "5") (inst "iv=iv") (ifseqformula "5"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "getOfSeqDefEQ" (formula "23") (term "0") (ifseqformula "16"))
                                 (rule "castDel" (formula "23") (term "2,0"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "castDel" (formula "23") (term "0,1"))
                                 (rule "add_zero_right" (formula "23") (term "0,2,0,1"))
                                 (rule "orRight" (formula "23"))
                                 (rule "notRight" (formula "23"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "eqSymm" (formula "25"))
                                 (rule "polySimp_elimSub" (formula "2") (term "1"))
                                 (rule "times_zero_2" (formula "2") (term "1,1"))
                                 (rule "add_zero_right" (formula "2") (term "1"))
                                 (rule "inEqSimp_ltToLeq" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "2"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0"))
                                 (rule "add_zero_right" (formula "2") (term "0"))
                                 (rule "leq_literals" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                           )
                        )
                     )
                     (branch "Show Axiom Satisfiability"
                         (builtin "One Step Simplification" (formula "2"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "closeTrue" (formula "13"))
                     )
                  )
                  (branch "Assume seqDef{int i;}(0, self.pIdx@anon_heap_LOOP_0<<anonHeapFunction>>, (int)self.c[i]) != self.c"
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "replaceKnownSelect_taclet1_0" (formula "15") (term "0,1,0"))
                     (rule "replaceKnownSelect_taclet1_0" (formula "15") (term "1,2,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "15") (term "0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "15") (term "1,2,0"))
                     (rule "notLeft" (formula "1"))
                     (rule "inEqSimp_ltRight" (formula "12"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "equalityToSeqGetAndSeqLenRight" (formula "12") (inst "iv=iv"))
                     (rule "getOfSeqDef" (formula "12") (term "0,1,0,1"))
                     (rule "castDel" (formula "12") (term "2,0,1,0,1"))
                     (rule "castDel" (formula "12") (term "1,0,1,0,1"))
                     (rule "add_zero_right" (formula "12") (term "1,1,0,1,0,1"))
                     (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "12") (term "1,1,1,0,0,1,0,1"))
                     (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0,1"))
                     (rule "lenOfSeqDef" (formula "12") (term "1,1,0,0,1"))
                     (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0,1"))
                     (rule "mul_literals" (formula "12") (term "1,1,1,1,0,0,1"))
                     (rule "add_zero_right" (formula "12") (term "1,1,1,0,0,1"))
                     (rule "lenOfSeqDef" (formula "12") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "12") (term "1,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                     (rule "add_zero_right" (formula "12") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0,1"))
                     (rule "add_zero_right" (formula "12") (term "0,0,1,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1"))
                     (rule "nnf_imp2or" (formula "12") (term "0,1"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1"))
                     (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1"))
                     (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,1"))
                     (rule "add_literals" (formula "12") (term "0,0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,0,1"))
                     (rule "Class_invariant_axiom_for_Perm" (formula "10") (inst "sk=sk_0") (inst "i_1=i_1") (inst "i_0=i_0") (inst "i=i") (ifseqformula "7"))
                     (branch "Use Axiom"
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "translateJavaCastInt" (formula "10") (term "1,0,0,1,1,0,1,0,0"))
                        (rule "translateJavaCastInt" (formula "10") (term "1,1,0,1,0"))
                        (rule "translateJavaCastInt" (formula "10") (term "0,1,0,1,0,0"))
                        (rule "translateJavaCastInt" (formula "10") (term "1,1,0,1,0,0"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "notLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "eqSymm" (formula "17") (term "1,0"))
                        (rule "eqSymm" (formula "16") (term "1,0"))
                        (rule "eqSymm" (formula "14"))
                        (rule "castedGetAny" (formula "17") (term "0,1,0"))
                        (rule "eqSymm" (formula "17") (term "1,0"))
                        (rule "castedGetAny" (formula "16") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "16") (term "1,0"))
                        (rule "castedGetAny" (formula "16") (term "0,1,0"))
                        (rule "eqSymm" (formula "16") (term "1,0"))
                        (rule "castedGetAny" (formula "16") (term "0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10"))
                        (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                        (rule "qeq_literals" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                        (rule "inEqSimp_commuteLeq" (formula "10"))
                        (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "20") (term "1,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                        (rule "getOfSeqDefEQ" (formula "15") (term "0,1,0") (ifseqformula "13"))
                        (rule "castDel" (formula "15") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "15") (term "0,2,1,0,1,0"))
                        (rule "polySimp_elimSub" (formula "15") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "15") (term "1,1,1,0,0,1,0"))
                        (rule "add_zero_right" (formula "15") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0"))
                        (rule "eqSeqDef2" (formula "13") (inst "iv=iv") (ifseqformula "13"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "nnf_imp2or" (formula "15") (term "0"))
                        (rule "nnf_imp2or" (formula "14") (term "0"))
                        (rule "nnf_notAnd" (formula "15") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                        (rule "Class_invariant_axiom_for_Perm" (formula "3") (inst "sk=sk_1") (inst "i_1=i_1") (inst "i_0=i_0") (inst "i=i") (ifseqformula "7"))
                        (branch "Use Axiom"
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "replaceKnownSelect_taclet1_4" (formula "3") (term "0,0,1"))
                           (rule "replaceKnownSelect_taclet1_0" (formula "3") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "3") (term "0,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "3") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet1_4" (formula "3") (term "1,1,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "3") (term "1,1,0,0,0"))
                           (rule "replaceKnownSelect_taclet1_4" (formula "3") (term "0,0,1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "3") (term "0,0,1,0,1,0"))
                           (rule "replaceKnownSelect_taclet1_4" (formula "3") (term "0,1,1,0,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "3") (term "0,1,1,0,0,1,0"))
                           (rule "replaceKnownSelect_taclet1_4" (formula "3") (term "0,1,1,0,0,1,0,0"))
                           (rule "replaceKnownSelect_taclet1_4" (formula "3") (term "0,0,0,1,1,0,1,0"))
                           (rule "replaceKnownSelect_taclet1_0" (formula "3") (term "0,1,1,1,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet1_0" (formula "3") (term "1,2,1,1,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet1_4" (formula "3") (term "0,0,0,0,1,0,1,0,0"))
                           (rule "replaceKnownSelect_taclet1_0" (formula "3") (term "0,1,1,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "3") (term "0,1,1,0,0,1,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "3") (term "0,0,0,1,1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "3") (term "0,1,1,1,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "3") (term "1,2,1,1,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet1_0" (formula "3") (term "0,0,0,0,0,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet1_2" (formula "3") (term "1,0,1,0,0,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet1_2" (formula "3") (term "0,1,1,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "3") (term "0,0,0,0,1,0,1,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "3") (term "0,1,1,0,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet1_0" (formula "3") (term "0,1,1,1,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "3") (term "0,0,0,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "3") (term "1,0,1,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "3") (term "0,1,1,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "3") (term "0,1,1,1,0,0,0,0,0,0,0"))
                           (rule "translateJavaCastInt" (formula "3") (term "1,0,0,1,1,0,1,0,0"))
                           (rule "translateJavaCastInt" (formula "3") (term "1,1,0,1,0"))
                           (rule "translateJavaCastInt" (formula "3") (term "0,1,0,1,0,0"))
                           (rule "translateJavaCastInt" (formula "3") (term "1,1,0,1,0,0"))
                           (rule "andLeft" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "andLeft" (formula "4"))
                           (rule "notLeft" (formula "3"))
                           (rule "eqSymm" (formula "10") (term "1,0"))
                           (rule "eqSymm" (formula "9") (term "1,0"))
                           (rule "eqSymm" (formula "7"))
                           (rule "castedGetAny" (formula "10") (term "0,1,0"))
                           (rule "eqSymm" (formula "10") (term "1,0"))
                           (rule "castedGetAny" (formula "9") (term "1,1,0"))
                           (rule "castedGetAny" (formula "9") (term "1,0,0,1,0"))
                           (rule "castedGetAny" (formula "9") (term "0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "3"))
                           (rule "applyEq" (formula "10") (term "0,1,0,0,1,0,0") (ifseqformula "23"))
                           (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "23"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                           (rule "eqSeqDef2" (formula "7") (inst "iv=iv") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "true_left" (formula "7"))
                           (rule "pullOutSelect" (formula "7") (term "0") (inst "selectSK=Perm_b_0"))
                           (rule "applyEq" (formula "9") (term "0,0,1,0") (ifseqformula "7"))
                           (rule "simplifySelectOfAnon" (formula "7"))
                            (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "28")) (ifInst ""  (formula "13")))
                           (rule "elementOfSingleton" (formula "7") (term "0,0"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "applyEqReverse" (formula "9") (term "0,0,1,0") (ifseqformula "7"))
                           (rule "applyEqReverse" (formula "8") (term "0") (ifseqformula "7"))
                           (rule "hideAuxiliaryEq" (formula "7"))
                           (rule "pullOutSelect" (formula "6") (term "0") (inst "selectSK=Perm_perm_0"))
                           (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "6"))
                           (rule "applyEq" (formula "8") (term "0,1,0,1,0") (ifseqformula "6"))
                           (rule "simplifySelectOfAnon" (formula "6"))
                            (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "27")) (ifInst ""  (formula "12")))
                           (rule "eqSymm" (formula "8") (term "1,0"))
                           (rule "elementOfSingleton" (formula "6") (term "0,0"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "applyEqReverse" (formula "8") (term "0,1,1,1,0") (ifseqformula "6"))
                           (rule "applyEqReverse" (formula "7") (term "0") (ifseqformula "6"))
                           (rule "applyEqReverse" (formula "5") (term "0,0") (ifseqformula "6"))
                           (rule "hideAuxiliaryEq" (formula "5"))
                           (rule "eqSymm" (formula "5") (term "1,0"))
                           (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "4"))
                           (rule "applyEq" (formula "23") (term "1,0,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "eqSymm" (formula "23") (term "1,0"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "2"))
                           (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "1,0"))
                           (rule "times_zero_1" (formula "2") (term "0"))
                           (rule "leq_literals" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "25") (term "1,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "1,0"))
                           (rule "times_zero_1" (formula "4") (term "0"))
                           (rule "qeq_literals" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                           (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "20") (term "0,0,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "20") (term "1,1,1,0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "20") (term "1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "nnf_imp2or" (formula "4") (term "0"))
                           (rule "nnf_imp2or" (formula "3") (term "0"))
                           (rule "nnf_notAnd" (formula "4") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                           (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "4") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                           (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "3") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "3") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0"))
                           (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0"))
                           (rule "mul_literals" (formula "3") (term "1,0,0,0"))
                           (rule "commute_or_2" (formula "15") (term "0"))
                           (rule "ifthenelse_to_or_left" (formula "14") (term "1,0"))
                           (rule "eqSymm" (formula "14") (term "1,1,1,0"))
                           (rule "nnf_notAnd" (formula "14") (term "0,0,1,0"))
                           (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0"))
                           (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0"))
                           (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0"))
                           (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,1,0"))
                           (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0"))
                           (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0"))
                           (rule "commute_or" (formula "19") (term "0"))
                           (rule "inEqSimp_or_weaken1" (formula "19") (term "0"))
                           (rule "add_zero_right" (formula "19") (term "1,0,0"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "10")))
                           (rule "allRight" (formula "19") (inst "sk=iv_0"))
                           (rule "orRight" (formula "19"))
                           (rule "orRight" (formula "19"))
                           (rule "inEqSimp_geqRight" (formula "20"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "20"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_homoInEq0" (formula "21") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                           (rule "arrayLengthIsAShort" (formula "24") (term "1,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "arrayLengthNotNegative" (formula "24") (term "1,0"))
                           (rule "commute_or" (formula "17") (term "0,0"))
                           (rule "commute_or" (formula "16") (term "1,1,0"))
                           (rule "lenNonNegative" (formula "18") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "18"))
                           (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                           (rule "lenNonNegative" (formula "13") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "13"))
                           (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
                           (rule "cnf_rightDist" (formula "16") (term "1,1,0"))
                           (rule "cnf_rightDist" (formula "16") (term "0"))
                           (rule "distr_forallAnd" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "commute_or" (formula "17") (term "0"))
                           (rule "shift_paren_or" (formula "16") (term "0"))
                           (rule "commute_or" (formula "17") (term "1,1,0"))
                           (rule "shift_paren_or" (formula "16") (term "0,0"))
                           (rule "cnf_rightDist" (formula "17") (term "0"))
                           (rule "distr_forallAnd" (formula "17"))
                           (rule "andLeft" (formula "17"))
                           (rule "commute_or_2" (formula "18") (term "0"))
                           (rule "shift_paren_or" (formula "17") (term "0"))
                           (rule "commute_or" (formula "18") (term "0,0"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch "self.a.length >= 1 TRUE"
                              (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "eqSymm" (formula "24"))
                              (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "2"))
                              (rule "leq_literals" (formula "13") (term "0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "allLeft" (formula "19") (inst "t=iv_0"))
                              (rule "replace_known_right" (formula "19") (term "0,0") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                              (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "19") (term "0,0,1"))
                              (rule "leq_literals" (formula "19") (term "0,1"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "19"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "self.a.length >= 1 FALSE"
                              (rule "inEqSimp_geqRight" (formula "22"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "3"))
                              (rule "times_zero_2" (formula "3") (term "1,0"))
                              (rule "add_zero_right" (formula "3") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "mul_literals" (formula "3") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "3") (term "0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "closeFalse" (formula "3"))
                           )
                        )
                        (branch "Show Axiom Satisfiability"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "closeTrue" (formula "18"))
                        )
                     )
                     (branch "Show Axiom Satisfiability"
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "closeTrue" (formula "12"))
                     )
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "3")))
                  (rule "closeTrue" (formula "15"))
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "1"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "closeTrue" (formula "15"))
            )
         )
         (branch "Case 2"
            (rule "impRight" (formula "14"))
            (rule "andRight" (formula "15"))
            (branch "Case 1"
               (rule "andRight" (formula "15"))
               (branch "Case 1"
                  (rule "andRight" (formula "15"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "3")))
                     (rule "closeTrue" (formula "15"))
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
   )
   (branch "Exceptional Post (hasNext)"
       (builtin "One Step Simplification" (formula "10"))
      (rule "replaceKnownSelect_taclet1_2" (formula "10") (term "0,0,1,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "10") (term "0,0,1,0,1"))
      (rule "replaceKnownSelect_taclet1_0" (formula "10") (term "0,1,0,1,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "10") (term "0,1,0,1,0,1"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "10"))
      (rule "close" (formula "13") (ifseqformula "12"))
   )
   (branch "Pre (hasNext)"
       (builtin "One Step Simplification" (formula "11"))
      (rule "wellFormedAnon" (formula "11"))
      (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "4"))
       (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "3")))
      (rule "closeTrue" (formula "11"))
   )
)
)
}
