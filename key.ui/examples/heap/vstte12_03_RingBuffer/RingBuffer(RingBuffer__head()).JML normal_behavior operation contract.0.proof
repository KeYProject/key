\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Apr 24 10:27:51 CEST 2014
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=20000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , assertions-assertions\\:on , modelFields-modelFields\\:treatAsAxiom , initialisation-initialisation\\:disableStaticInitialisation , Strings-Strings\\:on , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , optimisedSelectRules-optimisedSelectRules\\:on , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "src";

\proofObligation "#Proof Obligation Settings
#Thu Apr 24 10:27:51 CEST 2014
name=RingBuffer[RingBuffer\\:\\:head()].JML normal_behavior operation contract.0
contract=RingBuffer[RingBuffer\\:\\:head()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mattias" ) (keyVersion "e5095ad740f809525e4c4689dcc12514a0ca06cc"))

(autoModeTime "597")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "8") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "8") (term "0,0,0,0,1"))
(rule "assignment" (formula "8") (term "1"))
(builtin "One Step Simplification" (formula "8"))
(rule "Query_axiom_for_isEmpty_in_RingBuffer" (formula "7") (term "0") (inst "isEmpty_sk=isEmpty_sk_0") (inst "#self=r") (inst "#res=x") (ifseqformula "3"))
(rule "eqSymm" (formula "1") (term "0,1"))
(rule "apply_eq_boolean_rigid" (formula "1") (term "1,0,1") (ifseqformula "8"))
(builtin "One Step Simplification" (formula "1"))
(rule "boxToDiamond" (formula "1") (term "1"))
(builtin "One Step Simplification" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "Class_invariant_axiom_for_RingBuffer" (formula "5") (inst "i=i") (ifseqformula "3"))
(builtin "One Step Simplification" (formula "5"))
(rule "translateJavaAddInt" (formula "5") (term "2,0,2,1,1,0,1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "5"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
(rule "inEqSimp_gtToGeq" (formula "6"))
(rule "times_zero_1" (formula "6") (term "1,0,0"))
(rule "add_zero_right" (formula "6") (term "0,0"))
(rule "inEqSimp_ltToLeq" (formula "8"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "9"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "Axiom_def_modulo" (formula "11") (term "0,2,1,1,0") (ifseqformula "3"))
(rule "eqSymm" (formula "11") (term "1,0"))
(rule "polySimp_elimSub" (formula "11") (term "2,0,2,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,2,0,1,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,2,0,1,0"))
(rule "polySimp_addComm1" (formula "11") (term "2,0,2,0,1,0"))
(rule "polySimp_addComm0" (formula "11") (term "0,2,0,2,0,1,0"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,0,2,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
(rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "6"))
(rule "mul_literals" (formula "6") (term "1"))
(rule "inEqSimp_sepPosMonomial0" (formula "8"))
(rule "polySimp_mulComm0" (formula "8") (term "1"))
(rule "polySimp_rightDist" (formula "8") (term "1"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
(rule "mul_literals" (formula "8") (term "0,1"))
(rule "polySimp_elimOne" (formula "8") (term "1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,2,0,1,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,2,0,1,0"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,2,0,1,0"))
(rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,2,0,1,0"))
(rule "mul_literals" (formula "11") (term "0,0,1,0,0,2,0,1,0"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,2,0,1,0"))
(rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,0,2,0,1,0"))
(rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "10"))
(rule "times_zero_1" (formula "9") (term "0,0"))
(rule "add_zero_left" (formula "9") (term "0"))
(rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "6"))
(rule "leq_literals" (formula "9") (term "0"))
(builtin "One Step Simplification" (formula "9"))
(rule "true_left" (formula "9"))
(rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "8"))
(rule "times_zero_1" (formula "7") (term "0,0"))
(rule "add_zero_left" (formula "7") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "7"))
(rule "mul_literals" (formula "7") (term "1"))
(rule "nnf_imp2or" (formula "11") (term "0"))
(rule "nnf_notAnd" (formula "11") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
(rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
(rule "mul_literals" (formula "11") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
(rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_head,savedHeapBefore_head"))
(builtin "One Step Simplification" (formula "16"))
(rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_isEmpty,savedHeapBefore_isEmpty"))
(builtin "One Step Simplification" (formula "13"))
(rule "returnUnfold" (formula "16") (term "1") (inst "#v0=x"))
(rule "variableDeclarationAssign" (formula "16") (term "1"))
(rule "variableDeclaration" (formula "16") (term "1") (newnames "x"))
(rule "eval_order_array_access4" (formula "16") (term "1") (inst "#v0=x_arr"))
(rule "variableDeclarationAssign" (formula "16") (term "1"))
(rule "variableDeclaration" (formula "16") (term "1") (newnames "x_arr"))
(rule "assignment_read_attribute_this" (formula "16"))
(builtin "One Step Simplification" (formula "16"))
(rule "eval_order_array_access5" (formula "16") (term "1") (inst "#v1=x_1") (inst "#ar1=x_arr_1"))
(rule "variableDeclarationAssign" (formula "16") (term "1"))
(rule "variableDeclaration" (formula "16") (term "1") (newnames "x_arr_1"))
(rule "assignment" (formula "16") (term "1"))
(builtin "One Step Simplification" (formula "16"))
(rule "variableDeclarationAssign" (formula "16") (term "1"))
(rule "variableDeclaration" (formula "16") (term "1") (newnames "x_1"))
(rule "assignment_read_attribute_this" (formula "16"))
(builtin "One Step Simplification" (formula "16"))
(rule "assignment_array2" (formula "16"))
(branch "Normal Execution (x_arr_1 != null)"
   (builtin "One Step Simplification" (formula "16"))
   (rule "returnUnfold" (formula "13") (term "1") (inst "#v0=x_1"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_2"))
   (rule "methodCallReturn" (formula "16") (term "1"))
   (rule "assignment" (formula "16") (term "1"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "compound_equality_comparison_1" (formula "13") (term "1") (inst "#v0=x_3"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_3"))
   (rule "assignment_read_attribute_this" (formula "13"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "methodCallEmpty" (formula "16") (term "1"))
   (rule "equality_comparison_simple" (formula "13") (term "1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "tryEmpty" (formula "16") (term "1"))
   (rule "methodCallReturn" (formula "13") (term "1"))
   (rule "assignment" (formula "13") (term "1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "emptyModality" (formula "16") (term "1"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "commute_and" (formula "16"))
   (rule "Class_invariant_axiom_for_RingBuffer" (formula "16") (term "0") (inst "i=i") (ifseqformula "3"))
   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "12")) (ifInst ""  (formula "5")) (ifInst ""  (formula "10")))
   (rule "translateJavaAddInt" (formula "16") (term "2,0,2,1,1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "16") (term "1,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1,0,0,0"))
   (rule "inEqSimp_gtToGeq" (formula "16") (term "0,0,0,0"))
   (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "16") (term "0,1,0,0,0"))
   (rule "replace_known_left" (formula "16") (term "0,1,0,0,0") (ifseqformula "7"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,0"))
   (rule "replace_known_left" (formula "16") (term "1,0,0") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "Axiom_def_modulo" (formula "16") (term "0,2,1,1,0,1,0") (ifseqformula "3"))
   (rule "eqSymm" (formula "16") (term "1,0,1,0"))
   (rule "polySimp_elimSub" (formula "16") (term "2,0,2,0,1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,2,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,2,0,1,0,1,0"))
   (rule "polySimp_addComm1" (formula "16") (term "2,0,2,0,1,0,1,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,2,0,2,0,1,0,1,0"))
   (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,2,0,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0"))
   (rule "mul_literals" (formula "16") (term "1,0,0,0"))
   (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "6"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
   (rule "mul_literals" (formula "16") (term "0,1,0,0"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
   (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,2,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,2,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,2,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "16") (term "0,1,0,0,2,0,1,0,0"))
   (rule "mul_literals" (formula "16") (term "0,0,1,0,0,2,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0,0,2,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "16") (term "1,0,1,0,0,2,0,1,0,0"))
   (rule "nnf_imp2or" (formula "16") (term "0,0"))
   (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
   (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0"))
   (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0"))
   (rule "mul_literals" (formula "16") (term "1,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
   (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "11"))
   (builtin "One Step Simplification" (formula "16"))
   (rule "methodCallEmpty" (formula "13") (term "1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "emptyModality" (formula "13") (term "1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "inEqSimp_strengthen1" (formula "9") (ifseqformula "13"))
   (rule "add_literals" (formula "9") (term "1"))
   (rule "inEqSimp_contradEq7" (formula "13") (ifseqformula "9"))
   (rule "times_zero_1" (formula "13") (term "1,0,0"))
   (rule "add_zero_right" (formula "13") (term "0,0"))
   (rule "leq_literals" (formula "13") (term "0"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "false_right" (formula "13"))
   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "10"))
   (rule "mul_literals" (formula "9") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9"))
   (rule "mul_literals" (formula "9") (term "1"))
   (rule "arrayLengthNotNegative" (formula "10") (term "1"))
   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "6"))
   (rule "leq_literals" (formula "10") (term "0"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "arrayLengthIsAShort" (formula "10") (term "1"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "lenNonNegative" (formula "5") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "5"))
   (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
   (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "10"))
   (rule "leq_literals" (formula "5") (term "0"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "allLeft" (formula "11") (inst "t=Z(0(#))"))
   (rule "add_zero_right" (formula "11") (term "1,0,2,0,1"))
   (rule "leq_literals" (formula "11") (term "0,0"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "add_zero_right" (formula "11") (term "2,0,2,0,1"))
   (rule "inEqSimp_commuteGeq" (formula "11") (term "0"))
   (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,2,0,1"))
   (rule "times_zero_2" (formula "11") (term "1,0,0,0,2,0,1"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,2,0,1"))
   (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "0,0,2,0,1"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,2,0,1"))
   (rule "polySimp_elimOne" (formula "11") (term "0,0,0,2,0,1"))
   (rule "replace_known_left" (formula "11") (term "0,0,2,0,1") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "eqSymm" (formula "11") (term "1"))
   (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "16"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "9"))
   (rule "qeq_literals" (formula "11") (term "0"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "closeFalse" (formula "11"))
)
(branch "Null Reference (x_arr_1 = null)"
   (builtin "One Step Simplification" (formula "17"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
   (rule "closeFalse" (formula "1"))
)
(branch "Index Out of Bounds (x_arr_1 != null, but x_1 Out of Bounds!)"
   (builtin "One Step Simplification" (formula "17"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
   (rule "false_right" (formula "17"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "1,1"))
   (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "8"))
   (rule "qeq_literals" (formula "1") (term "0,1"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "1"))
   (rule "andLeft" (formula "9"))
   (rule "inEqSimp_homoInEq1" (formula "9"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0"))
   (rule "polySimp_addComm0" (formula "9") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
   (rule "add_literals" (formula "9") (term "1,1,0"))
   (rule "times_zero_1" (formula "9") (term "1,0"))
   (rule "add_zero_right" (formula "9") (term "0"))
   (rule "leq_literals" (formula "9"))
   (rule "closeFalse" (formula "9"))
)
)

}
