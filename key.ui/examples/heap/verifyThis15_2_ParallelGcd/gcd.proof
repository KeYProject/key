\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Jun 03 18:30:07 CEST 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=50000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=wdChecks-wdChecks\\:off , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , runtimeExceptions-runtimeExceptions\\:allow , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , modelFields-modelFields\\:treatAsAxiom , assertions-assertions\\:safe , bigint-bigint\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , initialisation-initialisation\\:disableStaticInitialisation , permissions-permissions\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "src";

\proofObligation "#Proof Obligation Settings
#Wed Jun 03 18:30:07 CEST 2015
name=ParallelGcd[ParallelGcd\\:\\:gcd(int,int)].JML model_behavior operation contract.0
contract=ParallelGcd[ParallelGcd\\:\\:gcd(int,int)].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "kirsten" ) (keyVersion "c2a4d52c2ad58a473b8d4f6ce4c8d074ffe247f6"))

(autoModeTime "288903431")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "heapAtPre"))
(rule "translateJavaMod" (formula "1") (term "0,1,1,0,0,1,0,0,0,1"))
(rule "translateJavaMod" (formula "1") (term "0,1,0,0,0,0,0,1"))
(rule "translateJavaMod" (formula "1") (term "0,1,0,0,0,0,1"))
(rule "translateJavaMod" (formula "1") (term "0,0,1,0,0,1,0,0,0,1"))
(rule "translateJavaSubInt" (formula "1") (term "3,1,1,1,0,1"))
(rule "translateJavaSubInt" (formula "1") (term "2,1,1,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "6") (term "1,1,0"))
(rule "eqSymm" (formula "6") (term "0,1,0,0"))
(rule "eqSymm" (formula "6") (term "1,1"))
(rule "polySimp_elimSub" (formula "6") (term "3,0,1,1,0"))
(rule "polySimp_elimSub" (formula "6") (term "2,0,1,1"))
(rule "polySimp_addComm0" (formula "6") (term "3,0,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "0,1"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0"))
(rule "polySimp_addComm1" (formula "6") (term "0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0,0,0,0"))
(rule "add_zero_right" (formula "6") (term "0,0,0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0,0,0,1,0,0,0"))
(rule "add_zero_right" (formula "6") (term "0,0,0,0,0,0,1,0,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,0,1,0,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,0,1,0,0,0"))
(rule "polySimp_addComm1" (formula "6") (term "0,1,0,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "5"))
(rule "add_zero_right" (formula "5") (term "0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0"))
(rule "inEqSimp_ltToLeq" (formula "4"))
(rule "add_zero_right" (formula "4") (term "0"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0"))
(rule "jmod_axiom" (formula "6") (term "0,1,0,0,0,0,0"))
(rule "polySimp_mulComm1" (formula "6") (term "1,0,1,0,0,0,0,0"))
(rule "jmod_axiom" (formula "6") (term "0,1,0,0,0,0"))
(rule "polySimp_mulComm1" (formula "6") (term "1,0,1,0,0,0,0"))
(rule "jmod_axiom" (formula "6") (term "0,0,1,0,0,1,0,0,0"))
(rule "polySimp_mulComm1" (formula "6") (term "1,0,0,1,0,0,1,0,0,0"))
(rule "jmod_axiom" (formula "6") (term "0,1,1,0,0,1,0,0,0"))
(rule "polySimp_mulComm1" (formula "6") (term "1,0,1,1,0,0,1,0,0,0"))
(rule "polySimp_sepNegMonomial" (formula "6") (term "1,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "0,1,0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "0,1,0,0,0,0,0"))
(rule "polySimp_sepNegMonomial" (formula "6") (term "1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "0,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "0,1,0,0,0,0"))
(rule "polySimp_sepNegMonomial" (formula "6") (term "0,1,0,0,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "0,0,1,0,0,1,0,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "0,0,1,0,0,1,0,0,0"))
(rule "polySimp_sepNegMonomial" (formula "6") (term "1,1,0,0,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "0,1,1,0,0,1,0,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "0,1,1,0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,1"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,1"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,1"))
(rule "mul_literals" (formula "6") (term "0,1,0,1"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,1"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,1,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "0,0,1,0"))
(rule "polySimp_elimOne" (formula "6") (term "0,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "0,0,0,0,0,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,0,0,0,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,0,0,0,1,0,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "0,0,0,0,0,0,1,0,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "6") (term "1,0,0,0,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "0,1,0,0,0,1,0,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "0,1,0,0,0,1,0,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "5"))
(rule "polySimp_mulLiterals" (formula "5") (term "0"))
(rule "polySimp_elimOne" (formula "5") (term "0"))
(rule "inEqSimp_sepNegMonomial0" (formula "4"))
(rule "polySimp_mulLiterals" (formula "4") (term "0"))
(rule "polySimp_elimOne" (formula "4") (term "0"))
(rule "Contract_axiom_for_gcd_in_ParallelGcd" (formula "6") (term "0,1,1,0,0") (inst "i=i"))
(builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
(rule "translateJavaMod" (formula "1") (term "0,1,0,0,0,0,0,1"))
(rule "translateJavaMod" (formula "1") (term "0,1,0,0,0,0,1"))
(rule "translateJavaMod" (formula "1") (term "0,0,1,0,0,1,0,0,0,1"))
(rule "translateJavaMod" (formula "1") (term "0,1,1,0,0,1,0,0,0,1"))
(rule "translateJavaSubInt" (formula "1") (term "3,1,1,1,0,1"))
(rule "translateJavaSubInt" (formula "1") (term "2,1,1,1,1"))
(rule "eqSymm" (formula "1") (term "0,1,0,0,1"))
(rule "eqSymm" (formula "1") (term "1,1,0,1"))
(rule "eqSymm" (formula "1") (term "1,1,1"))
(rule "polySimp_elimSub" (formula "1") (term "3,0,1,1,0,1"))
(rule "polySimp_elimSub" (formula "1") (term "2,0,1,1,1"))
(rule "polySimp_addComm0" (formula "1") (term "3,0,1,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
(rule "add_zero_right" (formula "1") (term "0,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0,1"))
(rule "polySimp_addComm1" (formula "1") (term "0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,0,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
(rule "add_zero_right" (formula "1") (term "0,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,1"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0,0,1"))
(rule "jmod_axiom" (formula "1") (term "0,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm1" (formula "1") (term "1,0,1,0,0,0,0,0,1"))
(rule "jmod_axiom" (formula "1") (term "0,1,0,0,0,0,1"))
(rule "polySimp_mulComm1" (formula "1") (term "1,0,1,0,0,0,0,1"))
(rule "jmod_axiom" (formula "1") (term "0,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm1" (formula "1") (term "1,0,0,1,0,0,1,0,0,0,1"))
(rule "jmod_axiom" (formula "1") (term "0,1,1,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm1" (formula "1") (term "1,0,1,1,0,0,1,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "1") (term "1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "0,1,0,0,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "1") (term "1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "0,1,0,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "1") (term "0,1,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "0,0,1,0,0,1,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "1") (term "1,1,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "0,1,1,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
(rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "5"))
(builtin "One Step Simplification" (formula "1"))
(rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "0,0,1,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,1,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,1,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,1,1"))
(rule "mul_literals" (formula "1") (term "0,1,0,1,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,1,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
(rule "polySimp_elimOne" (formula "1") (term "0,0"))
(rule "replace_known_left" (formula "1") (term "0") (ifseqformula "6"))
(builtin "One Step Simplification" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "replace_known_left" (formula "13") (term "1,0") (ifseqformula "5"))
(builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "6")))
(rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "12") (term "0,0,0,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0"))
(rule "polySimp_elimOne" (formula "12") (term "0,1,0,0"))
(rule "replace_known_right" (formula "13") (term "0,1") (ifseqformula "12"))
(builtin "One Step Simplification" (formula "13"))
(rule "inEqSimp_geqRight" (formula "13"))
(rule "mul_literals" (formula "1") (term "1,0,0"))
(rule "add_literals" (formula "1") (term "0,0"))
(rule "add_zero_left" (formula "1") (term "0"))
(rule "inEqSimp_sepNegMonomial0" (formula "2"))
(rule "polySimp_mulLiterals" (formula "2") (term "0"))
(rule "polySimp_elimOne" (formula "2") (term "0"))
(rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
(rule "qeq_literals" (formula "2") (term "0"))
(builtin "One Step Simplification" (formula "2"))
(rule "closeFalse" (formula "2"))
)

}
