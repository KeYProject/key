\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Jun 03 18:46:51 CEST 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=50000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=wdChecks-wdChecks\\:off , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , runtimeExceptions-runtimeExceptions\\:allow , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , modelFields-modelFields\\:treatAsAxiom , assertions-assertions\\:safe , bigint-bigint\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , initialisation-initialisation\\:disableStaticInitialisation , permissions-permissions\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "src";

\proofObligation "#Proof Obligation Settings
#Wed Jun 03 18:46:51 CEST 2015
name=ParallelGcd[ParallelGcd\\:\\:parallelGcd(int,int,[Z)].JML behavior operation contract.0
contract=ParallelGcd[ParallelGcd\\:\\:parallelGcd(int,int,[Z)].JML behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "kirsten" ) (keyVersion "c2a4d52c2ad58a473b8d4f6ce4c8d074ffe247f6"))

(autoModeTime "34901595652")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "heapAtPre"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "eqSymm" (formula "7") (term "1,1,0,0,0,1"))
(rule "eqSymm" (formula "7") (term "1,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,0,0,0,1"))
(rule "add_zero_right" (formula "7") (term "0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,0,1"))
(rule "assignment" (formula "7") (term "1"))
(builtin "One Step Simplification" (formula "7"))
(rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "0,0,1,0,0,0,1"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_parallelGcd,savedHeapBefore_parallelGcd,_aInBefore_parallelGcd,_bInBefore_parallelGcd,_rBefore_parallelGcd"))
(builtin "One Step Simplification" (formula "7"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "a"))
(rule "assignment" (formula "7") (term "1"))
(builtin "One Step Simplification" (formula "7"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "b"))
(rule "assignment" (formula "7") (term "1"))
(builtin "One Step Simplification" (formula "7"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "i"))
(rule "assignment" (formula "7") (term "1"))
(builtin "One Step Simplification" (formula "7"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "6") (userinteraction))
(builtin "One Step Simplification" (formula "2"))
(builtin "Loop Invariant" (formula "7") (newnames "variant,b_0,heapBefore_LOOP,iBefore_LOOP,bBefore_LOOP,aBefore_LOOP,i_0,b_1,a_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
(branch "Invariant Initially Valid"
   (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")))
   (rule "translateJavaSubInt" (formula "7") (term "2,1,1,1,0"))
   (rule "translateJavaSubInt" (formula "7") (term "3,1,1,1"))
   (rule "leq_literals" (formula "7") (term "0,0"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "eqSymm" (formula "7") (term "1,0"))
   (rule "eqSymm" (formula "7") (term "1,1"))
   (rule "polySimp_elimSub" (formula "7") (term "2,0,1,0"))
   (rule "polySimp_elimSub" (formula "7") (term "3,0,1,1"))
   (rule "polySimp_addComm0" (formula "7") (term "3,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "4"))
   (rule "add_zero_right" (formula "4") (term "0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "5"))
   (rule "add_zero_right" (formula "5") (term "0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1"))
   (rule "polySimp_addComm1" (formula "7") (term "0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "4"))
   (rule "polySimp_mulLiterals" (formula "4") (term "0"))
   (rule "polySimp_elimOne" (formula "4") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "5"))
   (rule "polySimp_mulLiterals" (formula "5") (term "0"))
   (rule "polySimp_elimOne" (formula "5") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1"))
   (rule "polySimp_elimOne" (formula "7") (term "0,0,1"))
   (rule "Contract_axiom_for_gcd_in_ParallelGcd" (formula "7") (term "1,1,0") (inst "i=i_1"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")) (ifInst ""  (formula "2")))
   (rule "translateJavaMod" (formula "1") (term "0,1,0,0,0,0,1"))
   (rule "translateJavaMod" (formula "1") (term "0,1,1,0,0,1,0,0,0,1"))
   (rule "translateJavaSubInt" (formula "1") (term "3,1,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "1") (term "2,1,1,1,1"))
   (rule "translateJavaMod" (formula "1") (term "0,1,0,0,0,0,0,1"))
   (rule "translateJavaMod" (formula "1") (term "0,0,1,0,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "1") (term "0,1,0,0,1"))
   (rule "eqSymm" (formula "1") (term "1,1,0,1"))
   (rule "eqSymm" (formula "1") (term "1,1,1"))
   (rule "polySimp_elimSub" (formula "1") (term "3,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "1") (term "2,0,1,1,1"))
   (rule "polySimp_addComm0" (formula "1") (term "3,0,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0,1"))
   (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
   (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
   (rule "add_zero_right" (formula "1") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,0,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0,0,1"))
   (rule "jmod_axiom" (formula "1") (term "0,1,0,0,0,0,1"))
   (rule "polySimp_mulComm1" (formula "1") (term "1,0,1,0,0,0,0,1"))
   (rule "jmod_axiom" (formula "1") (term "0,1,1,0,0,1,0,0,0,1"))
   (rule "polySimp_mulComm1" (formula "1") (term "1,0,1,1,0,0,1,0,0,0,1"))
   (rule "jmod_axiom" (formula "1") (term "0,1,0,0,0,0,0,1"))
   (rule "polySimp_mulComm1" (formula "1") (term "1,0,1,0,0,0,0,0,1"))
   (rule "jmod_axiom" (formula "1") (term "0,0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_mulComm1" (formula "1") (term "1,0,0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_sepNegMonomial" (formula "1") (term "1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0,0,0,1"))
   (rule "polySimp_sepNegMonomial" (formula "1") (term "1,1,0,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "0,1,1,0,0,1,0,0,0,1"))
   (rule "polySimp_sepNegMonomial" (formula "1") (term "1,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0,0,0,0,1"))
   (rule "polySimp_sepNegMonomial" (formula "1") (term "0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "0,0,1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "0,0,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,1,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,1"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,1,1"))
   (rule "mul_literals" (formula "1") (term "0,1,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,0,1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1,0,0,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
   (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
   (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "6"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "0,0"))
   (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "5"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "2"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "6"))
   (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "5")))
   (rule "closeTrue" (formula "14"))
)
(branch "Body Preserves Invariant"
   (builtin "One Step Simplification" (formula "9"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "impRight" (formula "9"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "boxToDiamond" (formula "1") (term "1") (userinteraction))
   (rule "notLeft" (formula "1") (userinteraction))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "b_0_2"))
   (rule "inequality_comparison_simple" (formula "13") (term "1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "eqSymm" (formula "13") (term "0,0,1,0"))
   (rule "methodCallEmpty" (formula "13") (term "1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "emptyModality" (formula "13") (term "1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "translateJavaSubInt" (formula "15") (term "2,1,1,1,0,0,0,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "15") (term "3,1,1,1,0,0,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "15") (term "0,1,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "15") (term "0,1,1,1,0"))
   (rule "eqSymm" (formula "15") (term "1,0,0,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "15") (term "1,1,0,0,0,1,1,0,1"))
   (rule "eqSymm" (formula "15") (term "1,1,0,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "15") (term "0,1,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "15") (term "0,1,1,1,0"))
   (rule "polySimp_elimSub" (formula "15") (term "2,0,1,1,0,0,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "15") (term "3,0,1,1,0,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "15") (term "0,1,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "15") (term "0,1,1,1,0"))
   (rule "polySimp_addComm0" (formula "15") (term "3,0,1,1,0,0,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,0,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_addComm1" (formula "15") (term "0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,0,0,0,1,1,0,1"))
   (rule "add_zero_right" (formula "15") (term "0,1,0,0,0,0,0,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0,0,0,0,0,0,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,0,0,1,1,0,1"))
   (rule "add_zero_right" (formula "15") (term "0,1,0,0,0,0,0,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0,0,0,0,1,1,0,1"))
   (rule "variableDeclarationAssign" (formula "15") (term "1"))
   (rule "variableDeclaration" (formula "15") (term "1") (newnames "exc_1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0,0,0,0,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,0,0,0,1,1,0,1"))
   (rule "assignment" (formula "15") (term "1"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "variableDeclaration" (formula "15") (term "1") (newnames "thrownExc"))
   (rule "blockThrow" (formula "15") (term "1,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,0,0,0,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,0,0,0,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,0,0,0,0,1,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,1,0,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "15") (term "0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,1,0,0,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0,0,0,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,1,0,0,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,1,0,0,0,1,1,0,1"))
   (rule "mul_literals" (formula "15") (term "0,1,0,1,0,0,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,1,0,0,0,1,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,0,0,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,0,0,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,0,0,0,1,1,0,1"))
   (rule "ifUnfold" (formula "15") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "15") (term "1") (newnames "x"))
   (rule "inequality_comparison_simple" (formula "15") (term "1"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "eqSymm" (formula "15") (term "0,0,1,0"))
   (rule "replace_known_right" (formula "15") (term "0,0,1,0") (ifseqformula "13"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "ifSplit" (formula "15"))
   (branch "if x true"
      (builtin "One Step Simplification" (formula "1"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "1"))
      (rule "ifUnfold" (formula "15") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_1"))
      (rule "compound_less_equal_than_comparison_1" (formula "15") (term "1") (inst "#v0=x_2"))
      (rule "variableDeclarationAssign" (formula "15") (term "1"))
      (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_2"))
      (rule "assignment_read_length" (formula "15") (term "1"))
      (branch "Normal Execution (_r != null)"
         (builtin "One Step Simplification" (formula "16"))
         (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
         (rule "false_right" (formula "15"))
         (rule "less_equal_than_comparison_simple" (formula "15") (term "1"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "ifSplit" (formula "15"))
         (branch "if x_1 true"
            (builtin "One Step Simplification" (formula "16"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "blockThrow" (formula "16") (term "1"))
            (rule "throwUnfold" (formula "16") (term "1") (inst "#v0=e"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "e_2"))
            (rule "arrayLengthIsAnInt" (formula "1") (term "0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "arrayLengthNotNegative" (formula "1") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
            (rule "times_zero_1" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "methodCallParamThrow" (formula "18") (term "1,0,0,1"))
            (rule "tryCatchThrow" (formula "18") (term "1,0,0,1"))
            (rule "ifElseUnfold" (formula "18") (term "1,0,0,1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "18") (term "1,0,0,1") (newnames "x_12"))
            (rule "equality_comparison_simple" (formula "18") (term "1,0,0,1"))
            (rule "instanceCreationAssignment" (formula "18") (term "1") (inst "#v0=e_3"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "e_3"))
            (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "18") (term "1") (inst "#v0=e_4"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "e_4"))
            (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<createObject>_0,savedHeapBefore_<createObject>_0"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "__NEW___1"))
            (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "18") (term "1") (inst "#v0=e_5"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "e_5"))
            (rule "allocateInstance" (formula "18"))
            (builtin "One Step Simplification" (formula "1"))
            (builtin "One Step Simplification" (formula "19"))
            (rule "wellFormedAnon" (formula "1") (term "0,1,0"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "11"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
            (rule "notLeft" (formula "1"))
            (rule "orRight" (formula "17"))
            (rule "blockEmpty" (formula "22") (term "1"))
            (rule "assignment" (formula "22") (term "1"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<create>_0,savedHeapBefore_<create>_0"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "assignment_write_attribute_this" (formula "22") (term "1"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "methodCallWithinClass" (formula "22") (term "1"))
            (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<prepareEnter>_0,savedHeapBefore_<prepareEnter>_0"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "methodCallSuper" (formula "22") (term "1"))
            (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<prepare>_4,savedHeapBefore_<prepare>_4"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "methodCallSuper" (formula "22") (term "1"))
            (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<prepare>_5,savedHeapBefore_<prepare>_5"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "methodCallEmpty" (formula "22") (term "1"))
            (rule "blockEmpty" (formula "22") (term "1"))
            (rule "assignment_write_attribute_this" (formula "22") (term "1"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "assignment_write_attribute_this" (formula "22") (term "1"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "methodCallEmpty" (formula "22") (term "1"))
            (rule "methodCallEmpty" (formula "22") (term "1"))
            (rule "blockEmpty" (formula "22") (term "1"))
            (rule "methodCallReturnIgnoreResult" (formula "22") (term "1"))
            (rule "methodCallReturn" (formula "22") (term "1"))
            (rule "assignment" (formula "22") (term "1"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "methodCallEmpty" (formula "22") (term "1"))
            (rule "blockEmpty" (formula "22") (term "1"))
            (rule "assignment" (formula "22") (term "1"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<init>_5,savedHeapBefore_<init>_5"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "methodCallSuper" (formula "22") (term "1"))
            (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<init>_6,savedHeapBefore_<init>_6"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "methodCallSuper" (formula "22") (term "1"))
            (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<init>_7,savedHeapBefore_<init>_7"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "methodCallEmpty" (formula "22") (term "1"))
            (rule "blockEmpty" (formula "22") (term "1"))
            (rule "assignment_write_attribute_this" (formula "22") (term "1"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "assignment_write_attribute_this" (formula "22") (term "1"))
            (builtin "One Step Simplification" (formula "22"))
            (rule "methodCallEmpty" (formula "22") (term "1"))
            (rule "methodCallEmpty" (formula "22") (term "1"))
            (rule "blockEmpty" (formula "22") (term "1"))
            (rule "assignment_write_attribute" (formula "22") (term "1"))
            (branch "Normal Execution (e_3 != null)"
               (builtin "One Step Simplification" (formula "23"))
               (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "19")))
               (rule "false_right" (formula "22"))
               (rule "assignment" (formula "22") (term "1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "tryCatchThrow" (formula "22") (term "1"))
               (rule "ifElseUnfold" (formula "22") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_13"))
               (rule "equality_comparison_simple" (formula "22") (term "1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "replace_known_right" (formula "22") (term "0,0,1,0") (ifseqformula "19"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "ifElseSplit" (formula "22"))
               (branch "if x_13 true"
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_13 false"
                  (builtin "One Step Simplification" (formula "23"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "ifElseSplit" (formula "22"))
                  (branch "if e_2 instanceof java.lang.Throwable true"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                     (rule "true_left" (formula "1"))
                     (rule "variableDeclaration" (formula "22") (term "1") (newnames "e_6"))
                     (rule "delete_unnecessary_cast" (formula "22") (term "1"))
                     (branch "Normal Execution (e_2 instanceof java.lang.Throwable)"
                        (builtin "One Step Simplification" (formula "1"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "1"))
                        (rule "assignment" (formula "22") (term "1"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "assignment" (formula "22") (term "1"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "methodCallEmpty" (formula "22") (term "1"))
                        (rule "emptyModality" (formula "22") (term "1"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "replace_known_right" (formula "22") (term "0,0,1,0") (ifseqformula "19"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "ifElseSplit" (formula "22"))
                        (branch "if x_12 true"
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if x_12 false"
                           (builtin "One Step Simplification" (formula "23"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "ifElseSplit" (formula "22"))
                           (branch "if thrownExc instanceof java.lang.Throwable true"
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                              (rule "true_left" (formula "1"))
                              (rule "variableDeclaration" (formula "22") (term "1") (newnames "e_7"))
                              (rule "delete_unnecessary_cast" (formula "22") (term "1"))
                              (branch "Normal Execution (thrownExc instanceof java.lang.Throwable)"
                                 (builtin "One Step Simplification" (formula "23"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "assignment" (formula "22") (term "1"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "emptyModality" (formula "22") (term "1"))
                                 (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "19")) (ifInst ""  (formula "19")) (ifInst ""  (formula "19")))
                                 (rule "allRight" (formula "22") (inst "sk=f_1"))
                                 (rule "allRight" (formula "22") (inst "sk=o_1"))
                                 (rule "orRight" (formula "22"))
                                 (rule "selectOfStore" (formula "23") (term "1"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "castDel" (formula "23") (term "1,1"))
                                 (rule "selectOfStore" (formula "23") (term "2,1"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "castDel" (formula "23") (term "1,2,1"))
                                 (rule "selectOfStore" (formula "23") (term "2,2,1"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "castDel" (formula "23") (term "1,2,2,1"))
                                 (rule "selectOfCreate" (formula "23") (term "2,2,2,1"))
                                 (rule "castDel" (formula "23") (term "1,2,2,2,1"))
                                 (rule "selectOfAnon" (formula "23") (term "2,2,2,2,1"))
                                 (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "19")) (ifInst ""  (formula "22")))
                                 (rule "eqSymm" (formula "14") (userinteraction))
                                 (rule "cut_direct" (formula "22") (term "0,0") (userinteraction))
                                 (branch "CUT: o_1 = null TRUE"
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "false_right" (formula "23"))
                                    (rule "translateJavaSubInt" (formula "16") (term "2,1,1"))
                                    (rule "translateJavaSubInt" (formula "17") (term "3,1,1"))
                                    (rule "eqSymm" (formula "23") (term "0,0,2,2,1"))
                                    (rule "eqSymm" (formula "15"))
                                    (rule "eqSymm" (formula "23") (term "0,0,1"))
                                    (rule "eqSymm" (formula "23") (term "1,0,1"))
                                    (rule "eqSymm" (formula "23") (term "0,0,2,1"))
                                    (rule "eqSymm" (formula "23") (term "1,0,2,1"))
                                    (rule "eqSymm" (formula "23") (term "1,0,2,2,1"))
                                    (rule "eqSymm" (formula "23") (term "0,0,2,2,2,1"))
                                    (rule "eqSymm" (formula "16") (term "1"))
                                    (rule "eqSymm" (formula "17") (term "1"))
                                    (rule "eqSymm" (formula "23"))
                                    (rule "polySimp_elimSub" (formula "16") (term "2,0,1"))
                                    (rule "polySimp_elimSub" (formula "17") (term "3,0,1"))
                                    (rule "polySimp_addComm0" (formula "17") (term "3,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "9"))
                                    (rule "add_zero_right" (formula "9") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "10"))
                                    (rule "add_zero_right" (formula "10") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "14"))
                                    (rule "add_zero_right" (formula "14") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "17") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "17") (term "0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "13"))
                                    (rule "add_zero_right" (formula "13") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "12"))
                                    (rule "applyEqRigid" (formula "22") (term "0,0,0,2,2,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "22") (term "0,0,2,2,0"))
                                    (rule "replace_known_right" (formula "22") (term "0,0,2,2,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "applyEqRigid" (formula "22") (term "0,0,0,2,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "22") (term "0,0,2,0"))
                                    (rule "replace_known_right" (formula "22") (term "0,0,2,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "applyEq" (formula "15") (term "1,1") (ifseqformula "14"))
                                    (rule "applyEq" (formula "16") (term "1,1") (ifseqformula "14"))
                                    (rule "applyEq" (formula "22") (term "1,2,2,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "22") (term "0,0,0,2,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "22") (term "0,0,2,0"))
                                    (rule "replace_known_right" (formula "22") (term "0,0,2,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "applyEq" (formula "22") (term "0,0,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "22") (term "0,0,0"))
                                    (rule "replace_known_right" (formula "22") (term "0,0,0") (ifseqformula "19"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "applyEqRigid" (formula "22") (term "1,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "closeTrue" (formula "22"))
                                 )
                                 (branch "CUT: o_1 = null FALSE"
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "notRight" (formula "23") (userinteraction))
                                    (rule "cut_direct" (formula "24") (term "0,0,1") (userinteraction))
                                    (branch "CUT: e_5 = o_1 TRUE"
                                       (rule "applyEq" (formula "19") (term "1,0") (ifseqformula "1") (userinteraction))
                                       (rule "applyEq" (formula "20") (term "1,0") (ifseqformula "1") (userinteraction))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "1") (userinteraction))
                                       (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "1") (userinteraction))
                                       (rule "replace_known_left" (formula "24") (term "0,0,2,1") (ifseqformula "1") (userinteraction))
                                       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                                       (rule "close" (formula "19") (ifseqformula "2"))
                                    )
                                    (branch "CUT: e_5 = o_1 FALSE"
                                       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "24")) (ifInst ""  (formula "24")) (ifInst ""  (formula "24")))
                                       (rule "closeTrue" (formula "25") (userinteraction))
                                    )
                                 )
                              )
                              (branch "ClassCastException (!(thrownExc instanceof java.lang.Throwable))"
                                 (builtin "One Step Simplification" (formula "23"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "closeTrue" (formula "22"))
                              )
                           )
                           (branch "if thrownExc instanceof java.lang.Throwable false"
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                     )
                     (branch "ClassCastException (!(e_2 instanceof java.lang.Throwable))"
                        (builtin "One Step Simplification" (formula "23"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "closeTrue" (formula "22"))
                     )
                  )
                  (branch "if e_2 instanceof java.lang.Throwable false"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch "Null Reference (e_3 = null)"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "if x_1 false"
            (builtin "One Step Simplification" (formula "1"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "notLeft" (formula "1"))
            (rule "inEqSimp_leqRight" (formula "13"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "ifElseUnfold" (formula "16") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_3"))
            (rule "assignment_array2" (formula "16") (term "1"))
            (branch "Normal Execution (_r != null)"
               (builtin "One Step Simplification" (formula "17"))
               (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
               (rule "orRight" (formula "16"))
               (rule "inEqSimp_leqRight" (formula "16"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_ltRight" (formula "17"))
               (rule "mul_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "pullOutSelect" (formula "18") (term "0,1,0") (inst "selectSK=arr_0"))
               (rule "simplifySelectOfAnon" (formula "1"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "6")))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replaceKnownAuxiliaryConstant_taclet01001_1" (formula "18") (term "0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "mul_literals" (formula "2") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "ifElseSplit" (formula "17"))
               (branch "if x_3 true"
                  (builtin "One Step Simplification" (formula "18"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "ifUnfold" (formula "18") (term "1") (inst "#boolv=x"))
                  (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_9"))
                  (rule "greater_than_comparison_simple" (formula "18") (term "1"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_gtToGeq" (formula "18") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "18") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,0"))
                  (rule "ifSplit" (formula "18"))
                  (branch "if x_9 true"
                     (builtin "One Step Simplification" (formula "1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "assignmentSubtractionInt" (formula "19") (term "1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "translateJavaSubInt" (formula "19") (term "0,1,0"))
                     (rule "polySimp_elimSub" (formula "19") (term "0,1,0"))
                     (rule "blockEmpty" (formula "19") (term "1"))
                     (rule "postincrement" (formula "19") (term "1"))
                     (rule "compound_int_cast_expression" (formula "19") (term "1") (inst "#v=x"))
                     (rule "variableDeclarationAssign" (formula "19") (term "1"))
                     (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_11"))
                     (rule "remove_parentheses_right" (formula "19") (term "1"))
                     (rule "assignmentAdditionInt" (formula "19") (term "1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "translateJavaAddInt" (formula "19") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "19") (term "0,1,0"))
                     (rule "widening_identity_cast_5" (formula "19") (term "1"))
                     (rule "assignment" (formula "19") (term "1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "tryEmpty" (formula "19") (term "1"))
                     (rule "methodCallEmpty" (formula "19") (term "1"))
                     (rule "emptyModality" (formula "19") (term "1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "translateJavaSubInt" (formula "16") (term "3,1,1"))
                     (rule "translateJavaSubInt" (formula "15") (term "2,1,1"))
                     (rule "eqSymm" (formula "19") (term "1,0,0,1,0"))
                     (rule "eqSymm" (formula "16") (term "1"))
                     (rule "eqSymm" (formula "15") (term "1"))
                     (rule "polySimp_pullOutFactor3b" (formula "19") (term "2,0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,2,0,1,1,0,0,0"))
                     (rule "polySimp_elimSub" (formula "16") (term "3,0,1"))
                     (rule "polySimp_elimSub" (formula "15") (term "2,0,1"))
                     (rule "polySimp_mulComm0" (formula "19") (term "0,3,0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "16") (term "3,0,1"))
                     (rule "polySimp_rightDist" (formula "19") (term "0,3,0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,0,3,0,1,1,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "19") (term "3,0,1,1,0,0"))
                     (rule "add_literals" (formula "19") (term "1,1,3,0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "0,3,0,1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "0,0,1"))
                     (rule "mul_literals" (formula "19") (term "0,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "1,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "1,0,1,0,0"))
                     (rule "precOfInt" (formula "19") (term "1"))
                     (rule "inEqSimp_ltToLeq" (formula "8"))
                     (rule "add_zero_right" (formula "8") (term "0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "16") (term "0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "16") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "13"))
                     (rule "add_zero_right" (formula "13") (term "0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12"))
                     (rule "add_zero_right" (formula "12") (term "0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "9"))
                     (rule "add_zero_right" (formula "9") (term "0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "19") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,1"))
                     (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0,1,1"))
                     (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,1,1"))
                     (rule "polySimp_addComm1" (formula "19") (term "0,0,1,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "19") (term "0,1,1"))
                     (rule "add_literals" (formula "19") (term "1,1,0,1,1"))
                     (rule "times_zero_1" (formula "19") (term "1,0,1,1"))
                     (rule "add_zero_right" (formula "19") (term "0,1,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,1,1"))
                     (rule "polySimp_addComm1" (formula "19") (term "0,0,1,1"))
                     (rule "add_literals" (formula "19") (term "0,0,0,1,1"))
                     (rule "add_zero_left" (formula "19") (term "0,0,1,1"))
                     (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,1"))
                     (rule "add_literals" (formula "19") (term "1,0,1,1"))
                     (rule "times_zero_1" (formula "19") (term "0,1,1"))
                     (rule "leq_literals" (formula "19") (term "1,1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_commuteLeq" (formula "11"))
                     (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "18") (term "1,1,0,0,1,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "18") (term "1,0,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,1,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0,1,0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,1,0,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,0,1,0,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "0,1,0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,1,0,0,0,0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "18") (term "1"))
                     (rule "times_zero_2" (formula "18") (term "1,0,1"))
                     (rule "add_zero_right" (formula "18") (term "0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "18") (term "0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "18") (term "1,1,0,0,1,0,0,0"))
                     (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "13"))
                     (rule "applyEq" (formula "15") (term "1,1") (ifseqformula "13"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                     (rule "polySimp_elimOne" (formula "8") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0"))
                     (rule "replace_known_left" (formula "18") (term "1,0,0,0,0,0") (ifseqformula "12"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                     (rule "polySimp_elimOne" (formula "11") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "1,1,0"))
                     (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "replace_known_left" (formula "18") (term "1,0,0,0,0") (ifseqformula "14"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "applyEq" (formula "18") (term "1,1,1,0,0,0") (ifseqformula "14"))
                     (rule "applyEq" (formula "18") (term "1,1,1,0,0") (ifseqformula "14"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0,0,0"))
                     (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0,0"))
                     (rule "replace_known_left" (formula "18") (term "1,0,0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,1"))
                     (rule "mul_literals" (formula "18") (term "0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,1"))
                     (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "4"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "18") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,0,0"))
                     (rule "inEqSimp_contradEq3" (formula "16") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0"))
                     (rule "qeq_literals" (formula "16") (term "0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "false_right" (formula "16"))
                     (rule "inEqSimp_subsumption1" (formula "17") (term "0,0,0") (ifseqformula "3"))
                     (rule "leq_literals" (formula "17") (term "0,0,0,0"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "inEqSimp_contradInEq0" (formula "15") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,0,0,0"))
                     (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0"))
                     (rule "add_literals" (formula "15") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "15") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0,0"))
                     (rule "leq_literals" (formula "15") (term "0,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "1"))
                     (rule "mul_literals" (formula "12") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0"))
                     (rule "add_literals" (formula "12") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                     (rule "mul_literals" (formula "12") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "12"))
                     (rule "leq_literals" (formula "11") (term "0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "Contract_axiom_for_gcd_in_ParallelGcd" (formula "13") (term "0") (inst "i=i_1"))
                     (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "5")))
                     (rule "wellFormedAnon" (formula "13") (term "1,0"))
                     (rule "translateJavaMod" (formula "13") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "translateJavaMod" (formula "13") (term "0,1,0,0,0,0,0,1"))
                     (rule "translateJavaMod" (formula "13") (term "0,1,0,0,0,0,1"))
                     (rule "translateJavaSubInt" (formula "13") (term "3,1,1,1,0,1"))
                     (rule "translateJavaSubInt" (formula "13") (term "2,1,1,1,1"))
                     (rule "translateJavaMod" (formula "13") (term "0,1,1,0,0,1,0,0,0,1"))
                     (rule "eqSymm" (formula "13") (term "0,1,0,0,1"))
                     (rule "eqSymm" (formula "13") (term "1,1,0,1"))
                     (rule "eqSymm" (formula "13") (term "1,1,1"))
                     (rule "replace_known_left" (formula "13") (term "0,1,0") (ifseqformula "5"))
                     (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "10")))
                     (rule "polySimp_elimSub" (formula "13") (term "3,0,1,1,0,1"))
                     (rule "polySimp_elimSub" (formula "13") (term "2,0,1,1,1"))
                     (rule "polySimp_addComm0" (formula "13") (term "3,0,1,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0,0,1"))
                     (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0,1"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0"))
                     (rule "add_zero_right" (formula "13") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0,1,0,0,0,1"))
                     (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,1"))
                     (rule "applyEq" (formula "13") (term "1,0,1,0,0,0,0,0,1") (ifseqformula "14"))
                     (rule "applyEq" (formula "13") (term "0,1,1,1") (ifseqformula "15"))
                     (rule "eqSymm" (formula "13") (term "1,1,1"))
                     (rule "replace_known_left" (formula "13") (term "1,1,1") (ifseqformula "14"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "applyEq" (formula "13") (term "1,0,1,0,0,0,1") (ifseqformula "14"))
                     (rule "applyEq" (formula "13") (term "0,1,0,0,0,0,0,0,1") (ifseqformula "14"))
                     (rule "applyEq" (formula "13") (term "0,1,1,0,1") (ifseqformula "14"))
                     (rule "applyEq" (formula "13") (term "1,1,1,1") (ifseqformula "14"))
                     (rule "applyEq" (formula "13") (term "1,0,0,1,0,0,0,1,0,0,1") (ifseqformula "14"))
                     (rule "jmod_axiom" (formula "13") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "13") (term "1,0,0,1,0,0,1,0,0,1"))
                     (rule "jmod_axiom" (formula "13") (term "0,1,0,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "13") (term "1,0,1,0,0,0,0,1"))
                     (rule "jmod_axiom" (formula "13") (term "0,1,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "13") (term "1,0,1,1,0,0,1,0,0,1"))
                     (rule "jmod_axiom" (formula "13") (term "0,1,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "13") (term "1,0,1,0,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "13") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "13") (term "1,0,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "13") (term "1,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,1,1,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "0,1,1,0,0,1,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "13") (term "1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "0,1,0"))
                     (rule "replace_known_left" (formula "13") (term "1,0") (ifseqformula "12"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,0,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "0,0,1,1"))
                     (rule "inEqSimp_contradEq3" (formula "13") (term "0,1,0,1") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,1,0,1"))
                     (rule "add_literals" (formula "13") (term "1,1,0,0,0,1,0,1"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,0,1,0,1"))
                     (rule "add_zero_right" (formula "13") (term "0,0,0,1,0,1"))
                     (rule "qeq_literals" (formula "13") (term "0,0,1,0,1"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "inEqSimp_contradInEq0" (formula "13") (term "0,1,1") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "13") (term "0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,1"))
                     (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,1"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0,1,1"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,1,1"))
                     (rule "add_literals" (formula "13") (term "1,1,0,0,0,1,1"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,0,1,1"))
                     (rule "add_zero_right" (formula "13") (term "0,0,0,1,1"))
                     (rule "leq_literals" (formula "13") (term "0,0,1,1"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "inEqSimp_subsumption1" (formula "13") (term "0") (ifseqformula "11"))
                     (rule "leq_literals" (formula "13") (term "0,0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "andLeft" (formula "13"))
                     (rule "notLeft" (formula "14"))
                     (rule "andLeft" (formula "13"))
                     (rule "andLeft" (formula "13"))
                     (rule "nnf_ex2all" (formula "18"))
                     (rule "Contract_axiom_for_gcd_in_ParallelGcd" (formula "17") (term "1") (inst "i=i_1"))
                     (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "6")))
                     (rule "wellFormedAnon" (formula "17") (term "1,0"))
                     (rule "translateJavaMod" (formula "17") (term "0,1,0,0,0,0,0,1"))
                     (rule "translateJavaSubInt" (formula "17") (term "3,1,1,1,0,1"))
                     (rule "translateJavaMod" (formula "17") (term "0,1,0,0,0,0,1"))
                     (rule "translateJavaMod" (formula "17") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "translateJavaMod" (formula "17") (term "0,1,1,0,0,1,0,0,0,1"))
                     (rule "translateJavaSubInt" (formula "17") (term "2,1,1,1,1"))
                     (rule "eqSymm" (formula "17") (term "0,1,0,0,1"))
                     (rule "eqSymm" (formula "17") (term "1,1,0,1"))
                     (rule "eqSymm" (formula "17") (term "1,1,1"))
                     (rule "replace_known_left" (formula "17") (term "0,1,0") (ifseqformula "6"))
                     (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "11")))
                     (rule "polySimp_elimSub" (formula "17") (term "3,0,1,1,0,1"))
                     (rule "polySimp_elimSub" (formula "17") (term "2,0,1,1,1"))
                     (rule "polySimp_addComm0" (formula "17") (term "3,0,1,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,1,0,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0"))
                     (rule "add_zero_right" (formula "17") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,1"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,0,1,0,0,0,1"))
                     (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,1"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,0,0,1"))
                     (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0,0,1"))
                     (rule "jmod_axiom" (formula "17") (term "0,1,0,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "17") (term "1,0,1,0,0,0,0,1"))
                     (rule "jmod_axiom" (formula "17") (term "0,1,0,0,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "17") (term "1,0,1,0,0,0,0,0,1"))
                     (rule "jmod_axiom" (formula "17") (term "0,1,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "17") (term "1,0,1,1,0,0,1,0,0,0,1"))
                     (rule "jmod_axiom" (formula "17") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "17") (term "1,0,0,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "17") (term "1,0,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "17") (term "0,1,0,0,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "17") (term "1,0,0,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "17") (term "0,1,0,0,0,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "17") (term "1,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0,1,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "17") (term "0,1,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "17") (term "0,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "17") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "0,0,0"))
                     (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,0,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,0,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "17") (term "0,0,0,0,0,0,0,1"))
                     (rule "replace_known_left" (formula "17") (term "0,0,0,0,0,0,1") (ifseqformula "14"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "17") (term "0,0,1,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "17") (term "0,0,0,0,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,1,1"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,1"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,1,1"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,1,1"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,0,1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "1,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "17") (term "0,1,0,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "0,0"))
                     (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "10"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "andLeft" (formula "17"))
                     (rule "andLeft" (formula "17"))
                     (rule "andLeft" (formula "17"))
                     (rule "andLeft" (formula "17"))
                     (rule "notLeft" (formula "18"))
                     (rule "andLeft" (formula "17"))
                     (rule "nnf_notAnd" (formula "1") (term "0"))
                     (rule "nnf_ex2all" (formula "24"))
                     (rule "Contract_axiom_for_gcd_in_ParallelGcd" (formula "24") (term "1") (inst "i=i_1"))
                     (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "7")))
                     (rule "wellFormedAnon" (formula "24") (term "1,0"))
                     (rule "translateJavaMod" (formula "24") (term "0,1,0,0,0,0,0,1"))
                     (rule "translateJavaSubInt" (formula "24") (term "3,1,1,1,0,1"))
                     (rule "translateJavaMod" (formula "24") (term "0,1,0,0,0,0,1"))
                     (rule "translateJavaSubInt" (formula "24") (term "2,1,1,1,1"))
                     (rule "translateJavaMod" (formula "24") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "translateJavaMod" (formula "24") (term "0,1,1,0,0,1,0,0,0,1"))
                     (rule "eqSymm" (formula "24") (term "0,1,0,0,1"))
                     (rule "eqSymm" (formula "24") (term "1,1,0,1"))
                     (rule "eqSymm" (formula "24") (term "1,1,1"))
                     (rule "replace_known_left" (formula "24") (term "0,1,0") (ifseqformula "7"))
                     (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "12")) (ifInst ""  (formula "20")))
                     (rule "polySimp_elimSub" (formula "24") (term "2,0,1,1,1"))
                     (rule "polySimp_elimSub" (formula "24") (term "3,0,1,1,0,1"))
                     (rule "polySimp_addComm0" (formula "24") (term "3,0,1,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0"))
                     (rule "add_zero_right" (formula "24") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0,1,0,0,1"))
                     (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,0,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "0,1,1"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,1,0,0,1"))
                     (rule "polySimp_addComm1" (formula "24") (term "0,1,0,0,0,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0,1"))
                     (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1,0,1"))
                     (rule "polySimp_addComm1" (formula "24") (term "0,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0"))
                     (rule "add_zero_right" (formula "24") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,1,0"))
                     (rule "jmod_axiom" (formula "24") (term "0,1,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "24") (term "1,0,1,1,0,0,1,0,0,1"))
                     (rule "jmod_axiom" (formula "24") (term "0,1,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "24") (term "1,0,1,0,0,0,1"))
                     (rule "applyEq" (formula "24") (term "0,1,0,1,0,0,0,1") (ifseqformula "19"))
                     (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0,0,0,1"))
                     (rule "add_literals" (formula "24") (term "1,0,1,0,0,0,1"))
                     (rule "times_zero_1" (formula "24") (term "0,1,0,0,0,1"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "jmod_axiom" (formula "24") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "24") (term "1,0,0,1,0,0,1,0,0,1"))
                     (rule "jmod_axiom" (formula "24") (term "0,1,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "24") (term "1,0,1,0,0,0,1"))
                     (rule "applyEq" (formula "24") (term "0,1,0,1,0,0,0,1") (ifseqformula "18"))
                     (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0,0,0,1"))
                     (rule "add_literals" (formula "24") (term "1,0,1,0,0,0,1"))
                     (rule "times_zero_1" (formula "24") (term "0,1,0,0,0,1"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "polySimp_sepNegMonomial" (formula "24") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "24") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "24") (term "1,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "0,1,1,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "24") (term "0,1,1,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "0,0,0"))
                     (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "10"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,1,1"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,1,1"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,1,1"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,1,1"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,0,1,1"))
                     (rule "replace_known_left" (formula "24") (term "1,1") (ifseqformula "22"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "24") (term "0,0,0,1"))
                     (rule "replace_known_left" (formula "24") (term "0,0,1") (ifseqformula "15"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "0,0"))
                     (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "11"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "notLeft" (formula "24"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "0,0,0,0,0"))
                     (rule "Contract_axiom_for_gcd_in_ParallelGcd" (formula "24") (term "0") (inst "i=i_1"))
                     (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "7")))
                     (rule "wellFormedAnon" (formula "24") (term "1,0"))
                     (rule "translateJavaMod" (formula "24") (term "0,1,0,0,0,0,0,1"))
                     (rule "translateJavaMod" (formula "24") (term "0,1,0,0,0,0,1"))
                     (rule "translateJavaSubInt" (formula "24") (term "3,1,1,1,0,1"))
                     (rule "translateJavaMod" (formula "24") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "translateJavaSubInt" (formula "24") (term "2,1,1,1,1"))
                     (rule "translateJavaMod" (formula "24") (term "0,1,1,0,0,1,0,0,0,1"))
                     (rule "eqSymm" (formula "24") (term "1,1,0,1"))
                     (rule "eqSymm" (formula "24") (term "1,1,1"))
                     (rule "replace_known_left" (formula "24") (term "1,1,0") (ifseqformula "12"))
                     (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "7")))
                     (rule "polySimp_elimSub" (formula "24") (term "2,0,1,1,1"))
                     (rule "polySimp_homoEq" (formula "24") (term "0,1,0,0,1"))
                     (rule "polySimp_elimSub" (formula "24") (term "3,0,1,1,0,1"))
                     (rule "polySimp_pullOutFactor0b" (formula "24") (term "2,0,1,1,1"))
                     (rule "add_literals" (formula "24") (term "1,1,2,0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,3,0,1,1,0,1"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "24") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,3,0,1,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,3,0,1,1,0,1"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,3,0,1,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "24") (term "0,1,3,0,1,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1"))
                     (rule "polySimp_addComm0" (formula "24") (term "0,0,0,1,0,0,1"))
                     (rule "polySimp_pullOutFactor3b" (formula "24") (term "0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "24") (term "3,0,1,1,0,1"))
                     (rule "polySimp_addComm0" (formula "24") (term "0,3,0,1,1,0,1"))
                     (rule "polySimp_pullOutFactor3b" (formula "24") (term "3,0,1,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "24") (term "0,1,0,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0,1,0,0,0,1"))
                     (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0"))
                     (rule "add_zero_right" (formula "24") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "0,1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0"))
                     (rule "add_zero_right" (formula "24") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "0,1,1"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,1,1"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "24") (term "0,1,0,0,0,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0,0,1"))
                     (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,1,1"))
                     (rule "polySimp_pullOutFactor3b" (formula "24") (term "0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,1"))
                     (rule "polySimp_addComm1" (formula "24") (term "0,0,0,1,0,1"))
                     (rule "polySimp_pullOutFactor0b" (formula "24") (term "0,0,1,0,1"))
                     (rule "add_literals" (formula "24") (term "1,1,0,0,1,0,1"))
                     (rule "applyEq" (formula "24") (term "1,0,1,0,0,0,0,0,1") (ifseqformula "25"))
                     (rule "applyEq" (formula "24") (term "0,1,1,0,0,1") (ifseqformula "25"))
                     (rule "applyEq" (formula "24") (term "0,1,0,0,0,0,0,0,0,1") (ifseqformula "25"))
                     (rule "applyEq" (formula "24") (term "1,0,1,0,0,0,0,1") (ifseqformula "25"))
                     (rule "applyEq" (formula "24") (term "1,1,1,0,1") (ifseqformula "25"))
                     (rule "applyEq" (formula "24") (term "1,0,0,1,0,0,0,1,0,0,0,1") (ifseqformula "25"))
                     (rule "applyEq" (formula "24") (term "1,1,1,1") (ifseqformula "25"))
                     (rule "jmod_axiom" (formula "24") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "24") (term "1,0,0,1,0,0,1,0,0,0,1"))
                     (rule "jmod_axiom" (formula "24") (term "0,1,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "24") (term "1,0,1,1,0,0,1,0,0,0,1"))
                     (rule "jmod_axiom" (formula "24") (term "0,1,0,0,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "24") (term "1,0,1,0,0,0,0,0,1"))
                     (rule "jmod_axiom" (formula "24") (term "0,1,0,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "24") (term "1,0,1,0,0,0,0,1"))
                     (rule "applyEq" (formula "24") (term "0,1,0,1,0,0,0,0,1") (ifseqformula "17"))
                     (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0,0,0,0,1"))
                     (rule "add_literals" (formula "24") (term "1,0,1,0,0,0,0,1"))
                     (rule "times_zero_1" (formula "24") (term "0,1,0,0,0,0,1"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "polySimp_sepPosMonomial" (formula "24") (term "0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,0,1,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "24") (term "1,0,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "24") (term "0,1,0,0,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "24") (term "0,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "24") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "24") (term "1,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "0,1,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "24") (term "0,1,1,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
                     (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "0,0"))
                     (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "14"))
                     (builtin "One Step Simplification" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "notLeft" (formula "25"))
                     (rule "andLeft" (formula "24"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0"))
                     (rule "mul_literals" (formula "28") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "28") (term "1,1,0"))
                     (rule "replace_known_left" (formula "33") (term "0,0") (ifseqformula "28"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "0,0"))
                     (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "27"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "allRight" (formula "33") (inst "sk=f_3"))
                     (rule "allRight" (formula "33") (inst "sk=o_3"))
                     (rule "orRight" (formula "33"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "30") (term "0,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "30") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "24"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                     (rule "polySimp_elimOne" (formula "24") (term "0"))
                     (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=f_3_0"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
                     (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "34"))
                     (rule "closeTrue" (formula "34"))
                  )
                  (branch "if x_9 false"
                     (builtin "One Step Simplification" (formula "1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "notLeft" (formula "1"))
                     (rule "inEqSimp_leqRight" (formula "16"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "blockEmpty" (formula "19") (term "1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "17"))
                     (rule "postincrement" (formula "19") (term "1"))
                     (rule "compound_int_cast_expression" (formula "19") (term "1") (inst "#v=x"))
                     (rule "variableDeclarationAssign" (formula "19") (term "1"))
                     (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_10"))
                     (rule "remove_parentheses_right" (formula "19") (term "1"))
                     (rule "assignmentAdditionInt" (formula "19") (term "1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "translateJavaAddInt" (formula "19") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "19") (term "0,1,0"))
                     (rule "widening_identity_cast_5" (formula "19") (term "1"))
                     (rule "assignment" (formula "19") (term "1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "tryEmpty" (formula "19") (term "1"))
                     (rule "methodCallEmpty" (formula "19") (term "1"))
                     (rule "emptyModality" (formula "19") (term "1"))
                     (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "14")) (ifInst ""  (formula "1")))
                     (rule "translateJavaSubInt" (formula "16") (term "3,1,1"))
                     (rule "translateJavaSubInt" (formula "15") (term "2,1,1"))
                     (rule "eqSymm" (formula "19") (term "1,0,0,1,0"))
                     (rule "eqSymm" (formula "16") (term "1"))
                     (rule "eqSymm" (formula "15") (term "1"))
                     (rule "polySimp_elimSub" (formula "16") (term "3,0,1"))
                     (rule "polySimp_elimSub" (formula "15") (term "2,0,1"))
                     (rule "polySimp_mulComm0" (formula "19") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "16") (term "3,0,1"))
                     (rule "polySimp_rightDist" (formula "19") (term "0,0,1"))
                     (rule "mul_literals" (formula "19") (term "0,0,0,1"))
                     (rule "precOfInt" (formula "19") (term "1"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "8"))
                     (rule "add_zero_right" (formula "8") (term "0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "9"))
                     (rule "add_zero_right" (formula "9") (term "0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "16") (term "0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "16") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12"))
                     (rule "add_zero_right" (formula "12") (term "0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "13"))
                     (rule "add_zero_right" (formula "13") (term "0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "19") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,1"))
                     (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0,1,1"))
                     (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,1,1"))
                     (rule "polySimp_addComm1" (formula "19") (term "0,0,1,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "19") (term "0,1,1"))
                     (rule "add_literals" (formula "19") (term "1,1,0,1,1"))
                     (rule "times_zero_1" (formula "19") (term "1,0,1,1"))
                     (rule "add_zero_right" (formula "19") (term "0,1,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,1,1"))
                     (rule "polySimp_addComm1" (formula "19") (term "0,0,1,1"))
                     (rule "add_literals" (formula "19") (term "0,0,0,1,1"))
                     (rule "add_zero_left" (formula "19") (term "0,0,1,1"))
                     (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,1"))
                     (rule "add_literals" (formula "19") (term "1,0,1,1"))
                     (rule "times_zero_1" (formula "19") (term "0,1,1"))
                     (rule "leq_literals" (formula "19") (term "1,1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_commuteLeq" (formula "11"))
                     (rule "inEqSimp_homoInEq0" (formula "18") (term "1"))
                     (rule "times_zero_2" (formula "18") (term "1,0,1"))
                     (rule "add_zero_right" (formula "18") (term "0,1"))
                     (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "13"))
                     (rule "applyEq" (formula "18") (term "1,1,1,0,0,0") (ifseqformula "13"))
                     (rule "applyEq" (formula "18") (term "1,1,0,0") (ifseqformula "13"))
                     (rule "applyEq" (formula "15") (term "1,1") (ifseqformula "13"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "1,1,0"))
                     (rule "replace_known_left" (formula "18") (term "1,0,0,0") (ifseqformula "14"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                     (rule "polySimp_elimOne" (formula "8") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,0"))
                     (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "replace_known_left" (formula "18") (term "1,0,0") (ifseqformula "15"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                     (rule "polySimp_elimOne" (formula "11") (term "0"))
                     (rule "replace_known_left" (formula "18") (term "1,0,0,0") (ifseqformula "11"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0"))
                     (rule "replace_known_left" (formula "18") (term "1,0,0") (ifseqformula "12"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0"))
                     (rule "mul_literals" (formula "18") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,1"))
                     (rule "mul_literals" (formula "18") (term "0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,1"))
                     (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "4"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_contradEq7" (formula "16") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0"))
                     (rule "leq_literals" (formula "16") (term "0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "false_right" (formula "16"))
                     (rule "inEqSimp_subsumption1" (formula "17") (term "0") (ifseqformula "3"))
                     (rule "leq_literals" (formula "17") (term "0,0"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "allRight" (formula "17") (inst "sk=f_4"))
                     (rule "allRight" (formula "17") (inst "sk=o_4"))
                     (rule "orRight" (formula "17"))
                     (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "14") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "14") (term "0,0,0,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0"))
                     (rule "add_literals" (formula "14") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "14") (term "1,0,0,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0"))
                     (rule "leq_literals" (formula "14") (term "0,0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=f_4_0"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                     (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "closeTrue" (formula "18"))
                  )
               )
               (branch "if x_3 false"
                  (builtin "One Step Simplification" (formula "18"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "ifUnfold" (formula "18") (term "1") (inst "#boolv=x"))
                  (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_6"))
                  (rule "greater_than_comparison_simple" (formula "18") (term "1"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_gtToGeq" (formula "18") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1,0"))
                  (rule "ifSplit" (formula "18"))
                  (branch "if x_6 true"
                     (builtin "One Step Simplification" (formula "19"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "assignmentSubtractionInt" (formula "19") (term "1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "translateJavaSubInt" (formula "19") (term "0,1,0"))
                     (rule "polySimp_elimSub" (formula "19") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "19") (term "0,1,0"))
                     (rule "blockEmpty" (formula "19") (term "1"))
                     (rule "postincrement" (formula "19") (term "1"))
                     (rule "compound_int_cast_expression" (formula "19") (term "1") (inst "#v=x"))
                     (rule "variableDeclarationAssign" (formula "19") (term "1"))
                     (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_8"))
                     (rule "remove_parentheses_right" (formula "19") (term "1"))
                     (rule "assignmentAdditionInt" (formula "19") (term "1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "translateJavaAddInt" (formula "19") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "19") (term "0,1,0"))
                     (rule "widening_identity_cast_5" (formula "19") (term "1"))
                     (rule "assignment" (formula "19") (term "1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "tryEmpty" (formula "19") (term "1"))
                     (rule "methodCallEmpty" (formula "19") (term "1"))
                     (rule "emptyModality" (formula "19") (term "1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "translateJavaSubInt" (formula "15") (term "3,1,1"))
                     (rule "translateJavaSubInt" (formula "14") (term "2,1,1"))
                     (rule "eqSymm" (formula "19") (term "1,0,0,1,0"))
                     (rule "eqSymm" (formula "15") (term "1"))
                     (rule "eqSymm" (formula "14") (term "1"))
                     (rule "polySimp_elimSub" (formula "15") (term "3,0,1"))
                     (rule "polySimp_elimSub" (formula "14") (term "2,0,1"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,2,0,1,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "15") (term "3,0,1"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,2,0,1,1,0,0,0"))
                     (rule "polySimp_mulAssoc" (formula "19") (term "0,1,2,0,1,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,2,0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "0,1,2,0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "19") (term "0,1,2,0,1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "0,0,1"))
                     (rule "mul_literals" (formula "19") (term "0,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "3,0,1,1,0,0"))
                     (rule "polySimp_pullOutFactor0" (formula "19") (term "0,3,0,1,1,0,0"))
                     (rule "add_literals" (formula "19") (term "1,0,3,0,1,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "2,0,1,1,0,0,0"))
                     (rule "polySimp_pullOutFactor3" (formula "19") (term "0,2,0,1,1,0,0,0"))
                     (rule "precOfInt" (formula "19") (term "1"))
                     (rule "inEqSimp_ltToLeq" (formula "8"))
                     (rule "add_zero_right" (formula "8") (term "0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11"))
                     (rule "add_zero_right" (formula "11") (term "0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "7"))
                     (rule "add_zero_right" (formula "7") (term "0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12"))
                     (rule "add_zero_right" (formula "12") (term "0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "14") (term "0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "19") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,1"))
                     (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0,1,1"))
                     (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,1,1"))
                     (rule "polySimp_addComm1" (formula "19") (term "0,0,1,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "19") (term "0,1,1"))
                     (rule "add_literals" (formula "19") (term "1,1,0,1,1"))
                     (rule "times_zero_1" (formula "19") (term "1,0,1,1"))
                     (rule "add_zero_right" (formula "19") (term "0,1,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,1,1"))
                     (rule "polySimp_addComm1" (formula "19") (term "0,0,1,1"))
                     (rule "add_literals" (formula "19") (term "0,0,0,1,1"))
                     (rule "add_zero_left" (formula "19") (term "0,0,1,1"))
                     (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,1"))
                     (rule "add_literals" (formula "19") (term "1,0,1,1"))
                     (rule "times_zero_1" (formula "19") (term "0,1,1"))
                     (rule "leq_literals" (formula "19") (term "1,1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_commuteLeq" (formula "10"))
                     (rule "inEqSimp_homoInEq0" (formula "18") (term "1"))
                     (rule "mul_literals" (formula "18") (term "1,0,1"))
                     (rule "add_zero_right" (formula "18") (term "0,1"))
                     (rule "inEqSimp_homoInEq1" (formula "18") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0,1,0,0,0,0,0"))
                     (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0,1,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "0,1,0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,1,0,0,0,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                     (rule "polySimp_pullOutFactor3b" (formula "18") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "18") (term "0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0"))
                     (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0,0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor3b" (formula "18") (term "0,0,0,1,0,0,0"))
                     (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "12"))
                     (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "12"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                     (rule "polySimp_elimOne" (formula "8") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                     (rule "polySimp_elimOne" (formula "10") (term "0"))
                     (rule "replace_known_left" (formula "18") (term "1,0,0,0,0,0,0") (ifseqformula "10"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                     (rule "polySimp_elimOne" (formula "7") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                     (rule "polySimp_elimOne" (formula "11") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "0,0"))
                     (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "replace_known_left" (formula "18") (term "1,0,0,0,0") (ifseqformula "14"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "applyEq" (formula "18") (term "1,1,1,0,0,0") (ifseqformula "14"))
                     (rule "applyEq" (formula "18") (term "1,1,1,0,0") (ifseqformula "14"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "18") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "1,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "0,1,0,0,0,0"))
                     (rule "replace_known_left" (formula "18") (term "1,0,0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1"))
                     (rule "mul_literals" (formula "18") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,1"))
                     (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
                     (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                     (rule "inEqSimp_contradEq7" (formula "16") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0"))
                     (rule "leq_literals" (formula "16") (term "0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "false_right" (formula "16"))
                     (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "13") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0"))
                     (rule "add_literals" (formula "13") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0"))
                     (rule "leq_literals" (formula "13") (term "0,0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "inEqSimp_subsumption1" (formula "16") (term "0,0,0") (ifseqformula "2"))
                     (rule "leq_literals" (formula "16") (term "0,0,0,0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "Contract_axiom_for_gcd_in_ParallelGcd" (formula "12") (term "0") (inst "i=i_1"))
                     (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "4")))
                     (rule "wellFormedAnon" (formula "12") (term "1,0"))
                     (rule "translateJavaSubInt" (formula "12") (term "2,1,1,1,1"))
                     (rule "translateJavaMod" (formula "12") (term "0,1,0,0,0,0,0,1"))
                     (rule "translateJavaMod" (formula "12") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "translateJavaMod" (formula "12") (term "0,1,1,0,0,1,0,0,0,1"))
                     (rule "translateJavaMod" (formula "12") (term "0,1,0,0,0,0,1"))
                     (rule "translateJavaSubInt" (formula "12") (term "3,1,1,1,0,1"))
                     (rule "eqSymm" (formula "12") (term "0,1,0,0,1"))
                     (rule "eqSymm" (formula "12") (term "1,1,1"))
                     (rule "eqSymm" (formula "12") (term "1,1,0,1"))
                     (rule "replace_known_left" (formula "12") (term "0,1,0") (ifseqformula "4"))
                     (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "9")))
                     (rule "polySimp_elimSub" (formula "12") (term "3,0,1,1,0,1"))
                     (rule "polySimp_elimSub" (formula "12") (term "2,0,1,1,1"))
                     (rule "polySimp_addComm0" (formula "12") (term "3,0,1,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0"))
                     (rule "add_zero_right" (formula "12") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0,1"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0,1,0,0,0,1"))
                     (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0,0,1"))
                     (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                     (rule "applyEq" (formula "12") (term "0,1,1,0,1") (ifseqformula "14"))
                     (rule "eqSymm" (formula "12") (term "1,1,0,1"))
                     (rule "replace_known_left" (formula "12") (term "1,1,0,1") (ifseqformula "13"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "applyEq" (formula "12") (term "0,1,0,0,0,0,0,0,1") (ifseqformula "13"))
                     (rule "applyEq" (formula "12") (term "1,0,1,0,0,0,1") (ifseqformula "13"))
                     (rule "applyEq" (formula "12") (term "1,0,1,0,0,0,0,1") (ifseqformula "13"))
                     (rule "applyEq" (formula "12") (term "0,1,1,0,1") (ifseqformula "13"))
                     (rule "applyEq" (formula "12") (term "1,1,1,1") (ifseqformula "13"))
                     (rule "applyEq" (formula "12") (term "1,0,0,1,0,0,0,1,0,0,1") (ifseqformula "13"))
                     (rule "jmod_axiom" (formula "12") (term "0,1,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "12") (term "1,0,1,1,0,0,1,0,0,1"))
                     (rule "jmod_axiom" (formula "12") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "12") (term "1,0,0,1,0,0,1,0,0,1"))
                     (rule "jmod_axiom" (formula "12") (term "0,1,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "12") (term "1,0,1,0,0,0,1"))
                     (rule "jmod_axiom" (formula "12") (term "0,1,0,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "12") (term "1,0,1,0,0,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "12") (term "1,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,1,1,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,1,1,0,0,1,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "12") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,0,1,0,0,1,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "12") (term "1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "12") (term "1,0,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,0,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,0,0,0,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,1,0"))
                     (rule "replace_known_left" (formula "12") (term "1,0") (ifseqformula "11"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1,0,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                     (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "10"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "notLeft" (formula "13"))
                     (rule "andLeft" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                     (rule "mul_literals" (formula "16") (term "0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "16") (term "1,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0"))
                     (rule "inEqSimp_contradEq7" (formula "15") (term "0") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0"))
                     (rule "add_literals" (formula "15") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "15") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0,0"))
                     (rule "leq_literals" (formula "15") (term "0,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,0,0,0"))
                     (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0"))
                     (rule "add_literals" (formula "15") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "15") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0,0"))
                     (rule "leq_literals" (formula "15") (term "0,0"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "nnf_ex2all" (formula "17"))
                     (rule "Contract_axiom_for_gcd_in_ParallelGcd" (formula "16") (term "1") (inst "i=i_1"))
                     (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "5")))
                     (rule "wellFormedAnon" (formula "16") (term "1,0"))
                     (rule "translateJavaSubInt" (formula "16") (term "2,1,1,1,1"))
                     (rule "translateJavaMod" (formula "16") (term "0,1,0,0,0,0,0,1"))
                     (rule "translateJavaMod" (formula "16") (term "0,1,0,0,0,0,1"))
                     (rule "translateJavaMod" (formula "16") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "translateJavaMod" (formula "16") (term "0,1,1,0,0,1,0,0,0,1"))
                     (rule "translateJavaSubInt" (formula "16") (term "3,1,1,1,0,1"))
                     (rule "eqSymm" (formula "16") (term "0,1,0,0,1"))
                     (rule "eqSymm" (formula "16") (term "1,1,1"))
                     (rule "eqSymm" (formula "16") (term "1,1,0,1"))
                     (rule "replace_known_left" (formula "16") (term "0,1,0") (ifseqformula "5"))
                     (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "10")))
                     (rule "polySimp_elimSub" (formula "16") (term "2,0,1,1,1"))
                     (rule "polySimp_elimSub" (formula "16") (term "3,0,1,1,0,1"))
                     (rule "polySimp_addComm0" (formula "16") (term "3,0,1,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,1"))
                     (rule "polySimp_addComm1" (formula "16") (term "0,0,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0,0,1"))
                     (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0"))
                     (rule "add_zero_right" (formula "16") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,1"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0,1,0,0,0,1"))
                     (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,1,0,0,0,1"))
                     (rule "jmod_axiom" (formula "16") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "16") (term "1,0,0,1,0,0,1,0,0,0,1"))
                     (rule "jmod_axiom" (formula "16") (term "0,1,0,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "16") (term "1,0,1,0,0,0,0,1"))
                     (rule "jmod_axiom" (formula "16") (term "0,1,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "16") (term "1,0,1,1,0,0,1,0,0,0,1"))
                     (rule "jmod_axiom" (formula "16") (term "0,1,0,0,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "16") (term "1,0,1,0,0,0,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "16") (term "0,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "16") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "16") (term "1,0,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "16") (term "1,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,1,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "16") (term "0,1,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "16") (term "1,0,0,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,0,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "16") (term "0,0,1,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,0,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,0,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "16") (term "0,0,0,0,0,0,0,1"))
                     (rule "replace_known_left" (formula "16") (term "0,0,0,0,0,0,1") (ifseqformula "13"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "1,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,1,1"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,1"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,0,1,1"))
                     (rule "mul_literals" (formula "16") (term "0,1,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,1,1"))
                     (rule "polySimp_elimOne" (formula "16") (term "1,1,0,1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "16") (term "0,0,0"))
                     (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "16") (term "0,0"))
                     (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "notLeft" (formula "18"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "0,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "1") (term "0"))
                     (rule "nnf_ex2all" (formula "23"))
                     (rule "Contract_axiom_for_gcd_in_ParallelGcd" (formula "23") (term "0") (inst "i=i_1"))
                     (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "6")))
                     (rule "wellFormedAnon" (formula "23") (term "1,0"))
                     (rule "translateJavaMod" (formula "23") (term "0,1,0,0,0,0,0,1"))
                     (rule "translateJavaMod" (formula "23") (term "0,1,0,0,0,0,1"))
                     (rule "translateJavaMod" (formula "23") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "translateJavaMod" (formula "23") (term "0,1,1,0,0,1,0,0,0,1"))
                     (rule "translateJavaSubInt" (formula "23") (term "3,1,1,1,0,1"))
                     (rule "translateJavaSubInt" (formula "23") (term "2,1,1,1,1"))
                     (rule "eqSymm" (formula "23") (term "1,1,0,1"))
                     (rule "eqSymm" (formula "23") (term "1,1,1"))
                     (rule "replace_known_left" (formula "23") (term "0,1,0") (ifseqformula "6"))
                     (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "11")))
                     (rule "polySimp_homoEq" (formula "23") (term "0,1,0,0,1"))
                     (rule "polySimp_elimSub" (formula "23") (term "2,0,1,1,1"))
                     (rule "polySimp_elimSub" (formula "23") (term "3,0,1,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,2,0,1,1,1"))
                     (rule "polySimp_addComm1" (formula "23") (term "0,0,1,0,0,1"))
                     (rule "polySimp_pullOutFactor0" (formula "23") (term "0,0,0,1,0,0,1"))
                     (rule "add_literals" (formula "23") (term "1,0,0,0,1,0,0,1"))
                     (rule "polySimp_addComm1" (formula "23") (term "3,0,1,1,0,1"))
                     (rule "polySimp_pullOutFactor0" (formula "23") (term "0,3,0,1,1,0,1"))
                     (rule "add_literals" (formula "23") (term "1,0,3,0,1,1,0,1"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,2,0,1,1,1"))
                     (rule "polySimp_mulAssoc" (formula "23") (term "0,1,2,0,1,1,1"))
                     (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,2,0,1,1,1"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "0,1,2,0,1,1,1"))
                     (rule "polySimp_elimOne" (formula "23") (term "0,1,2,0,1,1,1"))
                     (rule "polySimp_addAssoc" (formula "23") (term "2,0,1,1,1"))
                     (rule "polySimp_pullOutFactor3" (formula "23") (term "0,2,0,1,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "23") (term "0,1,0,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0,0,0,1,0,0,0,1"))
                     (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0"))
                     (rule "add_zero_right" (formula "23") (term "0,1,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,0,1,0"))
                     (rule "polySimp_mulAssoc" (formula "23") (term "0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "0,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0,0,0,0,1"))
                     (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "0,1,1"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,1"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,0,1"))
                     (rule "polySimp_mulAssoc" (formula "23") (term "0,1,0,0,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,0,0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "23") (term "0,1,0,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "23") (term "0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0"))
                     (rule "add_zero_right" (formula "23") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,1"))
                     (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0,0,1,1"))
                     (rule "add_literals" (formula "23") (term "1,1,0,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,1"))
                     (rule "polySimp_addComm1" (formula "23") (term "0,0,1,0,1"))
                     (rule "polySimp_pullOutFactor3b" (formula "23") (term "0,0,0,1,0,1"))
                     (rule "applyEq" (formula "23") (term "0,1,0,0,0,0,0,0,0,1") (ifseqformula "24"))
                     (rule "applyEq" (formula "23") (term "1,0,1,0,0,0,0,1") (ifseqformula "24"))
                     (rule "applyEq" (formula "23") (term "1,0,1,0,0,0,0,0,1") (ifseqformula "24"))
                     (rule "applyEq" (formula "23") (term "0,1,1,0,0,1") (ifseqformula "24"))
                     (rule "applyEq" (formula "23") (term "1,1,1,0,1") (ifseqformula "24"))
                     (rule "applyEq" (formula "23") (term "1,1,1,1") (ifseqformula "24"))
                     (rule "applyEq" (formula "23") (term "1,0,0,1,0,0,0,1,0,0,0,1") (ifseqformula "24"))
                     (rule "jmod_axiom" (formula "23") (term "0,1,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "23") (term "1,0,1,1,0,0,1,0,0,0,1"))
                     (rule "jmod_axiom" (formula "23") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "23") (term "1,0,0,1,0,0,1,0,0,0,1"))
                     (rule "jmod_axiom" (formula "23") (term "0,1,0,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "23") (term "1,0,1,0,0,0,0,1"))
                     (rule "jmod_axiom" (formula "23") (term "0,1,0,0,0,0,0,1"))
                     (rule "polySimp_mulComm1" (formula "23") (term "1,0,1,0,0,0,0,0,1"))
                     (rule "applyEq" (formula "23") (term "0,1,0,1,0,0,0,0,0,1") (ifseqformula "15"))
                     (rule "polySimp_pullOutFactor1" (formula "23") (term "0,1,0,0,0,0,0,1"))
                     (rule "add_literals" (formula "23") (term "1,0,1,0,0,0,0,0,1"))
                     (rule "times_zero_1" (formula "23") (term "0,1,0,0,0,0,0,1"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "polySimp_sepNegMonomial" (formula "23") (term "0,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "23") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "23") (term "1,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "0,1,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "23") (term "0,1,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_sepPosMonomial" (formula "23") (term "0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,0,1"))
                     (rule "polySimp_sepNegMonomial" (formula "23") (term "1,0,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "23") (term "0,1,0,0,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "23") (term "0,0,1,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "23") (term "0,0,0,0,0,0,1"))
                     (rule "replace_known_left" (formula "23") (term "0,0,0,0,0,1") (ifseqformula "14"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,1,1"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,1"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1,1"))
                     (rule "mul_literals" (formula "23") (term "0,1,0,1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "23") (term "0,0,0,0,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "0,0,0"))
                     (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "12"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "1,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "23") (term "0,1,0,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "0,0"))
                     (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "andLeft" (formula "23"))
                     (rule "andLeft" (formula "23"))
                     (rule "andLeft" (formula "23"))
                     (rule "andLeft" (formula "23"))
                     (rule "notLeft" (formula "24"))
                     (rule "replace_known_left" (formula "31") (term "1,0") (ifseqformula "25"))
                     (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "26")))
                     (rule "allRight" (formula "31") (inst "sk=f_5"))
                     (rule "allRight" (formula "31") (inst "sk=o_5"))
                     (rule "orRight" (formula "31"))
                     (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=f_5_0"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
                     (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "closeTrue" (formula "33"))
                  )
                  (branch "if x_6 false"
                     (builtin "One Step Simplification" (formula "19"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "inEqSimp_geqRight" (formula "15"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "blockEmpty" (formula "19") (term "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "17"))
                     (rule "postincrement" (formula "19") (term "1"))
                     (rule "compound_int_cast_expression" (formula "19") (term "1") (inst "#v=x"))
                     (rule "variableDeclarationAssign" (formula "19") (term "1"))
                     (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_7"))
                     (rule "remove_parentheses_right" (formula "19") (term "1"))
                     (rule "assignmentAdditionInt" (formula "19") (term "1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "translateJavaAddInt" (formula "19") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "19") (term "0,1,0"))
                     (rule "widening_identity_cast_5" (formula "19") (term "1"))
                     (rule "assignment" (formula "19") (term "1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "tryEmpty" (formula "19") (term "1"))
                     (rule "methodCallEmpty" (formula "19") (term "1"))
                     (rule "emptyModality" (formula "19") (term "1"))
                     (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "13")) (ifInst ""  (formula "1")))
                     (rule "translateJavaSubInt" (formula "15") (term "3,1,1"))
                     (rule "translateJavaSubInt" (formula "14") (term "2,1,1"))
                     (rule "eqSymm" (formula "19") (term "1,0,0,1,0"))
                     (rule "eqSymm" (formula "15") (term "1"))
                     (rule "eqSymm" (formula "14") (term "1"))
                     (rule "polySimp_elimSub" (formula "15") (term "3,0,1"))
                     (rule "polySimp_elimSub" (formula "14") (term "2,0,1"))
                     (rule "polySimp_mulComm0" (formula "19") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "15") (term "3,0,1"))
                     (rule "polySimp_rightDist" (formula "19") (term "0,0,1"))
                     (rule "mul_literals" (formula "19") (term "0,0,0,1"))
                     (rule "precOfInt" (formula "19") (term "1"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11"))
                     (rule "add_zero_right" (formula "11") (term "0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "14") (term "0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "8"))
                     (rule "add_zero_right" (formula "8") (term "0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "7"))
                     (rule "add_zero_right" (formula "7") (term "0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12"))
                     (rule "add_zero_right" (formula "12") (term "0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "19") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,1"))
                     (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0,1,1"))
                     (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,1,1"))
                     (rule "polySimp_addComm1" (formula "19") (term "0,0,1,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "19") (term "0,1,1"))
                     (rule "add_literals" (formula "19") (term "1,1,0,1,1"))
                     (rule "times_zero_1" (formula "19") (term "1,0,1,1"))
                     (rule "add_zero_right" (formula "19") (term "0,1,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,1,1"))
                     (rule "polySimp_addComm1" (formula "19") (term "0,0,1,1"))
                     (rule "add_literals" (formula "19") (term "0,0,0,1,1"))
                     (rule "add_zero_left" (formula "19") (term "0,0,1,1"))
                     (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,1"))
                     (rule "add_literals" (formula "19") (term "1,0,1,1"))
                     (rule "times_zero_1" (formula "19") (term "0,1,1"))
                     (rule "leq_literals" (formula "19") (term "1,1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_commuteLeq" (formula "10"))
                     (rule "inEqSimp_homoInEq0" (formula "18") (term "1"))
                     (rule "times_zero_2" (formula "18") (term "1,0,1"))
                     (rule "add_zero_right" (formula "18") (term "0,1"))
                     (rule "applyEq" (formula "18") (term "1,1,1,0,0") (ifseqformula "12"))
                     (rule "applyEq" (formula "18") (term "1,1,0,0,0") (ifseqformula "12"))
                     (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "12"))
                     (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "12"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "0,0"))
                     (rule "replace_known_left" (formula "18") (term "1,0,0") (ifseqformula "14"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                     (rule "polySimp_elimOne" (formula "10") (term "0"))
                     (rule "replace_known_left" (formula "18") (term "1,0,0,0,0") (ifseqformula "10"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,0"))
                     (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "replace_known_left" (formula "18") (term "1,0,0") (ifseqformula "13"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                     (rule "polySimp_elimOne" (formula "8") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                     (rule "polySimp_elimOne" (formula "7") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                     (rule "polySimp_elimOne" (formula "11") (term "0"))
                     (rule "replace_known_left" (formula "18") (term "1,0,0") (ifseqformula "11"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0"))
                     (rule "mul_literals" (formula "18") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,1"))
                     (rule "mul_literals" (formula "18") (term "0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,1"))
                     (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_contradEq3" (formula "16") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0"))
                     (rule "add_literals" (formula "16") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0"))
                     (rule "qeq_literals" (formula "16") (term "0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "false_right" (formula "16"))
                     (rule "inEqSimp_contradInEq0" (formula "14") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "14") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "14") (term "0,0,0,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0"))
                     (rule "add_literals" (formula "14") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "14") (term "1,0,0,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0"))
                     (rule "leq_literals" (formula "14") (term "0,0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "inEqSimp_subsumption1" (formula "16") (term "0") (ifseqformula "2"))
                     (rule "leq_literals" (formula "16") (term "0,0"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "allRight" (formula "16") (inst "sk=f_6"))
                     (rule "allRight" (formula "16") (inst "sk=o_6"))
                     (rule "orRight" (formula "16"))
                     (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=f_6_0"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                     (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "closeTrue" (formula "18"))
                  )
               )
            )
            (branch "Null Reference (_r = null)"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Index Out of Bounds (_r != null, but i Out of Bounds!)"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "1,0,0,1"))
               (rule "add_literals" (formula "1") (term "0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "1,1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,0"))
               (rule "leq_literals" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "arrayLengthIsAnInt" (formula "2") (term "0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "arrayLengthNotNegative" (formula "2") (term "0"))
               (rule "methodCallParamThrow" (formula "18") (term "1,0,0,1"))
               (rule "tryCatchThrow" (formula "18") (term "1,0,0,1"))
               (rule "ifElseUnfold" (formula "18") (term "1,0,0,1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "18") (term "1,0,0,1") (newnames "x_4"))
               (rule "equality_comparison_simple" (formula "18") (term "1,0,0,1"))
               (rule "throwUnfold" (formula "18") (term "1") (inst "#v0=a_1"))
               (rule "variableDeclarationAssign" (formula "18") (term "1"))
               (rule "variableDeclaration" (formula "18") (term "1") (newnames "a_1"))
               (rule "instanceCreationAssignment" (formula "18") (term "1") (inst "#v0=a_2"))
               (rule "variableDeclarationAssign" (formula "18") (term "1"))
               (rule "variableDeclaration" (formula "18") (term "1") (newnames "a_2"))
               (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "18") (term "1") (inst "#v0=a_3"))
               (rule "variableDeclaration" (formula "18") (term "1") (newnames "a_3"))
               (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "variableDeclaration" (formula "18") (term "1") (newnames "__NEW__"))
               (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "18") (term "1") (inst "#v0=a_4"))
               (rule "variableDeclaration" (formula "18") (term "1") (newnames "a_4"))
               (rule "allocateInstance" (formula "18"))
               (builtin "One Step Simplification" (formula "19"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "wellFormedAnon" (formula "1") (term "0,1,0"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "6"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
               (rule "notLeft" (formula "1"))
               (rule "orRight" (formula "17"))
               (rule "blockEmpty" (formula "22") (term "1"))
               (rule "assignment" (formula "22") (term "1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "assignment_write_attribute_this" (formula "22") (term "1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "methodCallWithinClass" (formula "22") (term "1"))
               (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "methodCallSuper" (formula "22") (term "1"))
               (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "methodCallSuper" (formula "22") (term "1"))
               (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "methodCallSuper" (formula "22") (term "1"))
               (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "methodCallSuper" (formula "22") (term "1"))
               (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "methodCallSuper" (formula "22") (term "1"))
               (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<prepare>_3,savedHeapBefore_<prepare>_3"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "methodCallEmpty" (formula "22") (term "1"))
               (rule "blockEmpty" (formula "22") (term "1"))
               (rule "assignment_write_attribute_this" (formula "22") (term "1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "assignment_write_attribute_this" (formula "22") (term "1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "methodCallEmpty" (formula "22") (term "1"))
               (rule "methodCallEmpty" (formula "22") (term "1"))
               (rule "methodCallEmpty" (formula "22") (term "1"))
               (rule "methodCallEmpty" (formula "22") (term "1"))
               (rule "methodCallEmpty" (formula "22") (term "1"))
               (rule "blockEmpty" (formula "22") (term "1"))
               (rule "methodCallReturnIgnoreResult" (formula "22") (term "1"))
               (rule "methodCallReturn" (formula "22") (term "1"))
               (rule "assignment" (formula "22") (term "1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "methodCallEmpty" (formula "22") (term "1"))
               (rule "blockEmpty" (formula "22") (term "1"))
               (rule "assignment" (formula "22") (term "1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "methodCallSuper" (formula "22") (term "1"))
               (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "methodCallSuper" (formula "22") (term "1"))
               (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "methodCallSuper" (formula "22") (term "1"))
               (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "methodCallSuper" (formula "22") (term "1"))
               (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "methodCallSuper" (formula "22") (term "1"))
               (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<init>_4,savedHeapBefore_<init>_4"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "methodCallEmpty" (formula "22") (term "1"))
               (rule "blockEmpty" (formula "22") (term "1"))
               (rule "assignment_write_attribute_this" (formula "22") (term "1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "assignment_write_attribute_this" (formula "22") (term "1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "methodCallEmpty" (formula "22") (term "1"))
               (rule "methodCallEmpty" (formula "22") (term "1"))
               (rule "methodCallEmpty" (formula "22") (term "1"))
               (rule "methodCallEmpty" (formula "22") (term "1"))
               (rule "methodCallEmpty" (formula "22") (term "1"))
               (rule "blockEmpty" (formula "22") (term "1"))
               (rule "assignment_write_attribute" (formula "22") (term "1"))
               (branch "Normal Execution (a_2 != null)"
                  (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "19")))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "false_right" (formula "22"))
                  (rule "assignment" (formula "22") (term "1"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "tryCatchThrow" (formula "22") (term "1"))
                  (rule "ifElseUnfold" (formula "22") (term "1") (inst "#boolv=x"))
                  (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_5"))
                  (rule "equality_comparison_simple" (formula "22") (term "1"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "replace_known_right" (formula "22") (term "0,0,1,0") (ifseqformula "19"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "ifElseSplit" (formula "22"))
                  (branch "if x_5 true"
                     (builtin "One Step Simplification" (formula "23"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if x_5 false"
                     (builtin "One Step Simplification" (formula "23"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "ifElseSplit" (formula "22"))
                     (branch "if a_1 instanceof java.lang.Throwable true"
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                        (rule "true_left" (formula "1"))
                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "e"))
                        (rule "delete_unnecessary_cast" (formula "22") (term "1"))
                        (branch "Normal Execution (a_1 instanceof java.lang.Throwable)"
                           (builtin "One Step Simplification" (formula "1"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "true_left" (formula "1"))
                           (rule "assignment" (formula "22") (term "1"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "assignment" (formula "22") (term "1"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "methodCallEmpty" (formula "22") (term "1"))
                           (rule "emptyModality" (formula "22") (term "1"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "replace_known_right" (formula "22") (term "0,0,1,0") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "ifElseSplit" (formula "22"))
                           (branch "if x_4 true"
                              (builtin "One Step Simplification" (formula "23"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if x_4 false"
                              (builtin "One Step Simplification" (formula "23"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "ifElseSplit" (formula "22"))
                              (branch "if thrownExc instanceof java.lang.Throwable true"
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                                 (rule "true_left" (formula "1"))
                                 (rule "variableDeclaration" (formula "22") (term "1") (newnames "e_1"))
                                 (rule "delete_unnecessary_cast" (formula "22") (term "1"))
                                 (branch "Normal Execution (thrownExc instanceof java.lang.Throwable)"
                                    (builtin "One Step Simplification" (formula "1"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "1"))
                                    (rule "assignment" (formula "22") (term "1"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "emptyModality" (formula "22") (term "1"))
                                    (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "19")) (ifInst ""  (formula "19")) (ifInst ""  (formula "19")))
                                    (rule "translateJavaSubInt" (formula "15") (term "2,1,1"))
                                    (rule "translateJavaSubInt" (formula "16") (term "3,1,1"))
                                    (rule "allRight" (formula "22") (inst "sk=f_2"))
                                    (rule "allRight" (formula "22") (inst "sk=o_2"))
                                    (rule "orRight" (formula "22"))
                                    (rule "eqSymm" (formula "15") (term "1"))
                                    (rule "eqSymm" (formula "16") (term "1"))
                                    (rule "eqSymm" (formula "23"))
                                    (rule "polySimp_elimSub" (formula "15") (term "2,0,1"))
                                    (rule "polySimp_elimSub" (formula "16") (term "3,0,1"))
                                    (rule "polySimp_addComm0" (formula "16") (term "3,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "12"))
                                    (rule "add_zero_right" (formula "12") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "13"))
                                    (rule "add_zero_right" (formula "13") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "8"))
                                    (rule "add_zero_right" (formula "8") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "9"))
                                    (rule "add_zero_right" (formula "9") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "11"))
                                    (rule "applyEq" (formula "15") (term "1,1") (ifseqformula "14"))
                                    (rule "applyEq" (formula "16") (term "1,1") (ifseqformula "14"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                    (rule "polySimp_elimOne" (formula "9") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0,0"))
                                    (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "11") (term "0"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "closeFalse" (formula "11"))
                                 )
                                 (branch "ClassCastException (!(thrownExc instanceof java.lang.Throwable))"
                                    (builtin "One Step Simplification" (formula "23"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "closeTrue" (formula "22"))
                                 )
                              )
                              (branch "if thrownExc instanceof java.lang.Throwable false"
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                        )
                        (branch "ClassCastException (!(a_1 instanceof java.lang.Throwable))"
                           (builtin "One Step Simplification" (formula "23"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "closeTrue" (formula "22"))
                        )
                     )
                     (branch "if a_1 instanceof java.lang.Throwable false"
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
               (branch "Null Reference (a_2 = null)"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
      )
      (branch "Null Reference (_r = null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "if x false"
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Use Case"
   (builtin "One Step Simplification" (formula "9"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "variableDeclarationAssign" (formula "14") (term "1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "b_0_1"))
   (rule "inequality_comparison_simple" (formula "14") (term "1"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "eqSymm" (formula "14") (term "0,0,1,0"))
   (rule "methodCallEmpty" (formula "14") (term "1"))
   (rule "emptyModality" (formula "14") (term "1"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "impRight" (formula "14"))
   (rule "methodCallReturn" (formula "15") (term "1"))
   (rule "assignment" (formula "15") (term "1"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "methodCallEmpty" (formula "15") (term "1"))
   (rule "tryEmpty" (formula "15") (term "1"))
   (rule "emptyModality" (formula "15") (term "1"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "selectOfAnon" (formula "15") (term "1,1,0,0,1"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "translateJavaSubInt" (formula "13") (term "3,1,1"))
   (rule "translateJavaSubInt" (formula "12") (term "2,1,1"))
   (rule "eqSymm" (formula "15") (term "1,0,0,1"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "eqSymm" (formula "13") (term "1"))
   (rule "eqSymm" (formula "12") (term "1"))
   (rule "polySimp_elimSub" (formula "13") (term "3,0,1"))
   (rule "polySimp_elimSub" (formula "12") (term "2,0,1"))
   (rule "polySimp_addComm0" (formula "13") (term "3,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "0"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
   (rule "polySimp_addComm1" (formula "13") (term "0,0"))
   (rule "inEqSimp_ltToLeq" (formula "6"))
   (rule "add_zero_right" (formula "6") (term "0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "10"))
   (rule "add_zero_right" (formula "10") (term "0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "5"))
   (rule "add_zero_right" (formula "5") (term "0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "9"))
   (rule "add_zero_right" (formula "9") (term "0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "applyEqRigid" (formula "10") (term "0,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "12") (term "0,1,0,0") (ifseqformula "1"))
   (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
   (rule "add_literals" (formula "12") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "12") (term "1,0,0"))
   (rule "add_literals" (formula "12") (term "0,0"))
   (rule "leq_literals" (formula "12") (term "0"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "applyEq" (formula "10") (term "3,0") (ifseqformula "1"))
   (rule "applyEq" (formula "11") (term "0,1,2,0,1") (ifseqformula "1"))
   (rule "polySimp_pullOutFactor1" (formula "11") (term "2,0,1"))
   (rule "add_literals" (formula "11") (term "1,2,0,1"))
   (rule "times_zero_1" (formula "11") (term "2,0,1"))
   (rule "eqSymm" (formula "11") (term "1"))
   (rule "applyEqRigid" (formula "11") (term "1,0,0") (ifseqformula "1"))
   (rule "polySimp_pullOutFactor2b" (formula "11") (term "0,0"))
   (rule "add_literals" (formula "11") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0"))
   (rule "add_literals" (formula "11") (term "0,0"))
   (rule "leq_literals" (formula "11") (term "0"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "inEqSimp_sepNegMonomial0" (formula "6"))
   (rule "polySimp_mulLiterals" (formula "6") (term "0"))
   (rule "polySimp_elimOne" (formula "6") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "5"))
   (rule "polySimp_mulLiterals" (formula "5") (term "0"))
   (rule "polySimp_elimOne" (formula "5") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "9"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
   (rule "polySimp_elimOne" (formula "9") (term "0"))
   (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "nnf_notAnd" (formula "12") (term "0,1,0,0,1"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "Contract_axiom_for_gcd_in_ParallelGcd" (formula "10") (term "1") (inst "i=i_1"))
   (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "2")))
   (rule "wellFormedAnon" (formula "10") (term "1,0"))
   (rule "translateJavaSubInt" (formula "10") (term "3,1,1,1,0,1"))
   (rule "translateJavaMod" (formula "10") (term "0,1,0,0,0,0,0,1"))
   (rule "translateJavaMod" (formula "10") (term "0,1,0,0,0,0,1"))
   (rule "translateJavaMod" (formula "10") (term "0,0,1,0,0,1,0,0,0,1"))
   (rule "translateJavaMod" (formula "10") (term "0,1,1,0,0,1,0,0,0,1"))
   (rule "translateJavaSubInt" (formula "10") (term "2,1,1,1,1"))
   (rule "eqSymm" (formula "10") (term "0,1,0,0,1"))
   (rule "eqSymm" (formula "10") (term "1,1,0,1"))
   (rule "eqSymm" (formula "10") (term "1,1,1"))
   (rule "replace_known_left" (formula "10") (term "1,1,0") (ifseqformula "7"))
   (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "2")))
   (rule "polySimp_elimSub" (formula "10") (term "2,0,1,1,1"))
   (rule "polySimp_elimSub" (formula "10") (term "3,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "10") (term "3,0,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,0,0,1,0,0,0,1"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0,1"))
   (rule "polySimp_addComm1" (formula "10") (term "0,0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0"))
   (rule "add_zero_right" (formula "10") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
   (rule "polySimp_addComm1" (formula "10") (term "0,1,0,0,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
   (rule "jmod_axiom" (formula "10") (term "0,1,1,0,0,1,0,0,0,1"))
   (rule "polySimp_mulComm1" (formula "10") (term "1,0,1,1,0,0,1,0,0,0,1"))
   (rule "jmod_axiom" (formula "10") (term "0,1,0,0,0,0,0,1"))
   (rule "polySimp_mulComm1" (formula "10") (term "1,0,1,0,0,0,0,0,1"))
   (rule "jmod_axiom" (formula "10") (term "0,1,0,0,0,0,1"))
   (rule "polySimp_mulComm1" (formula "10") (term "1,0,1,0,0,0,0,1"))
   (rule "jmod_axiom" (formula "10") (term "0,0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_mulComm1" (formula "10") (term "1,0,0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_sepNegMonomial" (formula "10") (term "1,1,0,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,1,1,0,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "0,1,1,0,0,1,0,0,0,1"))
   (rule "polySimp_sepNegMonomial" (formula "10") (term "1,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,0,0,0,1"))
   (rule "polySimp_sepNegMonomial" (formula "10") (term "1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,0,0,1"))
   (rule "polySimp_sepNegMonomial" (formula "10") (term "0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "0,0,1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,0,0,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,0,0,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "0,0,0,0,0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "0,0,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0"))
   (rule "polySimp_elimOne" (formula "10") (term "0,1,0"))
   (rule "replace_known_left" (formula "10") (term "1,0") (ifseqformula "6"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,1,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,1"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,1,1"))
   (rule "mul_literals" (formula "10") (term "0,1,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,1"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1,0,0,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "0,0"))
   (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "5"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "11"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "nnf_ex2all" (formula "17"))
   (rule "nnf_notAnd" (formula "1") (term "0"))
   (rule "nnf_notAnd" (formula "1") (term "1,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0"))
   (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,0,0,0"))
   (rule "Contract_axiom_for_gcd_in_ParallelGcd" (formula "17") (term "0") (inst "i=i_1"))
   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "3")))
   (rule "wellFormedAnon" (formula "17") (term "1,0"))
   (rule "translateJavaMod" (formula "17") (term "0,1,0,0,0,0,1"))
   (rule "translateJavaMod" (formula "17") (term "0,1,0,0,1,0,0,0,1"))
   (rule "translateJavaSubInt" (formula "17") (term "3,1,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "17") (term "2,1,1,1,1"))
   (rule "eqSymm" (formula "17") (term "1,1,0,1"))
   (rule "eqSymm" (formula "17") (term "1,1,1"))
   (rule "replace_known_left" (formula "17") (term "1,1,0") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "3")))
   (rule "polySimp_elimSub" (formula "17") (term "2,0,1,1,1"))
   (rule "polySimp_elimSub" (formula "17") (term "3,0,1,1,0,1"))
   (rule "polySimp_pullOutFactor1" (formula "17") (term "2,0,1,1,1"))
   (rule "add_literals" (formula "17") (term "1,2,0,1,1,1"))
   (rule "times_zero_1" (formula "17") (term "2,0,1,1,1"))
   (rule "eqSymm" (formula "17") (term "1,1,1"))
   (rule "polySimp_pullOutFactor1" (formula "17") (term "3,0,1,1,0,1"))
   (rule "add_literals" (formula "17") (term "1,3,0,1,1,0,1"))
   (rule "times_zero_1" (formula "17") (term "3,0,1,1,0,1"))
   (rule "eqSymm" (formula "17") (term "1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,1"))
   (rule "polySimp_pullOutFactor2b" (formula "17") (term "0,0,1,1"))
   (rule "add_literals" (formula "17") (term "1,1,0,0,1,1"))
   (rule "times_zero_1" (formula "17") (term "1,0,0,1,1"))
   (rule "add_zero_right" (formula "17") (term "0,0,1,1"))
   (rule "leq_literals" (formula "17") (term "0,1,1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,0,1,0,0,1"))
   (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0,1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,1"))
   (rule "polySimp_pullOutFactor2b" (formula "17") (term "0,0,1,1"))
   (rule "add_literals" (formula "17") (term "1,1,0,0,1,1"))
   (rule "times_zero_1" (formula "17") (term "1,0,0,1,1"))
   (rule "add_zero_right" (formula "17") (term "0,0,1,1"))
   (rule "leq_literals" (formula "17") (term "0,1,1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,1"))
   (rule "add_zero_right" (formula "17") (term "0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "0"))
   (rule "add_zero_right" (formula "17") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,1,0,1"))
   (rule "polySimp_addComm1" (formula "17") (term "0,1,0,0,0,1,0,1"))
   (rule "applyEq" (formula "17") (term "0,1,0,0,0,0,1") (ifseqformula "18"))
   (rule "applyEq" (formula "17") (term "1,0,1,0,0,1") (ifseqformula "18"))
   (rule "applyEq" (formula "17") (term "0,1,1") (ifseqformula "18"))
   (rule "applyEq" (formula "17") (term "1,0,0,1,0,0,0,1,0,1") (ifseqformula "18"))
   (rule "jmod_axiom" (formula "17") (term "0,1,0,0,1,0,1"))
   (rule "polySimp_mulComm1" (formula "17") (term "1,0,1,0,0,1,0,1"))
   (rule "jmod_axiom" (formula "17") (term "0,1,0,0,1"))
   (rule "polySimp_mulComm1" (formula "17") (term "1,0,1,0,0,1"))
   (rule "polySimp_sepNegMonomial" (formula "17") (term "1,0,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "17") (term "0,1,0,0,1,0,1"))
   (rule "polySimp_sepNegMonomial" (formula "17") (term "1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "17") (term "0,1,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,0,0,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,0,0,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "17") (term "0,0,0,0,0,0,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0"))
   (rule "polySimp_mulLiterals" (formula "17") (term "0,0"))
   (rule "polySimp_elimOne" (formula "17") (term "0,0"))
   (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "10"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "17"))
   (rule "notLeft" (formula "19"))
   (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "19"))
   (builtin "One Step Simplification" (formula "23"))
   (rule "allRight" (formula "23") (inst "sk=f_0"))
   (rule "allRight" (formula "23") (inst "sk=o_0"))
   (rule "orRight" (formula "23"))
   (rule "orRight" (formula "24"))
   (rule "orRight" (formula "24"))
   (rule "replace_known_right" (formula "23") (term "0,1") (ifseqformula "25"))
   (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "24")))
   (rule "closeTrue" (formula "23"))
)
)

}
