\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Jan 09 21:23:22 CET 2024
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:off, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Tue Jan 09 21:23:22 CET 2024
contract=ArrayList[List\\:\\:get(int)].JML accessible clause.0
name=ArrayList[List\\:\\:get(int)].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "mattias" ) (keyVersion "4911758ba07017f4af60dc0314ac665c14a542d0"))

(autoModeTime "2102")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "self,index_0,anon_heap"))
 (builtin "Evaluate Query" (formula "2") (term "0") (newnames "index_1,callee,queryResult,res_get") (userinteraction))
 (builtin "One Step Simplification" (formula "2"))
 (builtin "One Step Simplification" (formula "3"))
(rule "replaceKnownQuery_0" (formula "3") (term "0"))
(rule "notLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "eqSymm" (formula "11"))
(rule "eqSymm" (formula "10") (term "0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "7") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "queryResult"))
(rule "inEqSimp_sepNegMonomial0" (formula "7"))
(rule "polySimp_mulLiterals" (formula "7") (term "0"))
(rule "polySimp_elimOne" (formula "7") (term "0"))
 (builtin "Use Operation Contract" (formula "10") (newnames "heapBefore_get,result_get,exc,heapAfter_get,anon_heap_get") (contract "ArrayList[List::get(int)].JML normal_behavior operation contract.0") (modality "diamond"))
(branch "Post (get)"
    (builtin "One Step Simplification" (formula "12"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "eqSymm" (formula "12"))
   (rule "assignment" (formula "15") (term "1"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "pullOutSelect" (formula "12") (term "0,0") (inst "selectSK=List_seq_0"))
   (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "10"))
    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "15")) (ifInst ""  (formula "3")))
   (rule "applyEqReverse" (formula "13") (term "0,0") (ifseqformula "12"))
   (rule "hideAuxiliaryEq" (formula "12"))
   (rule "methodCallEmpty" (formula "15") (term "1"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "emptyModality" (formula "15") (term "1"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "notRight" (formula "15"))
   (rule "eqSymm" (formula "1"))
   (rule "applyEq" (formula "13") (term "1") (ifseqformula "1"))
   (rule "Class_invariant_axiom_for_ArrayList" (formula "14") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "i_2=i_2") (ifseqformula "5"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "replaceKnownSelect_taclet0_1" (formula "14") (term "0,0,1,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_2" (formula "14") (term "0,0,1,0,0"))
   (rule "replaceKnownSelect_taclet0_1" (formula "14") (term "0,1,1,0,1,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_2" (formula "14") (term "0,1,1,0,1,0"))
   (rule "replaceKnownSelect_taclet0_1" (formula "14") (term "0,0,0,1,1,0,1"))
   (rule "replaceKnownSelect_taclet0_1" (formula "14") (term "0,0,0,0,1,0,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_2" (formula "14") (term "0,0,0,1,1,0,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_2" (formula "14") (term "0,0,0,0,1,0,1"))
   (rule "replaceKnownSelect_taclet0_1" (formula "14") (term "0,1,1,0,0,1,0,0,0,0,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_2" (formula "14") (term "0,1,1,0,0,1,0,0,0,0,0,0"))
   (rule "replaceKnownSelect_taclet0_1" (formula "14") (term "0,0,0,0,1,0,1,0,0,0,0,0,0"))
   (rule "replaceKnownSelect_taclet0_1" (formula "14") (term "0,0,0,1,1,0,1,0,0,0,0,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_2" (formula "14") (term "0,0,0,0,1,0,1,0,0,0,0,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_2" (formula "14") (term "0,0,0,1,1,0,1,0,0,0,0,0,0"))
   (rule "expandInRangeInt" (formula "14") (term "1,1,0,1"))
   (rule "replace_int_MAX" (formula "14") (term "1,0,1,1,0,1"))
   (rule "replace_int_MIN" (formula "14") (term "0,1,1,1,0,1"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "notLeft" (formula "16"))
   (rule "andLeft" (formula "14"))
   (rule "eqSymm" (formula "21") (term "1,0"))
   (rule "castedGetAny" (formula "22") (term "1,1,1,1,0"))
   (rule "castedGetAny" (formula "22") (term "0,0,1,1,0"))
   (rule "subsetSingletonLeft" (formula "14"))
   (rule "subsetSingletonLeft" (formula "15"))
   (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "19"))
   (rule "inEqSimp_commuteLeq" (formula "18"))
   (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,1,0"))
   (rule "applyEq" (formula "8") (term "0") (ifseqformula "20"))
   (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "20"))
   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
   (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
   (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
   (rule "pullOutSelect" (formula "20") (term "1") (inst "selectSK=ArrayList_size_0"))
   (rule "applyEq" (formula "16") (term "1,1,1,0,0") (ifseqformula "20"))
   (rule "applyEq" (formula "19") (term "1") (ifseqformula "20"))
   (rule "applyEq" (formula "23") (term "1,1,1,0,0") (ifseqformula "20"))
   (rule "applyEq" (formula "8") (term "0") (ifseqformula "20"))
   (rule "applyEq" (formula "22") (term "1,1,1,0,0") (ifseqformula "20"))
   (rule "applyEq" (formula "18") (term "0") (ifseqformula "20"))
   (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "11"))
    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "25")) (ifInst ""  (formula "4")))
   (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "20"))
   (rule "applyEqReverse" (formula "20") (term "1") (ifseqformula "21"))
   (rule "applyEqReverse" (formula "16") (term "1,1,1,0,0") (ifseqformula "21"))
   (rule "applyEqReverse" (formula "22") (term "1,1,1,0,0") (ifseqformula "21"))
   (rule "applyEqReverse" (formula "8") (term "0") (ifseqformula "21"))
   (rule "applyEqReverse" (formula "19") (term "1") (ifseqformula "21"))
   (rule "applyEqReverse" (formula "23") (term "1,1,1,0,0") (ifseqformula "21"))
   (rule "hideAuxiliaryEq" (formula "21"))
   (rule "eqSymm" (formula "20"))
   (rule "inEqSimp_commuteGeq" (formula "19"))
   (rule "applyEq" (formula "8") (term "0") (ifseqformula "20"))
   (rule "applyEq" (formula "22") (term "1,1,1,0,0") (ifseqformula "20"))
   (rule "applyEq" (formula "21") (term "1,1,1,0,0") (ifseqformula "20"))
   (rule "applyEq" (formula "16") (term "1,1,1,0,0") (ifseqformula "20"))
   (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
   (rule "inEqSimp_commuteLeq" (formula "19"))
   (rule "pullOutSelect" (formula "17") (term "0,0,1") (inst "selectSK=ArrayList_array_0"))
   (rule "applyEq" (formula "22") (term "1,1,1,0") (ifseqformula "17"))
   (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "17"))
   (rule "applyEq" (formula "24") (term "0") (ifseqformula "17"))
   (rule "simplifySelectOfAnonEQ" (formula "17") (ifseqformula "11"))
    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "25")) (ifInst ""  (formula "4")))
   (rule "applyEqReverse" (formula "18") (term "0,0,1") (ifseqformula "17"))
   (rule "applyEqReverse" (formula "22") (term "1,1,1,0") (ifseqformula "17"))
   (rule "applyEqReverse" (formula "20") (term "0,0") (ifseqformula "17"))
   (rule "applyEqReverse" (formula "24") (term "0") (ifseqformula "17"))
   (rule "hideAuxiliaryEq" (formula "17"))
   (rule "inEqSimp_commuteGeq" (formula "19"))
   (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=List_footprint_0"))
   (rule "applyEq" (formula "15") (term "2") (ifseqformula "17"))
   (rule "applyEq" (formula "14") (term "2") (ifseqformula "17"))
   (rule "simplifySelectOfAnonEQ" (formula "17") (ifseqformula "11"))
    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "25")) (ifInst ""  (formula "4")))
   (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "17"))
   (rule "applyEqReverse" (formula "15") (term "2") (ifseqformula "17"))
   (rule "applyEqReverse" (formula "14") (term "2") (ifseqformula "17"))
   (rule "hideAuxiliaryEq" (formula "17"))
   (rule "applyEq" (formula "15") (term "2") (ifseqformula "17"))
   (rule "applyEq" (formula "14") (term "2") (ifseqformula "17"))
   (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "17"))
   (rule "elementOfUnion" (formula "15"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "true_left" (formula "15"))
   (rule "elementOfUnion" (formula "14"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "true_left" (formula "14"))
   (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "17"))
   (rule "mul_literals" (formula "16") (term "0,0"))
   (rule "add_zero_left" (formula "16") (term "0"))
   (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "18"))
   (rule "polySimp_rightDist" (formula "8") (term "0,0"))
   (rule "mul_literals" (formula "8") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8"))
   (rule "polySimp_mulComm0" (formula "8") (term "1"))
   (rule "polySimp_rightDist" (formula "8") (term "1"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
   (rule "mul_literals" (formula "8") (term "0,1"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1"))
   (rule "commuteUnion" (formula "16") (term "1"))
   (rule "commuteUnion" (formula "25") (term "1,1,0,0"))
   (rule "nnf_imp2or" (formula "22") (term "0"))
   (rule "nnf_imp2or" (formula "15") (term "0"))
   (rule "nnf_imp2or" (formula "21") (term "0"))
   (rule "nnf_notAnd" (formula "22") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
   (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
   (rule "mul_literals" (formula "22") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "15") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
   (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
   (rule "mul_literals" (formula "15") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "21") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
   (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
   (rule "mul_literals" (formula "21") (term "1,0,0,0"))
   (rule "Class_invariant_axiom_for_ArrayList" (formula "10") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "i_2=i_2") (ifseqformula "5"))
    (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "23")) (ifInst ""  (formula "19")) (ifInst ""  (formula "20")))
   (rule "expandInRangeInt" (formula "10") (term "1,1,0,1"))
   (rule "replace_int_MIN" (formula "10") (term "0,1,1,1,0,1"))
   (rule "replace_int_MAX" (formula "10") (term "1,0,1,1,0,1"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "eqSymm" (formula "15") (term "1,0"))
   (rule "castedGetAny" (formula "16") (term "1,1,1,1,0"))
   (rule "castedGetAny" (formula "16") (term "0,0,1,1,0"))
   (rule "subsetSingletonLeft" (formula "11"))
   (rule "subsetSingletonLeft" (formula "10"))
   (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "14"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "1,1,1,0"))
   (rule "applyEq" (formula "11") (term "2") (ifseqformula "13"))
   (rule "applyEq" (formula "13") (term "0") (ifseqformula "21"))
   (rule "eqSymm" (formula "13"))
   (rule "applyEq" (formula "10") (term "2") (ifseqformula "21"))
   (rule "applyEq" (formula "11") (term "2") (ifseqformula "13"))
   (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "25"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
   (rule "elementOfUnion" (formula "10"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "elementOfUnion" (formula "10"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "commuteUnion" (formula "11") (term "0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "nnf_imp2or" (formula "12") (term "0"))
   (rule "nnf_imp2or" (formula "11") (term "0"))
   (rule "nnf_imp2or" (formula "10") (term "0"))
   (rule "nnf_notAnd" (formula "12") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
   (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
   (rule "mul_literals" (formula "12") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "11") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
   (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
   (rule "mul_literals" (formula "10") (term "1,0,0,0"))
   (rule "commute_or_2" (formula "21") (term "0"))
   (rule "cnf_rightDist" (formula "22") (term "0"))
   (rule "cnf_rightDist" (formula "15") (term "0"))
   (rule "distr_forallAnd" (formula "22"))
   (rule "andLeft" (formula "22"))
   (rule "distr_forallAnd" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "commute_or_2" (formula "10") (term "0"))
   (rule "commute_or_2" (formula "23") (term "0"))
   (rule "commute_or" (formula "24") (term "0"))
   (rule "commute_or_2" (formula "15") (term "0"))
   (rule "commute_or" (formula "22") (term "0,0"))
   (rule "shift_paren_or" (formula "16") (term "0"))
   (rule "commute_or" (formula "10") (term "0,0"))
   (rule "commute_or" (formula "23") (term "0,0"))
   (rule "commute_or" (formula "15") (term "0,0"))
   (rule "seqGetAlphaCast" (formula "14") (term "0"))
   (rule "castDel" (formula "14") (term "0"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "true_left" (formula "14"))
   (rule "cnf_rightDist" (formula "24") (term "0"))
   (rule "distr_forallAnd" (formula "24"))
   (rule "andLeft" (formula "24"))
   (rule "commute_or" (formula "25") (term "0"))
   (rule "lenNonNegative" (formula "21") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "21"))
   (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
   (rule "arrayLengthIsAnInt" (formula "20") (term "1"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "true_left" (formula "20"))
   (rule "arrayLengthNotNegative" (formula "20") (term "1"))
   (rule "allLeft" (formula "15") (inst "t=index_0"))
   (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
   (rule "applyEq" (formula "15") (term "0,0,0,0") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "true_left" (formula "15"))
   (rule "allLeft" (formula "10") (inst "t=index_0"))
   (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
   (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "15"))
   (rule "eqSymm" (formula "10") (term "0,0"))
   (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "9"))
   (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
   (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
   (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "10") (term "0,0,1"))
   (rule "leq_literals" (formula "10") (term "0,1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "7"))
   (rule "qeq_literals" (formula "10") (term "0,1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "allLeft" (formula "24") (inst "t=index_0"))
   (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
   (rule "applyEq" (formula "24") (term "0,0,0,0") (ifseqformula "15"))
   (rule "exact_instance_definition_int" (formula "24") (term "0,0") (inst "iv=iv"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "true_left" (formula "24"))
   (rule "allLeft" (formula "17") (inst "t=index_0"))
   (rule "typeEqDerived" (formula "17") (term "0,0,0") (ifseqformula "15"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "true_left" (formula "17"))
   (rule "allLeft" (formula "23") (inst "t=index_0"))
   (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
   (rule "applyEq" (formula "23") (term "0,0,0") (ifseqformula "15"))
   (rule "eqSymm" (formula "23") (term "0,0"))
   (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "9"))
   (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
   (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
   (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
   (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "23") (term "0,0,1"))
   (rule "leq_literals" (formula "23") (term "0,1"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "7"))
   (rule "qeq_literals" (formula "23") (term "0,1"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "pullOutSelect" (formula "23") (term "0") (inst "selectSK=arr_0"))
   (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "29")))
   (rule "eqSymm" (formula "24"))
   (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "24"))
   (rule "hideAuxiliaryEq" (formula "24"))
   (rule "ifthenelse_negated" (formula "23") (term "0"))
   (rule "applyEq" (formula "23") (term "1,0") (ifseqformula "10"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "28") (term "0") (ifseqformula "2"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "29"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "true_left" (formula "24"))
    (builtin "Evaluate Query" (formula "30") (term "0") (newnames "index_2,callee,queryResult_0,res_get_0") (userinteraction))
   (rule "replaceKnownQuery0_11" (formula "31") (term "0"))
   (rule "notLeft" (formula "1"))
   (rule "eqSymm" (formula "28") (term "0,0,1"))
   (rule "variableDeclaration" (formula "28") (term "1") (newnames "queryResult_0"))
    (builtin "Use Operation Contract" (formula "28") (newnames "heapBefore_get_0,result_get_0,exc_0,heapAfter_get_0,anon_heap_get_0") (contract "ArrayList[List::get(int)].JML normal_behavior operation contract.0") (modality "diamond"))
   (branch "Post (get)"
       (builtin "One Step Simplification" (formula "30"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "andLeft" (formula "29"))
      (rule "andLeft" (formula "30"))
      (rule "andLeft" (formula "31"))
      (rule "andLeft" (formula "31"))
      (rule "eqSymm" (formula "31"))
      (rule "assignment" (formula "33") (term "1"))
       (builtin "One Step Simplification" (formula "33"))
      (rule "pullOutSelect" (formula "31") (term "0,0") (inst "selectSK=List_seq_1"))
      (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "29"))
       (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "36")))
      (rule "ifthenelse_negated" (formula "31") (term "0"))
      (rule "pullOutSelect" (formula "31") (term "1,0") (inst "selectSK=List_seq_2"))
      (rule "simplifySelectOfAnon" (formula "31"))
       (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "37")) (ifInst ""  (formula "5")))
      (rule "elementOfSetMinus" (formula "31") (term "0,0"))
       (builtin "One Step Simplification" (formula "31"))
      (rule "ifthenelse_negated" (formula "31") (term "0"))
      (rule "elementOfUnion" (formula "31") (term "0,0"))
       (builtin "One Step Simplification" (formula "31"))
      (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "31"))
      (rule "hideAuxiliaryEq" (formula "31"))
      (rule "pullOutSelect" (formula "31") (term "0,0,0") (inst "selectSK=java_lang_Object_created__0"))
      (rule "simplifySelectOfAnon" (formula "31"))
       (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "37")) (ifInst ""  (formula "5")))
      (rule "applyEqReverse" (formula "32") (term "0,0,0") (ifseqformula "31"))
      (rule "hideAuxiliaryEq" (formula "31"))
      (rule "replace_known_left" (formula "31") (term "0,0") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "31"))
      (rule "applyEqReverse" (formula "32") (term "0,0") (ifseqformula "31"))
      (rule "hideAuxiliaryEq" (formula "31"))
      (rule "applyEq" (formula "16") (term "0") (ifseqformula "31"))
      (rule "applyEq" (formula "33") (term "0,1,0") (ifseqformula "16"))
      (rule "applyEq" (formula "31") (term "1") (ifseqformula "16"))
      (rule "methodCallEmpty" (formula "33") (term "1"))
       (builtin "One Step Simplification" (formula "33"))
      (rule "emptyModality" (formula "33") (term "1"))
       (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "36")))
      (rule "closeTrue" (formula "33"))
   )
   (branch "Exceptional Post (get)"
       (builtin "One Step Simplification" (formula "30"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "andLeft" (formula "29"))
      (rule "andLeft" (formula "30"))
      (rule "andLeft" (formula "31"))
      (rule "andLeft" (formula "30"))
      (rule "andLeft" (formula "32"))
      (rule "notLeft" (formula "30"))
      (rule "close" (formula "34") (ifseqformula "33"))
   )
   (branch "Pre (get)"
       (builtin "One Step Simplification" (formula "28"))
      (rule "wellFormedAnon" (formula "28") (term "0,1"))
      (rule "replace_known_left" (formula "28") (term "1,0,1") (ifseqformula "4"))
       (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "3")))
      (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
      (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0"))
      (rule "polySimp_elimOne" (formula "28") (term "0,0,0"))
      (rule "pullOutSelect" (formula "28") (term "0,1") (inst "selectSK=java_lang_Object_created__0"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")) (ifInst ""  (formula "6")))
      (rule "applyEqReverse" (formula "29") (term "0,1") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "pullOutSelect" (formula "28") (term "0,0,0") (inst "selectSK=List_seq_1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")) (ifInst ""  (formula "6")))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "29") (term "0,0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "23"))
      (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "Class_invariant_axiom_for_ArrayList" (formula "28") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "i_2=i_2") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "replaceKnownSelect_taclet20_14" (formula "28") (term "0,0,1,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_15" (formula "28") (term "0,0,1,0,0"))
      (rule "replaceKnownSelect_taclet20_14" (formula "28") (term "0,1,1,0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_15" (formula "28") (term "0,1,1,0,1,0"))
      (rule "replaceKnownSelect_taclet20_14" (formula "28") (term "0,0,0,0,1,0,1"))
      (rule "replaceKnownSelect_taclet20_14" (formula "28") (term "0,0,0,1,1,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_15" (formula "28") (term "0,0,0,0,1,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_15" (formula "28") (term "0,0,0,1,1,0,1"))
      (rule "replaceKnownSelect_taclet20_14" (formula "28") (term "0,1,1,0,0,1,0,0,0,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_15" (formula "28") (term "0,1,1,0,0,1,0,0,0,0,0,0"))
      (rule "replaceKnownSelect_taclet20_14" (formula "28") (term "0,0,0,0,1,0,1,0,0,0,0,0,0"))
      (rule "replaceKnownSelect_taclet20_14" (formula "28") (term "0,0,0,1,1,0,1,0,0,0,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_15" (formula "28") (term "0,0,0,0,1,0,1,0,0,0,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_15" (formula "28") (term "0,0,0,1,1,0,1,0,0,0,0,0,0"))
      (rule "expandInRangeInt" (formula "28") (term "1,1,0,1"))
      (rule "replace_int_MIN" (formula "28") (term "0,1,1,1,0,1"))
      (rule "replace_int_MAX" (formula "28") (term "1,0,1,1,0,1"))
      (rule "eqSymm" (formula "28") (term "1,0,0"))
      (rule "eqSymm" (formula "28") (term "1,0,1,0"))
      (rule "subsetSingletonLeft" (formula "28") (term "0,0,0,0,0,0,0,0"))
      (rule "subsetSingletonLeft" (formula "28") (term "1,0,0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "28") (term "1,1,1,1,0,1"))
      (rule "castedGetAny" (formula "28") (term "0,0,1,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1,0,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1,0,0,0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "28") (term "1,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "28") (term "0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1,0,0,0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "28") (term "1,1,1,0,1"))
      (rule "applyEq" (formula "28") (term "0,1,0,0,1,0,0,1,0,0,0,0,0,0") (ifseqformula "23"))
      (rule "applyEq" (formula "28") (term "1,1,0,0") (ifseqformula "23"))
      (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1"))
      (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1"))
      (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1,0,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,0,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1,0,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,0,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,0,0,0,0,0,0"))
      (rule "pullOutSelect" (formula "28") (term "0,0,1,0,0,0,0,0") (inst "selectSK=ArrayList_array_1"))
      (rule "applyEq" (formula "29") (term "0,0,1,1,0,0,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "29") (term "1,1,1,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "29") (term "0,0,1,1,0,0,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")) (ifInst ""  (formula "6")))
      (rule "inEqSimp_commuteGeq" (formula "29") (term "1,1,0,0,0"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "29") (term "0,0,1,0,0,0,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "29") (term "1,1,1,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "29") (term "0,0,1,1,0,0,0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_right" (formula "28") (term "0,1,0,0,0,0,0") (ifseqformula "29"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "pullOutSelect" (formula "28") (term "0,0,1,0,0,0") (inst "selectSK=ArrayList_size_1"))
      (rule "applyEq" (formula "29") (term "0,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "29") (term "0,1,1,0,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "29") (term "1,1,1,0,0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "29") (term "1,1,1,0,0,1,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")) (ifInst ""  (formula "6")))
      (rule "eqSymm" (formula "29") (term "1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "29") (term "1,1,0,0,0"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "29") (term "1,1,1,0,0,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "29") (term "1,1,1,0,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "29") (term "0,0,1,0,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "29") (term "1,1,0,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "22")))
      (rule "applyEqReverse" (formula "29") (term "1,1,1,0,0,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0,0"))
      (rule "replace_known_left" (formula "28") (term "1,0,0") (ifseqformula "22"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "pullOutSelect" (formula "28") (term "0,1,0,0") (inst "selectSK=List_footprint_1"))
      (rule "applyEq" (formula "29") (term "2,0,0,0,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "29") (term "2,1,0,0,0,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")) (ifInst ""  (formula "6")))
      (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "20"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "29") (term "2,1,0,0,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "29") (term "2,0,0,0,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "29") (term "0,1,0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "eqSymm" (formula "28") (term "1,0,0"))
      (rule "elementOfUnion" (formula "28") (term "1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "elementOfUnion" (formula "28") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "commuteUnion" (formula "28") (term "0,1,0,0"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "nnf_imp2or" (formula "28") (term "0,1"))
      (rule "nnf_imp2or" (formula "28") (term "0,1,0"))
      (rule "nnf_imp2or" (formula "28") (term "0,0,0"))
      (rule "nnf_notAnd" (formula "28") (term "0,0,1"))
      (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,1"))
      (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0,1"))
      (rule "add_literals" (formula "28") (term "0,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,1"))
      (rule "mul_literals" (formula "28") (term "1,0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,1"))
      (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,1"))
      (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,1"))
      (rule "add_zero_left" (formula "28") (term "0,0,1,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,1"))
      (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,1"))
      (rule "nnf_notAnd" (formula "28") (term "0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,1,0"))
      (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0,1,0"))
      (rule "add_literals" (formula "28") (term "0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,1,0"))
      (rule "mul_literals" (formula "28") (term "1,0,0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "28") (term "0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,1,0"))
      (rule "nnf_notAnd" (formula "28") (term "0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0,0"))
      (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0,0"))
      (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,0,0"))
      (rule "add_zero_left" (formula "28") (term "0,0,1,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,0,0"))
      (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0,0,0"))
      (rule "add_literals" (formula "28") (term "0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,0,0"))
      (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0"))
      (rule "andRight" (formula "28"))
      (branch
         (rule "andRight" (formula "28"))
         (branch
            (rule "allRight" (formula "28") (inst "sk=i_2_0"))
            (rule "orRight" (formula "28"))
            (rule "orRight" (formula "28"))
            (rule "inEqSimp_leqRight" (formula "28"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "29"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "24"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "allLeft" (formula "20") (inst "t=i_2_0"))
            (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "3"))
            (rule "qeq_literals" (formula "20") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
            (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
            (rule "add_literals" (formula "20") (term "0,0,1"))
            (rule "leq_literals" (formula "20") (term "0,1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "notLeft" (formula "20"))
            (rule "replace_known_right" (formula "32") (term "0,0") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "allLeft" (formula "21") (inst "t=i_2_0"))
            (rule "replace_known_right" (formula "21") (term "0,0") (ifseqformula "33"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "3"))
            (rule "qeq_literals" (formula "21") (term "0,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "2"))
            (rule "andLeft" (formula "21"))
            (rule "inEqSimp_homoInEq1" (formula "21"))
            (rule "polySimp_pullOutFactor1b" (formula "21") (term "0"))
            (rule "add_literals" (formula "21") (term "1,1,0"))
            (rule "times_zero_1" (formula "21") (term "1,0"))
            (rule "add_zero_right" (formula "21") (term "0"))
            (rule "leq_literals" (formula "21"))
            (rule "closeFalse" (formula "21"))
         )
         (branch
            (rule "allRight" (formula "28") (inst "sk=i_0_0"))
            (rule "orRight" (formula "28"))
            (rule "orRight" (formula "28"))
            (rule "inEqSimp_leqRight" (formula "28"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "29"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "pullOutSelect" (formula "30") (term "1") (inst "selectSK=arr_1"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")) (ifInst ""  (formula "4")))
            (rule "elementOfSetMinus" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "ifthenelse_negated" (formula "1") (term "0"))
            (rule "elementOfUnion" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "31") (term "1") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "24"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "allLeft" (formula "15") (inst "t=i_0_0"))
            (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "32"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "3"))
            (rule "qeq_literals" (formula "15") (term "0,0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "2"))
            (rule "andLeft" (formula "15"))
            (rule "inEqSimp_homoInEq1" (formula "15"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
            (rule "add_literals" (formula "15") (term "1,1,0"))
            (rule "times_zero_1" (formula "15") (term "1,0"))
            (rule "add_literals" (formula "15") (term "0"))
            (rule "leq_literals" (formula "15"))
            (rule "closeFalse" (formula "15"))
         )
      )
      (branch
         (rule "allRight" (formula "28") (inst "sk=i_0"))
         (rule "orRight" (formula "28"))
         (rule "orRight" (formula "28"))
         (rule "inEqSimp_geqRight" (formula "29"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_leqRight" (formula "29"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "24"))
         (rule "polySimp_rightDist" (formula "2") (term "0,0"))
         (rule "mul_literals" (formula "2") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "commute_and" (formula "31") (term "1"))
         (rule "shift_paren_and" (formula "31"))
         (rule "allLeft" (formula "29") (inst "t=i_0"))
         (rule "inEqSimp_commuteGeq" (formula "29") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "29") (term "0,0") (ifseqformula "1"))
         (rule "qeq_literals" (formula "29") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq1" (formula "29") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0"))
         (rule "add_literals" (formula "29") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
         (rule "add_literals" (formula "29") (term "0,0,0"))
         (rule "leq_literals" (formula "29") (term "0,0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "29"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "allLeft" (formula "21") (inst "t=i_0"))
         (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
         (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
         (rule "add_literals" (formula "21") (term "0,0,1"))
         (rule "leq_literals" (formula "21") (term "0,1"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "1"))
         (rule "qeq_literals" (formula "21") (term "0,1"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "allLeft" (formula "20") (inst "t=i_0"))
         (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "1"))
         (rule "qeq_literals" (formula "20") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
         (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
         (rule "add_literals" (formula "20") (term "0,0,1"))
         (rule "leq_literals" (formula "20") (term "0,1"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "notLeft" (formula "20"))
         (rule "allLeft" (formula "29") (inst "t=i_0"))
         (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0") (ifseqformula "1"))
         (rule "qeq_literals" (formula "29") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
         (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "29") (term "0,0,1"))
         (rule "leq_literals" (formula "29") (term "0,1"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "instanceof_known_dynamic_type" (formula "21") (term "0") (ifseqformula "29"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "true_left" (formula "21"))
         (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "28"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "inEqSimp_geqRight" (formula "34"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_subsumption0" (formula "31") (ifseqformula "1"))
         (rule "leq_literals" (formula "31") (term "0"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "true_left" (formula "31"))
         (rule "allLeft" (formula "28") (inst "t=i_0"))
         (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0") (ifseqformula "2"))
         (rule "qeq_literals" (formula "28") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "4"))
         (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
         (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
         (rule "add_literals" (formula "28") (term "0,0,1"))
         (rule "leq_literals" (formula "28") (term "0,1"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "applyEq" (formula "34") (term "0") (ifseqformula "28"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "false_right" (formula "34"))
         (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "28"))
         (rule "exact_instance_definition_int" (formula "30") (inst "iv=iv"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "true_left" (formula "30"))
         (rule "pullOutSelect" (formula "28") (term "1") (inst "selectSK=arr_1"))
         (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "34")) (ifInst ""  (formula "5")))
         (rule "applyEqReverse" (formula "28") (term "1") (ifseqformula "29"))
         (rule "hideAuxiliaryEq" (formula "29"))
         (rule "eqSymm" (formula "28"))
         (rule "allLeft" (formula "32") (inst "t=i_0"))
         (rule "inEqSimp_commuteGeq" (formula "32") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0") (ifseqformula "4"))
         (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0"))
         (rule "add_literals" (formula "32") (term "1,1,0,0,1,0"))
         (rule "times_zero_1" (formula "32") (term "1,0,0,1,0"))
         (rule "add_literals" (formula "32") (term "0,0,1,0"))
         (rule "leq_literals" (formula "32") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "inEqSimp_contradInEq0" (formula "32") (term "1") (ifseqformula "1"))
         (rule "qeq_literals" (formula "32") (term "0,1"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "2"))
         (rule "qeq_literals" (formula "32") (term "0"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "closeFalse" (formula "32"))
      )
   )
   (branch "Null reference (callee = null)"
       (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "30")))
      (rule "closeTrue" (formula "28"))
   )
)
(branch "Exceptional Post (get)"
    (builtin "One Step Simplification" (formula "12"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "13"))
   (rule "notLeft" (formula "11"))
   (rule "close" (formula "14") (ifseqformula "13"))
)
(branch "Pre (get)"
    (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "8")) (ifInst ""  (formula "1")) (ifInst ""  (formula "3")))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
   (rule "polySimp_addComm1" (formula "10") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0"))
   (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "6"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "inEqSimp_leqRight" (formula "10"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "1"))
   (rule "andLeft" (formula "8"))
   (rule "inEqSimp_homoInEq1" (formula "8"))
   (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
   (rule "add_literals" (formula "8") (term "1,1,0"))
   (rule "times_zero_1" (formula "8") (term "1,0"))
   (rule "add_zero_right" (formula "8") (term "0"))
   (rule "leq_literals" (formula "8"))
   (rule "closeFalse" (formula "8"))
)
(branch "Null reference (callee = null)"
    (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "9")))
   (rule "closeTrue" (formula "10"))
)
)
}
