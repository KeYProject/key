\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Jan 10 17:20:09 CET 2024
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:off, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=6000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Wed Jan 10 17:20:09 CET 2024
contract=LinkedList[java.lang.Object\\:\\:<inv>()].JML accessible clause.0
name=LinkedList[java.lang.Object\\:\\:<inv>()].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "mattias" ) (keyVersion "4911758ba07017f4af60dc0314ac665c14a542d0"))

(autoModeTime "117466")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "replace_known_left" (formula "8") (term "0") (ifseqformula "6") (userinteraction))
 (builtin "One Step Simplification" (formula "8") (userinteraction))
(rule "Class_invariant_axiom_for_LinkedList" (formula "8") (inst "i=i") (inst "j=j") (inst "i_0=i_0") (ifseqformula "7") (userinteraction))
(rule "andRight" (formula "8"))
(branch "Case 1"
   (rule "andRight" (formula "8"))
   (branch "Case 1"
      (rule "andRight" (formula "8"))
      (branch "Case 1"
         (rule "andRight" (formula "8"))
         (branch "Case 1"
            (rule "andRight" (formula "8"))
            (branch "Case 1"
               (rule "andRight" (formula "8"))
               (branch "Case 1"
                  (rule "subsetSingletonLeft" (formula "8"))
                  (rule "pullOutSelect" (formula "8") (term "2") (inst "selectSK=List_footprint_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "4")))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "Class_invariant_axiom_for_LinkedList" (formula "7") (inst "i=i") (inst "j=j") (inst "i_0=i_0") (ifseqformula "8"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "eqSymm" (formula "13"))
                  (rule "eqSymm" (formula "14"))
                  (rule "eqSymm" (formula "12"))
                  (rule "eqSymm" (formula "11"))
                  (rule "eqSymm" (formula "10") (term "0,1,0,1,0,1,0"))
                  (rule "eqSymm" (formula "10") (term "1,1,0"))
                  (rule "eqSymm" (formula "10") (term "1,1,0,1,0,1,0"))
                  (rule "eqSymm" (formula "10") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "9"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,0,2,0"))
                  (rule "mul_literals" (formula "12") (term "1,1,0,2,0"))
                  (rule "polySimp_elimSub" (formula "10") (term "1,0,0,1,1,0"))
                  (rule "mul_literals" (formula "10") (term "1,1,0,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "10") (term "1,0,2,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,0,2,0"))
                  (rule "polySimp_addComm0" (formula "10") (term "1,0,0,1,1,0"))
                  (rule "castedGetAny" (formula "10") (term "0,0,0,0,0,1,0"))
                  (rule "subsetSingletonLeft" (formula "7"))
                  (rule "subsetSingletonLeft" (formula "8"))
                  (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "8"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "16") (term "2") (ifseqformula "1"))
                  (rule "close" (formula "16") (ifseqformula "7"))
               )
               (branch "Case 2"
                  (rule "subsetSingletonLeft" (formula "8"))
                  (rule "pullOutSelect" (formula "8") (term "2") (inst "selectSK=List_footprint_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "4")))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "Class_invariant_axiom_for_LinkedList" (formula "7") (inst "i=i") (inst "j=j") (inst "i_0=i_0") (ifseqformula "8"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "eqSymm" (formula "13"))
                  (rule "eqSymm" (formula "14"))
                  (rule "eqSymm" (formula "12"))
                  (rule "eqSymm" (formula "11"))
                  (rule "eqSymm" (formula "10") (term "0,1,0,1,0,1,0"))
                  (rule "eqSymm" (formula "10") (term "1,1,0"))
                  (rule "eqSymm" (formula "10") (term "1,1,0,1,0,1,0"))
                  (rule "eqSymm" (formula "10") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "9"))
                  (rule "polySimp_elimSub" (formula "12") (term "1,0,2,0"))
                  (rule "mul_literals" (formula "12") (term "1,1,0,2,0"))
                  (rule "polySimp_elimSub" (formula "10") (term "1,0,0,1,1,0"))
                  (rule "mul_literals" (formula "10") (term "1,1,0,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "10") (term "1,0,2,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,0,2,0"))
                  (rule "polySimp_addComm0" (formula "10") (term "1,0,0,1,1,0"))
                  (rule "castedGetAny" (formula "10") (term "0,0,0,0,0,1,0"))
                  (rule "subsetSingletonLeft" (formula "7"))
                  (rule "subsetSingletonLeft" (formula "8"))
                  (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "8"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "16") (term "2") (ifseqformula "1"))
                  (rule "close" (formula "16") (ifseqformula "8"))
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "8"))
               (rule "eqSymm" (formula "8"))
               (rule "castedGetAny" (formula "8") (term "0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,0"))
               (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,0"))
               (rule "pullOutSelect" (formula "8") (term "1") (inst "selectSK=List_footprint_0"))
               (rule "simplifySelectOfAnon" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "4")))
               (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "ifthenelse_negated" (formula "1") (term "0"))
               (rule "pullOutSelect" (formula "9") (term "0,0,1,0,1,0") (inst "selectSK=LinkedList_nodeseq_0"))
               (rule "simplifySelectOfAnon" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")) (ifInst ""  (formula "5")))
               (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "ifthenelse_negated" (formula "1") (term "0"))
               (rule "pullOutSelect" (formula "10") (term "1,1,1,0,0,1,0") (inst "selectSK=LinkedList_size_0"))
               (rule "simplifySelectOfAnon" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "6")))
               (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "ifthenelse_negated" (formula "1") (term "0"))
               (rule "Class_invariant_axiom_for_LinkedList" (formula "9") (inst "i=i") (inst "j=j") (inst "i_0=i_0") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "eqSymm" (formula "15"))
               (rule "eqSymm" (formula "16"))
               (rule "eqSymm" (formula "14"))
               (rule "eqSymm" (formula "13"))
               (rule "eqSymm" (formula "12") (term "1,1,0,1,0,1,0"))
               (rule "eqSymm" (formula "12") (term "0,1,0,1,0,1,0"))
               (rule "eqSymm" (formula "12") (term "1,1,0"))
               (rule "eqSymm" (formula "12") (term "1,0,0,1,0"))
               (rule "eqSymm" (formula "11"))
               (rule "polySimp_elimSub" (formula "14") (term "1,0,2,0"))
               (rule "mul_literals" (formula "14") (term "1,1,0,2,0"))
               (rule "polySimp_elimSub" (formula "12") (term "1,0,0,1,1,0"))
               (rule "mul_literals" (formula "12") (term "1,1,0,0,1,1,0"))
               (rule "polySimp_addComm0" (formula "12") (term "1,0,2,0,1,1,0"))
               (rule "polySimp_addComm0" (formula "14") (term "1,0,2,0"))
               (rule "polySimp_addComm0" (formula "12") (term "1,0,0,1,1,0"))
               (rule "castedGetAny" (formula "12") (term "0,0,0,0,0,1,0"))
               (rule "subsetSingletonLeft" (formula "10"))
               (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "applyEqReverse" (formula "18") (term "1") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "subsetSingletonLeft" (formula "8"))
               (rule "castedGetAny" (formula "12") (term "2,0"))
               (rule "castedGetAny" (formula "11") (term "1,0,1,0,1,0,1,0"))
               (rule "castedGetAny" (formula "11") (term "0,0,1,0,1,0,1,0"))
               (rule "castedGetAny" (formula "11") (term "1,1,1,1,0"))
               (rule "castedGetAny" (formula "11") (term "1,1,1,0,0,1,0"))
               (rule "castedGetAny" (formula "11") (term "0,1,0,0,1,0"))
               (rule "eqSymm" (formula "11") (term "1,0,0,1,0"))
               (rule "castedGetAny" (formula "10") (term "0,1,0,1,0"))
               (rule "castedGetAny" (formula "11") (term "2,0,1,1,0"))
               (rule "castedGetAny" (formula "13") (term "2,0"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0,1,0"))
               (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
               (rule "elementOfUnionEQ" (formula "9") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "elementOfUnionEQ" (formula "8") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "elementOfUnionEQ" (formula "1") (term "0,0") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "15") (term "1,1,1,0,0,1,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "elementOfUnionEQ" (formula "1") (term "0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "14") (term "0,0,1,0,1,0") (ifseqformula "1"))
               (rule "close" (formula "14") (ifseqformula "7"))
            )
         )
         (branch "Case 2"
            (rule "allRight" (formula "8") (inst "sk=i_0") (userinteraction))
            (rule "impRight" (formula "8") (userinteraction))
            (rule "andRight" (formula "9") (userinteraction))
            (branch "Case 1"
               (rule "andRight" (formula "9"))
               (branch "Case 1"
                  (rule "andRight" (formula "9"))
                  (branch "Case 1"
                     (rule "notRight" (formula "9"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "castedGetAny" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "2"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "pullOutSelect" (formula "1") (term "0,0") (inst "selectSK=LinkedList_nodeseq_0"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")) (ifInst ""  (formula "7")))
                     (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=LinkedList_size_0"))
                     (rule "simplifySelectOfAnon" (formula "4"))
                      (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "12")) (ifInst ""  (formula "8")))
                     (rule "inEqSimp_homoInEq1" (formula "5"))
                     (rule "polySimp_addComm1" (formula "5") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1"))
                     (rule "polySimp_rightDist" (formula "5") (term "1"))
                     (rule "mul_literals" (formula "5") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                     (rule "elementOfSetMinus" (formula "4") (term "0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "ifthenelse_negated" (formula "4") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "5"))
                     (rule "mul_literals" (formula "3") (term "0,0"))
                     (rule "add_zero_left" (formula "3") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "mul_literals" (formula "3") (term "1"))
                     (rule "Class_invariant_axiom_for_LinkedList" (formula "12") (inst "i=i") (inst "j=j") (inst "i_0=i_0") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "andLeft" (formula "13"))
                     (rule "andLeft" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "eqSymm" (formula "18"))
                     (rule "eqSymm" (formula "19"))
                     (rule "eqSymm" (formula "17"))
                     (rule "eqSymm" (formula "16"))
                     (rule "eqSymm" (formula "15") (term "1,1,0"))
                     (rule "eqSymm" (formula "15") (term "0,1,0,1,0,1,0"))
                     (rule "eqSymm" (formula "15") (term "1,1,0,1,0,1,0"))
                     (rule "eqSymm" (formula "15") (term "1,0,0,1,0"))
                     (rule "eqSymm" (formula "14"))
                     (rule "polySimp_elimSub" (formula "17") (term "1,0,2,0"))
                     (rule "mul_literals" (formula "17") (term "1,1,0,2,0"))
                     (rule "polySimp_elimSub" (formula "15") (term "1,0,0,1,1,0"))
                     (rule "mul_literals" (formula "15") (term "1,1,0,0,1,1,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "1,0,2,0,1,1,0"))
                     (rule "polySimp_addComm0" (formula "17") (term "1,0,2,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "1,0,0,1,1,0"))
                     (rule "castedGetAny" (formula "15") (term "0,0,0,0,0,1,0"))
                     (rule "subsetSingletonLeft" (formula "13"))
                     (rule "subsetSingletonLeft" (formula "12"))
                     (rule "castedGetAny" (formula "16") (term "2,0"))
                     (rule "castedGetAny" (formula "15") (term "1,1,1,1,0"))
                     (rule "castedGetAny" (formula "15") (term "1,0,1,0,1,0,1,0"))
                     (rule "castedGetAny" (formula "15") (term "0,0,1,0,1,0,1,0"))
                     (rule "castedGetAny" (formula "15") (term "0,1,0,0,1,0"))
                     (rule "eqSymm" (formula "15") (term "1,0,0,1,0"))
                     (rule "castedGetAny" (formula "14") (term "0,1,0,1,0"))
                     (rule "castedGetAny" (formula "15") (term "2,0,1,1,0"))
                     (rule "castedGetAny" (formula "17") (term "2,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                     (rule "castedGetAny" (formula "15") (term "1,0,1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0"))
                     (rule "elementOfUnionEQ" (formula "12") (ifseqformula "14"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "elementOfUnionEQ" (formula "12") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "elementOfUnionEQ" (formula "1") (term "0,0") (ifseqformula "12"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "elementOfUnionEQ" (formula "4") (term "0,0") (ifseqformula "11"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "4"))
                     (rule "applyEqReverse" (formula "5") (term "1,1") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "inEqSimp_homoInEq0" (formula "4"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1"))
                     (rule "polySimp_rightDist" (formula "4") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                     (rule "mul_literals" (formula "4") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                     (rule "inEqSimp_contradEq7" (formula "13") (term "0,0") (ifseqformula "2"))
                     (rule "mul_literals" (formula "13") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                     (rule "leq_literals" (formula "13") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "inEqSimp_contradEq7" (formula "12") (term "0,0") (ifseqformula "2"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0,0,0"))
                     (rule "leq_literals" (formula "12") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "nnf_imp2or" (formula "11") (term "0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                     (rule "nnf_imp2or" (formula "11") (term "0,1,0,1,0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0,1,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,0,1,0"))
                     (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0,1,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1,0,1,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,1,0"))
                     (rule "nnf_imp2or" (formula "11") (term "1,0,1,0,1,0"))
                     (rule "shift_paren_or" (formula "11") (term "0,1,0,1,0"))
                     (rule "commute_or_2" (formula "11") (term "0,0,1,0,1,0"))
                     (rule "ifthenelse_to_or_left" (formula "11") (term "1,1,0"))
                     (rule "eqSymm" (formula "11") (term "1,0,1,1,0"))
                     (rule "eqSymm" (formula "11") (term "1,1,1,1,0"))
                     (rule "commute_or" (formula "11") (term "0,1,1,0"))
                     (rule "commute_or" (formula "11") (term "1,1,1,0"))
                     (rule "commute_or" (formula "11") (term "0,0,0,1,0,1,0"))
                     (rule "lenNonNegative" (formula "14") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "14"))
                     (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
                     (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "2"))
                     (rule "leq_literals" (formula "14") (term "0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "lenNonNegative" (formula "15") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "15"))
                     (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                     (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "2"))
                     (rule "leq_literals" (formula "15") (term "0"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "all_pull_out1" (formula "11") (term "0,1,0"))
                     (rule "all_pull_out0" (formula "11") (term "1,0"))
                     (rule "shift_paren_and" (formula "11") (term "0,1,0"))
                     (rule "all_pull_out3" (formula "11") (term "0"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0"))
                     (rule "distr_forallAnd" (formula "11") (term "0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "distr_forallAnd" (formula "11"))
                     (rule "andLeft" (formula "11"))
                     (rule "shift_paren_or" (formula "12") (term "0"))
                     (rule "commute_or_2" (formula "12") (term "0,0"))
                     (rule "inEqSimp_or_weaken3" (formula "12") (term "0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "1,0,1,0"))
                     (rule "add_literals" (formula "12") (term "0,1,0,1,0"))
                     (rule "add_zero_left" (formula "12") (term "1,0,1,0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0"))
                     (rule "distr_forallAnd" (formula "11") (term "0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "distr_forallAnd" (formula "11"))
                     (rule "andLeft" (formula "11"))
                     (rule "commute_or_2" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "inEqSimp_homoInEq0" (formula "12") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1"))
                     (rule "add_literals" (formula "12") (term "0,0,0,1"))
                     (rule "add_zero_left" (formula "12") (term "0,0,1"))
                     (rule "inEqSimp_homoInEq1" (formula "12") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,1,1"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,1,1"))
                     (rule "polySimp_addComm0" (formula "12") (term "0,0,1,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,1"))
                     (rule "add_literals" (formula "12") (term "1,1,0,1,1"))
                     (rule "times_zero_1" (formula "12") (term "1,0,1,1"))
                     (rule "add_zero_right" (formula "12") (term "0,1,1"))
                     (rule "leq_literals" (formula "12") (term "1,1"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "applyEq" (formula "12") (term "1,0,0") (ifseqformula "15"))
                     (rule "inEqSimp_invertInEq1" (formula "12") (term "1"))
                     (rule "times_zero_2" (formula "12") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,1"))
                     (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "12") (term "0,1"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0"))
                     (rule "distr_forallAnd" (formula "11") (term "0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "distr_forallAnd" (formula "11"))
                     (rule "andLeft" (formula "11"))
                     (rule "commute_or_2" (formula "12") (term "0,0"))
                     (rule "commute_or_2" (formula "12") (term "0,0,0"))
                     (rule "cnf_rightDist" (formula "11") (term "0"))
                     (rule "distr_forallAnd" (formula "11"))
                     (rule "andLeft" (formula "11"))
                     (rule "commute_or_2" (formula "11") (term "0"))
                     (rule "commute_or" (formula "12") (term "0"))
                     (rule "commute_or" (formula "11") (term "0,0"))
                     (rule "commute_or_2" (formula "13") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "13") (term "0,0,0,0,0"))
                     (rule "seqGetAlphaCast" (formula "1") (term "0"))
                     (rule "castedGetAny" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "seqGetAlphaCast" (formula "17") (term "0"))
                     (rule "castedGetAny" (formula "17") (term "0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "seqGetAlphaCast" (formula "16") (term "0"))
                     (rule "castedGetAny" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "allLeft" (formula "11") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "11") (term "0,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "11") (term "0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "4"))
                     (rule "andLeft" (formula "11"))
                     (rule "inEqSimp_homoInEq1" (formula "11"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                     (rule "add_literals" (formula "11") (term "1,1,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0"))
                     (rule "add_literals" (formula "11") (term "0"))
                     (rule "leq_literals" (formula "11"))
                     (rule "closeFalse" (formula "11"))
                  )
                  (branch "Case 2"
                     (rule "Class_invariant_axiom_for_LinkedList" (formula "7") (inst "i=i") (inst "j=j") (inst "i_0=i_0") (ifseqformula "8") (userinteraction))
                     (rule "andLeft" (formula "7"))
                     (rule "andLeft" (formula "7"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "7"))
                     (rule "andLeft" (formula "7"))
                     (rule "andLeft" (formula "7"))
                     (rule "andLeft" (formula "7"))
                     (rule "eqTermCut" (formula "16") (term "0,0,1") (inst "s=Seq::select(heap, self, List::$seq)") (userinteraction))
                     (branch "Assume self.seq@heap[anon(allLocs setMinus self.footprint, anon_heap<<anonHeapFunction>>)] = self.seq"
                        (rule "applyEq" (formula "17") (term "0,0,1") (ifseqformula "1") (userinteraction))
                        (rule "eqTermCut" (formula "17") (term "0,0,1,0") (inst "s=Seq::select(heap, self, LinkedList::$nodeseq)") (userinteraction))
                        (branch "Assume self.nodeseq@heap[anon(allLocs setMinus self.footprint, anon_heap<<anonHeapFunction>>)] = self.nodeseq"
                           (rule "applyEq" (formula "18") (term "0,0,1,0") (ifseqformula "1") (userinteraction))
                           (rule "instAll" (formula "18") (term "1,0,1,0") (ifseqformula "12") (userinteraction))
                           (rule "eqTermCut" (formula "19") (term "0") (inst "s=int::select(heap,
            (Node)(any::seqGet(Seq::select(heap,
                                           self,
                                           LinkedList::$nodeseq),
                               i_0)),
            Node::$data)") (userinteraction))
                           (branch "Assume (Node)(self.nodeseq[i_0]).data@heap[anon( allLocs setMinus self.footprint, anon_heap<<anonHeapFunction>>)] = (Node)(self.nodeseq[i_0]).data"
                               (builtin "One Step Simplification" (formula "14"))
                               (builtin "One Step Simplification" (formula "13"))
                               (builtin "One Step Simplification" (formula "5"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "andLeft" (formula "5"))
                              (rule "eqSymm" (formula "18"))
                              (rule "eqSymm" (formula "19"))
                              (rule "eqSymm" (formula "16"))
                              (rule "eqSymm" (formula "17"))
                              (rule "eqSymm" (formula "21"))
                              (rule "eqSymm" (formula "15") (term "1,1,0"))
                              (rule "eqSymm" (formula "15") (term "0,1,0,1,0,1,0"))
                              (rule "eqSymm" (formula "15") (term "1,1,0,1,0,1,0"))
                              (rule "eqSymm" (formula "15") (term "1,0,0,1,0"))
                              (rule "eqSymm" (formula "14"))
                              (rule "eqSymm" (formula "2") (term "0,1,1,1"))
                              (rule "eqSymm" (formula "2") (term "0,1,0,1,0,1"))
                              (rule "eqSymm" (formula "2") (term "1,1,0,1,0,1"))
                              (rule "eqSymm" (formula "2") (term "1,0,0,1"))
                              (rule "eqSymm" (formula "2") (term "1,1"))
                              (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "polySimp_elimSub" (formula "17") (term "1,0,2,0"))
                              (rule "mul_literals" (formula "17") (term "1,1,0,2,0"))
                              (rule "polySimp_elimSub" (formula "15") (term "1,0,0,1,1,0"))
                              (rule "mul_literals" (formula "15") (term "1,1,0,0,1,1,0"))
                              (rule "polySimp_elimSub" (formula "2") (term "0,0,0,1,1"))
                              (rule "mul_literals" (formula "2") (term "1,0,0,0,1,1"))
                              (rule "polySimp_homoEq" (formula "2") (term "0,0,1,1"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,1"))
                              (rule "polySimp_addComm0" (formula "15") (term "1,0,2,0,1,1,0"))
                              (rule "polySimp_addComm0" (formula "2") (term "1,0,2,0,1,1"))
                              (rule "polySimp_addComm0" (formula "17") (term "1,0,2,0"))
                              (rule "polySimp_addComm0" (formula "15") (term "1,0,0,1,1,0"))
                              (rule "polySimp_addComm0" (formula "2") (term "1,1,0,0,0,1,1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,1"))
                              (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,1"))
                              (rule "castedGetAny" (formula "1") (term "1,1"))
                              (rule "subsetSingletonLeft" (formula "12"))
                              (rule "subsetSingletonLeft" (formula "13"))
                              (rule "castedGetAny" (formula "1") (term "1,0"))
                              (rule "castedGetAny" (formula "15") (term "0,0,0,0,0,1,0"))
                              (rule "castedGetAny" (formula "16") (term "2,0"))
                              (rule "castedGetAny" (formula "21") (term "0"))
                              (rule "eqSymm" (formula "21"))
                              (rule "castedGetAny" (formula "15") (term "1,1,1,1,0"))
                              (rule "castedGetAny" (formula "15") (term "1,0,1,0,1,0,1,0"))
                              (rule "castedGetAny" (formula "15") (term "0,0,1,0,1,0,1,0"))
                              (rule "castedGetAny" (formula "15") (term "0,1,0,0,1,0"))
                              (rule "eqSymm" (formula "15") (term "1,0,0,1,0"))
                              (rule "castedGetAny" (formula "14") (term "0,1,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,1,0"))
                              (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,1"))
                              (rule "castedGetAny" (formula "2") (term "1,1,1,0,0,1"))
                              (rule "castedGetAny" (formula "2") (term "1,1,1,1"))
                              (rule "castedGetAny" (formula "2") (term "0,0,1,0,1,0,1"))
                              (rule "castedGetAny" (formula "2") (term "1,0,1,0,1,0,1"))
                              (rule "castedGetAny" (formula "2") (term "0,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "6"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "6") (term "0"))
                              (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,1"))
                              (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0,1,1"))
                              (rule "castedGetAny" (formula "15") (term "2,0,1,1,0"))
                              (rule "castedGetAny" (formula "2") (term "2,0,1,1"))
                              (rule "castedGetAny" (formula "17") (term "2,0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2") (term "0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,1,0,1"))
                              (rule "castedGetAny" (formula "21") (term "1,0"))
                              (rule "castedGetAny" (formula "15") (term "1,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "5"))
                              (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0,1"))
                              (rule "polySimp_sepNegMonomial" (formula "2") (term "0,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                              (rule "polySimp_elimOne" (formula "6") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0,1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0,1"))
                              (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0,1"))
                              (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=List_seq_0"))
                              (rule "simplifySelectOfAnon" (formula "4"))
                               (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "21")) (ifInst ""  (formula "10")))
                              (rule "eqSymm" (formula "5"))
                              (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=LinkedList_nodeseq_0"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "21")) (ifInst ""  (formula "10")))
                              (rule "eqSymm" (formula "4"))
                              (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "elementOfUnionEQ" (formula "13") (ifseqformula "14"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "elementOfUnionEQ" (formula "12") (ifseqformula "13"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "elementOfSetMinus" (formula "4") (term "0,0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "elementOfUnionEQ" (formula "3") (term "0") (ifseqformula "12"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "true_left" (formula "3"))
                              (rule "elementOfUnionEQ" (formula "3") (term "0") (ifseqformula "11"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "true_left" (formula "3"))
                              (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=Node_data_0"))
                              (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnon" (formula "1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "eqSymm" (formula "2"))
                              (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "eqSymm" (formula "17"))
                              (rule "replace_known_right" (formula "2") (term "1,0,0,1") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "inEqSimp_geqRight" (formula "15"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "elementOfSetMinus" (formula "2") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "elementOfUnionEQ" (formula "2") (term "0,0,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "elementOfInfiniteUnion" (formula "2") (term "1,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "eqSymm" (formula "2") (term "1,0,1,0,0,0,0"))
                              (rule "sortsDisjointModuloNull" (formula "2") (term "0,0,0,0,0"))
                              (rule "replace_known_right" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "16"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=LinkedList_size_0"))
                              (rule "simplifySelectOfAnon" (formula "4"))
                               (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "17")) (ifInst ""  (formula "8")))
                              (rule "inEqSimp_homoInEq1" (formula "5"))
                              (rule "polySimp_addComm1" (formula "5") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1"))
                              (rule "polySimp_rightDist" (formula "5") (term "1"))
                              (rule "mul_literals" (formula "5") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                              (rule "elementOfSetMinus" (formula "4") (term "0,0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "ifthenelse_negated" (formula "4") (term "0"))
                              (rule "elementOfUnionEQ" (formula "4") (term "0,0") (ifseqformula "11"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "applyEqReverse" (formula "5") (term "1,1") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "inEqSimp_homoInEq0" (formula "4"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
                              (rule "andLeft" (formula "4"))
                              (rule "inEqSimp_homoInEq1" (formula "4"))
                              (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                              (rule "add_literals" (formula "4") (term "1,1,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0"))
                              (rule "add_zero_right" (formula "4") (term "0"))
                              (rule "leq_literals" (formula "4"))
                              (rule "closeFalse" (formula "4"))
                           )
                           (branch "Assume (Node)(self.nodeseq[i_0]).data@heap[anon( allLocs setMinus self.footprint, anon_heap<<anonHeapFunction>>)] != (Node)(self.nodeseq[i_0]).data"
                              (rule "notLeft" (formula "1") (userinteraction))
                              (rule "selectOfAnon" (formula "18") (term "0") (userinteraction))
                              (rule "ifthenelse_split" (formula "18") (term "0") (userinteraction))
                              (branch " ((Node)(self.nodeseq[i_0]), Node::$data) in allLocs setMinus self.footprint & !Node::$data = java.lang.Object::<created> | ((Node)(self.nodeseq[i_0]), Node::$data) in freshLocs(heap) TRUE"
                                 (rule "orLeft" (formula "1") (userinteraction))
                                 (branch " ((Node)(self.nodeseq[i_0]), Node::$data) in allLocs setMinus self.footprint & !Node::$data = java.lang.Object::<created>"
                                     (builtin "One Step Simplification" (formula "14"))
                                     (builtin "One Step Simplification" (formula "13"))
                                     (builtin "One Step Simplification" (formula "5"))
                                     (builtin "One Step Simplification" (formula "2"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "andLeft" (formula "5"))
                                    (rule "eqSymm" (formula "16"))
                                    (rule "eqSymm" (formula "17"))
                                    (rule "eqSymm" (formula "18"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "eqSymm" (formula "19"))
                                    (rule "eqSymm" (formula "15") (term "1,1,0"))
                                    (rule "eqSymm" (formula "15") (term "1,1,0,1,0,1,0"))
                                    (rule "eqSymm" (formula "15") (term "1,0,0,1,0"))
                                    (rule "eqSymm" (formula "15") (term "0,1,0,1,0,1,0"))
                                    (rule "eqSymm" (formula "14"))
                                    (rule "eqSymm" (formula "2") (term "1,0,0,1"))
                                    (rule "eqSymm" (formula "2") (term "1,1"))
                                    (rule "eqSymm" (formula "2") (term "1,1,0,1,0,1"))
                                    (rule "eqSymm" (formula "2") (term "0,1,0,1,0,1"))
                                    (rule "eqSymm" (formula "2") (term "0,0,1,1"))
                                    (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "polySimp_elimSub" (formula "17") (term "1,0,2,0"))
                                    (rule "mul_literals" (formula "17") (term "1,1,0,2,0"))
                                    (rule "polySimp_elimSub" (formula "15") (term "1,0,0,1,1,0"))
                                    (rule "mul_literals" (formula "15") (term "1,1,0,0,1,1,0"))
                                    (rule "polySimp_elimSub" (formula "2") (term "0,0,0,1,1"))
                                    (rule "mul_literals" (formula "2") (term "1,0,0,0,1,1"))
                                    (rule "polySimp_homoEq" (formula "2") (term "0,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,1"))
                                    (rule "polySimp_addComm0" (formula "15") (term "1,0,2,0,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "2") (term "1,0,2,0,1,1"))
                                    (rule "polySimp_addComm0" (formula "17") (term "1,0,2,0"))
                                    (rule "polySimp_addComm0" (formula "15") (term "1,0,0,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "2") (term "1,1,0,0,0,1,1"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,1"))
                                    (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,1"))
                                    (rule "castedGetAny" (formula "20") (term "1,1"))
                                    (rule "subsetSingletonLeft" (formula "13"))
                                    (rule "subsetSingletonLeft" (formula "12"))
                                    (rule "castedGetAny" (formula "20") (term "1,0"))
                                    (rule "castedGetAny" (formula "15") (term "0,0,0,0,0,1,0"))
                                    (rule "castedGetAny" (formula "1") (term "0"))
                                    (rule "castedGetAny" (formula "16") (term "2,0"))
                                    (rule "castedGetAny" (formula "22") (term "1,1"))
                                    (rule "castedGetAny" (formula "22") (term "0"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "castedGetAny" (formula "15") (term "1,1,1,1,0"))
                                    (rule "castedGetAny" (formula "15") (term "0,1,0,0,1,0"))
                                    (rule "eqSymm" (formula "15") (term "1,0,0,1,0"))
                                    (rule "castedGetAny" (formula "15") (term "0,0,1,0,1,0,1,0"))
                                    (rule "castedGetAny" (formula "15") (term "1,0,1,0,1,0,1,0"))
                                    (rule "castedGetAny" (formula "14") (term "0,1,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,1,0"))
                                    (rule "castedGetAny" (formula "2") (term "1,0,1,0,1,0,1"))
                                    (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,1"))
                                    (rule "castedGetAny" (formula "2") (term "1,1,1,0,0,1"))
                                    (rule "castedGetAny" (formula "2") (term "1,1,1,1"))
                                    (rule "castedGetAny" (formula "2") (term "0,0,1,0,1,0,1"))
                                    (rule "castedGetAny" (formula "2") (term "0,1,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "6"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "6") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,1"))
                                    (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0,1,1"))
                                    (rule "castedGetAny" (formula "15") (term "2,0,1,1,0"))
                                    (rule "castedGetAny" (formula "2") (term "2,0,1,1"))
                                    (rule "castedGetAny" (formula "17") (term "2,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "2") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,1,0,1"))
                                    (rule "castedGetAny" (formula "15") (term "1,0,1,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "5"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0,1"))
                                    (rule "polySimp_sepNegMonomial" (formula "2") (term "0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0,1,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                    (rule "polySimp_elimOne" (formula "6") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0,1"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0,1"))
                                    (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0,1"))
                                    (rule "elementOfSetMinus" (formula "1"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=List_seq_0"))
                                    (rule "simplifySelectOfAnon" (formula "3"))
                                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "22")) (ifInst ""  (formula "9")))
                                    (rule "eqSymm" (formula "4"))
                                    (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=LinkedList_nodeseq_0"))
                                    (rule "simplifySelectOfAnon" (formula "2"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "22")) (ifInst ""  (formula "9")))
                                    (rule "eqSymm" (formula "3"))
                                    (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "elementOfUnionEQ" (formula "12") (ifseqformula "13"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "elementOfUnionEQ" (formula "11") (ifseqformula "12"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "true_left" (formula "11"))
                                    (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "elementOfUnionEQ" (formula "17") (ifseqformula "11"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "orRight" (formula "17"))
                                    (rule "sortsDisjointModuloNull" (formula "17"))
                                    (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "20"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "false_right" (formula "17"))
                                    (rule "elementOfInfiniteUnion" (formula "17"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "eqSymm" (formula "17") (term "1,0"))
                                    (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=Node_data_0"))
                                    (rule "simplifySelectOfAnon" (formula "1"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "eqSymm" (formula "21"))
                                    (rule "elementOfUnionEQ" (formula "3") (term "0") (ifseqformula "12"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "elementOfUnionEQ" (formula "3") (term "0") (ifseqformula "11"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfUnionEQ" (formula "1") (term "0,0,0,0") (ifseqformula "10"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfInfiniteUnion" (formula "1") (term "1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "eqSymm" (formula "1") (term "1,0,1,0,0,0,0"))
                                    (rule "replace_known_right" (formula "1") (term "1,0,0,0,0") (ifseqformula "16"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0,0"))
                                    (rule "replace_known_right" (formula "1") (term "1,0,0,0,0") (ifseqformula "18"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "19") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=LinkedList_size_0"))
                                    (rule "simplifySelectOfAnon" (formula "3"))
                                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "18")) (ifInst ""  (formula "7")))
                                    (rule "inEqSimp_homoInEq1" (formula "4"))
                                    (rule "polySimp_addComm1" (formula "4") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                    (rule "mul_literals" (formula "4") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                                    (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "ifthenelse_negated" (formula "3") (term "0"))
                                    (rule "elementOfUnionEQ" (formula "3") (term "0,0") (ifseqformula "10"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "inEqSimp_homoInEq0" (formula "3"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                    (rule "mul_literals" (formula "3") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                    (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "21"))
                                    (rule "nnf_ex2all" (formula "18"))
                                    (rule "nnf_imp2or" (formula "13") (term "0"))
                                    (rule "nnf_imp2or" (formula "3") (term "0"))
                                    (rule "nnf_notAnd" (formula "1") (term "0"))
                                    (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                    (rule "nnf_imp2or" (formula "3") (term "1,0"))
                                    (rule "nnf_notAnd" (formula "3") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "3") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "3") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0"))
                                    (rule "mul_literals" (formula "3") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                    (rule "nnf_imp2or" (formula "13") (term "0,1,0,1,0"))
                                    (rule "nnf_notAnd" (formula "13") (term "0,0,1,0,1,0"))
                                    (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,1,0,1,0"))
                                    (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,1,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,1,0"))
                                    (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0,1,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,0,1,0"))
                                    (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0,1,0"))
                                    (rule "nnf_imp2or" (formula "13") (term "1,0,1,0,1,0"))
                                    (rule "commute_or_2" (formula "3") (term "0"))
                                    (rule "commute_or_2" (formula "1") (term "0"))
                                    (rule "ifthenelse_split" (formula "14") (term "0"))
                                    (branch "self.size = 0 TRUE"
                                       (rule "eqSymm" (formula "15"))
                                       (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "14"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "eqSymm" (formula "16"))
                                       (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "14"))
                                       (rule "applyEq" (formula "6") (term "0") (ifseqformula "14"))
                                       (rule "inEqSimp_homoInEq1" (formula "6"))
                                       (rule "mul_literals" (formula "6") (term "1,0"))
                                       (rule "add_zero_right" (formula "6") (term "0"))
                                       (rule "applyEq" (formula "12") (term "1,1,1,0,0,1,0") (ifseqformula "14"))
                                       (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0"))
                                       (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "14"))
                                       (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "14"))
                                       (rule "polySimp_homoEq" (formula "4") (term "0,0"))
                                       (rule "times_zero_2" (formula "4") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "4") (term "0,0,0"))
                                       (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "14"))
                                       (rule "applyEq" (formula "13") (term "1,1,0,0,1,0,1,0") (ifseqformula "14"))
                                       (rule "applyEq" (formula "13") (term "1,1,0,0,1,1,0") (ifseqformula "14"))
                                       (rule "add_zero_right" (formula "13") (term "1,0,0,1,1,0"))
                                       (rule "applyEq" (formula "18") (term "1") (ifseqformula "14"))
                                       (rule "applyEq" (formula "17") (term "1") (ifseqformula "14"))
                                       (rule "polySimp_sepPosMonomial" (formula "4") (term "0,0"))
                                       (rule "mul_literals" (formula "4") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                       (rule "mul_literals" (formula "6") (term "1"))
                                       (rule "inEqSimp_contradEq7" (formula "4") (term "0,0") (ifseqformula "5"))
                                       (rule "add_zero_left" (formula "4") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "4") (term "0,0,0,0"))
                                       (rule "leq_literals" (formula "4") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "eqSymm" (formula "4"))
                                       (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "5") (term "0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "closeFalse" (formula "5"))
                                    )
                                    (branch "self.size = 0 FALSE"
                                       (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "18"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "commute_or" (formula "1") (term "0,0"))
                                       (rule "shift_paren_or" (formula "3") (term "0,0"))
                                       (rule "commute_or" (formula "3") (term "0,0,0"))
                                       (rule "lenNonNegative" (formula "16") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "16"))
                                       (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                                       (rule "inEqSimp_strengthen1" (formula "16") (ifseqformula "19"))
                                       (rule "add_zero_right" (formula "16") (term "1"))
                                       (rule "inEqSimp_contradEq7" (formula "19") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "19") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "19") (term "0,0"))
                                       (rule "leq_literals" (formula "19") (term "0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "false_right" (formula "19"))
                                       (rule "lenNonNegative" (formula "18") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "18"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                       (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "16"))
                                       (rule "leq_literals" (formula "18") (term "0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "ifthenelse_to_or_left" (formula "13") (term "1,1,0"))
                                       (rule "eqSymm" (formula "13") (term "1,0,1,1,0"))
                                       (rule "eqSymm" (formula "13") (term "1,1,1,1,0"))
                                       (rule "commute_or" (formula "13") (term "0,1,1,0"))
                                       (rule "commute_or" (formula "13") (term "1,1,1,0"))
                                       (rule "seqGetAlphaCast" (formula "20") (term "1,1"))
                                       (rule "castedGetAny" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "shift_paren_or" (formula "13") (term "0,1,0,1,0"))
                                       (rule "commute_or_2" (formula "13") (term "0,0,1,0,1,0"))
                                       (rule "commute_or" (formula "13") (term "0,0,0,1,0,1,0"))
                                       (rule "ifthenelse_split" (formula "4") (term "0"))
                                       (branch "self.size = 1 + i_0 TRUE"
                                          (rule "eqSymm" (formula "5"))
                                          (rule "applyEq" (formula "7") (term "0") (ifseqformula "4"))
                                          (rule "inEqSimp_homoInEq1" (formula "7"))
                                          (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                                          (rule "add_literals" (formula "7") (term "1,0"))
                                          (rule "times_zero_1" (formula "7") (term "0"))
                                          (rule "leq_literals" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "applyEq" (formula "13") (term "1,1,0,0,1,0,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "16") (term "0") (ifseqformula "4"))
                                          (rule "inEqSimp_homoInEq1" (formula "16"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "16") (term "0"))
                                          (rule "add_literals" (formula "16") (term "0,0"))
                                          (rule "add_zero_left" (formula "16") (term "0"))
                                          (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "12") (term "1,1,1,0,0,1,0") (ifseqformula "4"))
                                          (rule "polySimp_addAssoc" (formula "12") (term "1,1,0,0,1,0"))
                                          (rule "add_literals" (formula "12") (term "0,1,1,0,0,1,0"))
                                          (rule "add_zero_left" (formula "12") (term "1,1,0,0,1,0"))
                                          (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "4"))
                                          (rule "polySimp_addAssoc" (formula "15") (term "1,0"))
                                          (rule "add_literals" (formula "15") (term "0,1,0"))
                                          (rule "add_zero_left" (formula "15") (term "1,0"))
                                          (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "15"))
                                          (rule "applyEq" (formula "20") (term "1,1") (ifseqformula "15"))
                                          (rule "applyEq" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "15"))
                                          (rule "applyEq" (formula "1") (term "1,0,0,0,0") (ifseqformula "15"))
                                          (rule "applyEq" (formula "19") (term "0") (ifseqformula "15"))
                                          (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "15"))
                                          (rule "applyEq" (formula "20") (term "1,0") (ifseqformula "15"))
                                          (rule "applyEq" (formula "13") (term "1,1,1,1,1,1,0") (ifseqformula "4"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "1,1,1,1,1,0"))
                                          (rule "add_literals" (formula "13") (term "0,1,1,1,1,1,0"))
                                          (rule "add_zero_left" (formula "13") (term "1,1,1,1,1,0"))
                                          (rule "applyEq" (formula "17") (term "1") (ifseqformula "4"))
                                          (rule "applyEq" (formula "18") (term "1") (ifseqformula "4"))
                                          (rule "applyEq" (formula "13") (term "1,1,0,1,0,1,1,0") (ifseqformula "4"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "1,0,1,0,1,1,0"))
                                          (rule "add_literals" (formula "13") (term "0,1,0,1,0,1,1,0"))
                                          (rule "add_zero_left" (formula "13") (term "1,0,1,0,1,1,0"))
                                          (rule "inEqSimp_invertInEq0" (formula "16"))
                                          (rule "mul_literals" (formula "16") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "0"))
                                          (rule "inEqSimp_or_weaken3" (formula "3") (term "0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "all_pull_out1" (formula "13") (term "0,1,0"))
                                          (rule "seqGetAlphaCast" (formula "2") (term "0"))
                                          (rule "castedGetAny" (formula "2") (term "0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "all_pull_out0" (formula "13") (term "1,0"))
                                          (rule "shift_paren_and" (formula "13") (term "0,1,0"))
                                          (rule "allLeft" (formula "1") (inst "t=i_0"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "16"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,1"))
                                          (rule "add_literals" (formula "1") (term "1,1,0,1"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,1"))
                                          (rule "add_zero_right" (formula "1") (term "0,1"))
                                          (rule "leq_literals" (formula "1") (term "1"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "self.size = 1 + i_0 FALSE"
                                          (rule "eqSymm" (formula "4"))
                                          (rule "inEqSimp_strengthen1" (formula "6") (ifseqformula "19"))
                                          (rule "polySimp_addAssoc" (formula "6") (term "1"))
                                          (rule "add_literals" (formula "6") (term "0,1"))
                                          (rule "inEqSimp_contradEq7" (formula "19") (ifseqformula "6"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "19") (term "0,0,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0"))
                                          (rule "add_literals" (formula "19") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "19") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "19") (term "0,0"))
                                          (rule "leq_literals" (formula "19") (term "0"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "false_right" (formula "19"))
                                          (rule "allLeft" (formula "1") (inst "t=i_0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "7"))
                                          (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                                          (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                          (rule "leq_literals" (formula "1") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                                 (branch "((Node)(self.nodeseq[i_0]), Node::$data) in freshLocs(heap)"
                                     (builtin "One Step Simplification" (formula "1") (userinteraction))
                                    (rule "andLeft" (formula "1") (userinteraction))
                                    (rule "notLeft" (formula "1") (userinteraction))
                                    (rule "notLeft" (formula "1") (userinteraction))
                                    (rule "int_induction" (inst "b=(   lt(nv, int::select(heap, self, LinkedList::$size))<<origin(\"User_Interaction @ node 41230 (int_induction)\",\"[]\")>>
 -> (  boolean::select(heap,
                       (Node)(any::seqGet(Seq::select(heap,
                                                      self,
                                                      LinkedList::$nodeseq),
                                          nv)),
                       java.lang.Object::<created>)
     = TRUE)<<origin(\"User_Interaction @ node 41230 (int_induction)\",\"[]\")>>)<<origin(\"User_Interaction @ node 41230 (int_induction)\",\"[]\")>>") (inst "nv=nv") (userinteraction))
                                    (branch "Base Case"
                                        (builtin "One Step Simplification" (formula "13"))
                                        (builtin "One Step Simplification" (formula "12"))
                                        (builtin "One Step Simplification" (formula "4"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                                       (rule "impRight" (formula "18"))
                                       (rule "andLeft" (formula "5"))
                                       (rule "eqSymm" (formula "17"))
                                       (rule "eqSymm" (formula "16"))
                                       (rule "eqSymm" (formula "25"))
                                       (rule "eqSymm" (formula "19"))
                                       (rule "eqSymm" (formula "18"))
                                       (rule "eqSymm" (formula "15") (term "1,0,0,1,0"))
                                       (rule "eqSymm" (formula "15") (term "1,1,0"))
                                       (rule "eqSymm" (formula "15") (term "0,1,0,1,0,1,0"))
                                       (rule "eqSymm" (formula "15") (term "1,1,0,1,0,1,0"))
                                       (rule "eqSymm" (formula "14"))
                                       (rule "eqSymm" (formula "2") (term "0,1,0,1,0,1"))
                                       (rule "eqSymm" (formula "2") (term "1,1,0,1,0,1"))
                                       (rule "eqSymm" (formula "2") (term "1,1"))
                                       (rule "eqSymm" (formula "2") (term "0,0,1"))
                                       (rule "eqSymm" (formula "2") (term "0,0,1,1"))
                                       (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "5"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "polySimp_elimSub" (formula "17") (term "1,0,2,0"))
                                       (rule "mul_literals" (formula "17") (term "1,1,0,2,0"))
                                       (rule "polySimp_elimSub" (formula "15") (term "1,0,0,1,1,0"))
                                       (rule "mul_literals" (formula "15") (term "1,1,0,0,1,1,0"))
                                       (rule "polySimp_elimSub" (formula "2") (term "0,0,0,1,1"))
                                       (rule "mul_literals" (formula "2") (term "1,0,0,0,1,1"))
                                       (rule "polySimp_homoEq" (formula "2") (term "0,0,1,1"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,1"))
                                       (rule "polySimp_addComm0" (formula "15") (term "1,0,2,0,1,1,0"))
                                       (rule "polySimp_addComm0" (formula "2") (term "1,0,2,0,1,1"))
                                       (rule "polySimp_addComm0" (formula "17") (term "1,0,2,0"))
                                       (rule "polySimp_addComm0" (formula "15") (term "1,0,0,1,1,0"))
                                       (rule "polySimp_addComm0" (formula "2") (term "1,1,0,0,0,1,1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,1"))
                                       (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,1"))
                                       (rule "castedGetAny" (formula "23") (term "1,1"))
                                       (rule "castedGetAny" (formula "21") (term "1,0"))
                                       (rule "subsetSingletonLeft" (formula "13"))
                                       (rule "subsetSingletonLeft" (formula "12"))
                                       (rule "castedGetAny" (formula "23") (term "1,0"))
                                       (rule "castedGetAny" (formula "22") (term "0"))
                                       (rule "castedGetAny" (formula "15") (term "0,0,0,0,0,1,0"))
                                       (rule "castedGetAny" (formula "20") (term "1,0"))
                                       (rule "castedGetAny" (formula "16") (term "2,0"))
                                       (rule "castedGetAny" (formula "25") (term "0"))
                                       (rule "eqSymm" (formula "25"))
                                       (rule "castedGetAny" (formula "15") (term "0,1,0,0,1,0"))
                                       (rule "eqSymm" (formula "15") (term "1,0,0,1,0"))
                                       (rule "castedGetAny" (formula "15") (term "1,1,1,1,0"))
                                       (rule "castedGetAny" (formula "15") (term "0,0,1,0,1,0,1,0"))
                                       (rule "castedGetAny" (formula "15") (term "1,0,1,0,1,0,1,0"))
                                       (rule "castedGetAny" (formula "14") (term "0,1,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                       (rule "castedGetAny" (formula "2") (term "1,1,1,1"))
                                       (rule "castedGetAny" (formula "2") (term "0,0,1,0,1,0,1"))
                                       (rule "castedGetAny" (formula "2") (term "1,0,1,0,1,0,1"))
                                       (rule "castedGetAny" (formula "2") (term "0,0,0,1"))
                                       (rule "eqSymm" (formula "2") (term "0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "1"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "6"))
                                       (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "6") (term "0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,1"))
                                       (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0,1,1"))
                                       (rule "castedGetAny" (formula "15") (term "2,0,1,1,0"))
                                       (rule "castedGetAny" (formula "2") (term "2,0,1,1"))
                                       (rule "castedGetAny" (formula "17") (term "2,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "2") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,1,0,1"))
                                       (rule "castedGetAny" (formula "25") (term "1,0"))
                                       (rule "castedGetAny" (formula "15") (term "1,0,1,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                       (rule "castedGetAny" (formula "2") (term "1,0,0,0,1"))
                                       (rule "eqSymm" (formula "2") (term "0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "5"))
                                       (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0,1"))
                                       (rule "polySimp_sepNegMonomial" (formula "2") (term "0,0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                       (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                       (rule "polySimp_elimOne" (formula "6") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0,1"))
                                       (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0,1"))
                                       (rule "inEqSimp_contradEq7" (formula "17") (term "0,0") (ifseqformula "1"))
                                       (rule "times_zero_1" (formula "17") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
                                       (rule "leq_literals" (formula "17") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "inEqSimp_contradEq7" (formula "16") (term "0,0") (ifseqformula "1"))
                                       (rule "times_zero_1" (formula "16") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
                                       (rule "leq_literals" (formula "16") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "applyEq" (formula "20") (term "1,0") (ifseqformula "16"))
                                       (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=List_seq_0"))
                                       (rule "simplifySelectOfAnon" (formula "4"))
                                        (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "25")) (ifInst ""  (formula "10")))
                                       (rule "eqSymm" (formula "5"))
                                       (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "5"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "hideAuxiliaryEq" (formula "5"))
                                       (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=LinkedList_nodeseq_0"))
                                       (rule "simplifySelectOfAnon" (formula "3"))
                                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "25")) (ifInst ""  (formula "10")))
                                       (rule "eqSymm" (formula "4"))
                                       (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "elementOfUnionEQ" (formula "12") (ifseqformula "14"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "elementOfUnionEQ" (formula "12") (ifseqformula "13"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "elementOfSetMinus" (formula "4") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "elementOfUnionEQ" (formula "4") (term "0") (ifseqformula "12"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "elementOfUnionEQ" (formula "3") (term "0") (ifseqformula "11"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=Node_data_0"))
                                       (rule "simplifySelectOfAnon" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")) (ifInst ""  (formula "18")))
                                       (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "21"))
                                       (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=LinkedList_size_0"))
                                       (rule "simplifySelectOfAnon" (formula "4"))
                                        (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "21")) (ifInst ""  (formula "8")))
                                       (rule "inEqSimp_homoInEq1" (formula "5"))
                                       (rule "polySimp_addComm1" (formula "5") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1"))
                                       (rule "mul_literals" (formula "5") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                       (rule "elementOfSetMinus" (formula "4") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "ifthenelse_negated" (formula "4") (term "0"))
                                       (rule "elementOfUnionEQ" (formula "4") (term "0,0") (ifseqformula "11"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "applyEqReverse" (formula "5") (term "1,1") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "inEqSimp_homoInEq0" (formula "4"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                       (rule "polySimp_rightDist" (formula "4") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                       (rule "mul_literals" (formula "4") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                                       (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "applyEq" (formula "23") (term "0") (ifseqformula "2"))
                                       (rule "eqSymm" (formula "23"))
                                       (rule "nnf_imp2or" (formula "13") (term "1,0,1,0,1,0"))
                                       (rule "nnf_imp2or" (formula "3") (term "0"))
                                       (rule "nnf_imp2or" (formula "13") (term "0"))
                                       (rule "nnf_imp2or" (formula "3") (term "1,0"))
                                       (rule "nnf_notAnd" (formula "3") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0"))
                                       (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "3") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0"))
                                       (rule "mul_literals" (formula "3") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "3") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                       (rule "nnf_imp2or" (formula "13") (term "0,1,0,1,0"))
                                       (rule "nnf_notAnd" (formula "13") (term "0,0,1,0,1,0"))
                                       (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,1,0,1,0"))
                                       (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0,1,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,0,1,0"))
                                       (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0,1,0"))
                                       (rule "commute_or_2" (formula "3") (term "0"))
                                       (rule "shift_paren_or" (formula "3") (term "0,0"))
                                       (rule "commute_or" (formula "3") (term "0,0,0"))
                                       (rule "lenNonNegative" (formula "17") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "17"))
                                       (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                                       (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "17") (term "0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "lenNonNegative" (formula "16") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "16"))
                                       (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                                       (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "16") (term "0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "ifthenelse_to_or_left" (formula "13") (term "1,1,0"))
                                       (rule "eqSymm" (formula "13") (term "1,1,1,1,0"))
                                       (rule "eqSymm" (formula "13") (term "1,0,1,1,0"))
                                       (rule "commute_or" (formula "13") (term "1,1,1,0"))
                                       (rule "commute_or" (formula "13") (term "0,1,1,0"))
                                       (rule "shift_paren_or" (formula "13") (term "0,1,0,1,0"))
                                       (rule "seqGetAlphaCast" (formula "21") (term "1,1"))
                                       (rule "castedGetAny" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "commute_or_2" (formula "13") (term "0,0,1,0,1,0"))
                                       (rule "commute_or" (formula "13") (term "0,0,0,1,0,1,0"))
                                       (rule "ifthenelse_split" (formula "4") (term "0"))
                                       (branch "self.size = 1 + i_0 TRUE"
                                          (rule "eqSymm" (formula "5"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                                          (rule "inEqSimp_homoInEq1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "7") (term "0") (ifseqformula "4"))
                                          (rule "inEqSimp_homoInEq1" (formula "7"))
                                          (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                                          (rule "add_literals" (formula "7") (term "1,0"))
                                          (rule "times_zero_1" (formula "7") (term "0"))
                                          (rule "leq_literals" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "applyEq" (formula "13") (term "1,1,0,0,1,0,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "12") (term "1,1,1,0,0,1,0") (ifseqformula "4"))
                                          (rule "polySimp_addAssoc" (formula "12") (term "1,1,0,0,1,0"))
                                          (rule "add_literals" (formula "12") (term "0,1,1,0,0,1,0"))
                                          (rule "add_zero_left" (formula "12") (term "1,1,0,0,1,0"))
                                          (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "4"))
                                          (rule "polySimp_addAssoc" (formula "15") (term "1,0"))
                                          (rule "add_literals" (formula "15") (term "0,1,0"))
                                          (rule "add_zero_left" (formula "15") (term "1,0"))
                                          (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "15"))
                                          (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "15"))
                                          (rule "applyEq" (formula "19") (term "1,0") (ifseqformula "15"))
                                          (rule "applyEq" (formula "21") (term "1,1") (ifseqformula "15"))
                                          (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "15"))
                                          (rule "applyEq" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "15"))
                                          (rule "applyEq" (formula "20") (term "0") (ifseqformula "15"))
                                          (rule "referencedObjectIsCreatedRight" (formula "19") (ifseqformula "20"))
                                          (rule "close" (formula "19") (ifseqformula "7"))
                                       )
                                       (branch "self.size = 1 + i_0 FALSE"
                                          (rule "eqSymm" (formula "4"))
                                          (rule "inEqSimp_strengthen1" (formula "6") (ifseqformula "18"))
                                          (rule "polySimp_addAssoc" (formula "6") (term "1"))
                                          (rule "add_literals" (formula "6") (term "0,1"))
                                          (rule "inEqSimp_contradEq7" (formula "18") (ifseqformula "6"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "18") (term "0,0,0"))
                                          (rule "add_literals" (formula "18") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0"))
                                          (rule "add_literals" (formula "18") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "18") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "18") (term "0,0"))
                                          (rule "leq_literals" (formula "18") (term "0"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "false_right" (formula "18"))
                                          (rule "seqGetAlphaCast" (formula "15") (term "0"))
                                          (rule "castedGetAny" (formula "15") (term "0"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "true_left" (formula "15"))
                                          (rule "seqGetAlphaCast" (formula "14") (term "0"))
                                          (rule "castedGetAny" (formula "14") (term "0"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "true_left" (formula "14"))
                                          (rule "all_pull_out1" (formula "13") (term "0,1,0"))
                                          (rule "all_pull_out0" (formula "13") (term "1,0"))
                                          (rule "shift_paren_and" (formula "13") (term "0,1,0"))
                                          (rule "all_pull_out3" (formula "13") (term "0"))
                                          (rule "cnf_rightDist" (formula "13") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "13") (term "0"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "distr_forallAnd" (formula "13"))
                                          (rule "andLeft" (formula "13"))
                                          (rule "shift_paren_or" (formula "14") (term "0"))
                                          (rule "commute_or_2" (formula "14") (term "0,0"))
                                          (rule "inEqSimp_or_weaken3" (formula "14") (term "0"))
                                          (rule "polySimp_addAssoc" (formula "14") (term "1,0,1,0"))
                                          (rule "add_literals" (formula "14") (term "0,1,0,1,0"))
                                          (rule "add_zero_left" (formula "14") (term "1,0,1,0"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "cnf_rightDist" (formula "13") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "13") (term "0"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "distr_forallAnd" (formula "13"))
                                          (rule "andLeft" (formula "13"))
                                          (rule "commute_or_2" (formula "14") (term "0"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "inEqSimp_homoInEq0" (formula "14") (term "0,1"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1"))
                                          (rule "mul_literals" (formula "14") (term "0,1,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "14") (term "0,0,1"))
                                          (rule "add_literals" (formula "14") (term "0,0,0,1"))
                                          (rule "add_zero_left" (formula "14") (term "0,0,1"))
                                          (rule "inEqSimp_homoInEq1" (formula "14") (term "1,1"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,1"))
                                          (rule "polySimp_rightDist" (formula "14") (term "1,0,1,1"))
                                          (rule "mul_literals" (formula "14") (term "0,1,0,1,1"))
                                          (rule "polySimp_addAssoc" (formula "14") (term "0,1,1"))
                                          (rule "polySimp_addComm0" (formula "14") (term "0,0,1,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,1,1"))
                                          (rule "add_literals" (formula "14") (term "1,1,0,1,1"))
                                          (rule "times_zero_1" (formula "14") (term "1,0,1,1"))
                                          (rule "add_zero_right" (formula "14") (term "0,1,1"))
                                          (rule "leq_literals" (formula "14") (term "1,1"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "applyEq" (formula "14") (term "1,0,0") (ifseqformula "17"))
                                          (rule "inEqSimp_invertInEq1" (formula "14") (term "1"))
                                          (rule "mul_literals" (formula "14") (term "1,1"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "14") (term "0,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "14") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "cnf_rightDist" (formula "13") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "13") (term "0"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "distr_forallAnd" (formula "13"))
                                          (rule "andLeft" (formula "13"))
                                          (rule "commute_or_2" (formula "14") (term "0,0"))
                                          (rule "commute_or_2" (formula "14") (term "0,0,0"))
                                          (rule "cnf_rightDist" (formula "13") (term "0"))
                                          (rule "distr_forallAnd" (formula "13"))
                                          (rule "andLeft" (formula "13"))
                                          (rule "commute_or" (formula "14") (term "0"))
                                          (rule "commute_or_2" (formula "13") (term "0"))
                                          (rule "commute_or" (formula "13") (term "0,0"))
                                          (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                                          (rule "shift_paren_or" (formula "15") (term "0,0,0,0,0"))
                                          (rule "seqGetAlphaCast" (formula "2") (term "0"))
                                          (rule "castedGetAny" (formula "2") (term "0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "allLeft" (formula "3") (inst "t=add(Z(1(#)), i_0)"))
                                          (rule "polySimp_homoEq" (formula "3") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "3") (term "0,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "3") (term "0,1,0"))
                                          (rule "polySimp_addComm0" (formula "3") (term "0,0,1,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,1,0"))
                                          (rule "add_literals" (formula "3") (term "1,1,0,1,0"))
                                          (rule "times_zero_1" (formula "3") (term "1,0,1,0"))
                                          (rule "add_zero_right" (formula "3") (term "0,1,0"))
                                          (rule "equal_literals" (formula "3") (term "1,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "inEqSimp_commuteGeq" (formula "3") (term "1"))
                                          (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "3") (term "0,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "3") (term "0,1,0"))
                                          (rule "add_literals" (formula "3") (term "0,0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "3") (term "1,0"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0"))
                                          (rule "polySimp_elimOne" (formula "3") (term "0,1,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "3") (term "1,0") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "3") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "inEqSimp_contradInEq1" (formula "3") (term "1") (ifseqformula "7"))
                                          (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1"))
                                          (rule "mul_literals" (formula "3") (term "0,1,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "3") (term "0,0,1"))
                                          (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1"))
                                          (rule "add_literals" (formula "3") (term "0,0,0,0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1"))
                                          (rule "add_literals" (formula "3") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "3") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "3") (term "0,0,1"))
                                          (rule "leq_literals" (formula "3") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "notLeft" (formula "3"))
                                          (rule "seqGetAlphaCast" (formula "4") (term "1"))
                                          (rule "castedGetAny" (formula "4") (term "0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1") (ifseqformula "7"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1") (ifseqformula "7"))
                                          (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "25"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "18"))
                                          (rule "applyEq" (formula "19") (term "1") (ifseqformula "18"))
                                          (rule "allLeft" (formula "13") (inst "t=Z(0(#))"))
                                          (rule "leq_literals" (formula "13") (term "1,0"))
                                           (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "20")))
                                          (rule "inEqSimp_commuteGeq" (formula "13"))
                                          (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "13") (term "0"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "closeFalse" (formula "13"))
                                       )
                                    )
                                    (branch "Step Case"
                                        (builtin "One Step Simplification" (formula "13"))
                                        (builtin "One Step Simplification" (formula "12"))
                                        (builtin "One Step Simplification" (formula "4"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                                       (rule "andLeft" (formula "4"))
                                       (rule "allRight" (formula "19") (inst "sk=nv_0"))
                                       (rule "impRight" (formula "19"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "impRight" (formula "21"))
                                       (rule "eqSymm" (formula "19"))
                                       (rule "eqSymm" (formula "21"))
                                       (rule "eqSymm" (formula "20"))
                                       (rule "eqSymm" (formula "18"))
                                       (rule "eqSymm" (formula "27"))
                                       (rule "eqSymm" (formula "17") (term "1,1,0"))
                                       (rule "eqSymm" (formula "17") (term "0,1,0,1,0,1,0"))
                                       (rule "eqSymm" (formula "17") (term "1,1,0,1,0,1,0"))
                                       (rule "eqSymm" (formula "17") (term "1,0,0,1,0"))
                                       (rule "eqSymm" (formula "16"))
                                       (rule "eqSymm" (formula "4") (term "0,0,1"))
                                       (rule "eqSymm" (formula "4") (term "0,1,1,1"))
                                       (rule "eqSymm" (formula "4") (term "0,1,0,1,0,1"))
                                       (rule "eqSymm" (formula "4") (term "1,1,0,1,0,1"))
                                       (rule "eqSymm" (formula "4") (term "1,1"))
                                       (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "7"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "polySimp_elimSub" (formula "19") (term "1,0,2,0"))
                                       (rule "mul_literals" (formula "19") (term "1,1,0,2,0"))
                                       (rule "polySimp_elimSub" (formula "17") (term "1,0,0,1,1,0"))
                                       (rule "mul_literals" (formula "17") (term "1,1,0,0,1,1,0"))
                                       (rule "polySimp_elimSub" (formula "4") (term "0,0,0,1,1"))
                                       (rule "mul_literals" (formula "4") (term "1,0,0,0,1,1"))
                                       (rule "polySimp_homoEq" (formula "4") (term "0,0,1,1"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,1"))
                                       (rule "polySimp_addComm0" (formula "22") (term "1,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "1,0,2,0,1,1,0"))
                                       (rule "polySimp_addComm0" (formula "4") (term "1,0,2,0,1,1"))
                                       (rule "polySimp_addComm0" (formula "19") (term "1,0,2,0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "1,0,0,1,1,0"))
                                       (rule "polySimp_addComm0" (formula "4") (term "1,1,0,0,0,1,1"))
                                       (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,1"))
                                       (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,1"))
                                       (rule "castedGetAny" (formula "23") (term "1,0"))
                                       (rule "castedGetAny" (formula "25") (term "1,1"))
                                       (rule "subsetSingletonLeft" (formula "14"))
                                       (rule "castedGetAny" (formula "25") (term "1,0"))
                                       (rule "subsetSingletonLeft" (formula "15"))
                                       (rule "castedGetAny" (formula "24") (term "0"))
                                       (rule "castedGetAny" (formula "17") (term "0,0,0,0,0,1,0"))
                                       (rule "castedGetAny" (formula "3") (term "1,0,1"))
                                       (rule "castedGetAny" (formula "18") (term "2,0"))
                                       (rule "castedGetAny" (formula "27") (term "0"))
                                       (rule "eqSymm" (formula "27"))
                                       (rule "castedGetAny" (formula "17") (term "1,1,1,1,0"))
                                       (rule "castedGetAny" (formula "17") (term "0,0,1,0,1,0,1,0"))
                                       (rule "castedGetAny" (formula "17") (term "1,0,1,0,1,0,1,0"))
                                       (rule "castedGetAny" (formula "17") (term "1,1,1,0,0,1,0"))
                                       (rule "castedGetAny" (formula "17") (term "0,1,0,0,1,0"))
                                       (rule "eqSymm" (formula "17") (term "1,0,0,1,0"))
                                       (rule "castedGetAny" (formula "16") (term "0,1,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "8"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "8") (term "0"))
                                       (rule "castedGetAny" (formula "4") (term "1,0,1,0,1,0,1"))
                                       (rule "castedGetAny" (formula "4") (term "1,1,1,1"))
                                       (rule "castedGetAny" (formula "4") (term "0,0,0,1"))
                                       (rule "eqSymm" (formula "4") (term "0,0,1"))
                                       (rule "castedGetAny" (formula "4") (term "0,0,1,0,1,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "3") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,1"))
                                       (rule "polySimp_addComm0" (formula "4") (term "0,0,0,0,1,1"))
                                       (rule "castedGetAny" (formula "22") (term "1,0"))
                                       (rule "castedGetAny" (formula "17") (term "2,0,1,1,0"))
                                       (rule "castedGetAny" (formula "4") (term "2,0,1,1"))
                                       (rule "castedGetAny" (formula "19") (term "2,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "4") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0,1,0,1"))
                                       (rule "castedGetAny" (formula "27") (term "1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "7"))
                                       (rule "castedGetAny" (formula "4") (term "1,0,0,0,1"))
                                       (rule "eqSymm" (formula "4") (term "0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1,0,1"))
                                       (rule "polySimp_sepNegMonomial" (formula "4") (term "0,0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,1"))
                                       (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,1,0,1"))
                                       (rule "mul_literals" (formula "4") (term "0,1,1,0,0,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,1,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "3") (term "0") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "3") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
                                       (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "3") (term "0,0,0"))
                                       (rule "qeq_literals" (formula "3") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "pullOutSelect" (formula "6") (term "0") (inst "selectSK=List_seq_0"))
                                       (rule "simplifySelectOfAnon" (formula "6"))
                                        (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "27")) (ifInst ""  (formula "12")))
                                       (rule "eqSymm" (formula "7"))
                                       (rule "applyEqReverse" (formula "6") (term "1") (ifseqformula "7"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "hideAuxiliaryEq" (formula "7"))
                                       (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=LinkedList_nodeseq_0"))
                                       (rule "simplifySelectOfAnon" (formula "5"))
                                        (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "27")) (ifInst ""  (formula "12")))
                                       (rule "eqSymm" (formula "6"))
                                       (rule "applyEqReverse" (formula "5") (term "1") (ifseqformula "6"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "hideAuxiliaryEq" (formula "6"))
                                       (rule "elementOfUnionEQ" (formula "14") (ifseqformula "16"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "elementOfUnionEQ" (formula "14") (ifseqformula "15"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "elementOfSetMinus" (formula "6") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "elementOfSetMinus" (formula "5") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "elementOfUnionEQ" (formula "6") (term "0") (ifseqformula "14"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "elementOfUnionEQ" (formula "5") (term "0") (ifseqformula "13"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "pullOutSelect" (formula "23") (term "0") (inst "selectSK=Node_data_0"))
                                       (rule "simplifySelectOfAnon" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")) (ifInst ""  (formula "20")))
                                       (rule "applyEqReverse" (formula "24") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "23"))
                                       (rule "pullOutSelect" (formula "6") (term "0") (inst "selectSK=LinkedList_size_0"))
                                       (rule "simplifySelectOfAnon" (formula "6"))
                                        (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "23")) (ifInst ""  (formula "10")))
                                       (rule "inEqSimp_homoInEq1" (formula "7"))
                                       (rule "polySimp_addComm1" (formula "7") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                                       (rule "polySimp_mulComm0" (formula "7") (term "1"))
                                       (rule "polySimp_rightDist" (formula "7") (term "1"))
                                       (rule "mul_literals" (formula "7") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                                       (rule "elementOfSetMinus" (formula "6") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "ifthenelse_negated" (formula "6") (term "0"))
                                       (rule "elementOfUnionEQ" (formula "6") (term "0,0") (ifseqformula "13"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "applyEqReverse" (formula "7") (term "1,1") (ifseqformula "6"))
                                       (rule "hideAuxiliaryEq" (formula "6"))
                                       (rule "inEqSimp_homoInEq0" (formula "6"))
                                       (rule "polySimp_addComm1" (formula "6") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                       (rule "polySimp_mulComm0" (formula "6") (term "1"))
                                       (rule "polySimp_rightDist" (formula "6") (term "1"))
                                       (rule "mul_literals" (formula "6") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                                       (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "6"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "andLeft" (formula "4"))
                                       (rule "andLeft" (formula "4"))
                                       (rule "applyEq" (formula "25") (term "0") (ifseqformula "4"))
                                       (rule "eqSymm" (formula "25"))
                                       (rule "nnf_imp2or" (formula "15") (term "1,0,1,0,1,0"))
                                       (rule "nnf_imp2or" (formula "5") (term "0"))
                                       (rule "nnf_imp2or" (formula "15") (term "0"))
                                       (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                                       (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                       (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "5") (term "1,0"))
                                       (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                                       (rule "nnf_imp2or" (formula "15") (term "0,1,0,1,0"))
                                       (rule "nnf_notAnd" (formula "15") (term "0,0,1,0,1,0"))
                                       (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,1,0,1,0"))
                                       (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "15") (term "1,0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,0,1,0"))
                                       (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,0,1,0"))
                                       (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1,0,1,0"))
                                       (rule "commute_or_2" (formula "5") (term "0"))
                                       (rule "ifthenelse_split" (formula "16") (term "0"))
                                       (branch "self.size = 0 TRUE"
                                          (rule "eqSymm" (formula "17"))
                                          (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "16"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "eqSymm" (formula "18"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "16"))
                                          (rule "inEqSimp_homoInEq1" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1,0"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "6") (term "0,0,0") (ifseqformula "16"))
                                          (rule "polySimp_homoEq" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                                          (rule "add_zero_right" (formula "6") (term "0,0,0"))
                                          (rule "applyEq" (formula "15") (term "1,1,0,0,1,0,1,0") (ifseqformula "16"))
                                          (rule "applyEq" (formula "15") (term "1,1,0,0") (ifseqformula "16"))
                                          (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "16"))
                                          (rule "applyEq" (formula "14") (term "1,1,1,0,0,1,0") (ifseqformula "16"))
                                          (rule "add_zero_right" (formula "14") (term "1,1,0,0,1,0"))
                                          (rule "applyEq" (formula "8") (term "0") (ifseqformula "16"))
                                          (rule "inEqSimp_homoInEq1" (formula "8"))
                                          (rule "mul_literals" (formula "8") (term "1,0"))
                                          (rule "add_zero_right" (formula "8") (term "0"))
                                          (rule "applyEq" (formula "15") (term "1,1,0,0,1,1,0") (ifseqformula "16"))
                                          (rule "add_zero_right" (formula "15") (term "1,0,0,1,1,0"))
                                          (rule "applyEq" (formula "20") (term "1") (ifseqformula "16"))
                                          (rule "applyEq" (formula "19") (term "1") (ifseqformula "16"))
                                          (rule "polySimp_sepPosMonomial" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                                          (rule "mul_literals" (formula "8") (term "1"))
                                          (rule "inEqSimp_contradEq7" (formula "6") (term "0,0") (ifseqformula "7"))
                                          (rule "add_zero_left" (formula "6") (term "0,0,0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0,0"))
                                          (rule "leq_literals" (formula "6") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "eqSymm" (formula "6"))
                                          (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "8"))
                                          (rule "qeq_literals" (formula "7") (term "0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "closeFalse" (formula "7"))
                                       )
                                       (branch "self.size = 0 FALSE"
                                          (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "20"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "shift_paren_or" (formula "5") (term "0,0"))
                                          (rule "commute_or" (formula "5") (term "0,0,0"))
                                          (rule "lenNonNegative" (formula "19") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "19"))
                                          (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                          (rule "inEqSimp_strengthen1" (formula "19") (ifseqformula "21"))
                                          (rule "add_zero_right" (formula "19") (term "1"))
                                          (rule "inEqSimp_contradEq7" (formula "21") (ifseqformula "19"))
                                          (rule "times_zero_1" (formula "21") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "21") (term "0,0"))
                                          (rule "leq_literals" (formula "21") (term "0"))
                                           (builtin "One Step Simplification" (formula "21"))
                                          (rule "false_right" (formula "21"))
                                          (rule "lenNonNegative" (formula "18") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "18"))
                                          (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                          (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "20"))
                                          (rule "leq_literals" (formula "18") (term "0"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "true_left" (formula "18"))
                                          (rule "ifthenelse_to_or_left" (formula "15") (term "1,1,0"))
                                          (rule "eqSymm" (formula "15") (term "1,1,1,1,0"))
                                          (rule "eqSymm" (formula "15") (term "1,0,1,1,0"))
                                          (rule "commute_or" (formula "15") (term "1,1,1,0"))
                                          (rule "commute_or" (formula "15") (term "0,1,1,0"))
                                          (rule "shift_paren_or" (formula "15") (term "0,1,0,1,0"))
                                          (rule "seqGetAlphaCast" (formula "22") (term "1,0"))
                                          (rule "castedGetAny" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "commute_or_2" (formula "15") (term "0,0,1,0,1,0"))
                                          (rule "seqGetAlphaCast" (formula "21") (term "1,0"))
                                          (rule "castedGetAny" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "commute_or" (formula "15") (term "0,0,0,1,0,1,0"))
                                          (rule "ifthenelse_split" (formula "6") (term "0"))
                                          (branch "self.size = 1 + i_0 TRUE"
                                             (rule "eqSymm" (formula "7"))
                                             (rule "applyEq" (formula "1") (term "0") (ifseqformula "6"))
                                             (rule "inEqSimp_homoInEq1" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0"))
                                             (rule "applyEq" (formula "20") (term "0") (ifseqformula "6"))
                                             (rule "inEqSimp_homoInEq1" (formula "20"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                                             (rule "mul_literals" (formula "20") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "20") (term "0"))
                                             (rule "add_literals" (formula "20") (term "0,0"))
                                             (rule "add_zero_left" (formula "20") (term "0"))
                                             (rule "applyEq" (formula "18") (term "1,1,0") (ifseqformula "6"))
                                             (rule "polySimp_addAssoc" (formula "18") (term "1,0"))
                                             (rule "add_literals" (formula "18") (term "0,1,0"))
                                             (rule "add_zero_left" (formula "18") (term "1,0"))
                                             (rule "applyEq" (formula "15") (term "1,1,1,0,0,1,0") (ifseqformula "6"))
                                             (rule "polySimp_addAssoc" (formula "15") (term "1,1,0,0,1,0"))
                                             (rule "add_literals" (formula "15") (term "0,1,1,0,0,1,0"))
                                             (rule "add_zero_left" (formula "15") (term "1,1,0,0,1,0"))
                                             (rule "applyEq" (formula "9") (term "0") (ifseqformula "6"))
                                             (rule "inEqSimp_homoInEq1" (formula "9"))
                                             (rule "polySimp_pullOutFactor1" (formula "9") (term "0"))
                                             (rule "add_literals" (formula "9") (term "1,0"))
                                             (rule "times_zero_1" (formula "9") (term "0"))
                                             (rule "leq_literals" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "6"))
                                             (rule "applyEq" (formula "15") (term "1,1,0,0") (ifseqformula "6"))
                                             (rule "applyEq" (formula "15") (term "1,1,0,0,1,0,1,0") (ifseqformula "6"))
                                             (rule "applyEq" (formula "4") (term "1,1") (ifseqformula "17"))
                                             (rule "applyEq" (formula "22") (term "1,0") (ifseqformula "17"))
                                             (rule "applyEq" (formula "24") (term "1,0") (ifseqformula "17"))
                                             (rule "eqSymm" (formula "24"))
                                             (rule "applyEq" (formula "23") (term "0") (ifseqformula "17"))
                                             (rule "referencedObjectIsCreatedRight" (formula "22") (ifseqformula "23"))
                                             (rule "close" (formula "22") (ifseqformula "9"))
                                          )
                                          (branch "self.size = 1 + i_0 FALSE"
                                             (rule "eqSymm" (formula "6"))
                                             (rule "inEqSimp_strengthen1" (formula "8") (ifseqformula "21"))
                                             (rule "polySimp_addAssoc" (formula "8") (term "1"))
                                             (rule "add_literals" (formula "8") (term "0,1"))
                                             (rule "inEqSimp_contradEq7" (formula "21") (ifseqformula "8"))
                                             (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
                                             (rule "mul_literals" (formula "21") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
                                             (rule "add_literals" (formula "21") (term "0,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0"))
                                             (rule "add_literals" (formula "21") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "21") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "21") (term "0,0"))
                                             (rule "leq_literals" (formula "21") (term "0"))
                                              (builtin "One Step Simplification" (formula "21"))
                                             (rule "false_right" (formula "21"))
                                             (rule "seqGetAlphaCast" (formula "3") (term "1,0"))
                                             (rule "castedGetAny" (formula "3") (term "0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "true_left" (formula "3"))
                                             (rule "all_pull_out1" (formula "15") (term "0,1,0"))
                                             (rule "all_pull_out0" (formula "15") (term "1,0"))
                                             (rule "shift_paren_and" (formula "15") (term "0,1,0"))
                                             (rule "all_pull_out3" (formula "15") (term "0"))
                                             (rule "cnf_rightDist" (formula "15") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "15") (term "0"))
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "distr_forallAnd" (formula "15"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "shift_paren_or" (formula "16") (term "0"))
                                             (rule "commute_or_2" (formula "16") (term "0,0"))
                                             (rule "inEqSimp_or_weaken3" (formula "16") (term "0"))
                                             (rule "polySimp_addAssoc" (formula "16") (term "1,0,1,0"))
                                             (rule "add_literals" (formula "16") (term "0,1,0,1,0"))
                                             (rule "add_zero_left" (formula "16") (term "1,0,1,0"))
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "cnf_rightDist" (formula "15") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "15") (term "0"))
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "distr_forallAnd" (formula "15"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "commute_or_2" (formula "16") (term "0"))
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "inEqSimp_homoInEq0" (formula "16") (term "0,1"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                                             (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1"))
                                             (rule "mul_literals" (formula "16") (term "0,1,0,0,1"))
                                             (rule "polySimp_addAssoc" (formula "16") (term "0,0,1"))
                                             (rule "add_literals" (formula "16") (term "0,0,0,1"))
                                             (rule "add_zero_left" (formula "16") (term "0,0,1"))
                                             (rule "inEqSimp_homoInEq1" (formula "16") (term "1,1"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,1"))
                                             (rule "polySimp_rightDist" (formula "16") (term "1,0,1,1"))
                                             (rule "mul_literals" (formula "16") (term "0,1,0,1,1"))
                                             (rule "polySimp_addAssoc" (formula "16") (term "0,1,1"))
                                             (rule "polySimp_addComm0" (formula "16") (term "0,0,1,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,1,1"))
                                             (rule "add_literals" (formula "16") (term "1,1,0,1,1"))
                                             (rule "times_zero_1" (formula "16") (term "1,0,1,1"))
                                             (rule "add_zero_right" (formula "16") (term "0,1,1"))
                                             (rule "leq_literals" (formula "16") (term "1,1"))
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "19"))
                                             (rule "inEqSimp_invertInEq1" (formula "16") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "0,1"))
                                             (rule "times_zero_2" (formula "16") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "16") (term "0,1"))
                                             (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "21"))
                                             (rule "qeq_literals" (formula "16") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "cnf_rightDist" (formula "15") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "15") (term "0"))
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "distr_forallAnd" (formula "15"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "commute_or_2" (formula "16") (term "0,0"))
                                             (rule "commute_or_2" (formula "16") (term "0,0,0"))
                                             (rule "cnf_rightDist" (formula "15") (term "0"))
                                             (rule "distr_forallAnd" (formula "15"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "commute_or" (formula "16") (term "0"))
                                             (rule "commute_or_2" (formula "15") (term "0"))
                                             (rule "commute_or" (formula "15") (term "0,0"))
                                             (rule "commute_or_2" (formula "17") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "17") (term "0,0,0,0,0"))
                                             (rule "seqGetAlphaCast" (formula "4") (term "0"))
                                             (rule "castedGetAny" (formula "4") (term "0"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "true_left" (formula "4"))
                                             (rule "allLeft" (formula "5") (inst "t=add(Z(1(#)), i_0)"))
                                             (rule "polySimp_homoEq" (formula "5") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "5") (term "1,0,1,0"))
                                             (rule "mul_literals" (formula "5") (term "0,1,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "5") (term "0,1,0"))
                                             (rule "polySimp_addComm0" (formula "5") (term "0,0,1,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,1,0"))
                                             (rule "add_literals" (formula "5") (term "1,1,0,1,0"))
                                             (rule "times_zero_1" (formula "5") (term "1,0,1,0"))
                                             (rule "add_literals" (formula "5") (term "0,1,0"))
                                             (rule "equal_literals" (formula "5") (term "1,0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "inEqSimp_commuteGeq" (formula "5") (term "1"))
                                             (rule "inEqSimp_homoInEq0" (formula "5") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "5") (term "1,0,1,0"))
                                             (rule "mul_literals" (formula "5") (term "0,1,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "5") (term "0,1,0"))
                                             (rule "add_literals" (formula "5") (term "0,0,1,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "5") (term "1,0"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0"))
                                             (rule "polySimp_elimOne" (formula "5") (term "0,1,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "5") (term "1") (ifseqformula "9"))
                                             (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1"))
                                             (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1"))
                                             (rule "mul_literals" (formula "5") (term "0,1,0,0,1"))
                                             (rule "polySimp_addAssoc" (formula "5") (term "0,0,1"))
                                             (rule "polySimp_addComm1" (formula "5") (term "0,0,0,1"))
                                             (rule "add_literals" (formula "5") (term "0,0,0,0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1"))
                                             (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "5") (term "0,0,1"))
                                             (rule "leq_literals" (formula "5") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "inEqSimp_contradInEq1" (formula "5") (term "1") (ifseqformula "8"))
                                             (rule "qeq_literals" (formula "5") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "notLeft" (formula "5"))
                                             (rule "seqGetAlphaCast" (formula "20") (term "0"))
                                             (rule "castedGetAny" (formula "20") (term "0"))
                                              (builtin "One Step Simplification" (formula "20"))
                                             (rule "true_left" (formula "20"))
                                             (rule "seqGetAlphaCast" (formula "21") (term "0"))
                                             (rule "castedGetAny" (formula "21") (term "0"))
                                              (builtin "One Step Simplification" (formula "21"))
                                             (rule "true_left" (formula "21"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1") (ifseqformula "9"))
                                             (rule "seqGetAlphaCast" (formula "6") (term "1"))
                                             (rule "castedGetAny" (formula "6") (term "0"))
                                              (builtin "One Step Simplification" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "allLeft" (formula "19") (inst "t=nv_0"))
                                             (rule "inEqSimp_homoInEq1" (formula "19") (term "1"))
                                             (rule "polySimp_addComm1" (formula "19") (term "0,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1"))
                                             (rule "polySimp_mulComm0" (formula "19") (term "1,1"))
                                             (rule "polySimp_rightDist" (formula "19") (term "1,1"))
                                             (rule "mul_literals" (formula "19") (term "0,1,1"))
                                             (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1"))
                                             (rule "polySimp_elimOne" (formula "19") (term "1,1,1"))
                                             (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                                             (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                                             (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1"))
                                             (rule "mul_literals" (formula "19") (term "0,1,0,0,1"))
                                             (rule "polySimp_addAssoc" (formula "19") (term "0,0,1"))
                                             (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1"))
                                             (rule "add_literals" (formula "19") (term "0,0,0,0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                                             (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "19") (term "0,0,1"))
                                             (rule "leq_literals" (formula "19") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "2"))
                                             (rule "qeq_literals" (formula "19") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "allLeft" (formula "17") (inst "t=add(Z(1(#)), i_0)"))
                                             (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,0,0,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "17") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "17") (term "1,0,1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "17") (term "0,1,0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "17") (term "0,1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "17") (term "0,0,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "17") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "17") (term "0,1,0,0,0,0,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0,0,0") (ifseqformula "7"))
                                             (rule "qeq_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "17"))
                                             (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0,0") (ifseqformula "8"))
                                             (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0,0"))
                                             (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0,0"))
                                             (rule "polySimp_addComm1" (formula "17") (term "0,0,0,1,0,0,0,0"))
                                             (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0,0,0,0"))
                                             (rule "add_literals" (formula "17") (term "1,1,0,0,1,0,0,0,0"))
                                             (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "17") (term "0,0,1,0,0,0,0"))
                                             (rule "leq_literals" (formula "17") (term "0,1,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "17"))
                                             (rule "commute_or_2" (formula "17") (term "0"))
                                             (rule "allLeft" (formula "15") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedList::$size))"))
                                             (rule "inEqSimp_homoInEq1" (formula "15") (term "1"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,0,1"))
                                             (rule "polySimp_rightDist" (formula "15") (term "1,0,1"))
                                             (rule "mul_literals" (formula "15") (term "0,1,0,1"))
                                             (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                                             (rule "polySimp_addComm0" (formula "15") (term "0,0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,1"))
                                             (rule "add_literals" (formula "15") (term "1,1,0,1"))
                                             (rule "times_zero_1" (formula "15") (term "1,0,1"))
                                             (rule "add_zero_right" (formula "15") (term "0,1"))
                                             (rule "leq_literals" (formula "15") (term "1"))
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "inEqSimp_homoInEq0" (formula "15") (term "1"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,0,1"))
                                             (rule "polySimp_rightDist" (formula "15") (term "1,0,1"))
                                             (rule "mul_literals" (formula "15") (term "0,1,0,1"))
                                             (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                                             (rule "add_literals" (formula "15") (term "0,0,1"))
                                             (rule "add_zero_left" (formula "15") (term "0,1"))
                                             (rule "applyEq" (formula "15") (term "0,0,0") (ifseqformula "25"))
                                             (rule "inEqSimp_invertInEq1" (formula "15") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "0,1"))
                                             (rule "mul_literals" (formula "15") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "15") (term "0,1"))
                                             (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "27"))
                                             (rule "qeq_literals" (formula "15") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "notLeft" (formula "15"))
                                             (rule "allLeft" (formula "16") (inst "t=add(Z(1(#)), nv_0)"))
                                             (rule "eqSymm" (formula "16") (term "1"))
                                             (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "16") (term "0,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "16") (term "0,0,0"))
                                             (rule "add_literals" (formula "16") (term "0,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "16") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "0,0,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0"))
                                             (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0"))
                                             (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,0"))
                                             (rule "add_literals" (formula "16") (term "0,0,0,0,1,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0"))
                                             (rule "add_literals" (formula "16") (term "1,1,0,0,1,0"))
                                             (rule "times_zero_1" (formula "16") (term "1,0,0,1,0"))
                                             (rule "add_literals" (formula "16") (term "0,0,1,0"))
                                             (rule "leq_literals" (formula "16") (term "0,1,0"))
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "2"))
                                             (rule "qeq_literals" (formula "16") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "allLeft" (formula "17") (inst "t=add(Z(1(#)), i_0)"))
                                             (rule "eqSymm" (formula "17") (term "1"))
                                             (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "17") (term "0,0"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "17") (term "0,0,0"))
                                             (rule "add_literals" (formula "17") (term "0,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "17") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0"))
                                             (rule "polySimp_elimOne" (formula "17") (term "0,0,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0") (ifseqformula "8"))
                                             (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0"))
                                             (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0"))
                                             (rule "polySimp_addComm1" (formula "17") (term "0,0,0,1,0"))
                                             (rule "add_literals" (formula "17") (term "0,0,0,0,1,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0"))
                                             (rule "add_literals" (formula "17") (term "1,1,0,0,1,0"))
                                             (rule "times_zero_1" (formula "17") (term "1,0,0,1,0"))
                                             (rule "add_literals" (formula "17") (term "0,0,1,0"))
                                             (rule "leq_literals" (formula "17") (term "0,1,0"))
                                              (builtin "One Step Simplification" (formula "17"))
                                             (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "7"))
                                             (rule "qeq_literals" (formula "17") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "17"))
                                             (rule "allLeft" (formula "18") (inst "t=Z(0(#))"))
                                             (rule "leq_literals" (formula "18") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "18"))
                                             (rule "eqSymm" (formula "18") (term "1"))
                                             (rule "inEqSimp_commuteGeq" (formula "18") (term "0"))
                                             (rule "applyEq" (formula "18") (term "1,1,1") (ifseqformula "26"))
                                             (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "29"))
                                             (rule "qeq_literals" (formula "18") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "18"))
                                             (rule "allLeft" (formula "19") (inst "t=i_0"))
                                             (rule "eqSymm" (formula "19") (term "1"))
                                             (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "4"))
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "true_left" (formula "19"))
                                             (rule "allLeft" (formula "15") (inst "t=add(Z(1(#)), nv_0)"))
                                             (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                             (rule "inEqSimp_homoInEq0" (formula "15") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "15") (term "1,0,1,0"))
                                             (rule "mul_literals" (formula "15") (term "0,1,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "15") (term "0,1,0"))
                                             (rule "add_literals" (formula "15") (term "0,0,1,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "15") (term "1,0"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0") (ifseqformula "2"))
                                             (rule "qeq_literals" (formula "15") (term "0,1,0"))
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                                             (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1"))
                                             (rule "mul_literals" (formula "15") (term "0,1,0,0,1"))
                                             (rule "polySimp_addAssoc" (formula "15") (term "0,0,1"))
                                             (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1"))
                                             (rule "add_literals" (formula "15") (term "0,0,0,0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                             (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "15") (term "0,0,1"))
                                             (rule "leq_literals" (formula "15") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "notLeft" (formula "15"))
                                             (rule "referencedObjectIsCreatedRightEQ" (formula "34") (ifseqformula "23") (ifseqformula "31"))
                                             (rule "close" (formula "34") (ifseqformula "9"))
                                          )
                                       )
                                    )
                                    (branch "Use Case"
                                        (builtin "One Step Simplification" (formula "14"))
                                        (builtin "One Step Simplification" (formula "13"))
                                        (builtin "One Step Simplification" (formula "5"))
                                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "20")))
                                       (rule "andLeft" (formula "5"))
                                       (rule "eqSymm" (formula "18"))
                                       (rule "eqSymm" (formula "19"))
                                       (rule "eqSymm" (formula "16"))
                                       (rule "eqSymm" (formula "24"))
                                       (rule "eqSymm" (formula "17"))
                                       (rule "eqSymm" (formula "15") (term "1,1,0"))
                                       (rule "eqSymm" (formula "15") (term "0,1,0,1,0,1,0"))
                                       (rule "eqSymm" (formula "15") (term "1,1,0,1,0,1,0"))
                                       (rule "eqSymm" (formula "15") (term "1,0,0,1,0"))
                                       (rule "eqSymm" (formula "14"))
                                       (rule "eqSymm" (formula "2") (term "1,1"))
                                       (rule "eqSymm" (formula "2") (term "0,0,1"))
                                       (rule "eqSymm" (formula "2") (term "1,1,0,1,0,1"))
                                       (rule "eqSymm" (formula "2") (term "0,1,0,1,0,1"))
                                       (rule "eqSymm" (formula "2") (term "0,0,1,1"))
                                       (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "5"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "polySimp_elimSub" (formula "17") (term "1,0,2,0"))
                                       (rule "mul_literals" (formula "17") (term "1,1,0,2,0"))
                                       (rule "polySimp_elimSub" (formula "15") (term "1,0,0,1,1,0"))
                                       (rule "mul_literals" (formula "15") (term "1,1,0,0,1,1,0"))
                                       (rule "polySimp_elimSub" (formula "2") (term "0,0,0,1,1"))
                                       (rule "mul_literals" (formula "2") (term "1,0,0,0,1,1"))
                                       (rule "polySimp_homoEq" (formula "2") (term "0,0,1,1"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,1"))
                                       (rule "polySimp_addComm0" (formula "15") (term "1,0,2,0,1,1,0"))
                                       (rule "polySimp_addComm0" (formula "2") (term "1,0,2,0,1,1"))
                                       (rule "polySimp_addComm0" (formula "17") (term "1,0,2,0"))
                                       (rule "polySimp_addComm0" (formula "15") (term "1,0,0,1,1,0"))
                                       (rule "polySimp_addComm0" (formula "2") (term "1,1,0,0,0,1,1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,1"))
                                       (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,1"))
                                       (rule "castedGetAny" (formula "21") (term "0"))
                                       (rule "castedGetAny" (formula "20") (term "1,0"))
                                       (rule "subsetSingletonLeft" (formula "13"))
                                       (rule "castedGetAny" (formula "1") (term "1,0,1,1,0"))
                                       (rule "subsetSingletonLeft" (formula "12"))
                                       (rule "castedGetAny" (formula "22") (term "1,1"))
                                       (rule "castedGetAny" (formula "22") (term "1,0"))
                                       (rule "castedGetAny" (formula "15") (term "0,0,0,0,0,1,0"))
                                       (rule "castedGetAny" (formula "16") (term "2,0"))
                                       (rule "castedGetAny" (formula "24") (term "0"))
                                       (rule "eqSymm" (formula "24"))
                                       (rule "castedGetAny" (formula "15") (term "1,1,1,1,0"))
                                       (rule "castedGetAny" (formula "15") (term "1,0,1,0,1,0,1,0"))
                                       (rule "castedGetAny" (formula "15") (term "0,0,1,0,1,0,1,0"))
                                       (rule "castedGetAny" (formula "15") (term "1,1,1,0,0,1,0"))
                                       (rule "castedGetAny" (formula "15") (term "0,1,0,0,1,0"))
                                       (rule "eqSymm" (formula "15") (term "1,0,0,1,0"))
                                       (rule "castedGetAny" (formula "14") (term "0,1,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                       (rule "castedGetAny" (formula "2") (term "0,0,1,0,1,0,1"))
                                       (rule "castedGetAny" (formula "2") (term "1,0,1,0,1,0,1"))
                                       (rule "castedGetAny" (formula "2") (term "0,0,0,1"))
                                       (rule "eqSymm" (formula "2") (term "0,0,1"))
                                       (rule "castedGetAny" (formula "2") (term "1,1,1,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "6"))
                                       (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "6") (term "0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,1"))
                                       (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0,1,1"))
                                       (rule "castedGetAny" (formula "15") (term "2,0,1,1,0"))
                                       (rule "castedGetAny" (formula "2") (term "2,0,1,1"))
                                       (rule "castedGetAny" (formula "17") (term "2,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "2") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,1,0,1"))
                                       (rule "castedGetAny" (formula "24") (term "1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "5"))
                                       (rule "castedGetAny" (formula "2") (term "1,0,0,0,1"))
                                       (rule "eqSymm" (formula "2") (term "0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1,0,1"))
                                       (rule "polySimp_sepNegMonomial" (formula "2") (term "0,0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                       (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                       (rule "polySimp_elimOne" (formula "6") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0,1"))
                                       (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0,1"))
                                       (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=List_seq_0"))
                                       (rule "simplifySelectOfAnon" (formula "4"))
                                        (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "24")) (ifInst ""  (formula "10")))
                                       (rule "eqSymm" (formula "5"))
                                       (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "5"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "hideAuxiliaryEq" (formula "5"))
                                       (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=LinkedList_nodeseq_0"))
                                       (rule "simplifySelectOfAnon" (formula "3"))
                                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "24")) (ifInst ""  (formula "10")))
                                       (rule "eqSymm" (formula "4"))
                                       (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "elementOfUnionEQ" (formula "12") (ifseqformula "14"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "elementOfUnionEQ" (formula "12") (ifseqformula "13"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "elementOfSetMinus" (formula "4") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "elementOfUnionEQ" (formula "4") (term "0") (ifseqformula "12"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "elementOfUnionEQ" (formula "3") (term "0") (ifseqformula "11"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=Node_data_0"))
                                       (rule "simplifySelectOfAnon" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "17")))
                                       (rule "applyEqReverse" (formula "21") (term "0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "20"))
                                       (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=LinkedList_size_0"))
                                       (rule "simplifySelectOfAnon" (formula "4"))
                                        (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "20")) (ifInst ""  (formula "8")))
                                       (rule "inEqSimp_homoInEq1" (formula "5"))
                                       (rule "polySimp_addComm1" (formula "5") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1"))
                                       (rule "mul_literals" (formula "5") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                       (rule "elementOfSetMinus" (formula "4") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "ifthenelse_negated" (formula "4") (term "0"))
                                       (rule "elementOfUnionEQ" (formula "4") (term "0,0") (ifseqformula "11"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "applyEqReverse" (formula "5") (term "1,1") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "inEqSimp_homoInEq0" (formula "4"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                       (rule "polySimp_rightDist" (formula "4") (term "1"))
                                       (rule "mul_literals" (formula "4") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                                       (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "2"))
                                       (rule "eqSymm" (formula "22"))
                                       (rule "nnf_imp2or" (formula "1") (term "0"))
                                       (rule "inEqSimp_notGeq" (formula "1") (term "0,0"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "nnf_imp2or" (formula "13") (term "1,0,1,0,1,0"))
                                       (rule "nnf_imp2or" (formula "3") (term "0"))
                                       (rule "nnf_imp2or" (formula "13") (term "0"))
                                       (rule "nnf_imp2or" (formula "1") (term "1,0"))
                                       (rule "inEqSimp_notLeq" (formula "1") (term "0,1,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,0,1,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
                                       (rule "nnf_imp2or" (formula "3") (term "1,0"))
                                       (rule "nnf_notAnd" (formula "3") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "3") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0"))
                                       (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "3") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0"))
                                       (rule "mul_literals" (formula "3") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                       (rule "nnf_imp2or" (formula "13") (term "0,1,0,1,0"))
                                       (rule "nnf_notAnd" (formula "13") (term "0,0,1,0,1,0"))
                                       (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,1,0,1,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0,1,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,0,1,0"))
                                       (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0,1,0"))
                                       (rule "commute_or_2" (formula "3") (term "0"))
                                       (rule "commute_or" (formula "1") (term "1,0"))
                                       (rule "shift_paren_or" (formula "1") (term "0"))
                                       (rule "commute_or" (formula "1") (term "0,0"))
                                       (rule "ifthenelse_split" (formula "14") (term "0"))
                                       (branch "self.size = 0 TRUE"
                                          (rule "eqSymm" (formula "15"))
                                          (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "14"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "eqSymm" (formula "16"))
                                          (rule "applyEq" (formula "13") (term "1,1,0,0,1,0,1,0") (ifseqformula "14"))
                                          (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "14"))
                                          (rule "applyEq" (formula "12") (term "1,1,1,0,0,1,0") (ifseqformula "14"))
                                          (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0"))
                                          (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "14"))
                                          (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "14"))
                                          (rule "polySimp_homoEq" (formula "4") (term "0,0"))
                                          (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                                          (rule "add_zero_right" (formula "4") (term "0,0,0"))
                                          (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "14"))
                                          (rule "applyEq" (formula "6") (term "0") (ifseqformula "14"))
                                          (rule "inEqSimp_homoInEq1" (formula "6"))
                                          (rule "times_zero_2" (formula "6") (term "1,0"))
                                          (rule "add_zero_right" (formula "6") (term "0"))
                                          (rule "applyEq" (formula "17") (term "1") (ifseqformula "14"))
                                          (rule "applyEq" (formula "18") (term "1") (ifseqformula "14"))
                                          (rule "applyEq" (formula "13") (term "1,1,0,0,1,1,0") (ifseqformula "14"))
                                          (rule "add_zero_right" (formula "13") (term "1,0,0,1,1,0"))
                                          (rule "polySimp_sepPosMonomial" (formula "4") (term "0,0"))
                                          (rule "mul_literals" (formula "4") (term "1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                          (rule "mul_literals" (formula "6") (term "1"))
                                          (rule "inEqSimp_contradEq7" (formula "4") (term "0,0") (ifseqformula "5"))
                                          (rule "add_zero_left" (formula "4") (term "0,0,0,0"))
                                          (rule "mul_literals" (formula "4") (term "0,0,0,0"))
                                          (rule "leq_literals" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "eqSymm" (formula "4"))
                                          (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "5") (term "0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "closeFalse" (formula "5"))
                                       )
                                       (branch "self.size = 0 FALSE"
                                          (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "18"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "shift_paren_or" (formula "3") (term "0,0"))
                                          (rule "commute_or" (formula "3") (term "0,0,0"))
                                          (rule "lenNonNegative" (formula "16") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "16"))
                                          (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                                          (rule "inEqSimp_strengthen1" (formula "16") (ifseqformula "19"))
                                          (rule "add_zero_right" (formula "16") (term "1"))
                                          (rule "inEqSimp_contradEq7" (formula "19") (ifseqformula "16"))
                                          (rule "mul_literals" (formula "19") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "19") (term "0,0"))
                                          (rule "leq_literals" (formula "19") (term "0"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "false_right" (formula "19"))
                                          (rule "lenNonNegative" (formula "18") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "18"))
                                          (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                          (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "16"))
                                          (rule "leq_literals" (formula "18") (term "0"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "true_left" (formula "18"))
                                          (rule "ifthenelse_to_or_left" (formula "13") (term "1,1,0"))
                                          (rule "eqSymm" (formula "13") (term "1,0,1,1,0"))
                                          (rule "eqSymm" (formula "13") (term "1,1,1,1,0"))
                                          (rule "commute_or" (formula "13") (term "0,1,1,0"))
                                          (rule "commute_or" (formula "13") (term "1,1,1,0"))
                                          (rule "shift_paren_or" (formula "13") (term "0,1,0,1,0"))
                                          (rule "seqGetAlphaCast" (formula "20") (term "0"))
                                          (rule "castedGetAny" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "commute_or_2" (formula "13") (term "0,0,1,0,1,0"))
                                          (rule "commute_or" (formula "13") (term "0,0,0,1,0,1,0"))
                                          (rule "ifthenelse_split" (formula "4") (term "0"))
                                          (branch "self.size = 1 + i_0 TRUE"
                                             (rule "eqSymm" (formula "5"))
                                             (rule "applyEq" (formula "14") (term "1,1,0,0,1,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "4"))
                                             (rule "polySimp_addAssoc" (formula "16") (term "1,0"))
                                             (rule "add_literals" (formula "16") (term "0,1,0"))
                                             (rule "add_zero_left" (formula "16") (term "1,0"))
                                             (rule "applyEq" (formula "17") (term "0") (ifseqformula "4"))
                                             (rule "inEqSimp_homoInEq1" (formula "17"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                                             (rule "mul_literals" (formula "17") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "17") (term "0"))
                                             (rule "add_literals" (formula "17") (term "0,0"))
                                             (rule "add_zero_left" (formula "17") (term "0"))
                                             (rule "applyEq" (formula "13") (term "1,1,1,0,0,1,0") (ifseqformula "4"))
                                             (rule "polySimp_addAssoc" (formula "13") (term "1,1,0,0,1,0"))
                                             (rule "add_literals" (formula "13") (term "0,1,1,0,0,1,0"))
                                             (rule "add_zero_left" (formula "13") (term "1,1,0,0,1,0"))
                                             (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "7") (term "0") (ifseqformula "4"))
                                             (rule "inEqSimp_homoInEq1" (formula "7"))
                                             (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                                             (rule "add_literals" (formula "7") (term "1,0"))
                                             (rule "times_zero_1" (formula "7") (term "0"))
                                             (rule "leq_literals" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "15"))
                                             (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "15"))
                                             (rule "eqSymm" (formula "21"))
                                             (rule "applyEq" (formula "19") (term "1,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "20") (term "0") (ifseqformula "15"))
                                             (rule "referencedObjectIsCreatedRight" (formula "19") (ifseqformula "20"))
                                             (rule "close" (formula "19") (ifseqformula "7"))
                                          )
                                          (branch "self.size = 1 + i_0 FALSE"
                                             (rule "eqSymm" (formula "4"))
                                             (rule "inEqSimp_strengthen1" (formula "6") (ifseqformula "19"))
                                             (rule "polySimp_addAssoc" (formula "6") (term "1"))
                                             (rule "add_literals" (formula "6") (term "0,1"))
                                             (rule "inEqSimp_contradEq7" (formula "19") (ifseqformula "6"))
                                             (rule "polySimp_rightDist" (formula "19") (term "1,0,0"))
                                             (rule "mul_literals" (formula "19") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "19") (term "0,0,0"))
                                             (rule "add_literals" (formula "19") (term "0,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0"))
                                             (rule "add_literals" (formula "19") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "19") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "19") (term "0,0"))
                                             (rule "leq_literals" (formula "19") (term "0"))
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "false_right" (formula "19"))
                                             (rule "allLeft" (formula "1") (inst "t=i_0"))
                                             (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "20"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                                             (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                             (rule "leq_literals" (formula "1") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "6") (term "0"))
                                              (builtin "One Step Simplification" (formula "6"))
                                             (rule "closeFalse" (formula "6"))
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch " ((Node)(self.nodeseq[i_0]), Node::$data) in allLocs setMinus self.footprint & !Node::$data = java.lang.Object::<created> | ((Node)(self.nodeseq[i_0]), Node::$data) in freshLocs(heap) FALSE"
                                  (builtin "One Step Simplification" (formula "13"))
                                  (builtin "One Step Simplification" (formula "12"))
                                  (builtin "One Step Simplification" (formula "4"))
                                  (builtin "One Step Simplification" (formula "1"))
                                  (builtin "One Step Simplification" (formula "19"))
                                 (rule "closeTrue" (formula "19"))
                              )
                           )
                        )
                        (branch "Assume self.nodeseq@heap[anon(allLocs setMinus self.footprint, anon_heap<<anonHeapFunction>>)] != self.nodeseq"
                            (builtin "One Step Simplification" (formula "12"))
                            (builtin "One Step Simplification" (formula "11"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "notLeft" (formula "1"))
                           (rule "andLeft" (formula "2"))
                           (rule "eqSymm" (formula "16"))
                           (rule "eqSymm" (formula "14"))
                           (rule "eqSymm" (formula "13"))
                           (rule "eqSymm" (formula "15"))
                           (rule "eqSymm" (formula "12") (term "1,1,0,1,0,1,0"))
                           (rule "eqSymm" (formula "12") (term "0,1,0,1,0,1,0"))
                           (rule "eqSymm" (formula "12") (term "1,1,0"))
                           (rule "eqSymm" (formula "12") (term "1,0,0,1,0"))
                           (rule "eqSymm" (formula "11"))
                           (rule "polySimp_elimSub" (formula "14") (term "1,0,2,0"))
                           (rule "mul_literals" (formula "14") (term "1,1,0,2,0"))
                           (rule "polySimp_elimSub" (formula "12") (term "1,0,0,1,1,0"))
                           (rule "mul_literals" (formula "12") (term "1,1,0,0,1,1,0"))
                           (rule "polySimp_addComm0" (formula "12") (term "1,0,2,0,1,1,0"))
                           (rule "polySimp_addComm0" (formula "14") (term "1,0,2,0"))
                           (rule "polySimp_addComm0" (formula "12") (term "1,0,0,1,1,0"))
                           (rule "subsetSingletonLeft" (formula "10"))
                           (rule "castedGetAny" (formula "19") (term "1,0"))
                           (rule "eqSymm" (formula "19"))
                           (rule "subsetSingletonLeft" (formula "9"))
                           (rule "castedGetAny" (formula "12") (term "0,0,0,0,0,1,0"))
                           (rule "castedGetAny" (formula "13") (term "2,0"))
                           (rule "castedGetAny" (formula "12") (term "0,0,1,0,1,0,1,0"))
                           (rule "castedGetAny" (formula "12") (term "1,0,1,0,1,0,1,0"))
                           (rule "castedGetAny" (formula "12") (term "1,1,1,1,0"))
                           (rule "castedGetAny" (formula "12") (term "0,1,0,0,1,0"))
                           (rule "eqSymm" (formula "12") (term "1,0,0,1,0"))
                           (rule "castedGetAny" (formula "11") (term "0,1,0,1,0"))
                           (rule "castedGetAny" (formula "12") (term "2,0,1,1,0"))
                           (rule "castedGetAny" (formula "14") (term "2,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0,1,0"))
                           (rule "castedGetAny" (formula "19") (term "0"))
                           (rule "eqSymm" (formula "19"))
                           (rule "inEqSimp_ltToLeq" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "castedGetAny" (formula "12") (term "1,0,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "2"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0,1,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "17") (inst "iv=iv"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1"))
                           (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "16"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1"))
                           (rule "elementOfUnionEQ" (formula "10") (ifseqformula "11"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "elementOfUnionEQ" (formula "9") (ifseqformula "10"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=List_seq_0"))
                           (rule "simplifySelectOfAnon" (formula "1"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")) (ifInst ""  (formula "7")))
                           (rule "eqSymm" (formula "2"))
                           (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfUnionEQ" (formula "1") (term "0") (ifseqformula "9"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "pullOutSelect" (formula "16") (term "0,1,0") (inst "selectSK=LinkedList_nodeseq_0"))
                           (rule "applyEq" (formula "15") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "15") (term "0,0,1,0,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "15") (term "0,0,0") (ifseqformula "1"))
                           (rule "simplifySelectOfAnon" (formula "1"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "6")))
                           (rule "eqSymm" (formula "15") (term "1,0,1"))
                           (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "ifthenelse_negated" (formula "1") (term "0"))
                           (rule "elementOfUnionEQ" (formula "1") (term "0,0") (ifseqformula "9"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "17") (term "0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "15") (term "0,1,1,0,1") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "applyEqReverse" (formula "15") (term "0,0") (ifseqformula "1"))
                           (rule "close" (formula "15") (ifseqformula "14"))
                        )
                     )
                     (branch "Assume self.seq@heap[anon(allLocs setMinus self.footprint, anon_heap<<anonHeapFunction>>)] != self.seq"
                         (builtin "One Step Simplification" (formula "11"))
                         (builtin "One Step Simplification" (formula "10"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "notLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "eqSymm" (formula "12"))
                        (rule "eqSymm" (formula "18"))
                        (rule "eqSymm" (formula "15"))
                        (rule "eqSymm" (formula "13"))
                        (rule "eqSymm" (formula "14"))
                        (rule "eqSymm" (formula "11") (term "1,1,0"))
                        (rule "eqSymm" (formula "11") (term "1,1,0,1,0,1,0"))
                        (rule "eqSymm" (formula "11") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "11") (term "0,1,0,1,0,1,0"))
                        (rule "eqSymm" (formula "10"))
                        (rule "polySimp_elimSub" (formula "13") (term "1,0,2,0"))
                        (rule "mul_literals" (formula "13") (term "1,1,0,2,0"))
                        (rule "polySimp_elimSub" (formula "11") (term "1,0,0,1,1,0"))
                        (rule "mul_literals" (formula "11") (term "1,1,0,0,1,1,0"))
                        (rule "polySimp_addComm0" (formula "11") (term "1,0,2,0,1,1,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "1,0,2,0"))
                        (rule "polySimp_addComm0" (formula "11") (term "1,0,0,1,1,0"))
                        (rule "subsetSingletonLeft" (formula "9"))
                        (rule "subsetSingletonLeft" (formula "8"))
                        (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,1,0"))
                        (rule "castedGetAny" (formula "12") (term "2,0"))
                        (rule "castedGetAny" (formula "18") (term "0"))
                        (rule "eqSymm" (formula "18"))
                        (rule "castedGetAny" (formula "11") (term "1,1,1,1,0"))
                        (rule "castedGetAny" (formula "11") (term "0,1,0,0,1,0"))
                        (rule "eqSymm" (formula "11") (term "1,0,0,1,0"))
                        (rule "castedGetAny" (formula "11") (term "0,0,1,0,1,0,1,0"))
                        (rule "castedGetAny" (formula "11") (term "1,0,1,0,1,0,1,0"))
                        (rule "castedGetAny" (formula "10") (term "0,1,0,1,0"))
                        (rule "castedGetAny" (formula "11") (term "2,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                        (rule "castedGetAny" (formula "13") (term "2,0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "castedGetAny" (formula "18") (term "1,0"))
                        (rule "eqSymm" (formula "18"))
                        (rule "castedGetAny" (formula "11") (term "1,0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
                        (rule "equalityToSeqGetAndSeqLenRight" (formula "16") (inst "iv=iv"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
                        (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "14"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1"))
                        (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1"))
                        (rule "elementOfUnionEQ" (formula "8") (ifseqformula "10"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "elementOfUnionEQ" (formula "8") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "pullOutSelect" (formula "16") (term "0,0") (inst "selectSK=List_seq_0"))
                        (rule "applyEq" (formula "15") (term "0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "15") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "15") (term "0,0,0") (ifseqformula "1"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "6")))
                        (rule "eqSymm" (formula "17"))
                        (rule "eqSymm" (formula "15") (term "1,0,1"))
                        (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "elementOfUnionEQ" (formula "1") (term "0,0") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "15") (term "0,1,1,0,1") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "applyEqReverse" (formula "17") (term "0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "15") (term "0,0") (ifseqformula "1"))
                        (rule "close" (formula "15") (ifseqformula "13"))
                     )
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "1"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "andLeft" (formula "1"))
                  (rule "allRight" (formula "10") (inst "sk=j_0"))
                  (rule "impRight" (formula "10"))
                  (rule "impRight" (formula "11"))
                  (rule "andLeft" (formula "2"))
                  (rule "eqSymm" (formula "1"))
                  (rule "eqSymm" (formula "13"))
                  (rule "castedGetAny" (formula "1") (term "1"))
                  (rule "castedGetAny" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "4"))
                  (rule "inEqSimp_commuteLeq" (formula "2"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "pullOutSelect" (formula "1") (term "0,1") (inst "selectSK=LinkedList_nodeseq_0"))
                  (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "1"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")) (ifInst ""  (formula "9")))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "6") (term "0") (inst "selectSK=LinkedList_size_0"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "6"))
                  (rule "simplifySelectOfAnon" (formula "6"))
                   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "14")) (ifInst ""  (formula "10")))
                  (rule "inEqSimp_homoInEq1" (formula "7"))
                  (rule "polySimp_addComm1" (formula "7") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1"))
                  (rule "polySimp_rightDist" (formula "7") (term "1"))
                  (rule "mul_literals" (formula "7") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "1"))
                  (rule "mul_literals" (formula "4") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                  (rule "elementOfSetMinus" (formula "6") (term "0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "ifthenelse_negated" (formula "6") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                  (rule "times_zero_1" (formula "3") (term "0,0"))
                  (rule "add_zero_left" (formula "3") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                  (rule "mul_literals" (formula "3") (term "1"))
                  (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "8"))
                  (rule "times_zero_1" (formula "6") (term "0,0"))
                  (rule "add_zero_left" (formula "6") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                  (rule "mul_literals" (formula "6") (term "1"))
                  (rule "Class_invariant_axiom_for_LinkedList" (formula "14") (inst "i=i") (inst "j=j") (inst "i_0=i_0") (ifseqformula "15"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "eqSymm" (formula "21"))
                  (rule "eqSymm" (formula "20"))
                  (rule "eqSymm" (formula "19"))
                  (rule "eqSymm" (formula "18"))
                  (rule "eqSymm" (formula "17") (term "1,1,0"))
                  (rule "eqSymm" (formula "17") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "17") (term "0,1,0,1,0,1,0"))
                  (rule "eqSymm" (formula "17") (term "1,1,0,1,0,1,0"))
                  (rule "eqSymm" (formula "16"))
                  (rule "polySimp_elimSub" (formula "19") (term "1,0,2,0"))
                  (rule "mul_literals" (formula "19") (term "1,1,0,2,0"))
                  (rule "polySimp_elimSub" (formula "17") (term "1,0,0,1,1,0"))
                  (rule "mul_literals" (formula "17") (term "1,1,0,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "17") (term "1,0,2,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "19") (term "1,0,2,0"))
                  (rule "polySimp_addComm0" (formula "17") (term "1,0,0,1,1,0"))
                  (rule "castedGetAny" (formula "17") (term "0,0,0,0,0,1,0"))
                  (rule "subsetSingletonLeft" (formula "14"))
                  (rule "subsetSingletonLeft" (formula "15"))
                  (rule "castedGetAny" (formula "18") (term "2,0"))
                  (rule "castedGetAny" (formula "17") (term "1,1,1,1,0"))
                  (rule "castedGetAny" (formula "17") (term "1,1,1,0,0,1,0"))
                  (rule "castedGetAny" (formula "17") (term "0,1,0,0,1,0"))
                  (rule "eqSymm" (formula "17") (term "1,0,0,1,0"))
                  (rule "castedGetAny" (formula "17") (term "0,0,1,0,1,0,1,0"))
                  (rule "castedGetAny" (formula "17") (term "1,0,1,0,1,0,1,0"))
                  (rule "castedGetAny" (formula "16") (term "0,1,0,1,0"))
                  (rule "castedGetAny" (formula "17") (term "2,0,1,1,0"))
                  (rule "castedGetAny" (formula "19") (term "2,0"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0"))
                  (rule "elementOfUnionEQ" (formula "7") (term "0,0") (ifseqformula "16"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "7"))
                  (rule "applyEqReverse" (formula "5") (term "1,1") (ifseqformula "7"))
                  (rule "applyEqReverse" (formula "8") (term "1,1") (ifseqformula "7"))
                  (rule "hideAuxiliaryEq" (formula "7"))
                  (rule "inEqSimp_homoInEq0" (formula "5"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "inEqSimp_homoInEq0" (formula "7"))
                  (rule "polySimp_addComm1" (formula "7") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1"))
                  (rule "polySimp_rightDist" (formula "5") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                  (rule "mul_literals" (formula "5") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1"))
                  (rule "polySimp_rightDist" (formula "7") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                  (rule "mul_literals" (formula "7") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                  (rule "inEqSimp_contradEq7" (formula "18") (term "0,0") (ifseqformula "3"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0,0,0"))
                  (rule "add_literals" (formula "18") (term "0,0,0,0"))
                  (rule "leq_literals" (formula "18") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_contradEq7" (formula "17") (term "0,0") (ifseqformula "3"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0,0,0"))
                  (rule "add_literals" (formula "17") (term "0,0,0,0"))
                  (rule "leq_literals" (formula "17") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "elementOfUnionEQ" (formula "1") (term "0,0") (ifseqformula "15"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "2") (term "0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "elementOfUnionEQ" (formula "13") (ifseqformula "14"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "elementOfUnionEQ" (formula "12") (ifseqformula "13"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "nnf_imp2or" (formula "13") (term "0"))
                  (rule "nnf_notAnd" (formula "13") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                  (rule "nnf_imp2or" (formula "13") (term "0,1,0,1,0"))
                  (rule "nnf_imp2or" (formula "13") (term "1,0,1,0,1,0"))
                  (rule "nnf_notAnd" (formula "13") (term "0,0,1,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0,1,0"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,1,0,1,0"))
                  (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0,1,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,0,1,0"))
                  (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0,1,0"))
                  (rule "shift_paren_or" (formula "13") (term "0,1,0,1,0"))
                  (rule "commute_or_2" (formula "13") (term "0,0,1,0,1,0"))
                  (rule "ifthenelse_to_or_left" (formula "13") (term "1,1,0"))
                  (rule "eqSymm" (formula "13") (term "1,0,1,1,0"))
                  (rule "eqSymm" (formula "13") (term "1,1,1,1,0"))
                  (rule "commute_or" (formula "13") (term "0,1,1,0"))
                  (rule "commute_or" (formula "13") (term "1,1,1,0"))
                  (rule "commute_or" (formula "13") (term "0,0,0,1,0,1,0"))
                  (rule "lenNonNegative" (formula "17") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "17"))
                  (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                  (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "2"))
                  (rule "leq_literals" (formula "17") (term "0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "lenNonNegative" (formula "16") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "16"))
                  (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                  (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "2"))
                  (rule "leq_literals" (formula "16") (term "0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "all_pull_out1" (formula "13") (term "0,1,0"))
                  (rule "all_pull_out0" (formula "13") (term "1,0"))
                  (rule "shift_paren_and" (formula "13") (term "0,1,0"))
                  (rule "all_pull_out3" (formula "13") (term "0"))
                  (rule "cnf_rightDist" (formula "13") (term "0,0"))
                  (rule "distr_forallAnd" (formula "13") (term "0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "distr_forallAnd" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "shift_paren_or" (formula "14") (term "0"))
                  (rule "commute_or_2" (formula "14") (term "0,0"))
                  (rule "inEqSimp_or_weaken3" (formula "14") (term "0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "1,0,1,0"))
                  (rule "add_literals" (formula "14") (term "0,1,0,1,0"))
                  (rule "add_zero_left" (formula "14") (term "1,0,1,0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "cnf_rightDist" (formula "13") (term "0,0"))
                  (rule "distr_forallAnd" (formula "13") (term "0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "distr_forallAnd" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "commute_or_2" (formula "14") (term "0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "inEqSimp_homoInEq0" (formula "14") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0,1"))
                  (rule "add_literals" (formula "14") (term "0,0,0,1"))
                  (rule "add_zero_left" (formula "14") (term "0,0,1"))
                  (rule "inEqSimp_homoInEq1" (formula "14") (term "1,1"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,1"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,1,1"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,1,1"))
                  (rule "polySimp_addComm0" (formula "14") (term "0,0,1,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,1,1"))
                  (rule "add_literals" (formula "14") (term "1,1,0,1,1"))
                  (rule "times_zero_1" (formula "14") (term "1,0,1,1"))
                  (rule "add_zero_right" (formula "14") (term "0,1,1"))
                  (rule "leq_literals" (formula "14") (term "1,1"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "applyEq" (formula "14") (term "1,0,0") (ifseqformula "17"))
                  (rule "inEqSimp_invertInEq1" (formula "14") (term "1"))
                  (rule "times_zero_2" (formula "14") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "14") (term "0,1"))
                  (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "14") (term "0,1"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "cnf_rightDist" (formula "13") (term "0,0"))
                  (rule "distr_forallAnd" (formula "13") (term "0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "distr_forallAnd" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "commute_or_2" (formula "14") (term "0,0"))
                  (rule "commute_or_2" (formula "14") (term "0,0,0"))
                  (rule "cnf_rightDist" (formula "13") (term "0"))
                  (rule "distr_forallAnd" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "commute_or_2" (formula "13") (term "0"))
                  (rule "commute_or" (formula "14") (term "0"))
                  (rule "commute_or" (formula "13") (term "0,0"))
                  (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "15") (term "0,0,0,0,0"))
                  (rule "seqGetAlphaCast" (formula "19") (term "0"))
                  (rule "castedGetAny" (formula "19") (term "0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "true_left" (formula "19"))
                  (rule "seqGetAlphaCast" (formula "18") (term "0"))
                  (rule "castedGetAny" (formula "18") (term "0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "seqGetAlphaCast" (formula "1") (term "0"))
                  (rule "castedGetAny" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "seqGetAlphaCast" (formula "1") (term "1"))
                  (rule "castedGetAny" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "allLeft" (formula "15") (inst "t=i_0"))
                  (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0,0,0,0,0") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0,0,0,0") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0,1,0,0,0,0"))
                  (rule "leq_literals" (formula "15") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "commute_or_2" (formula "15") (term "0"))
                  (rule "allLeft" (formula "13") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedList::$size))"))
                  (rule "inEqSimp_homoInEq0" (formula "13") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,1,0"))
                  (rule "add_literals" (formula "13") (term "0,0,1,0"))
                  (rule "add_zero_left" (formula "13") (term "0,1,0"))
                  (rule "inEqSimp_homoInEq1" (formula "13") (term "1"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,1"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "13") (term "0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,1"))
                  (rule "add_literals" (formula "13") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "13") (term "1,0,1"))
                  (rule "add_zero_right" (formula "13") (term "0,1"))
                  (rule "leq_literals" (formula "13") (term "1"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "applyEq" (formula "13") (term "0,0,0") (ifseqformula "21"))
                  (rule "inEqSimp_invertInEq1" (formula "13") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "0,1"))
                  (rule "times_zero_2" (formula "13") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "13") (term "0,1"))
                  (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "13") (term "0,1"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "notLeft" (formula "13"))
                  (rule "allLeft" (formula "13") (inst "t=i_0"))
                  (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                  (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "13") (term "0,0,1"))
                  (rule "leq_literals" (formula "13") (term "0,1"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "13") (term "0,1"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "notLeft" (formula "13"))
                  (rule "allLeft" (formula "14") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedList::$size))"))
                  (rule "eqSymm" (formula "14") (term "1"))
                  (rule "inEqSimp_homoInEq1" (formula "14") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,1,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "0,0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,1,0"))
                  (rule "add_literals" (formula "14") (term "1,1,0,1,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,1,0"))
                  (rule "add_zero_right" (formula "14") (term "0,1,0"))
                  (rule "leq_literals" (formula "14") (term "1,0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "inEqSimp_homoInEq0" (formula "14") (term "0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0"))
                  (rule "add_zero_left" (formula "14") (term "0,0"))
                  (rule "applyEq" (formula "14") (term "1,1,1") (ifseqformula "21"))
                  (rule "inEqSimp_invertInEq1" (formula "14") (term "0"))
                  (rule "times_zero_2" (formula "14") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "14") (term "0,0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "allLeft" (formula "15") (inst "t=Z(0(#))"))
                  (rule "leq_literals" (formula "15") (term "0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "eqSymm" (formula "15") (term "1"))
                  (rule "inEqSimp_commuteGeq" (formula "15") (term "0"))
                  (rule "applyEq" (formula "15") (term "1,1,1") (ifseqformula "21"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "15") (term "0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "allLeft" (formula "16") (inst "t=i_0"))
                  (rule "eqSymm" (formula "16") (term "1"))
                  (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "16") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "16") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,0"))
                  (rule "add_literals" (formula "16") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "16") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "16") (term "0,0,0"))
                  (rule "leq_literals" (formula "16") (term "0,0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "allLeft" (formula "17") (inst "t=j_0"))
                  (rule "eqSymm" (formula "17") (term "1"))
                  (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
                  (rule "applyEq" (formula "17") (term "1,1,1") (ifseqformula "1"))
                  (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0"))
                  (rule "add_literals" (formula "17") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "17") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "17") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "17") (term "0,0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "allLeft" (formula "13") (inst "t=Z(0(#))"))
                  (rule "leq_literals" (formula "13") (term "1,0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                  (rule "applyEq" (formula "13") (term "0,0,0") (ifseqformula "24"))
                  (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "13") (term "0,1"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "notLeft" (formula "13"))
                  (rule "allLeft" (formula "13") (inst "t=j_0"))
                  (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                  (rule "applyEq" (formula "13") (term "0,0,0,0") (ifseqformula "1"))
                  (rule "replace_known_right" (formula "13") (term "0,0,0") (ifseqformula "29"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "allLeft" (formula "19") (inst "t=j_0"))
                  (rule "replace_known_left" (formula "19") (term "0,0,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "32")))
                  (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "19") (term "0,0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "4"))
                  (rule "andLeft" (formula "19"))
                  (rule "inEqSimp_homoInEq1" (formula "19"))
                  (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
                  (rule "add_literals" (formula "19") (term "1,1,0"))
                  (rule "times_zero_1" (formula "19") (term "1,0"))
                  (rule "add_zero_right" (formula "19") (term "0"))
                  (rule "leq_literals" (formula "19"))
                  (rule "closeFalse" (formula "19"))
               )
            )
            (branch "Case 2"
               (rule "int_induction" (inst "b=(   lt(nv, int::select(heap, self, LinkedList::$size))<<origin(\"User_Interaction @ node 9607 (int_induction)\",\"[]\")>>
 -> (  boolean::select(heap,
                       (Node)(any::seqGet(Seq::select(heap,
                                                      self,
                                                      LinkedList::$nodeseq),
                                          nv)),
                       java.lang.Object::<created>)
     = TRUE)<<origin(\"User_Interaction @ node 9607 (int_induction)\",\"[]\")>>)<<origin(\"User_Interaction @ node 9607 (int_induction)\",\"[]\")>>") (inst "nv=nv") (userinteraction))
               (branch "Base Case"
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "impRight" (formula "8"))
                  (rule "andLeft" (formula "2"))
                  (rule "eqSymm" (formula "12") (term "0,1"))
                  (rule "eqSymm" (formula "12"))
                  (rule "polySimp_elimSub" (formula "12") (term "0,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                  (rule "polySimp_homoEq" (formula "12") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,0,2,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                  (rule "castedGetAny" (formula "10") (term "1,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "0,0,0,0"))
                  (rule "castedGetAny" (formula "12") (term "1,1"))
                  (rule "castedGetAny" (formula "12") (term "2,0"))
                  (rule "inEqSimp_ltToLeq" (formula "1"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "2"))
                  (rule "polySimp_sepNegMonomial" (formula "12") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "pullOutSelect" (formula "12") (term "1") (inst "selectSK=Node_next_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "pullOutSelect" (formula "13") (term "0,2,0") (inst "selectSK=LinkedList_nodeseq_0"))
                  (rule "applyEq" (formula "2") (term "0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "2") (term "0,0,0,0,1,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "2") (term "0,1,2,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "2") (term "0,1,0,0,1,1,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "2") (term "0,1,1,0") (ifseqformula "1"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")) (ifInst ""  (formula "8")))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "14") (term "0,0,0") (inst "selectSK=LinkedList_size_0"))
                  (rule "applyEq" (formula "6") (term "0") (ifseqformula "1"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "9")))
                  (rule "polySimp_homoEq" (formula "15") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "6"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "polySimp_sepPosMonomial" (formula "15") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1"))
                  (rule "polySimp_rightDist" (formula "6") (term "1"))
                  (rule "mul_literals" (formula "6") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
                  (rule "mul_literals" (formula "5") (term "0,0"))
                  (rule "add_zero_left" (formula "5") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                  (rule "mul_literals" (formula "5") (term "1"))
                  (rule "Class_invariant_axiom_for_LinkedList" (formula "13") (inst "i=i") (inst "j=j") (inst "i_0=i_0") (ifseqformula "15"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "eqSymm" (formula "18"))
                  (rule "eqSymm" (formula "20"))
                  (rule "eqSymm" (formula "19"))
                  (rule "eqSymm" (formula "17"))
                  (rule "eqSymm" (formula "16") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "16") (term "1,1,0,1,0,1,0"))
                  (rule "eqSymm" (formula "16") (term "1,1,0"))
                  (rule "eqSymm" (formula "16") (term "0,1,0,1,0,1,0"))
                  (rule "eqSymm" (formula "15"))
                  (rule "polySimp_elimSub" (formula "18") (term "1,0,2,0"))
                  (rule "mul_literals" (formula "18") (term "1,1,0,2,0"))
                  (rule "polySimp_elimSub" (formula "16") (term "1,0,0,1,1,0"))
                  (rule "mul_literals" (formula "16") (term "1,1,0,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "16") (term "1,0,2,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "18") (term "1,0,2,0"))
                  (rule "polySimp_addComm0" (formula "16") (term "1,0,0,1,1,0"))
                  (rule "castedGetAny" (formula "16") (term "0,0,0,0,0,1,0"))
                  (rule "subsetSingletonLeft" (formula "14"))
                  (rule "subsetSingletonLeft" (formula "13"))
                  (rule "castedGetAny" (formula "17") (term "2,0"))
                  (rule "castedGetAny" (formula "16") (term "0,1,0,0,1,0"))
                  (rule "eqSymm" (formula "16") (term "1,0,0,1,0"))
                  (rule "castedGetAny" (formula "16") (term "1,1,1,1,0"))
                  (rule "castedGetAny" (formula "16") (term "1,0,1,0,1,0,1,0"))
                  (rule "castedGetAny" (formula "16") (term "0,0,1,0,1,0,1,0"))
                  (rule "castedGetAny" (formula "15") (term "0,1,0,1,0"))
                  (rule "castedGetAny" (formula "16") (term "2,0,1,1,0"))
                  (rule "castedGetAny" (formula "18") (term "2,0"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                  (rule "castedGetAny" (formula "16") (term "1,0,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_contradEq7" (formula "17") (term "0,0") (ifseqformula "4"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
                  (rule "leq_literals" (formula "17") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "17"))
                  (rule "inEqSimp_contradEq7" (formula "18") (term "0,0") (ifseqformula "4"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "18") (term "0,0,0,0"))
                  (rule "leq_literals" (formula "18") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "elementOfUnionEQ" (formula "1") (term "0,0") (ifseqformula "15"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "7") (term "1,1") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "23") (term "1,1,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "polySimp_homoEq" (formula "21") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "5"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "polySimp_sepPosMonomial" (formula "21") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1"))
                  (rule "polySimp_rightDist" (formula "5") (term "1"))
                  (rule "mul_literals" (formula "5") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                  (rule "elementOfUnionEQ" (formula "1") (term "0,0") (ifseqformula "13"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "21") (term "0,2,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "2") (term "0,1,0,0,1,1,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "2") (term "0,1,1,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "2") (term "0,0,0,0,1,0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "2") (term "0,1,2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "elementOfUnionEQ" (formula "11") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "elementOfUnionEQ" (formula "10") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "elementOfUnionEQ" (formula "1") (term "0,0,0,0") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0,0,0,0") (ifseqformula "17"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfInfiniteUnion" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "11") (term "0"))
                  (rule "nnf_notAnd" (formula "11") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "11") (term "0,1,0,1,0"))
                  (rule "nnf_imp2or" (formula "11") (term "1,0,1,0,1,0"))
                  (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0,1,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,0,1,0"))
                  (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0,1,0"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1,0,1,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,1,0"))
                  (rule "commute_and_2" (formula "1") (term "0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "11") (term "0,1,0,1,0"))
                  (rule "commute_or_2" (formula "11") (term "0,0,1,0,1,0"))
                  (rule "ifthenelse_to_or_left" (formula "11") (term "1,1,0"))
                  (rule "eqSymm" (formula "11") (term "1,0,1,1,0"))
                  (rule "eqSymm" (formula "11") (term "1,1,1,1,0"))
                  (rule "commute_or" (formula "11") (term "0,1,1,0"))
                  (rule "commute_or" (formula "11") (term "1,1,1,0"))
                  (rule "commute_or" (formula "11") (term "0,0,0,1,0,1,0"))
                  (rule "commute_and" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "lenNonNegative" (formula "15") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "15"))
                  (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                  (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "2"))
                  (rule "leq_literals" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "lenNonNegative" (formula "14") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "14"))
                  (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
                  (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "2"))
                  (rule "leq_literals" (formula "14") (term "0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "ifthenelse_split" (formula "18") (term "0"))
                  (branch "self.size = 1 + i_0 TRUE"
                     (rule "eqSymm" (formula "19"))
                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "0,0"))
                     (rule "add_zero_left" (formula "3") (term "0"))
                     (rule "applyEq" (formula "12") (term "1,1,0,0,1,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "11") (term "1,1,1,0,0,1,0") (ifseqformula "1"))
                     (rule "polySimp_addAssoc" (formula "11") (term "1,1,0,0,1,0"))
                     (rule "add_literals" (formula "11") (term "0,1,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "11") (term "1,1,0,0,1,0"))
                     (rule "applyEq" (formula "12") (term "1,1,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "1"))
                     (rule "polySimp_addAssoc" (formula "14") (term "1,0"))
                     (rule "add_literals" (formula "14") (term "0,1,0"))
                     (rule "add_zero_left" (formula "14") (term "1,0"))
                     (rule "applyEq" (formula "2") (term "1,1,1,0,0,0,0,0") (ifseqformula "1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "1,1,0,0,0,0,0"))
                     (rule "add_literals" (formula "2") (term "0,1,1,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "2") (term "1,1,0,0,0,0,0"))
                     (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "5"))
                     (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                     (rule "add_literals" (formula "5") (term "1,0"))
                     (rule "times_zero_1" (formula "5") (term "0"))
                     (rule "leq_literals" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "applyEq" (formula "2") (term "1,0,0,0,0,0,0,0") (ifseqformula "13"))
                     (rule "applyEq" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "13"))
                     (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "13"))
                     (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "13"))
                     (rule "applyEq" (formula "2") (term "1,0,0,1,1,0,0") (ifseqformula "13"))
                     (rule "applyEq" (formula "14") (term "1") (ifseqformula "1"))
                     (rule "applyEq" (formula "15") (term "1") (ifseqformula "1"))
                     (rule "applyEq" (formula "11") (term "1,1,1,1,1,1,0") (ifseqformula "1"))
                     (rule "polySimp_addAssoc" (formula "11") (term "1,1,1,1,1,0"))
                     (rule "add_literals" (formula "11") (term "0,1,1,1,1,1,0"))
                     (rule "add_zero_left" (formula "11") (term "1,1,1,1,1,0"))
                     (rule "applyEq" (formula "11") (term "1,1,0,1,0,1,1,0") (ifseqformula "1"))
                     (rule "polySimp_addAssoc" (formula "11") (term "1,0,1,0,1,1,0"))
                     (rule "add_literals" (formula "11") (term "0,1,0,1,0,1,1,0"))
                     (rule "add_zero_left" (formula "11") (term "1,0,1,0,1,1,0"))
                     (rule "inEqSimp_invertInEq0" (formula "3"))
                     (rule "times_zero_2" (formula "3") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "all_pull_out1" (formula "10") (term "0,1,0"))
                     (rule "seqGetAlphaCast" (formula "11") (term "0"))
                     (rule "castedGetAny" (formula "11") (term "0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "all_pull_out0" (formula "10") (term "1,0"))
                     (rule "shift_paren_and" (formula "10") (term "0,1,0"))
                     (rule "all_pull_out3" (formula "10") (term "0"))
                     (rule "cnf_rightDist" (formula "10") (term "0,0"))
                     (rule "distr_forallAnd" (formula "10") (term "0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "distr_forallAnd" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "shift_paren_or" (formula "11") (term "0"))
                     (rule "commute_or_2" (formula "11") (term "0,0"))
                     (rule "inEqSimp_or_weaken3" (formula "11") (term "0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "cnf_rightDist" (formula "10") (term "0,0"))
                     (rule "distr_forallAnd" (formula "10") (term "0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "distr_forallAnd" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "commute_or_2" (formula "11") (term "0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "1,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,1,1"))
                     (rule "add_literals" (formula "11") (term "1,1,0,1,1"))
                     (rule "times_zero_1" (formula "11") (term "1,0,1,1"))
                     (rule "add_zero_right" (formula "11") (term "0,1,1"))
                     (rule "leq_literals" (formula "11") (term "1,1"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "applyEq" (formula "11") (term "1,0,0") (ifseqformula "14"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "11") (term "0,1"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "11"))
                     (rule "cnf_rightDist" (formula "10") (term "0,0"))
                     (rule "distr_forallAnd" (formula "10") (term "0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "distr_forallAnd" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "commute_or_2" (formula "11") (term "0,0"))
                     (rule "commute_or_2" (formula "11") (term "0,0,0"))
                     (rule "cnf_rightDist" (formula "10") (term "0"))
                     (rule "distr_forallAnd" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "commute_or_2" (formula "10") (term "0"))
                     (rule "commute_or" (formula "11") (term "0"))
                     (rule "commute_or" (formula "10") (term "0,0"))
                     (rule "commute_or_2" (formula "12") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "12") (term "0,0,0,0,0"))
                     (rule "allLeft" (formula "11") (inst "t=i_0"))
                     (rule "eqSymm" (formula "11") (term "1"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,1,0"))
                     (rule "add_literals" (formula "11") (term "1,1,0,1,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0,1,0"))
                     (rule "add_zero_right" (formula "11") (term "0,1,0"))
                     (rule "leq_literals" (formula "11") (term "1,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "applyEq" (formula "11") (term "1,1,1") (ifseqformula "17"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "11") (term "0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "allLeft" (formula "12") (inst "t=Z(0(#))"))
                     (rule "leq_literals" (formula "12") (term "0,0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "eqSymm" (formula "12") (term "1"))
                     (rule "inEqSimp_homoInEq1" (formula "12") (term "0"))
                     (rule "times_zero_2" (formula "12") (term "1,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0"))
                     (rule "applyEq" (formula "12") (term "1,1,1") (ifseqformula "17"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0"))
                     (rule "mul_literals" (formula "12") (term "1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "12") (term "0,0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "allLeft" (formula "10") (inst "t=Z(0(#))"))
                     (rule "leq_literals" (formula "10") (term "1,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "inEqSimp_homoInEq1" (formula "10") (term "1"))
                     (rule "times_zero_2" (formula "10") (term "1,0,1"))
                     (rule "add_zero_right" (formula "10") (term "0,1"))
                     (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "18"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1"))
                     (rule "mul_literals" (formula "10") (term "1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "10") (term "0,1"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "notLeft" (formula "10"))
                     (rule "referencedObjectIsCreatedRight" (formula "22") (ifseqformula "21"))
                     (rule "close" (formula "22") (ifseqformula "4"))
                  )
                  (branch "self.size = 1 + i_0 FALSE"
                     (rule "inEqSimp_strengthen1" (formula "4") (ifseqformula "18"))
                     (rule "polySimp_addAssoc" (formula "4") (term "1"))
                     (rule "add_literals" (formula "4") (term "0,1"))
                     (rule "inEqSimp_contradEq7" (formula "18") (ifseqformula "4"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "18") (term "0,0,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0"))
                     (rule "add_literals" (formula "18") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0"))
                     (rule "add_zero_right" (formula "18") (term "0,0"))
                     (rule "leq_literals" (formula "18") (term "0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "false_right" (formula "18"))
                     (rule "all_pull_out1" (formula "11") (term "0,1,0"))
                     (rule "seqGetAlphaCast" (formula "12") (term "0"))
                     (rule "castedGetAny" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "all_pull_out0" (formula "11") (term "1,0"))
                     (rule "shift_paren_and" (formula "11") (term "0,1,0"))
                     (rule "seqGetAlphaCast" (formula "13") (term "0"))
                     (rule "castedGetAny" (formula "13") (term "0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "all_pull_out3" (formula "11") (term "0"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0"))
                     (rule "distr_forallAnd" (formula "11") (term "0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "distr_forallAnd" (formula "11"))
                     (rule "andLeft" (formula "11"))
                     (rule "shift_paren_or" (formula "12") (term "0"))
                     (rule "commute_or_2" (formula "12") (term "0,0"))
                     (rule "inEqSimp_or_weaken3" (formula "12") (term "0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "1,0,1,0"))
                     (rule "add_literals" (formula "12") (term "0,1,0,1,0"))
                     (rule "add_zero_left" (formula "12") (term "1,0,1,0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0"))
                     (rule "distr_forallAnd" (formula "11") (term "0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "distr_forallAnd" (formula "11"))
                     (rule "andLeft" (formula "11"))
                     (rule "commute_or_2" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "inEqSimp_homoInEq1" (formula "12") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,1,1"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,1,1"))
                     (rule "polySimp_addComm0" (formula "12") (term "0,0,1,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,1"))
                     (rule "add_literals" (formula "12") (term "1,1,0,1,1"))
                     (rule "times_zero_1" (formula "12") (term "1,0,1,1"))
                     (rule "add_zero_right" (formula "12") (term "0,1,1"))
                     (rule "leq_literals" (formula "12") (term "1,1"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "inEqSimp_homoInEq0" (formula "12") (term "1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,1"))
                     (rule "add_literals" (formula "12") (term "0,0,1"))
                     (rule "add_zero_left" (formula "12") (term "0,1"))
                     (rule "applyEq" (formula "12") (term "1,0,0") (ifseqformula "15"))
                     (rule "inEqSimp_invertInEq1" (formula "12") (term "1"))
                     (rule "times_zero_2" (formula "12") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,1"))
                     (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "12") (term "0,1"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0"))
                     (rule "distr_forallAnd" (formula "11") (term "0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "distr_forallAnd" (formula "11"))
                     (rule "andLeft" (formula "11"))
                     (rule "commute_or_2" (formula "12") (term "0,0"))
                     (rule "commute_or_2" (formula "12") (term "0,0,0"))
                     (rule "cnf_rightDist" (formula "11") (term "0"))
                     (rule "distr_forallAnd" (formula "11"))
                     (rule "andLeft" (formula "11"))
                     (rule "commute_or_2" (formula "11") (term "0"))
                     (rule "commute_or" (formula "12") (term "0"))
                     (rule "commute_or" (formula "11") (term "0,0"))
                     (rule "commute_or_2" (formula "13") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "13") (term "0,0,0,0,0"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch " !exists int i_0; ( (Node)self.nodeseq[i_0] = (Node)self.nodeseq[i_0] & i_0 >= 0 & i_0 <= -1 + self.size) | !(Node)self.nodeseq[i_0] = null & !(Node)self.nodeseq[i_0].<created> = TRUE TRUE"
                        (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "eqSymm" (formula "22"))
                        (rule "allLeft" (formula "13") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0,0,0,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0,0,0,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "13") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "commute_or_2" (formula "13") (term "0"))
                        (rule "allLeft" (formula "11") (inst "t=add(Z(1(#)), i_0)"))
                        (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                        (rule "inEqSimp_homoInEq0" (formula "11") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,1,0"))
                        (rule "add_literals" (formula "11") (term "0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "0,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "11") (term "0,0,1"))
                        (rule "leq_literals" (formula "11") (term "0,1"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "11") (term "0,1"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "notLeft" (formula "11"))
                        (rule "allLeft" (formula "12") (inst "t=i_0"))
                        (rule "eqSymm" (formula "12") (term "1"))
                        (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "12") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "12") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0"))
                        (rule "add_literals" (formula "12") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0,0"))
                        (rule "leq_literals" (formula "12") (term "0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "allLeft" (formula "13") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "13") (term "0,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "eqSymm" (formula "13") (term "1"))
                        (rule "inEqSimp_commuteGeq" (formula "13") (term "0"))
                        (rule "applyEq" (formula "13") (term "1,1,1") (ifseqformula "19"))
                        (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "13") (term "0,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "allLeft" (formula "18") (inst "t=i_0"))
                        (rule "inEqSimp_homoInEq1" (formula "18") (term "1"))
                        (rule "polySimp_addComm1" (formula "18") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1"))
                        (rule "mul_literals" (formula "18") (term "0,1,1"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "18") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                        (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "18") (term "0,0,1"))
                        (rule "leq_literals" (formula "18") (term "0,1"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "allLeft" (formula "11") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "11") (term "1,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                        (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "21"))
                        (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "11") (term "0,1"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "notLeft" (formula "11"))
                        (rule "referencedObjectIsCreatedRight" (formula "26") (ifseqformula "24"))
                        (rule "close" (formula "26") (ifseqformula "5"))
                     )
                     (branch " !exists int i_0; ( (Node)self.nodeseq[i_0] = (Node)self.nodeseq[i_0] & i_0 >= 0 & i_0 <= -1 + self.size) | !(Node)self.nodeseq[i_0] = null & !(Node)self.nodeseq[i_0].<created> = TRUE FALSE"
                        (rule "orRight" (formula "20"))
                        (rule "notRight" (formula "20"))
                        (rule "exLeft" (formula "1") (inst "sk=i_0_0"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "eqSymm" (formula "25"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                        (rule "allLeft" (formula "17") (inst "t=i_0"))
                        (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "inEqSimp_homoInEq1" (formula "17") (term "1"))
                        (rule "polySimp_addComm1" (formula "17") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,1"))
                        (rule "mul_literals" (formula "17") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "17") (term "0,0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "inEqSimp_contradInEq1" (formula "17") (ifseqformula "6"))
                        (rule "andLeft" (formula "17"))
                        (rule "inEqSimp_homoInEq1" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0"))
                        (rule "polySimp_addComm1" (formula "17") (term "0,0"))
                        (rule "add_literals" (formula "17") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
                        (rule "add_literals" (formula "17") (term "1,1,0"))
                        (rule "times_zero_1" (formula "17") (term "1,0"))
                        (rule "add_zero_right" (formula "17") (term "0"))
                        (rule "leq_literals" (formula "17"))
                        (rule "closeFalse" (formula "17"))
                     )
                  )
               )
               (branch "Step Case"
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "allRight" (formula "9") (inst "sk=nv_0"))
                  (rule "impRight" (formula "9"))
                  (rule "andLeft" (formula "1"))
                  (rule "impRight" (formula "11"))
                  (rule "eqSymm" (formula "14"))
                  (rule "eqSymm" (formula "14") (term "0,0"))
                  (rule "polySimp_elimSub" (formula "14") (term "0,0,0"))
                  (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                  (rule "polySimp_homoEq" (formula "14") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1,0,1,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "polySimp_addComm0" (formula "14") (term "1,0,2,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "1,0,1"))
                  (rule "castedGetAny" (formula "14") (term "1,1"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0"))
                  (rule "castedGetAny" (formula "12") (term "1,0"))
                  (rule "castedGetAny" (formula "14") (term "2,0"))
                  (rule "inEqSimp_ltToLeq" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "3") (term "0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "4"))
                  (rule "polySimp_sepNegMonomial" (formula "14") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "3") (term "0") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0,0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
                  (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0,0"))
                  (rule "qeq_literals" (formula "3") (term "0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "pullOutSelect" (formula "14") (term "0,1,1") (inst "selectSK=LinkedList_nodeseq_0"))
                  (rule "applyEq" (formula "15") (term "0,2,0") (ifseqformula "1"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "9")))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "15") (term "0,0,0") (inst "selectSK=LinkedList_size_0"))
                  (rule "applyEq" (formula "7") (term "0") (ifseqformula "1"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")) (ifInst ""  (formula "10")))
                  (rule "polySimp_homoEq" (formula "16") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "16") (term "0,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "7"))
                  (rule "polySimp_addComm1" (formula "7") (term "0"))
                  (rule "polySimp_sepPosMonomial" (formula "16") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1"))
                  (rule "polySimp_rightDist" (formula "7") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                  (rule "mul_literals" (formula "7") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "16") (term "1") (inst "selectSK=Node_next_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "8"))
                  (rule "times_zero_1" (formula "7") (term "0,0"))
                  (rule "add_zero_left" (formula "7") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                  (rule "mul_literals" (formula "7") (term "1"))
                  (rule "Class_invariant_axiom_for_LinkedList" (formula "15") (inst "i=i") (inst "j=j") (inst "i_0=i_0") (ifseqformula "17"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "17"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "15"))
                  (rule "eqSymm" (formula "20"))
                  (rule "eqSymm" (formula "22"))
                  (rule "eqSymm" (formula "21"))
                  (rule "eqSymm" (formula "19"))
                  (rule "eqSymm" (formula "18") (term "0,1,0,1,0,1,0"))
                  (rule "eqSymm" (formula "18") (term "1,1,0,1,0,1,0"))
                  (rule "eqSymm" (formula "18") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "18") (term "1,1,0"))
                  (rule "eqSymm" (formula "17"))
                  (rule "polySimp_elimSub" (formula "20") (term "1,0,2,0"))
                  (rule "mul_literals" (formula "20") (term "1,1,0,2,0"))
                  (rule "polySimp_elimSub" (formula "18") (term "1,0,0,1,1,0"))
                  (rule "mul_literals" (formula "18") (term "1,1,0,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "18") (term "1,0,2,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "20") (term "1,0,2,0"))
                  (rule "polySimp_addComm0" (formula "18") (term "1,0,0,1,1,0"))
                  (rule "castedGetAny" (formula "18") (term "0,0,0,0,0,1,0"))
                  (rule "subsetSingletonLeft" (formula "15"))
                  (rule "subsetSingletonLeft" (formula "16"))
                  (rule "castedGetAny" (formula "19") (term "2,0"))
                  (rule "castedGetAny" (formula "18") (term "0,0,1,0,1,0,1,0"))
                  (rule "castedGetAny" (formula "18") (term "1,0,1,0,1,0,1,0"))
                  (rule "castedGetAny" (formula "18") (term "0,1,0,0,1,0"))
                  (rule "eqSymm" (formula "18") (term "1,0,0,1,0"))
                  (rule "castedGetAny" (formula "18") (term "1,1,1,1,0"))
                  (rule "castedGetAny" (formula "17") (term "0,1,0,1,0"))
                  (rule "castedGetAny" (formula "18") (term "2,0,1,1,0"))
                  (rule "castedGetAny" (formula "20") (term "2,0"))
                  (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1,0,1,0"))
                  (rule "castedGetAny" (formula "18") (term "1,0,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,0"))
                  (rule "elementOfUnionEQ" (formula "3") (term "0,0") (ifseqformula "17"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEqReverse" (formula "1") (term "0,1,0,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEqReverse" (formula "1") (term "0,1,2,0") (ifseqformula "3"))
                  (rule "applyEqReverse" (formula "1") (term "0,1,1,0") (ifseqformula "3"))
                  (rule "applyEqReverse" (formula "25") (term "0,2,0") (ifseqformula "3"))
                  (rule "applyEqReverse" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "elementOfUnionEQ" (formula "2") (term "0,0") (ifseqformula "16"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "applyEqReverse" (formula "8") (term "1,1") (ifseqformula "2"))
                  (rule "applyEqReverse" (formula "24") (term "1,1,0,0") (ifseqformula "2"))
                  (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "polySimp_homoEq" (formula "23") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "7"))
                  (rule "polySimp_addComm1" (formula "7") (term "0"))
                  (rule "polySimp_sepPosMonomial" (formula "23") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1"))
                  (rule "polySimp_rightDist" (formula "7") (term "1"))
                  (rule "mul_literals" (formula "7") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                  (rule "inEqSimp_contradEq7" (formula "18") (term "0,0") (ifseqformula "5"))
                  (rule "mul_literals" (formula "18") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "18") (term "0,0,0,0"))
                  (rule "leq_literals" (formula "18") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_contradEq7" (formula "17") (term "0,0") (ifseqformula "5"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
                  (rule "leq_literals" (formula "17") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "elementOfUnionEQ" (formula "14") (ifseqformula "15"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "elementOfUnionEQ" (formula "13") (ifseqformula "14"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "elementOfUnionEQ" (formula "1") (term "0,0,0,0") (ifseqformula "13"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfInfiniteUnion" (formula "1") (term "1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,1,0,0,0,0"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0,0,0,0") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "14") (term "0"))
                  (rule "nnf_notAnd" (formula "14") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                  (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "14") (term "0,1,0,1,0"))
                  (rule "nnf_imp2or" (formula "14") (term "1,0,1,0,1,0"))
                  (rule "nnf_notAnd" (formula "14") (term "0,0,1,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0,1,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,1,0,1,0"))
                  (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0,1,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0,1,0"))
                  (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,0,1,0"))
                  (rule "commute_and_2" (formula "1") (term "0,0,0,0,0"))
                  (rule "seqGetAlphaCast" (formula "19") (term "1,0"))
                  (rule "castedGetAny" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "shift_paren_or" (formula "14") (term "0,1,0,1,0"))
                  (rule "commute_or_2" (formula "14") (term "0,0,1,0,1,0"))
                  (rule "ifthenelse_to_or_left" (formula "14") (term "1,1,0"))
                  (rule "eqSymm" (formula "14") (term "1,0,1,1,0"))
                  (rule "eqSymm" (formula "14") (term "1,1,1,1,0"))
                  (rule "commute_or" (formula "14") (term "0,1,1,0"))
                  (rule "commute_or" (formula "14") (term "1,1,1,0"))
                  (rule "commute_or" (formula "14") (term "0,0,0,1,0,1,0"))
                  (rule "seqGetAlphaCast" (formula "4") (term "1,0"))
                  (rule "castedGetAny" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "commute_and" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "lenNonNegative" (formula "18") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "18"))
                  (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                  (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "5"))
                  (rule "leq_literals" (formula "18") (term "0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "lenNonNegative" (formula "17") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "17"))
                  (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                  (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "5"))
                  (rule "leq_literals" (formula "17") (term "0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "ifthenelse_split" (formula "21") (term "0"))
                  (branch "self.size = 1 + i_0 TRUE"
                     (rule "eqSymm" (formula "22"))
                     (rule "applyEq" (formula "6") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                     (rule "mul_literals" (formula "6") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0"))
                     (rule "add_literals" (formula "6") (term "0,0"))
                     (rule "add_zero_left" (formula "6") (term "0"))
                     (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "1"))
                     (rule "polySimp_addAssoc" (formula "17") (term "1,0"))
                     (rule "add_literals" (formula "17") (term "0,1,0"))
                     (rule "add_zero_left" (formula "17") (term "1,0"))
                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0"))
                     (rule "applyEq" (formula "14") (term "1,1,1,0,0,1,0") (ifseqformula "1"))
                     (rule "polySimp_addAssoc" (formula "14") (term "1,1,0,0,1,0"))
                     (rule "add_literals" (formula "14") (term "0,1,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "14") (term "1,1,0,0,1,0"))
                     (rule "applyEq" (formula "15") (term "1,1,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "2") (term "1,1,1,0,0,0,0,0") (ifseqformula "1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "1,1,0,0,0,0,0"))
                     (rule "add_literals" (formula "2") (term "0,1,1,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "2") (term "1,1,0,0,0,0,0"))
                     (rule "applyEq" (formula "15") (term "1,1,0,0,1,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "8") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "8"))
                     (rule "polySimp_pullOutFactor1" (formula "8") (term "0"))
                     (rule "add_literals" (formula "8") (term "1,0"))
                     (rule "times_zero_1" (formula "8") (term "0"))
                     (rule "leq_literals" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "applyEq" (formula "2") (term "1,0,0,0,0,0,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "2") (term "1,0,0,1,1,0,0") (ifseqformula "16"))
                     (rule "applyEq" (formula "17") (term "1") (ifseqformula "1"))
                     (rule "applyEq" (formula "18") (term "1") (ifseqformula "1"))
                     (rule "applyEq" (formula "14") (term "1,1,0,1,0,1,1,0") (ifseqformula "1"))
                     (rule "polySimp_addAssoc" (formula "14") (term "1,0,1,0,1,1,0"))
                     (rule "add_literals" (formula "14") (term "0,1,0,1,0,1,1,0"))
                     (rule "add_zero_left" (formula "14") (term "1,0,1,0,1,1,0"))
                     (rule "applyEq" (formula "14") (term "1,1,1,1,1,1,0") (ifseqformula "1"))
                     (rule "polySimp_addAssoc" (formula "14") (term "1,1,1,1,1,0"))
                     (rule "add_literals" (formula "14") (term "0,1,1,1,1,1,0"))
                     (rule "add_zero_left" (formula "14") (term "1,1,1,1,1,0"))
                     (rule "inEqSimp_invertInEq0" (formula "6"))
                     (rule "times_zero_2" (formula "6") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                     (rule "polySimp_elimOne" (formula "6") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "mul_literals" (formula "3") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "4") (term "0,0"))
                     (rule "add_zero_left" (formula "4") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "mul_literals" (formula "4") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "4"))
                     (rule "leq_literals" (formula "7") (term "0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "all_pull_out1" (formula "13") (term "0,1,0"))
                     (rule "seqGetAlphaCast" (formula "14") (term "0"))
                     (rule "castedGetAny" (formula "14") (term "0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "all_pull_out0" (formula "13") (term "1,0"))
                     (rule "shift_paren_and" (formula "13") (term "0,1,0"))
                     (rule "all_pull_out3" (formula "13") (term "0"))
                     (rule "cnf_rightDist" (formula "13") (term "0,0"))
                     (rule "distr_forallAnd" (formula "13") (term "0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "distr_forallAnd" (formula "13"))
                     (rule "andLeft" (formula "13"))
                     (rule "shift_paren_or" (formula "14") (term "0"))
                     (rule "commute_or_2" (formula "14") (term "0,0"))
                     (rule "inEqSimp_or_weaken3" (formula "14") (term "0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "cnf_rightDist" (formula "13") (term "0,0"))
                     (rule "distr_forallAnd" (formula "13") (term "0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "distr_forallAnd" (formula "13"))
                     (rule "andLeft" (formula "13"))
                     (rule "commute_or_2" (formula "14") (term "0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "inEqSimp_homoInEq1" (formula "14") (term "1,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,1,1"))
                     (rule "add_literals" (formula "14") (term "1,1,0,1,1"))
                     (rule "times_zero_1" (formula "14") (term "1,0,1,1"))
                     (rule "add_zero_right" (formula "14") (term "0,1,1"))
                     (rule "leq_literals" (formula "14") (term "1,1"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "applyEq" (formula "14") (term "1,0,0") (ifseqformula "17"))
                     (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "14") (term "0,1"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "14"))
                     (rule "cnf_rightDist" (formula "13") (term "0,0"))
                     (rule "distr_forallAnd" (formula "13") (term "0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "distr_forallAnd" (formula "13"))
                     (rule "andLeft" (formula "13"))
                     (rule "commute_or_2" (formula "14") (term "0,0"))
                     (rule "commute_or_2" (formula "14") (term "0,0,0"))
                     (rule "cnf_rightDist" (formula "13") (term "0"))
                     (rule "distr_forallAnd" (formula "13"))
                     (rule "andLeft" (formula "13"))
                     (rule "commute_or_2" (formula "13") (term "0"))
                     (rule "commute_or" (formula "14") (term "0"))
                     (rule "commute_or" (formula "13") (term "0,0"))
                     (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "15") (term "0,0,0,0,0"))
                     (rule "seqGetAlphaCast" (formula "19") (term "0"))
                     (rule "castedGetAny" (formula "19") (term "0"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "allLeft" (formula "17") (inst "t=nv_0"))
                     (rule "inEqSimp_contradInEq0" (formula "17") (term "1") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "17") (term "0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
                     (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "17") (term "0,0,1"))
                     (rule "leq_literals" (formula "17") (term "0,1"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "17") (term "0,1"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "allLeft" (formula "18") (inst "t=Z(0(#))"))
                     (rule "add_zero_right" (formula "18") (term "1,1,0,0"))
                     (rule "leq_literals" (formula "18") (term "1,0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                     (rule "applyEq" (formula "18") (term "1,0,0") (ifseqformula "20"))
                     (rule "eqSymm" (formula "18") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "18") (term "0,1"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "ifthenelse_split" (formula "2") (term "0"))
                     (branch " !exists int i_0; ( (Node)self.nodeseq[i_0] = self.last & i_0 >= 0 & i_0 <= i_0) | !self.last = null & !self.last.<created> = TRUE TRUE"
                        (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "allLeft" (formula "13") (inst "t=add(Z(1(#)), nv_0)"))
                        (rule "inEqSimp_homoInEq1" (formula "13") (term "1"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,1"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,1"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,0,1"))
                        (rule "add_literals" (formula "13") (term "0,0,0,1"))
                        (rule "add_zero_left" (formula "13") (term "0,0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "13") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,1,0"))
                        (rule "add_literals" (formula "13") (term "0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "13") (term "0,1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "13") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "0,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "13") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_contradInEq0" (formula "13") (term "1") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "13") (term "0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                        (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "13") (term "0,0,1"))
                        (rule "leq_literals" (formula "13") (term "0,1"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "notLeft" (formula "13"))
                        (rule "referencedObjectIsCreatedRightEQ" (formula "25") (ifseqformula "17") (ifseqformula "24"))
                        (rule "close" (formula "25") (ifseqformula "7"))
                     )
                     (branch " !exists int i_0; ( (Node)self.nodeseq[i_0] = self.last & i_0 >= 0 & i_0 <= i_0) | !self.last = null & !self.last.<created> = TRUE FALSE"
                        (rule "orRight" (formula "24"))
                        (rule "notRight" (formula "24"))
                        (rule "exLeft" (formula "1") (inst "sk=i_0_0"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "closeTrue" (formula "30"))
                     )
                  )
                  (branch "self.size = 1 + i_0 FALSE"
                     (rule "inEqSimp_strengthen1" (formula "7") (ifseqformula "21"))
                     (rule "polySimp_addAssoc" (formula "7") (term "1"))
                     (rule "add_literals" (formula "7") (term "0,1"))
                     (rule "inEqSimp_contradEq7" (formula "21") (ifseqformula "7"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0"))
                     (rule "add_literals" (formula "21") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0"))
                     (rule "leq_literals" (formula "21") (term "0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "false_right" (formula "21"))
                     (rule "all_pull_out1" (formula "14") (term "0,1,0"))
                     (rule "all_pull_out0" (formula "14") (term "1,0"))
                     (rule "shift_paren_and" (formula "14") (term "0,1,0"))
                     (rule "all_pull_out3" (formula "14") (term "0"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0"))
                     (rule "distr_forallAnd" (formula "14") (term "0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "distr_forallAnd" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "shift_paren_or" (formula "15") (term "0"))
                     (rule "commute_or_2" (formula "15") (term "0,0"))
                     (rule "inEqSimp_or_weaken3" (formula "15") (term "0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "1,0,1,0"))
                     (rule "add_literals" (formula "15") (term "0,1,0,1,0"))
                     (rule "add_zero_left" (formula "15") (term "1,0,1,0"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0"))
                     (rule "distr_forallAnd" (formula "14") (term "0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "distr_forallAnd" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "commute_or_2" (formula "15") (term "0"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "inEqSimp_homoInEq0" (formula "15") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "15") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,0,1"))
                     (rule "add_literals" (formula "15") (term "0,0,0,1"))
                     (rule "add_zero_left" (formula "15") (term "0,0,1"))
                     (rule "inEqSimp_homoInEq1" (formula "15") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,1"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0,1,1"))
                     (rule "mul_literals" (formula "15") (term "0,1,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,1,1"))
                     (rule "polySimp_addComm0" (formula "15") (term "0,0,1,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,1,1"))
                     (rule "add_literals" (formula "15") (term "1,1,0,1,1"))
                     (rule "times_zero_1" (formula "15") (term "1,0,1,1"))
                     (rule "add_zero_right" (formula "15") (term "0,1,1"))
                     (rule "leq_literals" (formula "15") (term "1,1"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "applyEq" (formula "15") (term "1,0,0") (ifseqformula "18"))
                     (rule "inEqSimp_invertInEq1" (formula "15") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,1"))
                     (rule "times_zero_2" (formula "15") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,1"))
                     (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "15") (term "0,1"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0"))
                     (rule "distr_forallAnd" (formula "14") (term "0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "distr_forallAnd" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "commute_or_2" (formula "15") (term "0,0"))
                     (rule "commute_or_2" (formula "15") (term "0,0,0"))
                     (rule "cnf_rightDist" (formula "14") (term "0"))
                     (rule "distr_forallAnd" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "commute_or" (formula "15") (term "0"))
                     (rule "commute_or_2" (formula "14") (term "0"))
                     (rule "commute_or" (formula "14") (term "0,0"))
                     (rule "commute_or_2" (formula "16") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "16") (term "0,0,0,0,0"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch " !exists int i_0; ( (Node)self.nodeseq[i_0] = (Node)self.nodeseq[i_0] & i_0 >= 0 & i_0 <= -1 + self.size) | !(Node)self.nodeseq[i_0] = null & !(Node)self.nodeseq[i_0].<created> = TRUE TRUE"
                        (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "eqSymm" (formula "25"))
                        (rule "seqGetAlphaCast" (formula "20") (term "0"))
                        (rule "castedGetAny" (formula "20") (term "0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "seqGetAlphaCast" (formula "19") (term "0"))
                        (rule "castedGetAny" (formula "19") (term "0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "allLeft" (formula "14") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "14") (term "0,0,1"))
                        (rule "leq_literals" (formula "14") (term "0,1"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "14") (term "0,1"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "notLeft" (formula "14"))
                        (rule "replace_known_right" (formula "1") (term "0,0,1") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "allLeft" (formula "16") (inst "t=nv_0"))
                        (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0,0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "16") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "16") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0,0,0,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "16") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "commute_or_2" (formula "16") (term "0"))
                        (rule "allLeft" (formula "19") (inst "t=i_0"))
                        (rule "inEqSimp_homoInEq1" (formula "19") (term "1"))
                        (rule "polySimp_addComm1" (formula "19") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1"))
                        (rule "mul_literals" (formula "19") (term "0,1,1"))
                        (rule "polySimp_elimOne" (formula "19") (term "1,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                        (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "19") (term "0,0,1"))
                        (rule "leq_literals" (formula "19") (term "0,1"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "19") (term "0,1"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "allLeft" (formula "20") (inst "t=nv_0"))
                        (rule "inEqSimp_homoInEq1" (formula "20") (term "1"))
                        (rule "polySimp_addComm1" (formula "20") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1"))
                        (rule "mul_literals" (formula "20") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "20") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "20") (term "0,0,0,1"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                        (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "20") (term "0,0,1"))
                        (rule "leq_literals" (formula "20") (term "0,1"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "allLeft" (formula "17") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0,0") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "17") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "17") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "17") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0,0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "17") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "commute_or_2" (formula "17") (term "0"))
                        (rule "allLeft" (formula "18") (inst "t=add(Z(1(#)), i_0)"))
                        (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0,0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "18") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1,0,0,0,0,0"))
                        (rule "add_literals" (formula "18") (term "0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "18") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "0,1,0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0,0,0,0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "18") (term "0,1,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0,0,0") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "18") (term "0,0,0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "18") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "18") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "18") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "commute_or_2" (formula "18") (term "0"))
                        (rule "allLeft" (formula "19") (inst "t=add(Z(1(#)), nv_0)"))
                        (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0,0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1,0,0,0,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "19") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0,0,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0,0,0,0,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "19") (term "0,1,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0,0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "19") (term "1,1,0,0,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "19") (term "1,0,0,1,0,0,0,0"))
                        (rule "add_zero_right" (formula "19") (term "0,0,1,0,0,0,0"))
                        (rule "leq_literals" (formula "19") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "commute_or_2" (formula "19") (term "0"))
                        (rule "allLeft" (formula "14") (inst "t=add(Z(1(#)), i_0)"))
                        (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                        (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,1,0"))
                        (rule "add_literals" (formula "14") (term "0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "14") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "0,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "14") (term "0,0,1"))
                        (rule "leq_literals" (formula "14") (term "0,1"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "14") (term "0,1"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "notLeft" (formula "14"))
                        (rule "allLeft" (formula "14") (inst "t=add(Z(1(#)), nv_0)"))
                        (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                        (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,1,0"))
                        (rule "add_literals" (formula "14") (term "0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "14") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "0,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "14") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "14") (term "0,0,1"))
                        (rule "leq_literals" (formula "14") (term "0,1"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "notLeft" (formula "14"))
                        (rule "referencedObjectIsCreatedRightEQ" (formula "32") (ifseqformula "23") (ifseqformula "29"))
                        (rule "close" (formula "32") (ifseqformula "8"))
                     )
                     (branch " !exists int i_0; ( (Node)self.nodeseq[i_0] = (Node)self.nodeseq[i_0] & i_0 >= 0 & i_0 <= -1 + self.size) | !(Node)self.nodeseq[i_0] = null & !(Node)self.nodeseq[i_0].<created> = TRUE FALSE"
                        (rule "orRight" (formula "23"))
                        (rule "notRight" (formula "23"))
                        (rule "exLeft" (formula "1") (inst "sk=i_0_0"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "applyEqReverse" (formula "29") (term "1") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "eqSymm" (formula "28"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                        (rule "seqGetAlphaCast" (formula "22") (term "0"))
                        (rule "castedGetAny" (formula "22") (term "0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "seqGetAlphaCast" (formula "21") (term "0"))
                        (rule "castedGetAny" (formula "21") (term "0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "allLeft" (formula "20") (inst "t=i_0"))
                        (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_homoInEq1" (formula "20") (term "1"))
                        (rule "polySimp_addComm1" (formula "20") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1"))
                        (rule "mul_literals" (formula "20") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "20") (term "0") (ifseqformula "8"))
                        (rule "qeq_literals" (formula "20") (term "0,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_contradInEq1" (formula "20") (ifseqformula "9"))
                        (rule "andLeft" (formula "20"))
                        (rule "inEqSimp_homoInEq1" (formula "20"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0"))
                        (rule "polySimp_addComm1" (formula "20") (term "0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
                        (rule "add_literals" (formula "20") (term "1,1,0"))
                        (rule "times_zero_1" (formula "20") (term "1,0"))
                        (rule "add_zero_right" (formula "20") (term "0"))
                        (rule "leq_literals" (formula "20"))
                        (rule "closeFalse" (formula "20"))
                     )
                  )
               )
               (branch "Use Case"
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "eqSymm" (formula "11") (term "0,1"))
                  (rule "eqSymm" (formula "11"))
                  (rule "polySimp_elimSub" (formula "11") (term "0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                  (rule "polySimp_homoEq" (formula "11") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "11") (term "1,0,2,0"))
                  (rule "polySimp_addComm0" (formula "11") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "1,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "11") (term "0,0,0,0"))
                  (rule "castedGetAny" (formula "11") (term "1,1"))
                  (rule "castedGetAny" (formula "11") (term "2,0"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "2"))
                  (rule "polySimp_sepNegMonomial" (formula "11") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "pullOutSelect" (formula "11") (term "0,1,1") (inst "selectSK=LinkedList_nodeseq_0"))
                  (rule "applyEq" (formula "12") (term "0,2,0") (ifseqformula "1"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")) (ifInst ""  (formula "7")))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "12") (term "0,0,0") (inst "selectSK=LinkedList_size_0"))
                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")) (ifInst ""  (formula "8")))
                  (rule "polySimp_homoEq" (formula "13") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "5"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "polySimp_sepPosMonomial" (formula "13") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1"))
                  (rule "polySimp_rightDist" (formula "5") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                  (rule "mul_literals" (formula "5") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "13") (term "1") (inst "selectSK=Node_next_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
                  (rule "mul_literals" (formula "5") (term "0,0"))
                  (rule "add_zero_left" (formula "5") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                  (rule "mul_literals" (formula "5") (term "1"))
                  (rule "nnf_imp2or" (formula "4") (term "0"))
                  (rule "inEqSimp_notGeq" (formula "4") (term "0,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0"))
                  (rule "mul_literals" (formula "4") (term "1,0,0"))
                  (rule "nnf_imp2or" (formula "4") (term "1,0"))
                  (rule "inEqSimp_notLeq" (formula "4") (term "0,1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,1,0"))
                  (rule "add_zero_left" (formula "4") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,0,1,0"))
                  (rule "Class_invariant_axiom_for_LinkedList" (formula "13") (inst "i=i") (inst "j=j") (inst "i_0=i_0") (ifseqformula "14"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "eqSymm" (formula "19"))
                  (rule "eqSymm" (formula "20"))
                  (rule "eqSymm" (formula "18"))
                  (rule "eqSymm" (formula "17"))
                  (rule "eqSymm" (formula "16") (term "0,1,0,1,0,1,0"))
                  (rule "eqSymm" (formula "16") (term "1,1,0"))
                  (rule "eqSymm" (formula "16") (term "1,0,0,1,0"))
                  (rule "eqSymm" (formula "16") (term "1,1,0,1,0,1,0"))
                  (rule "eqSymm" (formula "15"))
                  (rule "polySimp_elimSub" (formula "18") (term "1,0,2,0"))
                  (rule "mul_literals" (formula "18") (term "1,1,0,2,0"))
                  (rule "polySimp_elimSub" (formula "16") (term "1,0,0,1,1,0"))
                  (rule "mul_literals" (formula "16") (term "1,1,0,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "16") (term "1,0,2,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "18") (term "1,0,2,0"))
                  (rule "polySimp_addComm0" (formula "16") (term "1,0,0,1,1,0"))
                  (rule "castedGetAny" (formula "16") (term "0,0,0,0,0,1,0"))
                  (rule "subsetSingletonLeft" (formula "13"))
                  (rule "subsetSingletonLeft" (formula "14"))
                  (rule "castedGetAny" (formula "17") (term "2,0"))
                  (rule "castedGetAny" (formula "16") (term "0,0,1,0,1,0,1,0"))
                  (rule "castedGetAny" (formula "16") (term "1,0,1,0,1,0,1,0"))
                  (rule "castedGetAny" (formula "16") (term "1,1,1,1,0"))
                  (rule "castedGetAny" (formula "16") (term "1,1,1,0,0,1,0"))
                  (rule "castedGetAny" (formula "16") (term "0,1,0,0,1,0"))
                  (rule "eqSymm" (formula "16") (term "1,0,0,1,0"))
                  (rule "castedGetAny" (formula "15") (term "0,1,0,1,0"))
                  (rule "castedGetAny" (formula "16") (term "2,0,1,1,0"))
                  (rule "castedGetAny" (formula "18") (term "2,0"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0"))
                  (rule "elementOfUnionEQ" (formula "2") (term "0,0") (ifseqformula "15"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "applyEqReverse" (formula "7") (term "1,1") (ifseqformula "2"))
                  (rule "applyEqReverse" (formula "22") (term "1,1,0,0") (ifseqformula "2"))
                  (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "polySimp_homoEq" (formula "21") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "6"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "polySimp_sepPosMonomial" (formula "21") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1"))
                  (rule "polySimp_rightDist" (formula "6") (term "1"))
                  (rule "mul_literals" (formula "6") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                  (rule "inEqSimp_contradEq7" (formula "17") (term "0,0") (ifseqformula "4"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "17") (term "0,0,0,0"))
                  (rule "leq_literals" (formula "17") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_contradEq7" (formula "16") (term "0,0") (ifseqformula "4"))
                  (rule "mul_literals" (formula "16") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
                  (rule "leq_literals" (formula "16") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "elementOfUnionEQ" (formula "13") (ifseqformula "14"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "elementOfUnionEQ" (formula "1") (term "0,0,0,0") (ifseqformula "13"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfInfiniteUnion" (formula "1") (term "1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,1,0,0,0,0"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0,0,0,0") (ifseqformula "19"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnionEQ" (formula "12") (ifseqformula "13"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "elementOfUnionEQ" (formula "2") (term "0,0") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "applyEqReverse" (formula "1") (term "0,1,1,0") (ifseqformula "2"))
                  (rule "applyEqReverse" (formula "1") (term "0,1,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEqReverse" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEqReverse" (formula "1") (term "0,1,2,0") (ifseqformula "2"))
                  (rule "applyEqReverse" (formula "19") (term "0,2,0") (ifseqformula "2"))
                  (rule "applyEqReverse" (formula "1") (term "0,1,0,0,1,1,0,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "nnf_imp2or" (formula "12") (term "0"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                  (rule "nnf_imp2or" (formula "12") (term "0,1,0,1,0"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0,1,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0,1,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,0,1,0"))
                  (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,0,1,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,1,0,1,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0,1,0"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,0,1,0,1,0"))
                  (rule "nnf_imp2or" (formula "12") (term "1,0,1,0,1,0"))
                  (rule "commute_or" (formula "2") (term "1,0"))
                  (rule "shift_paren_or" (formula "2") (term "0"))
                  (rule "commute_or" (formula "2") (term "0,0"))
                  (rule "commute_and_2" (formula "1") (term "0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "12") (term "0,1,0,1,0"))
                  (rule "commute_or_2" (formula "12") (term "0,0,1,0,1,0"))
                  (rule "ifthenelse_to_or_left" (formula "12") (term "1,1,0"))
                  (rule "eqSymm" (formula "12") (term "1,0,1,1,0"))
                  (rule "eqSymm" (formula "12") (term "1,1,1,1,0"))
                  (rule "commute_or" (formula "12") (term "0,1,1,0"))
                  (rule "commute_or" (formula "12") (term "1,1,1,0"))
                  (rule "commute_or" (formula "12") (term "0,0,0,1,0,1,0"))
                  (rule "commute_and" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "lenNonNegative" (formula "15") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "15"))
                  (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                  (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "3"))
                  (rule "leq_literals" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "lenNonNegative" (formula "16") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "16"))
                  (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                  (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "3"))
                  (rule "leq_literals" (formula "16") (term "0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "ifthenelse_split" (formula "18") (term "0"))
                  (branch "self.size = 1 + i_0 TRUE"
                     (rule "eqSymm" (formula "19"))
                     (rule "applyEq" (formula "12") (term "1,1,1,0,0,1,0") (ifseqformula "1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "1,1,0,0,1,0"))
                     (rule "add_literals" (formula "12") (term "0,1,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "12") (term "1,1,0,0,1,0"))
                     (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "15") (term "1,1,0") (ifseqformula "1"))
                     (rule "polySimp_addAssoc" (formula "15") (term "1,0"))
                     (rule "add_literals" (formula "15") (term "0,1,0"))
                     (rule "add_zero_left" (formula "15") (term "1,0"))
                     (rule "applyEq" (formula "13") (term "1,1,0,0,1,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0"))
                     (rule "add_literals" (formula "4") (term "0,0"))
                     (rule "add_zero_left" (formula "4") (term "0"))
                     (rule "applyEq" (formula "2") (term "1,1,1,0,0,0,0,0") (ifseqformula "1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "1,1,0,0,0,0,0"))
                     (rule "add_literals" (formula "2") (term "0,1,1,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "2") (term "1,1,0,0,0,0,0"))
                     (rule "applyEq" (formula "6") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "6"))
                     (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                     (rule "add_literals" (formula "6") (term "1,0"))
                     (rule "times_zero_1" (formula "6") (term "0"))
                     (rule "leq_literals" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "14"))
                     (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "14"))
                     (rule "applyEq" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "14"))
                     (rule "applyEq" (formula "2") (term "1,0,0,1,1,0,0") (ifseqformula "14"))
                     (rule "applyEq" (formula "2") (term "1,0,0,0,0,0,0,0") (ifseqformula "14"))
                     (rule "applyEq" (formula "12") (term "1,1,0,1,0,1,1,0") (ifseqformula "1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "1,0,1,0,1,1,0"))
                     (rule "add_literals" (formula "12") (term "0,1,0,1,0,1,1,0"))
                     (rule "add_zero_left" (formula "12") (term "1,0,1,0,1,1,0"))
                     (rule "applyEq" (formula "16") (term "1") (ifseqformula "1"))
                     (rule "applyEq" (formula "12") (term "1,1,1,1,1,1,0") (ifseqformula "1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "1,1,1,1,1,0"))
                     (rule "add_literals" (formula "12") (term "0,1,1,1,1,1,0"))
                     (rule "add_zero_left" (formula "12") (term "1,1,1,1,1,0"))
                     (rule "applyEq" (formula "15") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_invertInEq0" (formula "4"))
                     (rule "times_zero_2" (formula "4") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "all_pull_out1" (formula "11") (term "0,1,0"))
                     (rule "seqGetAlphaCast" (formula "12") (term "0"))
                     (rule "castedGetAny" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "all_pull_out0" (formula "11") (term "1,0"))
                     (rule "shift_paren_and" (formula "11") (term "0,1,0"))
                     (rule "all_pull_out3" (formula "11") (term "0"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0"))
                     (rule "distr_forallAnd" (formula "11") (term "0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "distr_forallAnd" (formula "11"))
                     (rule "andLeft" (formula "11"))
                     (rule "shift_paren_or" (formula "12") (term "0"))
                     (rule "commute_or_2" (formula "12") (term "0,0"))
                     (rule "inEqSimp_or_weaken3" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0"))
                     (rule "distr_forallAnd" (formula "11") (term "0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "distr_forallAnd" (formula "11"))
                     (rule "andLeft" (formula "11"))
                     (rule "commute_or_2" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "inEqSimp_homoInEq1" (formula "12") (term "1,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,1"))
                     (rule "add_literals" (formula "12") (term "1,1,0,1,1"))
                     (rule "times_zero_1" (formula "12") (term "1,0,1,1"))
                     (rule "add_zero_right" (formula "12") (term "0,1,1"))
                     (rule "leq_literals" (formula "12") (term "1,1"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "applyEq" (formula "12") (term "1,0,0") (ifseqformula "15"))
                     (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "12") (term "0,1"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "12"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0"))
                     (rule "distr_forallAnd" (formula "11") (term "0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "distr_forallAnd" (formula "11"))
                     (rule "andLeft" (formula "11"))
                     (rule "commute_or_2" (formula "12") (term "0,0"))
                     (rule "commute_or_2" (formula "12") (term "0,0,0"))
                     (rule "cnf_rightDist" (formula "11") (term "0"))
                     (rule "distr_forallAnd" (formula "11"))
                     (rule "andLeft" (formula "11"))
                     (rule "commute_or" (formula "12") (term "0"))
                     (rule "commute_or_2" (formula "11") (term "0"))
                     (rule "commute_or" (formula "11") (term "0,0"))
                     (rule "commute_or_2" (formula "13") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "13") (term "0,0,0,0,0"))
                     (rule "allLeft" (formula "3") (inst "t=i_0"))
                     (rule "inEqSimp_homoInEq1" (formula "3") (term "1"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,1"))
                     (rule "add_literals" (formula "3") (term "1,1,0,1"))
                     (rule "times_zero_1" (formula "3") (term "1,0,1"))
                     (rule "add_zero_right" (formula "3") (term "0,1"))
                     (rule "leq_literals" (formula "3") (term "1"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEq" (formula "3") (term "1,0,0") (ifseqformula "18"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (term "1") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "3") (term "0,1"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "replace_known_left" (formula "2") (term "0,1,1,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "ifthenelse_negated" (formula "2") (term "0"))
                     (rule "allLeft" (formula "4") (inst "t=Z(0(#))"))
                     (rule "leq_literals" (formula "4") (term "1,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "4") (term "1"))
                     (rule "times_zero_2" (formula "4") (term "1,0,1"))
                     (rule "add_zero_right" (formula "4") (term "0,1"))
                     (rule "applyEq" (formula "4") (term "1,0,0") (ifseqformula "18"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1"))
                     (rule "mul_literals" (formula "4") (term "1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "4") (term "1") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "4") (term "0,1"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "seqGetAlphaCast" (formula "19") (term "0"))
                     (rule "castedGetAny" (formula "19") (term "0"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "ifthenelse_split" (formula "2") (term "0"))
                     (branch "exists int i_0; ( (Node)self.nodeseq[i_0] = self.last & i_0 >= 0 & i_0 <= i_0) TRUE"
                        (rule "exLeft" (formula "2") (inst "sk=i_0_0"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "closeTrue" (formula "26"))
                     )
                     (branch "exists int i_0; ( (Node)self.nodeseq[i_0] = self.last & i_0 >= 0 & i_0 <= i_0) FALSE"
                        (rule "applyEqReverse" (formula "24") (term "0") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "nnf_ex2all" (formula "21"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                        (rule "allLeft" (formula "14") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "14") (term "0,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "eqSymm" (formula "14") (term "1"))
                        (rule "inEqSimp_homoInEq1" (formula "14") (term "0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "applyEq" (formula "14") (term "1,1,1") (ifseqformula "19"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0"))
                        (rule "mul_literals" (formula "14") (term "1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "14") (term "0,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "allLeft" (formula "13") (inst "t=i_0"))
                        (rule "inEqSimp_homoInEq1" (formula "13") (term "1"))
                        (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,1"))
                        (rule "add_literals" (formula "13") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "13") (term "1,0,1"))
                        (rule "add_zero_right" (formula "13") (term "0,1"))
                        (rule "leq_literals" (formula "13") (term "1"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "applyEq" (formula "13") (term "0,0,0") (ifseqformula "21"))
                        (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "13") (term "0,1"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "notLeft" (formula "13"))
                        (rule "allLeft" (formula "15") (inst "t=i_0"))
                        (rule "eqSymm" (formula "15") (term "1"))
                        (rule "inEqSimp_homoInEq1" (formula "15") (term "1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,1,0"))
                        (rule "add_literals" (formula "15") (term "1,1,0,1,0"))
                        (rule "times_zero_1" (formula "15") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "15") (term "0,1,0"))
                        (rule "leq_literals" (formula "15") (term "1,0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "applyEq" (formula "15") (term "1,1,1") (ifseqformula "21"))
                        (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "15") (term "0,0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "allLeft" (formula "13") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "13") (term "1,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_homoInEq1" (formula "13") (term "1"))
                        (rule "mul_literals" (formula "13") (term "1,0,1"))
                        (rule "add_zero_right" (formula "13") (term "0,1"))
                        (rule "applyEq" (formula "13") (term "0,0,0") (ifseqformula "21"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1"))
                        (rule "mul_literals" (formula "13") (term "1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "13") (term "0,1"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "notLeft" (formula "13"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1") (ifseqformula "7"))
                        (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "4")))
                        (rule "true_left" (formula "20"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "1") (ifseqformula "7"))
                        (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "26")))
                        (rule "true_left" (formula "21"))
                        (rule "allLeft" (formula "1") (inst "t=i_0"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,1"))
                        (rule "add_literals" (formula "1") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,1"))
                        (rule "add_zero_right" (formula "1") (term "0,1"))
                        (rule "leq_literals" (formula "1") (term "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "self.size = 1 + i_0 FALSE"
                     (rule "inEqSimp_strengthen1" (formula "5") (ifseqformula "18"))
                     (rule "polySimp_addAssoc" (formula "5") (term "1"))
                     (rule "add_literals" (formula "5") (term "0,1"))
                     (rule "inEqSimp_contradEq7" (formula "18") (ifseqformula "5"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "18") (term "0,0,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0"))
                     (rule "add_literals" (formula "18") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0"))
                     (rule "add_literals" (formula "18") (term "0,0"))
                     (rule "leq_literals" (formula "18") (term "0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "false_right" (formula "18"))
                     (rule "all_pull_out1" (formula "12") (term "0,1,0"))
                     (rule "all_pull_out0" (formula "12") (term "1,0"))
                     (rule "shift_paren_and" (formula "12") (term "0,1,0"))
                     (rule "all_pull_out3" (formula "12") (term "0"))
                     (rule "cnf_rightDist" (formula "12") (term "0,0"))
                     (rule "distr_forallAnd" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "distr_forallAnd" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "shift_paren_or" (formula "13") (term "0"))
                     (rule "commute_or_2" (formula "13") (term "0,0"))
                     (rule "inEqSimp_or_weaken3" (formula "13") (term "0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "1,0,1,0"))
                     (rule "add_literals" (formula "13") (term "0,1,0,1,0"))
                     (rule "add_zero_left" (formula "13") (term "1,0,1,0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "cnf_rightDist" (formula "12") (term "0,0"))
                     (rule "distr_forallAnd" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "distr_forallAnd" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "commute_or_2" (formula "13") (term "0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "inEqSimp_homoInEq1" (formula "13") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,1,1"))
                     (rule "mul_literals" (formula "13") (term "0,1,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,1,1"))
                     (rule "polySimp_addComm0" (formula "13") (term "0,0,1,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,1,1"))
                     (rule "add_literals" (formula "13") (term "1,1,0,1,1"))
                     (rule "times_zero_1" (formula "13") (term "1,0,1,1"))
                     (rule "add_zero_right" (formula "13") (term "0,1,1"))
                     (rule "leq_literals" (formula "13") (term "1,1"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "inEqSimp_homoInEq0" (formula "13") (term "1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,1"))
                     (rule "mul_literals" (formula "13") (term "0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,1"))
                     (rule "add_literals" (formula "13") (term "0,0,1"))
                     (rule "add_zero_left" (formula "13") (term "0,1"))
                     (rule "applyEq" (formula "13") (term "1,0,0") (ifseqformula "16"))
                     (rule "inEqSimp_invertInEq1" (formula "13") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,1"))
                     (rule "times_zero_2" (formula "13") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "0,1"))
                     (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "13") (term "0,1"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "cnf_rightDist" (formula "12") (term "0,0"))
                     (rule "distr_forallAnd" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "distr_forallAnd" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "commute_or_2" (formula "13") (term "0,0"))
                     (rule "commute_or_2" (formula "13") (term "0,0,0"))
                     (rule "cnf_rightDist" (formula "12") (term "0"))
                     (rule "distr_forallAnd" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "commute_or_2" (formula "12") (term "0"))
                     (rule "commute_or" (formula "13") (term "0"))
                     (rule "commute_or" (formula "12") (term "0,0"))
                     (rule "commute_or_2" (formula "14") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "14") (term "0,0,0,0,0"))
                     (rule "seqGetAlphaCast" (formula "18") (term "0"))
                     (rule "castedGetAny" (formula "18") (term "0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch " !exists int i_0; ( (Node)self.nodeseq[i_0] = (Node)self.nodeseq[i_0] & i_0 >= 0 & i_0 <= -1 + self.size) | !(Node)self.nodeseq[i_0] = null & !(Node)self.nodeseq[i_0].<created> = TRUE TRUE"
                        (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "eqSymm" (formula "22"))
                        (rule "seqGetAlphaCast" (formula "17") (term "0"))
                        (rule "castedGetAny" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "allLeft" (formula "2") (inst "t=add(Z(1(#)), i_0)"))
                        (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
                        (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,1,0"))
                        (rule "add_literals" (formula "2") (term "0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "2") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1"))
                        (rule "add_literals" (formula "2") (term "0,0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1"))
                        (rule "add_literals" (formula "2") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "2") (term "0,0,1"))
                        (rule "leq_literals" (formula "2") (term "0,1"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "2") (term "0,1"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "allLeft" (formula "3") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "3") (term "1,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "inEqSimp_commuteGeq" (formula "3") (term "1"))
                        (rule "applyEq" (formula "3") (term "1,0,0") (ifseqformula "19"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (term "1") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "3") (term "0,1"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "allLeft" (formula "4") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedList::$size))"))
                        (rule "inEqSimp_homoInEq1" (formula "4") (term "1"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,1"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "4") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,1"))
                        (rule "add_literals" (formula "4") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "4") (term "1,0,1"))
                        (rule "add_zero_right" (formula "4") (term "0,1"))
                        (rule "leq_literals" (formula "4") (term "1"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "4") (term "1"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,1"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                        (rule "add_literals" (formula "4") (term "0,0,1"))
                        (rule "add_zero_left" (formula "4") (term "0,1"))
                        (rule "applyEq" (formula "4") (term "1,0,0") (ifseqformula "21"))
                        (rule "inEqSimp_invertInEq1" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0,1"))
                        (rule "mul_literals" (formula "4") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (term "1") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "4") (term "0,1"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "allLeft" (formula "5") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "5") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (term "1,0") (ifseqformula "8"))
                        (rule "qeq_literals" (formula "5") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (term "1") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1"))
                        (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "5") (term "0,0,1"))
                        (rule "leq_literals" (formula "5") (term "0,1"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "replace_known_left" (formula "1") (term "0,1,1") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "nnf_ex2all" (formula "24"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "1") (ifseqformula "10"))
                        (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "1") (ifseqformula "10"))
                        (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "seqGetAlphaCast" (formula "26") (term "1"))
                        (rule "castedGetAny" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "seqGetAlphaCast" (formula "26") (term "1,0"))
                        (rule "castedGetAny" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "allLeft" (formula "1") (inst "t=i_0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "9"))
                        (rule "qeq_literals" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "10"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "leq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch " !exists int i_0; ( (Node)self.nodeseq[i_0] = (Node)self.nodeseq[i_0] & i_0 >= 0 & i_0 <= -1 + self.size) | !(Node)self.nodeseq[i_0] = null & !(Node)self.nodeseq[i_0].<created> = TRUE FALSE"
                        (rule "orRight" (formula "21"))
                        (rule "notRight" (formula "21"))
                        (rule "exLeft" (formula "1") (inst "sk=i_0_0"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "eqSymm" (formula "25"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                        (rule "seqGetAlphaCast" (formula "19") (term "0"))
                        (rule "castedGetAny" (formula "19") (term "0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "allLeft" (formula "4") (inst "t=add(Z(1(#)), i_0)"))
                        (rule "inEqSimp_commuteGeq" (formula "4") (term "1"))
                        (rule "inEqSimp_homoInEq0" (formula "4") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,1,0"))
                        (rule "add_literals" (formula "4") (term "0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "4") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (term "1") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "4") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0,0,1"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "4") (term "0,0,1"))
                        (rule "leq_literals" (formula "4") (term "0,1"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (term "1") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "4") (term "0,1"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "allLeft" (formula "5") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, LinkedList::$size))"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,1"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "5") (term "0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,1"))
                        (rule "add_literals" (formula "5") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "5") (term "1,0,1"))
                        (rule "add_zero_right" (formula "5") (term "0,1"))
                        (rule "leq_literals" (formula "5") (term "1"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "inEqSimp_homoInEq0" (formula "5") (term "1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,1"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0,1"))
                        (rule "add_literals" (formula "5") (term "0,0,1"))
                        (rule "add_zero_left" (formula "5") (term "0,1"))
                        (rule "applyEq" (formula "5") (term "1,0,0") (ifseqformula "22"))
                        (rule "inEqSimp_invertInEq1" (formula "5") (term "1"))
                        (rule "mul_literals" (formula "5") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "5") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (term "1") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "5") (term "0,1"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "allLeft" (formula "6") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "6") (term "1,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "inEqSimp_commuteGeq" (formula "6") (term "1"))
                        (rule "applyEq" (formula "6") (term "1,0,0") (ifseqformula "22"))
                        (rule "inEqSimp_contradInEq1" (formula "6") (term "1") (ifseqformula "8"))
                        (rule "qeq_literals" (formula "6") (term "0,1"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "allLeft" (formula "7") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "7") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "7") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "1") (ifseqformula "11"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "7") (term "0,0,1"))
                        (rule "leq_literals" (formula "7") (term "0,1"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "replace_known_left" (formula "27") (term "0,1") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "false_right" (formula "27"))
                        (rule "allLeft" (formula "22") (inst "t=i_0"))
                        (rule "replace_known_right" (formula "22") (term "0,0") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_homoInEq1" (formula "22") (term "1"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1"))
                        (rule "mul_literals" (formula "22") (term "0,1,1"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "11"))
                        (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,0,0,1"))
                        (rule "add_literals" (formula "22") (term "0,0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                        (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "22") (term "0,0,1"))
                        (rule "leq_literals" (formula "22") (term "0,1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_contradInEq1" (formula "22") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "22") (term "0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "closeFalse" (formula "22"))
                     )
                  )
               )
            )
         )
      )
      (branch "Case 2"
         (rule "eqSymm" (formula "8"))
         (rule "castedGetAny" (formula "8") (term "2,0"))
         (rule "pullOutSelect" (formula "8") (term "0,0,0") (inst "selectSK=LinkedList_size_0"))
         (rule "simplifySelectOfAnon" (formula "1"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "4")))
         (rule "elementOfSetMinus" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "ifthenelse_negated" (formula "1") (term "0"))
         (rule "pullOutSelect" (formula "9") (term "1") (inst "selectSK=LinkedList_first_0"))
         (rule "simplifySelectOfAnon" (formula "1"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")) (ifInst ""  (formula "5")))
         (rule "elementOfSetMinus" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "ifthenelse_negated" (formula "1") (term "0"))
         (rule "pullOutSelect" (formula "10") (term "0,2,0") (inst "selectSK=LinkedList_nodeseq_0"))
         (rule "simplifySelectOfAnon" (formula "1"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "6")))
         (rule "elementOfSetMinus" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "ifthenelse_negated" (formula "1") (term "0"))
         (rule "Class_invariant_axiom_for_LinkedList" (formula "9") (inst "i=i") (inst "j=j") (inst "i_0=i_0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "eqSymm" (formula "14"))
         (rule "eqSymm" (formula "15"))
         (rule "eqSymm" (formula "16"))
         (rule "eqSymm" (formula "13"))
         (rule "eqSymm" (formula "12") (term "1,0,0,1,0"))
         (rule "eqSymm" (formula "12") (term "0,1,0,1,0,1,0"))
         (rule "eqSymm" (formula "12") (term "1,1,0,1,0,1,0"))
         (rule "eqSymm" (formula "12") (term "1,1,0"))
         (rule "eqSymm" (formula "11"))
         (rule "polySimp_elimSub" (formula "14") (term "1,0,2,0"))
         (rule "mul_literals" (formula "14") (term "1,1,0,2,0"))
         (rule "polySimp_elimSub" (formula "12") (term "1,0,0,1,1,0"))
         (rule "mul_literals" (formula "12") (term "1,1,0,0,1,1,0"))
         (rule "polySimp_addComm0" (formula "12") (term "1,0,2,0,1,1,0"))
         (rule "polySimp_addComm0" (formula "14") (term "1,0,2,0"))
         (rule "polySimp_addComm0" (formula "12") (term "1,0,0,1,1,0"))
         (rule "castedGetAny" (formula "12") (term "0,0,0,0,0,1,0"))
         (rule "subsetSingletonLeft" (formula "9"))
         (rule "subsetSingletonLeft" (formula "10"))
         (rule "castedGetAny" (formula "13") (term "2,0"))
         (rule "castedGetAny" (formula "12") (term "1,1,1,0,0,1,0"))
         (rule "castedGetAny" (formula "12") (term "0,1,0,0,1,0"))
         (rule "eqSymm" (formula "12") (term "1,0,0,1,0"))
         (rule "castedGetAny" (formula "12") (term "1,0,1,0,1,0,1,0"))
         (rule "castedGetAny" (formula "12") (term "0,0,1,0,1,0,1,0"))
         (rule "castedGetAny" (formula "12") (term "1,1,1,1,0"))
         (rule "castedGetAny" (formula "11") (term "0,1,0,1,0"))
         (rule "castedGetAny" (formula "12") (term "2,0,1,1,0"))
         (rule "castedGetAny" (formula "14") (term "2,0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0,1,0"))
         (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
         (rule "elementOfUnionEQ" (formula "2") (term "0,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "applyEqReverse" (formula "18") (term "1") (ifseqformula "2"))
         (rule "hideAuxiliaryEq" (formula "2"))
         (rule "elementOfUnionEQ" (formula "2") (term "0,0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "applyEqReverse" (formula "17") (term "0,0,0") (ifseqformula "2"))
         (rule "hideAuxiliaryEq" (formula "2"))
         (rule "elementOfUnionEQ" (formula "8") (ifseqformula "9"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "elementOfUnionEQ" (formula "1") (term "0,0") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "15") (term "0,2,0") (ifseqformula "1"))
         (rule "close" (formula "15") (ifseqformula "10"))
      )
   )
   (branch "Case 2"
      (rule "eqSymm" (formula "8"))
      (rule "polySimp_elimSub" (formula "8") (term "1,0,2,0"))
      (rule "mul_literals" (formula "8") (term "1,1,0,2,0"))
      (rule "polySimp_addComm0" (formula "8") (term "1,0,2,0"))
      (rule "castedGetAny" (formula "8") (term "2,0"))
      (rule "pullOutSelect" (formula "8") (term "1") (inst "selectSK=LinkedList_last_0"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "4")))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "pullOutSelect" (formula "9") (term "0,0,0") (inst "selectSK=LinkedList_size_0"))
      (rule "applyEq" (formula "10") (term "1,1,2,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")) (ifInst ""  (formula "5")))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "pullOutSelect" (formula "10") (term "0,2,0") (inst "selectSK=LinkedList_nodeseq_0"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "6")))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "Class_invariant_axiom_for_LinkedList" (formula "9") (inst "i=i") (inst "j=j") (inst "i_0=i_0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "eqSymm" (formula "16"))
      (rule "eqSymm" (formula "15"))
      (rule "eqSymm" (formula "14"))
      (rule "eqSymm" (formula "13"))
      (rule "eqSymm" (formula "12") (term "0,1,0,1,0,1,0"))
      (rule "eqSymm" (formula "12") (term "1,0,0,1,0"))
      (rule "eqSymm" (formula "12") (term "1,1,0"))
      (rule "eqSymm" (formula "12") (term "1,1,0,1,0,1,0"))
      (rule "eqSymm" (formula "11"))
      (rule "polySimp_elimSub" (formula "14") (term "1,0,2,0"))
      (rule "mul_literals" (formula "14") (term "1,1,0,2,0"))
      (rule "polySimp_elimSub" (formula "12") (term "1,0,0,1,1,0"))
      (rule "mul_literals" (formula "12") (term "1,1,0,0,1,1,0"))
      (rule "polySimp_addComm0" (formula "12") (term "1,0,2,0,1,1,0"))
      (rule "polySimp_addComm0" (formula "14") (term "1,0,2,0"))
      (rule "polySimp_addComm0" (formula "12") (term "1,0,0,1,1,0"))
      (rule "castedGetAny" (formula "12") (term "0,0,0,0,0,1,0"))
      (rule "subsetSingletonLeft" (formula "9"))
      (rule "subsetSingletonLeft" (formula "10"))
      (rule "castedGetAny" (formula "13") (term "2,0"))
      (rule "castedGetAny" (formula "12") (term "0,0,1,0,1,0,1,0"))
      (rule "castedGetAny" (formula "12") (term "1,0,1,0,1,0,1,0"))
      (rule "castedGetAny" (formula "12") (term "1,1,1,0,0,1,0"))
      (rule "castedGetAny" (formula "12") (term "0,1,0,0,1,0"))
      (rule "eqSymm" (formula "12") (term "1,0,0,1,0"))
      (rule "castedGetAny" (formula "12") (term "1,1,1,1,0"))
      (rule "castedGetAny" (formula "11") (term "0,1,0,1,0"))
      (rule "castedGetAny" (formula "12") (term "2,0,1,1,0"))
      (rule "castedGetAny" (formula "14") (term "2,0"))
      (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0,1,0"))
      (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
      (rule "elementOfUnionEQ" (formula "9") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "elementOfUnionEQ" (formula "9") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "elementOfUnionEQ" (formula "1") (term "0,0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "16") (term "0,2,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "elementOfUnionEQ" (formula "1") (term "0,0") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "15") (term "1,1,2,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "15") (term "0,0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "applyEq" (formula "14") (term "0") (ifseqformula "10"))
      (rule "elementOfUnionEQ" (formula "1") (term "0,0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Case 2"
   (rule "andRight" (formula "8"))
   (branch "Case 1"
      (rule "eqSymm" (formula "8"))
      (rule "pullOutSelect" (formula "8") (term "0,0") (inst "selectSK=List_seq_0"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "4")))
      (rule "eqSymm" (formula "9"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "pullOutSelect" (formula "9") (term "0") (inst "selectSK=LinkedList_size_0"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")) (ifInst ""  (formula "5")))
      (rule "eqSymm" (formula "10"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "Class_invariant_axiom_for_LinkedList" (formula "8") (inst "i=i") (inst "j=j") (inst "i_0=i_0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "eqSymm" (formula "15"))
      (rule "eqSymm" (formula "14"))
      (rule "eqSymm" (formula "13"))
      (rule "eqSymm" (formula "12"))
      (rule "eqSymm" (formula "11") (term "1,0,0,1,0"))
      (rule "eqSymm" (formula "11") (term "1,1,0"))
      (rule "eqSymm" (formula "11") (term "0,1,0,1,0,1,0"))
      (rule "eqSymm" (formula "11") (term "1,1,0,1,0,1,0"))
      (rule "eqSymm" (formula "10"))
      (rule "polySimp_elimSub" (formula "13") (term "1,0,2,0"))
      (rule "mul_literals" (formula "13") (term "1,1,0,2,0"))
      (rule "polySimp_elimSub" (formula "11") (term "1,0,0,1,1,0"))
      (rule "mul_literals" (formula "11") (term "1,1,0,0,1,1,0"))
      (rule "polySimp_addComm0" (formula "11") (term "1,0,2,0,1,1,0"))
      (rule "polySimp_addComm0" (formula "13") (term "1,0,2,0"))
      (rule "polySimp_addComm0" (formula "11") (term "1,0,0,1,1,0"))
      (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,1,0"))
      (rule "subsetSingletonLeft" (formula "8"))
      (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "applyEqReverse" (formula "17") (term "0,0") (ifseqformula "2"))
      (rule "hideAuxiliaryEq" (formula "2"))
      (rule "subsetSingletonLeft" (formula "8"))
      (rule "castedGetAny" (formula "11") (term "2,0"))
      (rule "castedGetAny" (formula "10") (term "1,1,1,0,0,1,0"))
      (rule "castedGetAny" (formula "10") (term "0,1,0,0,1,0"))
      (rule "eqSymm" (formula "10") (term "1,0,0,1,0"))
      (rule "castedGetAny" (formula "10") (term "1,1,1,1,0"))
      (rule "castedGetAny" (formula "10") (term "0,0,1,0,1,0,1,0"))
      (rule "castedGetAny" (formula "10") (term "1,0,1,0,1,0,1,0"))
      (rule "castedGetAny" (formula "9") (term "0,1,0,1,0"))
      (rule "castedGetAny" (formula "10") (term "2,0,1,1,0"))
      (rule "castedGetAny" (formula "12") (term "2,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0"))
      (rule "applyEq" (formula "16") (term "0") (ifseqformula "13"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0,1,0"))
      (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0"))
      (rule "elementOfUnionEQ" (formula "1") (term "0,0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Case 2"
      (rule "eqSymm" (formula "8"))
      (rule "pullOutSelect" (formula "8") (term "1") (inst "selectSK=LinkedList_size_0"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "4")))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "pullOutSelect" (formula "9") (term "0,0") (inst "selectSK=LinkedList_nodeseq_0"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")) (ifInst ""  (formula "5")))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "Class_invariant_axiom_for_LinkedList" (formula "8") (inst "i=i") (inst "j=j") (inst "i_0=i_0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "eqSymm" (formula "15"))
      (rule "eqSymm" (formula "14"))
      (rule "eqSymm" (formula "13"))
      (rule "eqSymm" (formula "12"))
      (rule "eqSymm" (formula "11") (term "1,1,0,1,0,1,0"))
      (rule "eqSymm" (formula "11") (term "0,1,0,1,0,1,0"))
      (rule "eqSymm" (formula "11") (term "1,0,0,1,0"))
      (rule "eqSymm" (formula "11") (term "1,1,0"))
      (rule "eqSymm" (formula "10"))
      (rule "polySimp_elimSub" (formula "13") (term "1,0,2,0"))
      (rule "mul_literals" (formula "13") (term "1,1,0,2,0"))
      (rule "polySimp_elimSub" (formula "11") (term "1,0,0,1,1,0"))
      (rule "mul_literals" (formula "11") (term "1,1,0,0,1,1,0"))
      (rule "polySimp_addComm0" (formula "11") (term "1,0,2,0,1,1,0"))
      (rule "polySimp_addComm0" (formula "13") (term "1,0,2,0"))
      (rule "polySimp_addComm0" (formula "11") (term "1,0,0,1,1,0"))
      (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,1,0"))
      (rule "subsetSingletonLeft" (formula "9"))
      (rule "subsetSingletonLeft" (formula "8"))
      (rule "castedGetAny" (formula "12") (term "2,0"))
      (rule "castedGetAny" (formula "11") (term "0,0,1,0,1,0,1,0"))
      (rule "castedGetAny" (formula "11") (term "1,0,1,0,1,0,1,0"))
      (rule "castedGetAny" (formula "11") (term "1,1,1,0,0,1,0"))
      (rule "castedGetAny" (formula "11") (term "0,1,0,0,1,0"))
      (rule "eqSymm" (formula "11") (term "1,0,0,1,0"))
      (rule "castedGetAny" (formula "11") (term "1,1,1,1,0"))
      (rule "castedGetAny" (formula "10") (term "0,1,0,1,0"))
      (rule "castedGetAny" (formula "11") (term "2,0,1,1,0"))
      (rule "castedGetAny" (formula "13") (term "2,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0,1,0"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
      (rule "elementOfUnionEQ" (formula "1") (term "0,0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "17") (term "0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "applyEq" (formula "16") (term "0") (ifseqformula "14"))
      (rule "elementOfUnionEQ" (formula "1") (term "0,0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
      (rule "closeFalse" (formula "1"))
   )
)
)
}
