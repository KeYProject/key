\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Jun 01 14:11:10 CEST 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=7000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=wdChecks-wdChecks\\:off , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , modelFields-modelFields\\:treatAsAxiom , assertions-assertions\\:safe , bigint-bigint\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , initialisation-initialisation\\:disableStaticInitialisation
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "src";

\proofObligation "#Proof Obligation Settings
#Mon Jun 01 14:11:10 CEST 2015
name=Relaxed[Relaxed\\:\\:isRelaxedPrefix([I,[I)].JML operation contract.0
contract=Relaxed[Relaxed\\:\\:isRelaxedPrefix([I,[I)].JML operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "kirsten" ) (keyVersion "4ff10e41cd53bfad321ed01e040d352805d54545"))

(autoModeTime "5851")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "heapAtPre"))
(rule "translateJavaSubInt" (formula "1") (term "0,2,1,1,0,1,1,1,1,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "notLeft" (formula "8"))
(rule "notLeft" (formula "7"))
(rule "eqSymm" (formula "9") (term "1,0,1,1,1,1,0,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "7"))
(builtin "One Step Simplification" (formula "2"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "8"))
(builtin "One Step Simplification" (formula "3"))
(rule "polySimp_elimSub" (formula "9") (term "0,2,0,1,0,1,1,1,1,0,0,1"))
(rule "mul_literals" (formula "9") (term "1,0,2,0,1,0,1,1,1,1,0,0,1"))
(rule "polySimp_addComm0" (formula "9") (term "0,2,0,1,0,1,1,1,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,1,1,1,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,1,1,1,1,0,0,1"))
(rule "polySimp_addComm1" (formula "9") (term "0,0,0,0,1,1,1,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0,1,1,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0,1,1,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,1,1,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,1,1,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "5"))
(rule "add_zero_right" (formula "5") (term "0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,1,1,1,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,1,0,0,1"))
(rule "assignment" (formula "9") (term "1"))
(builtin "One Step Simplification" (formula "9"))
(rule "inEqSimp_sepNegMonomial0" (formula "5"))
(rule "polySimp_mulLiterals" (formula "5") (term "0"))
(rule "polySimp_elimOne" (formula "5") (term "0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0,1,1,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0,1,1,1,0,0,1"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0,1,1,1,0,0,1"))
(rule "mul_literals" (formula "9") (term "0,1,1,0,0,0,1,1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0,1,1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0,1,1,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,1,1,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,1,1,1,0,0,1"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,1,1,1,0,0,1"))
(rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,1,1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,1,1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,1,1,1,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,0,1,1,1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,0,1,1,1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "9") (term "0,0,0,0,1,1,1,1,0,0,1"))
(rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
(rule "mul_literals" (formula "5") (term "0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5"))
(rule "mul_literals" (formula "5") (term "1"))
(rule "nnf_imp2or" (formula "10") (term "0,0,1,1,1,0,0,1"))
(rule "nnf_imp2or" (formula "10") (term "0,1,1,1,1,0,0,1"))
(rule "nnf_notAnd" (formula "10") (term "0,0,0,1,1,1,0,0,1"))
(rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,1,1,1,0,0,1"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,1,1,1,0,0,1"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,1,1,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,1,1,1,0,0,1"))
(rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,1,1,1,0,0,1"))
(rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,1,1,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,1,1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,1,1,0,0,1"))
(rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,1,1,1,0,0,1"))
(rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0,1,1,1,0,0,1"))
(rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,1,1,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,1,1,1,0,0,1"))
(rule "mul_literals" (formula "10") (term "1,0,0,0,0,1,1,1,0,0,1"))
(rule "nnf_notAnd" (formula "10") (term "0,0,1,1,1,1,0,0,1"))
(rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1,1,1,1,0,0,1"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,1,1,1,1,0,0,1"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,1,1,1,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,1,1,1,1,0,0,1"))
(rule "add_literals" (formula "10") (term "0,0,0,0,0,0,1,1,1,1,0,0,1"))
(rule "add_zero_left" (formula "10") (term "0,0,0,0,0,1,1,1,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,1,1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,1,1,1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "1,0,0,0,1,1,1,1,0,0,1"))
(rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1,1,1,1,0,0,1"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,1,1,1,0,0,1"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,1,1,1,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,1,1,1,0,0,1"))
(rule "add_literals" (formula "10") (term "0,0,0,1,0,0,1,1,1,1,0,0,1"))
(rule "add_zero_left" (formula "10") (term "0,0,1,0,0,1,1,1,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1,1,1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,1,1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,1,1,1,0,0,1"))
(rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_isRelaxedPrefix,savedHeapBefore_isRelaxedPrefix,_aBefore_isRelaxedPrefix,_patBefore_isRelaxedPrefix"))
(builtin "One Step Simplification" (formula "10"))
(rule "variableDeclarationAssign" (formula "10") (term "1"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "shift"))
(rule "assignment" (formula "10") (term "1"))
(builtin "One Step Simplification" (formula "10"))
(rule "variableDeclarationAssign" (formula "10") (term "1"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "k"))
(rule "assignment_read_length" (formula "10"))
(branch "Normal Execution (_pat != null)"
   (builtin "One Step Simplification" (formula "10"))
   (rule "for_to_while" (formula "10") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "i"))
   (rule "assignment" (formula "10") (term "1"))
   (builtin "One Step Simplification" (formula "10"))
   (builtin "Loop Invariant" (formula "10") (newnames "variant,b,heapBefore_LOOP,iBefore_LOOP,shiftBefore_LOOP,kBefore_LOOP,i_0,shift_0,k_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
   (branch "Invariant Initially Valid"
      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "1")) (ifInst ""  (formula "7")))
      (rule "translateJavaSubInt" (formula "10") (term "0,1,1,0,0,0"))
      (rule "translateJavaSubInt" (formula "10") (term "1,0,1,0,0,0"))
      (rule "translateJavaSubInt" (formula "10") (term "0,2,1,1,0,1"))
      (rule "leq_literals" (formula "10") (term "0,0,0,0,0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "sub_literals" (formula "10") (term "0,1,1,0,0,0"))
      (rule "sub_literals" (formula "10") (term "1,0,1,0,0,0"))
      (rule "equal_literals" (formula "10") (term "0,1,0,0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "leq_literals" (formula "10") (term "0,1,0,0,0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "eqSymm" (formula "10") (term "1,0,1"))
      (rule "polySimp_elimSub" (formula "10") (term "0,2,0,1,0,1"))
      (rule "mul_literals" (formula "10") (term "1,0,2,0,1,0,1"))
      (rule "polySimp_addComm0" (formula "10") (term "0,2,0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1"))
      (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0,1,0"))
      (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0,1"))
      (rule "add_literals" (formula "10") (term "0,0,1,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,0,0"))
      (rule "polySimp_pullOutFactor2b" (formula "10") (term "0,1,0,1,0,0"))
      (rule "add_literals" (formula "10") (term "1,1,0,1,0,1,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,1,0,1,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,1,0,1,0,0"))
      (rule "leq_literals" (formula "10") (term "1,0,1,0,0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1"))
      (rule "mul_literals" (formula "10") (term "1,1,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
      (rule "mul_literals" (formula "10") (term "1,1,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "10") (term "0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "10") (term "0,1,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0,1,0"))
      (rule "inEqSimp_subsumption1" (formula "10") (term "0,0,0") (ifseqformula "6"))
      (rule "leq_literals" (formula "10") (term "0,0,0,0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_subsumption1" (formula "10") (term "0,0") (ifseqformula "5"))
      (rule "leq_literals" (formula "10") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "nnf_imp2or" (formula "10") (term "0,1"))
      (rule "nnf_imp2or" (formula "10") (term "0,0"))
      (rule "nnf_notAnd" (formula "10") (term "0,0,1"))
      (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,1"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,1"))
      (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,1"))
      (rule "add_zero_left" (formula "10") (term "0,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1"))
      (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0,1"))
      (rule "add_literals" (formula "10") (term "0,0,1,0,0,1"))
      (rule "add_zero_left" (formula "10") (term "0,1,0,0,1"))
      (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
      (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "10") (term "0,1,0,0,0"))
      (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,0"))
      (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
      (rule "andRight" (formula "10"))
      (branch
         (rule "allRight" (formula "10") (inst "sk=j_16"))
         (rule "orRight" (formula "10"))
         (rule "orRight" (formula "10"))
         (rule "orRight" (formula "10"))
         (rule "inEqSimp_geqRight" (formula "12"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "inEqSimp_leqRight" (formula "11"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_geqRight" (formula "12"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3"))
         (rule "mul_literals" (formula "3") (term "1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "2"))
         (rule "qeq_literals" (formula "3") (term "0"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "closeFalse" (formula "3"))
      )
      (branch
         (rule "allRight" (formula "10") (inst "sk=j_15"))
         (rule "orRight" (formula "10"))
         (rule "orRight" (formula "10"))
         (rule "inEqSimp_geqRight" (formula "11"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_leqRight" (formula "11"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2"))
         (rule "mul_literals" (formula "2") (term "1"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "1"))
         (rule "mul_literals" (formula "8") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0"))
         (rule "add_literals" (formula "8") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "8"))
         (rule "mul_literals" (formula "8") (term "1"))
         (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "2"))
         (rule "qeq_literals" (formula "8") (term "0"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "closeFalse" (formula "8"))
      )
   )
   (branch "Body Preserves Invariant"
      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "7")))
      (builtin "One Step Simplification" (formula "12"))
      (rule "translateJavaSubInt" (formula "9") (term "0,1,1,0,0,0,0,0,0"))
      (rule "translateJavaSubInt" (formula "9") (term "1,0,1,0,0,0,0,0,0"))
      (rule "translateJavaSubInt" (formula "9") (term "0,2,1,1,0,1"))
      (rule "translateJavaSubInt" (formula "12") (term "0,1,1,1,0,1"))
      (rule "translateJavaSubInt" (formula "12") (term "0,1,1,1,1,0,1,1"))
      (rule "translateJavaSubInt" (formula "12") (term "0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1"))
      (rule "translateJavaSubInt" (formula "12") (term "0,2,1,1,0,1,0,0,1,1,1,0,1,1"))
      (rule "translateJavaSubInt" (formula "12") (term "1,0,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1"))
      (rule "andLeft" (formula "9"))
      (rule "impRight" (formula "13"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "10"))
      (rule "eqSymm" (formula "19") (term "1,0"))
      (rule "eqSymm" (formula "22") (term "0,0,1,0,1,1,1,0,1"))
      (rule "eqSymm" (formula "22") (term "1,1,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "eqSymm" (formula "22") (term "1,1,0,0,0,0,1,1,1,0,1"))
      (rule "eqSymm" (formula "22") (term "1,0,1,0,0,1,1,1,0,1"))
      (rule "eqSymm" (formula "17") (term "1"))
      (rule "eqSymm" (formula "15") (term "1"))
      (rule "polySimp_elimSub" (formula "22") (term "0,1,1,1,0"))
      (rule "polySimp_elimSub" (formula "22") (term "0,1,1,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "22") (term "0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "22") (term "1,0,1,0,0,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "12") (term "1"))
      (rule "polySimp_elimSub" (formula "13") (term "0"))
      (rule "polySimp_elimSub" (formula "19") (term "0,2,0,1,0"))
      (rule "mul_literals" (formula "19") (term "1,0,2,0,1,0"))
      (rule "polySimp_elimSub" (formula "22") (term "0,2,0,1,0,1,0,0,1,1,1,0,1"))
      (rule "mul_literals" (formula "22") (term "1,0,2,0,1,0,1,0,0,1,1,1,0,1"))
      (rule "polySimp_addComm0" (formula "22") (term "0,1,1,1,0"))
      (rule "polySimp_addComm0" (formula "22") (term "0,1,1,1,1,0,1"))
      (rule "polySimp_addComm0" (formula "19") (term "0,2,0,1,0"))
      (rule "polySimp_addComm0" (formula "22") (term "0,2,0,1,0,1,0,0,1,1,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
      (rule "polySimp_addComm1" (formula "19") (term "0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0,1,0,0,1,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0,1,0,0,1,1,1,0,1"))
      (rule "polySimp_addComm1" (formula "22") (term "0,0,0,0,1,0,0,1,1,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0,0,1,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0,0,1,1,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "22") (term "1,1,1,0,0,0,0,0,1,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1"))
      (rule "polySimp_addComm1" (formula "22") (term "0,1,1,1,0,0,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,1,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "1,1"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1"))
      (rule "polySimp_addComm1" (formula "16") (term "0,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,1,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "0,1,1,0,0,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "16") (term "0,1"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0"))
      (rule "inEqSimp_commuteLeq" (formula "10"))
      (rule "inEqSimp_commuteLeq" (formula "11"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0,0,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "13"))
      (rule "inEqSimp_homoInEq0" (formula "22") (term "0,1,0,0,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "times_zero_2" (formula "22") (term "1,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "add_zero_right" (formula "22") (term "0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_homoInEq0" (formula "12"))
      (rule "times_zero_2" (formula "12") (term "1,0"))
      (rule "add_zero_right" (formula "12") (term "0"))
      (rule "variableDeclarationAssign" (formula "1") (term "1"))
      (rule "variableDeclarationAssign" (formula "22") (term "1"))
      (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_2"))
      (rule "variableDeclaration" (formula "22") (term "1") (newnames "rtrn"))
      (rule "assignment" (formula "22") (term "1"))
      (builtin "One Step Simplification" (formula "22"))
      (rule "variableDeclaration" (formula "22") (term "1") (newnames "returnExpr"))
      (rule "variableDeclarationAssign" (formula "22") (term "1"))
      (rule "variableDeclaration" (formula "22") (term "1") (newnames "exc_1"))
      (rule "assignment" (formula "22") (term "1"))
      (builtin "One Step Simplification" (formula "22"))
      (rule "variableDeclaration" (formula "22") (term "1") (newnames "thrownExc"))
      (rule "blockThrow" (formula "22") (term "1,0,0,1"))
      (rule "blockReturn" (formula "22") (term "1,0,1,0,1"))
      (rule "blockThrow" (formula "22") (term "1,0,0,1"))
      (rule "blockReturn" (formula "22") (term "1,0,1,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0,0"))
      (rule "polySimp_elimOne" (formula "19") (term "0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "1,1"))
      (rule "polySimp_mulLiterals" (formula "16") (term "0,1,1"))
      (rule "polySimp_elimOne" (formula "16") (term "0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0"))
      (rule "mul_literals" (formula "15") (term "0,1,1,0"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "12"))
      (rule "polySimp_mulLiterals" (formula "12") (term "0"))
      (rule "polySimp_elimOne" (formula "12") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,1,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,1,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "22") (term "1,1,0,1,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,1,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "mul_literals" (formula "22") (term "0,1,1,0,1,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,1,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,0,1,0,0,1,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,0,1,0,0,1,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "22") (term "0,0,0,0,1,0,0,1,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0,0,1,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
      (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0,0,1,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0,0,1,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0,0,1,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "mul_literals" (formula "22") (term "0,1,1,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_sepNegMonomial1" (formula "22") (term "0,1,0,0,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "22") (term "0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "1,1,1,0,0,0,0,0,1,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "22") (term "0,1,1,1,0,0,0,0,0,1,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "22") (term "0,1,1,1,0,0,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "8"))
      (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1"))
      (rule "polySimp_elimOne" (formula "11") (term "1"))
      (rule "boxToDiamond" (formula "1") (term "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "nnf_imp2or" (formula "19") (term "0"))
      (rule "nnf_imp2or" (formula "18") (term "0"))
      (rule "nnf_notAnd" (formula "19") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "19") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "19") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,0"))
      (rule "polySimp_elimOne" (formula "19") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "18") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "18") (term "0,0,0"))
      (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0"))
      (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0"))
      (rule "add_literals" (formula "18") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0"))
      (rule "mul_literals" (formula "18") (term "1,0,0,0,0"))
      (rule "nnf_imp2or" (formula "23") (term "0,1,0,0,1,1,1,0,1"))
      (rule "nnf_imp2or" (formula "23") (term "0,1,0,0,0,1,1,1,0,1"))
      (rule "nnf_notAnd" (formula "23") (term "0,0,1,0,0,1,1,1,0,1"))
      (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,1,0,0,1,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0,0,1,0,0,1,1,1,0,1"))
      (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0,0,1,0,0,1,1,1,0,1"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0,0,1,0,0,1,1,1,0,1"))
      (rule "add_literals" (formula "23") (term "0,0,0,0,0,0,1,0,0,1,1,1,0,1"))
      (rule "add_zero_left" (formula "23") (term "0,0,0,0,0,1,0,0,1,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,1,0,0,1,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0,1,0,0,1,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "23") (term "1,0,0,0,1,0,0,1,1,1,0,1"))
      (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,1,0,0,1,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,1,0,0,1,1,1,0,1"))
      (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,1,0,0,1,1,1,0,1"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,1,0,0,1,1,1,0,1"))
      (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,1,0,0,1,1,1,0,1"))
      (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,1,0,0,1,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,1,0,0,1,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,1,0,0,1,1,1,0,1"))
      (rule "nnf_notAnd" (formula "23") (term "0,0,1,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "nnf_notAnd" (formula "23") (term "0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "mul_literals" (formula "23") (term "1,0,0,0,0,1,0,0,0,1,1,1,0,1"))
      (rule "commute_or" (formula "15"))
      (rule "commute_or" (formula "19") (term "0,0"))
      (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "arrayLengthIsAnInt" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "arrayLengthNotNegative" (formula "7") (term "0"))
      (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "6"))
      (rule "leq_literals" (formula "7") (term "0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "arrayLengthNotNegative" (formula "7") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "5"))
      (rule "leq_literals" (formula "7") (term "0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "commute_or_2" (formula "18") (term "0,0"))
      (rule "cnf_rightDist" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "commute_or" (formula "15"))
      (rule "compound_less_than_comparison_2" (formula "21") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
      (rule "variableDeclarationAssign" (formula "21") (term "1"))
      (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_2"))
      (rule "assignment" (formula "21") (term "1"))
      (builtin "One Step Simplification" (formula "21"))
      (rule "variableDeclarationAssign" (formula "21") (term "1"))
      (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_3"))
      (rule "assignment_read_length" (formula "21"))
      (branch "Normal Execution (_pat != null)"
         (builtin "One Step Simplification" (formula "21"))
         (rule "less_than_comparison_simple" (formula "21") (term "1"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "21") (term "0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "0,0,0,0"))
         (rule "methodCallEmpty" (formula "21") (term "1"))
         (rule "emptyModality" (formula "21") (term "1"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "notRight" (formula "21"))
         (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
         (rule "add_literals" (formula "12") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0"))
         (rule "qeq_literals" (formula "12") (term "0"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "8"))
         (rule "polySimp_rightDist" (formula "1") (term "0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
         (rule "add_literals" (formula "12") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,0"))
         (rule "add_literals" (formula "12") (term "0,0"))
         (rule "qeq_literals" (formula "12") (term "0"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "ifUnfold" (formula "23") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_4"))
         (rule "compound_less_than_comparison_2" (formula "23") (term "1") (inst "#v1=x_6") (inst "#v0=x_5"))
         (rule "variableDeclarationAssign" (formula "23") (term "1"))
         (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_5"))
         (rule "assignment" (formula "23") (term "1"))
         (builtin "One Step Simplification" (formula "23"))
         (rule "variableDeclarationAssign" (formula "23") (term "1"))
         (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_6"))
         (rule "assignment_read_length" (formula "23"))
         (branch "Normal Execution (_pat != null)"
            (builtin "One Step Simplification" (formula "23"))
            (rule "less_than_comparison_simple" (formula "23") (term "1"))
            (builtin "One Step Simplification" (formula "23"))
            (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "23") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "23") (term "0,0,0,1,0"))
            (rule "replace_known_left" (formula "23") (term "0,0,1,0") (ifseqformula "2"))
            (builtin "One Step Simplification" (formula "23"))
            (rule "ifSplit" (formula "23"))
            (branch "if x_4 true"
               (builtin "One Step Simplification" (formula "24"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "ifUnfold" (formula "23") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_7"))
               (rule "compound_inequality_comparison_2" (formula "23") (term "1") (inst "#v1=x_9") (inst "#v0=x_8"))
               (rule "variableDeclarationAssign" (formula "23") (term "1"))
               (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_8"))
               (rule "assignment_array2" (formula "23"))
               (branch "Normal Execution (_pat != null)"
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "variableDeclarationAssign" (formula "23") (term "1"))
                  (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_9"))
                  (rule "eval_order_array_access5" (formula "23") (term "1") (inst "#v1=x_10") (inst "#ar1=x_arr"))
                  (rule "variableDeclarationAssign" (formula "23") (term "1"))
                  (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_arr"))
                  (rule "assignment" (formula "23") (term "1"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "variableDeclarationAssign" (formula "23") (term "1"))
                  (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_10"))
                  (rule "assignmentSubtractionInt" (formula "23") (term "1"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "translateJavaSubInt" (formula "23") (term "0,1,0"))
                  (rule "polySimp_elimSub" (formula "23") (term "0,1,0"))
                  (rule "assignment_array2" (formula "23"))
                  (branch "Normal Execution (x_arr != null)"
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "inequality_comparison_simple" (formula "23") (term "1"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "eqSymm" (formula "23") (term "0,0,1,0"))
                     (rule "ifSplit" (formula "23"))
                     (branch "if x_7 true"
                        (builtin "One Step Simplification" (formula "24"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "ifElseUnfold" (formula "24") (term "1") (inst "#boolv=x"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_12"))
                        (rule "equality_comparison_simple" (formula "24") (term "1"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "ifElseSplit" (formula "24"))
                        (branch "if x_12 true"
                           (builtin "One Step Simplification" (formula "25"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "18"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "assignment" (formula "22") (term "1"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "assignment" (formula "22") (term "1"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "blockEmpty" (formula "22") (term "1"))
                           (rule "applyEq" (formula "19") (term "0,1,0,2,0") (ifseqformula "1"))
                           (rule "mul_literals" (formula "19") (term "1,0,2,0"))
                           (rule "add_zero_right" (formula "19") (term "0,2,0"))
                           (rule "eqSymm" (formula "19"))
                           (rule "applyEq" (formula "15") (term "0,1,1") (ifseqformula "16"))
                           (rule "inEqSimp_homoInEq1" (formula "15") (term "1,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,1,1"))
                           (rule "add_literals" (formula "15") (term "1,1,0,1,1"))
                           (rule "times_zero_1" (formula "15") (term "1,0,1,1"))
                           (rule "add_literals" (formula "15") (term "0,1,1"))
                           (rule "leq_literals" (formula "15") (term "1,1"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "notLeft" (formula "15"))
                           (rule "applyEqRigid" (formula "13") (term "0") (ifseqformula "1"))
                           (rule "inEqSimp_commuteLeq" (formula "13"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "14"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "14"))
                           (rule "inEqSimp_commuteLeq" (formula "10"))
                           (rule "applyEq" (formula "13") (term "0,1,1") (ifseqformula "1"))
                           (rule "times_zero_2" (formula "13") (term "1,1"))
                           (rule "add_zero_right" (formula "13") (term "1"))
                           (rule "applyEq" (formula "21") (term "1,0,1,1,1,0,0,0,0,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "9") (term "0") (ifseqformula "14"))
                           (rule "applyEq" (formula "17") (term "0") (ifseqformula "1"))
                           (rule "equal_literals" (formula "17"))
                           (rule "false_right" (formula "17"))
                           (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq0" (formula "13") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
                           (rule "add_literals" (formula "13") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0"))
                           (rule "add_zero_right" (formula "13") (term "0,0"))
                           (rule "qeq_literals" (formula "13") (term "0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "postincrement" (formula "19") (term "1"))
                           (rule "unusedLabel" (formula "19") (term "1"))
                           (rule "compound_int_cast_expression" (formula "19") (term "1") (inst "#v=x"))
                           (rule "variableDeclarationAssign" (formula "19") (term "1"))
                           (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_13"))
                           (rule "remove_parentheses_right" (formula "19") (term "1"))
                           (rule "assignmentAdditionInt" (formula "19") (term "1"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "translateJavaAddInt" (formula "19") (term "0,1,0"))
                           (rule "polySimp_addComm0" (formula "19") (term "0,1,0"))
                           (rule "widening_identity_cast_5" (formula "19") (term "1"))
                           (rule "assignment" (formula "19") (term "1"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "tryEmpty" (formula "19") (term "1"))
                           (rule "methodCallEmpty" (formula "19") (term "1"))
                           (rule "emptyModality" (formula "19") (term "1"))
                           (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                           (rule "mul_literals" (formula "19") (term "1,1,1,1,0,0,0,0,0,0"))
                           (rule "equal_literals" (formula "19") (term "0,1,0,0,0"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "19") (term "0,0,1"))
                           (rule "polySimp_addComm1" (formula "19") (term "1,1,1,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "19") (term "0,1,1,1,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "19") (term "1,1,1,0,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "0,0,1"))
                           (rule "mul_literals" (formula "19") (term "0,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "19") (term "1,0,1,0,0,0,0,0"))
                           (rule "add_literals" (formula "19") (term "0,1,0,1,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "19") (term "1,0,1,0,0,0,0,0"))
                           (rule "precOfInt" (formula "19") (term "1"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,1"))
                           (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0,0,1,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0,0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0,1,1"))
                           (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,1,1"))
                           (rule "polySimp_addComm1" (formula "19") (term "0,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,1,1"))
                           (rule "polySimp_addComm1" (formula "19") (term "0,0,0,0,1,1"))
                           (rule "add_literals" (formula "19") (term "0,0,0,0,0,1,1"))
                           (rule "add_zero_left" (formula "19") (term "0,0,0,0,1,1"))
                           (rule "polySimp_pullOutFactor1" (formula "19") (term "0,0,0,1,1"))
                           (rule "add_literals" (formula "19") (term "1,0,0,0,1,1"))
                           (rule "times_zero_1" (formula "19") (term "0,0,0,1,1"))
                           (rule "add_zero_left" (formula "19") (term "0,0,1,1"))
                           (rule "inEqSimp_homoInEq0" (formula "19") (term "0,1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "19") (term "0,0,1,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0,0,0,0"))
                           (rule "replace_known_left" (formula "19") (term "0,1,0,0,0,0,0,0") (ifseqformula "12"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "inEqSimp_homoInEq0" (formula "19") (term "0,1"))
                           (rule "times_zero_2" (formula "19") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "19") (term "0,0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "19") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "19") (term "0,0,1,0,0,0,0,0"))
                           (rule "add_literals" (formula "19") (term "1,0,0,1,0,0,0,0,0"))
                           (rule "times_zero_1" (formula "19") (term "0,0,1,0,0,0,0,0"))
                           (rule "qeq_literals" (formula "19") (term "0,1,0,0,0,0,0"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "applyEq" (formula "19") (term "0,1,0,0,0,0") (ifseqformula "13"))
                           (rule "replace_known_left" (formula "19") (term "1,0,0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "applyEq" (formula "19") (term "0,0,0,0,0,0,0") (ifseqformula "13"))
                           (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,0,0,0"))
                           (rule "replace_known_left" (formula "19") (term "0,0,0,0,0,0") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "applyEq" (formula "19") (term "0,1,0,0,0,0,0") (ifseqformula "13"))
                           (rule "replace_known_left" (formula "19") (term "1,0,0,0,0,0") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "applyEq" (formula "19") (term "1,0,1,1") (ifseqformula "13"))
                           (rule "polySimp_pullOutFactor2" (formula "19") (term "0,1,1"))
                           (rule "add_literals" (formula "19") (term "1,0,1,1"))
                           (rule "times_zero_1" (formula "19") (term "0,1,1"))
                           (rule "leq_literals" (formula "19") (term "1,1"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "applyEq" (formula "19") (term "0,0,1,0,0,0") (ifseqformula "13"))
                           (rule "applyEq" (formula "19") (term "1,0,1") (ifseqformula "13"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,0,0,0,0"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1"))
                           (rule "mul_literals" (formula "19") (term "0,1,1"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1"))
                           (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "3"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "inEqSimp_contradEq7" (formula "19") (term "0,1,0,0") (ifseqformula "3"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "19") (term "1,1,0,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "19") (term "1,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                           (rule "leq_literals" (formula "19") (term "0,0,1,0,0"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "inEqSimp_subsumption1" (formula "19") (term "0,0,0") (ifseqformula "12"))
                           (rule "leq_literals" (formula "19") (term "0,0,0,0"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "inEqSimp_subsumption1" (formula "19") (term "0,0") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq0" (formula "19") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,0,0"))
                           (rule "add_literals" (formula "19") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "19") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "19") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "19") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "inEqSimp_or_subsumption3" (formula "19") (term "0,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "19") (term "1,1,0,0,1,0,0,0"))
                           (rule "times_zero_1" (formula "19") (term "1,0,0,1,0,0,0"))
                           (rule "add_literals" (formula "19") (term "0,0,1,0,0,0"))
                           (rule "leq_literals" (formula "19") (term "0,1,0,0,0"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "inEqSimp_or_tautInEq0" (formula "19") (term "0,0,1"))
                           (rule "polySimp_addAssoc" (formula "19") (term "1,1,0,0,1"))
                           (rule "add_literals" (formula "19") (term "0,1,1,0,0,1"))
                           (rule "add_zero_left" (formula "19") (term "1,1,0,0,1"))
                           (rule "inEqSimp_homoInEq1" (formula "19") (term "1,0,0,1"))
                           (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0,0,1"))
                           (rule "add_literals" (formula "19") (term "1,0,1,0,0,1"))
                           (rule "times_zero_1" (formula "19") (term "0,1,0,0,1"))
                           (rule "leq_literals" (formula "19") (term "1,0,0,1"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "allRight" (formula "19") (inst "sk=j_12"))
                           (rule "cutUpperBound" (formula "19") (ifseqformula "14"))
                           (branch
                              (rule "crossInst" (formula "15") (inst "sk=j_14") (ifseqformula "20"))
                              (rule "orRight" (formula "21"))
                              (rule "andLeft" (formula "15"))
                              (rule "orRight" (formula "22"))
                              (rule "inEqSimp_leqRight" (formula "22"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "23"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0"))
                              (rule "applyEqRigid" (formula "18") (term "0,0,0,0") (ifseqformula "17"))
                              (rule "applyEqRigid" (formula "18") (term "0,2,0,1") (ifseqformula "17"))
                              (rule "eqSymm" (formula "18") (term "1"))
                              (rule "applyEq" (formula "18") (term "0,1,0,0") (ifseqformula "17"))
                              (rule "applyEqRigid" (formula "24") (term "0,2,0") (ifseqformula "3"))
                              (rule "eqSymm" (formula "24"))
                              (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                              (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,1,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0"))
                              (rule "add_literals" (formula "1") (term "0"))
                              (rule "leq_literals" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch
                              (rule "crossInst" (formula "15") (inst "sk=j_13") (ifseqformula "20"))
                              (rule "orRight" (formula "21"))
                              (rule "notLeft" (formula "1"))
                              (rule "andLeft" (formula "14"))
                              (rule "orRight" (formula "22"))
                              (rule "inEqSimp_geqRight" (formula "23"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_leqRight" (formula "23"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
                              (rule "applyEq" (formula "17") (term "0,1,0,0") (ifseqformula "16"))
                              (rule "applyEqRigid" (formula "17") (term "0,2,0,1") (ifseqformula "16"))
                              (rule "eqSymm" (formula "17") (term "1"))
                              (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "16"))
                              (rule "applyEq" (formula "17") (term "0,0,0,0") (ifseqformula "16"))
                              (rule "applyEqRigid" (formula "17") (term "0,2,0,1") (ifseqformula "16"))
                              (rule "eqSymm" (formula "17") (term "1"))
                              (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "24"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                              (rule "mul_literals" (formula "2") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                              (rule "inEqSimp_contradEq3" (formula "20") (ifseqformula "2"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0"))
                              (rule "add_literals" (formula "20") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "20") (term "1,0,0"))
                              (rule "add_zero_right" (formula "20") (term "0,0"))
                              (rule "qeq_literals" (formula "20") (term "0"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "false_right" (formula "20"))
                              (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "17") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "inEqSimp_contradInEq0" (formula "17") (term "0") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "17") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0,0"))
                              (rule "polySimp_addComm0" (formula "17") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,0"))
                              (rule "add_literals" (formula "17") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "17") (term "1,0,0,0"))
                              (rule "add_literals" (formula "17") (term "0,0,0"))
                              (rule "leq_literals" (formula "17") (term "0,0"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "17"))
                              (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                              (rule "mul_literals" (formula "5") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1"))
                              (rule "polySimp_rightDist" (formula "5") (term "1"))
                              (rule "mul_literals" (formula "5") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "5"))
                              (rule "andLeft" (formula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                              (rule "mul_literals" (formula "2") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "2") (term "0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                              (rule "add_literals" (formula "2") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                              (rule "add_literals" (formula "2") (term "1,1,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0"))
                              (rule "add_literals" (formula "2") (term "0"))
                              (rule "leq_literals" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                        )
                        (branch "if x_12 false"
                           (builtin "One Step Simplification" (formula "25"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "andLeft" (formula "17"))
                           (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "notLeft" (formula "18"))
                           (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "assignment" (formula "25") (term "1"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "assignment" (formula "25") (term "1"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "blockBreakNoLabel" (formula "25") (term "1"))
                           (rule "applyEq" (formula "12") (term "0") (ifseqformula "14"))
                           (rule "inEqSimp_commuteLeq" (formula "12"))
                           (rule "applyEq" (formula "13") (term "0,1,1") (ifseqformula "14"))
                           (rule "mul_literals" (formula "13") (term "1,1"))
                           (rule "polySimp_addComm0" (formula "13") (term "1"))
                           (rule "applyEqRigid" (formula "22") (term "0,1,0,2,0") (ifseqformula "14"))
                           (rule "mul_literals" (formula "22") (term "1,0,2,0"))
                           (rule "polySimp_addComm0" (formula "22") (term "0,2,0"))
                           (rule "applyEq" (formula "25") (term "0,1,0,0,1,1,0,0,0,0") (ifseqformula "14"))
                           (rule "applyEq" (formula "21") (term "0") (ifseqformula "14"))
                           (rule "equal_literals" (formula "21"))
                           (rule "false_right" (formula "21"))
                           (rule "inEqSimp_contradEq7" (formula "20") (ifseqformula "17"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0"))
                           (rule "add_literals" (formula "20") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "leq_literals" (formula "20") (term "0"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "false_right" (formula "20"))
                           (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq0" (formula "13") (term "0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
                           (rule "add_literals" (formula "13") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0"))
                           (rule "add_zero_right" (formula "13") (term "0,0"))
                           (rule "qeq_literals" (formula "13") (term "0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "12"))
                           (rule "leq_literals" (formula "11") (term "0"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "13"))
                           (rule "mul_literals" (formula "14") (term "0,0"))
                           (rule "add_zero_left" (formula "14") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                           (rule "mul_literals" (formula "14") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "9"))
                           (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                           (rule "mul_literals" (formula "15") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1"))
                           (rule "polySimp_rightDist" (formula "15") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                           (rule "mul_literals" (formula "15") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                           (rule "blockBreakLabel" (formula "22") (term "1"))
                           (rule "blockEmpty" (formula "22") (term "1"))
                           (rule "tryEmpty" (formula "22") (term "1"))
                           (rule "methodCallEmpty" (formula "22") (term "1"))
                           (rule "emptyModality" (formula "22") (term "1"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "methodCallReturn" (formula "22") (term "1"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "assignment" (formula "22") (term "1"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "methodCallEmpty" (formula "22") (term "1"))
                           (rule "tryEmpty" (formula "22") (term "1"))
                           (rule "emptyModality" (formula "22") (term "1"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "qeq_literals" (formula "22") (term "0,1"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "inEqSimp_subsumption1" (formula "22") (term "0") (ifseqformula "8"))
                           (rule "leq_literals" (formula "22") (term "0,0"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "notRight" (formula "22"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_or_tautInEq0" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0"))
                           (rule "qeq_literals" (formula "1") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "allLeft" (formula "1") (inst "t=i_0"))
                           (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                           (rule "add_literals" (formula "1") (term "0,0,1"))
                           (rule "leq_literals" (formula "1") (term "0,1"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_contradInEq0" (formula "13") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "13") (term "0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "closeFalse" (formula "13"))
                        )
                     )
                     (branch "if x_7 false"
                        (builtin "One Step Simplification" (formula "24"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "blockEmpty" (formula "24") (term "1"))
                        (rule "unusedLabel" (formula "24") (term "1"))
                        (rule "postincrement" (formula "24") (term "1"))
                        (rule "compound_int_cast_expression" (formula "24") (term "1") (inst "#v=x"))
                        (rule "variableDeclarationAssign" (formula "24") (term "1"))
                        (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_11"))
                        (rule "remove_parentheses_right" (formula "24") (term "1"))
                        (rule "assignmentAdditionInt" (formula "24") (term "1"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "translateJavaAddInt" (formula "24") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,1,0"))
                        (rule "widening_identity_cast_5" (formula "24") (term "1"))
                        (rule "assignment" (formula "24") (term "1"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "tryEmpty" (formula "24") (term "1"))
                        (rule "methodCallEmpty" (formula "24") (term "1"))
                        (rule "emptyModality" (formula "24") (term "1"))
                        (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "10")) (ifInst ""  (formula "3")) (ifInst ""  (formula "15")) (ifInst ""  (formula "18")) (ifInst ""  (formula "19")))
                        (rule "polySimp_mulComm0" (formula "24") (term "0,0,1"))
                        (rule "polySimp_rightDist" (formula "24") (term "0,0,1"))
                        (rule "mul_literals" (formula "24") (term "0,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "24") (term "1,1,0,1,0,0,0"))
                        (rule "add_literals" (formula "24") (term "0,1,1,0,1,0,0,0"))
                        (rule "add_zero_left" (formula "24") (term "1,1,0,1,0,0,0"))
                        (rule "precOfInt" (formula "24") (term "1"))
                        (rule "inEqSimp_ltToLeq" (formula "24") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,1"))
                        (rule "polySimp_mulAssoc" (formula "24") (term "0,1,0,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "24") (term "0,0,1,0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0,0,1,1"))
                        (rule "polySimp_elimOne" (formula "24") (term "0,1,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,1,1"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,0,1,1"))
                        (rule "polySimp_pullOutFactor2b" (formula "24") (term "0,1,1"))
                        (rule "add_literals" (formula "24") (term "1,1,0,1,1"))
                        (rule "times_zero_1" (formula "24") (term "1,0,1,1"))
                        (rule "add_zero_right" (formula "24") (term "0,1,1"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,1,1"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,0,1,1"))
                        (rule "add_literals" (formula "24") (term "0,0,0,1,1"))
                        (rule "add_zero_left" (formula "24") (term "0,0,1,1"))
                        (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,1"))
                        (rule "add_literals" (formula "24") (term "1,0,1,1"))
                        (rule "times_zero_1" (formula "24") (term "0,1,1"))
                        (rule "leq_literals" (formula "24") (term "1,1"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_homoInEq0" (formula "24") (term "1"))
                        (rule "times_zero_2" (formula "24") (term "1,0,1"))
                        (rule "add_zero_right" (formula "24") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0,0,0,0"))
                        (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1"))
                        (rule "mul_literals" (formula "24") (term "0,1,1"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,1"))
                        (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_subsumption0" (formula "24") (term "0,1,0,0,0") (ifseqformula "13"))
                        (rule "inEqSimp_homoInEq0" (formula "24") (term "0,0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "24") (term "1,1,0,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0"))
                        (rule "qeq_literals" (formula "24") (term "0,0,1,0,0,0"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_subsumption1" (formula "24") (term "0,0,0,0") (ifseqformula "12"))
                        (rule "leq_literals" (formula "24") (term "0,0,0,0,0"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "commute_or" (formula "24") (term "1,0,0"))
                        (rule "cnf_rightDist" (formula "24") (term "1,0,0"))
                        (rule "commute_or" (formula "24") (term "0,1,0,0"))
                        (rule "replace_known_left" (formula "24") (term "0,1,0,0") (ifseqformula "16"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "equiv_left" (formula "19"))
                        (branch
                           (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "replace_known_left" (formula "22") (term "1,1,0,0") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "applyEqRigid" (formula "1") (term "0,1,0,2,0") (ifseqformula "16"))
                           (rule "times_zero_2" (formula "1") (term "1,0,2,0"))
                           (rule "add_zero_right" (formula "1") (term "0,2,0"))
                           (rule "eqSymm" (formula "1"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "17"))
                           (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "16"))
                           (rule "equal_literals" (formula "15") (term "0"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "notLeft" (formula "15"))
                           (rule "applyEqRigid" (formula "13") (term "0") (ifseqformula "15"))
                           (rule "inEqSimp_commuteLeq" (formula "13"))
                           (rule "applyEq" (formula "9") (term "0") (ifseqformula "15"))
                           (rule "applyEq" (formula "13") (term "0,1,1") (ifseqformula "14"))
                           (rule "times_zero_2" (formula "13") (term "1,1"))
                           (rule "add_zero_right" (formula "13") (term "1"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "15"))
                           (rule "inEqSimp_commuteLeq" (formula "10"))
                           (rule "applyEq" (formula "21") (term "0,1,1,0,0") (ifseqformula "14"))
                           (rule "mul_literals" (formula "21") (term "1,1,0,0"))
                           (rule "add_zero_right" (formula "21") (term "1,0,0"))
                           (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "applyEq" (formula "18") (term "0,1") (ifseqformula "15"))
                           (rule "inEqSimp_homoInEq1" (formula "18") (term "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,1"))
                           (rule "add_literals" (formula "18") (term "1,1,0,1"))
                           (rule "times_zero_1" (formula "18") (term "1,0,1"))
                           (rule "add_zero_right" (formula "18") (term "0,1"))
                           (rule "leq_literals" (formula "18") (term "1"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "false_right" (formula "18"))
                           (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq0" (formula "13") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
                           (rule "add_literals" (formula "13") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0"))
                           (rule "add_zero_right" (formula "13") (term "0,0"))
                           (rule "qeq_literals" (formula "13") (term "0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "andRight" (formula "19"))
                           (branch
                              (rule "allRight" (formula "19") (inst "sk=j_9"))
                              (rule "orRight" (formula "19"))
                              (rule "cutUpperBound" (formula "19") (ifseqformula "15"))
                              (branch
                                 (rule "crossInst" (formula "16") (inst "sk=j_11") (ifseqformula "20"))
                                 (rule "orRight" (formula "21"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "orRight" (formula "22"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "eqSymm" (formula "16"))
                                 (rule "inEqSimp_geqRight" (formula "24"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_leqRight" (formula "23"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "24"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
                                 (rule "applyEqRigid" (formula "3") (term "1,0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "19"))
                                 (rule "applyEqRigid" (formula "21") (term "1,1,0,0") (ifseqformula "4"))
                                 (rule "applyEqRigid" (formula "25") (term "0,2,0") (ifseqformula "19"))
                                 (rule "eqSymm" (formula "25"))
                                 (rule "applyEqRigid" (formula "22") (term "1,1,0,0") (ifseqformula "4"))
                                 (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "4"))
                                 (rule "applyEqRigid" (formula "14") (term "1") (ifseqformula "4"))
                                 (rule "applyEq" (formula "13") (term "0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "4"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0"))
                                 (rule "add_zero_right" (formula "1") (term "0"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch
                                 (rule "crossInst" (formula "16") (inst "sk=j_10") (ifseqformula "20"))
                                 (rule "orRight" (formula "21"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "orRight" (formula "22"))
                                 (rule "eqSymm" (formula "19"))
                                 (rule "eqSymm" (formula "15"))
                                 (rule "inEqSimp_geqRight" (formula "24"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_leqRight" (formula "23"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "24"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "18"))
                                 (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "18"))
                                 (rule "applyEqRigid" (formula "25") (term "0,2,0") (ifseqformula "18"))
                                 (rule "eqSymm" (formula "25"))
                                 (rule "applyEqRigid" (formula "25") (term "0,2,0") (ifseqformula "18"))
                                 (rule "eqSymm" (formula "25"))
                                 (rule "replace_known_right" (formula "19") (term "1") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "applyEq" (formula "22") (term "1") (ifseqformula "18"))
                                 (rule "applyEqRigid" (formula "1") (term "1,0,0") (ifseqformula "18"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_contradEq7" (formula "22") (ifseqformula "1"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0"))
                                 (rule "add_literals" (formula "22") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "22") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,0"))
                                 (rule "leq_literals" (formula "22") (term "0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "false_right" (formula "22"))
                                 (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                                 (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "19") (term "0,0,1"))
                                 (rule "leq_literals" (formula "19") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "19") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "inEqSimp_antiSymm" (formula "19") (ifseqformula "3"))
                                 (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "19"))
                                 (rule "inEqSimp_homoInEq0" (formula "3"))
                                 (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "1,0"))
                                 (rule "times_zero_1" (formula "3") (term "0"))
                                 (rule "qeq_literals" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "18"))
                                 (rule "applyEqRigid" (formula "23") (term "0,2,0") (ifseqformula "17"))
                                 (rule "eqSymm" (formula "23"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "17"))
                                 (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                                 (rule "inEqSimp_homoInEq1" (formula "17"))
                                 (rule "polySimp_pullOutFactor1" (formula "17") (term "0"))
                                 (rule "add_literals" (formula "17") (term "1,0"))
                                 (rule "times_zero_1" (formula "17") (term "0"))
                                 (rule "leq_literals" (formula "17"))
                                 (rule "true_left" (formula "17"))
                                 (rule "applyEqRigid" (formula "21") (term "0,2,0") (ifseqformula "16"))
                                 (rule "eqSymm" (formula "21"))
                                 (rule "close" (formula "21") (ifseqformula "1"))
                              )
                           )
                           (branch
                              (rule "allRight" (formula "19") (inst "sk=j_8"))
                              (rule "orRight" (formula "19"))
                              (rule "orRight" (formula "19"))
                              (rule "inEqSimp_geqRight" (formula "20"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_leqRight" (formula "20"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "1"))
                              (rule "mul_literals" (formula "11") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "11") (term "0"))
                              (rule "add_literals" (formula "11") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                              (rule "mul_literals" (formula "11") (term "1"))
                              (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "1"))
                              (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                              (rule "mul_literals" (formula "5") (term "0,0,0"))
                              (rule "polySimp_addAssoc" (formula "5") (term "0"))
                              (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                              (rule "add_literals" (formula "5") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1"))
                              (rule "polySimp_rightDist" (formula "5") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                              (rule "mul_literals" (formula "5") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "5"))
                              (rule "andLeft" (formula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "2"))
                              (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                              (rule "add_literals" (formula "2") (term "1,1,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0"))
                              (rule "add_zero_right" (formula "2") (term "0"))
                              (rule "leq_literals" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                        )
                        (branch
                           (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "16"))
                           (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "15")))
                           (rule "replace_known_right" (formula "25") (term "1,1,0,0") (ifseqformula "22"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "applyEqRigid" (formula "21") (term "0") (ifseqformula "15"))
                           (rule "equal_literals" (formula "21"))
                           (rule "false_right" (formula "21"))
                           (rule "applyEq" (formula "14") (term "0,1,1") (ifseqformula "15"))
                           (rule "mul_literals" (formula "14") (term "1,1"))
                           (rule "polySimp_addComm0" (formula "14") (term "1"))
                           (rule "applyEq" (formula "1") (term "0,1,0,2,0") (ifseqformula "15"))
                           (rule "mul_literals" (formula "1") (term "1,0,2,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0,2,0"))
                           (rule "applyEq" (formula "13") (term "0") (ifseqformula "15"))
                           (rule "inEqSimp_commuteLeq" (formula "13"))
                           (rule "applyEq" (formula "24") (term "0,1,1,0,0,0") (ifseqformula "15"))
                           (rule "mul_literals" (formula "24") (term "1,1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "24") (term "1,0,0,0"))
                           (rule "add_literals" (formula "24") (term "0,1,0,0,0"))
                           (rule "add_zero_left" (formula "24") (term "1,0,0,0"))
                           (rule "inEqSimp_contradEq7" (formula "21") (ifseqformula "18"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0"))
                           (rule "add_literals" (formula "21") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "21") (term "1,0,0"))
                           (rule "add_zero_right" (formula "21") (term "0,0"))
                           (rule "leq_literals" (formula "21") (term "0"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "false_right" (formula "21"))
                           (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "13"))
                           (rule "leq_literals" (formula "12") (term "0"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "inEqSimp_subsumption0" (formula "22") (term "1,0,0") (ifseqformula "16"))
                           (rule "inEqSimp_homoInEq0" (formula "22") (term "0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                           (rule "polySimp_addComm0" (formula "22") (term "0,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "22") (term "1,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "22") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "22") (term "0,0,1,0,0"))
                           (rule "qeq_literals" (formula "22") (term "0,1,0,0"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq0" (formula "13") (term "0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
                           (rule "add_literals" (formula "13") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0"))
                           (rule "add_zero_right" (formula "13") (term "0,0"))
                           (rule "qeq_literals" (formula "13") (term "0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "inEqSimp_subsumption1" (formula "21") (term "0,0") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq0" (formula "21") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,0,0"))
                           (rule "add_literals" (formula "21") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "21") (term "1,0,0,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "21") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "10"))
                           (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                           (rule "mul_literals" (formula "16") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1"))
                           (rule "polySimp_rightDist" (formula "16") (term "1"))
                           (rule "mul_literals" (formula "16") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                           (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "15"))
                           (rule "times_zero_1" (formula "14") (term "0,0"))
                           (rule "add_zero_left" (formula "14") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                           (rule "mul_literals" (formula "14") (term "1"))
                           (rule "andRight" (formula "22"))
                           (branch
                              (rule "allRight" (formula "22") (inst "sk=j_5"))
                              (rule "orRight" (formula "22"))
                              (rule "cutUpperBound" (formula "22") (ifseqformula "18"))
                              (branch
                                 (rule "crossInst" (formula "19") (inst "sk=j_7") (ifseqformula "23"))
                                 (rule "orRight" (formula "24"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "orRight" (formula "25"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "inEqSimp_geqRight" (formula "27"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_leqRight" (formula "26"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "27"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0"))
                                 (rule "applyEq" (formula "23") (term "0,0,0,0") (ifseqformula "22"))
                                 (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "4"))
                                 (rule "applyEqRigid" (formula "20") (term "1,1") (ifseqformula "4"))
                                 (rule "applyEqRigid" (formula "21") (term "1,1") (ifseqformula "4"))
                                 (rule "applyEqRigid" (formula "25") (term "1,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "4"))
                                 (rule "applyEqRigid" (formula "23") (term "0,1,0,0") (ifseqformula "22"))
                                 (rule "applyEqRigid" (formula "1") (term "0,1,0") (ifseqformula "4"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0"))
                                 (rule "add_zero_right" (formula "1") (term "0"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch
                                 (rule "crossInst" (formula "19") (inst "sk=j_6") (ifseqformula "23"))
                                 (rule "orRight" (formula "24"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "orRight" (formula "25"))
                                 (rule "eqSymm" (formula "22"))
                                 (rule "inEqSimp_geqRight" (formula "27"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_leqRight" (formula "26"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "27"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0"))
                                 (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "21"))
                                 (rule "applyEq" (formula "22") (term "0,2,0,1") (ifseqformula "21"))
                                 (rule "eqSymm" (formula "22") (term "1"))
                                 (rule "applyEq" (formula "22") (term "0,1,0,0") (ifseqformula "21"))
                                 (rule "applyEq" (formula "22") (term "0,0,0,0") (ifseqformula "21"))
                                 (rule "applyEq" (formula "22") (term "0,2,0,1") (ifseqformula "21"))
                                 (rule "eqSymm" (formula "22") (term "1"))
                                 (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "28"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_contradEq7" (formula "25") (ifseqformula "1"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0"))
                                 (rule "add_literals" (formula "25") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "25") (term "0,0"))
                                 (rule "leq_literals" (formula "25") (term "0"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "false_right" (formula "25"))
                                 (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                                 (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "22") (term "0,0,1"))
                                 (rule "leq_literals" (formula "22") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "22") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "inEqSimp_antiSymm" (formula "22") (ifseqformula "3"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "22"))
                                 (rule "applyEqRigid" (formula "1") (term "1,1") (ifseqformula "22"))
                                 (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "22"))
                                 (rule "inEqSimp_homoInEq1" (formula "23"))
                                 (rule "polySimp_pullOutFactor1" (formula "23") (term "0"))
                                 (rule "add_literals" (formula "23") (term "1,0"))
                                 (rule "times_zero_1" (formula "23") (term "0"))
                                 (rule "leq_literals" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "applyEqRigid" (formula "27") (term "0,2,0") (ifseqformula "22"))
                                 (rule "eqSymm" (formula "27"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "22"))
                                 (rule "inEqSimp_homoInEq0" (formula "3"))
                                 (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "1,0"))
                                 (rule "times_zero_1" (formula "3") (term "0"))
                                 (rule "qeq_literals" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "applyEqRigid" (formula "26") (term "0,2,0") (ifseqformula "21"))
                                 (rule "eqSymm" (formula "26"))
                                 (rule "applyEqRigid" (formula "20") (term "1") (ifseqformula "21"))
                                 (rule "inEqSimp_contradInEq1" (formula "17") (ifseqformula "1"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "inEqSimp_homoInEq1" (formula "17"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                                 (rule "mul_literals" (formula "17") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "17") (term "0"))
                                 (rule "polySimp_addComm1" (formula "17") (term "0,0"))
                                 (rule "add_literals" (formula "17") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
                                 (rule "add_literals" (formula "17") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "17") (term "1,0"))
                                 (rule "add_literals" (formula "17") (term "0"))
                                 (rule "leq_literals" (formula "17"))
                                 (rule "closeFalse" (formula "17"))
                              )
                           )
                           (branch
                              (rule "allRight" (formula "22") (inst "sk=j_4"))
                              (rule "orRight" (formula "22"))
                              (rule "orRight" (formula "22"))
                              (rule "inEqSimp_geqRight" (formula "23"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_leqRight" (formula "23"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "1"))
                              (rule "times_zero_1" (formula "16") (term "0,0"))
                              (rule "add_zero_left" (formula "16") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                              (rule "mul_literals" (formula "16") (term "1"))
                              (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "2"))
                              (rule "mul_literals" (formula "16") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                              (rule "mul_literals" (formula "16") (term "1"))
                              (rule "allLeft" (formula "22") (inst "t=j_4"))
                              (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "26"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "22") (term "1") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0,1"))
                              (rule "polySimp_addComm0" (formula "22") (term "0,0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                              (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                              (rule "add_literals" (formula "22") (term "0,0,1"))
                              (rule "leq_literals" (formula "22") (term "0,1"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "inEqSimp_antiSymm" (formula "22") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "22"))
                              (rule "applyEq" (formula "26") (term "1,0,2,0") (ifseqformula "21"))
                              (rule "eqSymm" (formula "26"))
                              (rule "applyEqRigid" (formula "22") (term "0") (ifseqformula "21"))
                              (rule "inEqSimp_homoInEq1" (formula "22"))
                              (rule "polySimp_pullOutFactor1" (formula "22") (term "0"))
                              (rule "add_literals" (formula "22") (term "1,0"))
                              (rule "times_zero_1" (formula "22") (term "0"))
                              (rule "leq_literals" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "applyEqRigid" (formula "15") (term "0") (ifseqformula "21"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "20"))
                              (rule "inEqSimp_homoInEq0" (formula "1"))
                              (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,0"))
                              (rule "times_zero_1" (formula "1") (term "0"))
                              (rule "qeq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "applyEq" (formula "23") (term "0,2,0") (ifseqformula "19"))
                              (rule "eqSymm" (formula "23"))
                              (rule "close" (formula "23") (ifseqformula "1"))
                           )
                        )
                     )
                  )
                  (branch "Null Reference (x_arr = null)"
                     (builtin "One Step Simplification" (formula "24"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Index Out of Bounds (x_arr != null, but x_10 Out of Bounds!)"
                     (rule "false_right" (formula "24"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                     (rule "inEqSimp_contradInEq0" (formula "1") (term "1") (ifseqformula "13"))
                     (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_literals" (formula "1") (term "0,0,1"))
                     (rule "leq_literals" (formula "1") (term "0,1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "1"))
                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "14"))
                     (rule "inEqSimp_homoInEq1" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
                     (rule "add_literals" (formula "2") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0,0"))
                     (rule "add_zero_right" (formula "2") (term "0,0"))
                     (rule "applyEq" (formula "8") (term "0") (ifseqformula "14"))
                     (rule "inEqSimp_homoInEq1" (formula "8"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0"))
                     (rule "applyEq" (formula "10") (term "1") (ifseqformula "14"))
                     (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
                     (rule "inEqSimp_homoInEq1" (formula "15"))
                     (rule "polySimp_pullOutFactor1" (formula "15") (term "0"))
                     (rule "add_literals" (formula "15") (term "1,0"))
                     (rule "times_zero_1" (formula "15") (term "0"))
                     (rule "leq_literals" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "14"))
                     (rule "inEqSimp_homoInEq0" (formula "1"))
                     (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,0"))
                     (rule "times_zero_1" (formula "1") (term "0"))
                     (rule "qeq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                     (rule "mul_literals" (formula "7") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                     (rule "inEqSimp_contradEq3" (formula "14") (term "0") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "14") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "14") (term "0,0,0"))
                     (rule "qeq_literals" (formula "14") (term "0,0"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "14"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "andLeft" (formula "17"))
                     (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "17"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "14"))
                     (rule "inEqSimp_commuteLeq" (formula "12"))
                     (rule "applyEqRigid" (formula "9") (term "0,1,1") (ifseqformula "14"))
                     (rule "mul_literals" (formula "9") (term "1,1"))
                     (rule "polySimp_addComm0" (formula "9") (term "1"))
                     (rule "applyEqRigid" (formula "18") (term "0,0") (ifseqformula "14"))
                     (rule "equal_literals" (formula "18") (term "0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "notLeft" (formula "18"))
                     (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "20"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "applyEq" (formula "7") (term "0") (ifseqformula "14"))
                     (rule "inEqSimp_homoInEq0" (formula "7"))
                     (rule "mul_literals" (formula "7") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "7") (term "0"))
                     (rule "add_literals" (formula "7") (term "0,0"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "14"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "Null Reference (_pat = null)"
                  (rule "false_right" (formula "24"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Index Out of Bounds (_pat != null, but i Out of Bounds!)"
                  (rule "false_right" (formula "24"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "1,1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "12"))
                  (rule "qeq_literals" (formula "1") (term "0,1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_literals" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "if x_4 false"
               (builtin "One Step Simplification" (formula "24"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Null Reference (_pat = null)"
            (builtin "One Step Simplification" (formula "24"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (_pat = null)"
         (builtin "One Step Simplification" (formula "22"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Use Case"
      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "7")))
      (builtin "One Step Simplification" (formula "12"))
      (rule "translateJavaSubInt" (formula "9") (term "1,0,1,0,0,0,0,0,0"))
      (rule "translateJavaSubInt" (formula "9") (term "0,1,1,0,0,0,0,0,0"))
      (rule "translateJavaSubInt" (formula "9") (term "0,2,1,1,0,1"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "11"))
      (rule "eqSymm" (formula "18") (term "1,0"))
      (rule "eqSymm" (formula "16") (term "1"))
      (rule "eqSymm" (formula "14") (term "1"))
      (rule "polySimp_elimSub" (formula "12") (term "0"))
      (rule "polySimp_elimSub" (formula "11") (term "1"))
      (rule "polySimp_elimSub" (formula "18") (term "0,2,0,1,0"))
      (rule "mul_literals" (formula "18") (term "1,0,2,0,1,0"))
      (rule "polySimp_addComm0" (formula "18") (term "0,2,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
      (rule "polySimp_addComm1" (formula "18") (term "0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1"))
      (rule "polySimp_addComm1" (formula "15") (term "0,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,1"))
      (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0"))
      (rule "inEqSimp_commuteLeq" (formula "10"))
      (rule "inEqSimp_commuteLeq" (formula "9"))
      (rule "inEqSimp_commuteLeq" (formula "12"))
      (rule "inEqSimp_homoInEq0" (formula "11"))
      (rule "mul_literals" (formula "11") (term "1,0"))
      (rule "add_zero_right" (formula "11") (term "0"))
      (rule "variableDeclarationAssign" (formula "21") (term "1"))
      (rule "variableDeclaration" (formula "21") (term "1") (newnames "b_1"))
      (rule "blockEmpty" (formula "21") (term "1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,0"))
      (rule "polySimp_elimOne" (formula "18") (term "0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "17") (term "0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "0,1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,1,0"))
      (rule "mul_literals" (formula "14") (term "0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "11"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0"))
      (rule "polySimp_elimOne" (formula "11") (term "0"))
      (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "7"))
      (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1"))
      (rule "polySimp_elimOne" (formula "10") (term "1"))
      (rule "nnf_imp2or" (formula "19") (term "0"))
      (rule "nnf_imp2or" (formula "18") (term "0"))
      (rule "nnf_notAnd" (formula "19") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "19") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "19") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,0"))
      (rule "polySimp_elimOne" (formula "19") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "18") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "18") (term "0,0,0"))
      (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0"))
      (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0"))
      (rule "mul_literals" (formula "18") (term "1,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0"))
      (rule "commute_or" (formula "15"))
      (rule "commute_or" (formula "19") (term "0,0"))
      (rule "commute_or_2" (formula "18") (term "0,0"))
      (rule "cnf_rightDist" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "commute_or" (formula "15"))
      (rule "compound_less_than_comparison_2" (formula "23") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
      (rule "variableDeclarationAssign" (formula "23") (term "1"))
      (rule "variableDeclaration" (formula "23") (term "1") (newnames "x"))
      (rule "assignment" (formula "23") (term "1"))
      (builtin "One Step Simplification" (formula "23"))
      (rule "variableDeclarationAssign" (formula "23") (term "1"))
      (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_1"))
      (rule "assignment_read_length" (formula "23"))
      (branch "Normal Execution (_pat != null)"
         (builtin "One Step Simplification" (formula "23"))
         (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "arrayLengthIsAnInt" (formula "7") (term "1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "arrayLengthNotNegative" (formula "7") (term "0"))
         (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "6"))
         (rule "leq_literals" (formula "7") (term "0"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "arrayLengthNotNegative" (formula "7") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "5"))
         (rule "leq_literals" (formula "7") (term "0"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "less_than_comparison_simple" (formula "23") (term "1"))
         (builtin "One Step Simplification" (formula "23"))
         (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "23") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "23") (term "0,0,0,1,0"))
         (rule "methodCallEmpty" (formula "23") (term "1"))
         (rule "emptyModality" (formula "23") (term "1"))
         (builtin "One Step Simplification" (formula "23"))
         (rule "impRight" (formula "23"))
         (rule "notLeft" (formula "1"))
         (rule "inEqSimp_geqRight" (formula "21"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "inEqSimp_antiSymm" (formula "12") (ifseqformula "1"))
         (rule "applyEq" (formula "20") (term "0,1") (ifseqformula "12"))
         (rule "eqSymm" (formula "20") (term "1"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "12"))
         (rule "inEqSimp_homoInEq0" (formula "1"))
         (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,0"))
         (rule "times_zero_1" (formula "1") (term "0"))
         (rule "qeq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "applyEq" (formula "7") (term "0") (ifseqformula "11"))
         (rule "inEqSimp_commuteLeq" (formula "7"))
         (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
         (rule "inEqSimp_homoInEq1" (formula "11"))
         (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
         (rule "add_literals" (formula "11") (term "1,0"))
         (rule "times_zero_1" (formula "11") (term "0"))
         (rule "leq_literals" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "10"))
         (rule "eqSymm" (formula "15") (term "1"))
         (rule "applyEq" (formula "14") (term "0,1") (ifseqformula "10"))
         (rule "eqSymm" (formula "14") (term "1"))
         (rule "applyEq" (formula "6") (term "0") (ifseqformula "10"))
         (rule "applyEq" (formula "16") (term "0,1,1") (ifseqformula "10"))
         (rule "inEqSimp_homoInEq1" (formula "16") (term "1,1"))
         (rule "polySimp_addComm1" (formula "16") (term "0,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,1"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,1,1"))
         (rule "polySimp_rightDist" (formula "16") (term "1,1,1"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,1"))
         (rule "mul_literals" (formula "16") (term "0,1,1,1"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,1,1"))
         (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
         (rule "leq_literals" (formula "8") (term "0"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "inEqSimp_or_weaken0" (formula "14"))
         (rule "polySimp_addAssoc" (formula "14") (term "1,0"))
         (rule "add_literals" (formula "14") (term "0,1,0"))
         (rule "add_zero_left" (formula "14") (term "1,0"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "methodCallReturn" (formula "21") (term "1"))
         (rule "assignment" (formula "21") (term "1"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "methodCallEmpty" (formula "21") (term "1"))
         (rule "tryEmpty" (formula "21") (term "1"))
         (rule "emptyModality" (formula "21") (term "1"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "applyEq" (formula "21") (term "1,1,0,0,1,1,1") (ifseqformula "9"))
         (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "9"))
         (rule "inEqSimp_commuteGeq" (formula "21") (term "0"))
         (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "21"))
         (rule "equiv_right" (formula "21"))
         (branch
            (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "replace_known_left" (formula "15") (term "0,1") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "14"))
            (rule "times_zero_1" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "8"))
            (rule "leq_literals" (formula "1") (term "0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "andRight" (formula "21"))
            (branch
               (rule "allRight" (formula "21") (inst "sk=j_1"))
               (rule "cutUpperBound" (formula "21") (ifseqformula "17"))
               (branch
                  (rule "crossInst" (formula "18") (inst "sk=j_3") (ifseqformula "22"))
                  (rule "orRight" (formula "23"))
                  (rule "andLeft" (formula "18"))
                  (rule "orRight" (formula "24"))
                  (rule "eqSymm" (formula "1"))
                  (rule "inEqSimp_geqRight" (formula "25"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "25"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
                  (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                  (rule "add_literals" (formula "2") (term "1,1,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0"))
                  (rule "add_zero_right" (formula "2") (term "0"))
                  (rule "leq_literals" (formula "2"))
                  (rule "closeFalse" (formula "2"))
               )
               (branch
                  (rule "crossInst" (formula "18") (inst "sk=j_2") (ifseqformula "22"))
                  (rule "orRight" (formula "23"))
                  (rule "notLeft" (formula "1"))
                  (rule "andLeft" (formula "17"))
                  (rule "orRight" (formula "24"))
                  (rule "eqSymm" (formula "21"))
                  (rule "inEqSimp_geqRight" (formula "25"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "25"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
                  (rule "applyEqRigid" (formula "20") (term "1,1,0") (ifseqformula "19"))
                  (rule "applyEqRigid" (formula "20") (term "0,0,0,0") (ifseqformula "19"))
                  (rule "applyEqRigid" (formula "20") (term "0,2,0,1") (ifseqformula "19"))
                  (rule "eqSymm" (formula "20") (term "1"))
                  (rule "applyEqRigid" (formula "20") (term "0,1,0,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "20") (term "0,2,0,1") (ifseqformula "19"))
                  (rule "eqSymm" (formula "20") (term "1"))
                  (rule "replace_known_right" (formula "20") (term "1") (ifseqformula "26"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_contradEq7" (formula "23") (ifseqformula "2"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0"))
                  (rule "add_literals" (formula "23") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0"))
                  (rule "leq_literals" (formula "23") (term "0"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "false_right" (formula "23"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "20") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                  (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                  (rule "add_literals" (formula "20") (term "0,0,1"))
                  (rule "leq_literals" (formula "20") (term "0,1"))
                  (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "16"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                  (rule "mul_literals" (formula "2") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "2"))
                  (rule "andLeft" (formula "21"))
                  (rule "inEqSimp_homoInEq1" (formula "21"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0"))
                  (rule "polySimp_addComm0" (formula "21") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "21") (term "0"))
                  (rule "add_literals" (formula "21") (term "1,1,0"))
                  (rule "times_zero_1" (formula "21") (term "1,0"))
                  (rule "add_zero_right" (formula "21") (term "0"))
                  (rule "leq_literals" (formula "21"))
                  (rule "closeFalse" (formula "21"))
               )
            )
            (branch
               (rule "allRight" (formula "21") (inst "sk=j_0"))
               (rule "orRight" (formula "21"))
               (rule "orRight" (formula "21"))
               (rule "inEqSimp_leqRight" (formula "21"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "22"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
               (rule "times_zero_1" (formula "3") (term "0,0"))
               (rule "add_zero_left" (formula "3") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "3"))
               (rule "mul_literals" (formula "3") (term "1"))
               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
               (rule "mul_literals" (formula "3") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0"))
               (rule "add_literals" (formula "3") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "3"))
               (rule "mul_literals" (formula "3") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "3"))
               (rule "leq_literals" (formula "11") (term "0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "allLeft" (formula "21") (inst "t=j_0"))
               (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "25"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "1"))
               (rule "inEqSimp_contradInEq0" (formula "21") (term "0") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq1" (formula "21") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "21") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,0"))
               (rule "add_literals" (formula "21") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "21") (term "1,0,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0"))
               (rule "leq_literals" (formula "21") (term "0,0"))
               (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "2"))
               (rule "andLeft" (formula "21"))
               (rule "inEqSimp_homoInEq1" (formula "21"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0"))
               (rule "polySimp_addComm0" (formula "21") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0"))
               (rule "add_literals" (formula "21") (term "1,1,0"))
               (rule "times_zero_1" (formula "21") (term "1,0"))
               (rule "add_literals" (formula "21") (term "0"))
               (rule "leq_literals" (formula "21"))
               (rule "closeFalse" (formula "21"))
            )
         )
         (branch
            (rule "andLeft" (formula "1"))
            (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "23"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "15"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "18"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "replace_known_right" (formula "16") (term "0,1") (ifseqformula "22"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "notLeft" (formula "16"))
            (rule "inEqSimp_geqRight" (formula "22"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "applyEq" (formula "3") (term "1,0,0,0") (ifseqformula "15"))
            (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "15"))
            (rule "applyEqRigid" (formula "14") (term "0,1,1") (ifseqformula "17"))
            (rule "times_zero_2" (formula "14") (term "1,1"))
            (rule "add_zero_right" (formula "14") (term "1"))
            (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "16"))
            (rule "equal_literals" (formula "19"))
            (rule "false_right" (formula "19"))
            (rule "applyEqRigid" (formula "17") (term "1,1,0,0") (ifseqformula "14"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
            (rule "inEqSimp_homoInEq0" (formula "15"))
            (rule "polySimp_pullOutFactor1" (formula "15") (term "0"))
            (rule "add_literals" (formula "15") (term "1,0"))
            (rule "times_zero_1" (formula "15") (term "0"))
            (rule "qeq_literals" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "applyEqRigid" (formula "17") (term "1,1,0,0") (ifseqformula "14"))
            (rule "applyEqRigid" (formula "2") (term "1,1,0,0") (ifseqformula "14"))
            (rule "applyEq" (formula "12") (term "0") (ifseqformula "14"))
            (rule "inEqSimp_commuteLeq" (formula "12"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "8"))
            (rule "leq_literals" (formula "12") (term "0"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
            (rule "qeq_literals" (formula "1") (term "0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (_pat = null)"
         (builtin "One Step Simplification" (formula "24"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Null Reference (_pat = null)"
   (builtin "One Step Simplification" (formula "11"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
   (rule "closeFalse" (formula "1"))
)
)

}
