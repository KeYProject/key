\settings {
"#Proof-Settings-Config-File
#Wed Nov 09 11:05:27 CET 2011
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , initialisation-initialisation\\:disableStaticInitialisation , runtimeExceptions-runtimeExceptions\\:ban
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[View]HideIntermediateProofsteps=false
[View]HideClosedSubtrees=false
[General]UseOCL=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[View]ShowWholeTaclet=false
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMinimum=-2147483645
[General]StupidMode=true
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[General]OneStepSimplification=true
[General]UseJML=true
[SMTSettings]integersMaximum=2147483645
[General]DnDDirectionSensitive=true
[View]FontIndex=4
[View]UseSystemLookAndFeel=false
[SMTSettings]useUninterpretedMultiplication=true
[Strategy]MaximumNumberOfAutomaticApplications=10000
[View]MaxTooltipLines=40
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[SMTSettings]explicitTypeHierarchy=false
"
}

\javaSource ".";

\chooseContract "JML normal_behavior operation contract [id: 1 / TwoWaySwap::swap]";

\proof {
(keyLog "0" (keyUser "bubel" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "5018")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "10") (term "1"))
(builtin "One Step Simplification" (formula "10"))
(rule "eqSymm" (formula "10") (term "1,0,0,0,0,0,1"))
(rule "eqSymm" (formula "10") (term "1,0,0,0,0,1"))
(rule "eqSymm" (formula "10") (term "0,0,0,0,0,0,1"))
(rule "eqSymm" (formula "10") (term "1,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "5"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "7"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "5") (term "0"))
(rule "polySimp_addComm1" (formula "7") (term "0"))
(rule "inEqSimp_sepNegMonomial0" (formula "5"))
(rule "polySimp_mulLiterals" (formula "5") (term "0"))
(rule "polySimp_elimOne" (formula "5") (term "0"))
(rule "inEqSimp_sepNegMonomial0" (formula "7"))
(rule "polySimp_mulLiterals" (formula "7") (term "0"))
(rule "polySimp_elimOne" (formula "7") (term "0"))
(rule "elementOfUnion" (formula "10") (term "0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "10") (term "1,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "10") (term "0,0,0,0,0,1,0,1"))
(rule "Class_invariant_axiom_for_TwoWaySwap" (formula "8") (inst "sk=sk_0") (ifseqformula "3"))
(branch "Use Axiom"
   (rule "notLeft" (formula "8"))
   (rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_swap,savedHeapBefore_swap"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "t"))
   (rule "assignment_array2" (formula "10"))
   (branch "Normal Execution (a != null)"
      (builtin "One Step Simplification" (formula "10"))
      (rule "eval_order_array_access3" (formula "10") (term "1") (inst "#v1=x_1") (inst "#v2=x") (inst "#v0=x_arr"))
      (rule "variableDeclarationAssign" (formula "10") (term "1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_arr"))
      (rule "assignment" (formula "10") (term "1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "variableDeclarationAssign" (formula "10") (term "1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "x"))
      (rule "assignment" (formula "10") (term "1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=x_2"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_2"))
      (rule "evaluate_lazy_or" (formula "10") (term "1"))
      (rule "ifElseUnfold" (formula "10") (term "1") (inst "#boolv=x_3"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_3"))
      (rule "compound_less_equal_than_comparison_1" (formula "10") (term "1") (inst "#v0=x_4"))
      (rule "variableDeclarationAssign" (formula "10") (term "1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_4"))
      (rule "assignment_read_length" (formula "10"))
      (branch "Normal Execution (a != null)"
         (builtin "One Step Simplification" (formula "10"))
         (rule "less_equal_than_comparison_new" (formula "10") (term "1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "assignment" (formula "10") (term "1,1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "assignment" (formula "10") (term "1,2"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "5"))
         (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0"))
         (rule "leq_literals" (formula "10") (term "0,0"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "ifElse" (formula "10") (term "1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "less_than_comparison_new" (formula "10") (term "1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "assignment" (formula "10") (term "1,1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "assignment" (formula "10") (term "1,2"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "blockEmpty" (formula "10") (term "1,2"))
         (rule "blockEmpty" (formula "10") (term "1,1"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0"))
         (rule "mul_literals" (formula "10") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "4"))
         (rule "qeq_literals" (formula "10") (term "0,0"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "arrayLengthNotNegative" (formula "5") (term "0"))
         (rule "ifSplit" (formula "11"))
         (branch "if x_2 true"
            (builtin "One Step Simplification" (formula "12"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_2 false"
            (builtin "One Step Simplification" (formula "1"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "1"))
            (rule "variableDeclarationAssign" (formula "11") (term "1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_1"))
            (rule "assignment_array2" (formula "11"))
            (branch "Normal Execution (a != null)"
               (builtin "One Step Simplification" (formula "11"))
               (rule "assignment_to_primitive_array_component" (formula "11"))
               (branch "Normal Execution (x_arr != null)"
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "assignment_to_primitive_array_component" (formula "11"))
                  (branch "Normal Execution (a != null)"
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "selectOfStore" (formula "11") (term "1,0,1,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "methodCallEmpty" (formula "11") (term "1"))
                     (rule "tryEmpty" (formula "11") (term "1"))
                     (rule "emptyModality" (formula "11") (term "1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "eqSymm" (formula "11") (term "1,0,0,1"))
                     (rule "eqSymm" (formula "11") (term "1,0,0"))
                     (rule "eqSymm" (formula "11") (term "1,0,0,0"))
                     (rule "eqSymm" (formula "11") (term "0,0,0,0"))
                     (rule "selectOfStore" (formula "11") (term "0,1,0,0,1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "eqSymm" (formula "11") (term "1,0,0,1,0,0,1"))
                     (rule "eqSymm" (formula "11") (term "0,0,0,1,0,0,1"))
                     (rule "castDel" (formula "11") (term "1,0,1,0,0,1"))
                     (rule "selectOfStore" (formula "11") (term "0,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "eqSymm" (formula "11") (term "0,0,1,0,0,0"))
                     (rule "castDel" (formula "11") (term "1,0,1,0,0,0"))
                     (rule "selectOfStore" (formula "11") (term "2,0,1,0,0,1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "eqSymm" (formula "11") (term "1,0,2,0,1,0,0,1"))
                     (rule "eqSymm" (formula "11") (term "0,0,2,0,1,0,0,1"))
                     (rule "castDel" (formula "11") (term "1,2,0,1,0,0,1"))
                     (rule "selectOfStore" (formula "11") (term "0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "eqSymm" (formula "11") (term "0,0,0,0,0,0,0"))
                     (rule "castDel" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "selectOfStore" (formula "11") (term "2,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "eqSymm" (formula "11") (term "0,2,0,0,0,0,0"))
                     (rule "castDel" (formula "11") (term "1,2,0,0,0,0,0"))
                     (rule "selectOfStore" (formula "11") (term "0,0,0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "selectOfStore" (formula "11") (term "0,0,2,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "selectOfStore" (formula "11") (term "0,0,0,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "selectOfStore" (formula "11") (term "0,0,0,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "selectOfStore" (formula "11") (term "1,2,2,0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "selectOfStore" (formula "11") (term "0,0,0,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "selectOfStore" (formula "11") (term "1,2,2,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "selectOfStore" (formula "11") (term "0,0,2,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "JML_represents_clause_for_TwoWaySwap_seq" (formula "11") (term "0,1,0,0") (inst "sk=sk_1") (inst "S=_var0") (ifseqformula "3"))
                     (branch "Use Axiom"
                        (rule "selectOfStore" (formula "11") (term "1,0,1,0,0"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "selectOfStore" (formula "11") (term "1,0,1,0,0"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "JML_represents_clause_for_TwoWaySwap_seq" (formula "11") (term "0,1,1,0,0") (inst "sk=sk_2") (inst "S=_var1") (ifseqformula "3"))
                        (branch "Use Axiom"
                           (rule "Class_invariant_axiom_for_TwoWaySwap" (formula "11") (term "1,0") (inst "sk=sk_3") (ifseqformula "3"))
                           (branch "Use Axiom"
                              (rule "selectOfStore" (formula "11") (term "0,0,1,0"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "selectOfStore" (formula "11") (term "0,0,1,0"))
                              (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "9")))
                              (rule "ifthenelse_split" (formula "11") (term "0,0,0"))
                              (branch "j = i TRUE"
                                 (rule "eqSymm" (formula "12") (term "0,0"))
                                 (rule "applyEq" (formula "12") (term "0,2,0,0,1,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "applyEq" (formula "9") (term "1,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "8") (term "0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "10") (term "0,2,0,0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "applyEq" (formula "10") (term "0,2,1,2,0,1,0,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "10") (term "0,1,1,0,0,1,0,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "10") (term "2,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "10") (term "0,1,1,1,0,0,0,0,1") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "cut_direct" (formula "10") (term "0"))
                                 (branch "CUT: array2seq(store(heap, self_0.a, arr(i), self_0.a[i]), self_0.a) = seqSwap(array2seq(heap, self_0.a), i, i) TRUE"
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "allRight" (formula "11") (inst "sk=f_1"))
                                    (rule "allRight" (formula "11") (inst "sk=o_1"))
                                    (rule "orRight" (formula "11"))
                                    (rule "orRight" (formula "11"))
                                    (rule "replace_known_right" (formula "13") (term "0,2,0") (ifseqformula "11"))
                                    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "11")))
                                    (rule "closeTrue" (formula "13"))
                                 )
                                 (branch "CUT: array2seq(store(heap, self_0.a, arr(i), self_0.a[i]), self_0.a) = seqSwap(array2seq(heap, self_0.a), i, i) FALSE"
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "false_right" (formula "11"))
                                    (rule "equalityToSeqGetAndSeqLenRight" (formula "10") (inst "iv=_var3"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1"))
                                    (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1"))
                                    (rule "getOfSwap" (formula "10") (term "1,1,0,1"))
                                    (rule "eqSymm" (formula "10") (term "1,0,1"))
                                    (rule "lenOfSwap" (formula "10") (term "1,0"))
                                    (rule "lenOfArr2Seq" (formula "10") (term "0,0"))
                                    (rule "eqSymm" (formula "10") (term "0"))
                                    (rule "lenOfArr2Seq" (formula "10") (term "1,1,1,0,0,1"))
                                    (rule "getOfArr2Seq" (formula "10") (term "1,0,1,0,1"))
                                    (rule "getOfArr2Seq" (formula "10") (term "1,1,0,1"))
                                    (rule "getOfArr2Seq" (formula "10") (term "2,2,0,1,0,1"))
                                    (rule "getOfArr2Seq" (formula "10") (term "1,2,0,1,0,1"))
                                    (rule "lenOfArr2Seq" (formula "10") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "allRight" (formula "10") (inst "sk=_var3_0"))
                                    (rule "impRight" (formula "10"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "eqSymm" (formula "12") (term "0,0"))
                                    (rule "eqSymm" (formula "12") (term "0,2,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "2"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1"))
                                    (rule "mul_literals" (formula "2") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                    (rule "narrowSelectArrayType" (formula "12") (term "2,2,0") (ifseqformula "4"))
                                    (rule "narrowSelectArrayType" (formula "12") (term "1,0") (ifseqformula "4"))
                                    (rule "narrowSelectArrayType" (formula "12") (term "1,2,0") (ifseqformula "4"))
                                    (rule "eqSymm" (formula "12"))
                                    (rule "selectOfStore" (formula "12") (term "0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "castDel" (formula "12") (term "1,0"))
                                    (rule "narrowSelectArrayType" (formula "12") (term "2,0") (ifseqformula "4"))
                                    (rule "eqSymm" (formula "12"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0,0") (ifseqformula "4"))
                                    (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "11"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "ifthenelse_split" (formula "13") (term "0"))
                                    (branch "i = _var3_0 TRUE"
                                       (rule "eqSymm" (formula "14"))
                                       (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "14"))
                                       (rule "closeTrue" (formula "14"))
                                    )
                                    (branch "i = _var3_0 FALSE"
                                       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                                       (rule "closeTrue" (formula "14"))
                                    )
                                 )
                              )
                              (branch "j = i FALSE"
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "cut_direct" (formula "12") (term "0"))
                                 (branch "CUT: array2seq(store(store(heap, self_0.a, arr(i), self_0.a[j]), self_0.a, arr(j), self_0.a[i]), self_0.a) = seqSwap(array2seq(heap, self_0.a), i, j) TRUE"
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "allRight" (formula "13") (inst "sk=f_0"))
                                    (rule "allRight" (formula "13") (inst "sk=o_0"))
                                    (rule "orRight" (formula "13"))
                                    (rule "orRight" (formula "13"))
                                    (rule "orRight" (formula "13"))
                                    (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "13")))
                                    (rule "closeTrue" (formula "16"))
                                 )
                                 (branch "CUT: array2seq(store(store(heap, self_0.a, arr(i), self_0.a[j]), self_0.a, arr(j), self_0.a[i]), self_0.a) = seqSwap(array2seq(heap, self_0.a), i, j) FALSE"
                                    (builtin "One Step Simplification" (formula "13"))
                                    (rule "false_right" (formula "13"))
                                    (rule "equalityToSeqGetAndSeqLenRight" (formula "12") (inst "iv=_var2"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1"))
                                    (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1"))
                                    (rule "getOfArr2Seq" (formula "12") (term "0,1,0,1"))
                                    (rule "lenOfSwap" (formula "12") (term "1,0"))
                                    (rule "lenOfArr2Seq" (formula "12") (term "0,0"))
                                    (rule "eqSymm" (formula "12") (term "0"))
                                    (rule "getOfSwap" (formula "12") (term "1,1,0,1"))
                                    (rule "eqSymm" (formula "12") (term "1,0,1"))
                                    (rule "lenOfArr2Seq" (formula "12") (term "1,1,1,0,0,1"))
                                    (rule "lenOfArr2Seq" (formula "12") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "allRight" (formula "12") (inst "sk=_var2_0"))
                                    (rule "impRight" (formula "12"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "eqSymm" (formula "14") (term "0,0"))
                                    (rule "eqSymm" (formula "14") (term "0,2,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "2"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                    (rule "mul_literals" (formula "2") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                    (rule "getOfArr2Seq" (formula "14") (term "2,2,0"))
                                    (rule "getOfArr2Seq" (formula "14") (term "1,2,0"))
                                    (rule "getOfArr2Seq" (formula "14") (term "1,0"))
                                    (rule "narrowSelectArrayType" (formula "14") (term "2,2,0") (ifseqformula "3"))
                                    (rule "narrowSelectArrayType" (formula "14") (term "1,0") (ifseqformula "3"))
                                    (rule "narrowSelectArrayType" (formula "14") (term "1,2,0") (ifseqformula "3"))
                                    (rule "eqSymm" (formula "14"))
                                    (rule "selectOfStore" (formula "14") (term "0"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "castDel" (formula "14") (term "1,0"))
                                    (rule "selectOfStore" (formula "14") (term "2,0"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "castDel" (formula "14") (term "1,2,0"))
                                    (rule "narrowSelectArrayType" (formula "14") (term "2,2,0") (ifseqformula "3"))
                                    (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "0,0") (ifseqformula "3"))
                                    (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "ifthenelse_split" (formula "15") (term "2,1"))
                                    (branch "j = _var2_0 TRUE"
                                       (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "eqSymm" (formula "16"))
                                       (rule "applyEq" (formula "15") (term "0") (ifseqformula "1"))
                                       (rule "eqSymm" (formula "15"))
                                       (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "15"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "closeTrue" (formula "16"))
                                    )
                                    (branch "j = _var2_0 FALSE"
                                       (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "15"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "closeTrue" (formula "16"))
                                    )
                                 )
                              )
                           )
                           (branch "Show Axiom Satisfiability"
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "closeTrue" (formula "11"))
                           )
                        )
                        (branch "Show Axiom Satisfiability"
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "instanceof_static_type" (formula "11") (term "0"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "closeTrue" (formula "11"))
                        )
                     )
                     (branch "Show Axiom Satisfiability"
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "eqSymm" (formula "12") (term "1,0,0"))
                        (rule "instanceof_static_type" (formula "11") (term "0"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "closeTrue" (formula "11"))
                     )
                  )
                  (branch "Null Reference (a = null)"
                     (builtin "One Step Simplification" (formula "12"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "false_right" (formula "12"))
                     (rule "selectOfStore" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Index Out of Bounds (a != null, but _j Out of Bounds!)"
                     (builtin "One Step Simplification" (formula "12"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "false_right" (formula "12"))
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "8"))
                     (rule "qeq_literals" (formula "1") (term "0,1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "selectOfStore" (formula "10") (term "0"))
                     (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "11")))
                     (rule "false_right" (formula "10"))
                     (rule "selectOfStore" (formula "1") (term "0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "1"))
                     (rule "andLeft" (formula "9"))
                     (rule "inEqSimp_homoInEq1" (formula "9"))
                     (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                     (rule "add_literals" (formula "9") (term "1,1,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0"))
                     (rule "add_zero_right" (formula "9") (term "0"))
                     (rule "leq_literals" (formula "9"))
                     (rule "closeFalse" (formula "9"))
                  )
               )
               (branch "Null Reference (x_arr = null)"
                  (builtin "One Step Simplification" (formula "12"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Index Out of Bounds (x_arr != null, but x Out of Bounds!)"
                  (builtin "One Step Simplification" (formula "12"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
                  (rule "false_right" (formula "12"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "1,1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "1") (term "0,1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Null Reference (a = null)"
               (builtin "One Step Simplification" (formula "12"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Index Out of Bounds (a != null, but _j Out of Bounds!)"
               (builtin "One Step Simplification" (formula "12"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
               (rule "false_right" (formula "12"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_literals" (formula "1") (term "0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "1,1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "8"))
               (rule "qeq_literals" (formula "1") (term "0,1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "9"))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_homoInEq1" (formula "1"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "leq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Null Reference (a = null)"
         (builtin "One Step Simplification" (formula "11"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (a = null)"
      (builtin "One Step Simplification" (formula "11"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Index Out of Bounds (a != null, but _i Out of Bounds!)"
      (builtin "One Step Simplification" (formula "11"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
      (rule "false_right" (formula "11"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "1") (term "0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "1,1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "5"))
      (rule "qeq_literals" (formula "1") (term "0,1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
      (rule "andLeft" (formula "1"))
      (rule "inEqSimp_homoInEq1" (formula "1"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "leq_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Show Axiom Satisfiability"
   (builtin "One Step Simplification" (formula "9"))
   (rule "closeTrue" (formula "9"))
)
)

}
