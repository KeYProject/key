\settings {
"#Proof-Settings-Config-File
#Fri May 25 18:49:50 CEST 2012
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , assertions-assertions\\:on , programRules-programRules\\:Java , intRules-intRules\\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\\:disableStaticInitialisation , runtimeExceptions-runtimeExceptions\\:ban
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[View]HideIntermediateProofsteps=false
[View]HideClosedSubtrees=false
[General]UseOCL=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[View]ShowWholeTaclet=false
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMinimum=-2147483645
[General]StupidMode=true
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[General]OneStepSimplification=true
[General]UseJML=true
[SMTSettings]integersMaximum=2147483645
[General]DnDDirectionSensitive=true
[View]FontIndex=2
[View]UseSystemLookAndFeel=false
[SMTSettings]useUninterpretedMultiplication=true
[Strategy]MaximumNumberOfAutomaticApplications=10000
[View]MaxTooltipLines=40
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[SMTSettings]explicitTypeHierarchy=false
"
}

\javaSource "";

\chooseContract "Tree[Tree::max()].JML normal_behavior operation contract.0";

\proof {
(keyLog "0" (keyUser "daniel" ) (keyVersion "e4dd806c87a462c41c9d84ae2a9ab5e60d7bcfb5"))

(autoModeTime "9631")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "7") (term "1"))
(builtin "One Step Simplification" (formula "7"))
(rule "eqSymm" (formula "4"))
(rule "eqSymm" (formula "7") (term "0,0,1,0,1"))
(rule "nnf_imp2or" (formula "7") (term "0,0,0,0,0,1"))
(rule "limit_java_lang_Object__inv_" (formula "5"))
(rule "replace_known_left" (formula "5") (term "1") (ifseqformula "6"))
(builtin "One Step Simplification" (formula "5"))
(rule "Class_invariant_axiom_for_Tree" (formula "6") (inst "sk=sk_0"))
(branch "Use Axiom"
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "commuteUnion2" (formula "10") (term "1"))
   (rule "eqSymm" (formula "10"))
   (rule "commuteUnion2" (formula "10") (term "2,0,0"))
   (rule "inEqSimp_gtToGeq" (formula "9") (term "1,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1"))
   (rule "inEqSimp_gtToGeq" (formula "9") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1"))
   (rule "polySimp_addComm1" (formula "9") (term "0,1,1"))
   (rule "polySimp_addComm1" (formula "9") (term "0,0,1"))
   (rule "applyEq" (formula "8") (term "0") (ifseqformula "4"))
   (rule "applyEq" (formula "9") (term "1,0,0,1,1") (ifseqformula "4"))
   (rule "applyEq" (formula "9") (term "1,0,0,0,1") (ifseqformula "4"))
   (rule "inEqSimp_sepNegMonomial1" (formula "9") (term "1,1"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0,1,1"))
   (rule "polySimp_elimOne" (formula "9") (term "0,1,1"))
   (rule "inEqSimp_sepNegMonomial1" (formula "9") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1"))
   (rule "polySimp_elimOne" (formula "9") (term "0,0,1"))
   (rule "methodBodyExpand" (formula "12") (term "1") (newnames "heapBefore_max,savedHeapBefore_max"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "variableDeclarationAssign" (formula "12") (term "1"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "res"))
   (rule "assignment" (formula "12") (term "1"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x"))
   (rule "inequality_comparison_new" (formula "12") (term "1"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "assignment" (formula "12") (term "1,1"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "assignment" (formula "12") (term "1,2"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "ifthenelse_negated_for" (formula "12"))
   (rule "ifthenelse_split_for" (formula "12"))
   (branch "self.left = null TRUE"
      (rule "replace_known_left" (formula "11") (term "0,0,0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "eqSymm" (formula "11"))
      (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "if" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "methodCallReturn" (formula "11") (term "1"))
      (rule "assignment" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "methodCallEmpty" (formula "11") (term "1"))
      (rule "tryEmpty" (formula "11") (term "1"))
      (rule "emptyModality" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "applyEq" (formula "11") (term "1,0,1") (ifseqformula "9"))
      (rule "applyEq" (formula "11") (term "1,0,0,0,0") (ifseqformula "9"))
      (rule "elementOfSingleton2" (formula "11") (term "0,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "elementOfSingleton2" (formula "11") (term "0,0,0,0"))
      (rule "Class_invariant_axiom_for_Tree" (formula "11") (term "1") (inst "sk=sk_6"))
      (branch "Use Axiom"
         (rule "commuteUnion2" (formula "11") (term "2,1,1,1,1"))
         (rule "eqSymm" (formula "11") (term "1,1"))
         (rule "commuteUnion2" (formula "11") (term "0,1,1"))
         (rule "replace_known_left" (formula "11") (term "1,0,0,0,0,1") (ifseqformula "7"))
         (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
         (rule "eqSymm" (formula "11") (term "1,1"))
         (rule "replace_known_left" (formula "11") (term "1,1") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "5"))
         (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "8"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "allRight" (formula "11") (inst "sk=z_22"))
         (rule "orRight" (formula "11"))
         (rule "notRight" (formula "11"))
         (rule "eqSymm" (formula "1"))
         (rule "inEqSimp_leqRight" (formula "12"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "2"))
         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0"))
         (rule "add_literals" (formula "1") (term "0"))
         (rule "qeq_literals" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Show Axiom Satisfiability"
         (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "1")) (ifInst ""  (formula "7")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "7")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "9")) (ifInst ""  (formula "9")))
         (rule "closeTrue" (formula "11"))
      )
   )
   (branch "self.left = null FALSE"
      (rule "replace_known_right" (formula "10") (term "0,0,0") (ifseqformula "12"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "12"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "13"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "14"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "notLeft" (formula "6"))
      (rule "ifSplit" (formula "15"))
      (branch "if x true"
         (builtin "One Step Simplification" (formula "16"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "methodCallWithAssignmentUnfoldArguments" (formula "15") (term "1"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "var"))
         (rule "assignment" (formula "15") (term "1"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "var_1"))
         (builtin "Use Operation Contract" (formula "15") (newnames "heapBefore_max_0,result_0,exc_0") (contract "Tree[Tree::max()].JML normal_behavior operation contract.0"))
         (branch "Post (max)"
            (builtin "One Step Simplification" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "14"))
            (rule "assignment" (formula "19") (term "1"))
            (builtin "One Step Simplification" (formula "19"))
            (rule "variableDeclarationAssign" (formula "19") (term "1"))
            (rule "variableDeclaration" (formula "19") (term "1") (newnames "var_2"))
            (rule "nnf_imp2or" (formula "13") (term "0"))
            (rule "limit_java_lang_Object__inv_" (formula "15"))
            (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "6"))
            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "16")))
            (rule "true_left" (formula "15"))
            (rule "Class_invariant_axiom_for_Tree" (formula "15") (inst "sk=sk_2"))
            (branch "Use Axiom"
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "commuteUnion2" (formula "19") (term "2,1,1"))
               (rule "commuteUnion2" (formula "19") (term "1"))
               (rule "eqSymm" (formula "19"))
               (rule "inEqSimp_gtToGeq" (formula "18") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1"))
               (rule "inEqSimp_gtToGeq" (formula "18") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,1"))
               (rule "polySimp_addComm1" (formula "18") (term "0,0,1"))
               (rule "polySimp_addComm1" (formula "18") (term "0,1,1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "18") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1"))
               (rule "polySimp_elimOne" (formula "18") (term "0,0,1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "18") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "18") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "18") (term "0,1,1"))
               (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "9"))
               (rule "mul_literals" (formula "17") (term "0,0"))
               (rule "add_zero_left" (formula "17") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17"))
               (rule "mul_literals" (formula "17") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "17"))
               (rule "leq_literals" (formula "8") (term "0"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "elementOfUnionEQ2" (formula "13") (ifseqformula "19"))
               (rule "elementOfSingleton2" (formula "13") (term "1"))
               (rule "eqSymm" (formula "13") (term "1"))
               (rule "elementOfUnionEQ2" (formula "12") (term "0,0,0") (ifseqformula "19"))
               (rule "elementOfSingleton2" (formula "12") (term "1,0,0,0"))
               (rule "nnf_notOr" (formula "12") (term "0,0"))
               (rule "commute_or" (formula "12") (term "0"))
               (rule "cnf_rightDist" (formula "12") (term "0"))
               (rule "distr_forallAnd" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "commute_or" (formula "12") (term "0"))
               (rule "commute_or" (formula "13") (term "0"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "castDelInt" (formula "13") (term "0,0"))
               (rule "instanceof_static_type" (formula "13") (term "0,0,1"))
               (builtin "One Step Simplification" (formula "13"))
               (builtin "Use Operation Contract" (formula "24") (newnames "heapBefore_max_1,result_1,exc_1") (contract "Tree[Tree::max()].JML normal_behavior operation contract.0"))
               (branch "Post (max)"
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "andLeft" (formula "21"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "23"))
                  (rule "assignment" (formula "28") (term "1"))
                  (builtin "One Step Simplification" (formula "28"))
                  (rule "nnf_imp2or" (formula "22") (term "0"))
                  (rule "limit_java_lang_Object__inv_" (formula "24"))
                  (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "7"))
                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "25")))
                  (rule "true_left" (formula "24"))
                  (rule "Class_invariant_axiom_for_Tree" (formula "24") (inst "sk=sk_4"))
                  (branch "Use Axiom"
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "commuteUnion2" (formula "28") (term "2,1,1"))
                     (rule "eqSymm" (formula "28"))
                     (rule "commuteUnion2" (formula "28") (term "0"))
                     (rule "inEqSimp_gtToGeq" (formula "27") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1"))
                     (rule "inEqSimp_gtToGeq" (formula "27") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,1"))
                     (rule "polySimp_addComm1" (formula "27") (term "0,0,1"))
                     (rule "polySimp_addComm1" (formula "27") (term "0,1,1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "27") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1"))
                     (rule "polySimp_elimOne" (formula "27") (term "0,0,1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "27") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "27") (term "0,1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "9"))
                     (rule "times_zero_1" (formula "26") (term "0,0"))
                     (rule "add_zero_left" (formula "26") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                     (rule "mul_literals" (formula "26") (term "1"))
                     (rule "elementOfUnionEQ2" (formula "23") (ifseqformula "28"))
                     (rule "elementOfSingleton2" (formula "23") (term "1"))
                     (rule "eqSymm" (formula "23") (term "1"))
                     (rule "elementOfUnionEQ2" (formula "22") (term "0,0,0") (ifseqformula "28"))
                     (rule "elementOfSingleton2" (formula "22") (term "1,0,0,0"))
                     (rule "nnf_notOr" (formula "22") (term "0,0"))
                     (rule "commute_or" (formula "22") (term "0"))
                     (rule "cnf_rightDist" (formula "22") (term "0"))
                     (rule "distr_forallAnd" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "commute_or" (formula "22") (term "0"))
                     (rule "commute_or" (formula "23") (term "0"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "castDelInt" (formula "23") (term "0,0"))
                     (rule "instanceof_static_type" (formula "23") (term "0,0,1"))
                     (builtin "One Step Simplification" (formula "23"))
                     (builtin "Use Operation Contract" (formula "33") (newnames "heapBefore_maxHelper,result_2,exc_2") (contract "Tree[Tree::maxHelper(int,int,int)].JML normal_behavior operation contract.0"))
                     (branch "Post (maxHelper)"
                        (builtin "One Step Simplification" (formula "30"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "andLeft" (formula "30"))
                        (rule "andLeft" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "33"))
                        (rule "assignment" (formula "38") (term "1"))
                        (builtin "One Step Simplification" (formula "38"))
                        (rule "blockEmpty" (formula "38") (term "1"))
                        (rule "eqSymm" (formula "34") (term "0"))
                        (rule "inEqSimp_commuteGeq" (formula "31"))
                        (rule "methodCallReturn" (formula "38") (term "1"))
                        (rule "assignment" (formula "38") (term "1"))
                        (builtin "One Step Simplification" (formula "38"))
                        (rule "methodCallEmpty" (formula "38") (term "1"))
                        (rule "tryEmpty" (formula "38") (term "1"))
                        (rule "emptyModality" (formula "38") (term "1"))
                        (builtin "One Step Simplification" (formula "38"))
                        (rule "elementOfUnionEQ2" (formula "38") (term "0,1") (ifseqformula "10"))
                        (rule "elementOfSingleton2" (formula "38") (term "1,0,1"))
                        (rule "eqSymm" (formula "38") (term "1,0,1"))
                        (rule "elementOfUnionEQ2" (formula "38") (term "0,0,0,0") (ifseqformula "10"))
                        (rule "elementOfSingleton2" (formula "38") (term "1,0,0,0,0"))
                        (rule "elementOfUnion2" (formula "38") (term "0,0,1"))
                        (rule "elementOfUnion2" (formula "38") (term "0,0,0,0,0"))
                        (rule "elementOfUnionEQ2" (formula "38") (term "0,0,0,1") (ifseqformula "29"))
                        (rule "elementOfSingleton2" (formula "38") (term "1,0,0,0,1"))
                        (rule "eqSymm" (formula "38") (term "1,0,0,0,1"))
                        (rule "elementOfUnionEQ2" (formula "38") (term "1,0,0,1") (ifseqformula "20"))
                        (rule "elementOfSingleton2" (formula "38") (term "1,1,0,0,1"))
                        (rule "eqSymm" (formula "38") (term "1,1,0,0,1"))
                        (rule "elementOfUnionEQ2" (formula "38") (term "0,0,0,0,0,0") (ifseqformula "29"))
                        (rule "elementOfSingleton2" (formula "38") (term "1,0,0,0,0,0,0"))
                        (rule "elementOfUnionEQ2" (formula "38") (term "1,0,0,0,0,0") (ifseqformula "20"))
                        (rule "elementOfSingleton2" (formula "38") (term "1,1,0,0,0,0,0"))
                        (rule "nnf_notOr" (formula "38") (term "0,0,0"))
                        (rule "nnf_notOr" (formula "38") (term "0,0,0,0"))
                        (rule "nnf_notOr" (formula "38") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "38") (term "0,0,0,0,0"))
                        (rule "Class_invariant_axiom_for_Tree" (formula "38") (term "1,1") (inst "sk=sk_5"))
                        (branch "Use Axiom"
                           (rule "commuteUnion2" (formula "38") (term "1,1,1,1"))
                           (rule "commuteUnion2" (formula "38") (term "2,0,1,1,1,1"))
                           (rule "eqSymm" (formula "38") (term "1,1,1"))
                           (rule "replace_known_left" (formula "38") (term "1,1,1,0,0,0,1,1") (ifseqformula "7"))
                           (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "37")) (ifInst ""  (formula "35")) (ifInst ""  (formula "37")) (ifInst ""  (formula "6")) (ifInst ""  (formula "37")) (ifInst ""  (formula "37")) (ifInst ""  (formula "10")))
                           (rule "inEqSimp_gtToGeq" (formula "38") (term "1,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,1,1,1"))
                           (rule "inEqSimp_gtToGeq" (formula "38") (term "0,1,1,1"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,1,1,1"))
                           (rule "polySimp_addComm1" (formula "38") (term "0,1,1,1,1"))
                           (rule "polySimp_addComm1" (formula "38") (term "0,0,1,1,1"))
                           (rule "applyEq" (formula "38") (term "0,0,1,1") (ifseqformula "4"))
                           (rule "applyEq" (formula "38") (term "1,0,0,1,1,1,1") (ifseqformula "4"))
                           (rule "applyEq" (formula "38") (term "1,0,0,0,1,1,1") (ifseqformula "4"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "38") (term "1,1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "0,1,1,1,1"))
                           (rule "polySimp_elimOne" (formula "38") (term "0,1,1,1,1"))
                           (rule "replace_known_left" (formula "38") (term "1,1,1,1") (ifseqformula "9"))
                           (builtin "One Step Simplification" (formula "38"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "38") (term "1,1,1"))
                           (rule "polySimp_mulLiterals" (formula "38") (term "0,1,1,1"))
                           (rule "polySimp_elimOne" (formula "38") (term "0,1,1,1"))
                           (rule "replace_known_left" (formula "38") (term "1,1,1") (ifseqformula "8"))
                           (builtin "One Step Simplification" (formula "38"))
                           (rule "inEqSimp_subsumption1" (formula "38") (term "1,1") (ifseqformula "17"))
                           (rule "leq_literals" (formula "38") (term "0,1,1"))
                           (builtin "One Step Simplification" (formula "38"))
                           (rule "ifthenelse_split" (formula "12") (term "1,0,0,0"))
                           (branch "self.left.left = null TRUE"
                              (builtin "One Step Simplification" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "replace_known_left" (formula "20") (term "0,0,0") (ifseqformula "12"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "eqSymm" (formula "20"))
                              (rule "replace_known_left" (formula "14") (term "0,1,0") (ifseqformula "12"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "12"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "12"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "12"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "replace_known_left" (formula "36") (term "0,1,0,0,1,0,0,0,0") (ifseqformula "12"))
                              (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "12")))
                              (rule "applyEq" (formula "10") (term "1,0,0") (ifseqformula "18"))
                              (rule "applyEq" (formula "36") (term "0,1,0,1") (ifseqformula "14"))
                              (rule "eqSymm" (formula "36") (term "1,0,1"))
                              (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
                              (rule "inEqSimp_homoInEq0" (formula "13"))
                              (rule "polySimp_pullOutFactor1" (formula "13") (term "0"))
                              (rule "add_literals" (formula "13") (term "1,0"))
                              (rule "times_zero_1" (formula "13") (term "0"))
                              (rule "qeq_literals" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "applyEq" (formula "17") (term "0,1") (ifseqformula "13"))
                              (rule "applyEq" (formula "10") (term "0,1,0,0") (ifseqformula "13"))
                              (rule "commuteUnion_22" (formula "10") (term "0"))
                              (rule "applyEq" (formula "35") (term "1,0,1,0,0,0,0") (ifseqformula "13"))
                              (rule "ifthenelse_split" (formula "26") (term "0,0"))
                              (branch "self.right.left = null TRUE"
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "eqSymm" (formula "27"))
                                 (rule "replace_known_left" (formula "19") (term "0,1,0,0,0") (ifseqformula "26"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "true_left" (formula "19"))
                                 (rule "replace_known_left" (formula "35") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "25")))
                                 (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "replace_known_left" (formula "20") (term "0,1,0") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "25"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "true_left" (formula "24"))
                                 (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "24"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "applyEq" (formula "33") (term "0,0,0,1") (ifseqformula "20"))
                                 (rule "eqSymm" (formula "33") (term "0,0,1"))
                                 (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "24"))
                                 (rule "eqSymm" (formula "10"))
                                 (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                 (rule "inEqSimp_homoInEq0" (formula "19"))
                                 (rule "polySimp_pullOutFactor1" (formula "19") (term "0"))
                                 (rule "add_literals" (formula "19") (term "1,0"))
                                 (rule "times_zero_1" (formula "19") (term "0"))
                                 (rule "qeq_literals" (formula "19"))
                                 (rule "true_left" (formula "19"))
                                 (rule "applyEq" (formula "32") (term "1,0,0,0,0,0,0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "23") (term "0,1") (ifseqformula "19"))
                                 (rule "applyEq" (formula "10") (term "0,0,0,1") (ifseqformula "19"))
                                 (rule "commuteUnion2" (formula "10") (term "0,1"))
                                 (rule "cut_direct" (formula "28") (term "1,1"))
                                 (branch "CUT: result_2 = result_1 TRUE"
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "true_left" (formula "29"))
                                    (rule "replace_known_left" (formula "32") (term "0,0,1") (ifseqformula "28"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "allRight" (formula "32") (inst "sk=z_21"))
                                    (rule "orRight" (formula "32"))
                                    (rule "eqSymm" (formula "32") (term "0,1"))
                                    (rule "inEqSimp_leqRight" (formula "33"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                    (rule "inEqSimp_homoInEq1" (formula "28"))
                                    (rule "polySimp_pullOutFactor1" (formula "28") (term "0"))
                                    (rule "add_literals" (formula "28") (term "1,0"))
                                    (rule "times_zero_1" (formula "28") (term "0"))
                                    (rule "leq_literals" (formula "28"))
                                    (rule "true_left" (formula "28"))
                                    (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                                    (rule "applyEq" (formula "26") (term "1") (ifseqformula "28"))
                                    (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "28"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_contradEq7" (formula "32") (term "0,0,0") (ifseqformula "1"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "32") (term "1,1,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "32") (term "0,0,0,0,0"))
                                    (rule "leq_literals" (formula "32") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "32"))
                                    (rule "cut_direct" (formula "32") (term "0,0"))
                                    (branch "CUT: z_21 = result_0 TRUE"
                                       (builtin "One Step Simplification" (formula "33"))
                                       (rule "false_right" (formula "33"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "2"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1"))
                                       (rule "mul_literals" (formula "2") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                       (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "28"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                       (rule "mul_literals" (formula "2") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                       (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0"))
                                       (rule "add_zero_right" (formula "2") (term "0"))
                                       (rule "leq_literals" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                    (branch "CUT: z_21 = result_0 FALSE"
                                       (builtin "One Step Simplification" (formula "33"))
                                       (rule "notRight" (formula "33"))
                                       (rule "applyEq" (formula "27") (term "0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "12") (term "0,0,0,1") (ifseqformula "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "2"))
                                       (rule "andLeft" (formula "27"))
                                       (rule "inEqSimp_homoInEq1" (formula "27"))
                                       (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
                                       (rule "add_literals" (formula "27") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "27") (term "1,0"))
                                       (rule "add_zero_right" (formula "27") (term "0"))
                                       (rule "leq_literals" (formula "27"))
                                       (rule "closeFalse" (formula "27"))
                                    )
                                 )
                                 (branch "CUT: result_2 = result_1 FALSE"
                                    (builtin "One Step Simplification" (formula "28"))
                                    (rule "replace_known_right" (formula "33") (term "0,0,1") (ifseqformula "29"))
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "inEqSimp_strengthen1" (formula "27") (ifseqformula "29"))
                                    (rule "inEqSimp_contradEq7" (formula "29") (ifseqformula "27"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0"))
                                    (rule "add_literals" (formula "29") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "29") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "29") (term "0,0"))
                                    (rule "leq_literals" (formula "29") (term "0"))
                                    (builtin "One Step Simplification" (formula "29"))
                                    (rule "false_right" (formula "29"))
                                    (rule "cut_direct" (formula "28") (term "1"))
                                    (branch "CUT: result_2 = result_0 TRUE"
                                       (builtin "One Step Simplification" (formula "29"))
                                       (rule "true_left" (formula "29"))
                                       (rule "replace_known_left" (formula "32") (term "0,1") (ifseqformula "28"))
                                       (builtin "One Step Simplification" (formula "32"))
                                       (rule "allRight" (formula "32") (inst "sk=z_20"))
                                       (rule "orRight" (formula "32"))
                                       (rule "eqSymm" (formula "32") (term "0,1"))
                                       (rule "inEqSimp_leqRight" (formula "33"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                       (rule "inEqSimp_homoInEq1" (formula "28"))
                                       (rule "polySimp_addComm1" (formula "28") (term "0"))
                                       (rule "applyEq" (formula "27") (term "0") (ifseqformula "29"))
                                       (rule "inEqSimp_homoInEq1" (formula "27"))
                                       (rule "polySimp_pullOutFactor1" (formula "27") (term "0"))
                                       (rule "add_literals" (formula "27") (term "1,0"))
                                       (rule "times_zero_1" (formula "27") (term "0"))
                                       (rule "leq_literals" (formula "27"))
                                       (rule "true_left" (formula "27"))
                                       (rule "applyEq" (formula "26") (term "1") (ifseqformula "28"))
                                       (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "28"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "27"))
                                       (rule "polySimp_mulComm0" (formula "27") (term "1"))
                                       (rule "polySimp_rightDist" (formula "27") (term "1"))
                                       (rule "mul_literals" (formula "27") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "27") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_contradEq7" (formula "32") (term "0,1,0") (ifseqformula "1"))
                                       (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,0,1,0"))
                                       (rule "add_literals" (formula "32") (term "1,1,0,0,0,1,0"))
                                       (rule "times_zero_1" (formula "32") (term "1,0,0,0,1,0"))
                                       (rule "add_literals" (formula "32") (term "0,0,0,1,0"))
                                       (rule "leq_literals" (formula "32") (term "0,0,1,0"))
                                       (builtin "One Step Simplification" (formula "32"))
                                       (rule "cut_direct" (formula "32") (term "0,0"))
                                       (branch "CUT: z_20 = result_1 TRUE"
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "false_right" (formula "33"))
                                          (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                          (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "28"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                          (rule "mul_literals" (formula "2") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                          (rule "add_literals" (formula "2") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                          (rule "add_literals" (formula "2") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "2") (term "1,0"))
                                          (rule "add_zero_right" (formula "2") (term "0"))
                                          (rule "leq_literals" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                       (branch "CUT: z_20 = result_1 FALSE"
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "notRight" (formula "33"))
                                          (rule "applyEq" (formula "27") (term "0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "12") (term "0,0,0,1") (ifseqformula "1"))
                                          (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "27"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                          (rule "add_literals" (formula "2") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "2") (term "1,0"))
                                          (rule "add_zero_right" (formula "2") (term "0"))
                                          (rule "leq_literals" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                    )
                                    (branch "CUT: result_2 = result_0 FALSE"
                                       (builtin "One Step Simplification" (formula "28"))
                                       (rule "replace_known_right" (formula "33") (term "0,1") (ifseqformula "29"))
                                       (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "28")))
                                       (rule "allRight" (formula "33") (inst "sk=z_19"))
                                       (rule "orRight" (formula "33"))
                                       (rule "eqSymm" (formula "33") (term "0,1"))
                                       (rule "inEqSimp_leqRight" (formula "34"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "applyEq" (formula "34") (term "0,0,1") (ifseqformula "29"))
                                       (rule "eqSymm" (formula "34") (term "0,1"))
                                       (rule "applyEq" (formula "26") (term "0") (ifseqformula "29"))
                                       (rule "inEqSimp_homoInEq0" (formula "26"))
                                       (rule "polySimp_pullOutFactor1" (formula "26") (term "0"))
                                       (rule "add_literals" (formula "26") (term "1,0"))
                                       (rule "times_zero_1" (formula "26") (term "0"))
                                       (rule "qeq_literals" (formula "26"))
                                       (rule "true_left" (formula "26"))
                                       (rule "applyEq" (formula "11") (term "0,0,0,1") (ifseqformula "28"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_contradEq7" (formula "33") (term "0,1") (ifseqformula "1"))
                                       (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,0,1"))
                                       (rule "add_literals" (formula "33") (term "1,1,0,0,0,1"))
                                       (rule "times_zero_1" (formula "33") (term "1,0,0,0,1"))
                                       (rule "add_zero_right" (formula "33") (term "0,0,0,1"))
                                       (rule "leq_literals" (formula "33") (term "0,0,1"))
                                       (builtin "One Step Simplification" (formula "33"))
                                       (rule "inEqSimp_strengthen1" (formula "26") (ifseqformula "29"))
                                       (rule "inEqSimp_contradEq7" (formula "29") (ifseqformula "26"))
                                       (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0"))
                                       (rule "add_literals" (formula "29") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "29") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "29") (term "0,0"))
                                       (rule "leq_literals" (formula "29") (term "0"))
                                       (builtin "One Step Simplification" (formula "29"))
                                       (rule "false_right" (formula "29"))
                                       (rule "cut_direct" (formula "32") (term "0,1"))
                                       (branch "CUT: z_19 = result_0 TRUE"
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "false_right" (formula "33"))
                                          (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1"))
                                          (rule "mul_literals" (formula "2") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "27"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                          (rule "mul_literals" (formula "2") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                          (rule "add_literals" (formula "2") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                          (rule "add_literals" (formula "2") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "2") (term "1,0"))
                                          (rule "add_zero_right" (formula "2") (term "0"))
                                          (rule "leq_literals" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                       (branch "CUT: z_19 = result_0 FALSE"
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "notRight" (formula "33"))
                                          (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "applyEq" (formula "33") (term "0") (ifseqformula "1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1"))
                                          (rule "mul_literals" (formula "2") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "28"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                          (rule "mul_literals" (formula "2") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                          (rule "add_literals" (formula "2") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                          (rule "add_literals" (formula "2") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "2") (term "1,0"))
                                          (rule "add_zero_right" (formula "2") (term "0"))
                                          (rule "leq_literals" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                    )
                                 )
                              )
                              (branch "self.right.left = null FALSE"
                                 (rule "replace_known_right" (formula "19") (term "0,1,0,0,0") (ifseqformula "32"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "replace_known_right" (formula "36") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "32"))
                                 (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "32")))
                                 (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "32"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "replace_known_right" (formula "21") (term "0,1,0") (ifseqformula "33"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "33"))
                                 (builtin "One Step Simplification" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "34"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "notLeft" (formula "22"))
                                 (rule "elementOfUnion2" (formula "19") (term "0,0,0"))
                                 (rule "elementOfUnion2" (formula "38") (term "0,0,0,1"))
                                 (rule "elementOfUnion2" (formula "38") (term "0,0,0,0,0,0,0"))
                                 (rule "elementOfUnion2" (formula "21") (term "0"))
                                 (rule "nnf_notOr" (formula "19") (term "0,0"))
                                 (rule "nnf_notOr" (formula "38") (term "0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "19") (term "0"))
                                 (rule "commute_and" (formula "19") (term "1,0"))
                                 (rule "cnf_rightDist" (formula "19") (term "0"))
                                 (rule "distr_forallAnd" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "commute_or" (formula "19") (term "0"))
                                 (rule "cut_direct" (formula "33") (term "1,1"))
                                 (branch "CUT: result_2 = result_1 TRUE"
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "true_left" (formula "34"))
                                    (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                                    (rule "applyEq" (formula "39") (term "0,1,0,1") (ifseqformula "33"))
                                    (rule "applyEq" (formula "30") (term "1") (ifseqformula "33"))
                                    (rule "applyEq" (formula "39") (term "1,1,0,0") (ifseqformula "33"))
                                    (rule "applyEq" (formula "32") (term "0") (ifseqformula "33"))
                                    (rule "inEqSimp_homoInEq1" (formula "32"))
                                    (rule "polySimp_pullOutFactor1" (formula "32") (term "0"))
                                    (rule "add_literals" (formula "32") (term "1,0"))
                                    (rule "times_zero_1" (formula "32") (term "0"))
                                    (rule "leq_literals" (formula "32"))
                                    (rule "true_left" (formula "32"))
                                    (rule "applyEq" (formula "38") (term "0,1,0,0,0,1") (ifseqformula "32"))
                                    (rule "applyEq" (formula "38") (term "0,0,0,0,0,1") (ifseqformula "32"))
                                    (rule "applyEq" (formula "38") (term "1,1,0,0,1") (ifseqformula "32"))
                                    (rule "replace_known_left" (formula "38") (term "0,0,1") (ifseqformula "22"))
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "allRight" (formula "38") (inst "sk=z_18"))
                                    (rule "orRight" (formula "38"))
                                    (rule "eqSymm" (formula "38") (term "0,1"))
                                    (rule "eqSymm" (formula "38") (term "0,1,0,0"))
                                    (rule "inEqSimp_leqRight" (formula "39"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "cut_direct" (formula "23") (term "1"))
                                    (branch "CUT: self.right.value = result_1 TRUE"
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "true_left" (formula "24"))
                                       (rule "applyEq" (formula "29") (term "0,1,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "inEqSimp_homoInEq0" (formula "22"))
                                       (rule "polySimp_pullOutFactor1" (formula "22") (term "0"))
                                       (rule "add_literals" (formula "22") (term "1,0"))
                                       (rule "times_zero_1" (formula "22") (term "0"))
                                       (rule "qeq_literals" (formula "22"))
                                       (rule "true_left" (formula "22"))
                                       (rule "applyEq" (formula "38") (term "0,0,1,0,0") (ifseqformula "22"))
                                       (rule "eqSymm" (formula "38") (term "0,1,0,0"))
                                       (rule "inEqSimp_contradEq7" (formula "38") (term "0,1,0,0") (ifseqformula "1"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "38") (term "1,1,0,0,0,1,0,0"))
                                       (rule "times_zero_1" (formula "38") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "38") (term "0,0,0,1,0,0"))
                                       (rule "leq_literals" (formula "38") (term "0,0,1,0,0"))
                                       (builtin "One Step Simplification" (formula "38"))
                                       (rule "allLeft" (formula "21") (inst "t=z_18"))
                                       (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                                       (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "21") (term "0,0,1"))
                                       (rule "leq_literals" (formula "21") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "notLeft" (formula "21"))
                                       (rule "replace_known_right" (formula "39") (term "0,0,0,0") (ifseqformula "33"))
                                       (builtin "One Step Simplification" (formula "39"))
                                       (rule "allLeft" (formula "20") (inst "t=z_18"))
                                       (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                                       (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "20") (term "0,0,1"))
                                       (rule "leq_literals" (formula "20") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "notLeft" (formula "20"))
                                       (rule "replace_known_right" (formula "40") (term "0,0,0") (ifseqformula "33"))
                                       (builtin "One Step Simplification" (formula "40"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "0") (ifseqformula "2"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0") (ifseqformula "3"))
                                       (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "39"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "cut_direct" (formula "42") (term "0,0"))
                                       (branch "CUT: z_18 = result_0 TRUE"
                                          (builtin "One Step Simplification" (formula "43"))
                                          (rule "false_right" (formula "43"))
                                          (rule "applyEq" (formula "36") (term "0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "37") (term "0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "3"))
                                          (rule "polySimp_addComm1" (formula "3") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                          (rule "polySimp_rightDist" (formula "3") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                          (rule "mul_literals" (formula "3") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "34"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "inEqSimp_homoInEq1" (formula "3"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                          (rule "mul_literals" (formula "3") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                          (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                          (rule "add_literals" (formula "3") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "3") (term "1,0"))
                                          (rule "add_zero_right" (formula "3") (term "0"))
                                          (rule "leq_literals" (formula "3"))
                                          (rule "closeFalse" (formula "3"))
                                       )
                                       (branch "CUT: z_18 = result_0 FALSE"
                                          (builtin "One Step Simplification" (formula "43"))
                                          (rule "notRight" (formula "43"))
                                          (rule "applyEq" (formula "33") (term "0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "14") (term "0,1,0,0") (ifseqformula "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "3"))
                                          (rule "andLeft" (formula "33"))
                                          (rule "inEqSimp_homoInEq1" (formula "33"))
                                          (rule "polySimp_pullOutFactor1b" (formula "33") (term "0"))
                                          (rule "add_literals" (formula "33") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "33") (term "1,0"))
                                          (rule "add_zero_right" (formula "33") (term "0"))
                                          (rule "leq_literals" (formula "33"))
                                          (rule "closeFalse" (formula "33"))
                                       )
                                    )
                                    (branch "CUT: self.right.value = result_1 FALSE"
                                       (builtin "One Step Simplification" (formula "23"))
                                       (rule "inEqSimp_strengthen0" (formula "22") (ifseqformula "34"))
                                       (rule "inEqSimp_contradEq3" (formula "34") (ifseqformula "22"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0"))
                                       (rule "add_literals" (formula "34") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "34") (term "1,0,0"))
                                       (rule "add_literals" (formula "34") (term "0,0"))
                                       (rule "qeq_literals" (formula "34") (term "0"))
                                       (builtin "One Step Simplification" (formula "34"))
                                       (rule "false_right" (formula "34"))
                                       (rule "cut_direct" (formula "39") (term "0,1,0"))
                                       (branch "CUT: z_18 = result_0 TRUE"
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "false_right" (formula "40"))
                                          (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                          (rule "mul_literals" (formula "2") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "33"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                          (rule "mul_literals" (formula "2") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                          (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                          (rule "add_literals" (formula "2") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "2") (term "1,0"))
                                          (rule "add_zero_right" (formula "2") (term "0"))
                                          (rule "leq_literals" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                       (branch "CUT: z_18 = result_0 FALSE"
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "allLeft" (formula "20") (inst "t=z_18"))
                                          (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                                          (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "20") (term "0,0,1"))
                                          (rule "leq_literals" (formula "20") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "20"))
                                          (rule "notLeft" (formula "20"))
                                          (rule "replace_known_right" (formula "41") (term "0,1,0,0") (ifseqformula "34"))
                                          (builtin "One Step Simplification" (formula "41"))
                                          (rule "cut_direct" (formula "23") (term "0"))
                                          (branch "CUT: contains(result_1, self.right.right.values) TRUE"
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "true_left" (formula "24"))
                                             (rule "allLeft" (formula "21") (inst "t=z_18"))
                                             (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                                             (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "21") (term "0,0,1"))
                                             (rule "leq_literals" (formula "21") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "notLeft" (formula "21"))
                                             (rule "replace_known_right" (formula "42") (term "0,0,0") (ifseqformula "34"))
                                             (builtin "One Step Simplification" (formula "42"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "2"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0") (ifseqformula "3"))
                                             (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "40"))
                                             (builtin "One Step Simplification" (formula "11"))
                                             (rule "cut_direct" (formula "44") (term "0,1"))
                                             (branch "CUT: self.value = z_18 TRUE"
                                                (builtin "One Step Simplification" (formula "45"))
                                                (rule "false_right" (formula "45"))
                                                (rule "applyEq" (formula "34") (term "0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "14") (term "0,1,0,0") (ifseqformula "1"))
                                                (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "34"))
                                                (rule "andLeft" (formula "3"))
                                                (rule "inEqSimp_homoInEq1" (formula "3"))
                                                (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                (rule "add_literals" (formula "3") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "3") (term "1,0"))
                                                (rule "add_literals" (formula "3") (term "0"))
                                                (rule "leq_literals" (formula "3"))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: self.value = z_18 FALSE"
                                                (builtin "One Step Simplification" (formula "45"))
                                                (rule "notRight" (formula "45"))
                                                (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "25") (term "0") (ifseqformula "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "3"))
                                                (rule "andLeft" (formula "25"))
                                                (rule "inEqSimp_homoInEq1" (formula "25"))
                                                (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                                                (rule "mul_literals" (formula "25") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "25") (term "0"))
                                                (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                                                (rule "add_literals" (formula "25") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                                                (rule "add_literals" (formula "25") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "25") (term "1,0"))
                                                (rule "add_zero_right" (formula "25") (term "0"))
                                                (rule "leq_literals" (formula "25"))
                                                (rule "closeFalse" (formula "25"))
                                             )
                                          )
                                          (branch "CUT: contains(result_1, self.right.right.values) FALSE"
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "allLeft" (formula "21") (inst "t=z_18"))
                                             (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                                             (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "21") (term "0,0,1"))
                                             (rule "leq_literals" (formula "21") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "21"))
                                             (rule "notLeft" (formula "21"))
                                             (rule "replace_known_right" (formula "43") (term "0,0,0") (ifseqformula "34"))
                                             (builtin "One Step Simplification" (formula "43"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,0") (ifseqformula "2"))
                                             (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "40"))
                                             (builtin "One Step Simplification" (formula "10"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "2"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "cut_direct" (formula "45") (term "0,1"))
                                             (branch "CUT: self.value = z_18 TRUE"
                                                (builtin "One Step Simplification" (formula "46"))
                                                (rule "false_right" (formula "46"))
                                                (rule "applyEq" (formula "14") (term "0,1,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "34") (term "0") (ifseqformula "1"))
                                                (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "34"))
                                                (rule "andLeft" (formula "3"))
                                                (rule "inEqSimp_homoInEq1" (formula "3"))
                                                (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                (rule "add_literals" (formula "3") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "3") (term "1,0"))
                                                (rule "add_zero_right" (formula "3") (term "0"))
                                                (rule "leq_literals" (formula "3"))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: self.value = z_18 FALSE"
                                                (builtin "One Step Simplification" (formula "46"))
                                                (rule "notRight" (formula "46"))
                                                (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "25") (term "0") (ifseqformula "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "3"))
                                                (rule "andLeft" (formula "25"))
                                                (rule "inEqSimp_homoInEq1" (formula "25"))
                                                (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                                                (rule "mul_literals" (formula "25") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "25") (term "0"))
                                                (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                                                (rule "add_literals" (formula "25") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                                                (rule "add_literals" (formula "25") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "25") (term "1,0"))
                                                (rule "add_literals" (formula "25") (term "0"))
                                                (rule "leq_literals" (formula "25"))
                                                (rule "closeFalse" (formula "25"))
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: result_2 = result_1 FALSE"
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "inEqSimp_strengthen1" (formula "32") (ifseqformula "34"))
                                    (rule "inEqSimp_contradEq7" (formula "34") (ifseqformula "32"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0"))
                                    (rule "add_literals" (formula "34") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "34") (term "1,0,0"))
                                    (rule "add_literals" (formula "34") (term "0,0"))
                                    (rule "leq_literals" (formula "34") (term "0"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "false_right" (formula "34"))
                                    (rule "cut_direct" (formula "22") (term "1"))
                                    (branch "CUT: self.right.value = result_1 TRUE"
                                       (builtin "One Step Simplification" (formula "23"))
                                       (rule "true_left" (formula "23"))
                                       (rule "applyEq" (formula "39") (term "0,1,0,0,1") (ifseqformula "22"))
                                       (rule "eqSymm" (formula "39") (term "1,0,0,1"))
                                       (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "22"))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                       (rule "inEqSimp_homoInEq0" (formula "21"))
                                       (rule "polySimp_pullOutFactor1" (formula "21") (term "0"))
                                       (rule "add_literals" (formula "21") (term "1,0"))
                                       (rule "times_zero_1" (formula "21") (term "0"))
                                       (rule "qeq_literals" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "applyEq" (formula "38") (term "1,0,1,0,0,0,0,0") (ifseqformula "21"))
                                       (rule "inEqSimp_contradEq7" (formula "38") (term "1,0,0,1") (ifseqformula "31"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,1,0,0,1"))
                                       (rule "add_literals" (formula "38") (term "1,1,0,0,1,0,0,1"))
                                       (rule "times_zero_1" (formula "38") (term "1,0,0,1,0,0,1"))
                                       (rule "add_zero_right" (formula "38") (term "0,0,1,0,0,1"))
                                       (rule "leq_literals" (formula "38") (term "0,1,0,0,1"))
                                       (builtin "One Step Simplification" (formula "38"))
                                       (rule "cut_direct" (formula "32") (term "1"))
                                       (branch "CUT: result_2 = result_0 TRUE"
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "true_left" (formula "33"))
                                          (rule "replace_known_left" (formula "38") (term "1,0,1") (ifseqformula "32"))
                                          (builtin "One Step Simplification" (formula "38"))
                                          (rule "allRight" (formula "38") (inst "sk=z_17"))
                                          (rule "orRight" (formula "38"))
                                          (rule "eqSymm" (formula "38") (term "0,1"))
                                          (rule "inEqSimp_leqRight" (formula "39"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "33"))
                                          (rule "inEqSimp_homoInEq1" (formula "32"))
                                          (rule "polySimp_addComm1" (formula "32") (term "0"))
                                          (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                                          (rule "inEqSimp_homoInEq1" (formula "31"))
                                          (rule "polySimp_pullOutFactor1" (formula "31") (term "0"))
                                          (rule "add_literals" (formula "31") (term "1,0"))
                                          (rule "times_zero_1" (formula "31") (term "0"))
                                          (rule "leq_literals" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "applyEq" (formula "30") (term "1") (ifseqformula "32"))
                                          (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "32"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "31"))
                                          (rule "polySimp_mulComm0" (formula "31") (term "1"))
                                          (rule "polySimp_rightDist" (formula "31") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                                          (rule "mul_literals" (formula "31") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "31") (term "1,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_contradEq7" (formula "38") (term "0,1,0") (ifseqformula "1"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,0,1,0"))
                                          (rule "add_literals" (formula "38") (term "1,1,0,0,0,1,0"))
                                          (rule "times_zero_1" (formula "38") (term "1,0,0,0,1,0"))
                                          (rule "add_literals" (formula "38") (term "0,0,0,1,0"))
                                          (rule "leq_literals" (formula "38") (term "0,0,1,0"))
                                          (builtin "One Step Simplification" (formula "38"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "37") (term "0") (ifseqformula "2"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0") (ifseqformula "3"))
                                          (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "37"))
                                          (builtin "One Step Simplification" (formula "11"))
                                          (rule "cut_direct" (formula "40") (term "0,1,0"))
                                          (branch "CUT: z_17 = result_1 TRUE"
                                             (builtin "One Step Simplification" (formula "41"))
                                             (rule "false_right" (formula "41"))
                                             (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "3"))
                                             (rule "andLeft" (formula "34"))
                                             (rule "inEqSimp_homoInEq1" (formula "34"))
                                             (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                                             (rule "mul_literals" (formula "34") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "34") (term "0"))
                                             (rule "polySimp_addComm1" (formula "34") (term "0,0"))
                                             (rule "add_literals" (formula "34") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                             (rule "add_literals" (formula "34") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "34") (term "1,0"))
                                             (rule "add_zero_right" (formula "34") (term "0"))
                                             (rule "leq_literals" (formula "34"))
                                             (rule "closeFalse" (formula "34"))
                                          )
                                          (branch "CUT: z_17 = result_1 FALSE"
                                             (builtin "One Step Simplification" (formula "41"))
                                             (rule "cut_direct" (formula "41") (term "0,1"))
                                             (branch "CUT: self.value = z_17 TRUE"
                                                (builtin "One Step Simplification" (formula "42"))
                                                (rule "false_right" (formula "42"))
                                                (rule "applyEq" (formula "33") (term "0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "14") (term "0,1,0,0") (ifseqformula "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "3"))
                                                (rule "andLeft" (formula "33"))
                                                (rule "inEqSimp_homoInEq1" (formula "33"))
                                                (rule "polySimp_pullOutFactor1b" (formula "33") (term "0"))
                                                (rule "add_literals" (formula "33") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "33") (term "1,0"))
                                                (rule "add_literals" (formula "33") (term "0"))
                                                (rule "leq_literals" (formula "33"))
                                                (rule "closeFalse" (formula "33"))
                                             )
                                             (branch "CUT: self.value = z_17 FALSE"
                                                (builtin "One Step Simplification" (formula "42"))
                                                (rule "cut_direct" (formula "42") (term "0,0"))
                                                (branch "CUT: contains(z_17, self.right.right.values) TRUE"
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "false_right" (formula "43"))
                                                   (rule "allLeft" (formula "24") (inst "t=z_17"))
                                                   (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "24"))
                                                   (rule "inEqSimp_strengthen0" (formula "24") (ifseqformula "42"))
                                                   (rule "inEqSimp_contradEq3" (formula "42") (ifseqformula "24"))
                                                   (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                                   (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                                   (rule "add_literals" (formula "42") (term "0,0"))
                                                   (rule "qeq_literals" (formula "42") (term "0"))
                                                   (builtin "One Step Simplification" (formula "42"))
                                                   (rule "false_right" (formula "42"))
                                                   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "24"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                   (rule "mul_literals" (formula "3") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "36"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                   (rule "add_literals" (formula "3") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "3") (term "1,0"))
                                                   (rule "add_zero_right" (formula "3") (term "0"))
                                                   (rule "leq_literals" (formula "3"))
                                                   (rule "closeFalse" (formula "3"))
                                                )
                                                (branch "CUT: contains(z_17, self.right.right.values) FALSE"
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "notRight" (formula "43"))
                                                   (rule "allLeft" (formula "23") (inst "t=z_17"))
                                                   (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "23"))
                                                   (rule "inEqSimp_strengthen0" (formula "23") (ifseqformula "42"))
                                                   (rule "inEqSimp_contradEq3" (formula "42") (ifseqformula "23"))
                                                   (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                                   (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                                   (rule "add_literals" (formula "42") (term "0,0"))
                                                   (rule "qeq_literals" (formula "42") (term "0"))
                                                   (builtin "One Step Simplification" (formula "42"))
                                                   (rule "false_right" (formula "42"))
                                                   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "23"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                   (rule "mul_literals" (formula "3") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "36"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                   (rule "add_literals" (formula "3") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "3") (term "1,0"))
                                                   (rule "add_zero_right" (formula "3") (term "0"))
                                                   (rule "leq_literals" (formula "3"))
                                                   (rule "closeFalse" (formula "3"))
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: result_2 = result_0 FALSE"
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "replace_known_right" (formula "39") (term "1,0,1") (ifseqformula "33"))
                                          (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "32")))
                                          (rule "allRight" (formula "39") (inst "sk=z_16"))
                                          (rule "orRight" (formula "39"))
                                          (rule "eqSymm" (formula "39") (term "0,1"))
                                          (rule "inEqSimp_leqRight" (formula "40"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "applyEq" (formula "11") (term "0,1,0,0") (ifseqformula "33"))
                                          (rule "applyEq" (formula "30") (term "0") (ifseqformula "33"))
                                          (rule "inEqSimp_homoInEq0" (formula "30"))
                                          (rule "polySimp_pullOutFactor1" (formula "30") (term "0"))
                                          (rule "add_literals" (formula "30") (term "1,0"))
                                          (rule "times_zero_1" (formula "30") (term "0"))
                                          (rule "qeq_literals" (formula "30"))
                                          (rule "true_left" (formula "30"))
                                          (rule "applyEq" (formula "39") (term "0,0,1") (ifseqformula "32"))
                                          (rule "eqSymm" (formula "39") (term "0,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_contradEq7" (formula "39") (term "0,1") (ifseqformula "1"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,0,1"))
                                          (rule "add_literals" (formula "39") (term "1,1,0,0,0,1"))
                                          (rule "times_zero_1" (formula "39") (term "1,0,0,0,1"))
                                          (rule "add_literals" (formula "39") (term "0,0,0,1"))
                                          (rule "leq_literals" (formula "39") (term "0,0,1"))
                                          (builtin "One Step Simplification" (formula "39"))
                                          (rule "inEqSimp_strengthen1" (formula "30") (ifseqformula "33"))
                                          (rule "inEqSimp_contradEq7" (formula "33") (ifseqformula "30"))
                                          (rule "polySimp_mulComm0" (formula "33") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0"))
                                          (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "33") (term "1,0,0"))
                                          (rule "add_literals" (formula "33") (term "0,0"))
                                          (rule "leq_literals" (formula "33") (term "0"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "false_right" (formula "33"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "37") (term "0") (ifseqformula "2"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0") (ifseqformula "3"))
                                          (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "37"))
                                          (builtin "One Step Simplification" (formula "11"))
                                          (rule "cut_direct" (formula "40") (term "0,1,0"))
                                          (branch "CUT: z_16 = result_1 TRUE"
                                             (builtin "One Step Simplification" (formula "41"))
                                             (rule "false_right" (formula "41"))
                                             (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "3"))
                                             (rule "polySimp_addComm1" (formula "3") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                             (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                             (rule "polySimp_rightDist" (formula "3") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                             (rule "mul_literals" (formula "3") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                             (rule "inEqSimp_contradInEq0" (formula "34") (ifseqformula "3"))
                                             (rule "andLeft" (formula "34"))
                                             (rule "inEqSimp_homoInEq1" (formula "34"))
                                             (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                                             (rule "mul_literals" (formula "34") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "34") (term "0"))
                                             (rule "polySimp_addComm1" (formula "34") (term "0,0"))
                                             (rule "add_literals" (formula "34") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                             (rule "add_literals" (formula "34") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "34") (term "1,0"))
                                             (rule "add_zero_right" (formula "34") (term "0"))
                                             (rule "leq_literals" (formula "34"))
                                             (rule "closeFalse" (formula "34"))
                                          )
                                          (branch "CUT: z_16 = result_1 FALSE"
                                             (builtin "One Step Simplification" (formula "41"))
                                             (rule "cut_direct" (formula "41") (term "0,1"))
                                             (branch "CUT: z_16 = result_0 TRUE"
                                                (builtin "One Step Simplification" (formula "42"))
                                                (rule "false_right" (formula "42"))
                                                (rule "applyEq" (formula "41") (term "0") (ifseqformula "1"))
                                                (rule "eqSymm" (formula "41"))
                                                (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "3"))
                                                (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                                (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                (rule "mul_literals" (formula "3") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "33"))
                                                (rule "andLeft" (formula "3"))
                                                (rule "inEqSimp_homoInEq1" (formula "3"))
                                                (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                (rule "add_literals" (formula "3") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                (rule "add_literals" (formula "3") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "3") (term "1,0"))
                                                (rule "add_literals" (formula "3") (term "0"))
                                                (rule "leq_literals" (formula "3"))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: z_16 = result_0 FALSE"
                                                (builtin "One Step Simplification" (formula "42"))
                                                (rule "cut_direct" (formula "42") (term "0,1"))
                                                (branch "CUT: contains(z_16, self.right.left.values) TRUE"
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "false_right" (formula "43"))
                                                   (rule "allLeft" (formula "23") (inst "t=z_16"))
                                                   (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "23"))
                                                   (rule "inEqSimp_strengthen0" (formula "23") (ifseqformula "42"))
                                                   (rule "inEqSimp_contradEq3" (formula "42") (ifseqformula "23"))
                                                   (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                                   (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                                   (rule "add_literals" (formula "42") (term "0,0"))
                                                   (rule "qeq_literals" (formula "42") (term "0"))
                                                   (builtin "One Step Simplification" (formula "42"))
                                                   (rule "false_right" (formula "42"))
                                                   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "23"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "36"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                   (rule "add_literals" (formula "3") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "3") (term "1,0"))
                                                   (rule "add_zero_right" (formula "3") (term "0"))
                                                   (rule "leq_literals" (formula "3"))
                                                   (rule "closeFalse" (formula "3"))
                                                )
                                                (branch "CUT: contains(z_16, self.right.left.values) FALSE"
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "notRight" (formula "43"))
                                                   (rule "allLeft" (formula "24") (inst "t=z_16"))
                                                   (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "24"))
                                                   (rule "inEqSimp_strengthen0" (formula "24") (ifseqformula "42"))
                                                   (rule "inEqSimp_contradEq3" (formula "42") (ifseqformula "24"))
                                                   (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                                   (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                                   (rule "add_literals" (formula "42") (term "0,0"))
                                                   (rule "qeq_literals" (formula "42") (term "0"))
                                                   (builtin "One Step Simplification" (formula "42"))
                                                   (rule "false_right" (formula "42"))
                                                   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "24"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                   (rule "inEqSimp_contradInEq0" (formula "36") (ifseqformula "3"))
                                                   (rule "andLeft" (formula "36"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "36") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "36") (term "0,0"))
                                                   (rule "add_literals" (formula "36") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0"))
                                                   (rule "add_zero_right" (formula "36") (term "0"))
                                                   (rule "leq_literals" (formula "36"))
                                                   (rule "closeFalse" (formula "36"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch "CUT: self.right.value = result_1 FALSE"
                                       (builtin "One Step Simplification" (formula "22"))
                                       (rule "inEqSimp_strengthen0" (formula "21") (ifseqformula "34"))
                                       (rule "inEqSimp_contradEq3" (formula "34") (ifseqformula "21"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0"))
                                       (rule "add_literals" (formula "34") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "34") (term "1,0,0"))
                                       (rule "add_literals" (formula "34") (term "0,0"))
                                       (rule "qeq_literals" (formula "34") (term "0"))
                                       (builtin "One Step Simplification" (formula "34"))
                                       (rule "false_right" (formula "34"))
                                       (rule "cut_direct" (formula "33") (term "1"))
                                       (branch "CUT: result_2 = result_0 TRUE"
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "replace_known_left" (formula "39") (term "1,0,1") (ifseqformula "33"))
                                          (builtin "One Step Simplification" (formula "39"))
                                          (rule "allRight" (formula "39") (inst "sk=z_15"))
                                          (rule "orRight" (formula "39"))
                                          (rule "eqSymm" (formula "39") (term "0,1"))
                                          (rule "eqSymm" (formula "39") (term "0,1,0,0"))
                                          (rule "inEqSimp_leqRight" (formula "40"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "34"))
                                          (rule "inEqSimp_homoInEq1" (formula "32"))
                                          (rule "polySimp_pullOutFactor1" (formula "32") (term "0"))
                                          (rule "add_literals" (formula "32") (term "1,0"))
                                          (rule "times_zero_1" (formula "32") (term "0"))
                                          (rule "leq_literals" (formula "32"))
                                          (rule "true_left" (formula "32"))
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "33"))
                                          (rule "inEqSimp_homoInEq1" (formula "32"))
                                          (rule "polySimp_addComm1" (formula "32") (term "0"))
                                          (rule "applyEq" (formula "31") (term "1") (ifseqformula "33"))
                                          (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "33"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1"))
                                          (rule "polySimp_rightDist" (formula "32") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,1"))
                                          (rule "mul_literals" (formula "32") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "32") (term "1,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_contradEq7" (formula "39") (term "0,1,0") (ifseqformula "1"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,0,1,0"))
                                          (rule "add_literals" (formula "39") (term "1,1,0,0,0,1,0"))
                                          (rule "times_zero_1" (formula "39") (term "1,0,0,0,1,0"))
                                          (rule "add_literals" (formula "39") (term "0,0,0,1,0"))
                                          (rule "leq_literals" (formula "39") (term "0,0,1,0"))
                                          (builtin "One Step Simplification" (formula "39"))
                                          (rule "cut_direct" (formula "23") (term "0"))
                                          (branch "CUT: contains(result_1, self.right.right.values) TRUE"
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "true_left" (formula "24"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,0") (ifseqformula "2"))
                                             (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "37"))
                                             (builtin "One Step Simplification" (formula "10"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "0") (ifseqformula "2"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "cut_direct" (formula "41") (term "0,1"))
                                             (branch "CUT: self.value = z_15 TRUE"
                                                (builtin "One Step Simplification" (formula "42"))
                                                (rule "false_right" (formula "42"))
                                                (rule "applyEq" (formula "34") (term "0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "14") (term "0,1,0,0") (ifseqformula "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "3"))
                                                (rule "andLeft" (formula "34"))
                                                (rule "inEqSimp_homoInEq1" (formula "34"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                                (rule "add_literals" (formula "34") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "34") (term "1,0"))
                                                (rule "add_literals" (formula "34") (term "0"))
                                                (rule "leq_literals" (formula "34"))
                                                (rule "closeFalse" (formula "34"))
                                             )
                                             (branch "CUT: self.value = z_15 FALSE"
                                                (builtin "One Step Simplification" (formula "42"))
                                                (rule "cut_direct" (formula "42") (term "0,1"))
                                                (branch "CUT: self.right.value = z_15 TRUE"
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "false_right" (formula "43"))
                                                   (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "25") (term "0") (ifseqformula "1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "25"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                   (rule "mul_literals" (formula "3") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "3"))
                                                   (rule "andLeft" (formula "36"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "36") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "36") (term "0,0"))
                                                   (rule "add_literals" (formula "36") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0"))
                                                   (rule "add_zero_right" (formula "36") (term "0"))
                                                   (rule "leq_literals" (formula "36"))
                                                   (rule "closeFalse" (formula "36"))
                                                )
                                                (branch "CUT: self.right.value = z_15 FALSE"
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "cut_direct" (formula "43") (term "0,1"))
                                                   (branch "CUT: contains(z_15, self.right.left.values) TRUE"
                                                      (builtin "One Step Simplification" (formula "44"))
                                                      (rule "false_right" (formula "44"))
                                                      (rule "allLeft" (formula "23") (inst "t=z_15"))
                                                      (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "23"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "23"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                      (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                      (rule "mul_literals" (formula "3") (term "0,1"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "3"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37"))
                                                      (rule "polySimp_mulComm0" (formula "37") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "37") (term "1,0"))
                                                      (rule "mul_literals" (formula "37") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "37") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "37") (term "0,0"))
                                                      (rule "add_literals" (formula "37") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0"))
                                                      (rule "add_zero_right" (formula "37") (term "0"))
                                                      (rule "leq_literals" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch "CUT: contains(z_15, self.right.left.values) FALSE"
                                                      (builtin "One Step Simplification" (formula "44"))
                                                      (rule "notRight" (formula "44"))
                                                      (rule "allLeft" (formula "24") (inst "t=z_15"))
                                                      (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "24"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "24"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                      (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                      (rule "mul_literals" (formula "3") (term "0,1"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                      (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "37"))
                                                      (rule "andLeft" (formula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "3"))
                                                      (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                      (rule "add_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                      (rule "add_literals" (formula "3") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "3") (term "1,0"))
                                                      (rule "add_literals" (formula "3") (term "0"))
                                                      (rule "leq_literals" (formula "3"))
                                                      (rule "closeFalse" (formula "3"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: contains(result_1, self.right.right.values) FALSE"
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,0") (ifseqformula "2"))
                                             (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "38"))
                                             (builtin "One Step Simplification" (formula "10"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "2"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "cut_direct" (formula "42") (term "0,1"))
                                             (branch "CUT: self.value = z_15 TRUE"
                                                (builtin "One Step Simplification" (formula "43"))
                                                (rule "false_right" (formula "43"))
                                                (rule "applyEq" (formula "34") (term "0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "14") (term "0,1,0,0") (ifseqformula "1"))
                                                (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "34"))
                                                (rule "andLeft" (formula "3"))
                                                (rule "inEqSimp_homoInEq1" (formula "3"))
                                                (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                (rule "add_literals" (formula "3") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "3") (term "1,0"))
                                                (rule "add_zero_right" (formula "3") (term "0"))
                                                (rule "leq_literals" (formula "3"))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: self.value = z_15 FALSE"
                                                (builtin "One Step Simplification" (formula "43"))
                                                (rule "cut_direct" (formula "43") (term "0,1"))
                                                (branch "CUT: self.right.value = z_15 TRUE"
                                                   (builtin "One Step Simplification" (formula "44"))
                                                   (rule "false_right" (formula "44"))
                                                   (rule "applyEq" (formula "25") (term "0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "25"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                   (rule "mul_literals" (formula "3") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "3"))
                                                   (rule "andLeft" (formula "36"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36"))
                                                   (rule "polySimp_mulComm0" (formula "36") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "36") (term "1,0"))
                                                   (rule "mul_literals" (formula "36") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "36") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "36") (term "0,0"))
                                                   (rule "add_literals" (formula "36") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0"))
                                                   (rule "add_zero_right" (formula "36") (term "0"))
                                                   (rule "leq_literals" (formula "36"))
                                                   (rule "closeFalse" (formula "36"))
                                                )
                                                (branch "CUT: self.right.value = z_15 FALSE"
                                                   (builtin "One Step Simplification" (formula "44"))
                                                   (rule "cut_direct" (formula "44") (term "0,0"))
                                                   (branch "CUT: contains(z_15, self.right.right.values) TRUE"
                                                      (builtin "One Step Simplification" (formula "45"))
                                                      (rule "false_right" (formula "45"))
                                                      (rule "allLeft" (formula "24") (inst "t=z_15"))
                                                      (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "24"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "24"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                      (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                      (rule "mul_literals" (formula "3") (term "0,1"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "3"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37"))
                                                      (rule "polySimp_mulComm0" (formula "37") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "37") (term "1,0"))
                                                      (rule "mul_literals" (formula "37") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "37") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "37") (term "0,0"))
                                                      (rule "add_literals" (formula "37") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0"))
                                                      (rule "add_literals" (formula "37") (term "0"))
                                                      (rule "leq_literals" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch "CUT: contains(z_15, self.right.right.values) FALSE"
                                                      (builtin "One Step Simplification" (formula "45"))
                                                      (rule "notRight" (formula "45"))
                                                      (rule "allLeft" (formula "23") (inst "t=z_15"))
                                                      (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "23"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "23"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                      (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                      (rule "mul_literals" (formula "3") (term "0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                      (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "37"))
                                                      (rule "andLeft" (formula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "3"))
                                                      (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                      (rule "add_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                      (rule "add_literals" (formula "3") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "3") (term "1,0"))
                                                      (rule "add_zero_right" (formula "3") (term "0"))
                                                      (rule "leq_literals" (formula "3"))
                                                      (rule "closeFalse" (formula "3"))
                                                   )
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: result_2 = result_0 FALSE"
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "replace_known_right" (formula "40") (term "1,0,1") (ifseqformula "34"))
                                          (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "33")))
                                          (rule "allRight" (formula "40") (inst "sk=z_14"))
                                          (rule "orRight" (formula "40"))
                                          (rule "eqSymm" (formula "40") (term "0,1,0,0"))
                                          (rule "eqSymm" (formula "40") (term "0,1"))
                                          (rule "inEqSimp_leqRight" (formula "41"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "applyEq" (formula "41") (term "0,0,1") (ifseqformula "34"))
                                          (rule "eqSymm" (formula "41") (term "0,1"))
                                          (rule "applyEq" (formula "11") (term "0,1,0,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "31") (term "0") (ifseqformula "34"))
                                          (rule "inEqSimp_homoInEq0" (formula "31"))
                                          (rule "polySimp_pullOutFactor1" (formula "31") (term "0"))
                                          (rule "add_literals" (formula "31") (term "1,0"))
                                          (rule "times_zero_1" (formula "31") (term "0"))
                                          (rule "qeq_literals" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_contradEq7" (formula "40") (term "0,1") (ifseqformula "1"))
                                          (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0,0,1"))
                                          (rule "add_literals" (formula "40") (term "1,1,0,0,0,1"))
                                          (rule "times_zero_1" (formula "40") (term "1,0,0,0,1"))
                                          (rule "add_literals" (formula "40") (term "0,0,0,1"))
                                          (rule "leq_literals" (formula "40") (term "0,0,1"))
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "inEqSimp_strengthen1" (formula "31") (ifseqformula "34"))
                                          (rule "inEqSimp_contradEq7" (formula "34") (ifseqformula "31"))
                                          (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0"))
                                          (rule "add_literals" (formula "34") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "34") (term "1,0,0"))
                                          (rule "add_literals" (formula "34") (term "0,0"))
                                          (rule "leq_literals" (formula "34") (term "0"))
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "false_right" (formula "34"))
                                          (rule "cut_direct" (formula "23") (term "1"))
                                          (branch "CUT: contains(result_1, self.right.left.values) TRUE"
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "true_left" (formula "24"))
                                             (rule "cut_direct" (formula "39") (term "0,1"))
                                             (branch "CUT: z_14 = result_0 TRUE"
                                                (builtin "One Step Simplification" (formula "40"))
                                                (rule "false_right" (formula "40"))
                                                (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "2"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                (rule "mul_literals" (formula "2") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                (rule "inEqSimp_contradInEq0" (formula "32") (ifseqformula "2"))
                                                (rule "andLeft" (formula "32"))
                                                (rule "inEqSimp_homoInEq1" (formula "32"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                                                (rule "mul_literals" (formula "32") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "32") (term "0"))
                                                (rule "polySimp_addComm1" (formula "32") (term "0,0"))
                                                (rule "add_literals" (formula "32") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
                                                (rule "add_literals" (formula "32") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "32") (term "1,0"))
                                                (rule "add_zero_right" (formula "32") (term "0"))
                                                (rule "leq_literals" (formula "32"))
                                                (rule "closeFalse" (formula "32"))
                                             )
                                             (branch "CUT: z_14 = result_0 FALSE"
                                                (builtin "One Step Simplification" (formula "40"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0") (ifseqformula "3"))
                                                (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "38"))
                                                (builtin "One Step Simplification" (formula "11"))
                                                (rule "cut_direct" (formula "42") (term "0,1"))
                                                (branch "CUT: self.right.value = z_14 TRUE"
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "false_right" (formula "43"))
                                                   (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "25") (term "0") (ifseqformula "1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "25"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "36"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                   (rule "add_literals" (formula "3") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "3") (term "1,0"))
                                                   (rule "add_zero_right" (formula "3") (term "0"))
                                                   (rule "leq_literals" (formula "3"))
                                                   (rule "closeFalse" (formula "3"))
                                                )
                                                (branch "CUT: self.right.value = z_14 FALSE"
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "cut_direct" (formula "43") (term "0,0"))
                                                   (branch "CUT: contains(z_14, self.right.right.values) TRUE"
                                                      (builtin "One Step Simplification" (formula "44"))
                                                      (rule "false_right" (formula "44"))
                                                      (rule "allLeft" (formula "24") (inst "t=z_14"))
                                                      (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "24"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "24"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "37") (ifseqformula "3"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37"))
                                                      (rule "polySimp_mulComm0" (formula "37") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "37") (term "1,0"))
                                                      (rule "mul_literals" (formula "37") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "37") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "37") (term "0,0"))
                                                      (rule "add_literals" (formula "37") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0"))
                                                      (rule "add_zero_right" (formula "37") (term "0"))
                                                      (rule "leq_literals" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch "CUT: contains(z_14, self.right.right.values) FALSE"
                                                      (builtin "One Step Simplification" (formula "44"))
                                                      (rule "notRight" (formula "44"))
                                                      (rule "allLeft" (formula "23") (inst "t=z_14"))
                                                      (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "23"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "23"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "37"))
                                                      (rule "andLeft" (formula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "3"))
                                                      (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                      (rule "add_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                      (rule "add_literals" (formula "3") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "3") (term "1,0"))
                                                      (rule "add_literals" (formula "3") (term "0"))
                                                      (rule "leq_literals" (formula "3"))
                                                      (rule "closeFalse" (formula "3"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: contains(result_1, self.right.left.values) FALSE"
                                             (builtin "One Step Simplification" (formula "23"))
                                             (rule "cut_direct" (formula "40") (term "0,1"))
                                             (branch "CUT: z_14 = result_0 TRUE"
                                                (builtin "One Step Simplification" (formula "41"))
                                                (rule "false_right" (formula "41"))
                                                (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "2"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                (rule "mul_literals" (formula "2") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "32"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "2"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                (rule "add_literals" (formula "2") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                (rule "add_literals" (formula "2") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "2") (term "1,0"))
                                                (rule "add_literals" (formula "2") (term "0"))
                                                (rule "leq_literals" (formula "2"))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: z_14 = result_0 FALSE"
                                                (builtin "One Step Simplification" (formula "41"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "38"))
                                                (builtin "One Step Simplification" (formula "10"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "cut_direct" (formula "43") (term "0,1"))
                                                (branch "CUT: self.right.value = z_14 TRUE"
                                                   (builtin "One Step Simplification" (formula "44"))
                                                   (rule "false_right" (formula "44"))
                                                   (rule "applyEq" (formula "25") (term "0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "25"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "36"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                   (rule "add_literals" (formula "3") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "3") (term "1,0"))
                                                   (rule "add_zero_right" (formula "3") (term "0"))
                                                   (rule "leq_literals" (formula "3"))
                                                   (rule "closeFalse" (formula "3"))
                                                )
                                                (branch "CUT: self.right.value = z_14 FALSE"
                                                   (builtin "One Step Simplification" (formula "44"))
                                                   (rule "cut_direct" (formula "44") (term "0,1"))
                                                   (branch "CUT: contains(z_14, self.right.left.values) TRUE"
                                                      (builtin "One Step Simplification" (formula "45"))
                                                      (rule "false_right" (formula "45"))
                                                      (rule "allLeft" (formula "23") (inst "t=z_14"))
                                                      (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "23"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "23"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "37"))
                                                      (rule "andLeft" (formula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "3"))
                                                      (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                      (rule "add_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                      (rule "add_literals" (formula "3") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "3") (term "1,0"))
                                                      (rule "add_literals" (formula "3") (term "0"))
                                                      (rule "leq_literals" (formula "3"))
                                                      (rule "closeFalse" (formula "3"))
                                                   )
                                                   (branch "CUT: contains(z_14, self.right.left.values) FALSE"
                                                      (builtin "One Step Simplification" (formula "45"))
                                                      (rule "notRight" (formula "45"))
                                                      (rule "allLeft" (formula "24") (inst "t=z_14"))
                                                      (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "24"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "24"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "37") (ifseqformula "3"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37"))
                                                      (rule "polySimp_mulComm0" (formula "37") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "37") (term "1,0"))
                                                      (rule "mul_literals" (formula "37") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "37") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "37") (term "0,0"))
                                                      (rule "add_literals" (formula "37") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0"))
                                                      (rule "add_zero_right" (formula "37") (term "0"))
                                                      (rule "leq_literals" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "self.left.left = null FALSE"
                              (rule "replace_known_right" (formula "20") (term "0,0,0") (ifseqformula "35"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "35"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "replace_known_right" (formula "14") (term "0,1,0") (ifseqformula "36"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "36"))
                              (builtin "One Step Simplification" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "replace_known_right" (formula "41") (term "0,1,0,1,0,1") (ifseqformula "37"))
                              (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "37")))
                              (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "37"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "notLeft" (formula "15"))
                              (rule "elementOfUnion2" (formula "12") (term "0,0,0"))
                              (rule "elementOfUnion2" (formula "14") (term "0"))
                              (rule "elementOfUnion2" (formula "41") (term "0,0,1,0,0,0,0"))
                              (rule "elementOfUnion2" (formula "41") (term "0,1,0,1"))
                              (rule "nnf_notOr" (formula "12") (term "0,0"))
                              (rule "nnf_notOr" (formula "41") (term "0,1,0,0,0,0"))
                              (rule "commute_or" (formula "12") (term "0"))
                              (rule "commute_and" (formula "12") (term "1,0"))
                              (rule "cnf_rightDist" (formula "12") (term "0"))
                              (rule "distr_forallAnd" (formula "12"))
                              (rule "andLeft" (formula "12"))
                              (rule "commute_or" (formula "12") (term "0"))
                              (rule "ifthenelse_split" (formula "31") (term "0,0"))
                              (branch "self.right.left = null TRUE"
                                 (builtin "One Step Simplification" (formula "32"))
                                 (rule "eqSymm" (formula "32"))
                                 (rule "replace_known_left" (formula "24") (term "0,1,0,0,0") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "true_left" (formula "24"))
                                 (rule "replace_known_left" (formula "25") (term "0,1,0") (ifseqformula "30"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "30"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "replace_known_left" (formula "42") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "30"))
                                 (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "30")))
                                 (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "30"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "true_left" (formula "27"))
                                 (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "29"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "true_left" (formula "28"))
                                 (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "29"))
                                 (rule "commuteUnion2" (formula "10") (term "0,0"))
                                 (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                 (rule "inEqSimp_homoInEq0" (formula "24"))
                                 (rule "polySimp_pullOutFactor1" (formula "24") (term "0"))
                                 (rule "add_literals" (formula "24") (term "1,0"))
                                 (rule "times_zero_1" (formula "24") (term "0"))
                                 (rule "qeq_literals" (formula "24"))
                                 (rule "true_left" (formula "24"))
                                 (rule "applyEq" (formula "39") (term "0,0,0,1") (ifseqformula "24"))
                                 (rule "eqSymm" (formula "39") (term "0,0,1"))
                                 (rule "applyEq" (formula "28") (term "0,1") (ifseqformula "24"))
                                 (rule "applyEq" (formula "39") (term "1,0,0,0,0,0,0") (ifseqformula "24"))
                                 (rule "applyEq" (formula "10") (term "0,1,0,0") (ifseqformula "24"))
                                 (rule "commuteUnion_22" (formula "10") (term "0"))
                                 (rule "cut_direct" (formula "33") (term "1,1"))
                                 (branch "CUT: result_2 = result_1 TRUE"
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "true_left" (formula "34"))
                                    (rule "replace_known_left" (formula "39") (term "0,0,1") (ifseqformula "33"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "allRight" (formula "39") (inst "sk=z_13"))
                                    (rule "orRight" (formula "39"))
                                    (rule "eqSymm" (formula "39") (term "0,1"))
                                    (rule "eqSymm" (formula "39") (term "0,1,1,0"))
                                    (rule "inEqSimp_leqRight" (formula "40"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
                                    (rule "inEqSimp_homoInEq1" (formula "33"))
                                    (rule "polySimp_pullOutFactor1" (formula "33") (term "0"))
                                    (rule "add_literals" (formula "33") (term "1,0"))
                                    (rule "times_zero_1" (formula "33") (term "0"))
                                    (rule "leq_literals" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "applyEq" (formula "32") (term "0") (ifseqformula "33"))
                                    (rule "applyEq" (formula "31") (term "1") (ifseqformula "33"))
                                    (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "33"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_contradEq7" (formula "39") (term "0,0,0") (ifseqformula "1"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "39") (term "1,1,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "39") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "39") (term "0,0,0,0,0"))
                                    (rule "leq_literals" (formula "39") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "cut_direct" (formula "16") (term "1"))
                                    (branch "CUT: self.left.value = result_0 TRUE"
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                       (rule "inEqSimp_homoInEq0" (formula "15"))
                                       (rule "polySimp_pullOutFactor1" (formula "15") (term "0"))
                                       (rule "add_literals" (formula "15") (term "1,0"))
                                       (rule "times_zero_1" (formula "15") (term "0"))
                                       (rule "qeq_literals" (formula "15"))
                                       (rule "true_left" (formula "15"))
                                       (rule "applyEq" (formula "38") (term "0,0,1,0") (ifseqformula "15"))
                                       (rule "eqSymm" (formula "38") (term "0,1,0"))
                                       (rule "applyEq" (formula "22") (term "0,1,0") (ifseqformula "15"))
                                       (rule "cut_direct" (formula "38") (term "0,1,0"))
                                       (branch "CUT: z_13 = result_0 TRUE"
                                          (builtin "One Step Simplification" (formula "39"))
                                          (rule "false_right" (formula "39"))
                                          (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                          (rule "mul_literals" (formula "2") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "32"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                          (rule "mul_literals" (formula "2") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                          (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                          (rule "add_literals" (formula "2") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "2") (term "1,0"))
                                          (rule "add_literals" (formula "2") (term "0"))
                                          (rule "leq_literals" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                       (branch "CUT: z_13 = result_0 FALSE"
                                          (builtin "One Step Simplification" (formula "39"))
                                          (rule "cut_direct" (formula "39") (term "0,1"))
                                          (branch "CUT: self.value = z_13 TRUE"
                                             (builtin "One Step Simplification" (formula "40"))
                                             (rule "false_right" (formula "40"))
                                             (rule "applyEq" (formula "31") (term "0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "12") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "31"))
                                             (rule "andLeft" (formula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "2"))
                                             (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                             (rule "add_literals" (formula "2") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "2") (term "1,0"))
                                             (rule "add_zero_right" (formula "2") (term "0"))
                                             (rule "leq_literals" (formula "2"))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                          (branch "CUT: self.value = z_13 FALSE"
                                             (builtin "One Step Simplification" (formula "40"))
                                             (rule "cut_direct" (formula "40") (term "0,1"))
                                             (branch "CUT: contains(z_13, self.left.left.values) TRUE"
                                                (builtin "One Step Simplification" (formula "41"))
                                                (rule "false_right" (formula "41"))
                                                (rule "allLeft" (formula "14") (inst "t=z_13"))
                                                (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "inEqSimp_strengthen0" (formula "14") (ifseqformula "40"))
                                                (rule "inEqSimp_contradEq3" (formula "40") (ifseqformula "14"))
                                                (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0"))
                                                (rule "add_literals" (formula "40") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "40") (term "1,0,0"))
                                                (rule "add_literals" (formula "40") (term "0,0"))
                                                (rule "qeq_literals" (formula "40") (term "0"))
                                                (builtin "One Step Simplification" (formula "40"))
                                                (rule "false_right" (formula "40"))
                                                (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "14"))
                                                (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                (rule "add_literals" (formula "2") (term "0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "34"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "2"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                (rule "add_literals" (formula "2") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "2") (term "1,0"))
                                                (rule "add_zero_right" (formula "2") (term "0"))
                                                (rule "leq_literals" (formula "2"))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: contains(z_13, self.left.left.values) FALSE"
                                                (builtin "One Step Simplification" (formula "41"))
                                                (rule "notRight" (formula "41"))
                                                (rule "allLeft" (formula "15") (inst "t=z_13"))
                                                (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "1"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "inEqSimp_strengthen0" (formula "15") (ifseqformula "40"))
                                                (rule "inEqSimp_contradEq3" (formula "40") (ifseqformula "15"))
                                                (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0"))
                                                (rule "add_literals" (formula "40") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "40") (term "1,0,0"))
                                                (rule "add_literals" (formula "40") (term "0,0"))
                                                (rule "qeq_literals" (formula "40") (term "0"))
                                                (builtin "One Step Simplification" (formula "40"))
                                                (rule "false_right" (formula "40"))
                                                (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "15"))
                                                (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                (rule "add_literals" (formula "2") (term "0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                (rule "inEqSimp_contradInEq0" (formula "34") (ifseqformula "2"))
                                                (rule "andLeft" (formula "34"))
                                                (rule "inEqSimp_homoInEq1" (formula "34"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "34") (term "0"))
                                                (rule "polySimp_addComm0" (formula "34") (term "0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                                (rule "add_literals" (formula "34") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "34") (term "1,0"))
                                                (rule "add_zero_right" (formula "34") (term "0"))
                                                (rule "leq_literals" (formula "34"))
                                                (rule "closeFalse" (formula "34"))
                                             )
                                          )
                                       )
                                    )
                                    (branch "CUT: self.left.value = result_0 FALSE"
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "inEqSimp_strengthen0" (formula "15") (ifseqformula "34"))
                                       (rule "inEqSimp_contradEq3" (formula "34") (ifseqformula "15"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0"))
                                       (rule "add_literals" (formula "34") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "34") (term "1,0,0"))
                                       (rule "add_literals" (formula "34") (term "0,0"))
                                       (rule "qeq_literals" (formula "34") (term "0"))
                                       (builtin "One Step Simplification" (formula "34"))
                                       (rule "false_right" (formula "34"))
                                       (rule "cut_direct" (formula "39") (term "0,1"))
                                       (branch "CUT: self.value = z_13 TRUE"
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "false_right" (formula "40"))
                                          (rule "applyEq" (formula "12") (term "0,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "2"))
                                          (rule "andLeft" (formula "32"))
                                          (rule "inEqSimp_homoInEq1" (formula "32"))
                                          (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
                                          (rule "add_literals" (formula "32") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "32") (term "1,0"))
                                          (rule "add_zero_right" (formula "32") (term "0"))
                                          (rule "leq_literals" (formula "32"))
                                          (rule "closeFalse" (formula "32"))
                                       )
                                       (branch "CUT: self.value = z_13 FALSE"
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "cut_direct" (formula "16") (term "0"))
                                          (branch "CUT: contains(result_0, self.left.right.values) TRUE"
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "cut_direct" (formula "40") (term "0,1"))
                                             (branch "CUT: self.left.value = z_13 TRUE"
                                                (builtin "One Step Simplification" (formula "41"))
                                                (rule "false_right" (formula "41"))
                                                (rule "applyEq" (formula "16") (term "0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "24") (term "0,1,0") (ifseqformula "1"))
                                                (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "16"))
                                                (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                (rule "add_literals" (formula "2") (term "0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "34"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "2"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                (rule "add_literals" (formula "2") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "2") (term "1,0"))
                                                (rule "add_zero_right" (formula "2") (term "0"))
                                                (rule "leq_literals" (formula "2"))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: self.left.value = z_13 FALSE"
                                                (builtin "One Step Simplification" (formula "41"))
                                                (rule "cut_direct" (formula "41") (term "0,0"))
                                                (branch "CUT: contains(z_13, self.left.right.values) TRUE"
                                                   (builtin "One Step Simplification" (formula "42"))
                                                   (rule "false_right" (formula "42"))
                                                   (rule "allLeft" (formula "15") (inst "t=z_13"))
                                                   (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "15"))
                                                   (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "15"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                   (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "35"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "2"))
                                                   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                   (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                   (rule "add_literals" (formula "2") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "2") (term "1,0"))
                                                   (rule "add_zero_right" (formula "2") (term "0"))
                                                   (rule "leq_literals" (formula "2"))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                                (branch "CUT: contains(z_13, self.left.right.values) FALSE"
                                                   (builtin "One Step Simplification" (formula "42"))
                                                   (rule "notRight" (formula "42"))
                                                   (rule "allLeft" (formula "14") (inst "t=z_13"))
                                                   (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "14"))
                                                   (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "14"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                   (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                   (rule "inEqSimp_contradInEq0" (formula "35") (ifseqformula "2"))
                                                   (rule "andLeft" (formula "35"))
                                                   (rule "inEqSimp_homoInEq1" (formula "35"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "35") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                   (rule "add_literals" (formula "35") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0"))
                                                   (rule "add_zero_right" (formula "35") (term "0"))
                                                   (rule "leq_literals" (formula "35"))
                                                   (rule "closeFalse" (formula "35"))
                                                )
                                             )
                                          )
                                          (branch "CUT: contains(result_0, self.left.right.values) FALSE"
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "cut_direct" (formula "41") (term "0,1"))
                                             (branch "CUT: self.left.value = z_13 TRUE"
                                                (builtin "One Step Simplification" (formula "42"))
                                                (rule "false_right" (formula "42"))
                                                (rule "applyEq" (formula "24") (term "0,1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "16") (term "0") (ifseqformula "1"))
                                                (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "16"))
                                                (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                (rule "add_literals" (formula "2") (term "0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "34"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "2"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                (rule "add_literals" (formula "2") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "2") (term "1,0"))
                                                (rule "add_zero_right" (formula "2") (term "0"))
                                                (rule "leq_literals" (formula "2"))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: self.left.value = z_13 FALSE"
                                                (builtin "One Step Simplification" (formula "42"))
                                                (rule "cut_direct" (formula "42") (term "0,1"))
                                                (branch "CUT: contains(z_13, self.left.left.values) TRUE"
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "false_right" (formula "43"))
                                                   (rule "allLeft" (formula "14") (inst "t=z_13"))
                                                   (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "14"))
                                                   (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "14"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                   (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                   (rule "inEqSimp_contradInEq0" (formula "35") (ifseqformula "2"))
                                                   (rule "andLeft" (formula "35"))
                                                   (rule "inEqSimp_homoInEq1" (formula "35"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "35") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                   (rule "add_literals" (formula "35") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0"))
                                                   (rule "add_zero_right" (formula "35") (term "0"))
                                                   (rule "leq_literals" (formula "35"))
                                                   (rule "closeFalse" (formula "35"))
                                                )
                                                (branch "CUT: contains(z_13, self.left.left.values) FALSE"
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "notRight" (formula "43"))
                                                   (rule "allLeft" (formula "15") (inst "t=z_13"))
                                                   (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "15"))
                                                   (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "15"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                   (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "35"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "2"))
                                                   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                   (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                   (rule "add_literals" (formula "2") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "2") (term "1,0"))
                                                   (rule "add_zero_right" (formula "2") (term "0"))
                                                   (rule "leq_literals" (formula "2"))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: result_2 = result_1 FALSE"
                                    (builtin "One Step Simplification" (formula "33"))
                                    (rule "replace_known_right" (formula "40") (term "0,0,1") (ifseqformula "34"))
                                    (builtin "One Step Simplification" (formula "40"))
                                    (rule "inEqSimp_strengthen1" (formula "32") (ifseqformula "34"))
                                    (rule "inEqSimp_contradEq7" (formula "34") (ifseqformula "32"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0"))
                                    (rule "add_literals" (formula "34") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "34") (term "1,0,0"))
                                    (rule "add_literals" (formula "34") (term "0,0"))
                                    (rule "leq_literals" (formula "34") (term "0"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "false_right" (formula "34"))
                                    (rule "cut_direct" (formula "15") (term "1"))
                                    (branch "CUT: self.left.value = result_0 TRUE"
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "applyEq" (formula "22") (term "0,1,0") (ifseqformula "15"))
                                       (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
                                       (rule "inEqSimp_homoInEq0" (formula "14"))
                                       (rule "polySimp_pullOutFactor1" (formula "14") (term "0"))
                                       (rule "add_literals" (formula "14") (term "1,0"))
                                       (rule "times_zero_1" (formula "14") (term "0"))
                                       (rule "qeq_literals" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "applyEq" (formula "38") (term "0,1,0,1") (ifseqformula "14"))
                                       (rule "eqSymm" (formula "38") (term "1,0,1"))
                                       (rule "applyEq" (formula "38") (term "1,0,1,1,0,0,0,0") (ifseqformula "14"))
                                       (rule "cut_direct" (formula "32") (term "1"))
                                       (branch "CUT: result_2 = result_0 TRUE"
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "true_left" (formula "33"))
                                          (rule "replace_known_left" (formula "38") (term "1,0,1") (ifseqformula "32"))
                                          (builtin "One Step Simplification" (formula "38"))
                                          (rule "allRight" (formula "38") (inst "sk=z_12"))
                                          (rule "orRight" (formula "38"))
                                          (rule "eqSymm" (formula "38") (term "0,1"))
                                          (rule "inEqSimp_leqRight" (formula "39"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                                          (rule "inEqSimp_homoInEq1" (formula "31"))
                                          (rule "polySimp_pullOutFactor1" (formula "31") (term "0"))
                                          (rule "add_literals" (formula "31") (term "1,0"))
                                          (rule "times_zero_1" (formula "31") (term "0"))
                                          (rule "leq_literals" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                                          (rule "inEqSimp_homoInEq1" (formula "31"))
                                          (rule "polySimp_addComm1" (formula "31") (term "0"))
                                          (rule "applyEq" (formula "30") (term "1") (ifseqformula "32"))
                                          (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "32"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "31"))
                                          (rule "polySimp_mulComm0" (formula "31") (term "1"))
                                          (rule "polySimp_rightDist" (formula "31") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                                          (rule "mul_literals" (formula "31") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "31") (term "1,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_contradEq7" (formula "38") (term "0,1,1,0") (ifseqformula "1"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,1,1,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "38") (term "1,1,0,0,0,1,1,0"))
                                          (rule "times_zero_1" (formula "38") (term "1,0,0,0,1,1,0"))
                                          (rule "add_literals" (formula "38") (term "0,0,0,1,1,0"))
                                          (rule "leq_literals" (formula "38") (term "0,0,1,1,0"))
                                          (builtin "One Step Simplification" (formula "38"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,0") (ifseqformula "2"))
                                          (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "36"))
                                          (builtin "One Step Simplification" (formula "10"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "2"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "allLeft" (formula "16") (inst "t=z_12"))
                                          (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                                          (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "16") (term "0,0,1"))
                                          (rule "leq_literals" (formula "16") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "16"))
                                          (rule "notLeft" (formula "16"))
                                          (rule "replace_known_right" (formula "41") (term "0,0,1,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "41"))
                                          (rule "allLeft" (formula "15") (inst "t=z_12"))
                                          (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                          (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "15") (term "0,0,1"))
                                          (rule "leq_literals" (formula "15") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "15"))
                                          (rule "notLeft" (formula "15"))
                                          (rule "replace_known_right" (formula "42") (term "0,1,0") (ifseqformula "35"))
                                          (builtin "One Step Simplification" (formula "42"))
                                          (rule "cut_direct" (formula "42") (term "0,0"))
                                          (branch "CUT: z_12 = result_1 TRUE"
                                             (builtin "One Step Simplification" (formula "43"))
                                             (rule "false_right" (formula "43"))
                                             (rule "applyEq" (formula "36") (term "0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "37") (term "0") (ifseqformula "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "3"))
                                             (rule "andLeft" (formula "34"))
                                             (rule "inEqSimp_homoInEq1" (formula "34"))
                                             (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                                             (rule "mul_literals" (formula "34") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "34") (term "0"))
                                             (rule "polySimp_addComm1" (formula "34") (term "0,0"))
                                             (rule "add_literals" (formula "34") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                             (rule "add_literals" (formula "34") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "34") (term "1,0"))
                                             (rule "add_zero_right" (formula "34") (term "0"))
                                             (rule "leq_literals" (formula "34"))
                                             (rule "closeFalse" (formula "34"))
                                          )
                                          (branch "CUT: z_12 = result_1 FALSE"
                                             (builtin "One Step Simplification" (formula "43"))
                                             (rule "notRight" (formula "43"))
                                             (rule "applyEq" (formula "33") (term "0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "14") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "3"))
                                             (rule "andLeft" (formula "33"))
                                             (rule "inEqSimp_homoInEq1" (formula "33"))
                                             (rule "polySimp_pullOutFactor1b" (formula "33") (term "0"))
                                             (rule "add_literals" (formula "33") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "33") (term "1,0"))
                                             (rule "add_zero_right" (formula "33") (term "0"))
                                             (rule "leq_literals" (formula "33"))
                                             (rule "closeFalse" (formula "33"))
                                          )
                                       )
                                       (branch "CUT: result_2 = result_0 FALSE"
                                          (builtin "One Step Simplification" (formula "32"))
                                          (rule "replace_known_left" (formula "39") (term "1,1") (ifseqformula "32"))
                                          (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "33")))
                                          (rule "allRight" (formula "39") (inst "sk=z_11"))
                                          (rule "orRight" (formula "39"))
                                          (rule "eqSymm" (formula "39") (term "0,1"))
                                          (rule "inEqSimp_leqRight" (formula "40"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "applyEq" (formula "40") (term "0,0,1") (ifseqformula "33"))
                                          (rule "eqSymm" (formula "40") (term "0,1"))
                                          (rule "applyEq" (formula "30") (term "0") (ifseqformula "33"))
                                          (rule "inEqSimp_homoInEq0" (formula "30"))
                                          (rule "polySimp_pullOutFactor1" (formula "30") (term "0"))
                                          (rule "add_literals" (formula "30") (term "1,0"))
                                          (rule "times_zero_1" (formula "30") (term "0"))
                                          (rule "qeq_literals" (formula "30"))
                                          (rule "true_left" (formula "30"))
                                          (rule "applyEq" (formula "11") (term "0,1,0,0") (ifseqformula "32"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_contradEq7" (formula "39") (term "0,1") (ifseqformula "1"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,0,1"))
                                          (rule "add_literals" (formula "39") (term "1,1,0,0,0,1"))
                                          (rule "times_zero_1" (formula "39") (term "1,0,0,0,1"))
                                          (rule "add_literals" (formula "39") (term "0,0,0,1"))
                                          (rule "leq_literals" (formula "39") (term "0,0,1"))
                                          (builtin "One Step Simplification" (formula "39"))
                                          (rule "inEqSimp_strengthen1" (formula "30") (ifseqformula "33"))
                                          (rule "inEqSimp_contradEq7" (formula "33") (ifseqformula "30"))
                                          (rule "polySimp_mulComm0" (formula "33") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0"))
                                          (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "33") (term "1,0,0"))
                                          (rule "add_literals" (formula "33") (term "0,0"))
                                          (rule "leq_literals" (formula "33") (term "0"))
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "false_right" (formula "33"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "37") (term "0") (ifseqformula "2"))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0") (ifseqformula "3"))
                                          (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "37"))
                                          (builtin "One Step Simplification" (formula "11"))
                                          (rule "cut_direct" (formula "40") (term "0,1,1"))
                                          (branch "CUT: z_11 = result_0 TRUE"
                                             (builtin "One Step Simplification" (formula "41"))
                                             (rule "false_right" (formula "41"))
                                             (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "3"))
                                             (rule "polySimp_addComm1" (formula "3") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                             (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                             (rule "polySimp_rightDist" (formula "3") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                             (rule "mul_literals" (formula "3") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                             (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "33"))
                                             (rule "andLeft" (formula "3"))
                                             (rule "inEqSimp_homoInEq1" (formula "3"))
                                             (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                             (rule "mul_literals" (formula "3") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                             (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                             (rule "add_literals" (formula "3") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                             (rule "add_literals" (formula "3") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "3") (term "1,0"))
                                             (rule "add_zero_right" (formula "3") (term "0"))
                                             (rule "leq_literals" (formula "3"))
                                             (rule "closeFalse" (formula "3"))
                                          )
                                          (branch "CUT: z_11 = result_0 FALSE"
                                             (builtin "One Step Simplification" (formula "41"))
                                             (rule "cut_direct" (formula "41") (term "0,0"))
                                             (branch "CUT: z_11 = result_1 TRUE"
                                                (builtin "One Step Simplification" (formula "42"))
                                                (rule "false_right" (formula "42"))
                                                (rule "applyEq" (formula "41") (term "0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "3"))
                                                (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                                (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                (rule "mul_literals" (formula "3") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "34"))
                                                (rule "andLeft" (formula "3"))
                                                (rule "inEqSimp_homoInEq1" (formula "3"))
                                                (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                (rule "add_literals" (formula "3") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                (rule "add_literals" (formula "3") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "3") (term "1,0"))
                                                (rule "add_literals" (formula "3") (term "0"))
                                                (rule "leq_literals" (formula "3"))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: z_11 = result_1 FALSE"
                                                (builtin "One Step Simplification" (formula "42"))
                                                (rule "cut_direct" (formula "42") (term "0,1"))
                                                (branch "CUT: contains(z_11, self.left.left.values) TRUE"
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "false_right" (formula "43"))
                                                   (rule "allLeft" (formula "16") (inst "t=z_11"))
                                                   (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "16"))
                                                   (rule "inEqSimp_strengthen0" (formula "16") (ifseqformula "42"))
                                                   (rule "inEqSimp_contradEq3" (formula "42") (ifseqformula "16"))
                                                   (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                                   (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                                   (rule "add_literals" (formula "42") (term "0,0"))
                                                   (rule "qeq_literals" (formula "42") (term "0"))
                                                   (builtin "One Step Simplification" (formula "42"))
                                                   (rule "false_right" (formula "42"))
                                                   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "16"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                   (rule "inEqSimp_contradInEq0" (formula "35") (ifseqformula "3"))
                                                   (rule "andLeft" (formula "35"))
                                                   (rule "inEqSimp_homoInEq1" (formula "35"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "35") (term "0,0"))
                                                   (rule "add_literals" (formula "35") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                   (rule "add_literals" (formula "35") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0"))
                                                   (rule "add_zero_right" (formula "35") (term "0"))
                                                   (rule "leq_literals" (formula "35"))
                                                   (rule "closeFalse" (formula "35"))
                                                )
                                                (branch "CUT: contains(z_11, self.left.left.values) FALSE"
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "notRight" (formula "43"))
                                                   (rule "allLeft" (formula "17") (inst "t=z_11"))
                                                   (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "17"))
                                                   (rule "inEqSimp_strengthen0" (formula "17") (ifseqformula "42"))
                                                   (rule "inEqSimp_contradEq3" (formula "42") (ifseqformula "17"))
                                                   (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                                   (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                                   (rule "add_literals" (formula "42") (term "0,0"))
                                                   (rule "qeq_literals" (formula "42") (term "0"))
                                                   (builtin "One Step Simplification" (formula "42"))
                                                   (rule "false_right" (formula "42"))
                                                   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "17"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "35"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                   (rule "add_literals" (formula "3") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "3") (term "1,0"))
                                                   (rule "add_zero_right" (formula "3") (term "0"))
                                                   (rule "leq_literals" (formula "3"))
                                                   (rule "closeFalse" (formula "3"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch "CUT: self.left.value = result_0 FALSE"
                                       (builtin "One Step Simplification" (formula "15"))
                                       (rule "inEqSimp_strengthen0" (formula "14") (ifseqformula "34"))
                                       (rule "inEqSimp_contradEq3" (formula "34") (ifseqformula "14"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0"))
                                       (rule "add_literals" (formula "34") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "34") (term "1,0,0"))
                                       (rule "add_literals" (formula "34") (term "0,0"))
                                       (rule "qeq_literals" (formula "34") (term "0"))
                                       (builtin "One Step Simplification" (formula "34"))
                                       (rule "false_right" (formula "34"))
                                       (rule "cut_direct" (formula "33") (term "1"))
                                       (branch "CUT: result_2 = result_0 TRUE"
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                                          (rule "inEqSimp_homoInEq1" (formula "31"))
                                          (rule "polySimp_pullOutFactor1" (formula "31") (term "0"))
                                          (rule "add_literals" (formula "31") (term "1,0"))
                                          (rule "times_zero_1" (formula "31") (term "0"))
                                          (rule "leq_literals" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "applyEq" (formula "38") (term "0,1,0,0,1") (ifseqformula "32"))
                                          (rule "applyEq" (formula "38") (term "0,0,0,0,1") (ifseqformula "32"))
                                          (rule "replace_known_left" (formula "38") (term "0,0,1") (ifseqformula "15"))
                                          (builtin "One Step Simplification" (formula "38"))
                                          (rule "allRight" (formula "38") (inst "sk=z_10"))
                                          (rule "orRight" (formula "38"))
                                          (rule "eqSymm" (formula "38") (term "0,1"))
                                          (rule "eqSymm" (formula "38") (term "0,1,1,0"))
                                          (rule "inEqSimp_leqRight" (formula "39"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "33"))
                                          (rule "inEqSimp_homoInEq1" (formula "32"))
                                          (rule "polySimp_addComm1" (formula "32") (term "0"))
                                          (rule "applyEq" (formula "31") (term "1") (ifseqformula "33"))
                                          (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "33"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "32"))
                                          (rule "polySimp_mulComm0" (formula "32") (term "1"))
                                          (rule "polySimp_rightDist" (formula "32") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "32") (term "1,1"))
                                          (rule "mul_literals" (formula "32") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "32") (term "1,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "cut_direct" (formula "16") (term "0"))
                                          (branch "CUT: contains(result_0, self.left.right.values) TRUE"
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "cut_direct" (formula "39") (term "0,0,0"))
                                             (branch "CUT: z_10 = result_1 TRUE"
                                                (builtin "One Step Simplification" (formula "40"))
                                                (rule "false_right" (formula "40"))
                                                (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "2"))
                                                (rule "andLeft" (formula "33"))
                                                (rule "inEqSimp_homoInEq1" (formula "33"))
                                                (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                                                (rule "mul_literals" (formula "33") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "33") (term "0"))
                                                (rule "polySimp_addComm1" (formula "33") (term "0,0"))
                                                (rule "add_literals" (formula "33") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "33") (term "0"))
                                                (rule "add_literals" (formula "33") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "33") (term "1,0"))
                                                (rule "add_zero_right" (formula "33") (term "0"))
                                                (rule "leq_literals" (formula "33"))
                                                (rule "closeFalse" (formula "33"))
                                             )
                                             (branch "CUT: z_10 = result_1 FALSE"
                                                (builtin "One Step Simplification" (formula "40"))
                                                (rule "allLeft" (formula "14") (inst "t=z_10"))
                                                (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                                                (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "14") (term "0,0,1"))
                                                (rule "leq_literals" (formula "14") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "notLeft" (formula "14"))
                                                (rule "replace_known_right" (formula "41") (term "0,0,0,0") (ifseqformula "34"))
                                                (builtin "One Step Simplification" (formula "41"))
                                                (rule "allLeft" (formula "13") (inst "t=z_10"))
                                                (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                                                (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "13") (term "0,0,1"))
                                                (rule "leq_literals" (formula "13") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "13"))
                                                (rule "notLeft" (formula "13"))
                                                (rule "replace_known_right" (formula "42") (term "0,0,0") (ifseqformula "34"))
                                                (builtin "One Step Simplification" (formula "42"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0") (ifseqformula "3"))
                                                (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "40"))
                                                (builtin "One Step Simplification" (formula "11"))
                                                (rule "cut_direct" (formula "44") (term "0,1"))
                                                (branch "CUT: self.value = z_10 TRUE"
                                                   (builtin "One Step Simplification" (formula "45"))
                                                   (rule "false_right" (formula "45"))
                                                   (rule "applyEq" (formula "14") (term "0,1,0,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "34") (term "0") (ifseqformula "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "3"))
                                                   (rule "andLeft" (formula "34"))
                                                   (rule "inEqSimp_homoInEq1" (formula "34"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                                   (rule "add_literals" (formula "34") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "34") (term "1,0"))
                                                   (rule "add_literals" (formula "34") (term "0"))
                                                   (rule "leq_literals" (formula "34"))
                                                   (rule "closeFalse" (formula "34"))
                                                )
                                                (branch "CUT: self.value = z_10 FALSE"
                                                   (builtin "One Step Simplification" (formula "45"))
                                                   (rule "notRight" (formula "45"))
                                                   (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "3"))
                                                   (rule "andLeft" (formula "18"))
                                                   (rule "inEqSimp_homoInEq1" (formula "18"))
                                                   (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                                                   (rule "mul_literals" (formula "18") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "18") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "18") (term "0,0"))
                                                   (rule "add_literals" (formula "18") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
                                                   (rule "add_literals" (formula "18") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "18") (term "1,0"))
                                                   (rule "add_zero_right" (formula "18") (term "0"))
                                                   (rule "leq_literals" (formula "18"))
                                                   (rule "closeFalse" (formula "18"))
                                                )
                                             )
                                          )
                                          (branch "CUT: contains(result_0, self.left.right.values) FALSE"
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "cut_direct" (formula "40") (term "0,0,0"))
                                             (branch "CUT: z_10 = result_1 TRUE"
                                                (builtin "One Step Simplification" (formula "41"))
                                                (rule "false_right" (formula "41"))
                                                (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "33"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "2"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                (rule "add_literals" (formula "2") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                (rule "add_literals" (formula "2") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "2") (term "1,0"))
                                                (rule "add_literals" (formula "2") (term "0"))
                                                (rule "leq_literals" (formula "2"))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: z_10 = result_1 FALSE"
                                                (builtin "One Step Simplification" (formula "41"))
                                                (rule "allLeft" (formula "13") (inst "t=z_10"))
                                                (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                                                (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "13") (term "0,0,1"))
                                                (rule "leq_literals" (formula "13") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "13"))
                                                (rule "notLeft" (formula "13"))
                                                (rule "replace_known_right" (formula "42") (term "0,1,0,0") (ifseqformula "34"))
                                                (builtin "One Step Simplification" (formula "42"))
                                                (rule "allLeft" (formula "14") (inst "t=z_10"))
                                                (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                                                (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "14") (term "0,0,1"))
                                                (rule "leq_literals" (formula "14") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "14"))
                                                (rule "notLeft" (formula "14"))
                                                (rule "replace_known_right" (formula "43") (term "0,0,0") (ifseqformula "34"))
                                                (builtin "One Step Simplification" (formula "43"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0") (ifseqformula "3"))
                                                (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "41"))
                                                (builtin "One Step Simplification" (formula "11"))
                                                (rule "cut_direct" (formula "45") (term "0,1"))
                                                (branch "CUT: self.value = z_10 TRUE"
                                                   (builtin "One Step Simplification" (formula "46"))
                                                   (rule "false_right" (formula "46"))
                                                   (rule "applyEq" (formula "14") (term "0,1,0,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "34") (term "0") (ifseqformula "1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "34"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                   (rule "add_literals" (formula "3") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "3") (term "1,0"))
                                                   (rule "add_zero_right" (formula "3") (term "0"))
                                                   (rule "leq_literals" (formula "3"))
                                                   (rule "closeFalse" (formula "3"))
                                                )
                                                (branch "CUT: self.value = z_10 FALSE"
                                                   (builtin "One Step Simplification" (formula "46"))
                                                   (rule "notRight" (formula "46"))
                                                   (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "18"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                   (rule "add_literals" (formula "3") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "3") (term "1,0"))
                                                   (rule "add_literals" (formula "3") (term "0"))
                                                   (rule "leq_literals" (formula "3"))
                                                   (rule "closeFalse" (formula "3"))
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: result_2 = result_0 FALSE"
                                          (builtin "One Step Simplification" (formula "33"))
                                          (rule "replace_known_left" (formula "40") (term "1,1") (ifseqformula "33"))
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "allRight" (formula "40") (inst "sk=z_9"))
                                          (rule "orRight" (formula "40"))
                                          (rule "eqSymm" (formula "40") (term "0,1"))
                                          (rule "eqSymm" (formula "40") (term "0,1,1,0"))
                                          (rule "inEqSimp_leqRight" (formula "41"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "applyEq" (formula "11") (term "0,1,0,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "41") (term "0,0,1") (ifseqformula "34"))
                                          (rule "eqSymm" (formula "41") (term "0,1"))
                                          (rule "applyEq" (formula "31") (term "0") (ifseqformula "34"))
                                          (rule "inEqSimp_homoInEq0" (formula "31"))
                                          (rule "polySimp_pullOutFactor1" (formula "31") (term "0"))
                                          (rule "add_literals" (formula "31") (term "1,0"))
                                          (rule "times_zero_1" (formula "31") (term "0"))
                                          (rule "qeq_literals" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_contradEq7" (formula "40") (term "0,1") (ifseqformula "1"))
                                          (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0,0,1"))
                                          (rule "add_literals" (formula "40") (term "1,1,0,0,0,1"))
                                          (rule "times_zero_1" (formula "40") (term "1,0,0,0,1"))
                                          (rule "add_literals" (formula "40") (term "0,0,0,1"))
                                          (rule "leq_literals" (formula "40") (term "0,0,1"))
                                          (builtin "One Step Simplification" (formula "40"))
                                          (rule "inEqSimp_strengthen1" (formula "31") (ifseqformula "34"))
                                          (rule "inEqSimp_contradEq7" (formula "34") (ifseqformula "31"))
                                          (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0"))
                                          (rule "add_literals" (formula "34") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "34") (term "1,0,0"))
                                          (rule "add_literals" (formula "34") (term "0,0"))
                                          (rule "leq_literals" (formula "34") (term "0"))
                                          (builtin "One Step Simplification" (formula "34"))
                                          (rule "false_right" (formula "34"))
                                          (rule "cut_direct" (formula "16") (term "1"))
                                          (branch "CUT: contains(result_0, self.left.left.values) TRUE"
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "2"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0") (ifseqformula "3"))
                                             (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "38"))
                                             (builtin "One Step Simplification" (formula "11"))
                                             (rule "cut_direct" (formula "41") (term "0,0"))
                                             (branch "CUT: z_9 = result_1 TRUE"
                                                (builtin "One Step Simplification" (formula "42"))
                                                (rule "false_right" (formula "42"))
                                                (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "3"))
                                                (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                                (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                (rule "mul_literals" (formula "3") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "35"))
                                                (rule "andLeft" (formula "3"))
                                                (rule "inEqSimp_homoInEq1" (formula "3"))
                                                (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                (rule "add_literals" (formula "3") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                (rule "add_literals" (formula "3") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "3") (term "1,0"))
                                                (rule "add_literals" (formula "3") (term "0"))
                                                (rule "leq_literals" (formula "3"))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch "CUT: z_9 = result_1 FALSE"
                                                (builtin "One Step Simplification" (formula "42"))
                                                (rule "cut_direct" (formula "42") (term "0,1"))
                                                (branch "CUT: self.left.value = z_9 TRUE"
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "false_right" (formula "43"))
                                                   (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "18"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                   (rule "inEqSimp_contradInEq0" (formula "35") (ifseqformula "3"))
                                                   (rule "andLeft" (formula "35"))
                                                   (rule "inEqSimp_homoInEq1" (formula "35"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                                                   (rule "mul_literals" (formula "35") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "35") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "35") (term "0,0"))
                                                   (rule "add_literals" (formula "35") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                   (rule "add_literals" (formula "35") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0"))
                                                   (rule "add_zero_right" (formula "35") (term "0"))
                                                   (rule "leq_literals" (formula "35"))
                                                   (rule "closeFalse" (formula "35"))
                                                )
                                                (branch "CUT: self.left.value = z_9 FALSE"
                                                   (builtin "One Step Simplification" (formula "43"))
                                                   (rule "cut_direct" (formula "43") (term "0,0"))
                                                   (branch "CUT: contains(z_9, self.left.right.values) TRUE"
                                                      (builtin "One Step Simplification" (formula "44"))
                                                      (rule "false_right" (formula "44"))
                                                      (rule "allLeft" (formula "17") (inst "t=z_9"))
                                                      (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "17"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "17"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "36") (ifseqformula "3"))
                                                      (rule "andLeft" (formula "36"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36"))
                                                      (rule "polySimp_mulComm0" (formula "36") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "36") (term "1,0"))
                                                      (rule "mul_literals" (formula "36") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "36") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "36") (term "0,0"))
                                                      (rule "add_literals" (formula "36") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0"))
                                                      (rule "add_zero_right" (formula "36") (term "0"))
                                                      (rule "leq_literals" (formula "36"))
                                                      (rule "closeFalse" (formula "36"))
                                                   )
                                                   (branch "CUT: contains(z_9, self.left.right.values) FALSE"
                                                      (builtin "One Step Simplification" (formula "44"))
                                                      (rule "notRight" (formula "44"))
                                                      (rule "allLeft" (formula "16") (inst "t=z_9"))
                                                      (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "16"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "16"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "36") (ifseqformula "3"))
                                                      (rule "andLeft" (formula "36"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36"))
                                                      (rule "polySimp_mulComm0" (formula "36") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "36") (term "1,0"))
                                                      (rule "mul_literals" (formula "36") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "36") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "36") (term "0,0"))
                                                      (rule "add_literals" (formula "36") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0"))
                                                      (rule "add_literals" (formula "36") (term "0"))
                                                      (rule "leq_literals" (formula "36"))
                                                      (rule "closeFalse" (formula "36"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: contains(result_0, self.left.left.values) FALSE"
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,0") (ifseqformula "2"))
                                             (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "38"))
                                             (builtin "One Step Simplification" (formula "10"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "2"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "cut_direct" (formula "42") (term "0,0"))
                                             (branch "CUT: z_9 = result_1 TRUE"
                                                (builtin "One Step Simplification" (formula "43"))
                                                (rule "false_right" (formula "43"))
                                                (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "3"))
                                                (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                                (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                (rule "mul_literals" (formula "3") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                (rule "inEqSimp_contradInEq0" (formula "35") (ifseqformula "3"))
                                                (rule "andLeft" (formula "35"))
                                                (rule "inEqSimp_homoInEq1" (formula "35"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                                                (rule "mul_literals" (formula "35") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "35") (term "0"))
                                                (rule "polySimp_addComm1" (formula "35") (term "0,0"))
                                                (rule "add_literals" (formula "35") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                (rule "add_literals" (formula "35") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0"))
                                                (rule "add_zero_right" (formula "35") (term "0"))
                                                (rule "leq_literals" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                             (branch "CUT: z_9 = result_1 FALSE"
                                                (builtin "One Step Simplification" (formula "43"))
                                                (rule "cut_direct" (formula "43") (term "0,1"))
                                                (branch "CUT: self.left.value = z_9 TRUE"
                                                   (builtin "One Step Simplification" (formula "44"))
                                                   (rule "false_right" (formula "44"))
                                                   (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "18"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "35"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                   (rule "add_literals" (formula "3") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "3") (term "1,0"))
                                                   (rule "add_zero_right" (formula "3") (term "0"))
                                                   (rule "leq_literals" (formula "3"))
                                                   (rule "closeFalse" (formula "3"))
                                                )
                                                (branch "CUT: self.left.value = z_9 FALSE"
                                                   (builtin "One Step Simplification" (formula "44"))
                                                   (rule "cut_direct" (formula "44") (term "0,1"))
                                                   (branch "CUT: contains(z_9, self.left.left.values) TRUE"
                                                      (builtin "One Step Simplification" (formula "45"))
                                                      (rule "false_right" (formula "45"))
                                                      (rule "allLeft" (formula "16") (inst "t=z_9"))
                                                      (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "16"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "16"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "36") (ifseqformula "3"))
                                                      (rule "andLeft" (formula "36"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36"))
                                                      (rule "polySimp_mulComm0" (formula "36") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "36") (term "1,0"))
                                                      (rule "mul_literals" (formula "36") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "36") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "36") (term "0,0"))
                                                      (rule "add_literals" (formula "36") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0"))
                                                      (rule "add_literals" (formula "36") (term "0"))
                                                      (rule "leq_literals" (formula "36"))
                                                      (rule "closeFalse" (formula "36"))
                                                   )
                                                   (branch "CUT: contains(z_9, self.left.left.values) FALSE"
                                                      (builtin "One Step Simplification" (formula "45"))
                                                      (rule "notRight" (formula "45"))
                                                      (rule "allLeft" (formula "17") (inst "t=z_9"))
                                                      (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "17"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "17"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "36") (ifseqformula "3"))
                                                      (rule "andLeft" (formula "36"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36"))
                                                      (rule "polySimp_mulComm0" (formula "36") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "36") (term "1,0"))
                                                      (rule "mul_literals" (formula "36") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "36") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "36") (term "0,0"))
                                                      (rule "add_literals" (formula "36") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0"))
                                                      (rule "add_zero_right" (formula "36") (term "0"))
                                                      (rule "leq_literals" (formula "36"))
                                                      (rule "closeFalse" (formula "36"))
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch "self.right.left = null FALSE"
                                 (rule "replace_known_right" (formula "24") (term "0,1,0,0,0") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "37"))
                                 (builtin "One Step Simplification" (formula "28"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "replace_known_right" (formula "44") (term "0,1,0,0,0,1") (ifseqformula "38"))
                                 (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "38")))
                                 (rule "replace_known_right" (formula "31") (term "0,0") (ifseqformula "38"))
                                 (builtin "One Step Simplification" (formula "31"))
                                 (rule "andLeft" (formula "31"))
                                 (rule "replace_known_right" (formula "26") (term "0,1,0") (ifseqformula "39"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "39"))
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "notLeft" (formula "27"))
                                 (rule "elementOfUnion2" (formula "24") (term "0,0,0"))
                                 (rule "elementOfUnion2" (formula "45") (term "0,0,0,0,0,0,0"))
                                 (rule "elementOfUnion2" (formula "45") (term "0,0,0,1"))
                                 (rule "elementOfUnion2" (formula "26") (term "0"))
                                 (rule "nnf_notOr" (formula "24") (term "0,0"))
                                 (rule "nnf_notOr" (formula "45") (term "0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "24") (term "0"))
                                 (rule "commute_and" (formula "24") (term "1,0"))
                                 (rule "cnf_rightDist" (formula "24") (term "0"))
                                 (rule "distr_forallAnd" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "commute_or" (formula "24") (term "0"))
                                 (rule "cut_direct" (formula "38") (term "1,1"))
                                 (branch "CUT: result_2 = result_1 TRUE"
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "true_left" (formula "39"))
                                    (rule "applyEq" (formula "46") (term "0,1,0,1,0,1") (ifseqformula "38"))
                                    (rule "applyEq" (formula "37") (term "0") (ifseqformula "38"))
                                    (rule "inEqSimp_homoInEq1" (formula "37"))
                                    (rule "polySimp_pullOutFactor1" (formula "37") (term "0"))
                                    (rule "add_literals" (formula "37") (term "1,0"))
                                    (rule "times_zero_1" (formula "37") (term "0"))
                                    (rule "leq_literals" (formula "37"))
                                    (rule "true_left" (formula "37"))
                                    (rule "applyEq" (formula "35") (term "1") (ifseqformula "37"))
                                    (rule "applyEq" (formula "45") (term "0,1,0,0,0,1") (ifseqformula "37"))
                                    (rule "applyEq" (formula "45") (term "0,0,0,0,0,1") (ifseqformula "37"))
                                    (rule "applyEq" (formula "45") (term "1,1,0,0") (ifseqformula "37"))
                                    (rule "applyEq" (formula "36") (term "0") (ifseqformula "37"))
                                    (rule "applyEq" (formula "45") (term "0,0,0,1,0,1") (ifseqformula "37"))
                                    (rule "applyEq" (formula "45") (term "1,1,0,0,1") (ifseqformula "37"))
                                    (rule "replace_known_left" (formula "45") (term "0,0,1") (ifseqformula "27"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "allRight" (formula "45") (inst "sk=z_8"))
                                    (rule "orRight" (formula "45"))
                                    (rule "eqSymm" (formula "45") (term "0,1,1,0"))
                                    (rule "eqSymm" (formula "45") (term "0,1"))
                                    (rule "eqSymm" (formula "45") (term "0,1,0,0"))
                                    (rule "inEqSimp_leqRight" (formula "46"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "cut_direct" (formula "16") (term "1"))
                                    (branch "CUT: self.left.value = result_0 TRUE"
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "applyEq" (formula "46") (term "0,0,1,1,0") (ifseqformula "16"))
                                       (rule "eqSymm" (formula "46") (term "0,1,1,0"))
                                       (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                       (rule "inEqSimp_homoInEq0" (formula "15"))
                                       (rule "polySimp_pullOutFactor1" (formula "15") (term "0"))
                                       (rule "add_literals" (formula "15") (term "1,0"))
                                       (rule "times_zero_1" (formula "15") (term "0"))
                                       (rule "qeq_literals" (formula "15"))
                                       (rule "true_left" (formula "15"))
                                       (rule "applyEq" (formula "22") (term "0,1,0") (ifseqformula "15"))
                                       (rule "cut_direct" (formula "27") (term "1"))
                                       (branch "CUT: self.right.value = result_1 TRUE"
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                                          (rule "inEqSimp_homoInEq0" (formula "26"))
                                          (rule "polySimp_pullOutFactor1" (formula "26") (term "0"))
                                          (rule "add_literals" (formula "26") (term "1,0"))
                                          (rule "times_zero_1" (formula "26") (term "0"))
                                          (rule "qeq_literals" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                          (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "44") (term "0,0,1,0,0") (ifseqformula "26"))
                                          (rule "eqSymm" (formula "44") (term "0,1,0,0"))
                                          (rule "inEqSimp_contradEq7" (formula "44") (term "0,1,0,0") (ifseqformula "1"))
                                          (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0,0,1,0,0"))
                                          (rule "add_literals" (formula "44") (term "1,1,0,0,0,1,0,0"))
                                          (rule "times_zero_1" (formula "44") (term "1,0,0,0,1,0,0"))
                                          (rule "add_zero_right" (formula "44") (term "0,0,0,1,0,0"))
                                          (rule "leq_literals" (formula "44") (term "0,0,1,0,0"))
                                          (builtin "One Step Simplification" (formula "44"))
                                          (rule "allLeft" (formula "25") (inst "t=z_8"))
                                          (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                          (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                          (rule "leq_literals" (formula "25") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "25"))
                                          (rule "notLeft" (formula "25"))
                                          (rule "replace_known_right" (formula "45") (term "0,0,0,0") (ifseqformula "37"))
                                          (builtin "One Step Simplification" (formula "45"))
                                          (rule "allLeft" (formula "24") (inst "t=z_8"))
                                          (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                          (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "24") (term "0,0,1"))
                                          (rule "leq_literals" (formula "24") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "24"))
                                          (rule "notLeft" (formula "24"))
                                          (rule "replace_known_right" (formula "46") (term "0,0,0") (ifseqformula "37"))
                                          (builtin "One Step Simplification" (formula "46"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,1,0,0") (ifseqformula "2"))
                                          (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "46"))
                                          (builtin "One Step Simplification" (formula "11"))
                                          (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,0,0,0") (ifseqformula "2"))
                                          (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "45"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "cut_direct" (formula "48") (term "0,1,0"))
                                          (branch "CUT: z_8 = result_0 TRUE"
                                             (builtin "One Step Simplification" (formula "49"))
                                             (rule "false_right" (formula "49"))
                                             (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "2"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "applyEq" (formula "40") (term "0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "41") (term "0") (ifseqformula "1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                             (rule "mul_literals" (formula "2") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                             (rule "inEqSimp_contradInEq0" (formula "38") (ifseqformula "2"))
                                             (rule "andLeft" (formula "38"))
                                             (rule "inEqSimp_homoInEq1" (formula "38"))
                                             (rule "polySimp_mulComm0" (formula "38") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "38") (term "1,0"))
                                             (rule "mul_literals" (formula "38") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "38") (term "0"))
                                             (rule "polySimp_addComm0" (formula "38") (term "0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "38") (term "0"))
                                             (rule "add_literals" (formula "38") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "38") (term "1,0"))
                                             (rule "add_zero_right" (formula "38") (term "0"))
                                             (rule "leq_literals" (formula "38"))
                                             (rule "closeFalse" (formula "38"))
                                          )
                                          (branch "CUT: z_8 = result_0 FALSE"
                                             (builtin "One Step Simplification" (formula "49"))
                                             (rule "cut_direct" (formula "49") (term "0,1"))
                                             (branch "CUT: self.value = z_8 TRUE"
                                                (builtin "One Step Simplification" (formula "50"))
                                                (rule "false_right" (formula "50"))
                                                (rule "applyEq" (formula "37") (term "0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "2"))
                                                (rule "andLeft" (formula "37"))
                                                (rule "inEqSimp_homoInEq1" (formula "37"))
                                                (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                (rule "add_literals" (formula "37") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "37") (term "1,0"))
                                                (rule "add_literals" (formula "37") (term "0"))
                                                (rule "leq_literals" (formula "37"))
                                                (rule "closeFalse" (formula "37"))
                                             )
                                             (branch "CUT: self.value = z_8 FALSE"
                                                (builtin "One Step Simplification" (formula "50"))
                                                (rule "cut_direct" (formula "50") (term "0,0"))
                                                (branch "CUT: contains(z_8, self.left.right.values) TRUE"
                                                   (builtin "One Step Simplification" (formula "51"))
                                                   (rule "false_right" (formula "51"))
                                                   (rule "allLeft" (formula "17") (inst "t=z_8"))
                                                   (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "17"))
                                                   (rule "inEqSimp_strengthen0" (formula "17") (ifseqformula "50"))
                                                   (rule "inEqSimp_contradEq3" (formula "50") (ifseqformula "17"))
                                                   (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "50") (term "0,0"))
                                                   (rule "add_literals" (formula "50") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "50") (term "1,0,0"))
                                                   (rule "add_literals" (formula "50") (term "0,0"))
                                                   (rule "qeq_literals" (formula "50") (term "0"))
                                                   (builtin "One Step Simplification" (formula "50"))
                                                   (rule "false_right" (formula "50"))
                                                   (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "17"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                   (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                   (rule "add_literals" (formula "2") (term "0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "40"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "2"))
                                                   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                   (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                   (rule "add_literals" (formula "2") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "2") (term "1,0"))
                                                   (rule "add_zero_right" (formula "2") (term "0"))
                                                   (rule "leq_literals" (formula "2"))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                                (branch "CUT: contains(z_8, self.left.right.values) FALSE"
                                                   (builtin "One Step Simplification" (formula "51"))
                                                   (rule "notRight" (formula "51"))
                                                   (rule "allLeft" (formula "16") (inst "t=z_8"))
                                                   (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                   (builtin "One Step Simplification" (formula "16"))
                                                   (rule "inEqSimp_strengthen0" (formula "16") (ifseqformula "50"))
                                                   (rule "inEqSimp_contradEq3" (formula "50") (ifseqformula "16"))
                                                   (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "50") (term "0,0"))
                                                   (rule "add_literals" (formula "50") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "50") (term "1,0,0"))
                                                   (rule "add_literals" (formula "50") (term "0,0"))
                                                   (rule "qeq_literals" (formula "50") (term "0"))
                                                   (builtin "One Step Simplification" (formula "50"))
                                                   (rule "false_right" (formula "50"))
                                                   (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "16"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                   (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                   (rule "add_literals" (formula "2") (term "0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                   (rule "inEqSimp_contradInEq0" (formula "40") (ifseqformula "2"))
                                                   (rule "andLeft" (formula "40"))
                                                   (rule "inEqSimp_homoInEq1" (formula "40"))
                                                   (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "40") (term "1,0"))
                                                   (rule "mul_literals" (formula "40") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "40") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "40") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "40") (term "0"))
                                                   (rule "add_literals" (formula "40") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "40") (term "1,0"))
                                                   (rule "add_literals" (formula "40") (term "0"))
                                                   (rule "leq_literals" (formula "40"))
                                                   (rule "closeFalse" (formula "40"))
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: self.right.value = result_1 FALSE"
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "inEqSimp_strengthen0" (formula "26") (ifseqformula "38"))
                                          (rule "inEqSimp_contradEq3" (formula "38") (ifseqformula "26"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0"))
                                          (rule "add_literals" (formula "38") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                          (rule "add_literals" (formula "38") (term "0,0"))
                                          (rule "qeq_literals" (formula "38") (term "0"))
                                          (builtin "One Step Simplification" (formula "38"))
                                          (rule "false_right" (formula "38"))
                                          (rule "cut_direct" (formula "45") (term "0,1,1,0"))
                                          (branch "CUT: z_8 = result_0 TRUE"
                                             (builtin "One Step Simplification" (formula "46"))
                                             (rule "false_right" (formula "46"))
                                             (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "2"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                             (rule "mul_literals" (formula "2") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                             (rule "inEqSimp_contradInEq0" (formula "37") (ifseqformula "2"))
                                             (rule "andLeft" (formula "37"))
                                             (rule "inEqSimp_homoInEq1" (formula "37"))
                                             (rule "polySimp_mulComm0" (formula "37") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "37") (term "1,0"))
                                             (rule "mul_literals" (formula "37") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "37") (term "0"))
                                             (rule "polySimp_addComm0" (formula "37") (term "0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                             (rule "add_literals" (formula "37") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "37") (term "1,0"))
                                             (rule "add_zero_right" (formula "37") (term "0"))
                                             (rule "leq_literals" (formula "37"))
                                             (rule "closeFalse" (formula "37"))
                                          )
                                          (branch "CUT: z_8 = result_0 FALSE"
                                             (builtin "One Step Simplification" (formula "46"))
                                             (rule "cut_direct" (formula "27") (term "1"))
                                             (branch "CUT: contains(result_1, self.right.left.values) TRUE"
                                                (builtin "One Step Simplification" (formula "28"))
                                                (rule "true_left" (formula "28"))
                                                (rule "allLeft" (formula "25") (inst "t=z_8"))
                                                (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                                (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                                (rule "leq_literals" (formula "25") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "notLeft" (formula "25"))
                                                (rule "replace_known_right" (formula "47") (term "0,0,0,0,0") (ifseqformula "38"))
                                                (builtin "One Step Simplification" (formula "47"))
                                                (rule "allLeft" (formula "24") (inst "t=z_8"))
                                                (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                                (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "24") (term "0,0,1"))
                                                (rule "leq_literals" (formula "24") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "24"))
                                                (rule "notLeft" (formula "24"))
                                                (rule "replace_known_right" (formula "48") (term "0,0,0,0") (ifseqformula "38"))
                                                (builtin "One Step Simplification" (formula "48"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0") (ifseqformula "3"))
                                                (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "46"))
                                                (builtin "One Step Simplification" (formula "11"))
                                                (rule "cut_direct" (formula "50") (term "0,1"))
                                                (branch "CUT: self.value = z_8 TRUE"
                                                   (builtin "One Step Simplification" (formula "51"))
                                                   (rule "false_right" (formula "51"))
                                                   (rule "applyEq" (formula "38") (term "0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "38") (ifseqformula "3"))
                                                   (rule "andLeft" (formula "38"))
                                                   (rule "inEqSimp_homoInEq1" (formula "38"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "38") (term "0"))
                                                   (rule "add_literals" (formula "38") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "38") (term "1,0"))
                                                   (rule "add_zero_right" (formula "38") (term "0"))
                                                   (rule "leq_literals" (formula "38"))
                                                   (rule "closeFalse" (formula "38"))
                                                )
                                                (branch "CUT: self.value = z_8 FALSE"
                                                   (builtin "One Step Simplification" (formula "51"))
                                                   (rule "cut_direct" (formula "51") (term "0,0"))
                                                   (branch "CUT: self.right.value = z_8 TRUE"
                                                      (builtin "One Step Simplification" (formula "52"))
                                                      (rule "false_right" (formula "52"))
                                                      (rule "applyEq" (formula "36") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "29") (term "0") (ifseqformula "1"))
                                                      (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "29"))
                                                      (rule "andLeft" (formula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "3"))
                                                      (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                      (rule "add_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                      (rule "add_literals" (formula "3") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "3") (term "1,0"))
                                                      (rule "add_zero_right" (formula "3") (term "0"))
                                                      (rule "leq_literals" (formula "3"))
                                                      (rule "closeFalse" (formula "3"))
                                                   )
                                                   (branch "CUT: self.right.value = z_8 FALSE"
                                                      (builtin "One Step Simplification" (formula "52"))
                                                      (rule "cut_direct" (formula "52") (term "0,0"))
                                                      (branch "CUT: contains(z_8, self.left.right.values) TRUE"
                                                         (builtin "One Step Simplification" (formula "53"))
                                                         (rule "false_right" (formula "53"))
                                                         (rule "allLeft" (formula "17") (inst "t=z_8"))
                                                         (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "17"))
                                                         (rule "inEqSimp_strengthen0" (formula "17") (ifseqformula "51"))
                                                         (rule "inEqSimp_contradEq3" (formula "51") (ifseqformula "17"))
                                                         (rule "polySimp_mulComm0" (formula "51") (term "1,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "51") (term "0,0"))
                                                         (rule "add_literals" (formula "51") (term "1,1,0,0"))
                                                         (rule "times_zero_1" (formula "51") (term "1,0,0"))
                                                         (rule "add_literals" (formula "51") (term "0,0"))
                                                         (rule "qeq_literals" (formula "51") (term "0"))
                                                         (builtin "One Step Simplification" (formula "51"))
                                                         (rule "false_right" (formula "51"))
                                                         (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "17"))
                                                         (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                         (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                         (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                         (rule "add_literals" (formula "3") (term "0,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                         (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "41"))
                                                         (rule "andLeft" (formula "3"))
                                                         (rule "inEqSimp_homoInEq1" (formula "3"))
                                                         (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                         (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                         (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                         (rule "add_literals" (formula "3") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "3") (term "1,0"))
                                                         (rule "add_literals" (formula "3") (term "0"))
                                                         (rule "leq_literals" (formula "3"))
                                                         (rule "closeFalse" (formula "3"))
                                                      )
                                                      (branch "CUT: contains(z_8, self.left.right.values) FALSE"
                                                         (builtin "One Step Simplification" (formula "53"))
                                                         (rule "notRight" (formula "53"))
                                                         (rule "allLeft" (formula "16") (inst "t=z_8"))
                                                         (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "16"))
                                                         (rule "inEqSimp_strengthen0" (formula "16") (ifseqformula "51"))
                                                         (rule "inEqSimp_contradEq3" (formula "51") (ifseqformula "16"))
                                                         (rule "polySimp_mulComm0" (formula "51") (term "1,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "51") (term "0,0"))
                                                         (rule "add_literals" (formula "51") (term "1,1,0,0"))
                                                         (rule "times_zero_1" (formula "51") (term "1,0,0"))
                                                         (rule "add_zero_right" (formula "51") (term "0,0"))
                                                         (rule "qeq_literals" (formula "51") (term "0"))
                                                         (builtin "One Step Simplification" (formula "51"))
                                                         (rule "false_right" (formula "51"))
                                                         (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "16"))
                                                         (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                         (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                         (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                         (rule "add_literals" (formula "3") (term "0,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                         (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "3"))
                                                         (rule "andLeft" (formula "41"))
                                                         (rule "inEqSimp_homoInEq1" (formula "41"))
                                                         (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                         (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                         (rule "polySimp_addComm0" (formula "41") (term "0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                         (rule "add_literals" (formula "41") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "41") (term "1,0"))
                                                         (rule "add_zero_right" (formula "41") (term "0"))
                                                         (rule "leq_literals" (formula "41"))
                                                         (rule "closeFalse" (formula "41"))
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: contains(result_1, self.right.left.values) FALSE"
                                                (builtin "One Step Simplification" (formula "27"))
                                                (rule "allLeft" (formula "25") (inst "t=z_8"))
                                                (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                                (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "25") (term "0,0,1"))
                                                (rule "leq_literals" (formula "25") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "25"))
                                                (rule "notLeft" (formula "25"))
                                                (rule "replace_known_right" (formula "48") (term "0,0,0,0,0") (ifseqformula "38"))
                                                (builtin "One Step Simplification" (formula "48"))
                                                (rule "allLeft" (formula "24") (inst "t=z_8"))
                                                (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                                (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "24") (term "0,0,1"))
                                                (rule "leq_literals" (formula "24") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "24"))
                                                (rule "notLeft" (formula "24"))
                                                (rule "replace_known_right" (formula "49") (term "0,0,0,0") (ifseqformula "38"))
                                                (builtin "One Step Simplification" (formula "49"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,1,0,0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "48"))
                                                (builtin "One Step Simplification" (formula "11"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,0,0,0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "47"))
                                                (builtin "One Step Simplification" (formula "12"))
                                                (rule "cut_direct" (formula "51") (term "0,1"))
                                                (branch "CUT: self.value = z_8 TRUE"
                                                   (builtin "One Step Simplification" (formula "52"))
                                                   (rule "false_right" (formula "52"))
                                                   (rule "applyEq" (formula "38") (term "0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "38") (ifseqformula "2"))
                                                   (rule "andLeft" (formula "38"))
                                                   (rule "inEqSimp_homoInEq1" (formula "38"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "38") (term "0"))
                                                   (rule "add_literals" (formula "38") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "38") (term "1,0"))
                                                   (rule "add_literals" (formula "38") (term "0"))
                                                   (rule "leq_literals" (formula "38"))
                                                   (rule "closeFalse" (formula "38"))
                                                )
                                                (branch "CUT: self.value = z_8 FALSE"
                                                   (builtin "One Step Simplification" (formula "52"))
                                                   (rule "cut_direct" (formula "52") (term "0,0"))
                                                   (branch "CUT: self.right.value = z_8 TRUE"
                                                      (builtin "One Step Simplification" (formula "53"))
                                                      (rule "false_right" (formula "53"))
                                                      (rule "applyEq" (formula "36") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "29") (term "0") (ifseqformula "1"))
                                                      (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "29"))
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "2"))
                                                      (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                      (rule "add_literals" (formula "2") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                      (rule "add_literals" (formula "2") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "2") (term "1,0"))
                                                      (rule "add_literals" (formula "2") (term "0"))
                                                      (rule "leq_literals" (formula "2"))
                                                      (rule "closeFalse" (formula "2"))
                                                   )
                                                   (branch "CUT: self.right.value = z_8 FALSE"
                                                      (builtin "One Step Simplification" (formula "53"))
                                                      (rule "cut_direct" (formula "53") (term "0,1"))
                                                      (branch "CUT: contains(z_8, self.left.left.values) TRUE"
                                                         (builtin "One Step Simplification" (formula "54"))
                                                         (rule "false_right" (formula "54"))
                                                         (rule "allLeft" (formula "16") (inst "t=z_8"))
                                                         (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "16"))
                                                         (rule "inEqSimp_strengthen0" (formula "16") (ifseqformula "52"))
                                                         (rule "inEqSimp_contradEq3" (formula "52") (ifseqformula "16"))
                                                         (rule "polySimp_mulComm0" (formula "52") (term "1,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "52") (term "0,0"))
                                                         (rule "add_literals" (formula "52") (term "1,1,0,0"))
                                                         (rule "times_zero_1" (formula "52") (term "1,0,0"))
                                                         (rule "add_zero_right" (formula "52") (term "0,0"))
                                                         (rule "qeq_literals" (formula "52") (term "0"))
                                                         (builtin "One Step Simplification" (formula "52"))
                                                         (rule "false_right" (formula "52"))
                                                         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "16"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                         (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                         (rule "add_literals" (formula "2") (term "0,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                         (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "2"))
                                                         (rule "andLeft" (formula "41"))
                                                         (rule "inEqSimp_homoInEq1" (formula "41"))
                                                         (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                         (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                         (rule "polySimp_addComm0" (formula "41") (term "0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                         (rule "add_literals" (formula "41") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "41") (term "1,0"))
                                                         (rule "add_zero_right" (formula "41") (term "0"))
                                                         (rule "leq_literals" (formula "41"))
                                                         (rule "closeFalse" (formula "41"))
                                                      )
                                                      (branch "CUT: contains(z_8, self.left.left.values) FALSE"
                                                         (builtin "One Step Simplification" (formula "54"))
                                                         (rule "notRight" (formula "54"))
                                                         (rule "allLeft" (formula "17") (inst "t=z_8"))
                                                         (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "17"))
                                                         (rule "inEqSimp_strengthen0" (formula "17") (ifseqformula "52"))
                                                         (rule "inEqSimp_contradEq3" (formula "52") (ifseqformula "17"))
                                                         (rule "polySimp_mulComm0" (formula "52") (term "1,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "52") (term "0,0"))
                                                         (rule "add_literals" (formula "52") (term "1,1,0,0"))
                                                         (rule "times_zero_1" (formula "52") (term "1,0,0"))
                                                         (rule "add_zero_right" (formula "52") (term "0,0"))
                                                         (rule "qeq_literals" (formula "52") (term "0"))
                                                         (builtin "One Step Simplification" (formula "52"))
                                                         (rule "false_right" (formula "52"))
                                                         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "17"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                         (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                         (rule "add_literals" (formula "2") (term "0,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                         (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "41"))
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "inEqSimp_homoInEq1" (formula "2"))
                                                         (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                         (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                         (rule "add_literals" (formula "2") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "2") (term "1,0"))
                                                         (rule "add_zero_right" (formula "2") (term "0"))
                                                         (rule "leq_literals" (formula "2"))
                                                         (rule "closeFalse" (formula "2"))
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch "CUT: self.left.value = result_0 FALSE"
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "inEqSimp_strengthen0" (formula "15") (ifseqformula "39"))
                                       (rule "inEqSimp_contradEq3" (formula "39") (ifseqformula "15"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0"))
                                       (rule "add_literals" (formula "39") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "39") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "39") (term "0,0"))
                                       (rule "qeq_literals" (formula "39") (term "0"))
                                       (builtin "One Step Simplification" (formula "39"))
                                       (rule "false_right" (formula "39"))
                                       (rule "cut_direct" (formula "28") (term "1"))
                                       (branch "CUT: self.right.value = result_1 TRUE"
                                          (builtin "One Step Simplification" (formula "29"))
                                          (rule "true_left" (formula "29"))
                                          (rule "applyEq" (formula "46") (term "0,0,1,0,0") (ifseqformula "28"))
                                          (rule "eqSymm" (formula "46") (term "0,1,0,0"))
                                          (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                                          (rule "inEqSimp_homoInEq0" (formula "27"))
                                          (rule "polySimp_pullOutFactor1" (formula "27") (term "0"))
                                          (rule "add_literals" (formula "27") (term "1,0"))
                                          (rule "times_zero_1" (formula "27") (term "0"))
                                          (rule "qeq_literals" (formula "27"))
                                          (rule "true_left" (formula "27"))
                                          (rule "applyEq" (formula "33") (term "0,1,0") (ifseqformula "27"))
                                          (rule "inEqSimp_contradEq7" (formula "45") (term "0,1,0,0") (ifseqformula "1"))
                                          (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "45") (term "0,0,0,1,0,0"))
                                          (rule "add_literals" (formula "45") (term "1,1,0,0,0,1,0,0"))
                                          (rule "times_zero_1" (formula "45") (term "1,0,0,0,1,0,0"))
                                          (rule "add_zero_right" (formula "45") (term "0,0,0,1,0,0"))
                                          (rule "leq_literals" (formula "45") (term "0,0,1,0,0"))
                                          (builtin "One Step Simplification" (formula "45"))
                                          (rule "cut_direct" (formula "16") (term "1"))
                                          (branch "CUT: contains(result_0, self.left.left.values) TRUE"
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "allLeft" (formula "26") (inst "t=z_8"))
                                             (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                                             (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "26") (term "0,0,1"))
                                             (rule "leq_literals" (formula "26") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "26"))
                                             (rule "notLeft" (formula "26"))
                                             (rule "replace_known_right" (formula "46") (term "0,0,0,0") (ifseqformula "38"))
                                             (builtin "One Step Simplification" (formula "46"))
                                             (rule "allLeft" (formula "25") (inst "t=z_8"))
                                             (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                             (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                             (rule "leq_literals" (formula "25") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "notLeft" (formula "25"))
                                             (rule "replace_known_right" (formula "47") (term "0,0,0") (ifseqformula "38"))
                                             (builtin "One Step Simplification" (formula "47"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,0") (ifseqformula "2"))
                                             (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "45"))
                                             (builtin "One Step Simplification" (formula "10"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "2"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "cut_direct" (formula "49") (term "0,1"))
                                             (branch "CUT: self.value = z_8 TRUE"
                                                (builtin "One Step Simplification" (formula "50"))
                                                (rule "false_right" (formula "50"))
                                                (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "38") (term "0") (ifseqformula "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "38") (ifseqformula "3"))
                                                (rule "andLeft" (formula "38"))
                                                (rule "inEqSimp_homoInEq1" (formula "38"))
                                                (rule "polySimp_pullOutFactor1b" (formula "38") (term "0"))
                                                (rule "add_literals" (formula "38") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "38") (term "1,0"))
                                                (rule "add_literals" (formula "38") (term "0"))
                                                (rule "leq_literals" (formula "38"))
                                                (rule "closeFalse" (formula "38"))
                                             )
                                             (branch "CUT: self.value = z_8 FALSE"
                                                (builtin "One Step Simplification" (formula "50"))
                                                (rule "cut_direct" (formula "50") (term "0,1"))
                                                (branch "CUT: self.left.value = z_8 TRUE"
                                                   (builtin "One Step Simplification" (formula "51"))
                                                   (rule "false_right" (formula "51"))
                                                   (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "18"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "40"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                   (rule "add_literals" (formula "3") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "3") (term "1,0"))
                                                   (rule "add_zero_right" (formula "3") (term "0"))
                                                   (rule "leq_literals" (formula "3"))
                                                   (rule "closeFalse" (formula "3"))
                                                )
                                                (branch "CUT: self.left.value = z_8 FALSE"
                                                   (builtin "One Step Simplification" (formula "51"))
                                                   (rule "cut_direct" (formula "51") (term "0,1"))
                                                   (branch "CUT: contains(z_8, self.left.left.values) TRUE"
                                                      (builtin "One Step Simplification" (formula "52"))
                                                      (rule "false_right" (formula "52"))
                                                      (rule "allLeft" (formula "16") (inst "t=z_8"))
                                                      (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "16"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "16"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "3"))
                                                      (rule "andLeft" (formula "41"))
                                                      (rule "inEqSimp_homoInEq1" (formula "41"))
                                                      (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                      (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                      (rule "polySimp_addComm0" (formula "41") (term "0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                      (rule "add_literals" (formula "41") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "41") (term "1,0"))
                                                      (rule "add_literals" (formula "41") (term "0"))
                                                      (rule "leq_literals" (formula "41"))
                                                      (rule "closeFalse" (formula "41"))
                                                   )
                                                   (branch "CUT: contains(z_8, self.left.left.values) FALSE"
                                                      (builtin "One Step Simplification" (formula "52"))
                                                      (rule "notRight" (formula "52"))
                                                      (rule "allLeft" (formula "17") (inst "t=z_8"))
                                                      (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "17"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "17"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "41"))
                                                      (rule "andLeft" (formula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "3"))
                                                      (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                      (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                      (rule "add_literals" (formula "3") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "3") (term "1,0"))
                                                      (rule "add_zero_right" (formula "3") (term "0"))
                                                      (rule "leq_literals" (formula "3"))
                                                      (rule "closeFalse" (formula "3"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: contains(result_0, self.left.left.values) FALSE"
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "allLeft" (formula "25") (inst "t=z_8"))
                                             (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                             (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                             (rule "leq_literals" (formula "25") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "25"))
                                             (rule "notLeft" (formula "25"))
                                             (rule "replace_known_right" (formula "47") (term "0,1,0,0") (ifseqformula "38"))
                                             (builtin "One Step Simplification" (formula "47"))
                                             (rule "allLeft" (formula "26") (inst "t=z_8"))
                                             (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                                             (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "26") (term "0,0,1"))
                                             (rule "leq_literals" (formula "26") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "26"))
                                             (rule "notLeft" (formula "26"))
                                             (rule "replace_known_right" (formula "48") (term "0,0,0") (ifseqformula "38"))
                                             (builtin "One Step Simplification" (formula "48"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "2"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0") (ifseqformula "3"))
                                             (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "47"))
                                             (builtin "One Step Simplification" (formula "11"))
                                             (rule "cut_direct" (formula "50") (term "0,1"))
                                             (branch "CUT: self.value = z_8 TRUE"
                                                (builtin "One Step Simplification" (formula "51"))
                                                (rule "false_right" (formula "51"))
                                                (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "38") (term "0") (ifseqformula "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "38") (ifseqformula "3"))
                                                (rule "andLeft" (formula "38"))
                                                (rule "inEqSimp_homoInEq1" (formula "38"))
                                                (rule "polySimp_pullOutFactor1b" (formula "38") (term "0"))
                                                (rule "add_literals" (formula "38") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "38") (term "1,0"))
                                                (rule "add_zero_right" (formula "38") (term "0"))
                                                (rule "leq_literals" (formula "38"))
                                                (rule "closeFalse" (formula "38"))
                                             )
                                             (branch "CUT: self.value = z_8 FALSE"
                                                (builtin "One Step Simplification" (formula "51"))
                                                (rule "cut_direct" (formula "51") (term "0,1"))
                                                (branch "CUT: self.left.value = z_8 TRUE"
                                                   (builtin "One Step Simplification" (formula "52"))
                                                   (rule "false_right" (formula "52"))
                                                   (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "18"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "40"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                   (rule "add_literals" (formula "3") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "3") (term "1,0"))
                                                   (rule "add_literals" (formula "3") (term "0"))
                                                   (rule "leq_literals" (formula "3"))
                                                   (rule "closeFalse" (formula "3"))
                                                )
                                                (branch "CUT: self.left.value = z_8 FALSE"
                                                   (builtin "One Step Simplification" (formula "52"))
                                                   (rule "cut_direct" (formula "52") (term "0,0"))
                                                   (branch "CUT: contains(z_8, self.left.right.values) TRUE"
                                                      (builtin "One Step Simplification" (formula "53"))
                                                      (rule "false_right" (formula "53"))
                                                      (rule "allLeft" (formula "17") (inst "t=z_8"))
                                                      (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "17"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "17"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "3"))
                                                      (rule "andLeft" (formula "41"))
                                                      (rule "inEqSimp_homoInEq1" (formula "41"))
                                                      (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                      (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                      (rule "polySimp_addComm0" (formula "41") (term "0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                      (rule "add_literals" (formula "41") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "41") (term "1,0"))
                                                      (rule "add_zero_right" (formula "41") (term "0"))
                                                      (rule "leq_literals" (formula "41"))
                                                      (rule "closeFalse" (formula "41"))
                                                   )
                                                   (branch "CUT: contains(z_8, self.left.right.values) FALSE"
                                                      (builtin "One Step Simplification" (formula "53"))
                                                      (rule "notRight" (formula "53"))
                                                      (rule "allLeft" (formula "16") (inst "t=z_8"))
                                                      (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "16"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "16"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "3"))
                                                      (rule "andLeft" (formula "41"))
                                                      (rule "inEqSimp_homoInEq1" (formula "41"))
                                                      (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                      (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                      (rule "polySimp_addComm0" (formula "41") (term "0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                      (rule "add_literals" (formula "41") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "41") (term "1,0"))
                                                      (rule "add_zero_right" (formula "41") (term "0"))
                                                      (rule "leq_literals" (formula "41"))
                                                      (rule "closeFalse" (formula "41"))
                                                   )
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: self.right.value = result_1 FALSE"
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "inEqSimp_strengthen0" (formula "27") (ifseqformula "39"))
                                          (rule "inEqSimp_contradEq3" (formula "39") (ifseqformula "27"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0"))
                                          (rule "add_literals" (formula "39") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "39") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "39") (term "0,0"))
                                          (rule "qeq_literals" (formula "39") (term "0"))
                                          (builtin "One Step Simplification" (formula "39"))
                                          (rule "false_right" (formula "39"))
                                          (rule "cut_direct" (formula "46") (term "0,1"))
                                          (branch "CUT: self.value = z_8 TRUE"
                                             (builtin "One Step Simplification" (formula "47"))
                                             (rule "false_right" (formula "47"))
                                             (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "37") (term "0") (ifseqformula "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "2"))
                                             (rule "andLeft" (formula "37"))
                                             (rule "inEqSimp_homoInEq1" (formula "37"))
                                             (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                             (rule "add_literals" (formula "37") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "37") (term "1,0"))
                                             (rule "add_zero_right" (formula "37") (term "0"))
                                             (rule "leq_literals" (formula "37"))
                                             (rule "closeFalse" (formula "37"))
                                          )
                                          (branch "CUT: self.value = z_8 FALSE"
                                             (builtin "One Step Simplification" (formula "47"))
                                             (rule "cut_direct" (formula "16") (term "1"))
                                             (branch "CUT: contains(result_0, self.left.left.values) TRUE"
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "cut_direct" (formula "28") (term "1"))
                                                (branch "CUT: contains(result_1, self.right.left.values) TRUE"
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "true_left" (formula "29"))
                                                   (rule "allLeft" (formula "25") (inst "t=z_8"))
                                                   (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                                   (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "25") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "25"))
                                                   (rule "notLeft" (formula "25"))
                                                   (rule "replace_known_right" (formula "48") (term "0,1,0,0") (ifseqformula "39"))
                                                   (builtin "One Step Simplification" (formula "48"))
                                                   (rule "allLeft" (formula "26") (inst "t=z_8"))
                                                   (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                                                   (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "26") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "26") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "notLeft" (formula "26"))
                                                   (rule "replace_known_right" (formula "49") (term "0,0,0") (ifseqformula "39"))
                                                   (builtin "One Step Simplification" (formula "49"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0,0,0") (ifseqformula "2"))
                                                   (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "46"))
                                                   (builtin "One Step Simplification" (formula "11"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,1,0,0") (ifseqformula "2"))
                                                   (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "49"))
                                                   (builtin "One Step Simplification" (formula "12"))
                                                   (rule "cut_direct" (formula "51") (term "0,1,1"))
                                                   (branch "CUT: self.left.value = z_8 TRUE"
                                                      (builtin "One Step Simplification" (formula "52"))
                                                      (rule "false_right" (formula "52"))
                                                      (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "18"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                      (rule "add_literals" (formula "2") (term "0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "41"))
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "2"))
                                                      (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                      (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                      (rule "add_literals" (formula "2") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "2") (term "1,0"))
                                                      (rule "add_zero_right" (formula "2") (term "0"))
                                                      (rule "leq_literals" (formula "2"))
                                                      (rule "closeFalse" (formula "2"))
                                                   )
                                                   (branch "CUT: self.left.value = z_8 FALSE"
                                                      (builtin "One Step Simplification" (formula "52"))
                                                      (rule "cut_direct" (formula "52") (term "0,0"))
                                                      (branch "CUT: self.right.value = z_8 TRUE"
                                                         (builtin "One Step Simplification" (formula "53"))
                                                         (rule "false_right" (formula "53"))
                                                         (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "30") (term "0") (ifseqformula "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "30") (ifseqformula "2"))
                                                         (rule "andLeft" (formula "30"))
                                                         (rule "inEqSimp_homoInEq1" (formula "30"))
                                                         (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                                                         (rule "mul_literals" (formula "30") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "30") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                                                         (rule "add_literals" (formula "30") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "30") (term "0"))
                                                         (rule "add_literals" (formula "30") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "30") (term "1,0"))
                                                         (rule "add_literals" (formula "30") (term "0"))
                                                         (rule "leq_literals" (formula "30"))
                                                         (rule "closeFalse" (formula "30"))
                                                      )
                                                      (branch "CUT: self.right.value = z_8 FALSE"
                                                         (builtin "One Step Simplification" (formula "53"))
                                                         (rule "cut_direct" (formula "53") (term "0,1"))
                                                         (branch "CUT: contains(z_8, self.left.left.values) TRUE"
                                                            (builtin "One Step Simplification" (formula "54"))
                                                            (rule "false_right" (formula "54"))
                                                            (rule "allLeft" (formula "16") (inst "t=z_8"))
                                                            (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "16"))
                                                            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "16"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                            (rule "inEqSimp_contradInEq0" (formula "42") (ifseqformula "2"))
                                                            (rule "andLeft" (formula "42"))
                                                            (rule "inEqSimp_homoInEq1" (formula "42"))
                                                            (rule "polySimp_mulComm0" (formula "42") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "42") (term "1,0"))
                                                            (rule "mul_literals" (formula "42") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "42") (term "0"))
                                                            (rule "polySimp_addComm0" (formula "42") (term "0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "42") (term "0"))
                                                            (rule "add_literals" (formula "42") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "42") (term "1,0"))
                                                            (rule "add_zero_right" (formula "42") (term "0"))
                                                            (rule "leq_literals" (formula "42"))
                                                            (rule "closeFalse" (formula "42"))
                                                         )
                                                         (branch "CUT: contains(z_8, self.left.left.values) FALSE"
                                                            (builtin "One Step Simplification" (formula "54"))
                                                            (rule "notRight" (formula "54"))
                                                            (rule "allLeft" (formula "17") (inst "t=z_8"))
                                                            (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "17"))
                                                            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "17"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                            (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "42"))
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "inEqSimp_homoInEq1" (formula "2"))
                                                            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                            (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                            (rule "add_literals" (formula "2") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "2") (term "1,0"))
                                                            (rule "add_zero_right" (formula "2") (term "0"))
                                                            (rule "leq_literals" (formula "2"))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "CUT: contains(result_1, self.right.left.values) FALSE"
                                                   (builtin "One Step Simplification" (formula "28"))
                                                   (rule "allLeft" (formula "25") (inst "t=z_8"))
                                                   (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                                   (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "25") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "25") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "25"))
                                                   (rule "notLeft" (formula "25"))
                                                   (rule "replace_known_right" (formula "49") (term "0,1,0,0") (ifseqformula "39"))
                                                   (builtin "One Step Simplification" (formula "49"))
                                                   (rule "allLeft" (formula "26") (inst "t=z_8"))
                                                   (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                                                   (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "26") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "26") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "26"))
                                                   (rule "notLeft" (formula "26"))
                                                   (rule "replace_known_right" (formula "50") (term "0,0,0") (ifseqformula "39"))
                                                   (builtin "One Step Simplification" (formula "50"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,1,0,0") (ifseqformula "2"))
                                                   (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "49"))
                                                   (builtin "One Step Simplification" (formula "11"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,0,0,0") (ifseqformula "2"))
                                                   (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "48"))
                                                   (builtin "One Step Simplification" (formula "12"))
                                                   (rule "cut_direct" (formula "52") (term "0,1,1"))
                                                   (branch "CUT: self.left.value = z_8 TRUE"
                                                      (builtin "One Step Simplification" (formula "53"))
                                                      (rule "false_right" (formula "53"))
                                                      (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "18"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                      (rule "add_literals" (formula "2") (term "0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "41"))
                                                      (rule "inEqSimp_homoInEq1" (formula "41"))
                                                      (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                      (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                      (rule "polySimp_addComm0" (formula "41") (term "0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                      (rule "add_literals" (formula "41") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "41") (term "1,0"))
                                                      (rule "add_literals" (formula "41") (term "0"))
                                                      (rule "leq_literals" (formula "41"))
                                                      (rule "closeFalse" (formula "41"))
                                                   )
                                                   (branch "CUT: self.left.value = z_8 FALSE"
                                                      (builtin "One Step Simplification" (formula "53"))
                                                      (rule "cut_direct" (formula "53") (term "0,0"))
                                                      (branch "CUT: self.right.value = z_8 TRUE"
                                                         (builtin "One Step Simplification" (formula "54"))
                                                         (rule "false_right" (formula "54"))
                                                         (rule "applyEq" (formula "30") (term "0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "1"))
                                                         (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "30"))
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "inEqSimp_homoInEq1" (formula "2"))
                                                         (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                         (rule "add_literals" (formula "2") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                         (rule "add_literals" (formula "2") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "2") (term "1,0"))
                                                         (rule "add_zero_right" (formula "2") (term "0"))
                                                         (rule "leq_literals" (formula "2"))
                                                         (rule "closeFalse" (formula "2"))
                                                      )
                                                      (branch "CUT: self.right.value = z_8 FALSE"
                                                         (builtin "One Step Simplification" (formula "54"))
                                                         (rule "cut_direct" (formula "54") (term "0,0"))
                                                         (branch "CUT: contains(z_8, self.left.right.values) TRUE"
                                                            (builtin "One Step Simplification" (formula "55"))
                                                            (rule "false_right" (formula "55"))
                                                            (rule "allLeft" (formula "17") (inst "t=z_8"))
                                                            (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "17"))
                                                            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "17"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                            (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "42"))
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "inEqSimp_homoInEq1" (formula "2"))
                                                            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                            (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                            (rule "add_literals" (formula "2") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "2") (term "1,0"))
                                                            (rule "add_zero_right" (formula "2") (term "0"))
                                                            (rule "leq_literals" (formula "2"))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                         (branch "CUT: contains(z_8, self.left.right.values) FALSE"
                                                            (builtin "One Step Simplification" (formula "55"))
                                                            (rule "notRight" (formula "55"))
                                                            (rule "allLeft" (formula "16") (inst "t=z_8"))
                                                            (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "16"))
                                                            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "16"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                            (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "42"))
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "inEqSimp_homoInEq1" (formula "2"))
                                                            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                            (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                            (rule "add_literals" (formula "2") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "2") (term "1,0"))
                                                            (rule "add_literals" (formula "2") (term "0"))
                                                            (rule "leq_literals" (formula "2"))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: contains(result_0, self.left.left.values) FALSE"
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "allLeft" (formula "26") (inst "t=z_8"))
                                                (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                                                (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "26") (term "0,0,1"))
                                                (rule "leq_literals" (formula "26") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "26"))
                                                (rule "notLeft" (formula "26"))
                                                (rule "replace_known_right" (formula "49") (term "0,0,0,0") (ifseqformula "39"))
                                                (builtin "One Step Simplification" (formula "49"))
                                                (rule "cut_direct" (formula "28") (term "1"))
                                                (branch "CUT: contains(result_1, self.right.left.values) TRUE"
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "true_left" (formula "29"))
                                                   (rule "allLeft" (formula "25") (inst "t=z_8"))
                                                   (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                                   (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "25") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "25"))
                                                   (rule "notLeft" (formula "25"))
                                                   (rule "replace_known_right" (formula "50") (term "0,0,0") (ifseqformula "39"))
                                                   (builtin "One Step Simplification" (formula "50"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,0") (ifseqformula "2"))
                                                   (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "47"))
                                                   (builtin "One Step Simplification" (formula "10"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "2"))
                                                   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "cut_direct" (formula "52") (term "0,0"))
                                                   (branch "CUT: self.right.value = z_8 TRUE"
                                                      (builtin "One Step Simplification" (formula "53"))
                                                      (rule "false_right" (formula "53"))
                                                      (rule "applyEq" (formula "30") (term "0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "30"))
                                                      (rule "andLeft" (formula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "3"))
                                                      (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                      (rule "add_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                      (rule "add_literals" (formula "3") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "3") (term "1,0"))
                                                      (rule "add_literals" (formula "3") (term "0"))
                                                      (rule "leq_literals" (formula "3"))
                                                      (rule "closeFalse" (formula "3"))
                                                   )
                                                   (branch "CUT: self.right.value = z_8 FALSE"
                                                      (builtin "One Step Simplification" (formula "53"))
                                                      (rule "cut_direct" (formula "53") (term "0,1"))
                                                      (branch "CUT: self.left.value = z_8 TRUE"
                                                         (builtin "One Step Simplification" (formula "54"))
                                                         (rule "false_right" (formula "54"))
                                                         (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "18"))
                                                         (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                         (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                         (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                         (rule "add_literals" (formula "3") (term "0,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                         (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "3"))
                                                         (rule "andLeft" (formula "41"))
                                                         (rule "inEqSimp_homoInEq1" (formula "41"))
                                                         (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                         (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                         (rule "polySimp_addComm0" (formula "41") (term "0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                         (rule "add_literals" (formula "41") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "41") (term "1,0"))
                                                         (rule "add_zero_right" (formula "41") (term "0"))
                                                         (rule "leq_literals" (formula "41"))
                                                         (rule "closeFalse" (formula "41"))
                                                      )
                                                      (branch "CUT: self.left.value = z_8 FALSE"
                                                         (builtin "One Step Simplification" (formula "54"))
                                                         (rule "cut_direct" (formula "54") (term "0,1"))
                                                         (branch "CUT: contains(z_8, self.left.left.values) TRUE"
                                                            (builtin "One Step Simplification" (formula "55"))
                                                            (rule "false_right" (formula "55"))
                                                            (rule "allLeft" (formula "16") (inst "t=z_8"))
                                                            (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "16"))
                                                            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "16"))
                                                            (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                            (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                            (rule "inEqSimp_contradInEq0" (formula "42") (ifseqformula "3"))
                                                            (rule "andLeft" (formula "42"))
                                                            (rule "inEqSimp_homoInEq1" (formula "42"))
                                                            (rule "polySimp_mulComm0" (formula "42") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "42") (term "1,0"))
                                                            (rule "mul_literals" (formula "42") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "42") (term "0"))
                                                            (rule "polySimp_addComm0" (formula "42") (term "0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "42") (term "0"))
                                                            (rule "add_literals" (formula "42") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "42") (term "1,0"))
                                                            (rule "add_zero_right" (formula "42") (term "0"))
                                                            (rule "leq_literals" (formula "42"))
                                                            (rule "closeFalse" (formula "42"))
                                                         )
                                                         (branch "CUT: contains(z_8, self.left.left.values) FALSE"
                                                            (builtin "One Step Simplification" (formula "55"))
                                                            (rule "notRight" (formula "55"))
                                                            (rule "allLeft" (formula "17") (inst "t=z_8"))
                                                            (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "17"))
                                                            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "17"))
                                                            (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                            (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                            (rule "inEqSimp_contradInEq0" (formula "42") (ifseqformula "3"))
                                                            (rule "andLeft" (formula "42"))
                                                            (rule "inEqSimp_homoInEq1" (formula "42"))
                                                            (rule "polySimp_mulComm0" (formula "42") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "42") (term "1,0"))
                                                            (rule "mul_literals" (formula "42") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "42") (term "0"))
                                                            (rule "polySimp_addComm0" (formula "42") (term "0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "42") (term "0"))
                                                            (rule "add_literals" (formula "42") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "42") (term "1,0"))
                                                            (rule "add_literals" (formula "42") (term "0"))
                                                            (rule "leq_literals" (formula "42"))
                                                            (rule "closeFalse" (formula "42"))
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "CUT: contains(result_1, self.right.left.values) FALSE"
                                                   (builtin "One Step Simplification" (formula "28"))
                                                   (rule "allLeft" (formula "25") (inst "t=z_8"))
                                                   (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                                   (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "25") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "25"))
                                                   (rule "notLeft" (formula "25"))
                                                   (rule "replace_known_right" (formula "51") (term "0,0,0") (ifseqformula "39"))
                                                   (builtin "One Step Simplification" (formula "51"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0,0,0") (ifseqformula "2"))
                                                   (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "48"))
                                                   (builtin "One Step Simplification" (formula "11"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,1,0,0") (ifseqformula "2"))
                                                   (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "51"))
                                                   (builtin "One Step Simplification" (formula "12"))
                                                   (rule "cut_direct" (formula "53") (term "0,0"))
                                                   (branch "CUT: self.right.value = z_8 TRUE"
                                                      (builtin "One Step Simplification" (formula "54"))
                                                      (rule "false_right" (formula "54"))
                                                      (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "30") (term "0") (ifseqformula "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "30") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "30"))
                                                      (rule "inEqSimp_homoInEq1" (formula "30"))
                                                      (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                                                      (rule "mul_literals" (formula "30") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "30") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                                                      (rule "add_literals" (formula "30") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "30") (term "0"))
                                                      (rule "add_literals" (formula "30") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "30") (term "1,0"))
                                                      (rule "add_zero_right" (formula "30") (term "0"))
                                                      (rule "leq_literals" (formula "30"))
                                                      (rule "closeFalse" (formula "30"))
                                                   )
                                                   (branch "CUT: self.right.value = z_8 FALSE"
                                                      (builtin "One Step Simplification" (formula "54"))
                                                      (rule "cut_direct" (formula "54") (term "0,1"))
                                                      (branch "CUT: self.left.value = z_8 TRUE"
                                                         (builtin "One Step Simplification" (formula "55"))
                                                         (rule "false_right" (formula "55"))
                                                         (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "18"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                         (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                         (rule "add_literals" (formula "2") (term "0,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                         (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "2"))
                                                         (rule "andLeft" (formula "41"))
                                                         (rule "inEqSimp_homoInEq1" (formula "41"))
                                                         (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                         (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                         (rule "polySimp_addComm0" (formula "41") (term "0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                         (rule "add_literals" (formula "41") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "41") (term "1,0"))
                                                         (rule "add_zero_right" (formula "41") (term "0"))
                                                         (rule "leq_literals" (formula "41"))
                                                         (rule "closeFalse" (formula "41"))
                                                      )
                                                      (branch "CUT: self.left.value = z_8 FALSE"
                                                         (builtin "One Step Simplification" (formula "55"))
                                                         (rule "cut_direct" (formula "55") (term "0,0"))
                                                         (branch "CUT: contains(z_8, self.left.right.values) TRUE"
                                                            (builtin "One Step Simplification" (formula "56"))
                                                            (rule "false_right" (formula "56"))
                                                            (rule "allLeft" (formula "17") (inst "t=z_8"))
                                                            (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "17"))
                                                            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "17"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                            (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "42"))
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "inEqSimp_homoInEq1" (formula "2"))
                                                            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                            (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                            (rule "add_literals" (formula "2") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "2") (term "1,0"))
                                                            (rule "add_literals" (formula "2") (term "0"))
                                                            (rule "leq_literals" (formula "2"))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                         (branch "CUT: contains(z_8, self.left.right.values) FALSE"
                                                            (builtin "One Step Simplification" (formula "56"))
                                                            (rule "notRight" (formula "56"))
                                                            (rule "allLeft" (formula "16") (inst "t=z_8"))
                                                            (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "16"))
                                                            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "16"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                            (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "42"))
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "inEqSimp_homoInEq1" (formula "2"))
                                                            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                            (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                            (rule "add_literals" (formula "2") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "2") (term "1,0"))
                                                            (rule "add_literals" (formula "2") (term "0"))
                                                            (rule "leq_literals" (formula "2"))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: result_2 = result_1 FALSE"
                                    (builtin "One Step Simplification" (formula "38"))
                                    (rule "inEqSimp_strengthen1" (formula "37") (ifseqformula "39"))
                                    (rule "inEqSimp_contradEq7" (formula "39") (ifseqformula "37"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0"))
                                    (rule "add_literals" (formula "39") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "39") (term "1,0,0"))
                                    (rule "add_literals" (formula "39") (term "0,0"))
                                    (rule "leq_literals" (formula "39") (term "0"))
                                    (builtin "One Step Simplification" (formula "39"))
                                    (rule "false_right" (formula "39"))
                                    (rule "cut_direct" (formula "15") (term "1"))
                                    (branch "CUT: self.left.value = result_0 TRUE"
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "applyEq" (formula "46") (term "0,1,1,0,1") (ifseqformula "15"))
                                       (rule "eqSymm" (formula "46") (term "1,1,0,1"))
                                       (rule "applyEq" (formula "22") (term "0,1,0") (ifseqformula "15"))
                                       (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
                                       (rule "inEqSimp_homoInEq0" (formula "14"))
                                       (rule "polySimp_pullOutFactor1" (formula "14") (term "0"))
                                       (rule "add_literals" (formula "14") (term "1,0"))
                                       (rule "times_zero_1" (formula "14") (term "0"))
                                       (rule "qeq_literals" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "applyEq" (formula "45") (term "1,0,1,1,0,0,0,0") (ifseqformula "14"))
                                       (rule "cut_direct" (formula "26") (term "1"))
                                       (branch "CUT: self.right.value = result_1 TRUE"
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "true_left" (formula "27"))
                                          (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                                          (rule "inEqSimp_homoInEq0" (formula "25"))
                                          (rule "polySimp_pullOutFactor1" (formula "25") (term "0"))
                                          (rule "add_literals" (formula "25") (term "1,0"))
                                          (rule "times_zero_1" (formula "25") (term "0"))
                                          (rule "qeq_literals" (formula "25"))
                                          (rule "true_left" (formula "25"))
                                          (rule "applyEq" (formula "44") (term "0,1,0,0,1") (ifseqformula "25"))
                                          (rule "eqSymm" (formula "44") (term "1,0,0,1"))
                                          (rule "applyEq" (formula "44") (term "1,0,1,0,0,0,0,0") (ifseqformula "25"))
                                          (rule "inEqSimp_contradEq7" (formula "44") (term "1,0,0,1") (ifseqformula "35"))
                                          (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0,1,0,0,1"))
                                          (rule "add_literals" (formula "44") (term "1,1,0,0,1,0,0,1"))
                                          (rule "times_zero_1" (formula "44") (term "1,0,0,1,0,0,1"))
                                          (rule "add_zero_right" (formula "44") (term "0,0,1,0,0,1"))
                                          (rule "leq_literals" (formula "44") (term "0,1,0,0,1"))
                                          (builtin "One Step Simplification" (formula "44"))
                                          (rule "cut_direct" (formula "36") (term "1"))
                                          (branch "CUT: result_2 = result_0 TRUE"
                                             (builtin "One Step Simplification" (formula "37"))
                                             (rule "true_left" (formula "37"))
                                             (rule "replace_known_left" (formula "44") (term "1,1,0,1") (ifseqformula "36"))
                                             (builtin "One Step Simplification" (formula "44"))
                                             (rule "allRight" (formula "44") (inst "sk=z_7"))
                                             (rule "orRight" (formula "44"))
                                             (rule "eqSymm" (formula "44") (term "0,1"))
                                             (rule "inEqSimp_leqRight" (formula "45"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "applyEq" (formula "34") (term "1") (ifseqformula "37"))
                                             (rule "applyEq" (formula "36") (term "0") (ifseqformula "37"))
                                             (rule "inEqSimp_homoInEq1" (formula "36"))
                                             (rule "polySimp_addComm1" (formula "36") (term "0"))
                                             (rule "applyEq" (formula "35") (term "0") (ifseqformula "37"))
                                             (rule "inEqSimp_homoInEq1" (formula "35"))
                                             (rule "polySimp_pullOutFactor1" (formula "35") (term "0"))
                                             (rule "add_literals" (formula "35") (term "1,0"))
                                             (rule "times_zero_1" (formula "35") (term "0"))
                                             (rule "leq_literals" (formula "35"))
                                             (rule "true_left" (formula "35"))
                                             (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "36"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "35"))
                                             (rule "polySimp_mulComm0" (formula "35") (term "1"))
                                             (rule "polySimp_rightDist" (formula "35") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "35") (term "1,1"))
                                             (rule "mul_literals" (formula "35") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "35") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                             (rule "inEqSimp_contradEq7" (formula "44") (term "0,1,1,0") (ifseqformula "1"))
                                             (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,1,1,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0,0,1,1,0"))
                                             (rule "add_literals" (formula "44") (term "1,1,0,0,0,1,1,0"))
                                             (rule "times_zero_1" (formula "44") (term "1,0,0,0,1,1,0"))
                                             (rule "add_zero_right" (formula "44") (term "0,0,0,1,1,0"))
                                             (rule "leq_literals" (formula "44") (term "0,0,1,1,0"))
                                             (builtin "One Step Simplification" (formula "44"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,1,0,0") (ifseqformula "2"))
                                             (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "11"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,0") (ifseqformula "2"))
                                             (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "43"))
                                             (builtin "One Step Simplification" (formula "10"))
                                             (rule "allLeft" (formula "16") (inst "t=z_7"))
                                             (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                                             (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "16") (term "0,0,1"))
                                             (rule "leq_literals" (formula "16") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "16"))
                                             (rule "notLeft" (formula "16"))
                                             (rule "replace_known_right" (formula "47") (term "0,0,1,0") (ifseqformula "39"))
                                             (builtin "One Step Simplification" (formula "47"))
                                             (rule "allLeft" (formula "15") (inst "t=z_7"))
                                             (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                             (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "15") (term "0,0,1"))
                                             (rule "leq_literals" (formula "15") (term "0,1"))
                                             (builtin "One Step Simplification" (formula "15"))
                                             (rule "notLeft" (formula "15"))
                                             (rule "replace_known_right" (formula "48") (term "0,1,0") (ifseqformula "39"))
                                             (builtin "One Step Simplification" (formula "48"))
                                             (rule "cut_direct" (formula "48") (term "0,1,0"))
                                             (branch "CUT: z_7 = result_1 TRUE"
                                                (builtin "One Step Simplification" (formula "49"))
                                                (rule "false_right" (formula "49"))
                                                (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "40") (term "0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "41") (term "0") (ifseqformula "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "38") (ifseqformula "2"))
                                                (rule "andLeft" (formula "38"))
                                                (rule "inEqSimp_homoInEq1" (formula "38"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "38") (term "1,0"))
                                                (rule "mul_literals" (formula "38") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "38") (term "0"))
                                                (rule "polySimp_addComm1" (formula "38") (term "0,0"))
                                                (rule "add_literals" (formula "38") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "38") (term "0"))
                                                (rule "add_literals" (formula "38") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "38") (term "1,0"))
                                                (rule "add_zero_right" (formula "38") (term "0"))
                                                (rule "leq_literals" (formula "38"))
                                                (rule "closeFalse" (formula "38"))
                                             )
                                             (branch "CUT: z_7 = result_1 FALSE"
                                                (builtin "One Step Simplification" (formula "49"))
                                                (rule "cut_direct" (formula "49") (term "0,1"))
                                                (branch "CUT: self.value = z_7 TRUE"
                                                   (builtin "One Step Simplification" (formula "50"))
                                                   (rule "false_right" (formula "50"))
                                                   (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "37") (term "0") (ifseqformula "1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "37"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "2"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                   (rule "add_literals" (formula "2") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "2") (term "1,0"))
                                                   (rule "add_literals" (formula "2") (term "0"))
                                                   (rule "leq_literals" (formula "2"))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                                (branch "CUT: self.value = z_7 FALSE"
                                                   (builtin "One Step Simplification" (formula "50"))
                                                   (rule "cut_direct" (formula "50") (term "0,0"))
                                                   (branch "CUT: contains(z_7, self.right.right.values) TRUE"
                                                      (builtin "One Step Simplification" (formula "51"))
                                                      (rule "false_right" (formula "51"))
                                                      (rule "allLeft" (formula "28") (inst "t=z_7"))
                                                      (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_strengthen0" (formula "28") (ifseqformula "50"))
                                                      (rule "inEqSimp_contradEq3" (formula "50") (ifseqformula "28"))
                                                      (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "50") (term "0,0"))
                                                      (rule "add_literals" (formula "50") (term "1,1,0,0"))
                                                      (rule "times_zero_1" (formula "50") (term "1,0,0"))
                                                      (rule "add_literals" (formula "50") (term "0,0"))
                                                      (rule "qeq_literals" (formula "50") (term "0"))
                                                      (builtin "One Step Simplification" (formula "50"))
                                                      (rule "false_right" (formula "50"))
                                                      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "28"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                      (rule "add_literals" (formula "2") (term "0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                      (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                      (rule "mul_literals" (formula "2") (term "0,1"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                      (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "40"))
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "2"))
                                                      (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                      (rule "add_literals" (formula "2") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                      (rule "add_literals" (formula "2") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "2") (term "1,0"))
                                                      (rule "add_zero_right" (formula "2") (term "0"))
                                                      (rule "leq_literals" (formula "2"))
                                                      (rule "closeFalse" (formula "2"))
                                                   )
                                                   (branch "CUT: contains(z_7, self.right.right.values) FALSE"
                                                      (builtin "One Step Simplification" (formula "51"))
                                                      (rule "notRight" (formula "51"))
                                                      (rule "allLeft" (formula "27") (inst "t=z_7"))
                                                      (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "27"))
                                                      (rule "inEqSimp_strengthen0" (formula "27") (ifseqformula "50"))
                                                      (rule "inEqSimp_contradEq3" (formula "50") (ifseqformula "27"))
                                                      (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "50") (term "0,0"))
                                                      (rule "add_literals" (formula "50") (term "1,1,0,0"))
                                                      (rule "times_zero_1" (formula "50") (term "1,0,0"))
                                                      (rule "add_literals" (formula "50") (term "0,0"))
                                                      (rule "qeq_literals" (formula "50") (term "0"))
                                                      (builtin "One Step Simplification" (formula "50"))
                                                      (rule "false_right" (formula "50"))
                                                      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "27"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                      (rule "add_literals" (formula "2") (term "0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                      (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                      (rule "mul_literals" (formula "2") (term "0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                      (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "40"))
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "2"))
                                                      (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                      (rule "add_literals" (formula "2") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                      (rule "add_literals" (formula "2") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "2") (term "1,0"))
                                                      (rule "add_literals" (formula "2") (term "0"))
                                                      (rule "leq_literals" (formula "2"))
                                                      (rule "closeFalse" (formula "2"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: result_2 = result_0 FALSE"
                                             (builtin "One Step Simplification" (formula "36"))
                                             (rule "replace_known_right" (formula "45") (term "1,1,0,1") (ifseqformula "37"))
                                             (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "36")))
                                             (rule "allRight" (formula "45") (inst "sk=z_6"))
                                             (rule "orRight" (formula "45"))
                                             (rule "eqSymm" (formula "45") (term "0,1"))
                                             (rule "inEqSimp_leqRight" (formula "46"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "applyEq" (formula "46") (term "0,0,1") (ifseqformula "37"))
                                             (rule "eqSymm" (formula "46") (term "0,1"))
                                             (rule "applyEq" (formula "11") (term "0,1,0") (ifseqformula "37"))
                                             (rule "applyEq" (formula "34") (term "0") (ifseqformula "37"))
                                             (rule "inEqSimp_homoInEq0" (formula "34"))
                                             (rule "polySimp_pullOutFactor1" (formula "34") (term "0"))
                                             (rule "add_literals" (formula "34") (term "1,0"))
                                             (rule "times_zero_1" (formula "34") (term "0"))
                                             (rule "qeq_literals" (formula "34"))
                                             (rule "true_left" (formula "34"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                             (rule "inEqSimp_contradEq7" (formula "45") (term "0,1") (ifseqformula "1"))
                                             (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "45") (term "0,0,0,1"))
                                             (rule "add_literals" (formula "45") (term "1,1,0,0,0,1"))
                                             (rule "times_zero_1" (formula "45") (term "1,0,0,0,1"))
                                             (rule "add_zero_right" (formula "45") (term "0,0,0,1"))
                                             (rule "leq_literals" (formula "45") (term "0,0,1"))
                                             (builtin "One Step Simplification" (formula "45"))
                                             (rule "inEqSimp_strengthen1" (formula "34") (ifseqformula "37"))
                                             (rule "inEqSimp_contradEq7" (formula "37") (ifseqformula "34"))
                                             (rule "polySimp_mulComm0" (formula "37") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0"))
                                             (rule "add_literals" (formula "37") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "37") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "37") (term "0,0"))
                                             (rule "leq_literals" (formula "37") (term "0"))
                                             (builtin "One Step Simplification" (formula "37"))
                                             (rule "false_right" (formula "37"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,1,0,0") (ifseqformula "2"))
                                             (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "44"))
                                             (builtin "One Step Simplification" (formula "11"))
                                             (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,0,0,0") (ifseqformula "2"))
                                             (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "43"))
                                             (builtin "One Step Simplification" (formula "12"))
                                             (rule "cut_direct" (formula "46") (term "0,1,0"))
                                             (branch "CUT: z_6 = result_1 TRUE"
                                                (builtin "One Step Simplification" (formula "47"))
                                                (rule "false_right" (formula "47"))
                                                (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "2"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                (rule "mul_literals" (formula "2") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "38"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "2"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                (rule "add_literals" (formula "2") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                (rule "add_literals" (formula "2") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "2") (term "1,0"))
                                                (rule "add_zero_right" (formula "2") (term "0"))
                                                (rule "leq_literals" (formula "2"))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: z_6 = result_1 FALSE"
                                                (builtin "One Step Simplification" (formula "47"))
                                                (rule "cut_direct" (formula "47") (term "0,1,1"))
                                                (branch "CUT: z_6 = result_0 TRUE"
                                                   (builtin "One Step Simplification" (formula "48"))
                                                   (rule "false_right" (formula "48"))
                                                   (rule "applyEq" (formula "47") (term "0") (ifseqformula "1"))
                                                   (rule "eqSymm" (formula "47"))
                                                   (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "2"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                                   (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                   (rule "mul_literals" (formula "2") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                   (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "37") (ifseqformula "2"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37"))
                                                   (rule "polySimp_mulComm0" (formula "37") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "37") (term "1,0"))
                                                   (rule "mul_literals" (formula "37") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "37") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "37") (term "0,0"))
                                                   (rule "add_literals" (formula "37") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0"))
                                                   (rule "add_zero_right" (formula "37") (term "0"))
                                                   (rule "leq_literals" (formula "37"))
                                                   (rule "closeFalse" (formula "37"))
                                                )
                                                (branch "CUT: z_6 = result_0 FALSE"
                                                   (builtin "One Step Simplification" (formula "48"))
                                                   (rule "cut_direct" (formula "48") (term "0,0,0"))
                                                   (branch "CUT: contains(z_6, self.right.right.values) TRUE"
                                                      (builtin "One Step Simplification" (formula "49"))
                                                      (rule "false_right" (formula "49"))
                                                      (rule "allLeft" (formula "28") (inst "t=z_6"))
                                                      (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "1"))
                                                      (builtin "One Step Simplification" (formula "28"))
                                                      (rule "inEqSimp_strengthen0" (formula "28") (ifseqformula "48"))
                                                      (rule "inEqSimp_contradEq3" (formula "48") (ifseqformula "28"))
                                                      (rule "polySimp_mulComm0" (formula "48") (term "1,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "48") (term "0,0"))
                                                      (rule "add_literals" (formula "48") (term "1,1,0,0"))
                                                      (rule "times_zero_1" (formula "48") (term "1,0,0"))
                                                      (rule "add_zero_right" (formula "48") (term "0,0"))
                                                      (rule "qeq_literals" (formula "48") (term "0"))
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "false_right" (formula "48"))
                                                      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "28"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                      (rule "add_literals" (formula "2") (term "0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "40"))
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "2"))
                                                      (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                      (rule "add_literals" (formula "2") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                      (rule "add_literals" (formula "2") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "2") (term "1,0"))
                                                      (rule "add_literals" (formula "2") (term "0"))
                                                      (rule "leq_literals" (formula "2"))
                                                      (rule "closeFalse" (formula "2"))
                                                   )
                                                   (branch "CUT: contains(z_6, self.right.right.values) FALSE"
                                                      (builtin "One Step Simplification" (formula "49"))
                                                      (rule "cut_direct" (formula "49") (term "0,0,1"))
                                                      (branch "CUT: contains(z_6, self.left.right.values) TRUE"
                                                         (builtin "One Step Simplification" (formula "50"))
                                                         (rule "false_right" (formula "50"))
                                                         (rule "allLeft" (formula "17") (inst "t=z_6"))
                                                         (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "17"))
                                                         (rule "inEqSimp_strengthen0" (formula "17") (ifseqformula "49"))
                                                         (rule "inEqSimp_contradEq3" (formula "49") (ifseqformula "17"))
                                                         (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "49") (term "0,0"))
                                                         (rule "add_literals" (formula "49") (term "1,1,0,0"))
                                                         (rule "times_zero_1" (formula "49") (term "1,0,0"))
                                                         (rule "add_zero_right" (formula "49") (term "0,0"))
                                                         (rule "qeq_literals" (formula "49") (term "0"))
                                                         (builtin "One Step Simplification" (formula "49"))
                                                         (rule "false_right" (formula "49"))
                                                         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "17"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                         (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                         (rule "add_literals" (formula "2") (term "0,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                         (rule "inEqSimp_contradInEq0" (formula "39") (ifseqformula "2"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39"))
                                                         (rule "polySimp_mulComm0" (formula "39") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "39") (term "1,0"))
                                                         (rule "mul_literals" (formula "39") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "39") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "39") (term "0,0"))
                                                         (rule "add_literals" (formula "39") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0"))
                                                         (rule "add_zero_right" (formula "39") (term "0"))
                                                         (rule "leq_literals" (formula "39"))
                                                         (rule "closeFalse" (formula "39"))
                                                      )
                                                      (branch "CUT: contains(z_6, self.left.right.values) FALSE"
                                                         (builtin "One Step Simplification" (formula "50"))
                                                         (rule "cut_direct" (formula "50") (term "0,0"))
                                                         (branch "CUT: contains(z_6, self.right.left.values) TRUE"
                                                            (builtin "One Step Simplification" (formula "51"))
                                                            (rule "false_right" (formula "51"))
                                                            (rule "allLeft" (formula "27") (inst "t=z_6"))
                                                            (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "27"))
                                                            (rule "inEqSimp_strengthen0" (formula "27") (ifseqformula "48"))
                                                            (rule "inEqSimp_contradEq3" (formula "48") (ifseqformula "27"))
                                                            (rule "polySimp_mulComm0" (formula "48") (term "1,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "48") (term "0,0"))
                                                            (rule "add_literals" (formula "48") (term "1,1,0,0"))
                                                            (rule "times_zero_1" (formula "48") (term "1,0,0"))
                                                            (rule "add_zero_right" (formula "48") (term "0,0"))
                                                            (rule "qeq_literals" (formula "48") (term "0"))
                                                            (builtin "One Step Simplification" (formula "48"))
                                                            (rule "false_right" (formula "48"))
                                                            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "27"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                            (rule "add_literals" (formula "2") (term "0,0,0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                            (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "40"))
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "inEqSimp_homoInEq1" (formula "2"))
                                                            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                            (rule "add_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                            (rule "add_literals" (formula "2") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "2") (term "1,0"))
                                                            (rule "add_zero_right" (formula "2") (term "0"))
                                                            (rule "leq_literals" (formula "2"))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                         (branch "CUT: contains(z_6, self.right.left.values) FALSE"
                                                            (builtin "One Step Simplification" (formula "51"))
                                                            (rule "notRight" (formula "51"))
                                                            (rule "allLeft" (formula "16") (inst "t=z_6"))
                                                            (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "16"))
                                                            (rule "inEqSimp_strengthen0" (formula "16") (ifseqformula "49"))
                                                            (rule "inEqSimp_contradEq3" (formula "49") (ifseqformula "16"))
                                                            (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "49") (term "0,0"))
                                                            (rule "add_literals" (formula "49") (term "1,1,0,0"))
                                                            (rule "times_zero_1" (formula "49") (term "1,0,0"))
                                                            (rule "add_literals" (formula "49") (term "0,0"))
                                                            (rule "qeq_literals" (formula "49") (term "0"))
                                                            (builtin "One Step Simplification" (formula "49"))
                                                            (rule "false_right" (formula "49"))
                                                            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "16"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                            (rule "add_literals" (formula "2") (term "0,0,0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                            (rule "inEqSimp_contradInEq0" (formula "39") (ifseqformula "2"))
                                                            (rule "andLeft" (formula "39"))
                                                            (rule "inEqSimp_homoInEq1" (formula "39"))
                                                            (rule "polySimp_mulComm0" (formula "39") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "39") (term "1,0"))
                                                            (rule "mul_literals" (formula "39") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "39") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "39") (term "0,0"))
                                                            (rule "add_literals" (formula "39") (term "0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                            (rule "add_literals" (formula "39") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "39") (term "1,0"))
                                                            (rule "add_literals" (formula "39") (term "0"))
                                                            (rule "leq_literals" (formula "39"))
                                                            (rule "closeFalse" (formula "39"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: self.right.value = result_1 FALSE"
                                          (builtin "One Step Simplification" (formula "26"))
                                          (rule "inEqSimp_strengthen0" (formula "25") (ifseqformula "38"))
                                          (rule "inEqSimp_contradEq3" (formula "38") (ifseqformula "25"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0"))
                                          (rule "add_literals" (formula "38") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "38") (term "0,0"))
                                          (rule "qeq_literals" (formula "38") (term "0"))
                                          (builtin "One Step Simplification" (formula "38"))
                                          (rule "false_right" (formula "38"))
                                          (rule "cut_direct" (formula "37") (term "1"))
                                          (branch "CUT: result_2 = result_0 TRUE"
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "true_left" (formula "38"))
                                             (rule "replace_known_left" (formula "45") (term "1,1,0,1") (ifseqformula "37"))
                                             (builtin "One Step Simplification" (formula "45"))
                                             (rule "allRight" (formula "45") (inst "sk=z_5"))
                                             (rule "orRight" (formula "45"))
                                             (rule "eqSymm" (formula "45") (term "0,1"))
                                             (rule "eqSymm" (formula "45") (term "0,1,0,0"))
                                             (rule "inEqSimp_leqRight" (formula "46"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "applyEq" (formula "37") (term "0") (ifseqformula "38"))
                                             (rule "inEqSimp_homoInEq1" (formula "37"))
                                             (rule "polySimp_addComm1" (formula "37") (term "0"))
                                             (rule "applyEq" (formula "35") (term "1") (ifseqformula "38"))
                                             (rule "applyEq" (formula "36") (term "0") (ifseqformula "38"))
                                             (rule "inEqSimp_homoInEq1" (formula "36"))
                                             (rule "polySimp_pullOutFactor1" (formula "36") (term "0"))
                                             (rule "add_literals" (formula "36") (term "1,0"))
                                             (rule "times_zero_1" (formula "36") (term "0"))
                                             (rule "leq_literals" (formula "36"))
                                             (rule "true_left" (formula "36"))
                                             (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "37"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "36"))
                                             (rule "polySimp_mulComm0" (formula "36") (term "1"))
                                             (rule "polySimp_rightDist" (formula "36") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "36") (term "1,1"))
                                             (rule "mul_literals" (formula "36") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "36") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                             (rule "inEqSimp_contradEq7" (formula "45") (term "0,1,1,0") (ifseqformula "1"))
                                             (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,1,1,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "45") (term "0,0,0,1,1,0"))
                                             (rule "add_literals" (formula "45") (term "1,1,0,0,0,1,1,0"))
                                             (rule "times_zero_1" (formula "45") (term "1,0,0,0,1,1,0"))
                                             (rule "add_zero_right" (formula "45") (term "0,0,0,1,1,0"))
                                             (rule "leq_literals" (formula "45") (term "0,0,1,1,0"))
                                             (builtin "One Step Simplification" (formula "45"))
                                             (rule "cut_direct" (formula "27") (term "0"))
                                             (branch "CUT: contains(result_1, self.right.right.values) TRUE"
                                                (builtin "One Step Simplification" (formula "28"))
                                                (rule "true_left" (formula "28"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0,0,0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "43"))
                                                (builtin "One Step Simplification" (formula "11"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,1,0,0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "46"))
                                                (builtin "One Step Simplification" (formula "12"))
                                                (rule "allLeft" (formula "16") (inst "t=z_5"))
                                                (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                                                (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "16") (term "0,0,1"))
                                                (rule "leq_literals" (formula "16") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "notLeft" (formula "16"))
                                                (rule "replace_known_right" (formula "48") (term "0,0,1,0") (ifseqformula "40"))
                                                (builtin "One Step Simplification" (formula "48"))
                                                (rule "allLeft" (formula "15") (inst "t=z_5"))
                                                (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                                (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "15") (term "0,0,1"))
                                                (rule "leq_literals" (formula "15") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "notLeft" (formula "15"))
                                                (rule "replace_known_right" (formula "49") (term "0,1,0") (ifseqformula "40"))
                                                (builtin "One Step Simplification" (formula "49"))
                                                (rule "cut_direct" (formula "49") (term "0,1"))
                                                (branch "CUT: self.value = z_5 TRUE"
                                                   (builtin "One Step Simplification" (formula "50"))
                                                   (rule "false_right" (formula "50"))
                                                   (rule "applyEq" (formula "38") (term "0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "38") (ifseqformula "2"))
                                                   (rule "andLeft" (formula "38"))
                                                   (rule "inEqSimp_homoInEq1" (formula "38"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "38") (term "0"))
                                                   (rule "add_literals" (formula "38") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "38") (term "1,0"))
                                                   (rule "add_literals" (formula "38") (term "0"))
                                                   (rule "leq_literals" (formula "38"))
                                                   (rule "closeFalse" (formula "38"))
                                                )
                                                (branch "CUT: self.value = z_5 FALSE"
                                                   (builtin "One Step Simplification" (formula "50"))
                                                   (rule "cut_direct" (formula "50") (term "0,1"))
                                                   (branch "CUT: self.right.value = z_5 TRUE"
                                                      (builtin "One Step Simplification" (formula "51"))
                                                      (rule "false_right" (formula "51"))
                                                      (rule "applyEq" (formula "29") (term "0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "36") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "29"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                      (rule "add_literals" (formula "2") (term "0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                      (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                      (rule "mul_literals" (formula "2") (term "0,1"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "40") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "40"))
                                                      (rule "inEqSimp_homoInEq1" (formula "40"))
                                                      (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "40") (term "1,0"))
                                                      (rule "mul_literals" (formula "40") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "40") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                                                      (rule "add_literals" (formula "40") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "40") (term "0"))
                                                      (rule "add_literals" (formula "40") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "40") (term "1,0"))
                                                      (rule "add_zero_right" (formula "40") (term "0"))
                                                      (rule "leq_literals" (formula "40"))
                                                      (rule "closeFalse" (formula "40"))
                                                   )
                                                   (branch "CUT: self.right.value = z_5 FALSE"
                                                      (builtin "One Step Simplification" (formula "51"))
                                                      (rule "cut_direct" (formula "51") (term "0,1"))
                                                      (branch "CUT: contains(z_5, self.right.left.values) TRUE"
                                                         (builtin "One Step Simplification" (formula "52"))
                                                         (rule "false_right" (formula "52"))
                                                         (rule "allLeft" (formula "27") (inst "t=z_5"))
                                                         (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "27"))
                                                         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "27"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                         (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                         (rule "mul_literals" (formula "2") (term "0,1"))
                                                         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "41") (ifseqformula "2"))
                                                         (rule "andLeft" (formula "41"))
                                                         (rule "inEqSimp_homoInEq1" (formula "41"))
                                                         (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                         (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                         (rule "add_literals" (formula "41") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                         (rule "add_literals" (formula "41") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "41") (term "1,0"))
                                                         (rule "add_literals" (formula "41") (term "0"))
                                                         (rule "leq_literals" (formula "41"))
                                                         (rule "closeFalse" (formula "41"))
                                                      )
                                                      (branch "CUT: contains(z_5, self.right.left.values) FALSE"
                                                         (builtin "One Step Simplification" (formula "52"))
                                                         (rule "notRight" (formula "52"))
                                                         (rule "allLeft" (formula "28") (inst "t=z_5"))
                                                         (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "28"))
                                                         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "28"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                         (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                         (rule "mul_literals" (formula "2") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                         (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "41"))
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "inEqSimp_homoInEq1" (formula "2"))
                                                         (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                         (rule "add_literals" (formula "2") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                         (rule "add_literals" (formula "2") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "2") (term "1,0"))
                                                         (rule "add_zero_right" (formula "2") (term "0"))
                                                         (rule "leq_literals" (formula "2"))
                                                         (rule "closeFalse" (formula "2"))
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: contains(result_1, self.right.right.values) FALSE"
                                                (builtin "One Step Simplification" (formula "27"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "44"))
                                                (builtin "One Step Simplification" (formula "10"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "allLeft" (formula "16") (inst "t=z_5"))
                                                (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                                                (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "16") (term "0,0,1"))
                                                (rule "leq_literals" (formula "16") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "notLeft" (formula "16"))
                                                (rule "replace_known_right" (formula "49") (term "0,0,1,0") (ifseqformula "40"))
                                                (builtin "One Step Simplification" (formula "49"))
                                                (rule "allLeft" (formula "15") (inst "t=z_5"))
                                                (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                                (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "15") (term "0,0,1"))
                                                (rule "leq_literals" (formula "15") (term "0,1"))
                                                (builtin "One Step Simplification" (formula "15"))
                                                (rule "notLeft" (formula "15"))
                                                (rule "replace_known_right" (formula "50") (term "0,1,0") (ifseqformula "40"))
                                                (builtin "One Step Simplification" (formula "50"))
                                                (rule "cut_direct" (formula "50") (term "0,1"))
                                                (branch "CUT: self.value = z_5 TRUE"
                                                   (builtin "One Step Simplification" (formula "51"))
                                                   (rule "false_right" (formula "51"))
                                                   (rule "applyEq" (formula "38") (term "0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "38"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                   (rule "add_literals" (formula "3") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "3") (term "1,0"))
                                                   (rule "add_zero_right" (formula "3") (term "0"))
                                                   (rule "leq_literals" (formula "3"))
                                                   (rule "closeFalse" (formula "3"))
                                                )
                                                (branch "CUT: self.value = z_5 FALSE"
                                                   (builtin "One Step Simplification" (formula "51"))
                                                   (rule "cut_direct" (formula "51") (term "0,1"))
                                                   (branch "CUT: self.right.value = z_5 TRUE"
                                                      (builtin "One Step Simplification" (formula "52"))
                                                      (rule "false_right" (formula "52"))
                                                      (rule "applyEq" (formula "29") (term "0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "36") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "29"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                      (rule "add_literals" (formula "3") (term "0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                      (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                      (rule "mul_literals" (formula "3") (term "0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "40") (ifseqformula "3"))
                                                      (rule "andLeft" (formula "40"))
                                                      (rule "inEqSimp_homoInEq1" (formula "40"))
                                                      (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "40") (term "1,0"))
                                                      (rule "mul_literals" (formula "40") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "40") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                                                      (rule "add_literals" (formula "40") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "40") (term "0"))
                                                      (rule "add_literals" (formula "40") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "40") (term "1,0"))
                                                      (rule "add_literals" (formula "40") (term "0"))
                                                      (rule "leq_literals" (formula "40"))
                                                      (rule "closeFalse" (formula "40"))
                                                   )
                                                   (branch "CUT: self.right.value = z_5 FALSE"
                                                      (builtin "One Step Simplification" (formula "52"))
                                                      (rule "cut_direct" (formula "52") (term "0,0"))
                                                      (branch "CUT: contains(z_5, self.right.right.values) TRUE"
                                                         (builtin "One Step Simplification" (formula "53"))
                                                         (rule "false_right" (formula "53"))
                                                         (rule "allLeft" (formula "28") (inst "t=z_5"))
                                                         (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "28"))
                                                         (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "28"))
                                                         (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                         (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                         (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                         (rule "mul_literals" (formula "3") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                         (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "41"))
                                                         (rule "andLeft" (formula "3"))
                                                         (rule "inEqSimp_homoInEq1" (formula "3"))
                                                         (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                         (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                         (rule "add_literals" (formula "3") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                         (rule "add_literals" (formula "3") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "3") (term "1,0"))
                                                         (rule "add_zero_right" (formula "3") (term "0"))
                                                         (rule "leq_literals" (formula "3"))
                                                         (rule "closeFalse" (formula "3"))
                                                      )
                                                      (branch "CUT: contains(z_5, self.right.right.values) FALSE"
                                                         (builtin "One Step Simplification" (formula "53"))
                                                         (rule "notRight" (formula "53"))
                                                         (rule "allLeft" (formula "27") (inst "t=z_5"))
                                                         (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "27"))
                                                         (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "27"))
                                                         (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                         (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                         (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                         (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                         (rule "mul_literals" (formula "3") (term "0,1"))
                                                         (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "41") (ifseqformula "3"))
                                                         (rule "andLeft" (formula "41"))
                                                         (rule "inEqSimp_homoInEq1" (formula "41"))
                                                         (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                         (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                         (rule "add_literals" (formula "41") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                         (rule "add_literals" (formula "41") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "41") (term "1,0"))
                                                         (rule "add_zero_right" (formula "41") (term "0"))
                                                         (rule "leq_literals" (formula "41"))
                                                         (rule "closeFalse" (formula "41"))
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: result_2 = result_0 FALSE"
                                             (builtin "One Step Simplification" (formula "37"))
                                             (rule "replace_known_right" (formula "46") (term "1,1,0,1") (ifseqformula "38"))
                                             (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "37")))
                                             (rule "allRight" (formula "46") (inst "sk=z_4"))
                                             (rule "orRight" (formula "46"))
                                             (rule "eqSymm" (formula "46") (term "0,1,0,0"))
                                             (rule "eqSymm" (formula "46") (term "0,1"))
                                             (rule "inEqSimp_leqRight" (formula "47"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "applyEq" (formula "47") (term "0,0,1") (ifseqformula "38"))
                                             (rule "eqSymm" (formula "47") (term "0,1"))
                                             (rule "applyEq" (formula "35") (term "0") (ifseqformula "38"))
                                             (rule "inEqSimp_homoInEq0" (formula "35"))
                                             (rule "polySimp_pullOutFactor1" (formula "35") (term "0"))
                                             (rule "add_literals" (formula "35") (term "1,0"))
                                             (rule "times_zero_1" (formula "35") (term "0"))
                                             (rule "qeq_literals" (formula "35"))
                                             (rule "true_left" (formula "35"))
                                             (rule "applyEq" (formula "11") (term "0,1,0") (ifseqformula "37"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                             (rule "inEqSimp_contradEq7" (formula "46") (term "0,1") (ifseqformula "1"))
                                             (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "46") (term "0,0,0,1"))
                                             (rule "add_literals" (formula "46") (term "1,1,0,0,0,1"))
                                             (rule "times_zero_1" (formula "46") (term "1,0,0,0,1"))
                                             (rule "add_zero_right" (formula "46") (term "0,0,0,1"))
                                             (rule "leq_literals" (formula "46") (term "0,0,1"))
                                             (builtin "One Step Simplification" (formula "46"))
                                             (rule "inEqSimp_strengthen1" (formula "35") (ifseqformula "38"))
                                             (rule "inEqSimp_contradEq7" (formula "38") (ifseqformula "35"))
                                             (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0"))
                                             (rule "add_literals" (formula "38") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                             (rule "add_literals" (formula "38") (term "0,0"))
                                             (rule "leq_literals" (formula "38") (term "0"))
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "false_right" (formula "38"))
                                             (rule "cut_direct" (formula "27") (term "1"))
                                             (branch "CUT: contains(result_1, self.right.left.values) TRUE"
                                                (builtin "One Step Simplification" (formula "28"))
                                                (rule "true_left" (formula "28"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0") (ifseqformula "3"))
                                                (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "44"))
                                                (builtin "One Step Simplification" (formula "11"))
                                                (rule "cut_direct" (formula "47") (term "0,1,1"))
                                                (branch "CUT: z_4 = result_0 TRUE"
                                                   (builtin "One Step Simplification" (formula "48"))
                                                   (rule "false_right" (formula "48"))
                                                   (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                   (rule "mul_literals" (formula "3") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "38") (ifseqformula "3"))
                                                   (rule "andLeft" (formula "38"))
                                                   (rule "inEqSimp_homoInEq1" (formula "38"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "38") (term "1,0"))
                                                   (rule "mul_literals" (formula "38") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "38") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "38") (term "0,0"))
                                                   (rule "add_literals" (formula "38") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "38") (term "0"))
                                                   (rule "add_literals" (formula "38") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "38") (term "1,0"))
                                                   (rule "add_literals" (formula "38") (term "0"))
                                                   (rule "leq_literals" (formula "38"))
                                                   (rule "closeFalse" (formula "38"))
                                                )
                                                (branch "CUT: z_4 = result_0 FALSE"
                                                   (builtin "One Step Simplification" (formula "48"))
                                                   (rule "cut_direct" (formula "48") (term "0,1,0"))
                                                   (branch "CUT: self.right.value = z_4 TRUE"
                                                      (builtin "One Step Simplification" (formula "49"))
                                                      (rule "false_right" (formula "49"))
                                                      (rule "applyEq" (formula "36") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "29") (term "0") (ifseqformula "1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "29"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                      (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                      (rule "add_literals" (formula "3") (term "0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "40") (ifseqformula "3"))
                                                      (rule "andLeft" (formula "40"))
                                                      (rule "inEqSimp_homoInEq1" (formula "40"))
                                                      (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "40") (term "1,0"))
                                                      (rule "mul_literals" (formula "40") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "40") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                                                      (rule "add_literals" (formula "40") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "40") (term "0"))
                                                      (rule "add_literals" (formula "40") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "40") (term "1,0"))
                                                      (rule "add_literals" (formula "40") (term "0"))
                                                      (rule "leq_literals" (formula "40"))
                                                      (rule "closeFalse" (formula "40"))
                                                   )
                                                   (branch "CUT: self.right.value = z_4 FALSE"
                                                      (builtin "One Step Simplification" (formula "49"))
                                                      (rule "cut_direct" (formula "49") (term "0,0,1"))
                                                      (branch "CUT: contains(z_4, self.left.right.values) TRUE"
                                                         (builtin "One Step Simplification" (formula "50"))
                                                         (rule "false_right" (formula "50"))
                                                         (rule "allLeft" (formula "17") (inst "t=z_4"))
                                                         (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "17"))
                                                         (rule "inEqSimp_strengthen0" (formula "17") (ifseqformula "49"))
                                                         (rule "inEqSimp_contradEq3" (formula "49") (ifseqformula "17"))
                                                         (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "49") (term "0,0"))
                                                         (rule "add_literals" (formula "49") (term "1,1,0,0"))
                                                         (rule "times_zero_1" (formula "49") (term "1,0,0"))
                                                         (rule "add_zero_right" (formula "49") (term "0,0"))
                                                         (rule "qeq_literals" (formula "49") (term "0"))
                                                         (builtin "One Step Simplification" (formula "49"))
                                                         (rule "false_right" (formula "49"))
                                                         (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "17"))
                                                         (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                         (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                         (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                         (rule "add_literals" (formula "3") (term "0,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                         (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "40"))
                                                         (rule "andLeft" (formula "3"))
                                                         (rule "inEqSimp_homoInEq1" (formula "3"))
                                                         (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                         (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                         (rule "add_literals" (formula "3") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                         (rule "add_literals" (formula "3") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "3") (term "1,0"))
                                                         (rule "add_zero_right" (formula "3") (term "0"))
                                                         (rule "leq_literals" (formula "3"))
                                                         (rule "closeFalse" (formula "3"))
                                                      )
                                                      (branch "CUT: contains(z_4, self.left.right.values) FALSE"
                                                         (builtin "One Step Simplification" (formula "50"))
                                                         (rule "cut_direct" (formula "50") (term "0,0,0"))
                                                         (branch "CUT: contains(z_4, self.right.right.values) TRUE"
                                                            (builtin "One Step Simplification" (formula "51"))
                                                            (rule "false_right" (formula "51"))
                                                            (rule "allLeft" (formula "28") (inst "t=z_4"))
                                                            (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "28"))
                                                            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "28"))
                                                            (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                            (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                            (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "3"))
                                                            (rule "andLeft" (formula "41"))
                                                            (rule "inEqSimp_homoInEq1" (formula "41"))
                                                            (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                            (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                            (rule "add_literals" (formula "41") (term "0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                            (rule "add_literals" (formula "41") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "41") (term "1,0"))
                                                            (rule "add_zero_right" (formula "41") (term "0"))
                                                            (rule "leq_literals" (formula "41"))
                                                            (rule "closeFalse" (formula "41"))
                                                         )
                                                         (branch "CUT: contains(z_4, self.right.right.values) FALSE"
                                                            (builtin "One Step Simplification" (formula "51"))
                                                            (rule "cut_direct" (formula "51") (term "0,0"))
                                                            (branch "CUT: contains(z_4, self.right.left.values) TRUE"
                                                               (builtin "One Step Simplification" (formula "52"))
                                                               (rule "false_right" (formula "52"))
                                                               (rule "allLeft" (formula "27") (inst "t=z_4"))
                                                               (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "27"))
                                                               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "27"))
                                                               (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                               (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                               (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                               (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "3"))
                                                               (rule "andLeft" (formula "41"))
                                                               (rule "inEqSimp_homoInEq1" (formula "41"))
                                                               (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                               (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                               (rule "add_literals" (formula "41") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                               (rule "add_literals" (formula "41") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "41") (term "1,0"))
                                                               (rule "add_literals" (formula "41") (term "0"))
                                                               (rule "leq_literals" (formula "41"))
                                                               (rule "closeFalse" (formula "41"))
                                                            )
                                                            (branch "CUT: contains(z_4, self.right.left.values) FALSE"
                                                               (builtin "One Step Simplification" (formula "52"))
                                                               (rule "notRight" (formula "52"))
                                                               (rule "allLeft" (formula "16") (inst "t=z_4"))
                                                               (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "16"))
                                                               (rule "inEqSimp_strengthen0" (formula "16") (ifseqformula "49"))
                                                               (rule "inEqSimp_contradEq3" (formula "49") (ifseqformula "16"))
                                                               (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "49") (term "0,0"))
                                                               (rule "add_literals" (formula "49") (term "1,1,0,0"))
                                                               (rule "times_zero_1" (formula "49") (term "1,0,0"))
                                                               (rule "add_zero_right" (formula "49") (term "0,0"))
                                                               (rule "qeq_literals" (formula "49") (term "0"))
                                                               (builtin "One Step Simplification" (formula "49"))
                                                               (rule "false_right" (formula "49"))
                                                               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "16"))
                                                               (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                               (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                               (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                               (rule "add_literals" (formula "3") (term "0,0,0"))
                                                               (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                               (rule "inEqSimp_contradInEq0" (formula "40") (ifseqformula "3"))
                                                               (rule "andLeft" (formula "40"))
                                                               (rule "inEqSimp_homoInEq1" (formula "40"))
                                                               (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "40") (term "1,0"))
                                                               (rule "mul_literals" (formula "40") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "40") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                                                               (rule "add_literals" (formula "40") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "40") (term "0"))
                                                               (rule "add_literals" (formula "40") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "40") (term "1,0"))
                                                               (rule "add_literals" (formula "40") (term "0"))
                                                               (rule "leq_literals" (formula "40"))
                                                               (rule "closeFalse" (formula "40"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: contains(result_1, self.right.left.values) FALSE"
                                                (builtin "One Step Simplification" (formula "27"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,1,0,0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "46"))
                                                (builtin "One Step Simplification" (formula "11"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "45"))
                                                (builtin "One Step Simplification" (formula "10"))
                                                (rule "cut_direct" (formula "48") (term "0,1,1"))
                                                (branch "CUT: z_4 = result_0 TRUE"
                                                   (builtin "One Step Simplification" (formula "49"))
                                                   (rule "false_right" (formula "49"))
                                                   (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "2"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                                   (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                   (rule "mul_literals" (formula "2") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "38") (ifseqformula "2"))
                                                   (rule "andLeft" (formula "38"))
                                                   (rule "inEqSimp_homoInEq1" (formula "38"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "38") (term "1,0"))
                                                   (rule "mul_literals" (formula "38") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "38") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "38") (term "0,0"))
                                                   (rule "add_literals" (formula "38") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "38") (term "0"))
                                                   (rule "add_literals" (formula "38") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "38") (term "1,0"))
                                                   (rule "add_zero_right" (formula "38") (term "0"))
                                                   (rule "leq_literals" (formula "38"))
                                                   (rule "closeFalse" (formula "38"))
                                                )
                                                (branch "CUT: z_4 = result_0 FALSE"
                                                   (builtin "One Step Simplification" (formula "49"))
                                                   (rule "cut_direct" (formula "49") (term "0,1,0"))
                                                   (branch "CUT: self.right.value = z_4 TRUE"
                                                      (builtin "One Step Simplification" (formula "50"))
                                                      (rule "false_right" (formula "50"))
                                                      (rule "applyEq" (formula "29") (term "0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "36") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "29"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                      (rule "add_literals" (formula "2") (term "0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "40"))
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "2"))
                                                      (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                      (rule "add_literals" (formula "2") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                      (rule "add_literals" (formula "2") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "2") (term "1,0"))
                                                      (rule "add_zero_right" (formula "2") (term "0"))
                                                      (rule "leq_literals" (formula "2"))
                                                      (rule "closeFalse" (formula "2"))
                                                   )
                                                   (branch "CUT: self.right.value = z_4 FALSE"
                                                      (builtin "One Step Simplification" (formula "50"))
                                                      (rule "cut_direct" (formula "50") (term "0,1,1"))
                                                      (branch "CUT: contains(z_4, self.left.left.values) TRUE"
                                                         (builtin "One Step Simplification" (formula "51"))
                                                         (rule "false_right" (formula "51"))
                                                         (rule "allLeft" (formula "16") (inst "t=z_4"))
                                                         (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "16"))
                                                         (rule "inEqSimp_strengthen0" (formula "16") (ifseqformula "50"))
                                                         (rule "inEqSimp_contradEq3" (formula "50") (ifseqformula "16"))
                                                         (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "50") (term "0,0"))
                                                         (rule "add_literals" (formula "50") (term "1,1,0,0"))
                                                         (rule "times_zero_1" (formula "50") (term "1,0,0"))
                                                         (rule "add_literals" (formula "50") (term "0,0"))
                                                         (rule "qeq_literals" (formula "50") (term "0"))
                                                         (builtin "One Step Simplification" (formula "50"))
                                                         (rule "false_right" (formula "50"))
                                                         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "16"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                         (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                         (rule "add_literals" (formula "2") (term "0,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                         (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "40"))
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "inEqSimp_homoInEq1" (formula "2"))
                                                         (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                         (rule "add_literals" (formula "2") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                         (rule "add_literals" (formula "2") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "2") (term "1,0"))
                                                         (rule "add_literals" (formula "2") (term "0"))
                                                         (rule "leq_literals" (formula "2"))
                                                         (rule "closeFalse" (formula "2"))
                                                      )
                                                      (branch "CUT: contains(z_4, self.left.left.values) FALSE"
                                                         (builtin "One Step Simplification" (formula "51"))
                                                         (rule "cut_direct" (formula "51") (term "0,1,0"))
                                                         (branch "CUT: contains(z_4, self.right.left.values) TRUE"
                                                            (builtin "One Step Simplification" (formula "52"))
                                                            (rule "false_right" (formula "52"))
                                                            (rule "allLeft" (formula "27") (inst "t=z_4"))
                                                            (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "27"))
                                                            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "27"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                            (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "2"))
                                                            (rule "andLeft" (formula "41"))
                                                            (rule "inEqSimp_homoInEq1" (formula "41"))
                                                            (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                            (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                            (rule "add_literals" (formula "41") (term "0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                            (rule "add_literals" (formula "41") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "41") (term "1,0"))
                                                            (rule "add_literals" (formula "41") (term "0"))
                                                            (rule "leq_literals" (formula "41"))
                                                            (rule "closeFalse" (formula "41"))
                                                         )
                                                         (branch "CUT: contains(z_4, self.right.left.values) FALSE"
                                                            (builtin "One Step Simplification" (formula "52"))
                                                            (rule "cut_direct" (formula "52") (term "0,1"))
                                                            (branch "CUT: contains(z_4, self.left.right.values) TRUE"
                                                               (builtin "One Step Simplification" (formula "53"))
                                                               (rule "false_right" (formula "53"))
                                                               (rule "allLeft" (formula "17") (inst "t=z_4"))
                                                               (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "17"))
                                                               (rule "inEqSimp_strengthen0" (formula "17") (ifseqformula "50"))
                                                               (rule "inEqSimp_contradEq3" (formula "50") (ifseqformula "17"))
                                                               (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "50") (term "0,0"))
                                                               (rule "add_literals" (formula "50") (term "1,1,0,0"))
                                                               (rule "times_zero_1" (formula "50") (term "1,0,0"))
                                                               (rule "add_literals" (formula "50") (term "0,0"))
                                                               (rule "qeq_literals" (formula "50") (term "0"))
                                                               (builtin "One Step Simplification" (formula "50"))
                                                               (rule "false_right" (formula "50"))
                                                               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "17"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                               (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                               (rule "add_literals" (formula "2") (term "0,0,0"))
                                                               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                               (rule "inEqSimp_contradInEq0" (formula "40") (ifseqformula "2"))
                                                               (rule "andLeft" (formula "40"))
                                                               (rule "inEqSimp_homoInEq1" (formula "40"))
                                                               (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "40") (term "1,0"))
                                                               (rule "mul_literals" (formula "40") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "40") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                                                               (rule "add_literals" (formula "40") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "40") (term "0"))
                                                               (rule "add_literals" (formula "40") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "40") (term "1,0"))
                                                               (rule "add_literals" (formula "40") (term "0"))
                                                               (rule "leq_literals" (formula "40"))
                                                               (rule "closeFalse" (formula "40"))
                                                            )
                                                            (branch "CUT: contains(z_4, self.left.right.values) FALSE"
                                                               (builtin "One Step Simplification" (formula "53"))
                                                               (rule "notRight" (formula "53"))
                                                               (rule "allLeft" (formula "28") (inst "t=z_4"))
                                                               (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "28"))
                                                               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "28"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                               (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "41"))
                                                               (rule "andLeft" (formula "2"))
                                                               (rule "inEqSimp_homoInEq1" (formula "2"))
                                                               (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                               (rule "add_literals" (formula "2") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                               (rule "add_literals" (formula "2") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "2") (term "1,0"))
                                                               (rule "add_zero_right" (formula "2") (term "0"))
                                                               (rule "leq_literals" (formula "2"))
                                                               (rule "closeFalse" (formula "2"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch "CUT: self.left.value = result_0 FALSE"
                                       (builtin "One Step Simplification" (formula "15"))
                                       (rule "inEqSimp_strengthen0" (formula "14") (ifseqformula "39"))
                                       (rule "inEqSimp_contradEq3" (formula "39") (ifseqformula "14"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0"))
                                       (rule "add_literals" (formula "39") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "39") (term "1,0,0"))
                                       (rule "add_literals" (formula "39") (term "0,0"))
                                       (rule "qeq_literals" (formula "39") (term "0"))
                                       (builtin "One Step Simplification" (formula "39"))
                                       (rule "false_right" (formula "39"))
                                       (rule "cut_direct" (formula "27") (term "1"))
                                       (branch "CUT: self.right.value = result_1 TRUE"
                                          (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "applyEq" (formula "46") (term "0,1,0,0,1") (ifseqformula "27"))
                                          (rule "eqSymm" (formula "46") (term "1,0,0,1"))
                                          (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                                          (rule "inEqSimp_homoInEq0" (formula "26"))
                                          (rule "polySimp_pullOutFactor1" (formula "26") (term "0"))
                                          (rule "add_literals" (formula "26") (term "1,0"))
                                          (rule "times_zero_1" (formula "26") (term "0"))
                                          (rule "qeq_literals" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                          (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "45") (term "1,0,1,0,0,0,0,0") (ifseqformula "26"))
                                          (rule "inEqSimp_contradEq7" (formula "45") (term "1,0,0,1") (ifseqformula "36"))
                                          (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,1,0,0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "45") (term "0,0,1,0,0,1"))
                                          (rule "add_literals" (formula "45") (term "1,1,0,0,1,0,0,1"))
                                          (rule "times_zero_1" (formula "45") (term "1,0,0,1,0,0,1"))
                                          (rule "add_zero_right" (formula "45") (term "0,0,1,0,0,1"))
                                          (rule "leq_literals" (formula "45") (term "0,1,0,0,1"))
                                          (builtin "One Step Simplification" (formula "45"))
                                          (rule "cut_direct" (formula "37") (term "1"))
                                          (branch "CUT: result_2 = result_0 TRUE"
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "true_left" (formula "38"))
                                             (rule "applyEq" (formula "45") (term "0,0,0,0,1") (ifseqformula "37"))
                                             (rule "applyEq" (formula "45") (term "1,1,0,0") (ifseqformula "37"))
                                             (rule "applyEq" (formula "45") (term "0,1,0,1,0,1") (ifseqformula "37"))
                                             (rule "applyEq" (formula "45") (term "0,1,0,0,1") (ifseqformula "37"))
                                             (rule "applyEq" (formula "36") (term "0") (ifseqformula "37"))
                                             (rule "inEqSimp_homoInEq1" (formula "36"))
                                             (rule "polySimp_addComm1" (formula "36") (term "0"))
                                             (rule "applyEq" (formula "35") (term "0") (ifseqformula "37"))
                                             (rule "inEqSimp_homoInEq1" (formula "35"))
                                             (rule "polySimp_pullOutFactor1" (formula "35") (term "0"))
                                             (rule "add_literals" (formula "35") (term "1,0"))
                                             (rule "times_zero_1" (formula "35") (term "0"))
                                             (rule "leq_literals" (formula "35"))
                                             (rule "true_left" (formula "35"))
                                             (rule "applyEq" (formula "44") (term "0,0,0,1,0,1") (ifseqformula "36"))
                                             (rule "replace_known_left" (formula "44") (term "0,1,0,1") (ifseqformula "15"))
                                             (builtin "One Step Simplification" (formula "44"))
                                             (rule "allRight" (formula "44") (inst "sk=z_3"))
                                             (rule "orRight" (formula "44"))
                                             (rule "eqSymm" (formula "44") (term "0,1,1,0"))
                                             (rule "eqSymm" (formula "44") (term "0,1"))
                                             (rule "inEqSimp_leqRight" (formula "45"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "applyEq" (formula "35") (term "1") (ifseqformula "37"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "36"))
                                             (rule "polySimp_mulComm0" (formula "36") (term "1"))
                                             (rule "polySimp_rightDist" (formula "36") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "36") (term "1,1"))
                                             (rule "mul_literals" (formula "36") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "36") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                             (rule "cut_direct" (formula "16") (term "1"))
                                             (branch "CUT: contains(result_0, self.left.left.values) TRUE"
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0") (ifseqformula "3"))
                                                (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "44"))
                                                (builtin "One Step Simplification" (formula "11"))
                                                (rule "cut_direct" (formula "47") (term "0,1,0,0"))
                                                (branch "CUT: z_3 = result_1 TRUE"
                                                   (builtin "One Step Simplification" (formula "48"))
                                                   (rule "false_right" (formula "48"))
                                                   (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "39"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                   (rule "add_literals" (formula "3") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "3") (term "1,0"))
                                                   (rule "add_literals" (formula "3") (term "0"))
                                                   (rule "leq_literals" (formula "3"))
                                                   (rule "closeFalse" (formula "3"))
                                                )
                                                (branch "CUT: z_3 = result_1 FALSE"
                                                   (builtin "One Step Simplification" (formula "48"))
                                                   (rule "allLeft" (formula "15") (inst "t=z_3"))
                                                   (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                                   (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "15") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "15") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "15"))
                                                   (rule "notLeft" (formula "15"))
                                                   (rule "replace_known_right" (formula "49") (term "0,1,0,1,0") (ifseqformula "40"))
                                                   (builtin "One Step Simplification" (formula "49"))
                                                   (rule "allLeft" (formula "16") (inst "t=z_3"))
                                                   (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                                                   (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "16") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "16") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "16"))
                                                   (rule "notLeft" (formula "16"))
                                                   (rule "replace_known_right" (formula "50") (term "0,0,1,0") (ifseqformula "40"))
                                                   (builtin "One Step Simplification" (formula "50"))
                                                   (rule "cut_direct" (formula "50") (term "0,1"))
                                                   (branch "CUT: self.value = z_3 TRUE"
                                                      (builtin "One Step Simplification" (formula "51"))
                                                      (rule "false_right" (formula "51"))
                                                      (rule "applyEq" (formula "38") (term "0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "38") (ifseqformula "3"))
                                                      (rule "andLeft" (formula "38"))
                                                      (rule "inEqSimp_homoInEq1" (formula "38"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "38") (term "0"))
                                                      (rule "add_literals" (formula "38") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "38") (term "1,0"))
                                                      (rule "add_zero_right" (formula "38") (term "0"))
                                                      (rule "leq_literals" (formula "38"))
                                                      (rule "closeFalse" (formula "38"))
                                                   )
                                                   (branch "CUT: self.value = z_3 FALSE"
                                                      (builtin "One Step Simplification" (formula "51"))
                                                      (rule "cut_direct" (formula "51") (term "0,1"))
                                                      (branch "CUT: self.left.value = z_3 TRUE"
                                                         (builtin "One Step Simplification" (formula "52"))
                                                         (rule "false_right" (formula "52"))
                                                         (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "3"))
                                                         (rule "andLeft" (formula "18"))
                                                         (rule "inEqSimp_homoInEq1" (formula "18"))
                                                         (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                                                         (rule "mul_literals" (formula "18") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "18") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "18") (term "0,0"))
                                                         (rule "add_literals" (formula "18") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
                                                         (rule "add_literals" (formula "18") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "18") (term "1,0"))
                                                         (rule "add_zero_right" (formula "18") (term "0"))
                                                         (rule "leq_literals" (formula "18"))
                                                         (rule "closeFalse" (formula "18"))
                                                      )
                                                      (branch "CUT: self.left.value = z_3 FALSE"
                                                         (builtin "One Step Simplification" (formula "52"))
                                                         (rule "cut_direct" (formula "52") (term "0,0"))
                                                         (branch "CUT: contains(z_3, self.right.right.values) TRUE"
                                                            (builtin "One Step Simplification" (formula "53"))
                                                            (rule "false_right" (formula "53"))
                                                            (rule "allLeft" (formula "29") (inst "t=z_3"))
                                                            (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "29"))
                                                            (rule "inEqSimp_strengthen0" (formula "29") (ifseqformula "51"))
                                                            (rule "inEqSimp_contradEq3" (formula "51") (ifseqformula "29"))
                                                            (rule "polySimp_mulComm0" (formula "51") (term "1,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "51") (term "0,0"))
                                                            (rule "add_literals" (formula "51") (term "1,1,0,0"))
                                                            (rule "times_zero_1" (formula "51") (term "1,0,0"))
                                                            (rule "add_literals" (formula "51") (term "0,0"))
                                                            (rule "qeq_literals" (formula "51") (term "0"))
                                                            (builtin "One Step Simplification" (formula "51"))
                                                            (rule "false_right" (formula "51"))
                                                            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "29"))
                                                            (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                            (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                            (rule "add_literals" (formula "3") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                            (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                            (rule "mul_literals" (formula "3") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                            (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "41"))
                                                            (rule "andLeft" (formula "3"))
                                                            (rule "inEqSimp_homoInEq1" (formula "3"))
                                                            (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                            (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                            (rule "add_literals" (formula "3") (term "0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                            (rule "add_literals" (formula "3") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "3") (term "1,0"))
                                                            (rule "add_literals" (formula "3") (term "0"))
                                                            (rule "leq_literals" (formula "3"))
                                                            (rule "closeFalse" (formula "3"))
                                                         )
                                                         (branch "CUT: contains(z_3, self.right.right.values) FALSE"
                                                            (builtin "One Step Simplification" (formula "53"))
                                                            (rule "notRight" (formula "53"))
                                                            (rule "allLeft" (formula "28") (inst "t=z_3"))
                                                            (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "28"))
                                                            (rule "inEqSimp_strengthen0" (formula "28") (ifseqformula "51"))
                                                            (rule "inEqSimp_contradEq3" (formula "51") (ifseqformula "28"))
                                                            (rule "polySimp_mulComm0" (formula "51") (term "1,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "51") (term "0,0"))
                                                            (rule "add_literals" (formula "51") (term "1,1,0,0"))
                                                            (rule "times_zero_1" (formula "51") (term "1,0,0"))
                                                            (rule "add_zero_right" (formula "51") (term "0,0"))
                                                            (rule "qeq_literals" (formula "51") (term "0"))
                                                            (builtin "One Step Simplification" (formula "51"))
                                                            (rule "false_right" (formula "51"))
                                                            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "28"))
                                                            (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                            (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                            (rule "add_literals" (formula "3") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                            (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                            (rule "mul_literals" (formula "3") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "41") (ifseqformula "3"))
                                                            (rule "andLeft" (formula "41"))
                                                            (rule "inEqSimp_homoInEq1" (formula "41"))
                                                            (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                            (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                            (rule "add_literals" (formula "41") (term "0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                            (rule "add_literals" (formula "41") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "41") (term "1,0"))
                                                            (rule "add_zero_right" (formula "41") (term "0"))
                                                            (rule "leq_literals" (formula "41"))
                                                            (rule "closeFalse" (formula "41"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: contains(result_0, self.left.left.values) FALSE"
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,1,0,0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "46"))
                                                (builtin "One Step Simplification" (formula "11"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "45"))
                                                (builtin "One Step Simplification" (formula "10"))
                                                (rule "cut_direct" (formula "48") (term "0,1,0,0"))
                                                (branch "CUT: z_3 = result_1 TRUE"
                                                   (builtin "One Step Simplification" (formula "49"))
                                                   (rule "false_right" (formula "49"))
                                                   (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "39"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "2"))
                                                   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                   (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                   (rule "add_literals" (formula "2") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                   (rule "add_literals" (formula "2") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "2") (term "1,0"))
                                                   (rule "add_zero_right" (formula "2") (term "0"))
                                                   (rule "leq_literals" (formula "2"))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                                (branch "CUT: z_3 = result_1 FALSE"
                                                   (builtin "One Step Simplification" (formula "49"))
                                                   (rule "allLeft" (formula "15") (inst "t=z_3"))
                                                   (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                                   (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "15") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "15") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "15"))
                                                   (rule "notLeft" (formula "15"))
                                                   (rule "replace_known_right" (formula "50") (term "0,1,0,1,0") (ifseqformula "40"))
                                                   (builtin "One Step Simplification" (formula "50"))
                                                   (rule "allLeft" (formula "16") (inst "t=z_3"))
                                                   (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                                                   (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "16") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "16") (term "0,1"))
                                                   (builtin "One Step Simplification" (formula "16"))
                                                   (rule "notLeft" (formula "16"))
                                                   (rule "replace_known_right" (formula "51") (term "0,0,1,0") (ifseqformula "40"))
                                                   (builtin "One Step Simplification" (formula "51"))
                                                   (rule "cut_direct" (formula "51") (term "0,1"))
                                                   (branch "CUT: self.value = z_3 TRUE"
                                                      (builtin "One Step Simplification" (formula "52"))
                                                      (rule "false_right" (formula "52"))
                                                      (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "38") (term "0") (ifseqformula "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "38") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "38"))
                                                      (rule "inEqSimp_homoInEq1" (formula "38"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "38") (term "0"))
                                                      (rule "add_literals" (formula "38") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "38") (term "1,0"))
                                                      (rule "add_literals" (formula "38") (term "0"))
                                                      (rule "leq_literals" (formula "38"))
                                                      (rule "closeFalse" (formula "38"))
                                                   )
                                                   (branch "CUT: self.value = z_3 FALSE"
                                                      (builtin "One Step Simplification" (formula "52"))
                                                      (rule "cut_direct" (formula "52") (term "0,1"))
                                                      (branch "CUT: self.left.value = z_3 TRUE"
                                                         (builtin "One Step Simplification" (formula "53"))
                                                         (rule "false_right" (formula "53"))
                                                         (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                         (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "18"))
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "inEqSimp_homoInEq1" (formula "2"))
                                                         (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                         (rule "add_literals" (formula "2") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                         (rule "add_literals" (formula "2") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "2") (term "1,0"))
                                                         (rule "add_literals" (formula "2") (term "0"))
                                                         (rule "leq_literals" (formula "2"))
                                                         (rule "closeFalse" (formula "2"))
                                                      )
                                                      (branch "CUT: self.left.value = z_3 FALSE"
                                                         (builtin "One Step Simplification" (formula "53"))
                                                         (rule "cut_direct" (formula "53") (term "0,0"))
                                                         (branch "CUT: contains(z_3, self.right.right.values) TRUE"
                                                            (builtin "One Step Simplification" (formula "54"))
                                                            (rule "false_right" (formula "54"))
                                                            (rule "allLeft" (formula "29") (inst "t=z_3"))
                                                            (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "29"))
                                                            (rule "inEqSimp_strengthen0" (formula "29") (ifseqformula "52"))
                                                            (rule "inEqSimp_contradEq3" (formula "52") (ifseqformula "29"))
                                                            (rule "polySimp_mulComm0" (formula "52") (term "1,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "52") (term "0,0"))
                                                            (rule "add_literals" (formula "52") (term "1,1,0,0"))
                                                            (rule "times_zero_1" (formula "52") (term "1,0,0"))
                                                            (rule "add_zero_right" (formula "52") (term "0,0"))
                                                            (rule "qeq_literals" (formula "52") (term "0"))
                                                            (builtin "One Step Simplification" (formula "52"))
                                                            (rule "false_right" (formula "52"))
                                                            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "29"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                            (rule "add_literals" (formula "2") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                            (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                            (rule "mul_literals" (formula "2") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "41") (ifseqformula "2"))
                                                            (rule "andLeft" (formula "41"))
                                                            (rule "inEqSimp_homoInEq1" (formula "41"))
                                                            (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                            (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                            (rule "add_literals" (formula "41") (term "0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                            (rule "add_literals" (formula "41") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "41") (term "1,0"))
                                                            (rule "add_zero_right" (formula "41") (term "0"))
                                                            (rule "leq_literals" (formula "41"))
                                                            (rule "closeFalse" (formula "41"))
                                                         )
                                                         (branch "CUT: contains(z_3, self.right.right.values) FALSE"
                                                            (builtin "One Step Simplification" (formula "54"))
                                                            (rule "notRight" (formula "54"))
                                                            (rule "allLeft" (formula "28") (inst "t=z_3"))
                                                            (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "28"))
                                                            (rule "inEqSimp_strengthen0" (formula "28") (ifseqformula "52"))
                                                            (rule "inEqSimp_contradEq3" (formula "52") (ifseqformula "28"))
                                                            (rule "polySimp_mulComm0" (formula "52") (term "1,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "52") (term "0,0"))
                                                            (rule "add_literals" (formula "52") (term "1,1,0,0"))
                                                            (rule "times_zero_1" (formula "52") (term "1,0,0"))
                                                            (rule "add_zero_right" (formula "52") (term "0,0"))
                                                            (rule "qeq_literals" (formula "52") (term "0"))
                                                            (builtin "One Step Simplification" (formula "52"))
                                                            (rule "false_right" (formula "52"))
                                                            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "28"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                            (rule "add_literals" (formula "2") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                            (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                            (rule "mul_literals" (formula "2") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "41") (ifseqformula "2"))
                                                            (rule "andLeft" (formula "41"))
                                                            (rule "inEqSimp_homoInEq1" (formula "41"))
                                                            (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                            (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                            (rule "add_literals" (formula "41") (term "0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                            (rule "add_literals" (formula "41") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "41") (term "1,0"))
                                                            (rule "add_zero_right" (formula "41") (term "0"))
                                                            (rule "leq_literals" (formula "41"))
                                                            (rule "closeFalse" (formula "41"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: result_2 = result_0 FALSE"
                                             (builtin "One Step Simplification" (formula "37"))
                                             (rule "replace_known_left" (formula "46") (term "1,1") (ifseqformula "37"))
                                             (builtin "One Step Simplification" (formula "46"))
                                             (rule "allRight" (formula "46") (inst "sk=z_2"))
                                             (rule "orRight" (formula "46"))
                                             (rule "eqSymm" (formula "46") (term "0,1,1,0"))
                                             (rule "eqSymm" (formula "46") (term "0,1"))
                                             (rule "inEqSimp_leqRight" (formula "47"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "applyEq" (formula "35") (term "0") (ifseqformula "38"))
                                             (rule "inEqSimp_homoInEq0" (formula "35"))
                                             (rule "polySimp_pullOutFactor1" (formula "35") (term "0"))
                                             (rule "add_literals" (formula "35") (term "1,0"))
                                             (rule "times_zero_1" (formula "35") (term "0"))
                                             (rule "qeq_literals" (formula "35"))
                                             (rule "true_left" (formula "35"))
                                             (rule "applyEq" (formula "46") (term "0,0,1") (ifseqformula "37"))
                                             (rule "eqSymm" (formula "46") (term "0,1"))
                                             (rule "applyEq" (formula "11") (term "0,1,0") (ifseqformula "37"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                             (rule "inEqSimp_contradEq7" (formula "46") (term "0,1") (ifseqformula "1"))
                                             (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "46") (term "0,0,0,1"))
                                             (rule "add_literals" (formula "46") (term "1,1,0,0,0,1"))
                                             (rule "times_zero_1" (formula "46") (term "1,0,0,0,1"))
                                             (rule "add_zero_right" (formula "46") (term "0,0,0,1"))
                                             (rule "leq_literals" (formula "46") (term "0,0,1"))
                                             (builtin "One Step Simplification" (formula "46"))
                                             (rule "inEqSimp_strengthen1" (formula "35") (ifseqformula "38"))
                                             (rule "inEqSimp_contradEq7" (formula "38") (ifseqformula "35"))
                                             (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0"))
                                             (rule "add_literals" (formula "38") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                             (rule "add_literals" (formula "38") (term "0,0"))
                                             (rule "leq_literals" (formula "38") (term "0"))
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "false_right" (formula "38"))
                                             (rule "cut_direct" (formula "16") (term "0"))
                                             (branch "CUT: contains(result_0, self.left.right.values) TRUE"
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,1,0,0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "45"))
                                                (builtin "One Step Simplification" (formula "11"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,0,0,0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "44"))
                                                (builtin "One Step Simplification" (formula "12"))
                                                (rule "cut_direct" (formula "47") (term "0,1,0"))
                                                (branch "CUT: z_2 = result_1 TRUE"
                                                   (builtin "One Step Simplification" (formula "48"))
                                                   (rule "false_right" (formula "48"))
                                                   (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "2"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                                   (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                   (rule "mul_literals" (formula "2") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "39") (ifseqformula "2"))
                                                   (rule "andLeft" (formula "39"))
                                                   (rule "inEqSimp_homoInEq1" (formula "39"))
                                                   (rule "polySimp_mulComm0" (formula "39") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "39") (term "1,0"))
                                                   (rule "mul_literals" (formula "39") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "39") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "39") (term "0,0"))
                                                   (rule "add_literals" (formula "39") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                   (rule "add_literals" (formula "39") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "39") (term "1,0"))
                                                   (rule "add_literals" (formula "39") (term "0"))
                                                   (rule "leq_literals" (formula "39"))
                                                   (rule "closeFalse" (formula "39"))
                                                )
                                                (branch "CUT: z_2 = result_1 FALSE"
                                                   (builtin "One Step Simplification" (formula "48"))
                                                   (rule "cut_direct" (formula "48") (term "0,1,1"))
                                                   (branch "CUT: self.left.value = z_2 TRUE"
                                                      (builtin "One Step Simplification" (formula "49"))
                                                      (rule "false_right" (formula "49"))
                                                      (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "18"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                      (rule "add_literals" (formula "2") (term "0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "39") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_homoInEq1" (formula "39"))
                                                      (rule "polySimp_mulComm0" (formula "39") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "39") (term "1,0"))
                                                      (rule "mul_literals" (formula "39") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "39") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "39") (term "0,0"))
                                                      (rule "add_literals" (formula "39") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                      (rule "add_literals" (formula "39") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "39") (term "1,0"))
                                                      (rule "add_literals" (formula "39") (term "0"))
                                                      (rule "leq_literals" (formula "39"))
                                                      (rule "closeFalse" (formula "39"))
                                                   )
                                                   (branch "CUT: self.left.value = z_2 FALSE"
                                                      (builtin "One Step Simplification" (formula "49"))
                                                      (rule "cut_direct" (formula "49") (term "0,0,1"))
                                                      (branch "CUT: contains(z_2, self.left.right.values) TRUE"
                                                         (builtin "One Step Simplification" (formula "50"))
                                                         (rule "false_right" (formula "50"))
                                                         (rule "allLeft" (formula "17") (inst "t=z_2"))
                                                         (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "17"))
                                                         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "17"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                         (rule "inEqSimp_contradInEq0" (formula "40") (ifseqformula "2"))
                                                         (rule "andLeft" (formula "40"))
                                                         (rule "inEqSimp_homoInEq1" (formula "40"))
                                                         (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "40") (term "1,0"))
                                                         (rule "mul_literals" (formula "40") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "40") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                                                         (rule "add_literals" (formula "40") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "40") (term "0"))
                                                         (rule "add_literals" (formula "40") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "40") (term "1,0"))
                                                         (rule "add_zero_right" (formula "40") (term "0"))
                                                         (rule "leq_literals" (formula "40"))
                                                         (rule "closeFalse" (formula "40"))
                                                      )
                                                      (branch "CUT: contains(z_2, self.left.right.values) FALSE"
                                                         (builtin "One Step Simplification" (formula "50"))
                                                         (rule "cut_direct" (formula "50") (term "0,0,0"))
                                                         (branch "CUT: contains(z_2, self.right.right.values) TRUE"
                                                            (builtin "One Step Simplification" (formula "51"))
                                                            (rule "false_right" (formula "51"))
                                                            (rule "allLeft" (formula "29") (inst "t=z_2"))
                                                            (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "29"))
                                                            (rule "inEqSimp_strengthen0" (formula "29") (ifseqformula "49"))
                                                            (rule "inEqSimp_contradEq3" (formula "49") (ifseqformula "29"))
                                                            (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "49") (term "0,0"))
                                                            (rule "add_literals" (formula "49") (term "1,1,0,0"))
                                                            (rule "times_zero_1" (formula "49") (term "1,0,0"))
                                                            (rule "add_literals" (formula "49") (term "0,0"))
                                                            (rule "qeq_literals" (formula "49") (term "0"))
                                                            (builtin "One Step Simplification" (formula "49"))
                                                            (rule "false_right" (formula "49"))
                                                            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "29"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                            (rule "add_literals" (formula "2") (term "0,0,0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                            (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "2"))
                                                            (rule "andLeft" (formula "41"))
                                                            (rule "inEqSimp_homoInEq1" (formula "41"))
                                                            (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                            (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                            (rule "add_literals" (formula "41") (term "0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                            (rule "add_literals" (formula "41") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "41") (term "1,0"))
                                                            (rule "add_literals" (formula "41") (term "0"))
                                                            (rule "leq_literals" (formula "41"))
                                                            (rule "closeFalse" (formula "41"))
                                                         )
                                                         (branch "CUT: contains(z_2, self.right.right.values) FALSE"
                                                            (builtin "One Step Simplification" (formula "51"))
                                                            (rule "cut_direct" (formula "51") (term "0,0"))
                                                            (branch "CUT: contains(z_2, self.right.left.values) TRUE"
                                                               (builtin "One Step Simplification" (formula "52"))
                                                               (rule "false_right" (formula "52"))
                                                               (rule "allLeft" (formula "28") (inst "t=z_2"))
                                                               (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "28"))
                                                               (rule "inEqSimp_strengthen0" (formula "28") (ifseqformula "49"))
                                                               (rule "inEqSimp_contradEq3" (formula "49") (ifseqformula "28"))
                                                               (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "49") (term "0,0"))
                                                               (rule "add_literals" (formula "49") (term "1,1,0,0"))
                                                               (rule "times_zero_1" (formula "49") (term "1,0,0"))
                                                               (rule "add_zero_right" (formula "49") (term "0,0"))
                                                               (rule "qeq_literals" (formula "49") (term "0"))
                                                               (builtin "One Step Simplification" (formula "49"))
                                                               (rule "false_right" (formula "49"))
                                                               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "28"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                               (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                               (rule "add_literals" (formula "2") (term "0,0,0"))
                                                               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                               (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "2"))
                                                               (rule "andLeft" (formula "41"))
                                                               (rule "inEqSimp_homoInEq1" (formula "41"))
                                                               (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                               (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                               (rule "add_literals" (formula "41") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                               (rule "add_literals" (formula "41") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "41") (term "1,0"))
                                                               (rule "add_zero_right" (formula "41") (term "0"))
                                                               (rule "leq_literals" (formula "41"))
                                                               (rule "closeFalse" (formula "41"))
                                                            )
                                                            (branch "CUT: contains(z_2, self.right.left.values) FALSE"
                                                               (builtin "One Step Simplification" (formula "52"))
                                                               (rule "notRight" (formula "52"))
                                                               (rule "allLeft" (formula "16") (inst "t=z_2"))
                                                               (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "16"))
                                                               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "16"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                               (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "40"))
                                                               (rule "andLeft" (formula "2"))
                                                               (rule "inEqSimp_homoInEq1" (formula "2"))
                                                               (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                               (rule "add_literals" (formula "2") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                               (rule "add_literals" (formula "2") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "2") (term "1,0"))
                                                               (rule "add_zero_right" (formula "2") (term "0"))
                                                               (rule "leq_literals" (formula "2"))
                                                               (rule "closeFalse" (formula "2"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: contains(result_0, self.left.right.values) FALSE"
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "44"))
                                                (builtin "One Step Simplification" (formula "10"))
                                                (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "2"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                                                (builtin "One Step Simplification" (formula "1"))
                                                (rule "cut_direct" (formula "48") (term "0,1,0"))
                                                (branch "CUT: z_2 = result_1 TRUE"
                                                   (builtin "One Step Simplification" (formula "49"))
                                                   (rule "false_right" (formula "49"))
                                                   (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                   (rule "mul_literals" (formula "3") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "39"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                   (rule "add_literals" (formula "3") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "3") (term "1,0"))
                                                   (rule "add_zero_right" (formula "3") (term "0"))
                                                   (rule "leq_literals" (formula "3"))
                                                   (rule "closeFalse" (formula "3"))
                                                )
                                                (branch "CUT: z_2 = result_1 FALSE"
                                                   (builtin "One Step Simplification" (formula "49"))
                                                   (rule "cut_direct" (formula "49") (term "0,1,1"))
                                                   (branch "CUT: self.left.value = z_2 TRUE"
                                                      (builtin "One Step Simplification" (formula "50"))
                                                      (rule "false_right" (formula "50"))
                                                      (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "18"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                      (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                      (rule "add_literals" (formula "3") (term "0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "39"))
                                                      (rule "andLeft" (formula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "3"))
                                                      (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                      (rule "add_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                      (rule "add_literals" (formula "3") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "3") (term "1,0"))
                                                      (rule "add_zero_right" (formula "3") (term "0"))
                                                      (rule "leq_literals" (formula "3"))
                                                      (rule "closeFalse" (formula "3"))
                                                   )
                                                   (branch "CUT: self.left.value = z_2 FALSE"
                                                      (builtin "One Step Simplification" (formula "50"))
                                                      (rule "cut_direct" (formula "50") (term "0,1,0"))
                                                      (branch "CUT: contains(z_2, self.right.left.values) TRUE"
                                                         (builtin "One Step Simplification" (formula "51"))
                                                         (rule "false_right" (formula "51"))
                                                         (rule "allLeft" (formula "28") (inst "t=z_2"))
                                                         (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "1"))
                                                         (builtin "One Step Simplification" (formula "28"))
                                                         (rule "inEqSimp_strengthen0" (formula "28") (ifseqformula "50"))
                                                         (rule "inEqSimp_contradEq3" (formula "50") (ifseqformula "28"))
                                                         (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "50") (term "0,0"))
                                                         (rule "add_literals" (formula "50") (term "1,1,0,0"))
                                                         (rule "times_zero_1" (formula "50") (term "1,0,0"))
                                                         (rule "add_literals" (formula "50") (term "0,0"))
                                                         (rule "qeq_literals" (formula "50") (term "0"))
                                                         (builtin "One Step Simplification" (formula "50"))
                                                         (rule "false_right" (formula "50"))
                                                         (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "28"))
                                                         (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                         (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                         (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                         (rule "add_literals" (formula "3") (term "0,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                         (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "3"))
                                                         (rule "andLeft" (formula "41"))
                                                         (rule "inEqSimp_homoInEq1" (formula "41"))
                                                         (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                         (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                         (rule "add_literals" (formula "41") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                         (rule "add_literals" (formula "41") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "41") (term "1,0"))
                                                         (rule "add_literals" (formula "41") (term "0"))
                                                         (rule "leq_literals" (formula "41"))
                                                         (rule "closeFalse" (formula "41"))
                                                      )
                                                      (branch "CUT: contains(z_2, self.right.left.values) FALSE"
                                                         (builtin "One Step Simplification" (formula "51"))
                                                         (rule "cut_direct" (formula "51") (term "0,0"))
                                                         (branch "CUT: contains(z_2, self.right.right.values) TRUE"
                                                            (builtin "One Step Simplification" (formula "52"))
                                                            (rule "false_right" (formula "52"))
                                                            (rule "allLeft" (formula "29") (inst "t=z_2"))
                                                            (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "29"))
                                                            (rule "inEqSimp_strengthen0" (formula "29") (ifseqformula "50"))
                                                            (rule "inEqSimp_contradEq3" (formula "50") (ifseqformula "29"))
                                                            (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "50") (term "0,0"))
                                                            (rule "add_literals" (formula "50") (term "1,1,0,0"))
                                                            (rule "times_zero_1" (formula "50") (term "1,0,0"))
                                                            (rule "add_literals" (formula "50") (term "0,0"))
                                                            (rule "qeq_literals" (formula "50") (term "0"))
                                                            (builtin "One Step Simplification" (formula "50"))
                                                            (rule "false_right" (formula "50"))
                                                            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "29"))
                                                            (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                            (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                            (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                            (rule "add_literals" (formula "3") (term "0,0,0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                            (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "3"))
                                                            (rule "andLeft" (formula "41"))
                                                            (rule "inEqSimp_homoInEq1" (formula "41"))
                                                            (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                            (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                            (rule "add_literals" (formula "41") (term "0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                            (rule "add_literals" (formula "41") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "41") (term "1,0"))
                                                            (rule "add_zero_right" (formula "41") (term "0"))
                                                            (rule "leq_literals" (formula "41"))
                                                            (rule "closeFalse" (formula "41"))
                                                         )
                                                         (branch "CUT: contains(z_2, self.right.right.values) FALSE"
                                                            (builtin "One Step Simplification" (formula "52"))
                                                            (rule "cut_direct" (formula "52") (term "0,1"))
                                                            (branch "CUT: contains(z_2, self.left.left.values) TRUE"
                                                               (builtin "One Step Simplification" (formula "53"))
                                                               (rule "false_right" (formula "53"))
                                                               (rule "allLeft" (formula "16") (inst "t=z_2"))
                                                               (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "16"))
                                                               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "16"))
                                                               (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                               (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                               (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                               (rule "inEqSimp_contradInEq0" (formula "40") (ifseqformula "3"))
                                                               (rule "andLeft" (formula "40"))
                                                               (rule "inEqSimp_homoInEq1" (formula "40"))
                                                               (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "40") (term "1,0"))
                                                               (rule "mul_literals" (formula "40") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "40") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                                                               (rule "add_literals" (formula "40") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "40") (term "0"))
                                                               (rule "add_literals" (formula "40") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "40") (term "1,0"))
                                                               (rule "add_zero_right" (formula "40") (term "0"))
                                                               (rule "leq_literals" (formula "40"))
                                                               (rule "closeFalse" (formula "40"))
                                                            )
                                                            (branch "CUT: contains(z_2, self.left.left.values) FALSE"
                                                               (builtin "One Step Simplification" (formula "53"))
                                                               (rule "notRight" (formula "53"))
                                                               (rule "allLeft" (formula "17") (inst "t=z_2"))
                                                               (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "17"))
                                                               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "17"))
                                                               (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                               (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                               (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                               (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "40"))
                                                               (rule "andLeft" (formula "3"))
                                                               (rule "inEqSimp_homoInEq1" (formula "3"))
                                                               (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                               (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                               (rule "add_literals" (formula "3") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                               (rule "add_literals" (formula "3") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "3") (term "1,0"))
                                                               (rule "add_zero_right" (formula "3") (term "0"))
                                                               (rule "leq_literals" (formula "3"))
                                                               (rule "closeFalse" (formula "3"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: self.right.value = result_1 FALSE"
                                          (builtin "One Step Simplification" (formula "27"))
                                          (rule "inEqSimp_strengthen0" (formula "26") (ifseqformula "39"))
                                          (rule "inEqSimp_contradEq3" (formula "39") (ifseqformula "26"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0"))
                                          (rule "add_literals" (formula "39") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "39") (term "1,0,0"))
                                          (rule "add_literals" (formula "39") (term "0,0"))
                                          (rule "qeq_literals" (formula "39") (term "0"))
                                          (builtin "One Step Simplification" (formula "39"))
                                          (rule "false_right" (formula "39"))
                                          (rule "cut_direct" (formula "38") (term "1"))
                                          (branch "CUT: result_2 = result_0 TRUE"
                                             (builtin "One Step Simplification" (formula "39"))
                                             (rule "true_left" (formula "39"))
                                             (rule "applyEq" (formula "35") (term "1") (ifseqformula "38"))
                                             (rule "applyEq" (formula "46") (term "0,1,0,1,0,1") (ifseqformula "38"))
                                             (rule "applyEq" (formula "46") (term "1,1,0,0") (ifseqformula "38"))
                                             (rule "applyEq" (formula "46") (term "0,1,0,0,0,1") (ifseqformula "38"))
                                             (rule "applyEq" (formula "46") (term "0,0,0,0,0,1") (ifseqformula "38"))
                                             (rule "applyEq" (formula "46") (term "0,0,0,1,0,1") (ifseqformula "38"))
                                             (rule "replace_known_left" (formula "46") (term "0,1,0,1") (ifseqformula "15"))
                                             (builtin "One Step Simplification" (formula "46"))
                                             (rule "allRight" (formula "46") (inst "sk=z_1"))
                                             (rule "orRight" (formula "46"))
                                             (rule "eqSymm" (formula "46") (term "0,1,1,0"))
                                             (rule "eqSymm" (formula "46") (term "0,1"))
                                             (rule "eqSymm" (formula "46") (term "0,1,0,0"))
                                             (rule "inEqSimp_leqRight" (formula "47"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "applyEq" (formula "38") (term "0") (ifseqformula "39"))
                                             (rule "inEqSimp_homoInEq1" (formula "38"))
                                             (rule "polySimp_addComm1" (formula "38") (term "0"))
                                             (rule "applyEq" (formula "37") (term "0") (ifseqformula "39"))
                                             (rule "inEqSimp_homoInEq1" (formula "37"))
                                             (rule "polySimp_pullOutFactor1" (formula "37") (term "0"))
                                             (rule "add_literals" (formula "37") (term "1,0"))
                                             (rule "times_zero_1" (formula "37") (term "0"))
                                             (rule "leq_literals" (formula "37"))
                                             (rule "true_left" (formula "37"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "37"))
                                             (rule "polySimp_mulComm0" (formula "37") (term "1"))
                                             (rule "polySimp_rightDist" (formula "37") (term "1"))
                                             (rule "mul_literals" (formula "37") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "37") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "37") (term "1,1"))
                                             (rule "cut_direct" (formula "16") (term "1"))
                                             (branch "CUT: contains(result_0, self.left.left.values) TRUE"
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "cut_direct" (formula "28") (term "1"))
                                                (branch "CUT: contains(result_1, self.right.left.values) TRUE"
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "true_left" (formula "29"))
                                                   (rule "cut_direct" (formula "46") (term "0,1"))
                                                   (branch "CUT: self.value = z_1 TRUE"
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "false_right" (formula "47"))
                                                      (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "37") (term "0") (ifseqformula "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0"))
                                                      (rule "add_zero_right" (formula "37") (term "0"))
                                                      (rule "leq_literals" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch "CUT: self.value = z_1 FALSE"
                                                      (builtin "One Step Simplification" (formula "47"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,1,0,0") (ifseqformula "2"))
                                                      (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "46"))
                                                      (builtin "One Step Simplification" (formula "11"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,0,0,0") (ifseqformula "2"))
                                                      (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "45"))
                                                      (builtin "One Step Simplification" (formula "12"))
                                                      (rule "allLeft" (formula "15") (inst "t=z_1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "1"))
                                                      (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                                      (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "15") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "15") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "15"))
                                                      (rule "notLeft" (formula "15"))
                                                      (rule "replace_known_right" (formula "50") (term "0,1,0,1") (ifseqformula "41"))
                                                      (builtin "One Step Simplification" (formula "50"))
                                                      (rule "allLeft" (formula "16") (inst "t=z_1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "1"))
                                                      (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                                                      (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "16") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "16") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "16"))
                                                      (rule "notLeft" (formula "16"))
                                                      (rule "replace_known_right" (formula "51") (term "0,0,1") (ifseqformula "41"))
                                                      (builtin "One Step Simplification" (formula "51"))
                                                      (rule "cut_direct" (formula "51") (term "0,1,0"))
                                                      (branch "CUT: self.right.value = z_1 TRUE"
                                                         (builtin "One Step Simplification" (formula "52"))
                                                         (rule "false_right" (formula "52"))
                                                         (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "30") (term "0") (ifseqformula "1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "30"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                         (rule "add_literals" (formula "2") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                         (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                         (rule "mul_literals" (formula "2") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                         (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "41"))
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "inEqSimp_homoInEq1" (formula "2"))
                                                         (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                         (rule "add_literals" (formula "2") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                         (rule "add_literals" (formula "2") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "2") (term "1,0"))
                                                         (rule "add_zero_right" (formula "2") (term "0"))
                                                         (rule "leq_literals" (formula "2"))
                                                         (rule "closeFalse" (formula "2"))
                                                      )
                                                      (branch "CUT: self.right.value = z_1 FALSE"
                                                         (builtin "One Step Simplification" (formula "52"))
                                                         (rule "cut_direct" (formula "52") (term "0,1"))
                                                         (branch "CUT: self.left.value = z_1 TRUE"
                                                            (builtin "One Step Simplification" (formula "53"))
                                                            (rule "false_right" (formula "53"))
                                                            (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                            (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "18"))
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "inEqSimp_homoInEq1" (formula "2"))
                                                            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                            (rule "add_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                            (rule "add_literals" (formula "2") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "2") (term "1,0"))
                                                            (rule "add_literals" (formula "2") (term "0"))
                                                            (rule "leq_literals" (formula "2"))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                         (branch "CUT: self.left.value = z_1 FALSE"
                                                            (builtin "One Step Simplification" (formula "53"))
                                                            (rule "cut_direct" (formula "53") (term "0,0"))
                                                            (branch "CUT: contains(z_1, self.right.right.values) TRUE"
                                                               (builtin "One Step Simplification" (formula "54"))
                                                               (rule "false_right" (formula "54"))
                                                               (rule "allLeft" (formula "29") (inst "t=z_1"))
                                                               (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "29"))
                                                               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "29"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                               (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                               (rule "mul_literals" (formula "2") (term "0,1"))
                                                               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                               (rule "inEqSimp_contradInEq1" (formula "42") (ifseqformula "2"))
                                                               (rule "andLeft" (formula "42"))
                                                               (rule "inEqSimp_homoInEq1" (formula "42"))
                                                               (rule "polySimp_mulComm0" (formula "42") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "42") (term "1,0"))
                                                               (rule "mul_literals" (formula "42") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "42") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "42") (term "0,0"))
                                                               (rule "add_literals" (formula "42") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "42") (term "0"))
                                                               (rule "add_literals" (formula "42") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "42") (term "1,0"))
                                                               (rule "add_zero_right" (formula "42") (term "0"))
                                                               (rule "leq_literals" (formula "42"))
                                                               (rule "closeFalse" (formula "42"))
                                                            )
                                                            (branch "CUT: contains(z_1, self.right.right.values) FALSE"
                                                               (builtin "One Step Simplification" (formula "54"))
                                                               (rule "notRight" (formula "54"))
                                                               (rule "allLeft" (formula "28") (inst "t=z_1"))
                                                               (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "28"))
                                                               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "28"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                               (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                               (rule "mul_literals" (formula "2") (term "0,1"))
                                                               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                               (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "42"))
                                                               (rule "andLeft" (formula "2"))
                                                               (rule "inEqSimp_homoInEq1" (formula "2"))
                                                               (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                               (rule "add_literals" (formula "2") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                               (rule "add_literals" (formula "2") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "2") (term "1,0"))
                                                               (rule "add_zero_right" (formula "2") (term "0"))
                                                               (rule "leq_literals" (formula "2"))
                                                               (rule "closeFalse" (formula "2"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "CUT: contains(result_1, self.right.left.values) FALSE"
                                                   (builtin "One Step Simplification" (formula "28"))
                                                   (rule "cut_direct" (formula "47") (term "0,1"))
                                                   (branch "CUT: self.value = z_1 TRUE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "false_right" (formula "48"))
                                                      (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "37") (term "0") (ifseqformula "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0"))
                                                      (rule "add_literals" (formula "37") (term "0"))
                                                      (rule "leq_literals" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch "CUT: self.value = z_1 FALSE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0,0,0") (ifseqformula "2"))
                                                      (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "45"))
                                                      (builtin "One Step Simplification" (formula "11"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,1,0,0") (ifseqformula "2"))
                                                      (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "48"))
                                                      (builtin "One Step Simplification" (formula "12"))
                                                      (rule "allLeft" (formula "15") (inst "t=z_1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "1"))
                                                      (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                                      (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "15") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "15") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "15"))
                                                      (rule "notLeft" (formula "15"))
                                                      (rule "replace_known_right" (formula "51") (term "0,1,0,1") (ifseqformula "41"))
                                                      (builtin "One Step Simplification" (formula "51"))
                                                      (rule "allLeft" (formula "16") (inst "t=z_1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "1"))
                                                      (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                                                      (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "16") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "16") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "16"))
                                                      (rule "notLeft" (formula "16"))
                                                      (rule "replace_known_right" (formula "52") (term "0,0,1") (ifseqformula "41"))
                                                      (builtin "One Step Simplification" (formula "52"))
                                                      (rule "cut_direct" (formula "52") (term "0,1"))
                                                      (branch "CUT: self.left.value = z_1 TRUE"
                                                         (builtin "One Step Simplification" (formula "53"))
                                                         (rule "false_right" (formula "53"))
                                                         (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "2"))
                                                         (rule "andLeft" (formula "18"))
                                                         (rule "inEqSimp_homoInEq1" (formula "18"))
                                                         (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                                                         (rule "mul_literals" (formula "18") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "18") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "18") (term "0,0"))
                                                         (rule "add_literals" (formula "18") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
                                                         (rule "add_literals" (formula "18") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "18") (term "1,0"))
                                                         (rule "add_literals" (formula "18") (term "0"))
                                                         (rule "leq_literals" (formula "18"))
                                                         (rule "closeFalse" (formula "18"))
                                                      )
                                                      (branch "CUT: self.left.value = z_1 FALSE"
                                                         (builtin "One Step Simplification" (formula "53"))
                                                         (rule "cut_direct" (formula "53") (term "0,1"))
                                                         (branch "CUT: self.right.value = z_1 TRUE"
                                                            (builtin "One Step Simplification" (formula "54"))
                                                            (rule "false_right" (formula "54"))
                                                            (rule "applyEq" (formula "30") (term "0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "30"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                            (rule "add_literals" (formula "2") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                            (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                            (rule "mul_literals" (formula "2") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                            (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "41"))
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "inEqSimp_homoInEq1" (formula "2"))
                                                            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                            (rule "add_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                            (rule "add_literals" (formula "2") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "2") (term "1,0"))
                                                            (rule "add_zero_right" (formula "2") (term "0"))
                                                            (rule "leq_literals" (formula "2"))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                         (branch "CUT: self.right.value = z_1 FALSE"
                                                            (builtin "One Step Simplification" (formula "54"))
                                                            (rule "cut_direct" (formula "54") (term "0,0"))
                                                            (branch "CUT: contains(z_1, self.right.right.values) TRUE"
                                                               (builtin "One Step Simplification" (formula "55"))
                                                               (rule "false_right" (formula "55"))
                                                               (rule "allLeft" (formula "29") (inst "t=z_1"))
                                                               (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "29"))
                                                               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "29"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                               (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                               (rule "mul_literals" (formula "2") (term "0,1"))
                                                               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                               (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "42"))
                                                               (rule "andLeft" (formula "2"))
                                                               (rule "inEqSimp_homoInEq1" (formula "2"))
                                                               (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                               (rule "add_literals" (formula "2") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                               (rule "add_literals" (formula "2") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "2") (term "1,0"))
                                                               (rule "add_zero_right" (formula "2") (term "0"))
                                                               (rule "leq_literals" (formula "2"))
                                                               (rule "closeFalse" (formula "2"))
                                                            )
                                                            (branch "CUT: contains(z_1, self.right.right.values) FALSE"
                                                               (builtin "One Step Simplification" (formula "55"))
                                                               (rule "notRight" (formula "55"))
                                                               (rule "allLeft" (formula "28") (inst "t=z_1"))
                                                               (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "28"))
                                                               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "28"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                               (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                               (rule "mul_literals" (formula "2") (term "0,1"))
                                                               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                               (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "42"))
                                                               (rule "andLeft" (formula "2"))
                                                               (rule "inEqSimp_homoInEq1" (formula "2"))
                                                               (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                               (rule "add_literals" (formula "2") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                               (rule "add_literals" (formula "2") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "2") (term "1,0"))
                                                               (rule "add_literals" (formula "2") (term "0"))
                                                               (rule "leq_literals" (formula "2"))
                                                               (rule "closeFalse" (formula "2"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: contains(result_0, self.left.left.values) FALSE"
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "cut_direct" (formula "28") (term "1"))
                                                (branch "CUT: contains(result_1, self.right.left.values) TRUE"
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "true_left" (formula "29"))
                                                   (rule "cut_direct" (formula "47") (term "0,1"))
                                                   (branch "CUT: self.value = z_1 TRUE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "false_right" (formula "48"))
                                                      (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "37") (term "0") (ifseqformula "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0"))
                                                      (rule "add_literals" (formula "37") (term "0"))
                                                      (rule "leq_literals" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch "CUT: self.value = z_1 FALSE"
                                                      (builtin "One Step Simplification" (formula "48"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,0") (ifseqformula "2"))
                                                      (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "45"))
                                                      (builtin "One Step Simplification" (formula "10"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "2"))
                                                      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "allLeft" (formula "15") (inst "t=z_1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                                      (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "15") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "15") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "15"))
                                                      (rule "notLeft" (formula "15"))
                                                      (rule "replace_known_right" (formula "51") (term "0,1,0,1") (ifseqformula "41"))
                                                      (builtin "One Step Simplification" (formula "51"))
                                                      (rule "allLeft" (formula "16") (inst "t=z_1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                                                      (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "16") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "16") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "16"))
                                                      (rule "notLeft" (formula "16"))
                                                      (rule "replace_known_right" (formula "52") (term "0,0,1") (ifseqformula "41"))
                                                      (builtin "One Step Simplification" (formula "52"))
                                                      (rule "cut_direct" (formula "52") (term "0,1"))
                                                      (branch "CUT: self.left.value = z_1 TRUE"
                                                         (builtin "One Step Simplification" (formula "53"))
                                                         (rule "false_right" (formula "53"))
                                                         (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                         (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "18"))
                                                         (rule "andLeft" (formula "3"))
                                                         (rule "inEqSimp_homoInEq1" (formula "3"))
                                                         (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                         (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                         (rule "add_literals" (formula "3") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                         (rule "add_literals" (formula "3") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "3") (term "1,0"))
                                                         (rule "add_literals" (formula "3") (term "0"))
                                                         (rule "leq_literals" (formula "3"))
                                                         (rule "closeFalse" (formula "3"))
                                                      )
                                                      (branch "CUT: self.left.value = z_1 FALSE"
                                                         (builtin "One Step Simplification" (formula "53"))
                                                         (rule "cut_direct" (formula "53") (term "0,1"))
                                                         (branch "CUT: self.right.value = z_1 TRUE"
                                                            (builtin "One Step Simplification" (formula "54"))
                                                            (rule "false_right" (formula "54"))
                                                            (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "30") (term "0") (ifseqformula "1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "30"))
                                                            (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                            (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                            (rule "add_literals" (formula "3") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                            (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                            (rule "mul_literals" (formula "3") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                            (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "41"))
                                                            (rule "andLeft" (formula "3"))
                                                            (rule "inEqSimp_homoInEq1" (formula "3"))
                                                            (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                            (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                            (rule "add_literals" (formula "3") (term "0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                            (rule "add_literals" (formula "3") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "3") (term "1,0"))
                                                            (rule "add_zero_right" (formula "3") (term "0"))
                                                            (rule "leq_literals" (formula "3"))
                                                            (rule "closeFalse" (formula "3"))
                                                         )
                                                         (branch "CUT: self.right.value = z_1 FALSE"
                                                            (builtin "One Step Simplification" (formula "54"))
                                                            (rule "cut_direct" (formula "54") (term "0,0"))
                                                            (branch "CUT: contains(z_1, self.right.right.values) TRUE"
                                                               (builtin "One Step Simplification" (formula "55"))
                                                               (rule "false_right" (formula "55"))
                                                               (rule "allLeft" (formula "29") (inst "t=z_1"))
                                                               (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "29"))
                                                               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "29"))
                                                               (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                               (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                               (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                               (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                               (rule "mul_literals" (formula "3") (term "0,1"))
                                                               (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                               (rule "inEqSimp_contradInEq1" (formula "42") (ifseqformula "3"))
                                                               (rule "andLeft" (formula "42"))
                                                               (rule "inEqSimp_homoInEq1" (formula "42"))
                                                               (rule "polySimp_mulComm0" (formula "42") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "42") (term "1,0"))
                                                               (rule "mul_literals" (formula "42") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "42") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "42") (term "0,0"))
                                                               (rule "add_literals" (formula "42") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "42") (term "0"))
                                                               (rule "add_literals" (formula "42") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "42") (term "1,0"))
                                                               (rule "add_zero_right" (formula "42") (term "0"))
                                                               (rule "leq_literals" (formula "42"))
                                                               (rule "closeFalse" (formula "42"))
                                                            )
                                                            (branch "CUT: contains(z_1, self.right.right.values) FALSE"
                                                               (builtin "One Step Simplification" (formula "55"))
                                                               (rule "notRight" (formula "55"))
                                                               (rule "allLeft" (formula "28") (inst "t=z_1"))
                                                               (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "28"))
                                                               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "28"))
                                                               (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                               (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                               (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                               (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                               (rule "mul_literals" (formula "3") (term "0,1"))
                                                               (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                               (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "42"))
                                                               (rule "andLeft" (formula "3"))
                                                               (rule "inEqSimp_homoInEq1" (formula "3"))
                                                               (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                               (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                               (rule "add_literals" (formula "3") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                               (rule "add_literals" (formula "3") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "3") (term "1,0"))
                                                               (rule "add_literals" (formula "3") (term "0"))
                                                               (rule "leq_literals" (formula "3"))
                                                               (rule "closeFalse" (formula "3"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "CUT: contains(result_1, self.right.left.values) FALSE"
                                                   (builtin "One Step Simplification" (formula "28"))
                                                   (rule "cut_direct" (formula "48") (term "0,1"))
                                                   (branch "CUT: self.value = z_1 TRUE"
                                                      (builtin "One Step Simplification" (formula "49"))
                                                      (rule "false_right" (formula "49"))
                                                      (rule "applyEq" (formula "37") (term "0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0"))
                                                      (rule "add_zero_right" (formula "37") (term "0"))
                                                      (rule "leq_literals" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch "CUT: self.value = z_1 FALSE"
                                                      (builtin "One Step Simplification" (formula "49"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,1,0,0") (ifseqformula "2"))
                                                      (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "48"))
                                                      (builtin "One Step Simplification" (formula "11"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,0,0,0") (ifseqformula "2"))
                                                      (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "47"))
                                                      (builtin "One Step Simplification" (formula "12"))
                                                      (rule "allLeft" (formula "15") (inst "t=z_1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "1"))
                                                      (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                                      (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "15") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "15") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "15"))
                                                      (rule "notLeft" (formula "15"))
                                                      (rule "replace_known_right" (formula "52") (term "0,1,0,1") (ifseqformula "41"))
                                                      (builtin "One Step Simplification" (formula "52"))
                                                      (rule "allLeft" (formula "16") (inst "t=z_1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "1"))
                                                      (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                                                      (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "16") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "16") (term "0,1"))
                                                      (builtin "One Step Simplification" (formula "16"))
                                                      (rule "notLeft" (formula "16"))
                                                      (rule "replace_known_right" (formula "53") (term "0,0,1") (ifseqformula "41"))
                                                      (builtin "One Step Simplification" (formula "53"))
                                                      (rule "cut_direct" (formula "53") (term "0,1"))
                                                      (branch "CUT: self.left.value = z_1 TRUE"
                                                         (builtin "One Step Simplification" (formula "54"))
                                                         (rule "false_right" (formula "54"))
                                                         (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                         (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "18"))
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "inEqSimp_homoInEq1" (formula "2"))
                                                         (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                         (rule "add_literals" (formula "2") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                         (rule "add_literals" (formula "2") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "2") (term "1,0"))
                                                         (rule "add_zero_right" (formula "2") (term "0"))
                                                         (rule "leq_literals" (formula "2"))
                                                         (rule "closeFalse" (formula "2"))
                                                      )
                                                      (branch "CUT: self.left.value = z_1 FALSE"
                                                         (builtin "One Step Simplification" (formula "54"))
                                                         (rule "cut_direct" (formula "54") (term "0,1"))
                                                         (branch "CUT: self.right.value = z_1 TRUE"
                                                            (builtin "One Step Simplification" (formula "55"))
                                                            (rule "false_right" (formula "55"))
                                                            (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "30") (term "0") (ifseqformula "1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "30"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                            (rule "add_literals" (formula "2") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                            (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                            (rule "mul_literals" (formula "2") (term "0,1"))
                                                            (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                            (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "41"))
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "inEqSimp_homoInEq1" (formula "2"))
                                                            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                            (rule "add_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                            (rule "add_literals" (formula "2") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "2") (term "1,0"))
                                                            (rule "add_zero_right" (formula "2") (term "0"))
                                                            (rule "leq_literals" (formula "2"))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                         (branch "CUT: self.right.value = z_1 FALSE"
                                                            (builtin "One Step Simplification" (formula "55"))
                                                            (rule "cut_direct" (formula "55") (term "0,0"))
                                                            (branch "CUT: contains(z_1, self.right.right.values) TRUE"
                                                               (builtin "One Step Simplification" (formula "56"))
                                                               (rule "false_right" (formula "56"))
                                                               (rule "allLeft" (formula "29") (inst "t=z_1"))
                                                               (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "29"))
                                                               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "29"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                               (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                               (rule "mul_literals" (formula "2") (term "0,1"))
                                                               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                               (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "42"))
                                                               (rule "andLeft" (formula "2"))
                                                               (rule "inEqSimp_homoInEq1" (formula "2"))
                                                               (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                               (rule "add_literals" (formula "2") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                               (rule "add_literals" (formula "2") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "2") (term "1,0"))
                                                               (rule "add_literals" (formula "2") (term "0"))
                                                               (rule "leq_literals" (formula "2"))
                                                               (rule "closeFalse" (formula "2"))
                                                            )
                                                            (branch "CUT: contains(z_1, self.right.right.values) FALSE"
                                                               (builtin "One Step Simplification" (formula "56"))
                                                               (rule "notRight" (formula "56"))
                                                               (rule "allLeft" (formula "28") (inst "t=z_1"))
                                                               (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "28"))
                                                               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "28"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                               (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                               (rule "mul_literals" (formula "2") (term "0,1"))
                                                               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                               (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "42"))
                                                               (rule "andLeft" (formula "2"))
                                                               (rule "inEqSimp_homoInEq1" (formula "2"))
                                                               (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                               (rule "add_literals" (formula "2") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                               (rule "add_literals" (formula "2") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "2") (term "1,0"))
                                                               (rule "add_literals" (formula "2") (term "0"))
                                                               (rule "leq_literals" (formula "2"))
                                                               (rule "closeFalse" (formula "2"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: result_2 = result_0 FALSE"
                                             (builtin "One Step Simplification" (formula "38"))
                                             (rule "replace_known_left" (formula "47") (term "1,1") (ifseqformula "38"))
                                             (builtin "One Step Simplification" (formula "47"))
                                             (rule "allRight" (formula "47") (inst "sk=z_0"))
                                             (rule "orRight" (formula "47"))
                                             (rule "eqSymm" (formula "47") (term "0,1,0,0"))
                                             (rule "eqSymm" (formula "47") (term "0,1,1,0"))
                                             (rule "eqSymm" (formula "47") (term "0,1"))
                                             (rule "inEqSimp_leqRight" (formula "48"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "applyEq" (formula "36") (term "0") (ifseqformula "39"))
                                             (rule "inEqSimp_homoInEq0" (formula "36"))
                                             (rule "polySimp_pullOutFactor1" (formula "36") (term "0"))
                                             (rule "add_literals" (formula "36") (term "1,0"))
                                             (rule "times_zero_1" (formula "36") (term "0"))
                                             (rule "qeq_literals" (formula "36"))
                                             (rule "true_left" (formula "36"))
                                             (rule "applyEq" (formula "11") (term "0,1,0") (ifseqformula "38"))
                                             (rule "applyEq" (formula "47") (term "0,0,1") (ifseqformula "38"))
                                             (rule "eqSymm" (formula "47") (term "0,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                             (rule "inEqSimp_contradEq7" (formula "47") (term "0,1") (ifseqformula "1"))
                                             (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,0,0,1"))
                                             (rule "add_literals" (formula "47") (term "1,1,0,0,0,1"))
                                             (rule "times_zero_1" (formula "47") (term "1,0,0,0,1"))
                                             (rule "add_literals" (formula "47") (term "0,0,0,1"))
                                             (rule "leq_literals" (formula "47") (term "0,0,1"))
                                             (builtin "One Step Simplification" (formula "47"))
                                             (rule "inEqSimp_strengthen1" (formula "36") (ifseqformula "39"))
                                             (rule "inEqSimp_contradEq7" (formula "39") (ifseqformula "36"))
                                             (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0"))
                                             (rule "add_literals" (formula "39") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "39") (term "1,0,0"))
                                             (rule "add_literals" (formula "39") (term "0,0"))
                                             (rule "leq_literals" (formula "39") (term "0"))
                                             (builtin "One Step Simplification" (formula "39"))
                                             (rule "false_right" (formula "39"))
                                             (rule "cut_direct" (formula "16") (term "1"))
                                             (branch "CUT: contains(result_0, self.left.left.values) TRUE"
                                                (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "cut_direct" (formula "28") (term "1"))
                                                (branch "CUT: contains(result_1, self.right.left.values) TRUE"
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "true_left" (formula "29"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,0") (ifseqformula "2"))
                                                   (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "44"))
                                                   (builtin "One Step Simplification" (formula "10"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "2"))
                                                   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "cut_direct" (formula "48") (term "0,1,0"))
                                                   (branch "CUT: self.right.value = z_0 TRUE"
                                                      (builtin "One Step Simplification" (formula "49"))
                                                      (rule "false_right" (formula "49"))
                                                      (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "30") (term "0") (ifseqformula "1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "30"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                      (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                      (rule "add_literals" (formula "3") (term "0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "41"))
                                                      (rule "andLeft" (formula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "3"))
                                                      (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                      (rule "add_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                      (rule "add_literals" (formula "3") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "3") (term "1,0"))
                                                      (rule "add_zero_right" (formula "3") (term "0"))
                                                      (rule "leq_literals" (formula "3"))
                                                      (rule "closeFalse" (formula "3"))
                                                   )
                                                   (branch "CUT: self.right.value = z_0 FALSE"
                                                      (builtin "One Step Simplification" (formula "49"))
                                                      (rule "cut_direct" (formula "49") (term "0,1,1"))
                                                      (branch "CUT: self.left.value = z_0 TRUE"
                                                         (builtin "One Step Simplification" (formula "50"))
                                                         (rule "false_right" (formula "50"))
                                                         (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "18"))
                                                         (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                         (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                         (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                         (rule "add_literals" (formula "3") (term "0,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                         (rule "inEqSimp_contradInEq0" (formula "40") (ifseqformula "3"))
                                                         (rule "andLeft" (formula "40"))
                                                         (rule "inEqSimp_homoInEq1" (formula "40"))
                                                         (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "40") (term "1,0"))
                                                         (rule "mul_literals" (formula "40") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "40") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                                                         (rule "add_literals" (formula "40") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "40") (term "0"))
                                                         (rule "add_literals" (formula "40") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "40") (term "1,0"))
                                                         (rule "add_zero_right" (formula "40") (term "0"))
                                                         (rule "leq_literals" (formula "40"))
                                                         (rule "closeFalse" (formula "40"))
                                                      )
                                                      (branch "CUT: self.left.value = z_0 FALSE"
                                                         (builtin "One Step Simplification" (formula "50"))
                                                         (rule "cut_direct" (formula "50") (term "0,1,0"))
                                                         (branch "CUT: contains(z_0, self.right.left.values) TRUE"
                                                            (builtin "One Step Simplification" (formula "51"))
                                                            (rule "false_right" (formula "51"))
                                                            (rule "allLeft" (formula "28") (inst "t=z_0"))
                                                            (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "28"))
                                                            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "28"))
                                                            (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                            (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                            (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "42"))
                                                            (rule "andLeft" (formula "3"))
                                                            (rule "inEqSimp_homoInEq1" (formula "3"))
                                                            (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                            (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                            (rule "add_literals" (formula "3") (term "0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                            (rule "add_literals" (formula "3") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "3") (term "1,0"))
                                                            (rule "add_literals" (formula "3") (term "0"))
                                                            (rule "leq_literals" (formula "3"))
                                                            (rule "closeFalse" (formula "3"))
                                                         )
                                                         (branch "CUT: contains(z_0, self.right.left.values) FALSE"
                                                            (builtin "One Step Simplification" (formula "51"))
                                                            (rule "cut_direct" (formula "51") (term "0,0,1"))
                                                            (branch "CUT: contains(z_0, self.left.right.values) TRUE"
                                                               (builtin "One Step Simplification" (formula "52"))
                                                               (rule "false_right" (formula "52"))
                                                               (rule "allLeft" (formula "17") (inst "t=z_0"))
                                                               (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "17"))
                                                               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "17"))
                                                               (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                               (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                               (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                               (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "3"))
                                                               (rule "andLeft" (formula "41"))
                                                               (rule "inEqSimp_homoInEq1" (formula "41"))
                                                               (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                               (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                               (rule "add_literals" (formula "41") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                               (rule "add_literals" (formula "41") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "41") (term "1,0"))
                                                               (rule "add_zero_right" (formula "41") (term "0"))
                                                               (rule "leq_literals" (formula "41"))
                                                               (rule "closeFalse" (formula "41"))
                                                            )
                                                            (branch "CUT: contains(z_0, self.left.right.values) FALSE"
                                                               (builtin "One Step Simplification" (formula "52"))
                                                               (rule "cut_direct" (formula "52") (term "0,0"))
                                                               (branch "CUT: contains(z_0, self.right.right.values) TRUE"
                                                                  (builtin "One Step Simplification" (formula "53"))
                                                                  (rule "false_right" (formula "53"))
                                                                  (rule "allLeft" (formula "29") (inst "t=z_0"))
                                                                  (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "1"))
                                                                  (builtin "One Step Simplification" (formula "29"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "29"))
                                                                  (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                                  (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                                  (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                                  (rule "inEqSimp_contradInEq0" (formula "42") (ifseqformula "3"))
                                                                  (rule "andLeft" (formula "42"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "42"))
                                                                  (rule "polySimp_mulComm0" (formula "42") (term "1,0"))
                                                                  (rule "polySimp_rightDist" (formula "42") (term "1,0"))
                                                                  (rule "mul_literals" (formula "42") (term "0,1,0"))
                                                                  (rule "polySimp_addAssoc" (formula "42") (term "0"))
                                                                  (rule "polySimp_addComm1" (formula "42") (term "0,0"))
                                                                  (rule "add_literals" (formula "42") (term "0,0,0"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "42") (term "0"))
                                                                  (rule "add_literals" (formula "42") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "42") (term "1,0"))
                                                                  (rule "add_literals" (formula "42") (term "0"))
                                                                  (rule "leq_literals" (formula "42"))
                                                                  (rule "closeFalse" (formula "42"))
                                                               )
                                                               (branch "CUT: contains(z_0, self.right.right.values) FALSE"
                                                                  (builtin "One Step Simplification" (formula "53"))
                                                                  (rule "notRight" (formula "53"))
                                                                  (rule "allLeft" (formula "16") (inst "t=z_0"))
                                                                  (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                                  (builtin "One Step Simplification" (formula "16"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "16"))
                                                                  (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                                  (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                                  (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                                  (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "41"))
                                                                  (rule "andLeft" (formula "3"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "3"))
                                                                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                                  (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                                  (rule "add_literals" (formula "3") (term "0,0,0"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                                  (rule "add_literals" (formula "3") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "3") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "3") (term "0"))
                                                                  (rule "leq_literals" (formula "3"))
                                                                  (rule "closeFalse" (formula "3"))
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "CUT: contains(result_1, self.right.left.values) FALSE"
                                                   (builtin "One Step Simplification" (formula "28"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,0") (ifseqformula "2"))
                                                   (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "45"))
                                                   (builtin "One Step Simplification" (formula "10"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "2"))
                                                   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
                                                   (builtin "One Step Simplification" (formula "1"))
                                                   (rule "cut_direct" (formula "49") (term "0,1,1"))
                                                   (branch "CUT: self.left.value = z_0 TRUE"
                                                      (builtin "One Step Simplification" (formula "50"))
                                                      (rule "false_right" (formula "50"))
                                                      (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "18"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                      (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                      (rule "add_literals" (formula "3") (term "0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "40"))
                                                      (rule "andLeft" (formula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "3"))
                                                      (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                      (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                      (rule "add_literals" (formula "3") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                      (rule "add_literals" (formula "3") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "3") (term "1,0"))
                                                      (rule "add_zero_right" (formula "3") (term "0"))
                                                      (rule "leq_literals" (formula "3"))
                                                      (rule "closeFalse" (formula "3"))
                                                   )
                                                   (branch "CUT: self.left.value = z_0 FALSE"
                                                      (builtin "One Step Simplification" (formula "50"))
                                                      (rule "cut_direct" (formula "50") (term "0,1,0"))
                                                      (branch "CUT: self.right.value = z_0 TRUE"
                                                         (builtin "One Step Simplification" (formula "51"))
                                                         (rule "false_right" (formula "51"))
                                                         (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "30") (term "0") (ifseqformula "1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "30"))
                                                         (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                         (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                         (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                         (rule "add_literals" (formula "3") (term "0,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                         (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "3"))
                                                         (rule "andLeft" (formula "41"))
                                                         (rule "inEqSimp_homoInEq1" (formula "41"))
                                                         (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                         (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                         (rule "add_literals" (formula "41") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                         (rule "add_literals" (formula "41") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "41") (term "1,0"))
                                                         (rule "add_literals" (formula "41") (term "0"))
                                                         (rule "leq_literals" (formula "41"))
                                                         (rule "closeFalse" (formula "41"))
                                                      )
                                                      (branch "CUT: self.right.value = z_0 FALSE"
                                                         (builtin "One Step Simplification" (formula "51"))
                                                         (rule "cut_direct" (formula "51") (term "0,0,1"))
                                                         (branch "CUT: contains(z_0, self.left.right.values) TRUE"
                                                            (builtin "One Step Simplification" (formula "52"))
                                                            (rule "false_right" (formula "52"))
                                                            (rule "allLeft" (formula "17") (inst "t=z_0"))
                                                            (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "17"))
                                                            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "17"))
                                                            (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                            (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                            (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "3"))
                                                            (rule "andLeft" (formula "41"))
                                                            (rule "inEqSimp_homoInEq1" (formula "41"))
                                                            (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                            (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                            (rule "add_literals" (formula "41") (term "0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                            (rule "add_literals" (formula "41") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "41") (term "1,0"))
                                                            (rule "add_zero_right" (formula "41") (term "0"))
                                                            (rule "leq_literals" (formula "41"))
                                                            (rule "closeFalse" (formula "41"))
                                                         )
                                                         (branch "CUT: contains(z_0, self.left.right.values) FALSE"
                                                            (builtin "One Step Simplification" (formula "52"))
                                                            (rule "cut_direct" (formula "52") (term "0,0,0"))
                                                            (branch "CUT: contains(z_0, self.right.right.values) TRUE"
                                                               (builtin "One Step Simplification" (formula "53"))
                                                               (rule "false_right" (formula "53"))
                                                               (rule "allLeft" (formula "29") (inst "t=z_0"))
                                                               (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "29"))
                                                               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "29"))
                                                               (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                               (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                               (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                               (rule "inEqSimp_contradInEq0" (formula "42") (ifseqformula "3"))
                                                               (rule "andLeft" (formula "42"))
                                                               (rule "inEqSimp_homoInEq1" (formula "42"))
                                                               (rule "polySimp_mulComm0" (formula "42") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "42") (term "1,0"))
                                                               (rule "mul_literals" (formula "42") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "42") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "42") (term "0,0"))
                                                               (rule "add_literals" (formula "42") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "42") (term "0"))
                                                               (rule "add_literals" (formula "42") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "42") (term "1,0"))
                                                               (rule "add_literals" (formula "42") (term "0"))
                                                               (rule "leq_literals" (formula "42"))
                                                               (rule "closeFalse" (formula "42"))
                                                            )
                                                            (branch "CUT: contains(z_0, self.right.right.values) FALSE"
                                                               (builtin "One Step Simplification" (formula "53"))
                                                               (rule "cut_direct" (formula "53") (term "0,0"))
                                                               (branch "CUT: contains(z_0, self.right.left.values) TRUE"
                                                                  (builtin "One Step Simplification" (formula "54"))
                                                                  (rule "false_right" (formula "54"))
                                                                  (rule "allLeft" (formula "28") (inst "t=z_0"))
                                                                  (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "1"))
                                                                  (builtin "One Step Simplification" (formula "28"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "28"))
                                                                  (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                                  (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                                  (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                                  (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "42"))
                                                                  (rule "andLeft" (formula "3"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "3"))
                                                                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                                  (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                                  (rule "add_literals" (formula "3") (term "0,0,0"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                                  (rule "add_literals" (formula "3") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "3") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "3") (term "0"))
                                                                  (rule "leq_literals" (formula "3"))
                                                                  (rule "closeFalse" (formula "3"))
                                                               )
                                                               (branch "CUT: contains(z_0, self.right.left.values) FALSE"
                                                                  (builtin "One Step Simplification" (formula "54"))
                                                                  (rule "notRight" (formula "54"))
                                                                  (rule "allLeft" (formula "16") (inst "t=z_0"))
                                                                  (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                                  (builtin "One Step Simplification" (formula "16"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "16"))
                                                                  (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                                  (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                                  (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                                  (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "3"))
                                                                  (rule "andLeft" (formula "41"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "41"))
                                                                  (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                                  (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                                  (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                                  (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                                  (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                                  (rule "add_literals" (formula "41") (term "0,0,0"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                                  (rule "add_literals" (formula "41") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "41") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "41") (term "0"))
                                                                  (rule "leq_literals" (formula "41"))
                                                                  (rule "closeFalse" (formula "41"))
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: contains(result_0, self.left.left.values) FALSE"
                                                (builtin "One Step Simplification" (formula "16"))
                                                (rule "cut_direct" (formula "28") (term "1"))
                                                (branch "CUT: contains(result_1, self.right.left.values) TRUE"
                                                   (builtin "One Step Simplification" (formula "29"))
                                                   (rule "true_left" (formula "29"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,0") (ifseqformula "2"))
                                                   (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "45"))
                                                   (builtin "One Step Simplification" (formula "10"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,1,0,0") (ifseqformula "2"))
                                                   (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "48"))
                                                   (builtin "One Step Simplification" (formula "12"))
                                                   (rule "cut_direct" (formula "49") (term "0,1,1"))
                                                   (branch "CUT: self.left.value = z_0 TRUE"
                                                      (builtin "One Step Simplification" (formula "50"))
                                                      (rule "false_right" (formula "50"))
                                                      (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "18"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                      (rule "add_literals" (formula "2") (term "0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "40"))
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "2"))
                                                      (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                      (rule "add_literals" (formula "2") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                      (rule "add_literals" (formula "2") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "2") (term "1,0"))
                                                      (rule "add_zero_right" (formula "2") (term "0"))
                                                      (rule "leq_literals" (formula "2"))
                                                      (rule "closeFalse" (formula "2"))
                                                   )
                                                   (branch "CUT: self.left.value = z_0 FALSE"
                                                      (builtin "One Step Simplification" (formula "50"))
                                                      (rule "cut_direct" (formula "50") (term "0,1,0"))
                                                      (branch "CUT: self.right.value = z_0 TRUE"
                                                         (builtin "One Step Simplification" (formula "51"))
                                                         (rule "false_right" (formula "51"))
                                                         (rule "applyEq" (formula "30") (term "0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "30"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                         (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                         (rule "add_literals" (formula "2") (term "0,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                         (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "41"))
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "inEqSimp_homoInEq1" (formula "2"))
                                                         (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                         (rule "add_literals" (formula "2") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                         (rule "add_literals" (formula "2") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "2") (term "1,0"))
                                                         (rule "add_literals" (formula "2") (term "0"))
                                                         (rule "leq_literals" (formula "2"))
                                                         (rule "closeFalse" (formula "2"))
                                                      )
                                                      (branch "CUT: self.right.value = z_0 FALSE"
                                                         (builtin "One Step Simplification" (formula "51"))
                                                         (rule "cut_direct" (formula "51") (term "0,1,1"))
                                                         (branch "CUT: contains(z_0, self.left.left.values) TRUE"
                                                            (builtin "One Step Simplification" (formula "52"))
                                                            (rule "false_right" (formula "52"))
                                                            (rule "allLeft" (formula "16") (inst "t=z_0"))
                                                            (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "16"))
                                                            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "16"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                            (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "41"))
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "inEqSimp_homoInEq1" (formula "2"))
                                                            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                            (rule "add_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                            (rule "add_literals" (formula "2") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "2") (term "1,0"))
                                                            (rule "add_zero_right" (formula "2") (term "0"))
                                                            (rule "leq_literals" (formula "2"))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                         (branch "CUT: contains(z_0, self.left.left.values) FALSE"
                                                            (builtin "One Step Simplification" (formula "52"))
                                                            (rule "cut_direct" (formula "52") (term "0,1,0"))
                                                            (branch "CUT: contains(z_0, self.right.left.values) TRUE"
                                                               (builtin "One Step Simplification" (formula "53"))
                                                               (rule "false_right" (formula "53"))
                                                               (rule "allLeft" (formula "28") (inst "t=z_0"))
                                                               (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "28"))
                                                               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "28"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                               (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "42"))
                                                               (rule "andLeft" (formula "2"))
                                                               (rule "inEqSimp_homoInEq1" (formula "2"))
                                                               (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                               (rule "add_literals" (formula "2") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                               (rule "add_literals" (formula "2") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "2") (term "1,0"))
                                                               (rule "add_literals" (formula "2") (term "0"))
                                                               (rule "leq_literals" (formula "2"))
                                                               (rule "closeFalse" (formula "2"))
                                                            )
                                                            (branch "CUT: contains(z_0, self.right.left.values) FALSE"
                                                               (builtin "One Step Simplification" (formula "53"))
                                                               (rule "cut_direct" (formula "53") (term "0,0"))
                                                               (branch "CUT: contains(z_0, self.right.right.values) TRUE"
                                                                  (builtin "One Step Simplification" (formula "54"))
                                                                  (rule "false_right" (formula "54"))
                                                                  (rule "allLeft" (formula "29") (inst "t=z_0"))
                                                                  (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "1"))
                                                                  (builtin "One Step Simplification" (formula "29"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "29"))
                                                                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                                  (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                                  (rule "inEqSimp_contradInEq0" (formula "42") (ifseqformula "2"))
                                                                  (rule "andLeft" (formula "42"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "42"))
                                                                  (rule "polySimp_mulComm0" (formula "42") (term "1,0"))
                                                                  (rule "polySimp_rightDist" (formula "42") (term "1,0"))
                                                                  (rule "mul_literals" (formula "42") (term "0,1,0"))
                                                                  (rule "polySimp_addAssoc" (formula "42") (term "0"))
                                                                  (rule "polySimp_addComm1" (formula "42") (term "0,0"))
                                                                  (rule "add_literals" (formula "42") (term "0,0,0"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "42") (term "0"))
                                                                  (rule "add_literals" (formula "42") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "42") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "42") (term "0"))
                                                                  (rule "leq_literals" (formula "42"))
                                                                  (rule "closeFalse" (formula "42"))
                                                               )
                                                               (branch "CUT: contains(z_0, self.right.right.values) FALSE"
                                                                  (builtin "One Step Simplification" (formula "54"))
                                                                  (rule "notRight" (formula "54"))
                                                                  (rule "allLeft" (formula "17") (inst "t=z_0"))
                                                                  (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                                  (builtin "One Step Simplification" (formula "17"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "17"))
                                                                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                                  (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                                  (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "2"))
                                                                  (rule "andLeft" (formula "41"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "41"))
                                                                  (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                                  (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                                  (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                                  (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                                  (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                                  (rule "add_literals" (formula "41") (term "0,0,0"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                                  (rule "add_literals" (formula "41") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "41") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "41") (term "0"))
                                                                  (rule "leq_literals" (formula "41"))
                                                                  (rule "closeFalse" (formula "41"))
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "CUT: contains(result_1, self.right.left.values) FALSE"
                                                   (builtin "One Step Simplification" (formula "28"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,0") (ifseqformula "2"))
                                                   (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "46"))
                                                   (builtin "One Step Simplification" (formula "10"))
                                                   (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,1,0,0") (ifseqformula "2"))
                                                   (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "49"))
                                                   (builtin "One Step Simplification" (formula "12"))
                                                   (rule "cut_direct" (formula "50") (term "0,1,0"))
                                                   (branch "CUT: self.right.value = z_0 TRUE"
                                                      (builtin "One Step Simplification" (formula "51"))
                                                      (rule "false_right" (formula "51"))
                                                      (rule "applyEq" (formula "30") (term "0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "30"))
                                                      (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                      (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                      (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                      (rule "add_literals" (formula "2") (term "0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                      (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "2"))
                                                      (rule "andLeft" (formula "41"))
                                                      (rule "inEqSimp_homoInEq1" (formula "41"))
                                                      (rule "polySimp_mulComm0" (formula "41") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "41") (term "1,0"))
                                                      (rule "mul_literals" (formula "41") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "41") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                      (rule "add_literals" (formula "41") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "41") (term "0"))
                                                      (rule "add_literals" (formula "41") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "41") (term "1,0"))
                                                      (rule "add_literals" (formula "41") (term "0"))
                                                      (rule "leq_literals" (formula "41"))
                                                      (rule "closeFalse" (formula "41"))
                                                   )
                                                   (branch "CUT: self.right.value = z_0 FALSE"
                                                      (builtin "One Step Simplification" (formula "51"))
                                                      (rule "cut_direct" (formula "51") (term "0,1,1"))
                                                      (branch "CUT: self.left.value = z_0 TRUE"
                                                         (builtin "One Step Simplification" (formula "52"))
                                                         (rule "false_right" (formula "52"))
                                                         (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "18"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                         (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                         (rule "add_literals" (formula "2") (term "0,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                         (rule "inEqSimp_contradInEq0" (formula "40") (ifseqformula "2"))
                                                         (rule "andLeft" (formula "40"))
                                                         (rule "inEqSimp_homoInEq1" (formula "40"))
                                                         (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "40") (term "1,0"))
                                                         (rule "mul_literals" (formula "40") (term "0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "40") (term "0"))
                                                         (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                                                         (rule "add_literals" (formula "40") (term "0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "40") (term "0"))
                                                         (rule "add_literals" (formula "40") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "40") (term "1,0"))
                                                         (rule "add_literals" (formula "40") (term "0"))
                                                         (rule "leq_literals" (formula "40"))
                                                         (rule "closeFalse" (formula "40"))
                                                      )
                                                      (branch "CUT: self.left.value = z_0 FALSE"
                                                         (builtin "One Step Simplification" (formula "52"))
                                                         (rule "cut_direct" (formula "52") (term "0,1,0"))
                                                         (branch "CUT: contains(z_0, self.right.left.values) TRUE"
                                                            (builtin "One Step Simplification" (formula "53"))
                                                            (rule "false_right" (formula "53"))
                                                            (rule "allLeft" (formula "28") (inst "t=z_0"))
                                                            (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "1"))
                                                            (builtin "One Step Simplification" (formula "28"))
                                                            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "28"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                            (rule "inEqSimp_contradInEq0" (formula "42") (ifseqformula "2"))
                                                            (rule "andLeft" (formula "42"))
                                                            (rule "inEqSimp_homoInEq1" (formula "42"))
                                                            (rule "polySimp_mulComm0" (formula "42") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "42") (term "1,0"))
                                                            (rule "mul_literals" (formula "42") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "42") (term "0"))
                                                            (rule "polySimp_addComm1" (formula "42") (term "0,0"))
                                                            (rule "add_literals" (formula "42") (term "0,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "42") (term "0"))
                                                            (rule "add_literals" (formula "42") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "42") (term "1,0"))
                                                            (rule "add_literals" (formula "42") (term "0"))
                                                            (rule "leq_literals" (formula "42"))
                                                            (rule "closeFalse" (formula "42"))
                                                         )
                                                         (branch "CUT: contains(z_0, self.right.left.values) FALSE"
                                                            (builtin "One Step Simplification" (formula "53"))
                                                            (rule "cut_direct" (formula "53") (term "0,0"))
                                                            (branch "CUT: contains(z_0, self.right.right.values) TRUE"
                                                               (builtin "One Step Simplification" (formula "54"))
                                                               (rule "false_right" (formula "54"))
                                                               (rule "allLeft" (formula "29") (inst "t=z_0"))
                                                               (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "1"))
                                                               (builtin "One Step Simplification" (formula "29"))
                                                               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "29"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                               (rule "inEqSimp_contradInEq0" (formula "42") (ifseqformula "2"))
                                                               (rule "andLeft" (formula "42"))
                                                               (rule "inEqSimp_homoInEq1" (formula "42"))
                                                               (rule "polySimp_mulComm0" (formula "42") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "42") (term "1,0"))
                                                               (rule "mul_literals" (formula "42") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "42") (term "0"))
                                                               (rule "polySimp_addComm1" (formula "42") (term "0,0"))
                                                               (rule "add_literals" (formula "42") (term "0,0,0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "42") (term "0"))
                                                               (rule "add_literals" (formula "42") (term "1,1,0"))
                                                               (rule "times_zero_1" (formula "42") (term "1,0"))
                                                               (rule "add_zero_right" (formula "42") (term "0"))
                                                               (rule "leq_literals" (formula "42"))
                                                               (rule "closeFalse" (formula "42"))
                                                            )
                                                            (branch "CUT: contains(z_0, self.right.right.values) FALSE"
                                                               (builtin "One Step Simplification" (formula "54"))
                                                               (rule "cut_direct" (formula "54") (term "0,1"))
                                                               (branch "CUT: contains(z_0, self.left.left.values) TRUE"
                                                                  (builtin "One Step Simplification" (formula "55"))
                                                                  (rule "false_right" (formula "55"))
                                                                  (rule "allLeft" (formula "16") (inst "t=z_0"))
                                                                  (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
                                                                  (builtin "One Step Simplification" (formula "16"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "16"))
                                                                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                                  (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                                  (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "41"))
                                                                  (rule "andLeft" (formula "2"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "2"))
                                                                  (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                                  (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                                  (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                                  (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                                  (rule "add_literals" (formula "2") (term "0,0,0"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                                  (rule "add_literals" (formula "2") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "2") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "2") (term "0"))
                                                                  (rule "leq_literals" (formula "2"))
                                                                  (rule "closeFalse" (formula "2"))
                                                               )
                                                               (branch "CUT: contains(z_0, self.left.left.values) FALSE"
                                                                  (builtin "One Step Simplification" (formula "55"))
                                                                  (rule "notRight" (formula "55"))
                                                                  (rule "allLeft" (formula "17") (inst "t=z_0"))
                                                                  (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "1"))
                                                                  (builtin "One Step Simplification" (formula "17"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "17"))
                                                                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                                  (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                                  (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "41"))
                                                                  (rule "andLeft" (formula "2"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "2"))
                                                                  (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                                  (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                                  (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                                  (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                                  (rule "add_literals" (formula "2") (term "0,0,0"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                                  (rule "add_literals" (formula "2") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "2") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "2") (term "0"))
                                                                  (rule "leq_literals" (formula "2"))
                                                                  (rule "closeFalse" (formula "2"))
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch "Show Axiom Satisfiability"
                           (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "37")) (ifInst ""  (formula "35")) (ifInst ""  (formula "37")) (ifInst ""  (formula "37")) (ifInst ""  (formula "37")) (ifInst ""  (formula "37")) (ifInst ""  (formula "35")) (ifInst ""  (formula "37")) (ifInst ""  (formula "37")) (ifInst ""  (formula "37")))
                           (rule "closeTrue" (formula "38"))
                        )
                     )
                     (branch "Exceptional Post (maxHelper)"
                        (builtin "One Step Simplification" (formula "34"))
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "andLeft" (formula "30"))
                        (rule "andLeft" (formula "31"))
                        (rule "andLeft" (formula "30"))
                        (rule "andLeft" (formula "32"))
                        (rule "notLeft" (formula "30"))
                        (rule "close" (formula "34") (ifseqformula "33"))
                     )
                     (branch "Pre (maxHelper)"
                        (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "1")))
                        (rule "closeTrue" (formula "33"))
                     )
                  )
                  (branch "Show Axiom Satisfiability"
                     (builtin "One Step Simplification" (formula "25"))
                     (rule "closeTrue" (formula "25"))
                  )
               )
               (branch "Exceptional Post (max)"
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "andLeft" (formula "21"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "21"))
                  (rule "andLeft" (formula "23"))
                  (rule "notLeft" (formula "21"))
                  (rule "close" (formula "25") (ifseqformula "24"))
               )
               (branch "Pre (max)"
                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "1")))
                  (rule "inEqSimp_ltToLeq" (formula "24") (term "1,1"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,1,1"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,1,1"))
                  (rule "mul_literals" (formula "24") (term "0,1,1,1"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,1"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,1,1"))
                  (rule "replace_known_left" (formula "24") (term "1,1") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "limit_java_lang_Object__inv_" (formula "24") (term "0"))
                  (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "8"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "25"))
                  (rule "inEqSimp_geqRight" (formula "25"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "Class_invariant_axiom_for_Tree" (formula "2") (inst "sk=sk_3"))
                  (branch "Use Axiom"
                     (rule "andLeft" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "eqSymm" (formula "6"))
                     (rule "commuteUnion2" (formula "6") (term "0"))
                     (rule "commuteUnion2" (formula "6") (term "2,0,0"))
                     (rule "inEqSimp_gtToGeq" (formula "5") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1"))
                     (rule "inEqSimp_gtToGeq" (formula "5") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,1"))
                     (rule "polySimp_addComm1" (formula "5") (term "0,0,1"))
                     (rule "polySimp_addComm1" (formula "5") (term "0,1,1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "5") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "0,0,1"))
                     (rule "polySimp_elimOne" (formula "5") (term "0,0,1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "5") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "5") (term "0,1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Show Axiom Satisfiability"
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "closeTrue" (formula "23"))
                  )
               )
               (branch "Null reference (Tree::select(heap,self,Tree::$right) = null)"
                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "21")))
                  (rule "closeTrue" (formula "24"))
               )
            )
            (branch "Show Axiom Satisfiability"
               (builtin "One Step Simplification" (formula "16"))
               (rule "closeTrue" (formula "16"))
            )
         )
         (branch "Exceptional Post (max)"
            (builtin "One Step Simplification" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "14"))
            (rule "notLeft" (formula "12"))
            (rule "close" (formula "15") (ifseqformula "14"))
         )
         (branch "Pre (max)"
            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "1,1"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,1"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,1,1"))
            (rule "polySimp_rightDist" (formula "15") (term "1,1,1"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,1"))
            (rule "mul_literals" (formula "15") (term "0,1,1,1"))
            (rule "polySimp_elimOne" (formula "15") (term "1,1,1,1"))
            (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "9"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "limit_java_lang_Object__inv_" (formula "15") (term "0"))
            (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "7"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "inEqSimp_geqRight" (formula "16"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "Class_invariant_axiom_for_Tree" (formula "2") (inst "sk=sk_1"))
            (branch "Use Axiom"
               (rule "andLeft" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "eqSymm" (formula "6"))
               (rule "commuteUnion2" (formula "6") (term "2,1,0"))
               (rule "commuteUnion2" (formula "6") (term "0"))
               (rule "inEqSimp_gtToGeq" (formula "5") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,1"))
               (rule "inEqSimp_gtToGeq" (formula "5") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1"))
               (rule "polySimp_addComm1" (formula "5") (term "0,1,1"))
               (rule "polySimp_addComm1" (formula "5") (term "0,0,1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "5") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "5") (term "0,1,1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "5") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0,0,1"))
               (rule "polySimp_elimOne" (formula "5") (term "0,0,1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
               (rule "qeq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Show Axiom Satisfiability"
               (builtin "One Step Simplification" (formula "14"))
               (rule "closeTrue" (formula "14"))
            )
         )
         (branch "Null reference (Tree::select(heap,self,Tree::$left) = null)"
            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
            (rule "closeTrue" (formula "15"))
         )
      )
      (branch "if x false"
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Show Axiom Satisfiability"
   (builtin "One Step Simplification" (formula "7"))
   (rule "closeTrue" (formula "7"))
)
)

}
