\settings {
"#Proof-Settings-Config-File
#Fri May 25 17:09:20 CEST 2012
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , initialisation-initialisation\\:disableStaticInitialisation , runtimeExceptions-runtimeExceptions\\:ban
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[View]HideIntermediateProofsteps=false
[View]HideClosedSubtrees=false
[General]UseOCL=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[View]ShowWholeTaclet=false
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMinimum=-2147483645
[General]StupidMode=true
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[General]OneStepSimplification=true
[General]UseJML=true
[SMTSettings]integersMaximum=2147483645
[General]DnDDirectionSensitive=true
[View]FontIndex=2
[View]UseSystemLookAndFeel=false
[SMTSettings]useUninterpretedMultiplication=true
[Strategy]MaximumNumberOfAutomaticApplications=200
[View]MaxTooltipLines=40
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[SMTSettings]explicitTypeHierarchy=false
"
}

\javaSource "";

\chooseContract "Tree[Tree::maxHelper(int,int,int)].JML normal_behavior operation contract.0";

\proof {
(keyLog "0" (keyUser "daniel" ) (keyVersion "e4dd806c87a462c41c9d84ae2a9ab5e60d7bcfb5"))

(autoModeTime "5805")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "5") (term "1"))
(builtin "One Step Simplification" (formula "5"))
(rule "eqSymm" (formula "5") (term "0,1,1,1,0,0,0,1"))
(rule "eqSymm" (formula "5") (term "0,0,1,0,1"))
(rule "eqSymm" (formula "5") (term "1,1,1,1,1,0,0,0,1"))
(rule "eqSymm" (formula "5") (term "0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteGeq" (formula "5") (term "0,0,0,0,1"))
(rule "inEqSimp_commuteGeq" (formula "5") (term "0,1,0,0,0,1"))
(rule "inEqSimp_commuteGeq" (formula "5") (term "0,1,1,0,0,0,1"))
(rule "methodBodyExpand" (formula "5") (term "1") (newnames "heapBefore_maxHelper,savedHeapBefore_maxHelper"))
(builtin "One Step Simplification" (formula "5"))
(rule "ifElseUnfold" (formula "5") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "5") (term "1") (newnames "x_1"))
(rule "greater_than_comparison_new" (formula "5") (term "1"))
(builtin "One Step Simplification" (formula "5"))
(rule "assignment" (formula "5") (term "1,1"))
(builtin "One Step Simplification" (formula "5"))
(rule "assignment" (formula "5") (term "1,2"))
(builtin "One Step Simplification" (formula "5"))
(rule "inEqSimp_gtToGeq" (formula "5") (term "0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
(rule "polySimp_addComm1" (formula "5") (term "0,0"))
(rule "inEqSimp_sepNegMonomial1" (formula "5") (term "0"))
(rule "polySimp_mulLiterals" (formula "5") (term "0,0"))
(rule "polySimp_elimOne" (formula "5") (term "0,0"))
(rule "ifthenelse_split_for" (formula "5"))
(branch "y <= -1 + x TRUE"
   (rule "ifElse" (formula "6") (term "1"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "returnUnfold" (formula "6") (term "1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "6") (term "1"))
   (rule "variableDeclaration" (formula "6") (term "1") (newnames "x_4"))
   (rule "remove_parentheses_right" (formula "6") (term "1"))
   (rule "condition" (formula "6") (term "1"))
   (rule "ifElseUnfold" (formula "6") (term "1") (inst "#boolv=x_5"))
   (rule "variableDeclaration" (formula "6") (term "1") (newnames "x_5"))
   (rule "greater_than_comparison_new" (formula "6") (term "1"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "assignment" (formula "6") (term "1,1"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "assignment" (formula "6") (term "1,2"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "inEqSimp_gtToGeq" (formula "6") (term "0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
   (rule "polySimp_addComm1" (formula "6") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "6") (term "0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
   (rule "polySimp_elimOne" (formula "6") (term "0,0"))
   (rule "ifthenelse_split_for" (formula "6"))
   (branch "z <= -1 + x TRUE"
      (rule "ifElse" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "assignment" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "blockEmpty" (formula "7") (term "1"))
      (rule "methodCallReturn" (formula "7") (term "1"))
      (rule "assignment" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "methodCallEmpty" (formula "7") (term "1"))
      (rule "tryEmpty" (formula "7") (term "1"))
      (rule "emptyModality" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
      (rule "polySimp_pullOutFactor1" (formula "7") (term "0,0"))
      (rule "add_literals" (formula "7") (term "1,0,0"))
      (rule "times_zero_1" (formula "7") (term "0,0"))
      (rule "qeq_literals" (formula "7") (term "0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_subsumption0" (formula "7") (term "1") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "7") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0,1"))
      (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1"))
      (rule "add_literals" (formula "7") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "7") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "7") (term "0,0,1"))
      (rule "qeq_literals" (formula "7") (term "0,1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_leqRight" (formula "7"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "3"))
      (rule "andLeft" (formula "1"))
      (rule "inEqSimp_homoInEq1" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_literals" (formula "1") (term "0"))
      (rule "leq_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "z <= -1 + x FALSE"
      (rule "inEqSimp_leqRight" (formula "6"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
      (rule "polySimp_elimOne" (formula "1") (term "1"))
      (rule "ifElse" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "assignment" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "blockEmpty" (formula "7") (term "1"))
      (rule "methodCallReturn" (formula "7") (term "1"))
      (rule "assignment" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "methodCallEmpty" (formula "7") (term "1"))
      (rule "tryEmpty" (formula "7") (term "1"))
      (rule "emptyModality" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_commuteLeq" (formula "7") (term "0,1"))
      (rule "inEqSimp_commuteLeq" (formula "7") (term "0"))
      (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_homoInEq0" (formula "7") (term "1"))
      (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1"))
      (rule "add_literals" (formula "7") (term "1,0,1"))
      (rule "times_zero_1" (formula "7") (term "0,1"))
      (rule "qeq_literals" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_geqRight" (formula "7"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
      (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0"))
      (rule "polySimp_addComm0" (formula "2") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1"))
      (rule "polySimp_rightDist" (formula "2") (term "1"))
      (rule "mul_literals" (formula "2") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
      (rule "polySimp_elimOne" (formula "2") (term "1,1"))
      (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "2"))
      (rule "andLeft" (formula "4"))
      (rule "inEqSimp_homoInEq1" (formula "4"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,0"))
      (rule "mul_literals" (formula "4") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "4") (term "0"))
      (rule "polySimp_addComm1" (formula "4") (term "0,0"))
      (rule "add_literals" (formula "4") (term "0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
      (rule "add_literals" (formula "4") (term "1,1,0"))
      (rule "times_zero_1" (formula "4") (term "1,0"))
      (rule "add_literals" (formula "4") (term "0"))
      (rule "leq_literals" (formula "4"))
      (rule "closeFalse" (formula "4"))
   )
)
(branch "y <= -1 + x FALSE"
   (rule "inEqSimp_leqRight" (formula "5"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
   (rule "polySimp_elimOne" (formula "1") (term "1"))
   (rule "ifElseSplit" (formula "6"))
   (branch "if x_1 true"
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "if x_1 false"
      (builtin "One Step Simplification" (formula "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "1"))
      (rule "returnUnfold" (formula "6") (term "1") (inst "#v0=x"))
      (rule "variableDeclarationAssign" (formula "6") (term "1"))
      (rule "variableDeclaration" (formula "6") (term "1") (newnames "x_2"))
      (rule "remove_parentheses_right" (formula "6") (term "1"))
      (rule "condition" (formula "6") (term "1"))
      (rule "ifElseUnfold" (formula "6") (term "1") (inst "#boolv=x_3"))
      (rule "variableDeclaration" (formula "6") (term "1") (newnames "x_3"))
      (rule "greater_than_comparison_new" (formula "6") (term "1"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "assignment" (formula "6") (term "1,2"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "assignment" (formula "6") (term "1,1"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "inEqSimp_gtToGeq" (formula "6") (term "0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
      (rule "polySimp_addComm1" (formula "6") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "6") (term "0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "0,0"))
      (rule "ifthenelse_split_for" (formula "6"))
      (branch "z <= -1 + y TRUE"
         (rule "ifElseSplit" (formula "7"))
         (branch "if x_3 true"
            (builtin "One Step Simplification" (formula "8"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignment" (formula "7") (term "1"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "blockEmpty" (formula "7") (term "1"))
            (rule "methodCallReturn" (formula "7") (term "1"))
            (rule "assignment" (formula "7") (term "1"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "methodCallEmpty" (formula "7") (term "1"))
            (rule "tryEmpty" (formula "7") (term "1"))
            (rule "emptyModality" (formula "7") (term "1"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "0"))
            (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "2"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
            (rule "polySimp_pullOutFactor1" (formula "7") (term "0,0"))
            (rule "add_literals" (formula "7") (term "1,0,0"))
            (rule "times_zero_1" (formula "7") (term "0,0"))
            (rule "qeq_literals" (formula "7") (term "0"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "inEqSimp_leqRight" (formula "7"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_homoInEq1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "leq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_3 false"
            (builtin "One Step Simplification" (formula "8"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "z <= -1 + y FALSE"
         (rule "inEqSimp_leqRight" (formula "6"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "ifElse" (formula "7") (term "1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "assignment" (formula "7") (term "1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "blockEmpty" (formula "7") (term "1"))
         (rule "methodCallReturn" (formula "7") (term "1"))
         (rule "assignment" (formula "7") (term "1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "methodCallEmpty" (formula "7") (term "1"))
         (rule "tryEmpty" (formula "7") (term "1"))
         (rule "emptyModality" (formula "7") (term "1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,1"))
         (rule "replace_known_left" (formula "7") (term "0,1") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0"))
         (rule "inEqSimp_homoInEq0" (formula "7") (term "1"))
         (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1"))
         (rule "add_literals" (formula "7") (term "1,0,1"))
         (rule "times_zero_1" (formula "7") (term "0,1"))
         (rule "qeq_literals" (formula "7") (term "1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_geqRight" (formula "7"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
         (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
         (rule "polySimp_addComm0" (formula "2") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "2"))
         (rule "andLeft" (formula "4"))
         (rule "inEqSimp_homoInEq1" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0"))
         (rule "mul_literals" (formula "4") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0"))
         (rule "polySimp_addComm0" (formula "4") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
         (rule "add_literals" (formula "4") (term "1,1,0"))
         (rule "times_zero_1" (formula "4") (term "1,0"))
         (rule "add_zero_right" (formula "4") (term "0"))
         (rule "leq_literals" (formula "4"))
         (rule "closeFalse" (formula "4"))
      )
   )
)
)

}
