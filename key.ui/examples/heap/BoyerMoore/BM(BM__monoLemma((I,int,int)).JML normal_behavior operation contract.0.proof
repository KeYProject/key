\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:on",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:treatAsAxiom",
        "moreSeqRules" : "moreSeqRules:off",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:ban",
        "sequences" : "sequences:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 10000,
        "Timeout" : -1,
        "options" : { 
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_OFF",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_INVARIANT",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_DEF_OPS",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_OFF",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_DEFAULT",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 }

\javaSource "src";

\proofObligation "#Proof Obligation Settings
#Thu Apr 11 18:42:30 CEST 2024
contract=BoyerMoore[BoyerMoore\\:\\:monoLemma([I,int,int)].JML normal_behavior operation contract.0
name=BoyerMoore[BoyerMoore\\:\\:monoLemma([I,int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mattias" ) (keyVersion "9cc569ccced37e242b3a85779f2afdc42b0031ca"))

(autoModeTime "5099")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "8"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "11") (term "0,0,1,0,1"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "10"))
 (builtin "One Step Simplification" (formula "4"))
(rule "polySimp_elimSub" (formula "5") (term "0"))
(rule "polySimp_addComm0" (formula "5") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "assignment" (formula "11") (term "1"))
 (builtin "One Step Simplification" (formula "11"))
(rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_monoLemma,savedHeapBefore_monoLemma"))
 (builtin "One Step Simplification" (formula "11"))
(rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=b"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "b"))
(rule "compound_equality_comparison_2" (formula "11") (term "1") (inst "#v1=i_1") (inst "#v0=i"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "i"))
(rule "assignment" (formula "11") (term "1"))
 (builtin "One Step Simplification" (formula "11"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "i_1"))
(rule "assignment_read_length" (formula "11"))
(branch "Normal Execution (_k == _a.length != null)"
    (builtin "One Step Simplification" (formula "11"))
   (rule "equality_comparison_simple" (formula "11") (term "1"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "eqSymm" (formula "11") (term "0,0,1,0"))
   (rule "ifSplit" (formula "11"))
   (branch "if _k == _a.length true"
       (builtin "One Step Simplification" (formula "12"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "1"))
      (rule "polySimp_pullOutFactor2" (formula "6") (term "0"))
      (rule "add_literals" (formula "6") (term "1,0"))
      (rule "times_zero_1" (formula "6") (term "0"))
      (rule "applyEq" (formula "8") (term "0") (ifseqformula "1"))
      (rule "methodCallEmptyReturn" (formula "12") (term "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "tryEmpty" (formula "12") (term "1"))
      (rule "emptyModality" (formula "12") (term "1"))
      (rule "andRight" (formula "12"))
      (branch
         (rule "andRight" (formula "12"))
         (branch
            (rule "andRight" (formula "12"))
            (branch
                (builtin "One Step Simplification" (formula "12"))
               (rule "inEqSimp_geqRight" (formula "12"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_homoInEq1" (formula "9"))
               (rule "polySimp_pullOutFactor1" (formula "9") (term "0"))
               (rule "add_literals" (formula "9") (term "1,0"))
               (rule "times_zero_1" (formula "9") (term "0"))
               (rule "leq_literals" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "applyEq" (formula "1") (term "3,1,0") (ifseqformula "2"))
               (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "leq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch
                (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "9")))
               (rule "closeTrue" (formula "12"))
            )
         )
         (branch
             (builtin "One Step Simplification" (formula "12"))
            (rule "closeTrue" (formula "12"))
         )
      )
      (branch
          (builtin "One Step Simplification" (formula "12"))
         (rule "closeTrue" (formula "12"))
      )
   )
   (branch "if _k == _a.length false"
       (builtin "One Step Simplification" (formula "12"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "methodCallUnfoldArguments" (formula "12") (term "1"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "var"))
      (rule "assignment" (formula "12") (term "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "var_1"))
      (rule "assignmentAdditionInt" (formula "12") (term "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "translateJavaAddInt" (formula "12") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "12") (term "0,1,0"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "var_2"))
      (rule "assignment" (formula "12") (term "1"))
       (builtin "One Step Simplification" (formula "12"))
       (builtin "Use Operation Contract" (formula "12") (newnames "heapBefore_monoLemma_0,exc_0") (contract "BoyerMoore[BoyerMoore::monoLemma([I,int,int)].JML normal_behavior operation contract.0") (modality "diamond"))
      (branch "Post (monoLemma)"
          (builtin "One Step Simplification" (formula "13"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "8")))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "10"))
         (rule "inEqSimp_commuteLeq" (formula "10"))
         (rule "limit_BoyerMoore_count[I\bigint\bigint" (formula "10") (term "1"))
         (rule "limit_BoyerMoore_count[I\bigint\bigint" (formula "11") (term "0"))
         (rule "methodCallEmpty" (formula "16") (term "1"))
         (rule "tryEmpty" (formula "16") (term "1"))
         (rule "emptyModality" (formula "16") (term "1"))
         (rule "andRight" (formula "16"))
         (branch "Case 1"
            (rule "andRight" (formula "16"))
            (branch "Case 1"
               (rule "andRight" (formula "16"))
               (branch "Case 1"
                   (builtin "One Step Simplification" (formula "16") (userinteraction))
                  (rule "Definition_axiom_for_count_in_BoyerMoore" (formula "12") (term "1") (ifseqformula "3") (userinteraction))
                  (rule "unlimit_BoyerMoore_count[I\bigint\bigint" (formula "12") (term "1,2,0,1") (userinteraction))
                  (rule "castDel" (formula "12") (term "1"))
                  (rule "polySimp_elimSub" (formula "12") (term "3,1,2,1"))
                  (rule "mul_literals" (formula "12") (term "1,3,1,2,1"))
                  (rule "polySimp_elimSub" (formula "12") (term "0,2,0,0,0,2,1"))
                  (rule "mul_literals" (formula "12") (term "1,0,2,0,0,0,2,1"))
                  (rule "polySimp_addComm1" (formula "12") (term "3,1,2,1"))
                  (rule "add_literals" (formula "12") (term "0,3,1,2,1"))
                  (rule "add_zero_left" (formula "12") (term "3,1,2,1"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,2,0,0,0,2,1"))
                  (rule "add_literals" (formula "12") (term "0,0,2,0,0,0,2,1"))
                  (rule "add_zero_left" (formula "12") (term "0,2,0,0,0,2,1"))
                  (rule "polySimp_addComm0" (formula "12") (term "2,1"))
                  (rule "inEqSimp_geqRight" (formula "16"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "13"))
                  (rule "polySimp_sepPosMonomial" (formula "13") (term "0,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "inEqSimp_contradEq7" (formula "13") (term "0,0") (ifseqformula "7"))
                  (rule "add_zero_left" (formula "13") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,0,0,0"))
                  (rule "leq_literals" (formula "13") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "inEqSimp_homoInEq0" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0"))
                  (rule "polySimp_addComm0" (formula "13") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                  (rule "polySimp_elimOne" (formula "13") (term "0"))
                  (rule "inEqSimp_strengthen1" (formula "8") (ifseqformula "14"))
                  (rule "inEqSimp_contradEq7" (formula "14") (ifseqformula "8"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0"))
                  (rule "add_literals" (formula "14") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0"))
                  (rule "add_zero_right" (formula "14") (term "0,0"))
                  (rule "leq_literals" (formula "14") (term "0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "false_right" (formula "14"))
                  (rule "limit_BoyerMoore_count[I\bigint\bigint" (formula "1") (term "1,1"))
                  (rule "ifthenelse_split" (formula "14") (term "0"))
                  (branch "a[k] = v TRUE"
                     (rule "inEqSimp_homoInEq0" (formula "15"))
                     (rule "mul_literals" (formula "15") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0"))
                     (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1"))
                     (rule "polySimp_rightDist" (formula "15") (term "1"))
                     (rule "mul_literals" (formula "15") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "15"))
                     (rule "andLeft" (formula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                     (rule "add_literals" (formula "2") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,1,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0"))
                     (rule "add_zero_right" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "a[k] = v FALSE"
                     (rule "inEqSimp_homoInEq0" (formula "14"))
                     (rule "times_zero_2" (formula "14") (term "1,0"))
                     (rule "add_zero_right" (formula "14") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1"))
                     (rule "polySimp_elimOne" (formula "14") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "14"))
                     (rule "andLeft" (formula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0"))
                     (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,1,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0"))
                     (rule "add_zero_right" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
               (branch
                   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "8")))
                  (rule "closeTrue" (formula "16"))
               )
            )
            (branch
                (builtin "One Step Simplification" (formula "16"))
               (rule "closeTrue" (formula "16"))
            )
         )
         (branch
             (builtin "One Step Simplification" (formula "16"))
            (rule "closeTrue" (formula "16"))
         )
      )
      (branch "Exceptional Post (monoLemma)"
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "8")))
          (builtin "One Step Simplification" (formula "13"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "9"))
         (rule "close" (formula "12") (ifseqformula "11"))
      )
      (branch "Pre (monoLemma)"
          (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "8")) (ifInst ""  (formula "11")) (ifInst ""  (formula "1")) (ifInst ""  (formula "11")) (ifInst ""  (formula "4")))
         (rule "polySimp_elimSub" (formula "12") (term "0,1"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,1"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,1"))
         (rule "mul_literals" (formula "12") (term "0,1,0,1"))
         (rule "polySimp_addComm0" (formula "12") (term "0,1"))
         (rule "measuredByCheck" (formula "12") (term "1") (ifseqformula "5"))
         (rule "precOfInt" (formula "12") (term "1"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,1"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,1"))
         (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,1"))
         (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,1"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,1"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,1,1"))
         (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1"))
         (rule "polySimp_pullOutFactor2b" (formula "12") (term "0,1,1"))
         (rule "add_literals" (formula "12") (term "1,1,0,1,1"))
         (rule "times_zero_1" (formula "12") (term "1,0,1,1"))
         (rule "add_zero_right" (formula "12") (term "0,1,1"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,1,1"))
         (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1"))
         (rule "add_literals" (formula "12") (term "0,0,0,1,1"))
         (rule "add_zero_left" (formula "12") (term "0,0,1,1"))
         (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,1"))
         (rule "add_literals" (formula "12") (term "1,0,1,1"))
         (rule "times_zero_1" (formula "12") (term "0,1,1"))
         (rule "leq_literals" (formula "12") (term "1,1"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0"))
         (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0"))
         (rule "times_zero_2" (formula "12") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "12") (term "1"))
         (rule "times_zero_2" (formula "12") (term "1,0,1"))
         (rule "add_zero_right" (formula "12") (term "0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0"))
         (rule "mul_literals" (formula "12") (term "1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,1"))
         (rule "polySimp_rightDist" (formula "12") (term "1,1"))
         (rule "mul_literals" (formula "12") (term "0,1,1"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,1"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_strengthen1" (formula "7") (ifseqformula "9"))
         (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_geqRight" (formula "12"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_contradEq7" (formula "10") (ifseqformula "8"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0"))
         (rule "leq_literals" (formula "10") (term "0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "false_right" (formula "10"))
         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
         (rule "qeq_literals" (formula "1") (term "0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Null Reference (_k == _a.length = null)"
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
   (rule "closeFalse" (formula "1"))
)
)
}
