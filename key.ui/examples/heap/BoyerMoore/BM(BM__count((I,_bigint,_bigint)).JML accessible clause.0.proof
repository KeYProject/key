\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:on",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "finalFields" : "finalFields:immutable",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:treatAsAxiom",
        "moreSeqRules" : "moreSeqRules:off",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:ban",
        "sequences" : "sequences:on",
        "soundDefaultContracts" : "soundDefaultContracts:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 10000,
        "Timeout" : -1,
        "options" : { 
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_OFF",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_INVARIANT",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_DEF_OPS",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_OFF",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_DEFAULT",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 


\javaSource "src";\proofObligation 
// 
{ 
    "class" : "de.uka.ilkd.key.proof.init.DependencyContractPO",
    "contract" : "BoyerMoore[BoyerMoore::count([I,\bigint,\bigint)].JML accessible clause.0",
    "name" : "BoyerMoore[BoyerMoore::count([I,\bigint,\bigint)].JML accessible clause.0"
 }

\proof {
(keyLog "0" (keyUser "ulbrich" ) (keyVersion "947da2060bf662ceb5ca270943291196724c7fa3"))

(autoModeTime "422")

(branch "dummy ID"
(rule "impRight" (formula "1") (userinteraction))
 (builtin "One Step Simplification" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "8"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "eqSymm" (formula "12"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "11"))
 (builtin "One Step Simplification" (formula "5"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "inEqSimp_commuteLeq" (formula "8"))
(rule "limit_BoyerMoore_count[I\bigint\bigint" (formula "12") (term "1"))
(rule "limit_BoyerMoore_count[I\bigint\bigint" (formula "13") (term "0"))
(rule "arrayLengthNotNegative" (formula "10") (term "0"))
(rule "arrayLengthIsAShort" (formula "11") (term "0"))
 (builtin "One Step Simplification" (formula "11"))
(rule "true_left" (formula "11"))
 (builtin "Use Dependency Contract" (formula "15") (term "0") (ifInst ""  (formula "15") (term "1")) (contract "BoyerMoore[BoyerMoore::count([I,\bigint,\bigint)].JML accessible clause.0"))
(rule "wellFormedAnon" (formula "13") (term "1,1,0,0,0,0,0"))
(rule "replace_known_right" (formula "13") (term "0,1,0,0,0,0") (ifseqformula "15"))
 (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")) (ifInst ""  (formula "5")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "7")) (ifInst ""  (formula "12")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")))
(rule "notLeft" (formula "13"))
(rule "disjointDefinition" (formula "13") (term "1,0"))
 (builtin "One Step Simplification" (formula "13"))
(rule "measuredByCheck" (formula "13") (term "1") (ifseqformula "8"))
(rule "precOfInt" (formula "13") (term "1"))
(rule "inEqSimp_ltToLeq" (formula "13") (term "1,1"))
(rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1"))
(rule "polySimp_pullOutFactor2b" (formula "13") (term "0,1,1"))
(rule "add_literals" (formula "13") (term "1,1,0,1,1"))
(rule "times_zero_1" (formula "13") (term "1,0,1,1"))
(rule "add_zero_right" (formula "13") (term "0,1,1"))
(rule "leq_literals" (formula "13") (term "1,1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "false_right" (formula "13"))
 (builtin "Use Dependency Contract" (formula "1") (term "0") (ifInst ""  (formula "2") (term "0")) (contract "BoyerMoore[BoyerMoore::count([I,\bigint,\bigint)].JML accessible clause.0"))
(rule "wellFormedAnon" (formula "13") (term "1,1,0,0,0,0,0"))
(rule "replace_known_right" (formula "13") (term "0,1,0,0,0,0") (ifseqformula "15"))
 (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")) (ifInst ""  (formula "5")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "7")) (ifInst ""  (formula "12")) (ifInst ""  (formula "15")))
(rule "disjointDefinition" (formula "13") (term "1,0,0"))
 (builtin "One Step Simplification" (formula "13"))
(rule "measuredByCheck" (formula "13") (term "1,0") (ifseqformula "8"))
(rule "precOfInt" (formula "13") (term "1,0"))
(rule "inEqSimp_ltToLeq" (formula "13") (term "1,1,0"))
(rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,0"))
(rule "polySimp_pullOutFactor2b" (formula "13") (term "0,1,1,0"))
(rule "add_literals" (formula "13") (term "1,1,0,1,1,0"))
(rule "times_zero_1" (formula "13") (term "1,0,1,1,0"))
(rule "add_zero_right" (formula "13") (term "0,1,1,0"))
(rule "leq_literals" (formula "13") (term "1,1,0"))
 (builtin "One Step Simplification" (formula "13"))
(rule "true_left" (formula "13"))
(rule "Definition_axiom_for_count_in_BoyerMoore" (formula "15") (term "0") (inst "last=last") (ifseqformula "6") (userinteraction))
(rule "Definition_axiom_for_count_in_BoyerMoore" (formula "15") (term "1") (inst "last=last") (ifseqformula "6") (userinteraction))
(rule "ifthenelse_split" (formula "15") (term "1") (userinteraction))
(branch "k = 0 TRUE"
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
   (rule "closeTrue" (formula "16"))
)
(branch "k = 0 FALSE"
   (rule "ifthenelse_split" (formula "16") (term "0") (userinteraction))
   (branch "k = 0 TRUE"
      (rule "close" (formula "16") (ifseqformula "1"))
   )
   (branch "k = 0 FALSE"
      (rule "eqTermCut" (formula "16") (term "0,0,0") (inst "s=int::select(heap, a, arr(sub(k, Z(1(#)))))") (userinteraction))
      (branch "Assume a[k - 1]@heap[anon(allLocs setMinus a.*, anon_heap<<anonHeapFunction>>)] = a[k - 1]"
         (rule "polySimp_elimSub" (formula "17") (term "3,1,1,1"))
         (rule "mul_literals" (formula "17") (term "1,3,1,1,1"))
         (rule "polySimp_elimSub" (formula "17") (term "0,2,0,0,0"))
         (rule "mul_literals" (formula "17") (term "1,0,2,0,0,0"))
         (rule "polySimp_elimSub" (formula "17") (term "3,2,0"))
         (rule "mul_literals" (formula "17") (term "1,3,2,0"))
         (rule "polySimp_elimSub" (formula "17") (term "0,2,0,0,1"))
         (rule "mul_literals" (formula "17") (term "1,0,2,0,0,1"))
         (rule "polySimp_elimSub" (formula "17") (term "3,2,1"))
         (rule "mul_literals" (formula "17") (term "1,3,2,1"))
         (rule "polySimp_elimSub" (formula "17") (term "3,1,1,0"))
         (rule "mul_literals" (formula "17") (term "1,3,1,1,0"))
         (rule "polySimp_elimSub" (formula "1") (term "0,2,0"))
         (rule "mul_literals" (formula "1") (term "1,0,2,0"))
         (rule "polySimp_elimSub" (formula "1") (term "0,2,1"))
         (rule "mul_literals" (formula "1") (term "1,0,2,1"))
         (rule "polySimp_addComm0" (formula "17") (term "3,1,1,1"))
         (rule "polySimp_addComm0" (formula "17") (term "0,2,0,0,0"))
         (rule "polySimp_addComm0" (formula "17") (term "3,2,0"))
         (rule "polySimp_addComm0" (formula "17") (term "0,2,0,0,1"))
         (rule "polySimp_addComm0" (formula "17") (term "3,2,1"))
         (rule "polySimp_addComm0" (formula "17") (term "3,1,1,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0,2,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0,2,1"))
         (rule "inEqSimp_strengthen1" (formula "10") (ifseqformula "16"))
         (rule "add_zero_right" (formula "10") (term "1"))
         (rule "inEqSimp_contradEq7" (formula "16") (ifseqformula "10"))
         (rule "times_zero_1" (formula "16") (term "1,0,0"))
         (rule "add_zero_right" (formula "16") (term "0,0"))
         (rule "leq_literals" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "false_right" (formula "16"))
         (rule "pullOutSelect" (formula "16") (term "0,0,0") (inst "selectSK=arr_0"))
         (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
         (rule "simplifySelectOfAnon" (formula "1"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "9")))
         (rule "eqSymm" (formula "17") (term "0,0"))
         (rule "eqSymm" (formula "2"))
         (rule "applyEqReverse" (formula "17") (term "1,0,0") (ifseqformula "2"))
         (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "hideAuxiliaryEq" (formula "2"))
         (rule "eqSymm" (formula "16") (term "0,0"))
         (rule "elementOfSetMinus" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "ifthenelse_split" (formula "15") (term "1"))
         (branch "a[-1 + k] = v TRUE"
            (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "polySimp_homoEq" (formula "16"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0"))
            (rule "mul_literals" (formula "16") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0"))
            (rule "polySimp_addComm1" (formula "16") (term "0,0"))
            (rule "add_literals" (formula "16") (term "0,0,0"))
            (rule "add_zero_left" (formula "16") (term "0,0"))
            (rule "polySimp_sepNegMonomial" (formula "16"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0"))
            (rule "polySimp_elimOne" (formula "16") (term "0"))
             (builtin "Use Dependency Contract" (formula "2") (term "1") (ifInst ""  (formula "3") (term "1")) (contract "BoyerMoore[BoyerMoore::count([I,\bigint,\bigint)].JML accessible clause.0"))
            (rule "wellFormedAnon" (formula "14") (term "1,1,0,0,0,0,0"))
            (rule "replace_known_right" (formula "14") (term "0,1,0,0,0,0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")) (ifInst ""  (formula "6")) (ifInst ""  (formula "4")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")) (ifInst ""  (formula "8")) (ifInst ""  (formula "13")) (ifInst ""  (formula "16")))
            (rule "disjointDefinition" (formula "14") (term "1,0,0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "measuredByCheck" (formula "14") (term "1,0") (ifseqformula "9"))
            (rule "precOfInt" (formula "14") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0"))
            (rule "polySimp_pullOutFactor2b" (formula "14") (term "0,1,1,0"))
            (rule "add_literals" (formula "14") (term "1,1,0,1,1,0"))
            (rule "times_zero_1" (formula "14") (term "1,0,1,1,0"))
            (rule "add_zero_right" (formula "14") (term "0,1,1,0"))
            (rule "leq_literals" (formula "14") (term "1,1,0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
             (builtin "Use Dependency Contract" (formula "16") (term "0") (ifInst ""  (formula "16") (term "1")) (contract "BoyerMoore[BoyerMoore::count([I,\bigint,\bigint)].JML accessible clause.0"))
            (rule "wellFormedAnon" (formula "14") (term "1,1,0,0,0,0,0"))
            (rule "replace_known_left" (formula "14") (term "0,1,0,0,0,0,0") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")) (ifInst ""  (formula "6")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")) (ifInst ""  (formula "16")) (ifInst ""  (formula "8")) (ifInst ""  (formula "13")) (ifInst ""  (formula "16")) (ifInst ""  (formula "17")))
            (rule "notLeft" (formula "14"))
            (rule "disjointDefinition" (formula "14") (term "1,0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "measuredByCheck" (formula "14") (term "1") (ifseqformula "9"))
            (rule "precOfInt" (formula "14") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,1,1"))
            (rule "polySimp_addComm1" (formula "14") (term "0,0,1,1"))
            (rule "add_literals" (formula "14") (term "0,0,0,1,1"))
            (rule "add_zero_left" (formula "14") (term "0,0,1,1"))
            (rule "polySimp_pullOutFactor2" (formula "14") (term "0,1,1"))
            (rule "add_literals" (formula "14") (term "1,0,1,1"))
            (rule "times_zero_1" (formula "14") (term "0,1,1"))
            (rule "leq_literals" (formula "14") (term "1,1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0"))
            (rule "inEqSimp_homoInEq0" (formula "14") (term "1"))
            (rule "times_zero_2" (formula "14") (term "1,0,1"))
            (rule "add_zero_right" (formula "14") (term "0,1"))
            (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0"))
            (rule "times_zero_2" (formula "14") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "14") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1"))
            (rule "mul_literals" (formula "14") (term "1,1"))
            (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "10"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0"))
            (rule "mul_literals" (formula "14") (term "1,0"))
            (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "10"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_geqRight" (formula "14"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "inEqSimp_contradInEq0" (formula "13") (ifseqformula "1"))
            (rule "andLeft" (formula "13"))
            (rule "inEqSimp_homoInEq1" (formula "13"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0"))
            (rule "mul_literals" (formula "13") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0"))
            (rule "polySimp_addComm0" (formula "13") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
            (rule "add_literals" (formula "13") (term "1,1,0"))
            (rule "times_zero_1" (formula "13") (term "1,0"))
            (rule "add_zero_right" (formula "13") (term "0"))
            (rule "leq_literals" (formula "13"))
            (rule "closeFalse" (formula "13"))
         )
         (branch "a[-1 + k] = v FALSE"
            (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "16"))
             (builtin "Use Dependency Contract" (formula "1") (term "1") (ifInst ""  (formula "2") (term "1")) (contract "BoyerMoore[BoyerMoore::count([I,\bigint,\bigint)].JML accessible clause.0"))
            (rule "wellFormedAnon" (formula "13") (term "1,1,0,0,0,0,0"))
            (rule "replace_known_left" (formula "13") (term "1,1,0,0,0,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")) (ifInst ""  (formula "5")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "15")) (ifInst ""  (formula "12")) (ifInst ""  (formula "15")))
            (rule "disjointDefinition" (formula "13") (term "1,0,0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "measuredByCheck" (formula "13") (term "1,0") (ifseqformula "8"))
            (rule "precOfInt" (formula "13") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,0"))
            (rule "polySimp_pullOutFactor2b" (formula "13") (term "0,1,1,0"))
            (rule "add_literals" (formula "13") (term "1,1,0,1,1,0"))
            (rule "times_zero_1" (formula "13") (term "1,0,1,1,0"))
            (rule "add_zero_right" (formula "13") (term "0,1,1,0"))
            (rule "leq_literals" (formula "13") (term "1,1,0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "true_left" (formula "13"))
             (builtin "Use Dependency Contract" (formula "16") (term "0") (ifInst ""  (formula "16") (term "1")) (contract "BoyerMoore[BoyerMoore::count([I,\bigint,\bigint)].JML accessible clause.0"))
            (rule "wellFormedAnon" (formula "13") (term "1,1,0,0,0,0,0"))
            (rule "replace_known_right" (formula "13") (term "0,1,0,0,0,0") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")) (ifInst ""  (formula "5")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "7")) (ifInst ""  (formula "12")) (ifInst ""  (formula "15")) (ifInst ""  (formula "17")))
            (rule "notLeft" (formula "13"))
            (rule "disjointDefinition" (formula "13") (term "1,0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "measuredByCheck" (formula "13") (term "1") (ifseqformula "8"))
            (rule "precOfInt" (formula "13") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,1,1"))
            (rule "polySimp_addComm1" (formula "13") (term "0,0,1,1"))
            (rule "add_literals" (formula "13") (term "0,0,0,1,1"))
            (rule "add_zero_left" (formula "13") (term "0,0,1,1"))
            (rule "polySimp_pullOutFactor2" (formula "13") (term "0,1,1"))
            (rule "add_literals" (formula "13") (term "1,0,1,1"))
            (rule "times_zero_1" (formula "13") (term "0,1,1"))
            (rule "leq_literals" (formula "13") (term "1,1"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0"))
            (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0"))
            (rule "times_zero_2" (formula "13") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "13") (term "0,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "13") (term "1"))
            (rule "mul_literals" (formula "13") (term "1,0,1"))
            (rule "add_zero_right" (formula "13") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,0"))
            (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1"))
            (rule "mul_literals" (formula "13") (term "1,1"))
            (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_geqRight" (formula "13"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "1"))
            (rule "andLeft" (formula "12"))
            (rule "inEqSimp_homoInEq1" (formula "12"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
            (rule "add_literals" (formula "12") (term "1,1,0"))
            (rule "times_zero_1" (formula "12") (term "1,0"))
            (rule "add_zero_right" (formula "12") (term "0"))
            (rule "leq_literals" (formula "12"))
            (rule "closeFalse" (formula "12"))
         )
      )
      (branch "Assume a[k - 1]@heap[anon(allLocs setMinus a.*, anon_heap<<anonHeapFunction>>)] != a[k - 1]"
         (rule "notLeft" (formula "1"))
         (rule "polySimp_elimSub" (formula "17") (term "3,2,1"))
         (rule "mul_literals" (formula "17") (term "1,3,2,1"))
         (rule "polySimp_elimSub" (formula "17") (term "0,2,0,0,1"))
         (rule "mul_literals" (formula "17") (term "1,0,2,0,0,1"))
         (rule "polySimp_elimSub" (formula "17") (term "0,2,0,0,0"))
         (rule "mul_literals" (formula "17") (term "1,0,2,0,0,0"))
         (rule "polySimp_elimSub" (formula "17") (term "3,2,0"))
         (rule "mul_literals" (formula "17") (term "1,3,2,0"))
         (rule "polySimp_elimSub" (formula "17") (term "3,1,1,0"))
         (rule "mul_literals" (formula "17") (term "1,3,1,1,0"))
         (rule "polySimp_elimSub" (formula "17") (term "3,1,1,1"))
         (rule "mul_literals" (formula "17") (term "1,3,1,1,1"))
         (rule "polySimp_elimSub" (formula "13") (term "0,2,0"))
         (rule "mul_literals" (formula "13") (term "1,0,2,0"))
         (rule "polySimp_elimSub" (formula "13") (term "0,2,1"))
         (rule "mul_literals" (formula "13") (term "1,0,2,1"))
         (rule "polySimp_addComm0" (formula "17") (term "3,2,1"))
         (rule "polySimp_addComm0" (formula "17") (term "0,2,0,0,1"))
         (rule "polySimp_addComm0" (formula "17") (term "0,2,0,0,0"))
         (rule "polySimp_addComm0" (formula "17") (term "3,2,0"))
         (rule "polySimp_addComm0" (formula "17") (term "3,1,1,0"))
         (rule "polySimp_addComm0" (formula "17") (term "3,1,1,1"))
         (rule "polySimp_addComm0" (formula "13") (term "0,2,0"))
         (rule "polySimp_addComm0" (formula "13") (term "0,2,1"))
         (rule "inEqSimp_strengthen1" (formula "9") (ifseqformula "16"))
         (rule "add_zero_right" (formula "9") (term "1"))
         (rule "inEqSimp_contradEq7" (formula "16") (ifseqformula "9"))
         (rule "times_zero_1" (formula "16") (term "1,0,0"))
         (rule "add_zero_right" (formula "16") (term "0,0"))
         (rule "leq_literals" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "false_right" (formula "16"))
         (rule "pullOutSelect" (formula "16") (term "0,0,0") (inst "selectSK=arr_0"))
         (rule "applyEq" (formula "14") (term "0") (ifseqformula "1"))
         (rule "simplifySelectOfAnon" (formula "1"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "8")))
         (rule "eqSymm" (formula "17") (term "0,0"))
         (rule "eqSymm" (formula "14"))
         (rule "eqSymm" (formula "17"))
         (rule "elementOfSetMinus" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
         (rule "closeFalse" (formula "1"))
      )
   )
)
)
}
