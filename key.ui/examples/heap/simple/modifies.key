\programVariables {
    Object self;
    Object b;
}

\functions {
   Heap heapAtPre;
   LocSet modAtPre;
   
   \unique Field next;
   \unique Field attr;
}


\problem {
    //Modifies clause is {self.next, b.next.next, b.next.next.next, self.attr}
    modAtPre = union(singleton(self, next),
                     union(singleton(Object::select(heap,b,next), next),
                           union(singleton(Object::select(heap,Object::select(heap,b,next),next), next),
                                 singleton(self, attr))))
      
    //atPre definitions                            
    & heap = heapAtPre
    
    ->
    
    // self.next = b.next.next;
    // b.next.next = b;
    // self.attr++;
    {heap := store(heap, self, next, Object::select(heap, Object::select(heap,b,next), next))}
    {heap := store(heap, Object::select(heap, b, next), next, b)}
    {heap := store(heap, self, attr, int::select(heap, self, attr) + 1)}
    
    
    //all heap locations must either be unchanged or be in the modifies clause
    (\forall Object o; \forall Field g; (
             any::select(heap, o, g) = any::select(heapAtPre, o, g)
             | elementOf(o, g, modAtPre)
    ))
}  
