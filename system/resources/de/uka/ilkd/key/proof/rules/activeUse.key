\schemaVariables {
  \modalOperator { diamond, box, throughout,
                   diamond_trc, box_trc, throughout_trc,
                   diamond_tra, box_tra, throughout_tra,
    	           diamond_susp, box_susp, throughout_susp } #allmodal;

  \program SimpleExpression #se;
  \program AnyNumberTypeExpression #left, #right;

  \program AnyJavaTypeExpression #seByteShortIntLong;
  \program JavaShortIntLongExpression #seShortIntLong;
  \program JavaIntLongExpression #seIntLong;
  \program JavaLongExpression #seLong;

  \program Variable #loc;
  \program StaticVariable #sv, #sv1;

  \program LeftHandSide #lhs;
  \program Variable #v, #v0, #v1, #a;

  \formula post;
}

\rules(programRules:Java, initialisation:enableStaticInitialisation) {

  activeUseStaticFieldWriteAccess {
	\find (\modality{#allmodal}{.. #sv = #se; ...}\endmodality(post))
        \varcond(\new(#v0, \typeof(#se)))
        \replacewith(
	   \modality{#allmodal}{.. 
                   #typeof(#se) #v0 = #se;
	           #static-initialisation(#sv);
                   @(#sv) = #v0; 
               ...}\endmodality(post))
        \heuristics(simplify_prog, simplify_prog_subset)
        \displayname "activeUse"  
  };

  activeUseStaticFieldWriteAccess2 {
	\find (\modality{#allmodal}{.. #v.#sv = #se; ...}\endmodality(post))
        \varcond(\new(#v0, \typeof(#se)))
        \replacewith(
	   \modality{#allmodal}{.. 
                   #typeof(#se) #v0 = #se;
	           #static-initialisation(#sv);
                   @(#sv) = #v0; 
               ...}\endmodality(post))
        \heuristics(simplify_prog, simplify_prog_subset)
        \displayname "activeUse"  
  };

 activeUseStaticFieldWriteAccess3 {
        \schemaVar \program Expression #arr, #idx;
	\find (\modality{#allmodal}{.. #sv = #arr[#idx]; ...}\endmodality(post))
        \varcond(\new(#v0, \typeof(#sv)))
        \replacewith(
	   \modality{#allmodal}{.. 
                   #typeof(#sv) #v0 = #arr[#idx];
	           #static-initialisation(#sv);
                   @(#sv) = #v0; 
               ...}\endmodality(post))
        \heuristics(simplify_prog, simplify_prog_subset)
        \displayname "activeUse"  
  };

 activeUseStaticFieldWriteAccess4 {
        \schemaVar \program Expression #arr, #idx;
	\find (\modality{#allmodal}{.. #v.#sv = #arr[#idx]; ...}\endmodality(post))
        \varcond(\new(#v0, \typeof(#sv)))
        \replacewith(
	   \modality{#allmodal}{.. 
                   #typeof(#sv) #v0 = #arr[#idx];
	           #static-initialisation(#sv);
                   @(#sv) = #v0; 
               ...}\endmodality(post))
        \heuristics(simplify_prog, simplify_prog_subset)
        \displayname "activeUse"  
  };

  activeUseStaticFieldWriteAccess5 {
	\find (\modality{#allmodal}{.. #sv = #v1.#a; ...}\endmodality(post))
        \varcond(\new(#v0, \typeof(#a)))
        \replacewith(
	   \modality{#allmodal}{.. 
                   #typeof(#a) #v0 = #v1.#a;
	           #static-initialisation(#sv);
                   @(#sv) = #v0; 
               ...}\endmodality(post))
        \heuristics(simplify_prog, simplify_prog_subset)
        \displayname "activeUse"  
  };

  activeUseStaticFieldWriteAccess6 {
	\find (\modality{#allmodal}{.. #v.#sv = #v1.#a; ...}\endmodality(post))
        \varcond(\new(#v0, \typeof(#a)))
        \replacewith(
	   \modality{#allmodal}{.. 
                   #typeof(#a) #v0 = #v1.#a;
	           #static-initialisation(#sv);
                   @(#sv) = #v0; 
               ...}\endmodality(post))
        \heuristics(simplify_prog, simplify_prog_subset)
        \displayname "activeUse"  
  };

  activeUseStaticFieldReadAccess {
	\find (\modality{#allmodal}{.. #lhs = #sv; ...}\endmodality(post))
        \replacewith (\modality{#allmodal}{.. 
             #static-initialisation(#sv); 
             #lhs = @(#sv); 
        ...}\endmodality(post))
        \heuristics(simplify_prog, simplify_prog_subset)
        \displayname "activeUse"
  };

  activeUseStaticFieldReadAccess2 {
	\find (\modality{#allmodal}{.. #lhs = #v.#sv; ...}\endmodality(post))
        \replacewith (\modality{#allmodal}{.. 
               #static-initialisation(#sv); 
               #lhs = @(#sv); 
             ...}\endmodality(post))
        \heuristics(simplify_prog, simplify_prog_subset)
        \displayname "activeUse"
  };

}

\rules(programRules:Java, initialisation:disableStaticInitialisation) {

  activeUseStaticFieldWriteAccess {
	\find (\modality{#allmodal}{.. #sv = #se; ...}\endmodality(post))
        \varcond(\new(#v0, \typeof(#se)))
        \replacewith(
	   \modality{#allmodal}{.. 
                   #typeof(#se) #v0 = #se;
                   @(#sv) = #v0; 
               ...}\endmodality(post))
        \heuristics(simplify_prog, simplify_prog_subset)
        \displayname "activeUse"  
  };

  activeUseStaticFieldWriteAccess2 {
	\find (\modality{#allmodal}{.. #v.#sv = #se; ...}\endmodality(post))
        \varcond(\new(#v0, \typeof(#se)))
        \replacewith(
	   \modality{#allmodal}{.. 
                   #typeof(#se) #v0 = #se;
                   @(#sv) = #v0; 
               ...}\endmodality(post))
        \heuristics(simplify_prog, simplify_prog_subset)
        \displayname "activeUse"  
  };

 activeUseStaticFieldWriteAccess3 {
        \schemaVar \program Expression #arr, #idx;
	\find (\modality{#allmodal}{.. #sv = #arr[#idx]; ...}\endmodality(post))
        \varcond(\new(#v0, \typeof(#sv)))
        \replacewith(
	   \modality{#allmodal}{.. 
                   #typeof(#sv) #v0 = #arr[#idx];
                   @(#sv) = #v0; 
               ...}\endmodality(post))
        \heuristics(simplify_prog, simplify_prog_subset)
        \displayname "activeUse"  
  };

 activeUseStaticFieldWriteAccess4 {
        \schemaVar \program Expression #arr, #idx;
	\find (\modality{#allmodal}{.. #v.#sv = #arr[#idx]; ...}\endmodality(post))
        \varcond(\new(#v0, \typeof(#sv)))
        \replacewith(
	   \modality{#allmodal}{.. 
                   #typeof(#sv) #v0 = #arr[#idx];
                   @(#sv) = #v0; 
               ...}\endmodality(post))
        \heuristics(simplify_prog, simplify_prog_subset)
        \displayname "activeUse"  
  };

  activeUseStaticFieldWriteAccess5 {
	\find (\modality{#allmodal}{.. #sv = #v1.#a; ...}\endmodality(post))
        \varcond(\new(#v0, \typeof(#a)))
        \replacewith(
	   \modality{#allmodal}{.. 
                   #typeof(#a) #v0 = #v1.#a;
                   @(#sv) = #v0; 
               ...}\endmodality(post))
        \heuristics(simplify_prog, simplify_prog_subset)
        \displayname "activeUse"  
  };

  activeUseStaticFieldWriteAccess6 {
	\find (\modality{#allmodal}{.. #v.#sv = #v1.#a; ...}\endmodality(post))
        \varcond(\new(#v0, \typeof(#a)))
        \replacewith(
	   \modality{#allmodal}{.. 
                   #typeof(#a) #v0 = #v1.#a;
                   @(#sv) = #v0; 
               ...}\endmodality(post))
        \heuristics(simplify_prog, simplify_prog_subset)
        \displayname "activeUse"  
  };

  activeUseStaticFieldReadAccess {
	\find (\modality{#allmodal}{.. #lhs = #sv; ...}\endmodality(post))
        \replacewith (\modality{#allmodal}{.. 
             #lhs = @(#sv); 
        ...}\endmodality(post))
        \heuristics(simplify_prog, simplify_prog_subset)
        \displayname "activeUse"
  };

  activeUseStaticFieldReadAccess2 {
	\find (\modality{#allmodal}{.. #lhs = #v.#sv; ...}\endmodality(post))
        \replacewith (\modality{#allmodal}{.. 
                  #lhs = @(#sv); 
             ...}\endmodality(post))
        \heuristics(simplify_prog, simplify_prog_subset)
        \displayname "activeUse"
  };
}


\rules(programRules:Java, initialisation:enableStaticInitialisation) {

  activeUseMultiplication  { 
      \find (\modality{#allmodal}{.. 
                 #sv = #left * #right; 
             ...}\endmodality(post)) 
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith (
           \modality{#allmodal}{.. 
                  #typeof(#sv) #v0 = #left * #right; 	          
                  #static-initialisation(#sv);                  
                  @(#sv) = #v0;
           ...}\endmodality(post)
       ) 
      \heuristics(simplify_expression)
      \displayname "activeUse"
  };

  activeUseDivision  { 
      \find(\modality{#allmodal}{.. 
                #sv = #left / #right; 
            ...}\endmodality(post)) 
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith (\modality{#allmodal}{.. 
                #typeof(#sv) #v0 = #left / #right; 
                #static-initialisation(#sv);                  
                @(#sv) = #v0;
            ...}\endmodality(post))
      \heuristics(simplify_expression)
      \displayname "activeUse"
  };
    
  activeUseModulo {
      \find(\modality{#allmodal}{..
                #sv = #left % #right; 
            ...}\endmodality(post)) 
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith(\modality{#allmodal}{..
                #typeof(#sv) #v0 = #left % #right; 
                #static-initialisation(#sv);                  
                @(#sv) = #v0;
            ...}\endmodality(post))
      \heuristics(simplify_expression)
      \displayname "activeUse"
  };


  activeUseSubtraction  { 
     \find (\modality{#allmodal}{.. 
                #sv = #left - #right; 
            ...}\endmodality(post)) 
     \varcond(\new(#v0, \typeof(#sv)))
     \replacewith(\modality{#allmodal}{.. 
                #typeof(#sv) #v0 = #left - #right; 
                #static-initialisation(#sv);                  
                @(#sv) = #v0;
            ...}\endmodality(post)) 
     \heuristics(simplify_expression)
     \displayname "activeUse"
  };

  activeUseAddition  { 
      \find(\modality{#allmodal}{.. 
                #sv = #left + #right; 
            ...}\endmodality(post)) 
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith(\modality{#allmodal}{.. 
                #typeof(#sv) #v0 = #left + #right; 
                #static-initialisation(#sv);                  
                @(#sv) = #v0;
            ...}\endmodality(post)) 
      \heuristics(simplify_expression)
      \displayname "activeUse"
  };

  activeUseBitwiseAnd { 
      \find (\modality{#allmodal}{.. 
                  #sv = #left & #right; 
             ...}\endmodality(post)) 
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith(\modality{#allmodal}{.. 
                  #typeof(#sv) #v0 = #left & #right; 
                  #static-initialisation(#sv);                  
                  @(#sv) = #v0;
             ...}\endmodality(post)) 
      \heuristics(simplify_expression)
      \displayname "activeUse"
  };

  activeUseBitwiseOr { 
      \find (\modality{#allmodal}{.. 
                  #sv=#left | #right; 
             ...}\endmodality(post)) 
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith (\modality{#allmodal}{.. 
                  #typeof(#sv) #v0 = #left | #right; 
                  #static-initialisation(#sv);                  
                  @(#sv) = #v0;
             ...}\endmodality(post)) 
      \heuristics(simplify_expression)
      \displayname "activeUse"
  };

  activeUseBitwiseXOr { 
       \find (\modality{#allmodal}{.. 
                  #sv=#left ^ #right; 
              ...}\endmodality(post)) 
       \varcond(\new(#v0, \typeof(#sv)))
       \replacewith(\modality{#allmodal}{.. 
                  #typeof(#sv) #v0 = #left ^ #right; 
                  #static-initialisation(#sv);                  
                  @(#sv) = #v0;
              ...}\endmodality(post)) 
       \heuristics(simplify_expression)
       \displayname "activeUse"
  };

  activeUseShiftRight { 
      \find (\modality{#allmodal}{.. 
                 #sv=#left >> #right; 
             ...}\endmodality(post)) 
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith(\modality{#allmodal}{.. 
                 #typeof(#sv) #v0 = #left >> #right; 
                 #static-initialisation(#sv);                  
                 @(#sv) = #v0;
             ...}\endmodality(post)) 
      \heuristics(simplify_expression)
      \displayname "activeUse"
  };

  activeUseShiftLeft { 
      \find (\modality{#allmodal}{.. 
                 #sv=#left << #right; ...}
             \endmodality(post)) 
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith(\modality{#allmodal}{.. 
                 #typeof(#sv) #v0 = #left << #right; 
                 #static-initialisation(#sv);                  
                 @(#sv) = #v0;
              ...} \endmodality(post)) 
      \heuristics(simplify_expression)
      \displayname "activeUse"
  };

  activeUseUnsignedShiftRight { 
      \find (\modality{#allmodal}{.. 
                 #sv=#left >>> #right; 
             ...}\endmodality(post)) 
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith(\modality{#allmodal}{.. 
                 #typeof(#sv) #v0 = #left >>> #right; ...}
                 #static-initialisation(#sv);                  
                 @(#sv) = #v0;
             \endmodality(post)) 
      \heuristics(simplify_expression)
      \displayname "activeUse"
  };

  activeUseMinus { 
     \find (\modality{#allmodal}{.. 
                #sv = - #left; 
            ...}\endmodality(post)) 
     \varcond(\new(#v0, \typeof(#sv)))
     \replacewith(\modality{#allmodal}{.. 
                #typeof(#sv) #v0 = - #left; 
                #static-initialisation(#sv);                  
                @(#sv) = #v0;
            ...}\endmodality(post))
     \heuristics (simplify_expression)
     \displayname "activeUse"
  };

  activeUseBitwiseNegation { 
      \find (\modality{#allmodal}{.. 
                 #sv = ~ #left; 
             ...}\endmodality(post)) 
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith(\modality{#allmodal}{.. 
                 #typeof(#sv) #v0 = ~ #left; 
                 #static-initialisation(#sv);                  
                 @(#sv) = #v0;
             ...}\endmodality(post)) 
      \heuristics (simplify_expression)
      \displayname "activeUse"
  };

  activeUseByteCast { 
     \find(\modality{#allmodal}{..
               #sv = (byte) #seShortIntLong; 
           ...}\endmodality(post))
     \varcond(\new(#v0, \typeof(#sv)))
     \replacewith (\modality{#allmodal}{..
               #typeof(#sv) #v0 = (byte) #seShortIntLong; 
               #static-initialisation(#sv);                  
               @(#sv) = #v0;
           ...}\endmodality(post)) 
     \heuristics (simplify_expression)
     \displayname "activeUse" 
  };


  activeUseShortCast { 
       \find (\modality{#allmodal}{.. 
                  #sv = (short) #seIntLong; 
              ...}\endmodality(post))
       \varcond(\new(#v0, \typeof(#sv)))
       \replacewith(\modality{#allmodal}{.. 
                  #typeof(#sv) #v0 = (short) #seIntLong; 
                  #static-initialisation(#sv);                  
                  @(#sv) = #v0;
             ...}\endmodality(post)) 
       \heuristics (simplify_expression)
       \displayname "activeUse" 
  };


  activeUseIntCast { 
      \find (\modality{#allmodal}{.. 
                 #sv = (int) #seLong; 
             ...}\endmodality(post))
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith (\modality{#allmodal}{.. 
                 #typeof(#sv) #v0 = (int) #seLong; 
                 #static-initialisation(#sv);                  
                 @(#sv) = #v0;
             ...}\endmodality(post)) 
      \heuristics (simplify_expression)
      \displayname "activeUse" 
  };

  activeUseCharCast { 
      \find (\modality{#allmodal}{.. 
                 #sv = (char) #seByteShortIntLong; 
             ...}\endmodality(post))
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith (\modality{#allmodal}{.. 
                 #typeof(#sv) #v0 = (char) #seByteShortIntLong; 
                 #static-initialisation(#sv);                  
                 @(#sv) = #v0;
             ...}\endmodality(post)) 
      \heuristics (simplify_expression)
      \displayname "activeUse" 
  };

}

\rules(programRules:Java, initialisation:disableStaticInitialisation) {

  activeUseMultiplication { 
      \find (\modality{#allmodal}{.. 
                 #sv = #left * #right; 
             ...}\endmodality(post)) 
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith (
           \modality{#allmodal}{.. 
                  #typeof(#sv) #v0 = #left * #right; 	          
                  @(#sv) = #v0;
           ...}\endmodality(post)
       ) 
      \heuristics(simplify_expression)
      \displayname "activeUse"
  };

  activeUseDivision { 
      \find(\modality{#allmodal}{.. 
                #sv = #left / #right; 
            ...}\endmodality(post)) 
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith (\modality{#allmodal}{.. 
                #typeof(#sv) #v0 = #left / #right; 
                @(#sv) = #v0;
            ...}\endmodality(post))
      \heuristics(simplify_expression)
      \displayname "activeUse"
  };
    
  activeUseModulo {
      \find(\modality{#allmodal}{..
                #sv = #left % #right; 
            ...}\endmodality(post)) 
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith(\modality{#allmodal}{..
                #typeof(#sv) #v0 = #left % #right; 
                @(#sv) = #v0;
            ...}\endmodality(post))
      \heuristics(simplify_expression)
      \displayname "activeUse"
  };

  activeUseSubtraction  { 
     \find (\modality{#allmodal}{.. 
                #sv = #left - #right; 
            ...}\endmodality(post)) 
     \varcond(\new(#v0, \typeof(#sv)))
     \replacewith(\modality{#allmodal}{.. 
                #typeof(#sv) #v0 = #left - #right; 
                @(#sv) = #v0;
            ...}\endmodality(post)) 
     \heuristics(simplify_expression)
     \displayname "activeUse"
  };

  activeUseAddition { 
      \find(\modality{#allmodal}{.. 
                #sv = #left + #right; 
            ...}\endmodality(post)) 
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith(\modality{#allmodal}{.. 
                #typeof(#sv) #v0 = #left + #right; 
                @(#sv) = #v0;
            ...}\endmodality(post)) 
      \heuristics(simplify_expression)
      \displayname "activeUse"
  };

  activeUseBitwiseAnd { 
      \find (\modality{#allmodal}{.. 
                  #sv = #left & #right; 
             ...}\endmodality(post)) 
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith(\modality{#allmodal}{.. 
                  #typeof(#sv) #v0 = #left & #right; 
                  @(#sv) = #v0;
             ...}\endmodality(post)) 
      \heuristics(simplify_expression)
      \displayname "activeUse"
  };

  activeUseBitwiseOr { 
      \find (\modality{#allmodal}{.. 
                  #sv=#left | #right; 
             ...}\endmodality(post)) 
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith (\modality{#allmodal}{.. 
                  #typeof(#sv) #v0 = #left | #right; 
                  @(#sv) = #v0;
             ...}\endmodality(post)) 
      \heuristics(simplify_expression)
      \displayname "activeUse"
  };

  activeUseBitwiseXOr { 
       \find (\modality{#allmodal}{.. 
                  #sv=#left ^ #right; 
              ...}\endmodality(post)) 
       \varcond(\new(#v0, \typeof(#sv)))
       \replacewith(\modality{#allmodal}{.. 
                  #typeof(#sv) #v0 = #left ^ #right; 
                  @(#sv) = #v0;
              ...}\endmodality(post)) 
       \heuristics(simplify_expression)
       \displayname "activeUse"
  };

  activeUseShiftRight { 
      \find (\modality{#allmodal}{.. 
                 #sv=#left >> #right; 
             ...}\endmodality(post)) 
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith(\modality{#allmodal}{.. 
                 #typeof(#sv) #v0 = #left >> #right; 
                 @(#sv) = #v0;
             ...}\endmodality(post)) 
      \heuristics(simplify_expression)
      \displayname "activeUse"
  };

  activeUseShiftLeft { 
      \find (\modality{#allmodal}{.. 
                 #sv=#left << #right; ...}
             \endmodality(post)) 
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith(\modality{#allmodal}{.. 
                 #typeof(#sv) #v0 = #left << #right; 
                 @(#sv) = #v0;
              ...} \endmodality(post)) 
      \heuristics(simplify_expression)
      \displayname "activeUse"
  };

  activeUseUnsignedShiftRight { 
      \find (\modality{#allmodal}{.. 
                 #sv=#left >>> #right; 
             ...}\endmodality(post)) 
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith(\modality{#allmodal}{.. 
                 #typeof(#sv) #v0 = #left >>> #right; ...}
                 @(#sv) = #v0;
             \endmodality(post)) 
      \heuristics(simplify_expression)
      \displayname "activeUse"
  };

  activeUseUnaryMinus { 
     \find (\modality{#allmodal}{.. 
                #sv = - #left; 
            ...}\endmodality(post)) 
     \varcond(\new(#v0, \typeof(#sv)))
     \replacewith(\modality{#allmodal}{.. 
                #typeof(#sv) #v0 = - #left; 
                @(#sv) = #v0;
            ...}\endmodality(post))
     \heuristics (simplify_expression)
     \displayname "activeUse"
  };

  activeUseBitwiseNegation { 
      \find (\modality{#allmodal}{.. 
                 #sv = ~ #left; 
             ...}\endmodality(post)) 
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith(\modality{#allmodal}{.. 
                 #typeof(#sv) #v0 = ~ #left; 
                 @(#sv) = #v0;
             ...}\endmodality(post)) 
      \heuristics (simplify_expression)
      \displayname "activeUse"
  };

  activeUseByteCast { 
     \find(\modality{#allmodal}{..
               #sv = (byte) #seShortIntLong; 
           ...}\endmodality(post))
     \varcond(\new(#v0, \typeof(#sv)))
     \replacewith (\modality{#allmodal}{..
               #typeof(#sv) #v0 = (byte) #seShortIntLong; 
               @(#sv) = #v0;
           ...}\endmodality(post)) 
     \heuristics (simplify_expression)
     \displayname "activeUse" 
  };


  activeUseShortCast { 
       \find (\modality{#allmodal}{.. 
                  #sv = (short) #seIntLong; 
              ...}\endmodality(post))
       \varcond(\new(#v0, \typeof(#sv)))
       \replacewith(\modality{#allmodal}{.. 
                  #typeof(#sv) #v0 = (short) #seIntLong; 
                  @(#sv) = #v0;
             ...}\endmodality(post)) 
       \heuristics (simplify_expression)
       \displayname "activeUse" 
  };


  activeUseIntCast { 
      \find (\modality{#allmodal}{.. 
                 #sv = (int) #seLong; 
             ...}\endmodality(post))
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith (\modality{#allmodal}{.. 
                 #typeof(#sv) #v0 = (int) #seLong; 
                 @(#sv) = #v0;
             ...}\endmodality(post)) 
      \heuristics (simplify_expression)
      \displayname "activeUse" 
  };

  activeUseCharCast { 
      \find (\modality{#allmodal}{.. 
                 #sv = (char) #seByteShortIntLong; 
             ...}\endmodality(post))
      \varcond(\new(#v0, \typeof(#sv)))
      \replacewith (\modality{#allmodal}{.. 
                 #typeof(#sv) #v0 = (char) #seByteShortIntLong; 
                 @(#sv) = #v0;
             ...}\endmodality(post)) 
      \heuristics (simplify_expression)
      \displayname "activeUse" 
  };
}
