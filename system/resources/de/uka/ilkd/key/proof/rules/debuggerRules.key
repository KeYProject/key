\include ruleSetsDeclarations; 

\heuristicsDecl{
  debugger;
  statement_sep;
  expr_sep;
  expr_sep_end;
}

\sorts{
}


\schemaVariables {
  \modalOperator {diamond, box,
                  diamond_trc, box_trc, throughout_trc} #normalassign; 
  \program Variable #loc, #v0,#v1,#id;

\program DebuggerType #dt;
\program sep #sep ;
\program Expression #expr;
\program[list] Expression #elist ;
\program LeftHandSide #lhs;



\program SimpleExpression #lit;
//  \program SimpleExpression #sse1,#sse2;
  \program SimpleStringExpression #sse1,#sse2;
  \formula post,f,b,c;
	//\int id;
\program[list] Statement #slist;
}



\functions{
}


\predicates {
  \nonRigid POST;
}



\rules{ 

   introduce_post_predicate  { 
         \find (==>\modality{#normalassign}{.. #slist  ...}\endmodality(post)) 
         \replacewith ( ==>\modality{#normalassign}{.. #slist  ...}\endmodality(POST)) 
     	\addrules(  remove_post_predicate { \find( (POST))
				\sameUpdateLevel
                                 \replacewith((post))
					\heuristics(debugger)
				\displayname "remove_post_predicate"
				} 
				
	)
	\heuristics(debugger)
	 \displayname "introduce_post_predicate"
	 };


   sep  { 
         \find (\modality{#normalassign}{.. sep(#sse1);  ...}\endmodality(post)) 
         \replacewith ( \modality{#normalassign}{..  ...}\endmodality(post)) 
				
	
	\heuristics(debugger)
	 \displayname "sep"
	 };


   /*remove_red  { 
         \find (phi==>) assumes
         \replacewith ( \modality{#normalassign}{..  ...}\endmodality(post)) 
				
	
	\heuristics(debugger)
	 \displayname "sep"
	 };*/


hide_right_debugger { \find (==> b) \replacewith (==>)
               \addrules( insert_hidden_debugger { \add (==> b) } ) };



replace_post_predicate { \find( (POST))
				
                                 \replacewith((f))
					\heuristics(debugger)
				\displayname "replace_post_predicate"
				}; 

repl_post { \find (==>  \<{.. #slist  ...}\>post) \replacewith (==>b)
                };

insert_prog {  \add (==>b)
                };




statement_sep { 
        \find (\modality{#normalassign}{..
                  visualdebugger.Debug.#sep(#lit);
           ...}\endmodality(post)) 	
        \replacewith (
	   \modality{#normalassign}{..  ...}\endmodality(post)) 
 \displayname "SEP STMNT"
\heuristics(statement_sep, simplify_autoname)
 };




expr_sep {
  \find (
    \modality{#normalassign}{ .. 
                          #lhs=visualdebugger.Debug.#sep(#lit, #expr);
                         ... }\endmodality post
  )
  \varcond (  \new(#v0, \typeof (#lhs)), 
                    \new(#v1, \typeof (#expr)), 
                    \new(#id, \typeof  (#lit) ) )
  \replacewith (
    \modality{#normalassign}{ ..  
             #typeof (#lhs) #v0; 
             #v0 = #lhs; 
             #typeof (#expr) #v1; 
             #v1=#expr; 
             #typeof (#lit) #id = #lit;
             visualdebugger.Debug(#lhs)::visualdebugger.Debug.#sep(#id,#v1);
                         ... }\endmodality post
  )
\displayname "SEP EXPR"
  \heuristics ( simplify_autoname, expr_sep )

};





expr_sep_end { 
        \find (\modality{#normalassign}{..
                  visualdebugger.Debug(#lhs)::Debug.#sep(#lit,#expr);
           ...}\endmodality(post)) 	
        \replacewith (
	   \modality{#normalassign}{.. #lhs = #expr; ...}\endmodality(post)) 
 \displayname "SEP EXPR END"
 \heuristics ( simplify_autoname , expr_sep_end)
};




/*
execute_sep3 { 
        \find (\modality{#normalassign}{..
                  #dt.#sep(#lit);
           ...}\endmodality(post)) 	
        \replacewith (
	   \modality{#normalassign}{..  ...}\endmodality(post)) 
 \displayname "sep4"

	
 };


*/


/*
execute_sep2 { 
        \find (\modality{#normalassign}{..
                  visualdebugger.Debug()::Debug.#sep(#lit);
           ...}\endmodality(post)) 	
        \replacewith (
	   \modality{#normalassign}{..  ...}\endmodality(post)) 
 \displayname "sep"
};*/


}
 
