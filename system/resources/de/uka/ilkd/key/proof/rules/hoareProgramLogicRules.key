\rules {
  assignment {
        \schemaVar \formula phi;
        \schemaVar \program Variable #leftVar;
        \schemaVar \program Expression #rightExp;
        
  	\find (==> \[{.. #leftVar = #rightExp; ...}\] phi)
  	\replacewith (==> { #leftVar := #rightExp } \[{.. ...}\] phi)
        \heuristics(userTaclets1)
  };
  
  conditional {
        \schemaVar \formula phi;
  	\schemaVar \program Expression #guard;
  	\schemaVar \program Statement  #thenStatement, #elseStatement;
  	
  	\find (==> \[{.. if (#guard) #thenStatement else #elseStatement ...}\] phi)
        "#guard=TRUE (then-branch)":  \replacewith ( ==> \[{.. #thenStatement ...}\] phi ) 
                                      \add(#bool2Logic(#guard) ==>);
        "#guard=FALSE (else branch)": \replacewith ( ==> \[{.. #elseStatement ...}\] phi ) 
                                      \add(!#bool2Logic(#guard) ==>)          
       \heuristics(userTaclets1)
  };

  exit {
        \schemaVar \formula phi;
          	
  	\find (==> \[{  }\] phi)
        \replacewith ( ==> phi )
        \heuristics(userTaclets1)
  };

  removeBlock {
        \schemaVar \formula phi;
        \schemaVar \program[list] Statement #slist;

  	\find (\[{.. { #slist } ...}\] phi)
  	\replacewith(\[{.. #slist ...}\] phi)
  	\heuristics (simplify_prog)
  	\displayname "remove block"
  };

  removeBlock2 {
        \schemaVar \formula phi;
        \schemaVar \program[list] Statement #slist;

  	\find (==> \[{.. { #slist } ...}\] phi)
  	\replacewith(==> \[{.. #slist ...}\] phi)
  	\heuristics (simplify_prog)
  	\displayname "remove block"
  };

  
}
