\functions{
  \nonRigid[Location] int executionTime;
}

\schemaVariables {
 \modalOperator { diamond, diamond_trc, box} #allmodal;
 \modalOperator { diamond, box} #normal;
}

\rules {
  assignment {
        \schemaVar \formula phi;
        \schemaVar \program Variable #leftVar;
        \schemaVar \program Expression #rightExp;
        
  	\find (==> \modality{#normal}{.. #leftVar = #rightExp; ...}\endmodality(phi))
  	\replacewith (==> { #leftVar := #rightExp } \modality{#normal}{.. ...}\endmodality(phi))
        \heuristics(userTaclets1)
  };


  assignmentArray {
        \schemaVar \formula phi;
        \schemaVar \program Variable #leftVar;
        \schemaVar \program NonSimpleExpression  #indexExp;
	\schemaVar \program Expression #rightExp;
        
  	\find (==> \modality{#normal}{.. #indexExp = #rightExp; ...}\endmodality(phi))
  	\replacewith (==> { #indexExp := #rightExp } \modality{#normal}{.. ...}\endmodality(phi))
        \heuristics(userTaclets1)
  };


  assignmentExecutionTime {
        \schemaVar \formula phi;
        \schemaVar \program Variable #leftVar;
        \schemaVar \program Expression #rightExp;
        
  	\find (==> \modality{diamond_trc}{.. #leftVar = #rightExp; ...}\endmodality(phi))
  	\replacewith (==> { executionTime := executionTime + 1} { #leftVar := #rightExp } \modality{diamond_trc}{.. ...}\endmodality(phi))	
        \heuristics(userTaclets1)
	\displayname "assignment"
  };

  
  conditional {
        \schemaVar \formula phi;
  	\schemaVar \program Expression #guard;
  	\schemaVar \program Statement  #thenStatement, #elseStatement;
  	
  	\find (==> \modality{#normal}{.. if (#guard) #thenStatement else #elseStatement ...}\endmodality(phi))
        "#guard=TRUE (then-branch)":  \replacewith ( ==> \modality{#normal}{.. #thenStatement ...}\endmodality(phi) ) 
                                      \add(#bool2Logic(#guard) ==>);
        "#guard=FALSE (else branch)": \replacewith ( ==> \modality{#normal}{.. #elseStatement ...}\endmodality(phi) ) 
                                      \add(!#bool2Logic(#guard) ==>)          
       \heuristics(userTaclets1)
  };

  conditionalExecutionTime {
        \schemaVar \formula phi;
  	\schemaVar \program Expression #guard;
  	\schemaVar \program Statement  #thenStatement, #elseStatement;
  	
  	\find (==> \modality{diamond_trc}{.. if (#guard) #thenStatement else #elseStatement ...}\endmodality(phi))
        "#guard=TRUE (then-branch)":  \replacewith ( ==> \modality{diamond_trc}{.. #thenStatement ...}\endmodality(phi) ) 
                                      \add(#bool2Logic(#guard) ==>);
        "#guard=FALSE (else branch)": \replacewith ( ==> \modality{diamond_trc}{.. #elseStatement ...}\endmodality(phi) ) 
                                      \add(!#bool2Logic(#guard) ==>)          
       \heuristics(userTaclets1)
       \displayname "conditional"
  };

  exit {
        \schemaVar \formula phi;
          	
        \find (==> \modality{#allmodal}{  }\endmodality(phi))
        \replacewith ( ==> phi )
        \heuristics(userTaclets1)
  };  
  
  skip {
        \schemaVar \formula phi;
        \schemaVar \program[list] Statement #slist;

  	\find (==> \modality{#normal}{.. ; ...}\endmodality(phi))
  	\replacewith(==> \modality{#normal}{.. ...}\endmodality(phi))
  	\heuristics (userTaclets1)
  	\displayname "skip"
  };

  skipExecutionTime {
    \schemaVar \formula phi;
  	\find (==> \modality{diamond_trc}{.. ; ...}\endmodality(phi))
  	\replacewith(==> {executionTime:=executionTime+1}\modality{diamond_trc}{.. ...}\endmodality(phi))
  	\heuristics (userTaclets1)
  	\displayname "skip"
  };


  removeBlock {
        \schemaVar \formula phi;
        \schemaVar \program[list] Statement #slist;

  	\find (\modality{#allmodal}{.. { #slist } ...}\endmodality(phi))
  	\replacewith(\modality{#allmodal}{.. #slist ...}\endmodality(phi))
  	\heuristics (simplify_prog)
  	\displayname "removeBlock"
  };

  removeBlock2 {
        \schemaVar \formula phi;
        \schemaVar \program[list] Statement #slist;

  	\find (==> \modality{#allmodal}{.. { #slist } ...}\endmodality(phi))
  	\replacewith(==> \modality{#allmodal}{.. #slist ...}\endmodality(phi))
  	\heuristics (simplify_prog)
  	\displayname "removeBlock"
  };

  
}
