\schemaVariables {
	\modalOperator {diamond, box} #allmodal;
	\formula formula;

	\program ClangValueType #vtype;
	\program ClangIntegerType #itype;
	\program ClangPointerType #ptype;
	\program ClangScalarType #stype;
	\program ClangObjectType #otype;

	\program ClangVariable #tvar, #tvar1, #tvar2;

	\program ClangMember #member;

	\program ClangVariable #var, #var1, #var2, #var3;
	\program ClangValueVariable #vvar, #vvar1, #vvar2, #vvar3;
	\program ClangObjectVariable #ovar, #ovar1, #ovar2, #ovar3;
	\program ClangIntegerVariable #ivar, #ivar1, #ivar2, #ivar3;
	\program ClangPointerVariable #pvar, #pvar1, #pvar2, #pvar3;

	\program ClangValueSimpleExpression #vsexp, #vsexp1, #vsexp2, #vsexp3;
	\program ClangIntegerSimpleExpression #isexp, #isexp1, #isexp2, #isexp3;
	\program ClangPointerSimpleExpression #psexp, #psexp1, #psexp2, #psexp3;
	
	\program ClangExpression #exp, #exp1, #exp2;
	\program ClangObjectExpression #oexp, #oexp1, #oexp2;
	\program ClangValueExpression #vexp, #vexp1, #vexp2;
	\program ClangIntegerExpression #iexp, #iexp1, #iexp2;
	\program ClangPointerExpression #pexp, #pexp1, #pexp2;
	\program ClangComplexExpression #cexp, #cexp1, #cexp2;
	\program ClangValueComplexExpression #vcexp, #vcexp1, #vcexp2;
	\program ClangObjectComplexExpression #ocexp, #ocexp1, #ocexp2;

	\program ClangValueNonAssignmentExpression #vnaexp;
	\program ClangObjectNonAssignmentExpression #onaexp;
}

\rules {

	/**
	 * Converting value non-assignment expression to normal form.
	 *
 	 * Normal form: 
	 *	#exp = #exp
	 *	#vvar <- #exp
	 */
	simplifyValueNonAssignmentExpression {
		\find (\modality{#allmodal}.. #vnaexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vnaexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vnaexp; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};

	/**
	 * Converting object non-assignment expression to normal form.
	 *
 	 * Normal form: 
	 *	#exp = #exp
	 *	#ovar <- #exp
	 */
	simplifyObjectNonAssignmentExpression {
		\find (\modality{#allmodal}.. #onaexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#onaexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar <- #onaexp; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};

	/**
	 * Removing parentheses in value assignment.
	 *
	 * Normal form: no parentheses
	 */
	simplifyValueAssignment_Parentheses {
		\find (\modality{#allmodal}.. #vvar = (#vexp); ...\endmodality(formula)) 
		\replacewith ( 
			\modality{#allmodal}.. #vvar = #vexp; ...\endmodality(formula))
		\heuristics(simplify_prog)
	};	

	/**
	 * Removing parentheses in reference assignment.
	 *
	 * Normal form: no parentheses
	 */
	simplifyReferenceAssignment_Parentheses {
		\find (\modality{#allmodal}.. #ovar <- (#oexp); ...\endmodality(formula)) 
		\replacewith ( 
			\modality{#allmodal}.. #ovar <- #oexp; ...\endmodality(formula))
		\heuristics(simplify_prog)
	};	

	/** Deep value assignment **/

	/**
	 * Simplifying complex LHS of deep value assignment.
	 *
	 * Normal form: 
	 *	#ovar = #exp
	 *	#ovar <- #exp
	 */
	simplifyDeepValueAssignment_ComplexLHS {
		\find (\modality{#allmodal}.. #ocexp = #oexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#ocexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar <- #ocexp; #tvar = #oexp; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};

	/**
	 * Simplifying complex RHS of deep value assignment.
	 *
	 * Normal form: 
	 *	#exp = #ovar
	 *	#ovar <- #exp
	 */
	simplifyDeepValueAssignment_LHS_ComplexRHS {
		\find (\modality{#allmodal}.. #oexp = #ocexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#ocexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar <- #ocexp; #oexp = #tvar; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};

	/** ValueOf in value assignment **/

	/**
	 * Simplifying complex ValueOf LHS of value assignment.
	 *
	 * Normal form: 
	 * 	@#ovar = #exp
	 */
	simplifyValueAssignment_ComplexValueOfLHS {
		\find (\modality{#allmodal}.. @#ocexp = #exp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#ocexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar <- #ocexp; @#tvar= #exp; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};

	/**
	 * Simplifying value assignment with ValueOf LHS and complex RHS.
	 * 
	 * Normal form: 
	 *	#vvar = #exp
	 *	@#ovar = #vvar
	 */
	simplifyValueAssignment_ValueOfLHS_ComplexRHS {
		\find (\modality{#allmodal}.. @#ovar = #vcexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; @#ovar = #tvar; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};	

	/**
	 * Simplifying value assignment with complex ValueOf RHS.
	 *
	 * Normal form: 
	 * 	#ovar <- #exp
	 *	#vvar = @#ovar
	 */
	simplifyValueAssignment_LHS_ComplexValueOfRHS {
		\find (\modality{#allmodal}.. #vvar = @#ocexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#ocexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar <- #ocexp; #vvar = @#tvar; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};	

	/** Member access **/

	/**
	 * Simplifying reference assignment with complex member access RHS.
	 *
	 * Normal form: 
	 *	#ovar <- #exp
	 *	#ovar <- #ovar.#member
	 */
	simplifyReferenceAssignment_LHS_ComplexMemberAccessRHS {
		\find (\modality{#allmodal}.. #ovar <- #ocexp.#member; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#ocexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar <- #ocexp; #ovar <- #tvar.#member; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};	

	/** Array access **/

	/**
	 * Simplifying reference assignment with complex array access RHS.
	 *
	 * Normal form: 
	 *	#ovar <- #exp
	 *	#ovar <- #ovar[#vexp]
	 */
	simplifyReferenceAssignment_LHS_ComplexArrayAccessRHS {
		\find (\modality{#allmodal}.. #ovar <- #ocexp[#vexp]; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#ocexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar <- #ocexp; #ovar <- #tvar[#vexp]; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};
	
	/**
	 * Simplifying reference assignment with complex index array access RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#ovar <- #oexp[#vvar]
	 */
	simplifyReferenceAssignment_LHS_ComplexIndexArrayAccessRHS {
		\find (\modality{#allmodal}.. #ovar <- #oexp[#vcexp]; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #ovar <- #oexp[#tvar]; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};	

	/**
	 * Simplifying reference assignment with pointer indexing RHS.
	 *
	 * Normal form: no pointer indexing
	 */
	simplifyReferenceAssignment_LHS_PointerIndexingRHS {
		\find (\modality{#allmodal}.. #ovar <- #pexp[#iexp]; ...\endmodality(formula))
		\replacewith ( 			
				\modality{#allmodal}.. #ovar <- *(#pexp + #iexp); ...\endmodality(formula)
				)
		\heuristics(simplify_prog)
	};	

	/** Dereferencing & indirection **/

	/**
	 * Simplifying reference assignment with complex dereferencing RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#ovar <- *#vvar
	 */
	simplifyReferenceAssignment_LHS_ComplexDereferenceRHS {
		\find (\modality{#allmodal}.. #ovar <- *#vcexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #ovar <- *#tvar; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};

	/**
	 * Simplifying value assignment with complex indirection RHS.
	 *
	 * Normal form: 
	 *	#ovar <- #exp
	 *	#ovar = &#vvar
	 */
	simplifyValueAssignment_LHS_ComplexIndirectionRHS {
		\find (\modality{#allmodal}.. #vvar = &#ocexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#ocexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar <- #ocexp; #vvar = &#tvar; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};

	/** Memory **/

	/**
	 * Simplifying value assignment with complex calloc() RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = calloc(#vvar, sizeof(#otype))
	 */
	simplifyValueAssignment_LHS_ComplexCallocRHS {
		\find (\modality{#allmodal}.. #vvar = calloc(#vcexp, sizeof(#otype)); ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = calloc(#tvar, sizeof(#otype)); ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};

	/**
	 * Simplifying reference assignment with complex free() RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#ovar <- free(#vvar)
	 */
	simplifyReferenceAssignment_LHS_ComplexFreeRHS {
		\find (\modality{#allmodal}.. #ovar <- free(#vcexp); ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #ovar <- free(#tvar); ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};	

	/* Casts */

	/**
	 * Simplifying value assignment with complex type cast RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = (#vtype)#vvar
	 */
	simplifyValueAssignment_LHS_ComplexCastRHS {
		\find (\modality{#allmodal}.. #vvar = (#vtype)#vcexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = (#vtype)#tvar; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};	

	/* Logic */

	/**
	 * Simplifying value assignment with complex logic not RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = !#vvar
	 */
	simplifyValueAssignment_LHS_ComplexLogicNotRHS {
		\find (\modality{#allmodal}.. #vvar = !#vcexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = !#tvar; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/* Equality */

	/**
	 * Simplifying value assignment with complex equality RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #vvar == #exp
	 */
	simplifyValueAssignment_LHS_ComplexEqualsRHS_L {
		\find (\modality{#allmodal}.. #vvar = #vcexp == #vexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #tvar == #vexp; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with complex equality RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #exp == #vvar
	 */
	simplifyValueAssignment_LHS_ComplexEqualsRHS_R {
		\find (\modality{#allmodal}.. #vvar = #vexp == #vcexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #vexp == #tvar; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with complex inequality RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #vvar != #exp
	 */
	simplifyValueAssignment_LHS_ComplexNotEqualsRHS_L {
		\find (\modality{#allmodal}.. #vvar = #vcexp != #vexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #tvar != #vexp; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with complex inequality RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #exp != #vvar
	 */
	simplifyValueAssignment_LHS_ComplexNotEqualsRHS_R {
		\find (\modality{#allmodal}.. #vvar = #vexp != #vcexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #vexp != #tvar; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		
	
	/* Relational */

	/**
	 * Simplifying value assignment with complex relational greater RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #vvar > #exp
	 */
	simplifyValueAssignment_LHS_ComplexRelationalGreaterRHS_L {
		\find (\modality{#allmodal}.. #vvar = #vcexp > #vexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #tvar > #vexp; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with complex relational greater RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #exp > #vvar
	 */
	simplifyValueAssignment_LHS_ComplexRelationalGreaterRHS_R {
		\find (\modality{#allmodal}.. #vvar = #vexp > #vcexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #vexp > #tvar; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with complex relational less RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #vvar < #exp
	 */
	simplifyValueAssignment_LHS_ComplexRelationalLessRHS_L {
		\find (\modality{#allmodal}.. #vvar = #vcexp < #vexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #tvar < #vexp; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with complex relational less RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #exp < #vvar
	 */
	simplifyValueAssignment_LHS_ComplexRelationalLessRHS_R {
		\find (\modality{#allmodal}.. #vvar = #vexp < #vcexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #vexp < #tvar; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with complex relational lesseq RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #vvar <= #exp
	 */
	simplifyValueAssignment_LHS_ComplexRelationalLessEqRHS_L {
		\find (\modality{#allmodal}.. #vvar = #vcexp <= #vexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #tvar <= #vexp; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with complex relational lesseq RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #exp <= #vvar
	 */
	simplifyValueAssignment_LHS_ComplexRelationalLessEqRHS_R {
		\find (\modality{#allmodal}.. #vvar = #vexp <= #vcexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #vexp <= #tvar; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with complex relational greatereq RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #vvar >= #exp
	 */
	simplifyValueAssignment_LHS_ComplexRelationalGreaterEqRHS_L {
		\find (\modality{#allmodal}.. #vvar = #vcexp >= #vexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #tvar >= #vexp; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with complex relational greatereq RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #exp >= #vvar
	 */
	simplifyValueAssignment_LHS_ComplexRelationalGreaterEqRHS_R {
		\find (\modality{#allmodal}.. #vvar = #vexp >= #vcexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #vexp >= #tvar; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		
	
	/* Arithmetic */

	/**
	 * Simplifying value assignment with complex arithmetic negative RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = -#vvar
	 */
	simplifyValueAssignment_LHS_ComplexNegativeRHS {
		\find (\modality{#allmodal}.. #vvar = -#vcexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = -#tvar; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with complex arithmetic positive RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = +#vvar
	 */
	simplifyValueAssignment_LHS_ComplexPositiveRHS {
		\find (\modality{#allmodal}.. #vvar = +#vcexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = +#tvar; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with complex arithmetic plus RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #vvar + #exp
	 */
	simplifyValueAssignment_LHS_ComplexPlusRHS_L {
		\find (\modality{#allmodal}.. #vvar = #vcexp + #vexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #tvar + #vexp; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with complex arithmetic plus RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #exp + #vvar
	 */
	simplifyValueAssignment_LHS_ComplexPlusRHS_R {
		\find (\modality{#allmodal}.. #vvar = #vexp + #vcexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #vexp + #tvar; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with pointer indexing RHS.
	 * 
	 * Normal form:
	 *	#pvar = #psexp + #isexp
	 */
	simplifyValueAssignment_LHS_PointerIndexAddRHS {
		\find (\modality{#allmodal}.. #pvar = #isexp + #psexp; ...\endmodality(formula))
		\replacewith ( 			
				\modality{#allmodal}.. #pvar = #psexp + #isexp; ...\endmodality(formula)
				)
		\heuristics(simplify_prog)
	};

	/**
	 * Simplifying value assignment with complex arithmetic minus RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #vvar - #exp
	 */
	simplifyValueAssignment_LHS_ComplexMinusRHS_L {
		\find (\modality{#allmodal}.. #vvar = #vcexp - #vexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #tvar - #vexp; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with complex arithmetic minus RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #exp - #vvar
	 */
	simplifyValueAssignment_LHS_ComplexMinusRHS_R {
		\find (\modality{#allmodal}.. #vvar = #vexp - #vcexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #vexp - #tvar; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with complex arithmetic multiply RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #vvar * #exp
	 */
	simplifyValueAssignment_LHS_ComplexMultiplyRHS_L {
		\find (\modality{#allmodal}.. #vvar = #vcexp * #vexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #tvar * #vexp; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with complex arithmetic multiply RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #exp * #vvar
	 */
	simplifyValueAssignment_LHS_ComplexMultiplyRHS_R {
		\find (\modality{#allmodal}.. #vvar = #vexp * #vcexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #vexp * #tvar; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with complex arithmetic divide RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #vvar / #exp
	 */
	simplifyValueAssignment_LHS_ComplexDivideRHS_L {
		\find (\modality{#allmodal}.. #vvar = #vcexp / #vexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #tvar / #vexp; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with complex arithmetic divide RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #exp / #vvar
	 */
	simplifyValueAssignment_LHS_ComplexDivideRHS_R {
		\find (\modality{#allmodal}.. #vvar = #vexp / #vcexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #vexp / #tvar; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with complex arithmetic modulus RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #vvar % #exp
	 */
	simplifyValueAssignment_LHS_ComplexModulusRHS_L {
		\find (\modality{#allmodal}.. #vvar = #vcexp % #vexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #tvar % #vexp; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying value assignment with complex arithmetic modulus RHS.
	 *
	 * Normal form: 
	 *	#vvar = #exp
	 *	#vvar = #exp % #vvar
	 */
	simplifyValueAssignment_LHS_ComplexModulusRHS_R {
		\find (\modality{#allmodal}.. #vvar = #vexp % #vcexp; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vcexp; #vvar = #vexp % #tvar; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};		


	/* Nested assignment */

	/**
	 * Simplifying value assignment LHS with nested value assignment RHS.
	 *
	 * Normal form: 
	 *	#vexp = #vexp (no nested assignments)
	 */
	simplifyValueAssignment_LHS_NestedValueAssignmentRHS {
		\find (\modality{#allmodal}.. #vvar = #vexp1 = #vexp2; ...\endmodality(formula)) 
		\replacewith ( 
			\modality{#allmodal}.. #vexp1 = #vexp2; #vvar = #vexp2; ...\endmodality(formula))
		\heuristics(simplify_prog)
	};		

	/**
	 * Simplifying reference assignment LHS with deep value assignment RHS.
	 * NB! The #ovar should not be used as an lvalue.
	 *
	 * Normal form: 
	 *	#vexp = #vexp (no nested assignments)
	 */
	simplifyReferenceAssignment_LHS_NestedDeepValueAssignmentRHS {
		\find (\modality{#allmodal}.. #ovar <- #oexp1 = #oexp2; ...\endmodality(formula)) 
		\replacewith ( 
			\modality{#allmodal}.. #oexp1 = #oexp2; #ovar <- #oexp2; ...\endmodality(formula))
		\heuristics(simplify_prog)
	};		

	/* Conditional */

	/**
	 * Simplifying value assignment with complex condition conditional RHS.
	 * NB! Lazy evaluation.
	 *
	 * Normal form: 
	 *	#vvar = #vvar ? #exp1 : #exp2
	 */
	simplifyValueAssignment_LHS_ComplexConditional_RHS_C {
		\find (\modality{#allmodal}.. #var = #vcexp ? #exp1 : #exp2; ...\endmodality(formula)) 
		\varcond(\new(#tvar, \typeof(#vvar)))
		\replacewith ( 
			\modality{#allmodal}.. #tvar = #vvar; if (#tvar) #var = #exp1; else #var = #exp2; ...\endmodality(formula))
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};
}