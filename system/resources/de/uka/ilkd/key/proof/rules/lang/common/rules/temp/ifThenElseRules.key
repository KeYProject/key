// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2005 Universitaet Karlsruhe Germany
//                         Universitaet Koblenz-Landau, Germany
//                         and Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
// This file contains rules that are applicable for every sort (as they
// use \generic sorts).
// The format is the same as for problem files.

\sorts {
  \generic INT \extends int;
  \generic G, G2, G3, G4;
}

// These schema variables are used to write the following rules.
// They will not be visible in later runs of the parser, so you are
// fairly free in choosing their names.
\schemaVariables {
  \term G2  else, then ; 
  \term G t ;
  \formula phi,b,c;
  \variables G u ;
  \variables G3 v ;
  \variables G4 w ;

  \variables INT intVar ;
  \skolemTerm INT intSk ;
  \term int intT1, intT2;
  \term int intValue ;
}


\predicates {
  quanUpdateLeqInt(int, int);
}


\rules {

// ------------- handling the if-then-else-operator ----------------------

  ifthenelse_true { \find ( \if (true) \then (then) \else (else) )
                    \replacewith ( then )
                    \heuristics (concrete) };

  ifthenelse_true_for { \find ( \if (true) \then (b) \else (c) )
                        \replacewith ( b )
                        \heuristics (concrete)
                        \displayname "ifthenelse_true" };

  ifthenelse_false { \find ( \if (false) \then (then) \else (else) )
                     \replacewith ( else )
                     \heuristics (concrete) };

  ifthenelse_false_for { \find ( \if (false) \then (b) \else (c) )
                         \replacewith ( c )
                         \heuristics (concrete)
                         \displayname "ifthenelse_false" };

  ifthenelse_negated { \find ( \if (!phi) \then (then) \else (else) )
                       \replacewith ( \if (phi) \then (else) \else (then) )
                       \heuristics (simplify) };

  ifthenelse_negated_for { \find ( \if (!phi) \then (b) \else (c) )
                           \replacewith ( \if (phi) \then (c) \else (b) )
                           \heuristics (simplify)
                           \displayname "ifthenelse_negated" };

  ifthenelse_same_branches { \find ( \if (phi) \then (then) \else (then) )
                             \replacewith ( then )
                             \heuristics (simplify) };

  ifthenelse_same_branches_for { \find ( \if (phi) \then (b) \else (b) )
                                 \replacewith ( b )
                                 \heuristics (simplify)
                                 \displayname "ifthenelse_same_branches" };

  ifthenelse_split { \find ( \if (phi) \then (then) \else (else) ) \sameUpdateLevel
                     "#phi TRUE":  \replacewith ( then ) \add ( phi ==> );
                     "#phi FALSE": \replacewith ( else ) \add ( ==> phi )
                     \heuristics (split_cond) };

  ifthenelse_split_for { \find ( \if (phi) \then (b) \else (c) ) \sameUpdateLevel
                         "#phi TRUE":  \replacewith ( b ) \add ( phi ==> );
                         "#phi FALSE": \replacewith ( c ) \add ( ==> phi )
                         \heuristics (split_cond)
                         \displayname "ifthenelse_split" };


// ------------- handling the ifEx-then-else-operator, 1 var ----------------------

  ifExthenelse1_false { \find ( \ifEx u; (false) \then (then) \else (else) )
                        \replacewith ( else )
                        \heuristics (concrete) };
  
  ifExthenelse1_false_for { \find ( \ifEx u; (false) \then (b) \else (c) )
                            \replacewith ( c )
                            \heuristics (concrete)
                            \displayname "ifExthenelse1_false" };

  ifExthenelse1_eq { \find ( \ifEx u; (u = t) \then (then) \else (else) )
                     \varcond(\notFreeIn(u, t))
                     \replacewith ( {\subst u; t}then )
                     \heuristics (concrete) };
  
  ifExthenelse1_eq_for { \find ( \ifEx u; (u = t) \then (b) \else (c) )
                         \varcond(\notFreeIn(u, t))
                         \replacewith ( {\subst u; t}b )
                         \heuristics (concrete)
                         \displayname "ifExthenelse1_eq" };
  
  ifExthenelse1_eq2 { \find ( \ifEx u; (t = u) \then (then) \else (else) )
                      \varcond(\notFreeIn(u, t))
                      \replacewith ( {\subst u; t}then )
                      \heuristics (concrete)
                      \displayname "ifExthenelse1_eq" };
  
  ifExthenelse1_eq2_for { \find ( \ifEx u; (t = u) \then (b) \else (c) )
                          \varcond(\notFreeIn(u, t))
                          \replacewith ( {\subst u; t}b )
                          \heuristics (concrete)
                          \displayname "ifExthenelse1_eq" };

  ifExthenelse1_eq_phi { \find ( \ifEx u; (phi & u = t) \then (then) \else (else) )
                         \varcond(\notFreeIn(u, t))
                         \replacewith ( \if ({\subst u; t}phi)
                                        \then ({\subst u; t}then)
                                        \else (else) )
                         \heuristics (concrete) };
  
  ifExthenelse1_eq_for_phi { \find ( \ifEx u; (phi & u = t) \then (b) \else (c) )
                             \varcond(\notFreeIn(u, t))
                             \replacewith ( \if ({\subst u; t}phi)
                                            \then ({\subst u; t}b)
                                            \else (c) )
                             \heuristics (concrete)
                             \displayname "ifExthenelse1_eq" };
  
  ifExthenelse1_eq2_phi { \find ( \ifEx u; (phi & t = u) \then (then) \else (else) )
                          \varcond(\notFreeIn(u, t))
                          \replacewith ( \if ({\subst u; t}phi)
                                         \then ({\subst u; t}then)
                                         \else (else) )
                          \heuristics (concrete)
                          \displayname "ifExthenelse1_eq" };
  
  ifExthenelse1_eq2_for_phi { \find ( \ifEx u; (phi & t = u) \then (b) \else (c) )
                              \varcond(\notFreeIn(u, t))
                              \replacewith ( \if ({\subst u; t}phi) 
                                             \then ({\subst u; t}b)
                                             \else (c) )
                              \heuristics (concrete)
                              \displayname "ifExthenelse1_eq" };

  ifExthenelse1_unused_var { \find ( \ifEx u; (phi) \then (then) \else (else) )
                             \varcond(\notFreeIn(u, then))
                             \replacewith ( \if (\exists u; phi) \then (then) \else (else) )
                             \heuristics (simplify) };
  
  ifExthenelse1_unused_var_for { \find ( \ifEx u; (phi) \then (b) \else (c) )
                                 \varcond(\notFreeIn(u, b))
                                 \replacewith ( \if (\exists u; phi) \then (b) \else (c) )
                                 \heuristics (simplify)
                                 \displayname "ifExthenelse1_unused_var" };

  ifExthenelse1_split_int { \find ( \ifEx intVar; (phi) \then (then) \else (else) ) \sameUpdateLevel
                            \varcond (\new(intSk, \dependingOn(phi)), 
			              \notFreeIn(intVar, intSk))
                            \replacewith ( {\subst intVar; intSk}then )
                            \add ( {\subst intVar; intSk}phi,
                                   \forall intVar; (phi -> quanUpdateLeqInt(intSk, intVar)) ==> );
                            \replacewith ( else ) \add ( ==> \exists intVar; phi )
                            \heuristics (split_cond) };

  ifExthenelse1_solve_int { \find ( \ifEx intVar; (phi) \then (then) \else (else) ) \sameUpdateLevel
                            \varcond (\notFreeIn(intVar, intValue))
                            \replacewith ( {\subst intVar; (INT)intValue}then );
                            \replacewith ( \ifEx intVar; (phi) \then (then) \else (else) )
                            \add ( ==> {\subst intVar; (INT)intValue}phi &
                                       \forall intVar; (phi -> quanUpdateLeqInt(intValue, intVar)) ) };

  ifExthenelse1_min_int { \find ( \ifEx intVar; (phi) \then (then) \else (else) ) \sameUpdateLevel
                          \varcond (\notFreeIn(intVar, phi))
                          \replacewith ( \if (phi) \then ({\subst intVar; (INT)0}then) \else (else) )
                          \heuristics (concrete) };

  ifExthenelse1_split_int_for { \find ( \ifEx intVar; (phi) \then (b) \else (c) ) \sameUpdateLevel
                            \varcond (\new(intSk, \dependingOn(phi)),
			              \notFreeIn(intVar, intSk))
                            \replacewith ( {\subst intVar; intSk}b )
                            \add ( {\subst intVar; intSk}phi,
                                   \forall intVar; (phi -> quanUpdateLeqInt(intSk, intVar)) ==> );
                            \replacewith ( c ) \add ( ==> \exists intVar; phi )
                            \heuristics (split_cond)
                            \displayname "ifExthenelse1_split_int" };

  ifExthenelse1_solve_int_for { \find ( \ifEx intVar; (phi) \then (b) \else (c) ) \sameUpdateLevel
                            \varcond (\notFreeIn(intVar, intValue))
                            \replacewith ( {\subst intVar; (INT)intValue}b );
                            \replacewith ( \ifEx intVar; (phi) \then (b) \else (c) )
                            \add ( ==> {\subst intVar; (INT)intValue}phi &
                                       \forall intVar; (phi -> quanUpdateLeqInt(intValue, intVar)) )
                            \displayname "ifExthenelse1_solve_int" };

  ifExthenelse1_min_int_for { \find ( \ifEx intVar; (phi) \then (b) \else (c) ) \sameUpdateLevel
                          \varcond (\notFreeIn(intVar, phi))
                          \replacewith ( \if (phi) \then ({\subst intVar; (INT)0}b) \else (c) )
                          \heuristics (concrete)
                          \displayname "ifExthenelse1_min_int" };



// ------------- handling the ifEx-then-else-operator, 2 vars ----------------------

  ifExthenelse2_false { \find ( \ifEx (u; v) (false) \then (then) \else (else) )
                        \replacewith ( else )
                        \heuristics (concrete) };
  
  ifExthenelse2_false_for { \find ( \ifEx (u; v) (false) \then (b) \else (c) )
                            \replacewith ( c )
                            \heuristics (concrete)
                            \displayname "ifExthenelse2_false" };

  ifExthenelse2_split_off { \find ( \ifEx (u; v) (phi) \then (then) \else (else) )
			    \varcond (\notFreeIn(u, else))
                            \replacewith ( \ifEx u; (\exists v; phi)					      
                                               \then (\ifEx v; (phi) \then (then) \else (else))
                                               \else (else) )
                            \heuristics (simplify) };

  ifExthenelse2_split_off_for { \find ( \ifEx (u; v) (phi) \then (b) \else (c) )
                 	        \varcond (\notFreeIn(u, c))			        
                                \replacewith ( \ifEx u; (\exists v; phi)
                                                   \then (\ifEx v; (phi) \then (b) \else (c))
                                                   \else (c) )
                                \heuristics (simplify)
                                \displayname "ifExthenelse2_split_off" };

// ------------- handling the ifEx-then-else-operator, 3 vars ----------------------

  ifExthenelse3_false { \find ( \ifEx (u; v; w) (false) \then (then) \else (else) )
                        \replacewith ( else )
                        \heuristics (concrete) };
  
  ifExthenelse3_false_for { \find ( \ifEx (u; v; w) (false) \then (b) \else (c) )
                            \replacewith ( c )
                            \heuristics (concrete)
                            \displayname "ifExthenelse3_false" };

  ifExthenelse3_split_off {  \find ( \ifEx (u; v; w) (phi) \then (then) \else (else) )
                 	        \varcond (\notFreeIn(u, else))			        
                                \replacewith ( \ifEx u; (\exists v; \exists w; phi)
                                                   \then (\ifEx (v; w) (phi) \then (then) \else (else))
                                                   \else (else) )
                                \heuristics (simplify)
                                \displayname "ifExthenelse3_split_off" };

  ifExthenelse3_split_off_for { \find ( \ifEx (u; v; w) (phi) \then (b) \else (c) )
                 	        \varcond (\notFreeIn(u, c))			        
                                \replacewith ( \ifEx u; (\exists v; \exists w; phi)
                                                   \then (\ifEx (v; w) (phi) \then (b) \else (c))
                                                   \else (c) )
                                \heuristics (simplify)
                                \displayname "ifExthenelse3_split_off" };


// ------------- well-orderings used ----------------------

  def_quanUpdateLeqInt { \find ( quanUpdateLeqInt(intT1, intT2) )
                         \replacewith ( ( geq(intT1, intT2) & lt(intT2, 0) ) |
                                       ( leq(0, intT1) & leq(intT1, intT2) ) )
                         \heuristics (simplify) };

}
