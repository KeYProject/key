\schemaVariables {
	\skolemTerm int dummy;

	\modalOperator {diamond, box} #allmodal;
	\formula formula;

	\program ClangVariable #tvar, #tvar1, #tvar2;

	\program ClangValueType #vtype;
	\program ClangIntegerType #itype;
	\program ClangPointerType #ptype;
	\program ClangScalarType #stype;
	\program ClangObjectType #otype;

	\program ClangMember #member;

	\program ClangIntegerLiteral #ilit;

	\program ClangVariable #var, #var1, #var2, #var3;
	\program ClangValueVariable #vvar, #vvar1, #vvar2, #vvar3;
	\program ClangObjectVariable #ovar, #ovar1, #ovar2, #ovar3;
	\program ClangIntegerVariable #ivar, #ivar1, #ivar2, #ivar3;
	\program ClangPointerVariable #pvar, #pvar1, #pvar2, #pvar3;

	\program ClangValueSimpleExpression #vsexp, #vsexp1, #vsexp2, #vsexp3;
	\program ClangIntegerSimpleExpression #isexp, #isexp1, #isexp2, #isexp3;
	\program ClangPointerSimpleExpression #psexp, #psexp1, #psexp2, #psexp3;

	\program ClangExpression #exp, #exp1, #exp2;
	\program ClangObjectExpression #oexp, #oexp1, #oexp2;
	\program ClangValueExpression #vexp, #vexp1, #vexp2;
	\program ClangIntegerExpression #iexp, #iexp1, #iexp2;
	\program ClangPointerExpression #pexp, #pexp1, #pexp2;
	\program ClangComplexExpression #cexp, #cexp1, #cexp2;
	\program ClangValueComplexExpression #vcexp, #vcexp1, #vcexp2;
	\program ClangObjectComplexExpression #ocexp, #ocexp1, #ocexp2;

	\program ClangStatement #stmnt, #stmnt1, #stmnt2;

	\program ClangNonEmptyCompoundStatement #NonEmptyCompoundStatement;
	\program ClangBlockFrameVarDecl #BlockFrameVarDecl;
	\program ClangUnwindingBlockFrame #UnwindingBlockFrame;
	\program ClangEmptyBlockFrame #EmptyBlockFrame;
}


\rules {
	
	/* If statement */
	
	/**
	 * Simplifying if statement control expression.
	 *
	 * Normal form: 
	 *	if (#vvar) #stmnt
	 */
	simplifyIf_ControlExpression_1 {
		\find (\modality{#allmodal}.. if (#vcexp) #stmnt ...\endmodality(formula))
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 			
				\modality{#allmodal}.. #tvar = #vcexp; if (#tvar) #stmnt ...\endmodality(formula)
				)
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};	

	/**
	 * Simplifying if statement control expression.
	 *
	 * Normal form: 
	 *	if (#vvar) #stmnt1 else #stmnt2
	 */
	simplifyIf_ControlExpression_2 {
		\find (\modality{#allmodal}.. if (#vcexp) #stmnt1 else #stmnt2 ...\endmodality(formula))
		\varcond(\new(#tvar, \typeof(#vcexp)))
		\replacewith ( 			
				\modality{#allmodal}.. #tvar = #vcexp; if (#tvar) #stmnt1 else #stmnt2 ...\endmodality(formula)
				)
		\addprogvars(#tvar)
		\heuristics(simplify_prog)
	};	

	/* While */
	
	/**
	 * Unrolling while statement.
	 */
	unrollWhile {
		\find (\modality{#allmodal}.. while (#vexp) #stmnt ...\endmodality(formula))
		\sameUpdateLevel
		\replacewith ( 			
			\modality{#allmodal}.. if (#vexp) { #stmnt while (#vexp) #stmnt} ...\endmodality(formula))
	};	

	/* Block */

	/**
	 * Entering compound statement.
	 */
	enterCompoundStatement {
		\find (\modality{#allmodal}.. #NonEmptyCompoundStatement ...\endmodality(formula))
		\replacewith ( 			
			\modality{#allmodal}.. :stmnt:#EnterBlockFrame( #NonEmptyCompoundStatement ); ...\endmodality(formula)
				)
		\heuristics(simplify_prog)
	};
	
	/**
	 * Eliminating empty compound statement.
	 */
	elimEmptyCompoundStatement {
		\find (\modality{#allmodal}.. {} ...\endmodality(formula))
		\replacewith ( 			
			\modality{#allmodal}.. ...\endmodality(formula)
				)
		\heuristics(simplify_prog)
	};
	
	/**
	 * Introducing local object variable into the block frame.
	 */
	introduceBlockFrameVarDecl {
		\find (\modality{#allmodal}.. #BlockFrameVarDecl ...\endmodality(formula))
		\replacewith ( 			
			\modality{#allmodal}.. :stmnt:#IntroduceBlockFrameVarDecl( #BlockFrameVarDecl ); ...\endmodality(formula)
				)
		\heuristics(simplify_prog)
	};
	
	/**
	 * Unwiding block frame.
	 */
	unwindBlockFrame {
		\find (\modality{#allmodal}.. #UnwindingBlockFrame ...\endmodality(formula))
		\replacewith ( 			
			\modality{#allmodal}.. :stmnt:#UnwindBlockFrame( #UnwindingBlockFrame ); ...\endmodality(formula)
				)
		\heuristics(simplify_prog)
	};

	/**
	 * Eliminating empty block frame.
	 */
	elimEmptyBlockFrame {
		\find (\modality{#allmodal}.. #EmptyBlockFrame ...\endmodality(formula))
		\replacewith ( 			
			\modality{#allmodal}.. ...\endmodality(formula)
				)
		\heuristics(simplify_prog)
	};
}