\sorts {
			
	// Object maker sort.
	// (automatically generated by the KeY)
	/*
	Object;
	*/
	
	// Common supersort of all object sorts.
	// (automatically generated by the KeY)
	/*
	Void \extends Object
	*/
	
	// Scalar object sort constructor for any sort T, is dynamic.
	// (automatically generated by the KeY)	
	/*
	T@ \extends Void
	*/
					
	// Struct sort with identifier S, is dynamic.
	// (automatically generated by the KeY)	
	/*	
	$S \extends Void
	*/
		
	// Array marker sort.
	// (automatically generated by the KeY)		
	/*
	Array \extends Object
	*/
		
	// Unsized array sort constructor for any dynamic sort T, is abstract.
	// (automatically generated by the KeY)	
	/*
	T[] \extends Array, Void
	*/
	
	// Sized array sort constructor for any dynamic sor T, is dynamic, "n"
	// is an integer. 	
	// (automatically generated by the KeY)	
	/*
	T[n] \extends T[]
	*/
}

\functions {
	// Object maker sort.
	// ---
	// Object;

	// Common supersort of all object sorts.
	// ---
	// Void \extends Object
	
	// Scalar object sort constructor for any sort T, is dynamic.
	// ---
	// T@ \extends Void

	// Scalar value accessor
	// (automatically generated by the KeY)
	/*
	\nonRigid [Location] T T@::value(T@);
	*/

	// Scalar repository function
	// (automatically generated by the KeY)
	/*
	T@ T@::<lookup>(int);
	*/
					
	// Struct sort with identifier S, is dynamic.
	// ---
	// $S \extends Void
	
	// Struct member i accessor function
	// (automatically generated by the KeY)
	/*
	T_i struct S::member_i(T_i);
	*/

	// Struct repository function
	// (automatically generated by the KeY)
	/*	
	$S $S::<lookup>(int);
	*/
		
	// Array marker sort.
	// ---
	// Array \extends Object

	// Array size function.
	// <code>size(null) = 0</code>
	// (automatically generated by the KeY)
	/*
	int size(Array);
	*/
				
	// Unsized array sort constructor for any dynamic sort T, is abstract.
	// ---
	// T[] \extends Array, Void

	// Array accessor function
	// (automatically generated by the KeY)
	/*
	T T[]::elem(T[], int);
	*/

	// Unsized array repository function
	// (automatically generated by the KeY)
	/*
	T[] T[]::<lookup>(int, int);
	*/
	
	// Sized array sort constructor for any dynamic sor T, is dynamic, "n"
	// is an integer. 	
	// ---
	// T[n] \extends T[]

	// Sized array repository function
	// (automatically generated by the KeY)
	/*
	T[n] T[n]::<lookup>(int)
	*/
}

\predicates {
	// Object maker sort.
	// ---
	// Object;

	// Whether the pointer to this object is valid
	// (automatically generated by the KeY)
	/*
	\nonRigid isValidPtr(Object);
	*/

	// Whether this object exists
	// (automatically generated by the KeY)	
	/*
	\nonRigid objExists(Object);
	*/
}
