\sorts {
   java.lang.Enum;
   java.lang.Object;
//   \generic E \extends java.lang.Enum;
   \generic E;
   \generic G;
}

\schemaVariables {
   \modalOperator { diamond, box, throughout,
                             diamond_trc, box_trc, throughout_trc,
                             diamond_tra, box_tra, throughout_tra,
                             diamond_susp, box_susp, throughout_susp } #allmodal;
   \program Type #ty ;
   \program SimpleExpression #se ;
   \program NonSimpleExpression #nse ;
   \program Expression #e ;
   \program Variable #v0 ;
   \program Variable #id ;
   \program Variable #a ;
   \program Statement #stm ;
 
   \program ImplicitClassInitialized #classInitialized ;
   \program ImplicitNextToCreate #nc ;

   \variables int I ;
   \skolemTerm G ar ;
   
   \location[list] #modifies ;
   \formula anon1,anon2 ;

   \formula post,inv ;

   \term E e ;
}

/***
 *** Enhanced for
 ***/
\rules(programRules:Java) {

  enhancedfor_array {
       \find( \modality{#allmodal}{ .. for (#ty #id : #e) #stm ... }\endmodality(post) )
       \varcond(\new(#v0, jint), \new(#a, \typeof(#e)), \isArray(#e))
       \replacewith( \modality{#allmodal}{ .. 
           {
              #typeof(#a) #a = #e;
              for(int #v0 = 0; #v0 < #length-reference(#a); #v0 ++) 
              { 
                 #ty #id = #a[#v0]; 
                 #stm 
              }
           } ... }\endmodality(post) )
       \displayname "enhancedfor_array"
       \heuristics(loop_expand)

  };

   enhancedfor_iterable {
       \find( \modality{#allmodal}{ .. for (#ty #id : #e) #stm ... }\endmodality(post) )
       \varcond(\not\isArray(#e))
       \replacewith( \modality{#allmodal}{ .. #enhancedfor-elim(for (#ty #id : #e) #stm); ... }\endmodality(post) )
       \displayname "enhancedfor_iterable"
       \heuristics(loop_expand)
  };

 /*
  * Make the iterated expression in an enhanced for loop simple.
  */
  enhancedfor_not_simple {
	\find( \modality{#allmodal}{ .. for (#ty #id: #nse) #stm ... }\endmodality(post) )
	\varcond(\new(#v0, \typeof(#nse)))
	\replacewith( \modality{#allmodal}{ .. #typeof(#nse) #v0 = #nse; for (#ty #id: #v0) #stm ... }\endmodality(post) )
  };


 /*
  * make the invariant rule for the for loop. Note the <> instead of []!
  */
 enhancedfor_invariant {
    \find( ==> \<{ .. for(#ty #id : #se) #stm ... }\>post )
    \varcond(\isArray(#se), 
             \notFreeIn(I, post),
             \new(#id, \typeof(#se)),
             \new(anon1, \dependingOnMod(#modifies)),
             \new(anon2, \dependingOnMod(#modifies)),
             \hasSort(ar, G),
             \hasSort(#se, G),
             \same(\typeof(ar), \typeof(#se)))

    "Invariant Initially Valid":
          \replacewith (ar=#se, #lengthReference(ar) = #lengthReference(#se) ==> ar=null, {\subst I; 0}inv );

    "#se = null":
          \replacewith (#se = null ==> \<{ .. throw new java.lang.NullPointerException(); ... }\>post);

    "Body Preserves Invariant":
          \replacewith(ar=#se, #lengthReference(ar) = #lengthReference(#se) 
                          ==> ar=null, #introNewAnonUpdate(#modifies, 
                              (\forall I; ((I >= 0 & I < #lengthReference(#se) & inv) -> 
                                    #foreachInvRule(\<{ .. for(#ty #id : #se) #stm ... }\>post, {\subst I; I+1}inv, I, ar))), anon1));

    "Use Case":
          \replacewith (ar=#se, #lengthReference(ar) = #lengthReference(#se)
                           ==>  ar=null, #introNewAnonUpdate(#modifies,
                                     {\subst I; (int)#lengthReference(ar)}inv ->
                                          (\<{.. ...}\>post), anon2))

    \heuristics (loop_invariant, loop_invariant_proposal)
    \displayname "enhancedfor_invariant"
  };

}


/***
 *** Enumerations
 ***/
\rules(programRules:Java) {

  enumConstantByIndex {
       \assumes(inReachableState ==>)
       \find( e )
       \sameUpdateLevel
       \varcond(\enumConstant(e))
       \replacewith( E::<get>(#enumconstantvalue(e)) )
       \heuristics(simplify)
  };

  enumOrdinalToIndex {
       \find( #fieldref(e, "ordinal") )
       \varcond(\isEnumType(E))
       \add(e = E::<get>(#fieldref(e, "ordinal")) ==> )
  };

}

\rules(programRules:Java,initialisation:disableStaticInitialisation) {

  enumNextToCreateConstant {
       \assumes( inReachableState ==> )
       \find( #nc )
       \sameUpdateLevel
       \varcond(\isEnumType(\containerType(#nc)))
       \replacewith( #enumconstantvalue( #nc ) )
       \heuristics(simplify)
  };

}

\rules(programRules:Java,initialisation:enableStaticInitialisation) {

  enumNextToCreateConstant {
       \assumes ( inReachableState, #classInitialized = TRUE ==> )
       \find( #nc )
       \sameUpdateLevel
       \varcond(\isEnumType(\containerType(#nc)), \same(\containerType(#classInitialized), \containerType(#nc)))
       \replacewith( #enumconstantvalue(#nc) )
       \heuristics(simplify)
  };

}

