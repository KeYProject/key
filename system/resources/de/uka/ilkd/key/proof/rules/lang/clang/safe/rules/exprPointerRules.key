\schemaVariables {
	\skolemTerm int dummy;

	\modalOperator {diamond, box} #allmodal;
	\formula formula;

	\program ClangVariable #tvar, #tvar1, #tvar2;

	\program ClangValueType #vtype;
	\program ClangIntegerType #itype;
	\program ClangPointerType #ptype;
	\program ClangScalarType #stype;
	\program ClangObjectType #otype;

	\program ClangMember #member;

	\program ClangIntegerLiteral #ilit;

	\program ClangVariable #var, #var1, #var2, #var3;
	\program ClangValueVariable #vvar, #vvar1, #vvar2, #vvar3;
	\program ClangObjectVariable #ovar, #ovar1, #ovar2, #ovar3;
	\program ClangIntegerVariable #ivar, #ivar1, #ivar2, #ivar3;
	\program ClangPointerVariable #pvar, #pvar1, #pvar2, #pvar3;

	\program ClangValueSimpleExpression #vsexp, #vsexp1, #vsexp2, #vsexp3;
	\program ClangIntegerSimpleExpression #isexp, #isexp1, #isexp2, #isexp3;
	\program ClangPointerSimpleExpression #psexp, #psexp1, #psexp2, #psexp3;

	\program ClangExpression #exp, #exp1, #exp2;
	\program ClangObjectExpression #oexp, #oexp1, #oexp2;
	\program ClangValueExpression #vexp, #vexp1, #vexp2;
	\program ClangIntegerExpression #iexp, #iexp1, #iexp2;
	\program ClangPointerExpression #pexp, #pexp1, #pexp2;
}

\rules {
	/* Main operations */

	/**
	 * Eliminating reference assignment with dereferencing RHS.
	 */
	elimReferenceAssignment_LHS_DereferenceRHS {
		\find (\modality{#allmodal}.. #ovar <- *#psexp; ...\endmodality(formula))
		\sameUpdateLevel
		\varcond (\new(dummy, \dependingOn(formula)))
		"Normal Execution" : \replacewith ( 			
				{ #ovar := #psexp }\modality{#allmodal}.. ...\endmodality(formula)
				)
		\add(isValidPtrSaved(#psexp, storage(objBlock(#psexp))) ==>);
		"Can Dereference: *#psexp" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidPtr(#psexp), isValidPtrSaved(#psexp, storage(objBlock(#psexp))))
		\heuristics(simplify_prog)
	};

	/**
	 * Eliminating value assignment with indirection RHS.
	 */
	elimValueAssignment_LHS_IndirectionRHS {
		\find (\modality{#allmodal}.. #pvar = &#ovar; ...\endmodality(formula))
		\sameUpdateLevel
		\varcond (\new(dummy, \dependingOn(formula)))
		"Normal Execution" : \replacewith ( 			
				{ #pvar := #ovar }\modality{#allmodal}.. ...\endmodality(formula)
				)
		\add(isValidPtrSaved(#ovar, storage(objBlock(#ovar))) ==>);
		"Can Take Address: &#ovar" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidPtr(#ovar), isValidPtrSaved(#ovar, storage(objBlock(#ovar))))
		\heuristics(simplify_prog)
	};

	/* Indexing */

	/**
	 * Eliminating value assignment with pointer indexing RHS.
	 */
	elimValueAssignment_LHS_PointerIndexAddRHS {
		\find (\modality{#allmodal}.. #pvar = #psexp + #isexp; ...\endmodality(formula))
		\sameUpdateLevel
		\varcond (\new(dummy, \dependingOn(formula)))
		"Normal Execution" : \replacewith ( 			
				{ #pvar := #ClangElemAccess(#ClangCast(objParent(#psexp), #ClangUnsizedArraySort(#psexp)), objParentIdx(#psexp) + #ClangIntegerToInt(#isexp)) }\modality{#allmodal}.. ...\endmodality(formula)
				)
		\add(isArrayElem(#psexp), isValidIdx((Array)objParent(#psexp), objParentIdx(#psexp) + #ClangIntegerToInt(#isexp)), isValidPtrSaved(#psexp, storage(objBlock(#psexp))), isValidVal(#isexp) ==>);
		"Valid Value: #psexp" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidPtr(#psexp), isValidPtrSaved(#psexp, storage(objBlock(#psexp))));
		"Valid Value: #isexp" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidVal(#isexp));
		"Can Index: #psexp + #isexp" : \replacewith(undefinedBehavior(dummy)) \add(==> isArrayElem(#psexp), isValidIdx((Array)objParent(#psexp), objParentIdx(#psexp) + #ClangIntegerToInt(#isexp)))
		\heuristics(simplify_prog)
	};

	/**
	 * Eliminating value assignment with pointer indexing RHS.
	 */
	elimValueAssignment_LHS_PointerIndexSubstractRHS {
		\find (\modality{#allmodal}.. #pvar = #psexp - #isexp; ...\endmodality(formula))
		\sameUpdateLevel
		\varcond (\new(dummy, \dependingOn(formula)))
		"Normal Execution" : \replacewith ( 			
				{ #pvar := #ClangElemAccess(#ClangCast(objParent(#psexp), #ClangUnsizedArraySort(#psexp)), objParentIdx(#psexp) - #ClangIntegerToInt(#isexp)) }\modality{#allmodal}.. ...\endmodality(formula)
				)
		\add(isArrayElem(#psexp), isValidIdx((Array)objParent(#psexp), objParentIdx(#psexp) - #ClangIntegerToInt(#isexp)), isValidPtrSaved(#psexp, storage(objBlock(#psexp))), isValidVal(#isexp) ==>);
		"Valid Value: #psexp" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidPtr(#psexp), isValidPtrSaved(#psexp, storage(objBlock(#psexp))));		
		"Valid Value: #isexp" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidVal(#isexp));
		"Can Index: #psexp - #isexp" : \replacewith(undefinedBehavior(dummy)) \add(==> isArrayElem(#psexp), isValidIdx((Array)objParent(#psexp), objParentIdx(#psexp) - #ClangIntegerToInt(#isexp)))
		\heuristics(simplify_prog)
	};
}