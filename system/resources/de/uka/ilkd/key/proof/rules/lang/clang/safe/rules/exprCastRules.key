\schemaVariables {
	\skolemTerm int dummy;

	\modalOperator {diamond, box} #allmodal;
	\formula formula;

	\program ClangVariable #tvar, #tvar1, #tvar2;

	\program ClangValueType #vtype;
	\program ClangIntegerType #itype;
	\program ClangPointerType #ptype;
	\program ClangScalarType #stype;
	\program ClangObjectType #otype;

	\program ClangMember #member;

	\program ClangVariable #var, #var1, #var2, #var3;
	\program ClangValueVariable #vvar, #vvar1, #vvar2, #vvar3;
	\program ClangObjectVariable #ovar, #ovar1, #ovar2, #ovar3;
	\program ClangIntegerVariable #ivar, #ivar1, #ivar2, #ivar3;
	\program ClangPointerVariable #pvar, #pvar1, #pvar2, #pvar3;

	\program ClangValueSimpleExpression #vsexp, #vsexp1, #vsexp2, #vsexp3;
	\program ClangIntegerSimpleExpression #isexp, #isexp1, #isexp2, #isexp3;
	\program ClangPointerSimpleExpression #psexp, #psexp1, #psexp2, #psexp3;

	\program ClangExpression #exp, #exp1, #exp2;
	\program ClangObjectExpression #oexp, #oexp1, #oexp2;
	\program ClangValueExpression #vexp, #vexp1, #vexp2;
}

\rules {

	/**
	 * Eliminating value assignment with integer to integer cast RHS.
	 */
	elimValueAssignment_LHS_IntegerToIntegerCastRHS {
		\find (\modality{#allmodal}.. #ivar = (#itype)#isexp; ...\endmodality(formula))
		\sameUpdateLevel		
		\varcond (\new(dummy, \dependingOn(formula)))
		"Normal Execution" : \replacewith ( 
			{ #ivar := convertIntegerValue(#isexp, #ivar) } \modality{#allmodal}.. ...\endmodality(formula))
			\add(isValidVal(#isexp), canConvertIntegerValue(#isexp, #ivar) ==>);
		"Valid Conversion: (#itype)#isexp" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidVal(#isexp), canConvertIntegerValue(#isexp, #ivar))
		\heuristics(simplify_prog)
	};
	
	/**
	 * Eliminating value assignment with pointer to pointer cast RHS.
	 */
	elimValueAssignment_LHS_PointerToPointerCastRHS {
		\find (\modality{#allmodal}.. #pvar = (#ptype)#psexp; ...\endmodality(formula))
		\sameUpdateLevel		
		\varcond (\new(dummy, \dependingOn(formula)))
		"Normal Execution" : \replacewith ( 
			{ #pvar := #ClangCast(#psexp, #pvar) }
			\modality{#allmodal}.. ...\endmodality(formula))
			\add(isValidPtrSaved(#psexp, storage(objBlock(#psexp))), #ClangInstance(#psexp, #pvar) = TRUE ==>);
		"Valid Cast: (#ptype)#psexp" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidPtr(#psexp), isValidPtrSaved(#psexp, storage(objBlock(#psexp))), #ClangInstance(#psexp, #pvar) = TRUE)
		\heuristics(simplify_prog)
	};

	/**
	 * Eliminating value assignment with integer to pointer cast RHS.
	 */
	elimValueAssignment_LHS_IntegerToPointerRHS {
		\find (\modality{#allmodal}.. #pvar = (#ptype)#isexp; ...\endmodality(formula))
		\sameUpdateLevel
		\varcond (\new(dummy, \dependingOn(formula)))
		"Normal Execution" : \replacewith ( 			
				{ #pvar := #ClangCast(convertIntegerToPointer(#isexp, #pvar), #pvar) }\modality{#allmodal}.. ...\endmodality(formula)
				)
				\add(isValidVal(#isexp) ==>);
		"Valid Value: #isexp" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidVal(#isexp))
		\heuristics(simplify_prog)
	};
}