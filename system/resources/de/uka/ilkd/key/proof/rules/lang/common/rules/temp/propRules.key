// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2005 Universitaet Karlsruhe Germany
//                         Universitaet Koblenz-Landau, Germany
//                         and Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
// This file contains rules that should always be present, 
// but do not depend on a sort.  In other word, mainly predicate logic.

// These schema variables are used to write the following rules.
// They will not be visible in later runs of the parser, so you are
// fairly free in choosing their names.

\schemaVariables {
  \formula b,c,d;
  \formula cutFormula;
  \formula[rigid] br, cr;
}

\rules {

  // closing goals
  close_goal       { \assumes (b ==>) \find (==> b) \closegoal 
			    \heuristics(closure) };
  close_goal_antec { \assumes (==> b) \find (b ==>) \closegoal };
  close_by_false   { \find (false ==>) \closegoal \heuristics(closure) };
  close_by_true    { \find (==> true) \closegoal \heuristics(closure) };
  

  // simplification rules
  replace_known_left  { \assumes ( b ==> ) \find ( b ) \sameUpdateLevel
                        \replacewith ( true )
			\heuristics(replace_known_left) };
  replace_known_right { \assumes ( ==> b ) \find ( b ) \sameUpdateLevel
                        \replacewith ( false )
			\heuristics(replace_known_right) };


  // junctor rules
  true_left    { \find (true ==>) \replacewith(==>) \heuristics(concrete) };
  false_right  { \find (==> false) \replacewith(==>) \heuristics(concrete) };

  not_left  { \find (! b ==>) \replacewith(==> b) \heuristics(alpha) };
  not_right { \find (==> ! b) \replacewith(b ==>) \heuristics(alpha) };

  imp_left  { \find (b -> c ==>) 
		\replacewith(==> b); 
                \replacewith(c ==>)
	      \heuristics(split,beta) };
  imp_right { \find (==> b -> c) \replacewith(b ==> c) 
		\heuristics(alpha) };

  and_left  { \find (b & c ==>) \replacewith(b, c ==>) \heuristics(alpha) };
  and_right { \find (==> b & c) \replacewith(==> b); \replacewith(==> c) 
                    \heuristics(split,beta) };
  or_left   { \find (b | c ==>) 
              "#b":\replacewith(b ==>); "#c":\replacewith(c ==>)
              \heuristics(split,beta) };
  or_right  { \find (==> b | c) \replacewith(==> b, c) \heuristics(alpha) };

//  equiv_left   { \find (b <-> c ==>) 
//		      \replacewith(b -> c, c -> b ==>)
//                    \heuristics(alpha_concrete) };

  equiv_left   { \find (b <-> c ==>) 
		      \replacewith(b, c ==>); 
                      \replacewith(==> b, c)
                    \heuristics(split,beta) };
  
//  equiv_right  { \find (==> b <-> c) 
//		      \replacewith(==> b & c, !b & !c)
//                    \heuristics(alpha_concrete) };

  equiv_right  { \find (==> b <-> c) 
		      \replacewith(b ==> c);
                      \replacewith(c ==> b)
                    \heuristics(split,beta) };
  
  split_or_strong { \find (b | c ==>) 
		      \replacewith (b ==>); 
                      \replacewith(c ==> b) };

///////////////////////////////////////////////////////////////////////////////

  rotate_and { \find (b & (c & d)) \replacewith (c & (b & d)) };
  rotate_or  { \find (b | (c | d)) \replacewith (c | (b | d)) };
  
  // equivalence replacement
  insert_eqv_once_lr { \find (br <-> cr ==>) 
			\addrules( insert_eqv{ \find (br) \replacewith (cr)} )
		       \noninteractive };
  insert_eqv_once_rl { \find (br <-> cr ==>) 
		       \addrules( insert_eqv{ \find (cr) \replacewith (br)} )
                       \noninteractive };

  insert_eqv_lr { \find (br <-> cr ==>)
		    \addrules( insert_eqv{ \find (br) \replacewith (cr) 
					  \heuristics(simplify) } ) };
  insert_eqv_rl { \find (br <-> cr ==>)
		    \addrules( insert_eqv{ \find (cr) \replacewith (br) 
					  \heuristics(simplify) } ) };

  // simplification
  double_not { \find ( ! ( ! b)) \replacewith (b) \heuristics(concrete) };

  concrete_not_1  { \find (! true) \replacewith (false) \heuristics(concrete) };
  concrete_not_2  { \find (! false) \replacewith (true) \heuristics(concrete) };

  concrete_impl_1 { \find (true -> b) \replacewith (b) \heuristics(concrete) };
  concrete_impl_2 { \find (false -> b) \replacewith (true) \heuristics(concrete) };
  concrete_impl_3 { \find (b -> false) \replacewith (! b) \heuristics(concrete) };
  concrete_impl_4 { \find (b -> true) \replacewith (true) \heuristics(concrete) };

  concrete_and_1  { \find (true & b) \replacewith (b) \heuristics(concrete) };
  concrete_and_2  { \find (false & b) \replacewith (false) \heuristics(concrete) };
  concrete_and_3  { \find (b & true) \replacewith (b) \heuristics(concrete) };
  concrete_and_4  { \find (b & false) \replacewith (false) \heuristics(concrete) };

  concrete_or_1   { \find (true | b) \replacewith (true) \heuristics(concrete) };
  concrete_or_2   { \find (false | b) \replacewith (b) \heuristics(concrete) };
  concrete_or_3   { \find (b | true) \replacewith (true) \heuristics(concrete) };
  concrete_or_4   { \find (b | false) \replacewith (b) \heuristics(concrete) };
  
  concrete_eq_1   { \find (true <-> b) \replacewith (b) \heuristics(concrete) };
  concrete_eq_2   { \find (false <-> b) \replacewith (! b) \heuristics(concrete) };
  concrete_eq_3   { \find (b <-> true) \replacewith (b) \heuristics(concrete) };
  concrete_eq_4   { \find (b <-> false) \replacewith (! b) \heuristics(concrete) };


  // other
  cut { "CUT: #cutFormula TRUE":\add (cutFormula ==>);
        "CUT: #cutFormula FALSE":\add (==> cutFormula)
        \heuristics(cut) };

  cut_direct { \find ( cutFormula ) \sameUpdateLevel
               "CUT: #cutFormula TRUE":
               \replacewith ( true ) \add (cutFormula ==>);
               "CUT: #cutFormula FALSE":
               \replacewith ( false ) \add (==> cutFormula)
               \heuristics(cut_direct) };

  cut_direct_r { \find (==> b) \replacewith (==> b); \add (b ==>) };
  cut_direct_l { \find (b ==>) \replacewith (b ==>); \add (==> b) };

  // proofobl not parsed yet.
  // rule_cut { \addrules (rule); \add (==> proofobl(rule)) };

  hide_left  { \find (b ==>) \replacewith (==>)
               \addrules( insert_hidden { \add (b ==>) } ) };
  hide_right { \find (==> b) \replacewith (==>)
               \addrules( insert_hidden { \add (==> b) } ) };

  case_distinction_r { \find (==> b)
		       \addrules( to_true  { \find (==> b) 
					      \replacewith(==>true)  
					    \heuristics(simplify)
					    \noninteractive } );
                       \addrules( to_false { \find (==> b) 
					      \replacewith(==>false) 
					    \heuristics(simplify) 
					    \noninteractive } )
                       \displayname "case_distinction"
		     };

  case_distinction_l { \find (b ==>)
		       \addrules( to_true  { \find (b ==>) 
					      \replacewith(true ==>)  
					    \heuristics(simplify)
					    \noninteractive } );
                       \addrules( to_false { \find (b ==>) 
					     \replacewith(false ==>) 
					    \heuristics(simplify) 
					    \noninteractive } )
                       \displayname "case_distinction"
		     };

}
