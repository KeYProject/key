\sorts {
 	// Arithemtic integer sorts  
 	// (Automatically generated by the KeY)
 	/*
 	T \extends Value;
 	
	CHAR \extends Value;
	UCHAR \extends Value;
	SCHAR \extends Value;
	USHRT \extends Value;
	SSHRT \extends Value;
	UINT \extends Value;
	SINT \extends Value;
	ULONG \extends Value;
	SLONG \extends Value;
	SLLONG \extends Value;
	ULLONG \extends Value;
	*/
}

\functions{

	// Conversion from int to arithmetic integer type. If there are 
	// multiple representations of the int, the "canonical" one is chosen.
	// I.e. the one used by the compiler to represent int constants.
	// 
	// Int values "i" that are not representable in the integer type 
	// should result in trap values: !isValidVal(fromInt(i))
	//
	// Assumption: program integer constants can represent all values of
	// their corresponding integer type.
	//
 	// (Automatically generated by the KeY)	
	/*
	T T::fromInt(int)
	
	CHAR CHAR::fromInt(int);
	UCHAR UCHAR::fromInt(int); 
	SCHAR SCHAR::fromInt(int); 
	USHRT USHRT::fromInt(int);
	SSHRT SSHRT::fromInt(int); 
	UINT UINT::fromInt(int); 
	SINT SINT::fromInt(int); 
	ULONG ULONG::fromInt(int); 
	SLONG SLONG::fromInt(int); 
	SLLONG ULLONG::fromInt(int); 
	ULLONG SLLONG::fromInt(int); 
	*/

	// Convertion of arithmetic integer type to an int. Does not 
	// have to be an injection.
 	// (Automatically generated by the KeY)	
	/*
	
	int T::toInt(T)	
	
	int CHAR::toInt(CHAR);
	int UCHAR::toInt(UCHAR);
	int SCHAR::toInt(SCHAR);
	int USHRT::toInt(USHRT);
	int SSHRT::toInt(SSHRT);
	int UINT::toInt(UINT);
	int SINT::toInt(SINT);
	int ULONG::toInt(ULONG);
	int SLONG::toInt(SLONG);
	int ULLONG::toInt(ULLONG);
	int SLLONG::toInt(SLLONG);
	*/

	// Arithmetic integer type bounds.
 	// (Automatically generated by the KeY)	
	/*
	int T::MIN;
	int T::MAX;
	
	int CHAR::MIN;
	int CHAR::MAX;
	int SCHAR::MIN;
	int SCHAR::MAX;
	int UCHAR::MIN;
	int UCHAR::MAX;
	int SSHRT::MIN;
	int SSHRT::MAX;
	int USHRT::MIN;
	int USHRT::MAX;
	int SINT::MIN;
	int SINT::MAX;
	int UINT::MIN;
	int UINT::MAX;
	int SLONG::MIN;
	int SLONG::MAX;
	int ULONG::MIN;
	int ULONG::MAX;
	int SLLONG::MIN;
	int SLLONG::MAX;
	int ULLONG::MIN;
	int ULLONG::MAX;
	*/

	// C specific integer division function
	int clangDiv(int, int);
	
	// C specific integer quotient function
	int clangMod(int, int);
}
