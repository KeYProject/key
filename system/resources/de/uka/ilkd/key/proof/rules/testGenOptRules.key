// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2005 Universitaet Karlsruhe Germany
//                           Universitaet Koblenz-Landau, Germany
//                         and Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
// This file contains rules that are optimized for generating proof trees
// for VBT.

\include javaRules;

\sorts{
  \generic G;
  \generic H;
  \generic J \extends G;
  any;
}

\schemaVariables {

 \modalOperator { diamond, box, throughout,
                             diamond_trc, box_trc, throughout_trc,
                             diamond_tra, box_tra, throughout_tra,
			     diamond_susp, box_susp, throughout_susp } #allmodal;
 
 \formula post, inv, post1;
 \term G  else, then ; 
 \variables G u ;
 \variables int ix ;
 \variables jint jix ;
 \term G t;  
  \term numbers iz, jz ;

 \program Type #t, #t2 ;

 \program SimpleExpression #se ;

 \program LeftHandSide #lhs, #lhs0, #lhs1, #lhs2 ;
 \program Variable #loc ;
 \program StaticVariable #sv, #sv0, #sv1 ;

 \program Variable #v, #v0, #v1, #v2, #boolv, #a, #a0, #a1 ;

 \program Statement #s, #s0, #s1 ;
 \program Expression #e, #e0, #e1, #e2 ;
 \program ImplicitCreated #c ;

 \program[list] Statement #slist, #slist1, #slist2, #slist3 ;
 \program[list] Expression #elist ;
 \program[list] SimpleExpression #selist ;

 \program NonModelMethodBody #mb;
 \program MethodName #mn;

 \program ExecutionContext #ex, #ex1 ; 

 \location[list] #modifies;
 \function[list] anon1, anon2, anon3;

 \program Literal #lit ;


 \variables G x ;
 
 
   \formula phi,b,c;
}

\rules(programRules:Java) {

/* while_result_inv { 
          \find (==> \<{.#ex..   while(#e) #s  ...}\>post) 
          \varcond(\new(#v1, boolean),\new(#modifies, \dependingOnMod(anon1)))
    "Original Loop":
          \replacewith (==> \<{..   while(#e) #s  ...}\>post) ;
    "Result":
          \replacewith (==> #introNewAnonUpdate(#modifies, post -> 
                             (\[{ method-frame(#ex):{#typeof(#e) #v1 = #e;} }\]
	                      (#v1=FALSE -> \<{..   ...}\>true)), anon1))
	  \heuristics(loop_invariant_proposal)
          \displayname "insert result of loop"}; */

  // For unit test generation. Evaluating the post condition is not relevant
  // getting a proof tree that will only serve as input for test generation.
  empty_modality_hide {
	\find (==> \<{}\>post)
	\replacewith (==>)
        \addrules( insert_hidden{\add (==> \<{}\>post) })
	\heuristics(test_gen, test_gen_empty_modality_hide)
	 };

//-------------- createdness of objects -------------//

only_created_object_are_referenced_test_1 {
         \find (==> \modality{#allmodal}{.. #v.#a=#se; ...}\endmodality(post))
         \varcond(\isNonImplicit(#a))	
         \add (#v=null | (!#v=null) & #created(#v) = TRUE ==>)
	 \heuristics(test_gen)
         \displayname "referenced object is created or null"
};

only_created_object_are_referenced_test_2 {
         \find (==> \modality{#allmodal}{.. #v0=#v.#a; ...}\endmodality(post))
         \varcond(\isNonImplicit(#a))	
         \add (#v=null | (!#v=null) & #created(#v) = TRUE ==>)
	 \heuristics(test_gen)
         \displayname "referenced object is created or null"
};

only_created_object_are_referenced_test_3 {
         \find (==> \modality{#allmodal}{.. #lhs = #v.#mn(#selist);
         ...}\endmodality((post)))
         \varcond(\isNonImplicitQuery(#mn))
         \add (#v=null | (!#v=null) & #created(#v) = TRUE ==>)
         \heuristics(test_gen)
         \displayname "referenced object is created or null"
};

only_created_object_are_referenced_test_4 {
         \find (==> \modality{#allmodal}{.. #v.#mn(#selist);
         ...}\endmodality((post)))
         \varcond(\isNonImplicitQuery(#mn))
         \add (#v=null | (!#v=null) & #created(#v) = TRUE ==>)
         \heuristics(test_gen)
         \displayname "referenced object is created or null"
};

  eliminate_variable_declaration_test { \find (\modality{#allmodal}{.. #t #v0; ...}\endmodality(post)) 
		                   \replacewith (\modality{#allmodal}{..  ...}\endmodality(post)) 
                                   \addprogvars(#v0) 
                                   \heuristics(test_gen) \noninteractive
                \displayname "eliminate_variable_declaration"
  };


  //---------------------- quantifier instantiation -----------------//

  inst_all_test { \assumes (\forall u; b ==>) 
	     \find (t.#c = TRUE ==>) 
	     \add ({\subst u; t}(b) ==>) 
	     \heuristics(test_gen,test_gen_quan)};

  inst_ex_test  { \assumes (==> \exists u; b)  
	     \find (t.#c = TRUE ==>) 
	     \add (==> {\subst u; t}(b)) 
	     \heuristics(test_gen,test_gen_quan)};

  inst_all_number_test { \assumes (\forall ix; b ==>) 
	     \find (Z(iz)) \inSequentState
	     \add ({\subst ix; Z(iz)}(b) ==>) 
	     \heuristics(test_gen_quan_num)};

  inst_ex_number_test  { \assumes (==> \exists ix; b)  
	     \find (Z(iz)) \inSequentState
	     \add (==> {\subst ix; Z(iz)}(b)) 
	     \heuristics(test_gen_quan_num)};

  inst_all_number_test_jint { \assumes (\forall jix; b ==>) 
	     \find (Z(iz)) \inSequentState
	     \add ({\subst jix; (jint) Z(iz)}(b) ==>) 
	     \heuristics(test_gen_quan_num)};

  inst_ex_number_test_jint  { \assumes (==> \exists jix; b)  
	     \find (Z(iz)) \inSequentState
	     \add (==> {\subst jix; (jint) Z(iz)}(b)) 
	     \heuristics(test_gen_quan_num)};

}
