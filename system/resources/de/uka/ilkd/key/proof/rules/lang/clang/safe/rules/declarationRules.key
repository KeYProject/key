\schemaVariables {
	\modalOperator {diamond, box} #allmodal;
	\formula formula;

	\skolemTerm int dummy;

	\program ClangVariable #tvar, #tvar1, #tvar2;

	\program ClangValueType #vtype;
	\program ClangIntegerType #itype;
	\program ClangPointerType #ptype;
	\program ClangScalarType #stype;
	\program ClangObjectType #otype;

	\program ClangVariable #var, #var1, #var2, #var3;
	\program ClangValueVariable #vvar, #vvar1, #vvar2, #vvar3;
	\program ClangIntegerVariable #ivar, #ivar1, #ivar2, #ivar3;
	\program ClangPointerVariable #pvar, #pvar1, #pvar2, #pvar3;
	\program ClangObjectVariable #ovar, #ovar1, #ovar2, #ovar3;

	\program ClangValueSimpleExpression #vsexp, #vsexp1, #vsexp2, #vsexp3;
	\program ClangIntegerSimpleExpression #isexp, #isexp1, #isexp2, #isexp3;
	\program ClangPointerSimpleExpression #psexp, #psexp1, #psexp2, #psexp3;

	\program ClangExpression #exp, #exp1, #exp2;
	\program ClangObjectExpression #oexp, #oexp1, #oexp2;
	\program ClangValueExpression #vexp, #vexp1, #vexp2;
	\program ClangComplexExpression #cexp, #cexp1, #cexp2;
	\program ClangValueComplexExpression #vcexp, #vcexp1, #vcexp2;
	\program ClangObjectComplexExpression #ocexp, #ocexp1, #ocexp2;
}

\rules {
	///////// Eliminations /////////

	/**
	 * Eliminating integer value variable declaration.	
	 */
	elimVarDecl_IntegerValue { 
		\find (\modality{#allmodal}.. #itype #ivar; ...\endmodality(formula)) 
		\varcond (\new(dummy, \dependingOn(formula)))		
		\replacewith ( 
			{ #ivar := #ClangCast(indeterminateValue(dummy), #ivar) } \modality{#allmodal}.. ...\endmodality(formula))
		\addprogvars(#ivar)
		\heuristics(simplify_prog)
	};
	
	/**
	 * Eliminating pointer value variable declaration.	
	 */
	elimVarDecl_PointerValue { 
		\find (\modality{#allmodal}.. #ptype #pvar; ...\endmodality(formula)) 
		\varcond (\new(dummy, \dependingOn(formula)))				
		\replacewith ( 
			{ #pvar := #ClangCast(indeterminateObject(dummy), #pvar) } \modality{#allmodal}.. ...\endmodality(formula))
		\addprogvars(#pvar)
		\heuristics(simplify_prog)
	};	
}