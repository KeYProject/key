/**
 * These rules are sound in absolutely any implementation of C specification, but:
 * * They are (absolutely) incomplete with bit representations/operations
 * * They are (very) inconvenient to use
 */
	 
\schemaVariables {
	\skolemTerm int dummy;

	\skolemTerm Value tempValue;

	\modalOperator {diamond, box} #allmodal;
	\formula formula;

	\program ClangVariable #tvar, #tvar1, #tvar2;

	\program ClangVariable #var, #var1, #var2, #var3;
	\program ClangValueVariable #vvar, #vvar1, #vvar2, #vvar3;
	\program ClangIntegerVariable #ivar, #ivar1, #ivar2, #ivar3;

	\program ClangIntegerSimpleExpression #isexp, #isexp1, #isexp2, #isexp3;
}

\rules {

	/* Logic */
	
	/**
	 * Eliminating value assignment with integer not RHS.
	 */
	elimValueAssignment_LHS_NotRHS {
		\find (\modality{#allmodal}.. #ivar = !#isexp; ...\endmodality(formula))
		\sameUpdateLevel
		\varcond (
			\new(dummy, \dependingOn(formula))
			\new(tempValue, \dependingOn(formula))
			)
		"Normal Execution" : \replacewith ( 			
				{ #ivar := tempValue } \modality{#allmodal}.. ...\endmodality(formula)
				)
		\add ( 
			isValidVal(#isexp),
			#ClangIntegerToInt(tempValue) = \if (#ClangIntegerToInt(#isexp) = 0) \then (1) \else (0) ==>
			);
		"Valid Value: #isexp" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidVal(#isexp))
		\heuristics(simplify_prog)
	};
	
	// TODO: implement all the rest

}