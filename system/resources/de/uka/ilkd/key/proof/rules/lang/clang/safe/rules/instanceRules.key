\sorts {
	\generic Generic, Generic1, Generic2;
}

\schemaVariables {
	\term Object schemaObj, schemaObj1, schemaObj2;
	
	\variables Generic schemaVarGeneric;	
}

\rules {
	/*
		Instance function is used only for casting pointers.
		
		TODO: rules for equality based on types.
	
		In our calculus we need only to prove 
			G::instance(schemaObj) = TRUE
		For now we just use the rules in "../../common/rules/instanceRules.key".
		
		In general, we could exploit:
		* Compatiblity:
			G::instance(schemaObj) 
			-> 
		  	\inter(G, \typeof(schemaObj)::instance(schemaObj)
		* Known dynamic type:
			\typeOf(schemaObj)::exactinstance(schemaObj) ==> G::instance(schemaObj) 
			->
			\typeOf(schemaObj)::exactinstance(schemaObj) ==> \sub(\typeof(schemaObj), G)
		* Uniqueness:
			Null::instance(schemaObj)
			->
		  	schemaObj = null
		* Known dynamic type
			\typeof(schemaAccessor)::exactinstance(schemaAccessor) = TRUE
			\typeof(schemaRepository)::exactinstance(schemaRepository) = TRUE
			Null::exactinstance(null) = TRUE
		* In case of closed world we can enumearte all subsorts
	*/
}