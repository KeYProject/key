// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2005 Universitaet Karlsruhe Germany
//                         Universitaet Koblenz-Landau, Germany
//                         and Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
// This file contains rules that are applicable for every sort (as they
// use \generic sorts).
// The format is the same as for problem files.


/* 
removed 
 remove_shadow_from_array { 
	\find ( e[t2]@(G)^(t1) ) \inSequentState \replacewith ( e[t2]@(G) ) 
        \heuristics (simplify)
 };

 remove_shadow_from_attribute { 
	\find ( e.#att^(t1) ) \inSequentState \replacewith ( e.#att ) 
        \heuristics (simplify)
 };


from normal rules


*/
\include ruleSetsDeclarations;

\sorts {
  \generic G, S1, S2, H;
  \generic GSub \extends G;
  
  \inter(G,H);

  \generic C;
  \generic CSub \extends C;
}

// These schema variables are used to write the following rules.
// They will not be visible in later runs of the parser, so you are
// fairly free in choosing their names.
\schemaVariables {
  \term G e,s,t, e0;  
  \term H t1; 
  \term S1 t2; 
  \skolemTerm G sk ;
  \formula phi,b,c;
  \variables G u, e2 ;

  \term G commEqLeft;
  \term H commEqRight;

  \variables GSub r ;
  \term G{} s0, s1 ;
  \variables G{} svar0 ;

  \program Variable #v, #att ;
  \program ImplicitCreated #c ;
  \program SimpleExpression #se, #se1, #se2 ;
  \term[rigid] G sr;
  \term[rigid] H tr;

  \term G ref1, ref2 ;
  \term S1 ind1, ind2, target ;
  \term S2 else, then ;
  \term numbers iz, jz ;

  \term int i;

}

\rules(programRules:Java) {

  // Gamma rules
  allLeft { 
  	\find (\forall u; b ==>) 
  	\add ({\subst u; t}(b) ==>) 
  	\heuristics(gamma) 
	\oldname "all_left"
  };
  exRight { \find (==> \exists u; b) \add (==> {\subst u; t}(b)) 
            \heuristics(gamma) \oldname "ex_right" };
  allLeftHide { \find (\forall u; b ==>) \replacewith ({\subst u; t}(b) ==>)
		\addrules ( insert_hidden { \add (\forall u; b ==>) } )
                \heuristics(gamma_destructive) \oldname "all_left_hide" };
  exRightHide { \find (==> \exists u; b) \replacewith (==> {\subst u; t}(b))
		\addrules ( insert_hidden { \add (==> \exists u; b) } )
                \heuristics(gamma_destructive) \oldname "ex_right_hide" };

  instAll { \assumes (\forall u; b ==>) \find (t) \add ({\subst u; t}(b) ==>) \oldname "inst_all" };
  instEx  { \assumes (==> \exists u; b) \find (t) \add (==> {\subst u; t}(b)) \oldname "inst_ex" };

  // delta rules
  allRight { \find (==> \forall u; b) \varcond ( \new(sk, \dependingOn(b)) )
		\replacewith (==> {\subst u; sk}b) \heuristics (delta) \oldname "all_right" };
  exLeft { \find (\exists u; b ==>) \varcond ( \new(sk, \dependingOn(b)) )
		\replacewith ({\subst u; sk}b ==>) \heuristics (delta) \oldname "ex_left" };
  
  // simplification
  all_unused { \find (\forall u; b) \varcond (\notFreeIn(u, b)) 
		 \replacewith (b)
		 \heuristics (simplify) };
  ex_unused  { \find (\exists u; b) \varcond (\notFreeIn(u, b))
		 \replacewith (b)
		 \heuristics (simplify) };

  // equality
  eqClose { 
     \find (s = s) \replacewith (true) \heuristics (concrete) \oldname "close_eq"
  };


  eqSymm { \find (commEqLeft = commEqRight)
           \replacewith (commEqRight = commEqLeft)
           \heuristics ( order_terms )
           \oldname "commute_eq" };

  make_insert_eq { \find (sr = tr ==>)
		   \addrules ( insert_eq { \find (sr) \replacewith (tr) } )
		   \noninteractive  };

  make_insert_eq_nonrigid { \find (s = t ==>)
	     \addrules ( insert_eq_nonrigid { \find (s) \sameUpdateLevel
                                              \replacewith (t)
                                              \displayname "insert_eq" } )
                     \noninteractive  };
  insert_eq_all  { \find (sr = tr ==>)
		     \replacewith (==>)
		     \addrules ( auto_insert_eq { \find (sr) 
						 \replacewith (tr)
						 \heuristics (simplify) } ) };

// wary substitutions
  apply_subst { \find ({\subst u; t} target)
                // it is enough to rebuild the same term, as substitutions
                // are automatically applied in this situation
                \replacewith ({\subst u; t} target)
                \heuristics (try_apply_subst) };

  apply_subst_for { \find ({\subst u; t} phi)
                    // it is enough to rebuild the same term, as substitutions
                    // are automatically applied in this situation
                    \replacewith ({\subst u; t} phi)
                    \heuristics (try_apply_subst)
                    \displayname "apply_subst" };

  subst_to_eq { \find ({\subst u; t} target) \sameUpdateLevel
                \varcond (\new(sk, \dependingOn(t)))
                \replacewith ({\subst u; sk} target)
                \add (sk = t ==>)
                \heuristics (simplify) };

  subst_to_eq_for { \find ({\subst u; t} phi) \sameUpdateLevel
                    \varcond (\new(sk, \dependingOn(t)))
                    \replacewith ({\subst u; sk} phi)
                    \add (sk = t ==>)
                    \heuristics (simplify)
                    \displayname "subst_to_eq" };

///////////////////////////////////////////////////////////////////////////////

//----------Set Rules---------------
  set_sum_step { \find (int{}::sum(int{}::including(s0, i))) 
	         \replacewith (i+int{}::sum(s0))
		 \heuristics(simplify_sets)
  };

  set_sum_base { \find (int{}::sum(int{}::emptySet)) 
	         \replacewith (0)
		 \heuristics(simplify_sets)
  };

  set_excludes { \find (G{}::excludes(s0,e))
                 \replacewith (!(G{}::includes(s0,e)))
                 \heuristics(simplify_sets)};
  set_isEmpty  { \find (G{}::isEmpty(s0)) \varcond (\notFreeIn(e2, s0))
                 \replacewith (\forall e2; ! G{}::includes(s0,e2)) };
  set_notEmpty { \find (G{}::notEmpty(s0)) \varcond (\notFreeIn(e2, s0)) 
                 \replacewith (\exists e2; G{}::includes(s0,e2))};
  set_notEmpty_to_isEmpty { \find (G{}::notEmpty(s0))
                            \replacewith (!G{}::isEmpty(s0))
                            \heuristics(simplify_sets) };

  set_emptySet { \find ( G{}::includes ( G{}::emptySet, e ) )
                 \replacewith ( false )
                 \heuristics(simplify_sets) };
  set_emptySet_size { \find ( G{}::size ( G{}::emptySet ) )
                      \replacewith ( Z(0(#)) )
                      \heuristics(simplify_sets) };
  set_zero_size { \find ( G{}::size ( s0 ) = Z(0(#)) ==> )
                  \add ( G{}::isEmpty ( s0 ) ==> )
                  \heuristics(simplify_sets) };
  set_unique_empty { \find ( G{}::isEmpty ( s0 ) ==> )
                     \add ( s0 = G{}::emptySet ==> )
                     \heuristics(simplify_sets) };
  set_unique_empty2 { \find ( ==> G{}::isEmpty ( s0 ) )
                      \add ( ==> s0 = G{}::emptySet )
                      \heuristics(simplify_sets)
                      \displayname "set_unique_empty" };
  set_size_nonEmpty { \find ( ==> G{}::isEmpty ( s0 ) )
                      \add ( gt ( G{}::size ( s0 ), Z(0(#)) ) ==> )
                      \heuristics(simplify_sets) };
  set_including_nonEmpty { \find ( G{}::includes ( s0, e ) ==> )
                           \add ( ==> G{}::isEmpty ( s0 ) )
                           \heuristics(simplify_sets) };

  set_union{ \find (G{}::includes(G{}::union(s0,s1),e))
             \replacewith (G{}::includes(s0,e) | G{}::includes(s1,e))
             \heuristics(simplify_sets) };
  set_intersection { \find (G{}::includes(G{}::intersection(s0,s1),e))
                     \replacewith (G{}::includes(s0,e) &
                                  G{}::includes(s1,e))
                     \heuristics(simplify_sets) };
  set_without { \find (G{}::includes(G{}::without(s0,s1),e))
                \replacewith (G{}::includes(s0,e) 
				& ! G{}::includes(s1,e))
                \heuristics(simplify_sets) };
  set_symmetricDifference { \find (G{}::includes(
				G{}::symmetricDifference(s0,s1), e))
                            \replacewith (G{}::includes(s0,e) 
					<-> ! G{}::includes(s1,e))
                            \heuristics(simplify_sets) };
  set_eq       { \find (s0 = s1) \varcond (\notFreeIn(e2, s0, s1))
                 \replacewith (\forall e2; (G{}::includes(s0,e2) 
				<-> G{}::includes(s1,e2))) };

  set_including_pos { \assumes (G{}::includes(s0,e0) ==>) 
		      \find (G{}::including(s0,e0)) \sameUpdateLevel
                      \replacewith (s0)
                      \heuristics(simplify_sets) }; 
  set_including_neg { \assumes (==> G{}::includes(s0,e0)) 
		      \find (G{}::size(G{}::including(s0,e0))) \sameUpdateLevel
                      \replacewith (G{}::size(s0) + 1)
                      \heuristics(simplify_sets)  }; 
  set_excluding_neg { \assumes (==> G{}::includes(s0,e0)) 
		      \find (G{}::excluding(s0,e0)) \sameUpdateLevel
                      \replacewith (s0)
                      \heuristics(simplify_sets)  }; 
  set_excluding_pos { \assumes (G{}::includes(s0,e0) ==>) 
		      \find (G{}::size(G{}::excluding(s0,e0))) \sameUpdateLevel
                      \replacewith (G{}::size(s0) - 1)
                      \heuristics(simplify_sets) }; 

  set_including { \find (G{}::includes(G{}::including(s0,e0),e)) 
                  \replacewith ((e0 = e) | G{}::includes(s0,e))
                  \heuristics(simplify_sets) }; 
  set_excluding { \find (G{}::includes(G{}::excluding(s0,e0),e))
                  \replacewith (!(e0 = e) & G{}::includes(s0,e))
                  \heuristics(simplify_sets) };

  set_finite_induction { \varcond ( \notFreeIn(e2, b) )
                         "Base Case": \add ( ==> {\subst svar0; G{}::emptySet} b );
                         "Step Case": \add ( ==> \forall svar0;  ( b ->
                                                \forall e2; {\subst svar0; G{}::including(svar0,e2)}b ) );
                         "Use Case":  \add ( \forall svar0; b ==>) };


 applyEq { 
	\assumes (s = t1 ==>) \find (s) 
	\sameUpdateLevel
	\replacewith ( t1 )
        \heuristics ( apply_equations )
	\displayname "applyEq"
	\oldname "apply_eq"
 };

 applyEqRigid { 
	\schemaVar \term[rigid] H tr1;

	\assumes (sr = tr1 ==>) \find (sr)
	\replacewith ( tr1)
        \heuristics ( apply_equations )
	\displayname "applyEq"
	\oldname "apply_eq_rigid"
 };

// --------------- rules for casts in the logic (for programs look e.g. in javaRules.key) ----------

 typeEq {
	\find( s = t1 ==>) \add ( H::instance(s) = TRUE, G::instance(t1) = TRUE ==> )	
        \displayname "typeEq"
	\oldname "type_equality_axiom"
 };

 typeEqDerived {
	\assumes( s = t1 ==>) \find ( H::instance(s) ) \sameUpdateLevel \replacewith(TRUE)
	\heuristics (simplify, concrete)
        \displayname "typeEq"	
	\oldname "type_equality_derived_1"
 };
 
 typeEqDerived2 {
	\assumes( s = t1 ==>) \find ( G::instance(t1) ) \sameUpdateLevel \replacewith(TRUE)	
	\heuristics (simplify, concrete)
        \displayname "typeEq"
	\oldname "type_equality_derived_2"
 };

 typeStatic {
	// is sameUpdateLevel neccessary? Don't think so as static type cannot be changed
	\find (s) \sameUpdateLevel \add ( G::instance(s) = TRUE ==> )
	\oldname "insert_static_type"
 };
 
 castAdd {
	\schemaVar \term[strict] C strictCTerm2;

	\assumes (CSub::instance(strictCTerm2) = TRUE ==>)
        \find (strictCTerm2) \sameUpdateLevel
        \replacewith ((CSub)strictCTerm2)
	// in confluence_restricted as if and find part must be disjoint
	// to be confluent
	\displayname "narrow type"
	\oldname "add_cast"
 };
 
 castAdd2 {
	\schemaVar \term C cs;
	\schemaVar \term G gt;

	\assumes (cs = gt ==>)
        \find (gt) \sameUpdateLevel
        \varcond (\strict\sub(C, G))
        \replacewith ((C)gt)
	\displayname "castAdd"
	\oldname "add_cast_2"
 };

 castDel {
	\schemaVar \term C tc2;
	\find ((C)tc2) \sameUpdateLevel \replacewith (tc2)
	\displayname "castDel"
	\heuristics (simplify)
	\oldname "del_cast"
 }; 

 castDel2 {
	\schemaVar \term CSub cs;
	\schemaVar \term G gt;

	\assumes (cs = gt ==>)
        \find ((C)gt) \sameUpdateLevel
        \replacewith (cs)
	\displayname "castDel"
	\oldname "del_cast_2"
 };

 typeGLB {
	\assumes (G::instance(s) = TRUE ==>)
	\find (H::instance(s) = TRUE ==>) 
        \add(\inter(G,H)::instance(s) = TRUE ==>)
	\oldname "type_intersection"
 };


 castType {
	\assumes( H::instance((C)s) = TRUE ==> ) 
	\find( CSub::instance(s) = TRUE ==> ) 
	\replacewith( H::instance(s) = TRUE ==> )
	\heuristics (simplify)
	\displayname "castType"
	\oldname "cast_type"
 };

 castType2 {
	\assumes(  ==> H::instance((C)s) = TRUE ) 
	\find( CSub::instance(s) = TRUE ==> ) 
	\replacewith( ==> H::instance(s) = TRUE)
	\heuristics (simplify)
	\displayname "castType"
	\oldname "cast_type_2"
 };

 closeType {
	\assumes (==> G::instance(t1) = TRUE) \find (GSub::instance(t1) = TRUE ==>) \closegoal
	\displayname "closeType"
	\heuristics (closure)
	\oldname "close_type"

 }; 

 closeTypeSwitched {
	\assumes (GSub::instance(t1) = TRUE ==>) \find (==> G::instance(t1) = TRUE ) \closegoal
	\displayname "closeType"
	\heuristics (closure)
	\oldname "close_type_switched"
 }; 
 

 pullOut { \find ( t ) \sameUpdateLevel \varcond ( \new(sk, \dependingOn(t)) )
	       \replacewith (sk)
	       \add ( t = sk ==>) 
	       \heuristics (query_normalize)
               \oldname "pull_out"
	  };


// for the book
 instancePredicateRewrite {
   \find (G::contains(t))
   \replacewith(G::instance(t) = TRUE)
   \heuristics (simplify) 
 };

}
