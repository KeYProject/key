/**
 * NB! The rules in this file must be extended when extended integer types 
 * are introduced.
 */
 
\sorts {
	\generic Integer, Integer1, Integer2 \oneof{CHAR, SCHAR, UCHAR, SSHRT, USHRT, SINT, UINT, SLONG, ULONG, SLLONG, ULLONG};
}

\schemaVariables {
	\term numbers number1, number2;
	
	\term int schemaInt, schemaInt1, schemaInt2;

	\term Integer schemaInteger;
	\term Integer1 schemaInteger1;
	\term Integer2 schemaInteger2;  
}

\rules {
	// Arithmetic integer type's bounds
	addBounds_CHAR {
		\add(
				(CHAR::MIN = SCHAR::MIN & CHAR::MAX = SCHAR::MAX) |
				(CHAR::MIN = UCHAR::MIN & CHAR::MAX = UCHAR::MAX) ==>
			)
	};	
	
	addBounds_SCHAR {
		\add(
				SCHAR::MIN <= -127,
				SCHAR::MAX >= 127,
				SCHAR::MIN >= SSHRT::MIN,
				SCHAR::MAX <= SSHRT::MAX
				==>
			)
	};
	
	addBounds_UCHAR {
		\add(
				UCHAR::MIN = 0,
				UCHAR::MAX >= 255,
				UCHAR::MAX >= SCHAR::MAX,
				UCHAR::MAX <= USHRT::MAX
				==>
			)
	};

	addBounds_SSHRT {
		\add(
				SSHRT::MIN <= -32767,
				SSHRT::MAX >= 32767,
				SSHRT::MIN >= SINT::MIN,
				SSHRT::MAX <= SINT::MAX
				==>
			)
	};
	
	addBounds_USHRT {
		\add(
				USHRT::MIN = 0,
				USHRT::MAX >= 65535,
				USHRT::MAX >= SSHRT::MAX,
				USHRT::MAX <= UINT::MAX
				==>
			)
	};

	addBounds_SINT {
		\add(
				SINT::MIN <= -32767,
				SINT::MAX >= 32767,
				SINT::MIN >= SLONG::MIN,
				SINT::MAX <= SLONG::MAX
				==>
			)
	};
	
	addBounds_UINT {
		\add(
				UINT::MIN = 0,
				UINT::MAX >= 65535,
				UINT::MAX >= SINT::MAX,
				UINT::MAX <= ULONG::MAX
				==>
			)
	};

	addBounds_SLONG {
		\add(
				SLONG::MIN <= -2147483647,
				SLONG::MAX >= 2147483647,
				SLONG::MIN >= SLLONG::MIN,
				SLONG::MAX <= SLLONG::MAX
				==>
			)
	};
	
	addBounds_ULONG {
		\add(
				ULONG::MIN = 0,
				ULONG::MAX >= 4294967295,
				ULONG::MAX >= SLONG::MAX,
				ULONG::MAX <= ULLONG::MAX
				==>
			)
	};

	addBounds_SLLONG {
		\add(
				SLLONG::MIN <= -9223372036854775807,
				SLLONG::MAX >= 9223372036854775807
				==>
			)
	};
	
	addBounds_ULLONG {
		\add(
				ULLONG::MIN = 0,
				ULLONG::MAX >= 18446744073709551615,
				ULLONG::MAX >= SLLONG::MAX
				==>
			)
	};

	introduceBounds_CHAR_MIN {
		\find( CHAR::MIN )
		\add(
				(CHAR::MIN = -127 & CHAR::MAX = 127) |
				(CHAR::MIN = 0 & CHAR::MAX = 255) ==>
			)
		\heuristics(simplify_arithm_bounds)
	};	

	introduceBounds_CHAR_MAX {
		\find( CHAR::MAX )
		\add(
				(CHAR::MIN = -127 & CHAR::MAX = 127) |
				(CHAR::MIN = 0 & CHAR::MAX = 255) ==>
			)
		\heuristics(simplify_arithm_bounds)
	};
	
	introduceBounds_SCHAR_MIN {
		\find( SCHAR::MIN )
		\add(
				SCHAR::MIN <= -127 ==>
			)
		\heuristics(simplify_arithm_bounds)
	};
	
	introduceBounds_SCHAR_MAX {
		\find( SCHAR::MAX )
		\add(
				SCHAR::MAX >= 127 ==>
			)
		\heuristics(simplify_arithm_bounds)
	};
	
	introduceBounds_UCHAR_MIN {
		\find( UCHAR::MIN )
		\add(
				UCHAR::MIN = 0
				==>
			)
		\heuristics(simplify_arithm_bounds)
	};
	
	introduceBounds_UCHAR_MAX {
		\find( UCHAR::MAX )
		\add(
				UCHAR::MAX >= 255
				==>
			)
		\heuristics(simplify_arithm_bounds)
	};

	introduceBounds_SSHRT_MIN {
		\find( SSHRT::MIN )
		\add(
				SSHRT::MIN <= -32767
				==>
			)
		\heuristics(simplify_arithm_bounds)
	};
	
	introduceBounds_SSHRT_MAX {
		\find( SSHRT::MAX )
		\add(
				SSHRT::MAX >= 32767
				==>
			)
		\heuristics(simplify_arithm_bounds)
	};
	
	introduceBounds_USHRT_MIN {
		\find( USHRT::MIN )
		\add(
				USHRT::MIN = 0
				==>
			)
		\heuristics(simplify_arithm_bounds)
	};
	
	introduceBounds_USHRT_MAX {
		\find( USHRT::MAX )
		\add(
				USHRT::MAX >= 65535
				==>
			)
		\heuristics(simplify_arithm_bounds)
	};

	introduceBounds_SINT_MIN {
		\find( SINT::MIN )
		\add(
				SINT::MIN <= -32767
				==>
			)
		\heuristics(simplify_arithm_bounds)
	};

	introduceBounds_SINT_MAX {
		\find( SINT::MAX )
		\add(
				SINT::MAX >= 32767
				==>
			)
		\heuristics(simplify_arithm_bounds)
	};
	
	introduceBounds_UINT_MIN {
		\find( UINT::MIN )
		\add(
				UINT::MIN = 0
				==>
			)
		\heuristics(simplify_arithm_bounds)
	};
	
	introduceBounds_UINT_MAX {
		\find( UINT::MAX )
		\add(
				UINT::MAX >= 65535
				==>
			)
		\heuristics(simplify_arithm_bounds)
	};

	introduceBounds_SLONG_MIN {
		\find( SLONG::MIN ) 
		\add(
				SLONG::MIN <= -2147483647
				==>
			)
		\heuristics(simplify_arithm_bounds)
	};

	introduceBounds_SLONG_MAX {
		\find( SLONG::MAX ) 
		\add(
				SLONG::MAX >= 2147483647
				==>
			)
		\heuristics(simplify_arithm_bounds)
	};
	
	introduceBounds_ULONG_MIN {
		\find( ULONG::MIN )
		\add(
				ULONG::MIN = 0
				==>
			)
		\heuristics(simplify_arithm_bounds)
	};
	
	introduceBounds_ULONG_MAX {
		\find( ULONG::MAX )
		\add(
				ULONG::MAX >= 65535
				==>
			)
		\heuristics(simplify_arithm_bounds)
	};


	simplifyInIntegerRange {
		\find (inIntegerRange(schemaInt, schemaInteger))
		\replacewith (#ClangIntegerMin(schemaInteger) <= schemaInt & schemaInt <= #ClangIntegerMax(schemaInteger))
		\heuristics(simplify_arithm)
	};
	
	/* Dividie and quotient */
		
	computeQuotient_Literals  {
		\find (clangDiv(Z(number1), Z(number2)))   
		\replacewith (#ClangDiv(Z(number1), Z(number2)))   
		\heuristics (simplify_literals)   
	};   		
	
	computeModulo_Literals  {
		\find (clangMod(Z(number1), Z(number2)))   
		\replacewith (#ClangMod(Z(number1), Z(number2)))   
		\heuristics (simplify_literals)   
	};   			
}
