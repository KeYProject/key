\schemaVariables {
	\skolemTerm int dummy;

	\modalOperator {diamond, box} #allmodal;
	\formula formula;

	\program ClangVariable #tvar, #tvar1, #tvar2;

	\program ClangValueType #vtype;
	\program ClangIntegerType #itype;
	\program ClangPointerType #ptype;
	\program ClangScalarType #stype;
	\program ClangObjectType #otype;

	\program ClangMember #member;

	\program ClangIntegerLiteral #ilit;

	\program ClangVariable #var, #var1, #var2, #var3;
	\program ClangValueVariable #vvar, #vvar1, #vvar2, #vvar3;
	\program ClangObjectVariable #ovar, #ovar1, #ovar2, #ovar3;
	\program ClangIntegerVariable #ivar, #ivar1, #ivar2, #ivar3;
	\program ClangPointerVariable #pvar, #pvar1, #pvar2, #pvar3;

	\program ClangValueSimpleExpression #vsexp, #vsexp1, #vsexp2, #vsexp3;
	\program ClangIntegerSimpleExpression #isexp, #isexp1, #isexp2, #isexp3;
	\program ClangPointerSimpleExpression #psexp, #psexp1, #psexp2, #psexp3;

	\program ClangExpression #exp, #exp1, #exp2;
	\program ClangObjectExpression #oexp, #oexp1, #oexp2;
	\program ClangValueExpression #vexp, #vexp1, #vexp2;
	\program ClangIntegerExpression #iexp, #iexp1, #iexp2;
	\program ClangPointerExpression #pexp, #pexp1, #pexp2;
}

\rules {

	/* Cast */
	/**
	 * Eliminating value assignment with pointer to integer cast RHS.
	 */
	elimValueAssignment_LHS_PointerToIntegerRHS {
		\find (\modality{#allmodal}.. #ivar = (#itype)#psexp; ...\endmodality(formula))
		\sameUpdateLevel
		\varcond (\new(dummy, \dependingOn(formula)))
		"Normal Execution" : \replacewith ( 			
				{ #ivar := #ClangCast(convertPointerToInteger(#psexp, #itype), #ivar) }\modality{#allmodal}.. ...\endmodality(formula)
				)
				\add(isValidPtrSaved(#psexp, storage(objBlock(#psexp))), canConvertPointerToInteger(#psexp, #ivar)  ==>);
		"Valid Conversion: (#itype)#psexp" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidPtr(#psexp), isValidPtrSaved(#psexp, storage(objBlock(#psexp))), canConvertPointerToInteger(#psexp, #ivar))
		\heuristics(simplify_prog)
	};	

	/* Equality */

	/**
	 * Eliminating value assignment with pointer equals RHS.
	 */
	elimValueAssignment_LHS_PointerEqualsRHS {
		\find (\modality{#allmodal}.. #ivar = #psexp1 == #psexp2; ...\endmodality(formula))
		\sameUpdateLevel
		\varcond (\new(dummy, \dependingOn(formula)))
		"Normal Execution" : \replacewith ( 			
				{ #ivar := #ClangIntegerFromInt(\if (objPtrEq(#psexp1, #psexp2)) \then (1) \else (0), #ivar)  }\modality{#allmodal}.. ...\endmodality(formula)
				)
		\add(isValidPtrSaved(#psexp1, storage(objBlock(#psexp1))), isValidPtrSaved(#psexp2, storage(objBlock(#psexp2))) ==>);
		"Valid Value: #psexp1" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidPtr(#psexp1), isValidPtrSaved(#psexp1, storage(objBlock(#psexp1))));
		"Valid Value: #psexp2" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidPtr(#psexp2), isValidPtrSaved(#psexp2, storage(objBlock(#psexp2))))
		\heuristics(simplify_prog)
	};

	/**
	 * Eliminating value assignment with pointer not equals RHS.
	 */
	elimValueAssignment_LHS_PointerNotEqualsRHS {
		\find (\modality{#allmodal}.. #ivar = #psexp1 != #psexp2; ...\endmodality(formula))
		\sameUpdateLevel
		\varcond (\new(dummy, \dependingOn(formula)))
		"Normal Execution" : \replacewith ( 			
				{ #ivar := #ClangIntegerFromInt(\if (!objPtrEq(#psexp1, #psexp2)) \then (1) \else (0), #ivar)  }\modality{#allmodal}.. ...\endmodality(formula)
				)
		\add(isValidPtrSaved(#psexp1, storage(objBlock(#psexp1))), isValidPtrSaved(#psexp2, storage(objBlock(#psexp2))) ==>);
		"Valid Value: #psexp1" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidPtr(#psexp1), isValidPtrSaved(#psexp1, storage(objBlock(#psexp1))));
		"Valid Value: #psexp2" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidPtr(#psexp2), isValidPtrSaved(#psexp2, storage(objBlock(#psexp2))))
		\heuristics(simplify_prog)
	};

	/* Relational */

	/**
	 * Eliminating value assignment with pointer less RHS.
	 */
	elimValueAssignment_LHS_PointerLessRHS {
		\find (\modality{#allmodal}.. #ivar = #psexp1 < #psexp2; ...\endmodality(formula))
		\sameUpdateLevel
		\varcond (\new(dummy, \dependingOn(formula)))
		"Normal Execution" : \replacewith ( 			
				{ #ivar := #ClangIntegerFromInt(\if (objPtrLess(#psexp1, #psexp2)) \then (1) \else (0), #ivar)  }\modality{#allmodal}.. ...\endmodality(formula)
				)
		\add(isValidPtrSaved(#psexp1, storage(objBlock(#psexp1))), isValidPtrSaved(#psexp2, storage(objBlock(#psexp2))) ==>);
		"Valid Value: #psexp1" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidPtr(#psexp1), isValidPtrSaved(#psexp1, storage(objBlock(#psexp1))));
		"Valid Value: #psexp2" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidPtr(#psexp2), isValidPtrSaved(#psexp2, storage(objBlock(#psexp2))))
		\heuristics(simplify_prog)
	};

	/**
	 * Eliminating value assignment with pointer less or equal RHS.
	 */
	elimValueAssignment_LHS_PointerLessEqRHS {
		\find (\modality{#allmodal}.. #ivar = #psexp1 <= #psexp2; ...\endmodality(formula))
		\sameUpdateLevel
		\varcond (\new(dummy, \dependingOn(formula)))
		"Normal Execution" : \replacewith ( 			
				{ #ivar := #ClangIntegerFromInt(\if (objPtrLess(#psexp1, #psexp2) | objPtrEq(#psexp1, #psexp2)) \then (1) \else (0), #ivar)  }\modality{#allmodal}.. ...\endmodality(formula)
				)
		\add(isValidPtrSaved(#psexp1, storage(objBlock(#psexp1))), isValidPtrSaved(#psexp2, storage(objBlock(#psexp2))) ==>);
		"Valid Value: #psexp1" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidPtr(#psexp1), isValidPtrSaved(#psexp1, storage(objBlock(#psexp1))));
		"Valid Value: #psexp2" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidPtr(#psexp2), isValidPtrSaved(#psexp2, storage(objBlock(#psexp2))))
		\heuristics(simplify_prog)
	};


	/**
	 * Eliminating value assignment with pointer greater RHS.
	 */
	elimValueAssignment_LHS_PointerGreaterRHS {
		\find (\modality{#allmodal}.. #ivar = #psexp1 > #psexp2; ...\endmodality(formula))
		\sameUpdateLevel
		\varcond (\new(dummy, \dependingOn(formula)))
		"Normal Execution" : \replacewith ( 			
				{ #ivar := #ClangIntegerFromInt(\if (objPtrLess(#psexp2, #psexp1)) \then (1) \else (0), #ivar)  }\modality{#allmodal}.. ...\endmodality(formula)
				)
		\add(isValidPtrSaved(#psexp1, storage(objBlock(#psexp1))), isValidPtrSaved(#psexp2, storage(objBlock(#psexp2))) ==>);
		"Valid Value: #psexp1" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidPtr(#psexp1), isValidPtrSaved(#psexp1, storage(objBlock(#psexp1))));
		"Valid Value: #psexp2" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidPtr(#psexp2), isValidPtrSaved(#psexp2, storage(objBlock(#psexp2))))
		\heuristics(simplify_prog)
	};	


	/**
	 * Eliminating value assignment with pointer greater or equal RHS.
	 */
	elimValueAssignment_LHS_PointerGreaterEqRHS {
		\find (\modality{#allmodal}.. #ivar = #psexp1 >= #psexp2; ...\endmodality(formula))
		\sameUpdateLevel
		\varcond (\new(dummy, \dependingOn(formula)))
		"Normal Execution" : \replacewith ( 			
				{ #ivar := #ClangIntegerFromInt(\if (objPtrLess(#psexp2, #psexp1) | objPtrEq(#psexp1, #psexp2)) \then (1) \else (0), #ivar)  }\modality{#allmodal}.. ...\endmodality(formula)
				)
		\add(isValidPtrSaved(#psexp1, storage(objBlock(#psexp1))), isValidPtrSaved(#psexp2, storage(objBlock(#psexp2))) ==>);
		"Valid Value: #psexp1" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidPtr(#psexp1), isValidPtrSaved(#psexp1, storage(objBlock(#psexp1))));
		"Valid Value: #psexp2" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidPtr(#psexp2), isValidPtrSaved(#psexp2, storage(objBlock(#psexp2))))
		\heuristics(simplify_prog)
	};

	/* Arithmetic */

	/**
	 * Eliminating value assignment with pointer diff RHS.
	 */
	elimValueAssignment_LHS_PointerDiffRHS {
		\find (\modality{#allmodal}.. #ivar = #psexp1 - #psexp2; ...\endmodality(formula))
		\sameUpdateLevel
		\varcond (\new(dummy, \dependingOn(formula)))
		"Normal Execution" : \replacewith ( 			
				{ #ivar := #ClangIntegerFromInt(objPtrDiff(#psexp1, #psexp2), #ivar) }\modality{#allmodal}.. ...\endmodality(formula)
				)
		\add(isValidPtrSaved(#psexp1, storage(objBlock(#psexp1))), isValidPtrSaved(#psexp2, storage(objBlock(#psexp2))), objPtrCanDiff(#psexp1, #psexp2) ==>);
		"Valid Value: #psexp1" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidPtr(#psexp1), isValidPtrSaved(#psexp1, storage(objBlock(#psexp1))));
		"Valid Value: #psexp2" : \replacewith(undefinedBehavior(dummy)) \add(==> isValidPtr(#psexp2), isValidPtrSaved(#psexp2, storage(objBlock(#psexp2))));
		"Can Diff: #psexp1 - #psexp2" : \replacewith(undefinedBehavior(dummy)) \add(==> objPtrCanDiff(#psexp1, #psexp2))
		\heuristics(simplify_prog)
	};

}