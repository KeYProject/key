\contracts {
  //
  // length
  //
  length {
      \programVariables {
          int result;
          java.lang.String string;
      }
      true ->
      \<{
          result = string.length()@java.lang.String;
      }\>(result = length(content(string)))
      \modifies { }
      \displayname "length"
  };

  //
  // charAt
  //
  charAtNormal {
      \programVariables {
          char result;
          java.lang.String string;
          int charIdx;
      }
      (charIdx >= 0 & charIdx < length(content(string))) ->
      \<{
          #catchAll(java.lang.Throwable exc) {
              result = string.charAt(charIdx)@java.lang.String;
      }}\>(exc = null & result = charAt(charIdx,content(string)))
      \modifies { }
      \displayname "CharAt Normal"
  };
  
  charAtExc {
      \programVariables {
          char result;
          java.lang.String string;
          int charIdx;
      }
      (charIdx < 0 | charIdx >= length(content(string))) ->
      \<{
          #catchAll(java.lang.Throwable exc) {
              result = string.charAt(charIdx)@java.lang.String;
      }}\>(  exc != null
           & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
      \modifies {java.lang.IndexOutOfBoundsException.<nextToCreate>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<created>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<transient>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<initialized> }
      \displayname "CharAt Exceptional: IndexOutOfBounds"
  };

  //
  // concat
  //
  concatNormal {
      \programVariables {
          java.lang.String result, calleeStringObj, argumentStringObj;
      }
      (argumentStringObj != null & length(content(argumentStringObj)) > 0) ->
      \<{
          result = calleeStringObj.concat(argumentStringObj)@java.lang.String;
      }\>(  java.lang.Object::<created>@pre(result) = FALSE
          & result.<created>@(java.lang.Object) = TRUE
          & result != null
          & content(result) = concat(content(calleeStringObj),content(argumentStringObj)) )
      \modifies { content(result),
                  result.<nextToCreate>@(java.lang.String),
                  result.<created>@(java.lang.Object),
                  result.<initialized>@(java.lang.Object),
                  result.<transient>@(java.lang.Object) }
      \displayname "Concat Normal"
  };
    
  concatNormalLen0 {
      \programVariables {
          java.lang.String result, calleeStringObj, argumentStringObj;
      }
      (argumentStringObj != null & length(content(argumentStringObj)) = 0) ->
      \<{
          result = calleeStringObj.concat(argumentStringObj)@java.lang.String;
      }\>(result = calleeStringObj)
      \modifies { }
      \displayname "Concat Normal"
  };
  
  concatExc {
      \programVariables {
          java.lang.String result, calleeStringObj, argumentStringObj;
      }
      (argumentStringObj = null) ->
      \<{
          #catchAll(java.lang.Throwable exc) {
              result = calleeStringObj.concat(argumentStringObj)@java.lang.String;
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies {java.lang.NullPointerException.<nextToCreate>,
                 \for java.lang.NullPointerException exc; exc.<created>,
                 \for java.lang.NullPointerException exc; exc.<transient>,
                 \for java.lang.NullPointerException exc; exc.<initialized> }
      \displayname "Concat Exceptional: Null Pointer"
  };

  //
  // substring
  //
  substringNormal {
      \programVariables {
          java.lang.String result, string;
          int startIdx, endIdx;
      }
      (endIdx>=startIdx & startIdx >= 0 & endIdx <= length(content(string))) ->
      \<{
          result = string.substring(startIdx, endIdx)@java.lang.String;
      }\>(  java.lang.Object::<created>@pre(result) = FALSE
          & result.<created>@(java.lang.Object) = TRUE
          & result != null
          & content(result) = substring(startIdx, endIdx, content(string)))
      \modifies { content(result),
                  result.<nextToCreate>@(java.lang.String),
                  result.<created>@(java.lang.Object),
                  result.<initialized>@(java.lang.Object),
                  result.<transient>@(java.lang.Object) }
      \displayname "Substring Normal"
  };

  substringExc {
      \programVariables {
          java.lang.String result, string;
          int startIdx, endIdx;
      }
      (startIdx>endIdx | startIdx<0 | endIdx > length(content(string))) ->
      \<{
          #catchAll(java.lang.Throwable exc) {
              result = string.substring(startIdx, endIdx)@java.lang.String;
      }}\>(  exc != null
           & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
      \modifies {java.lang.IndexOutOfBoundsException.<nextToCreate>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<created>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<transient>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<initialized> }
      \displayname "Substring Exceptional: IndexOutOfBounds"
  };

  substring2Normal {
      \programVariables {
          java.lang.String result, string;
          int startIdx;
      }
      (startIdx >= 0 & startIdx < length(content(string))) ->
      \<{
          result = string.substring(startIdx)@java.lang.String;
      }\>(  java.lang.Object::<created>@pre(result) = FALSE
          & result.<created>@(java.lang.Object) = TRUE
          & result != null
          & content(result) = substring(startIdx,length(content(string)),content(string)))
      \modifies { content(result),
                  result.<nextToCreate>@(java.lang.String),
                  result.<created>@(java.lang.Object),
                  result.<initialized>@(java.lang.Object),
                  result.<transient>@(java.lang.Object) }
      \displayname "Substring Normal"
  };

  substring2Exc {
      \programVariables {
          java.lang.String result, string;
          int startIdx;
      }
      (startIdx < 0 | startIdx > length(content(string))) ->
      \<{
          #catchAll(java.lang.Throwable exc) {
          result = string.substring(startIdx)@java.lang.String;
      }}\>(  exc != null
           & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
      \modifies {java.lang.IndexOutOfBoundsException.<nextToCreate>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<created>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<transient>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<initialized> }
      \displayname "Substring Exceptional: IndexOutOfBounds"
  };

  //
  // compareTo
  //
  compareToNormal {
      \programVariables {
          java.lang.String stringCallee, stringArgument;
          int result;
      }
      (stringArgument != null) ->
      \<{
          result = stringCallee.compareTo(stringArgument)@java.lang.String;
      }\>( result = \ifEx int i; (  i < length(content(stringCallee))
                                  & i < length(content(stringArgument))
                                  & charAt(i,content(stringCallee))
                                     != charAt(i,content(stringArgument)) )
                        \then (charAt(i,content(stringCallee)) - charAt(i,content(stringArgument)))
                        \else (length(content(stringCallee)) - length(content(stringArgument))) )
      \modifies { }
      \displayname "compareTo Normal"
  };

  compareToExc {
      \programVariables {
          java.lang.String stringCallee, stringArgument;
          int result;
      }
      (stringArgument = null) ->
      \<{
          #catchAll(java.lang.Throwable exc) {
              result = stringCallee.compareTo(stringArgument)@java.lang.String;
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies {java.lang.NullPointerException.<nextToCreate>,
                 \for java.lang.NullPointerException exc; exc.<created>,
                 \for java.lang.NullPointerException exc; exc.<transient>,
                 \for java.lang.NullPointerException exc; exc.<initialized> }
      \displayname "compareTo Exceptional: Null Pointer"
  };

  //
  // endsWith
  //
  endsWithNormal {
      \programVariables {
          java.lang.String stringCallee, stringArgument;
          boolean result;
      }
      (stringArgument != null) ->
      \<{
          result = stringCallee.endsWith(stringArgument)@java.lang.String;
      }\>(result = TRUE <-> endsWith(content(stringArgument),content(stringCallee)))
      \modifies { }
      \displayname "endsWith Normal"
  };

  endsWithExc {
      \programVariables {
          java.lang.String stringCallee, stringArgument;
          boolean result;
      }
      (stringArgument = null) ->
      \<{
          #catchAll(java.lang.Throwable exc) {
              result = stringCallee.endsWith(stringArgument)@java.lang.String;
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies {java.lang.NullPointerException.<nextToCreate>,
                 \for java.lang.NullPointerException exc; exc.<created>,
                 \for java.lang.NullPointerException exc; exc.<transient>,
                 \for java.lang.NullPointerException exc; exc.<initialized> }
      \displayname "endsWith Exceptional: Null Pointer"
  };

  //
  // startsWith
  //
  startsWith1Normal {
      \programVariables {
          java.lang.String stringCallee, stringArgument;
          boolean result;
      }
      (stringArgument != null) ->
      \<{
          result = stringCallee.startsWith(stringArgument)@java.lang.String;
      }\>(result = TRUE <-> startsWith(content(stringArgument),content(stringCallee)))
      \modifies { }
      \displayname "startsWith Normal"
  };

  startsWith1Exc {
      \programVariables {
          java.lang.String stringCallee, stringArgument;
          boolean result;
      }
      (stringArgument = null) ->
      \<{
          #catchAll(java.lang.Throwable exc) {
              result = stringCallee.startsWith(stringArgument)@java.lang.String;
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies {java.lang.NullPointerException.<nextToCreate>,
                 \for java.lang.NullPointerException exc; exc.<created>,
                 \for java.lang.NullPointerException exc; exc.<transient>,
                 \for java.lang.NullPointerException exc; exc.<initialized> }
      \displayname "startsWith Exceptional: Null Pointer"
  };

  startsWith2Normal {
      \programVariables {
          java.lang.String stringCallee, stringArgument;
          boolean result;
          int startIdx;
      }
      (stringArgument != null) ->
      \<{
          result = stringCallee.startsWith(stringArgument, startIdx)@java.lang.String;
      }\>(result = TRUE <-> (  (startIdx >= 0)
                             & (startIdx <= length(content(stringCallee)))
                             & startsWith(content(stringArgument),
                                          substring(startIdx,
                                                    length(content(stringCallee)),
                                                    content(stringCallee))) ))
      \modifies { }
      \displayname "startsWith Normal"
  };

  startsWith2Exc {
      \programVariables {
          java.lang.String stringCallee, stringArgument;
          boolean result;
          int startIdx;
      }
      (stringArgument = null) ->
      \<{
          #catchAll(java.lang.Throwable exc) {
              result = stringCallee.startsWith(stringArgument, startIdx)@java.lang.String;
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies {java.lang.NullPointerException.<nextToCreate>,
                 \for java.lang.NullPointerException exc; exc.<created>,
                 \for java.lang.NullPointerException exc; exc.<transient>,
                 \for java.lang.NullPointerException exc; exc.<initialized> }
      \displayname "startsWith Exceptional: Null Pointer"
  };

  //
  // replace
  //
  replaceNormal {
      \programVariables {
          java.lang.String s, result;
          char c1, c2;
      }
      true ->
      \<{
          result = s.replace(c1,c2)@java.lang.String;
      }\>(\if (\exists int i; (  i >= 0 
                               & i < length(content(s))
                               & charAt(i,content(s)) = c1))
          \then(  java.lang.Object::<created>@pre(result) = FALSE
                & result.<created>@(java.lang.Object) = TRUE
                & result != null
                & content(result) = replace(c1,c2,content(s)) )
          \else ( result = s & content(result) = content@pre(result) ) )
      \modifies { content(result),
                  result.<nextToCreate>@(java.lang.String),
                  result.<created>@(java.lang.Object),
                  result.<initialized>@(java.lang.Object),
                  result.<transient>@(java.lang.Object) }
      \displayname "replace Normal"
  };

  //
  // indexOf
  //
  indexOfNormal {
      \programVariables {
          java.lang.String s;
          int charVal;
          int result;
      }
      true ->
      \<{ 
          result = s.indexOf(charVal)@java.lang.String;
      }\>(result = indexOf((jchar)charVal,0,content(s)))
      \modifies { }
      \displayname "indexOf Normal"
  };

  indexOfFromNormal {
      \programVariables {
          java.lang.String s;
          int charVal, from;
          int result;
      }
      true ->
      \<{
          result = s.indexOf(charVal,from)@java.lang.String;
      }\>(result = indexOf((jchar)charVal,from,content(s)))
      \modifies { }
      \displayname "indexOf Normal"
  };

  indexOfStringNormal {
      \programVariables {
          java.lang.String s, t;
          int result;
      }
      (t != null) ->
      \<{
          result = s.indexOf(t)@java.lang.String;
      }\>(result = indexOfStr(content(t),0,content(s)))
      \modifies { }
      \displayname "indexOf Normal"
  };

  indexOfStringExc {
      \programVariables {
          java.lang.String s, t;
          int result;
      }
      (t = null) ->
      \<{
          #catchAll (java.lang.Throwable exc) {
              result = s.indexOf(t)@java.lang.String;
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies {java.lang.NullPointerException.<nextToCreate>,
                 \for java.lang.NullPointerException exc; exc.<created>,
                 \for java.lang.NullPointerException exc; exc.<transient>,
                 \for java.lang.NullPointerException exc; exc.<initialized> }
      \displayname "indexOf Exceptional"
  };

  indexOfStringFromNormal {
      \programVariables {
          java.lang.String s, t;
          int result, from;
      }
      (t != null) ->
      \<{
          result = s.indexOf(t, from)@java.lang.String;
      }\>(result = indexOfStr(content(t),from,content(s)))
      \modifies { }
      \displayname "indexOf Normal"
  };

  indexOfStringFromExc {
      \programVariables {
          java.lang.String s, t;
          int result, from;
      }
      (t = null) ->
      \<{
          #catchAll (java.lang.Throwable exc) {
              result = s.indexOf(t,from)@java.lang.String;
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies {java.lang.NullPointerException.<nextToCreate>,
                 \for java.lang.NullPointerException exc; exc.<created>,
                 \for java.lang.NullPointerException exc; exc.<transient>,
                 \for java.lang.NullPointerException exc; exc.<initialized> }
      \displayname "indexOf Exceptional"
  };

  //
  // lastIndexOf
  //
  lastIndexOfNormal {
      \programVariables {
          java.lang.String s;
          int charVal;
          int result;
      }
      true ->
      \<{ 
          result = s.lastIndexOf(charVal)@java.lang.String;
      }\>(result = lastIndexOf((jchar)charVal,
                               length(content(s))-1,content(s)))
      \modifies { }
      \displayname "lastIndexOf Normal"
  };

  lastIndexOfFromNormal {
      \programVariables {
          java.lang.String s;
          int charVal, from;
          int result;
      }
      true ->
      \<{ 
          result = s.lastIndexOf(charVal,from)@java.lang.String;
      }\>(result = lastIndexOf((jchar)charVal,from,content(s)))
      \modifies { }
      \displayname "lastIndexOf Normal"
  };

  lastIndexOfStringNormal {
      \programVariables {
          java.lang.String s, t;
          int result;
      }
      (t != null) ->
      \<{
          result = s.lastIndexOf(t)@java.lang.String;
      }\>(result = lastIndexOfStr(content(t),
                                  length(content(s))-1,content(s)))
      \modifies { }
      \displayname "lastIndexOf Normal"
  };

  lastIndexOfStringExc {
      \programVariables {
          java.lang.String s, t;
          int result;
      }
      (t = null) ->
      \<{
          #catchAll (java.lang.Throwable exc) {
              result = s.lastIndexOf(t)@java.lang.String;
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies {java.lang.NullPointerException.<nextToCreate>,
                 \for java.lang.NullPointerException exc; exc.<created>,
                 \for java.lang.NullPointerException exc; exc.<transient>,
                 \for java.lang.NullPointerException exc; exc.<initialized> }
      \displayname "lastIndexOf Exceptional"
  };

  lastIndexOfStringFromNormal {
      \programVariables {
          java.lang.String s, t;
          int result, from;
      }
      (t != null) ->
      \<{
          result = s.lastIndexOf(t, from)@java.lang.String;
      }\>(result = lastIndexOfStr(content(t),from,content(s)))
      \modifies { }
      \displayname "lastIndexOf Normal"
  };

  lastIndexOfStringFromExc {
      \programVariables {
          java.lang.String s, t;
          int result, from;
      }
      (t = null) ->
      \<{
          #catchAll (java.lang.Throwable exc) {
              result = s.lastIndexOf(t,from)@java.lang.String;
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies {java.lang.NullPointerException.<nextToCreate>,
                 \for java.lang.NullPointerException exc; exc.<created>,
                 \for java.lang.NullPointerException exc; exc.<transient>,
                 \for java.lang.NullPointerException exc; exc.<initialized> }
      \displayname "lastIndexOf Exceptional"
  };

  //
  // toString
  //
  toStringNormal {
      \programVariables {
          java.lang.String s, result;
      }
      true ->
      \<{
          result = s.toString()@java.lang.String;
      }\>(result = s)
      \modifies { }
      \displayname "toString Normal"
  };

  //
  // equals
  //
  equalsNormal {
      \programVariables {
          java.lang.String s;
          java.lang.Object obj;
          boolean result;
      }
      true ->
      \<{
          result = s.equals(obj)@java.lang.String;
      }\>( result = TRUE <-> (  obj != null
          & java.lang.String::instance(obj)= TRUE
          & content(s) = content((java.lang.String)obj) ))
      \modifies { }
      \displayname "equals"
  };

  //
  // isEmpty
  //
  isEmptyNormal {
      \programVariables {
          java.lang.String s;
          boolean result;
      }
      true ->
      \<{
          result = s.isEmpty()@java.lang.String;
      }\>( result = TRUE <-> content(s) = empty )
      \modifies { }
      \displayname "isEmpty"
  };

  //
  // copyValueOf
  //
  copyValueOfNormal {
      \programVariables {
          java.lang.String result;
          char[] data;
      }
      (data != null) ->
      \<{
      result = java.lang.String.copyValueOf(data)
                @java.lang.String;
      }\>(   length(content(result)) = data.length
          & \forall int i; ((i >= 0 & i < data.length)
                  -> charAt(i,content(result)) = data[i] )
          & java.lang.Object::<created>@pre(result) = FALSE
          & result.<created>@(java.lang.Object) = TRUE
          & result != null )
      \modifies { content(result),
                  result.<nextToCreate>@(java.lang.String),
                  result.<created>@(java.lang.Object),
                  result.<initialized>@(java.lang.Object),
                  result.<transient>@(java.lang.Object) }
      \displayname "copyValueOf Normal"
  };

  copyValueOfExc {
      \programVariables {
          java.lang.String result;
          char[] data;
      }
      (data = null) ->
      \<{
          #catchAll (java.lang.Throwable exc) {
              result = java.lang.String.copyValueOf(data)
                        @java.lang.String;
      }}\> (  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies {java.lang.NullPointerException.<nextToCreate>,
                 \for java.lang.NullPointerException exc; exc.<created>,
                 \for java.lang.NullPointerException exc; exc.<transient>,
                 \for java.lang.NullPointerException exc; exc.<initialized> }
      \displayname "copyValueOf NullPointer"
  };

  copyValueOfRangeNormal {
      \programVariables {
          java.lang.String result;
          char[] data;
          int offset, count;
      }
      (  data != null 
       & offset >= 0
       & count >= 0
       & offset+count <= data.length)
      ->
      \<{
          result = java.lang.String.copyValueOf(data, offset, count)
                    @java.lang.String;
      }\>(  length(content(result)) = count
          & \forall int i; ((i >= 0 & i < count)
                         -> charAt(i,content(result)) = data[i+offset] )
          & java.lang.Object::<created>@pre(result) = FALSE
          & result.<created>@(java.lang.Object) = TRUE
          & result != null )
      \modifies { content(result),
                  result.<nextToCreate>@(java.lang.String),
                  result.<created>@(java.lang.Object),
                  result.<initialized>@(java.lang.Object),
                  result.<transient>@(java.lang.Object) }
      \displayname "copyValueOf Normal"
  };

  copyValueOfRangeExcBounds {
      \programVariables {
          java.lang.String result;
          char[] data;
          int offset, count;
      }
      (  data != null
       & ( offset < 0
          | count < 0
          | offset+count > data.length))
      ->
      \<{
          #catchAll (java.lang.Throwable exc) {
              result = java.lang.String.copyValueOf (data,offset,count)
                        @java.lang.String;
      }}\>(  exc != null
           & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
      \modifies {java.lang.IndexOutOfBoundsException.<nextToCreate>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<created>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<transient>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<initialized> }
      \displayname "copyValueOf Exceptional"
  };

  copyValueOfRangeExcNull {
      \programVariables {
          java.lang.String result;
          char[] data;
          int offset, count;
      }
      (data = null) ->
      \<{
          #catchAll (java.lang.Throwable exc) {
              result = java.lang.String.copyValueOf(data,offset,count)
                        @java.lang.String;
      }}\> (  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies{ }
      \displayname "copyValueOf NullPointer"
  };

  //
  // getChars
  //
  getCharsNormal {
      \programVariables {
          java.lang.String s;
          char[] dst;
          int srcBegin, srcEnd, dstBegin;
      }
      (  dst != null
       & srcBegin >= 0
       & srcBegin <= srcEnd
       & srcEnd <= length(content(s))
       & dstBegin >= 0
       & dstBegin+(srcEnd-srcBegin) <= dst.length )
      ->
      \<{
          s.getChars(srcBegin,srcEnd,dst,dstBegin)
                  @java.lang.String;
      }\>(\forall int i; ( ((i >= 0 & i < (srcEnd-srcBegin))
		    	      -> charAt(srcBegin+i,content(s)) = dst[dstBegin+i])
			     & ((i >= 0 & i < dstBegin)
			       -> dst[i]=dst@pre[i])
			     & ((i >= dstBegin+(srcEnd-srcBegin) & i < dst.length)
			       -> dst[i]=dst@pre[i]) ))
      \modifies { dst }
      \displayname "getChars Normal"
  };

  getCharsExcBounds {
      \programVariables {
          java.lang.String s;
          char[] dst;
          int srcBegin, srcEnd, dstBegin;
      }
      (  dst != null
       & (  srcBegin < 0
          | srcBegin > srcEnd
          | srcEnd > length(content(s))
          | dstBegin < 0 
          | dstBegin+(srcEnd-srcBegin) > dst.length ))
      ->
      \<{
          #catchAll (java.lang.Throwable exc) {
              s.getChars(srcBegin,srcEnd,dst,dstBegin)
                      @java.lang.String;
      }}\>( exc != null
          & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE)
      \modifies {java.lang.IndexOutOfBoundsException.<nextToCreate>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<created>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<transient>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<initialized> }
      \displayname "getChars Exceptional"
  };

  getCharsExcNull {
      \programVariables {
          java.lang.String s;
          char[] dst;
          int srcBegin, srcEnd, dstBegin;
      }
      (dst = null) ->
      \<{
          #catchAll (java.lang.Throwable exc) {
              s.getChars(srcBegin,srcEnd,dst,dstBegin)
                      @java.lang.String;
      }}\>( exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE)
      \modifies {java.lang.NullPointerException.<nextToCreate>,
                 \for java.lang.NullPointerException exc; exc.<created>,
                 \for java.lang.NullPointerException exc; exc.<transient>,
                 \for java.lang.NullPointerException exc; exc.<initialized> }
      \displayname "getChars NullPointer"
  };

  //
  // toCharArray
  //
  toCharArray {
      \programVariables {
          java.lang.String s;
          char[] result;
      }
      true ->
      \<{
          result = s.toCharArray()@java.lang.String;
      }\>(  result != null
          & result.length = length(content(s))
          & \forall int i; ((i >= 0 & i < length(content(s)))
                       -> charAt(i,content(s)) = result[i])
          & java.lang.Object::<created>@pre(result) = FALSE
          & result.<created>@(java.lang.Object) = TRUE)
      \modifies { jchar[].<nextToCreate>,
                  result.<created>@(java.lang.Object),
                  result.<initialized>@(java.lang.Object),
                  result.<transient>@(java.lang.Object) }
      \displayname "toCharArray"
  };

  //
  // valueOf
  //
  valueOfBoolean {
      \programVariables {
          java.lang.String result;
          boolean bVal;
      }
      true ->
      \<{
          result = java.lang.String.valueOf(bVal)@java.lang.String;
      }\>(   content(result) = \if (bVal = TRUE)
                               \then ( cons((jchar)'t',
                                       cons((jchar)'r',
                                       cons((jchar)'u',
                                       cons((jchar)'e',empty)))) )
                               \else ( cons((jchar)'f',
                                       cons((jchar)'a',
                                       cons((jchar)'l',
                                       cons((jchar)'s',
                                       cons((jchar)'e',empty))))) )
          & java.lang.Object::<created>@pre(result) = FALSE
          & result.<created>@(java.lang.Object) = TRUE
          & result != null )
      \modifies { content(result),
                  result.<nextToCreate>@(java.lang.String),
                  result.<created>@(java.lang.Object),
                  result.<initialized>@(java.lang.Object),
                  result.<transient>@(java.lang.Object) }
      \displayname "valueOf"
  };

  valueOfChar {
      \programVariables {
          java.lang.String result;
          char charVal;
      }
      true ->
      \<{
      result = java.lang.String.valueOf(charVal)@java.lang.String;
      }\>(   content(result) = cons(charVal,empty)
          & java.lang.Object::<created>@pre(result) = FALSE
          & result.<created>@(java.lang.Object) = TRUE
          & result != null )
      \modifies { content(result),
                  result.<nextToCreate>@(java.lang.String),
                  result.<created>@(java.lang.Object),
                  result.<initialized>@(java.lang.Object),
                  result.<transient>@(java.lang.Object) }
      \displayname "valueOf"
  };

  valueOfCharArrayNormal {
      \programVariables {
          java.lang.String result;
          char[] data;
      }
      (data != null) ->
      \<{
          result = java.lang.String.valueOf(data)@java.lang.String;
      }\>(   (\forall int i; ((i >= 0 & i < data.length)
                      -> charAt(i,content(result)) = data[i]))
          & length(content(result)) = data.length
          & java.lang.Object::<created>@pre(result) = FALSE
          & result.<created>@(java.lang.Object) = TRUE
          & result != null )
      \modifies { content(result),
                  result.<nextToCreate>@(java.lang.String),
                  result.<created>@(java.lang.Object),
                  result.<initialized>@(java.lang.Object),
                  result.<transient>@(java.lang.Object) }
      \displayname "valueOf"
  };

  valueOfCharArrayExc {
      \programVariables {
          java.lang.String result;
          char[] data;
      }
      (data = null) ->
      \<{
          #catchAll (java.lang.Throwable exc) {
             result = java.lang.String.valueOf(data)@java.lang.String;
      }}\>( exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE )
      \modifies {java.lang.NullPointerException.<nextToCreate>,
                 \for java.lang.NullPointerException exc; exc.<created>,
                 \for java.lang.NullPointerException exc; exc.<transient>,
                 \for java.lang.NullPointerException exc; exc.<initialized> }
      \displayname "valueOf NullPointer"
  };

  valueOfInt {
      \programVariables {
          java.lang.String result;
          int iVal;
      }
      true ->
      \<{
          result = java.lang.String.valueOf(iVal)@java.lang.String;
      }\>(   content(result) = removeZeros(translateInt(iVal))
          & java.lang.Object::<created>@pre(result) = FALSE
          & result.<created>@(java.lang.Object) = TRUE
          & result != null )
      \modifies { content(result),
                  result.<nextToCreate>@(java.lang.String),
                  result.<created>@(java.lang.Object),
                  result.<initialized>@(java.lang.Object),
                  result.<transient>@(java.lang.Object) }
      \displayname "valueOf"
  };

  valueOfLong {
      \programVariables {
          java.lang.String result;
          long lVal;
      }
      true ->
      \<{
          result = java.lang.String.valueOf(lVal)@java.lang.String;
      }\>(   content(result) = removeZeros(translateInt(lVal))
          & java.lang.Object::<created>@pre(result) = FALSE
          & result.<created>@(java.lang.Object) = TRUE
          & result != null )
      \modifies { content(result),
                  result.<nextToCreate>@(java.lang.String),
                  result.<created>@(java.lang.Object),
                  result.<initialized>@(java.lang.Object),
                  result.<transient>@(java.lang.Object) }
      \displayname "valueOf"
  };

  valueOfCharArrayRangeNormal {
      \programVariables {
          java.lang.String result;
          char[] data;
          int offset, count;
      }
      ( data != null & offset >= 0 & count >= 0
       & offset+count <= data.length)
      ->
      \<{
          result = java.lang.String.valueOf(data,offset,count)
                     @java.lang.String;
      }\>(   (\forall int i; ((i >= 0 & i < count)
                        -> charAt(i,content(result)) = data[offset+i]))
          & length(content(result)) = count
          & java.lang.Object::<created>@pre(result) = FALSE
          & result.<created>@(java.lang.Object) = TRUE
          & result != null )
      \modifies { content(result),
                  result.<nextToCreate>@(java.lang.String),
                  result.<created>@(java.lang.Object),
                  result.<initialized>@(java.lang.Object),
                  result.<transient>@(java.lang.Object) }
      \displayname "valueOf Normal"
  };

  valueOfCharArrayRangeExcBounds {
      \programVariables {
          java.lang.String result;
          char[] data;
          int offset, count;
      }
      (  data != null
       & (offset < 0 | count < 0 | offset+count > data.length))
      ->
      \<{
          #catchAll (java.lang.Throwable exc) {
              result = java.lang.String.valueOf(data,offset,count)
                         @java.lang.String;
      }}\>(  exc != null
           & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE )
      \modifies {java.lang.IndexOutOfBoundsException.<nextToCreate>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<created>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<transient>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<initialized> }
      \displayname "valueOf Exceptional"
  };

  valueOfCharArrayRangeExcNull {
      \programVariables {
          java.lang.String result;
          char[] data;
          int offset, count;
      }
      (data = null) ->
      \<{
          #catchAll (java.lang.Throwable exc) {
              result = java.lang.String.valueOf(data,offset,count)
                        @java.lang.String;
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE )
      \modifies {java.lang.NullPointerException.<nextToCreate>,
                 \for java.lang.NullPointerException exc; exc.<created>,
                 \for java.lang.NullPointerException exc; exc.<transient>,
                 \for java.lang.NullPointerException exc; exc.<initialized> }
      \displayname "valueOf NullPointer"
  };

  valueOfObjectNull {
      \programVariables {
          java.lang.String result;
          java.lang.Object obj;
      }
      obj = null ->
      \<{
          result = java.lang.String.valueOf(obj)@java.lang.String;
      }\>(   content(result) = cons((jchar)'n',cons((jchar)'u',
                        cons((jchar)'l',cons((jchar)'l',empty))))
          & java.lang.Object::<created>@pre(result) = FALSE
          & result.<created>@(java.lang.Object) = TRUE
          & result != null )
      \modifies { content(result),
                  result.<nextToCreate>@(java.lang.String),
                  result.<created>@(java.lang.Object),
                  result.<initialized>@(java.lang.Object),
                  result.<transient>@(java.lang.Object) }
      \displayname "valueOf null"
  };

  valueOfObjectNonNull {
      \programVariables {
          java.lang.String result;
          java.lang.Object obj;
      }
      obj != null ->
      \<{
          result = java.lang.String.valueOf(obj)@java.lang.String;
      }\>( result = obj.toString() )
      \modifies { }
      \displayname "valueOf non null"
  };
    
  hashCode {
      \programVariables {
          java.lang.String s;
          int result;
      }
      true ->
      \<{
          result = s.hashCode()@java.lang.String;
      }\>(result = hashCode(content(s)))
      \modifies { }
  };
  
  constrNormal {
      \programVariables {
          java.lang.String s;
      }
      true ->
      \<{
          s.<init>()@java.lang.String;
      }\>(content(s) = empty)
      \modifies { content(s) }
      \displayname "Constructor Normal Execution"
  };

  constrCharArrayNormal {
      \programVariables {
          java.lang.String s;
          char[] v;
      }
      (v != null) ->
      \<{
          s.<init>(v)@java.lang.String;
      }\>(  length(content(s)) = v.length
          & \forall int i; ((i >= 0 & i < v.length)
                       -> charAt(i,content(s)) = v[i]) )
      \modifies { content(s) }
      \displayname "Constructor Normal Execution"
  };

  constrCharArrayExc {
      \programVariables {
          java.lang.String s;
          char[] v;
      }
      (v = null) ->
      \<{
           #catchAll (java.lang.Throwable exc) {
               s.<init>(v)@java.lang.String;
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE )
      \modifies {java.lang.NullPointerException.<nextToCreate>,
                 \for java.lang.NullPointerException exc; exc.<created>,
                 \for java.lang.NullPointerException exc; exc.<transient>,
                 \for java.lang.NullPointerException exc; exc.<initialized> }
      \displayname "Constructor Exceptional Execution"
  };

  constrCharArrayRangeNormal {
      \programVariables {
          java.lang.String s;
          char[] v;
          int offset, count;
      }
      (  v != null & offset >= 0
       & count >= 0 & offset+count <= v.length) ->
      \<{
          s.<init>(v, offset, count)@java.lang.String;
      }\>(  length(content(s)) = count
          & \forall int i; ((i >= 0 & i < count)
                    -> charAt(i,content(s)) = v[offset+i]) )
      \modifies { content(s) }
      \displayname "Constructor Normal Execution"
  };

  constrCharArrayRangeExcBounds {
      \programVariables {
          java.lang.String s;
          char[] v;
          int offset, count;
      }
      (v != null & (offset < 0 | count < 0 | offset+count > v.length))
      ->
      \<{
          #catchAll(java.lang.Throwable exc) {
              s.<init>(v, offset, count)@java.lang.String;
      }}\>(  exc != null
           & java.lang.IndexOutOfBoundsException::instance(exc) = TRUE )
      \modifies {java.lang.IndexOutOfBoundsException.<nextToCreate>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<created>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<transient>,
                 \for java.lang.IndexOutOfBoundsException exc; exc.<initialized> }
      \displayname "Constructor Exceptional Execution"
  };

  constrCharArrayRangeExcNull {
      \programVariables {
          java.lang.String s;
          char[] v;
          int offset, count;
      }
      (v = null) ->
      \<{
          #catchAll(java.lang.Throwable exc) {
              s.<init>(v, offset, count)@java.lang.String;
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE )
	\modifies {java.lang.NullPointerException.<nextToCreate>,
                 \for java.lang.NullPointerException exc; exc.<created>,
                 \for java.lang.NullPointerException exc; exc.<transient>,
                 \for java.lang.NullPointerException exc; exc.<initialized> }
	\displayname "Constructor Exceptional Execution"
  };

  constrCopyNormal {
      \programVariables {
          java.lang.String s, t;
      }
      (t != null) ->
      \<{
          s.<init>(t)@java.lang.String;
      }\>( content(s) = content(t) )
      \modifies { content(s) }
      \displayname "Copy Constructor Normal Execution"
  };

  constrCopyExc {
      \programVariables {
          java.lang.String s, t;
      }
      (t = null) ->
      \<{
          #catchAll(java.lang.Throwable exc) {
              s.<init>(t)@java.lang.String;
      }}\>(  exc != null
           & java.lang.NullPointerException::instance(exc) = TRUE )
      \modifies {java.lang.NullPointerException.<nextToCreate>,
                 \for java.lang.NullPointerException exc; exc.<created>,
                 \for java.lang.NullPointerException exc; exc.<transient>,
                 \for java.lang.NullPointerException exc; exc.<initialized> }
      \displayname "Copy Constructor Exceptional Execution"
  };

}

/*
 * Program Rules for Strings
 * - model the execution in absence of the string pool
 */
\rules(stringRules:withoutStringPool) {
    
  //
  // Assignment of a Literal
  //
  stringAssignment  {
      \schemaVar \modalOperator { diamond, box, diamond_trc,
                   box_trc, throughout_trc } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program StringLiteral #slit;
      \schemaVar \formula post;
      
      \find (\modality{#normalassign}{.. #v = #slit; ...}\endmodality(post)) 
      \replacewith ({ #v := java.lang.String::<get>(#v.<nextToCreate>
                                       @(java.lang.String)) }
                    { #v.<nextToCreate>@(java.lang.String) :=
                                    #v.<nextToCreate>@(java.lang.String)+1 ||
                      #v.<created>@(java.lang.Object):=TRUE ||
                      #v.<initialized>@(java.lang.Object):=TRUE ||
                      #v.<transient>@(java.lang.Object):=0 ||
                      content(#v):= #slit}
                    \modality{#normalassign}{.. ...}\endmodality(post)) 
      \heuristics (simplify_prog, simplify_prog_subset)
      \displayname "assignment"
  };

  //
  // The "+" operator
  //
  stringConcat {
      \schemaVar \modalOperator { diamond, box, diamond_trc,
                   box_trc, throughout_trc } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstr1, #sstr2;
      \schemaVar \formula post;

      \find ( \modality{#normalassign}
              {.. #v = #sstr1 + #sstr2; ...}
              \endmodality(post))
      \replacewith ( { #v := java.lang.String::<get>(#v.<nextToCreate>
                                       @(java.lang.String)) }
                     { #v.<nextToCreate>@(java.lang.String) := #v.<nextToCreate>
                                                             @(java.lang.String)+1 ||
                       #v.<created>@(java.lang.Object):=TRUE ||
                       #v.<initialized>@(java.lang.Object):=TRUE ||
                       #v.<transient>@(java.lang.Object):=0 ||
                       content(#v) := concat(content(#sstr1),content(#sstr2)) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \heuristics (simplify_prog, simplify_prog_subset)
      \displayname "concatenation"
  };
}

/*
 * Program Rules for Strings
 * - model the execution in absence of the string pool
 */
\rules(stringRules:withStringPool) {

  poolKeyIsContentOfValue {
  	\schemaVar \term CharList slit;
	\assumes(inReachableState ==>)
  	\find (content(pool(slit))) 
  	\sameUpdateLevel
  	\replacewith(\if (pool(slit) != null) \then (slit) \else (content(pool(slit))))
  	\heuristics (simplify)  	
  };

  poolNullOrCreated {
  	\schemaVar \term CharList slit;
	\assumes(inReachableState ==>)
  	\find (pool(slit))
  	\sameUpdateLevel
  	\add(pool(slit) = null | pool(slit).<created>@(java.lang.Object) = TRUE ==>)
  	\heuristics (inReachableStateImplication)  	
  };

  poolIsInjectiveForNonNull1 {
  	\schemaVar \term CharList slit1, slit2;
	\assumes(inReachableState ==> pool(slit1) = null)
  	\find (pool(slit1) = pool(slit2))
  	\sameUpdateLevel
  	\replacewith(slit1 = slit2)
  	\heuristics (simplify)
  	\displayname "poolIsInjectiveForNonNull"  	
  };

  poolIsInjectiveForNonNull2 {
  	\schemaVar \term CharList slit1, slit2;
	\assumes(inReachableState ==> pool(slit2) = null)
  	\find (pool(slit1) = pool(slit2))
  	\sameUpdateLevel
  	\replacewith(slit1 = slit2)
  	\heuristics ( concrete )  	
  	\displayname "poolIsInjectiveForNonNull"  	
  };
  
  insert_constant_string_value {  
  	\schemaVar \program ConstantStringVariable #csv;
  	\assumes (inReachableState ==> )                           
        \find ( #csv ) 
        \sameUpdateLevel
  	\replacewith ( pool(#constantvalue ( #csv )) )
  	\add(pool(#constantvalue(#csv)) != null, pool(#constantvalue(#csv)).<created>@(java.lang.Object) = TRUE ==>)
        \heuristics(concrete)  
  };
  
     
  //
  // Assignment of a Literal
  //
  stringAssignment  {
      \schemaVar \modalOperator { diamond, box, diamond_trc,
                   box_trc, throughout_trc } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program StringLiteral #slit;
      \schemaVar \formula post;
      
      \find (\modality{#normalassign}{.. #v = #slit; ...}\endmodality(post))
      \sameUpdateLevel 
      \replacewith ({ #v := pool(#slit) || content(pool(#slit)) := #slit}
                    \modality{#normalassign}{.. ...}\endmodality(post))
      \add (inReachableState -> (pool(#slit) != null & pool(#slit).<created>@(java.lang.Object)=TRUE) ==>) 
      \heuristics (simplify_prog, simplify_prog_subset)
      \displayname "assignment"
  };

  
  //
  // The "+" operator
  //
  stringConcat {
      \schemaVar \modalOperator { diamond, box, diamond_trc,
                   box_trc, throughout_trc } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstr1, #sstr2;
      \schemaVar \formula post;

      \find ( \modality{#normalassign}
              {.. #v = #sstr1 + #sstr2; ...}
              \endmodality(post))
      \replacewith ( { #v := java.lang.String::<get>(#v.<nextToCreate>
                                       @(java.lang.String)) }
                     { #v.<nextToCreate>@(java.lang.String) := #v.<nextToCreate>
                                                             @(java.lang.String) + 1 ||
                       #v.<created>@(java.lang.Object):=TRUE ||
                       #v.<initialized>@(java.lang.Object):=TRUE ||
                       #v.<transient>@(java.lang.Object):=0 ||
                       content(#v) := concat(content(#sstr1), 
                       	\if (#sstr2 = null) 
                       	\then (cons('n', cons('u', cons('l', cons('l',empty))))) 
                       	\else (content(#sstr2))) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \heuristics (simplify_prog, simplify_prog_subset)
      \displayname "concatenation"
  };
  
  stringConcatIntExpLeft {
      \schemaVar \modalOperator { diamond, box, diamond_trc,
                   box_trc, throughout_trc } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrRight;
      \schemaVar \program AnyJavaTypeExpression #seLeft;
      \schemaVar \formula post;

      \find ( \modality{#normalassign}
              {.. #v = #seLeft + #sstrRight; ...}
              \endmodality(post))
      \replacewith ( { #v := java.lang.String::<get>(#v.<nextToCreate>
                                       @(java.lang.String)) }
                     { #v.<nextToCreate>@(java.lang.String) := #v.<nextToCreate>
                                                             @(java.lang.String)+1 ||
                       #v.<created>@(java.lang.Object):=TRUE ||
                       #v.<initialized>@(java.lang.Object):=TRUE ||
                       #v.<transient>@(java.lang.Object):=0 ||
                       content(#v) := concat(translateInt(#seLeft),content(#sstrRight)) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \heuristics (simplify_prog, simplify_prog_subset)
      \displayname "concatenation"
  };

   stringConcatIntExpRight {
      \schemaVar \modalOperator { diamond, box, diamond_trc,
                   box_trc, throughout_trc } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrLeft;
      \schemaVar \program AnyJavaTypeExpression #seRight;
      \schemaVar \formula post;

      \find ( \modality{#normalassign}
              {.. #v = #sstrLeft + #seRight; ...}
              \endmodality(post))
      \replacewith ( { #v := java.lang.String::<get>(#v.<nextToCreate>
                                       @(java.lang.String)) }
                     { #v.<nextToCreate>@(java.lang.String) := #v.<nextToCreate>
                                                             @(java.lang.String)+1 ||
                       #v.<created>@(java.lang.Object):=TRUE ||
                       #v.<initialized>@(java.lang.Object):=TRUE ||
                       #v.<transient>@(java.lang.Object):=0 ||
                       content(#v) := concat(content(#sstrLeft),translateInt(#seRight)) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \heuristics (simplify_prog, simplify_prog_subset)
      \displayname "concatenation"
  };

   stringConcatCharExpRight {
      \schemaVar \modalOperator { diamond, box, diamond_trc,
                   box_trc, throughout_trc } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrLeft;
      \schemaVar \program JavaCharExpression #seRight;
      \schemaVar \formula post;

      \find ( \modality{#normalassign}
              {.. #v = #sstrLeft + #seRight; ...}
              \endmodality(post))
      \replacewith ( { #v := java.lang.String::<get>(#v.<nextToCreate>
                                       @(java.lang.String)) }
                     { #v.<nextToCreate>@(java.lang.String) := #v.<nextToCreate>
                                                             @(java.lang.String)+1 ||
                       #v.<created>@(java.lang.Object):=TRUE ||
                       #v.<initialized>@(java.lang.Object):=TRUE ||
                       #v.<transient>@(java.lang.Object):=0 ||
                       content(#v) := concat(content(#sstrLeft),cons(#seRight, empty)) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \heuristics (simplify_prog, simplify_prog_subset)
      \displayname "concatenation"
  };

  
   stringConcatBooleanLeft {
      \schemaVar \modalOperator { diamond, box, diamond_trc,
                   box_trc, throughout_trc } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrRight;
      \schemaVar \program SimpleJavaBooleanExpression #seLeft;
      \schemaVar \formula post;

      \find ( \modality{#normalassign}
              {.. #v = #seLeft + #sstrRight; ...}
              \endmodality(post))
      \replacewith ( { #v := java.lang.String::<get>(#v.<nextToCreate>
                                       @(java.lang.String)) }
                     { #v.<nextToCreate>@(java.lang.String) := #v.<nextToCreate>
                                                             @(java.lang.String)+1 ||
                       #v.<created>@(java.lang.Object):=TRUE ||
                       #v.<initialized>@(java.lang.Object):=TRUE ||
                       #v.<transient>@(java.lang.Object):=0 ||
                       content(#v) := concat(\if (#seLeft=TRUE) 
                                             \then (cons('t',cons('r',cons('u', cons('e', empty)))))
                                             \else (cons('f',cons('a',cons('l', cons('s', cons('e',empty)))))),
                                             content(#sstrRight)) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \heuristics (simplify_prog, simplify_prog_subset)
      \displayname "concatenation"
  };

  stringConcatBooleanRight {
      \schemaVar \modalOperator { diamond, box, diamond_trc,
                   box_trc, throughout_trc } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrLeft;
      \schemaVar \program SimpleJavaBooleanExpression #seRight;
      \schemaVar \formula post;

      \find ( \modality{#normalassign}
              {.. #v = #sstrLeft + #seRight; ...}
              \endmodality(post))
      \replacewith ( { #v := java.lang.String::<get>(#v.<nextToCreate>
                                       @(java.lang.String)) }
                     { #v.<nextToCreate>@(java.lang.String) := #v.<nextToCreate>
                                                             @(java.lang.String)+1 ||
                       #v.<created>@(java.lang.Object):=TRUE ||
                       #v.<initialized>@(java.lang.Object):=TRUE ||
                       #v.<transient>@(java.lang.Object):=0 ||
                       content(#v) := concat(content(#sstrLeft),
                                             \if (#seRight=TRUE) 
                                             \then (cons('t',cons('r',cons('u', cons('e', empty))))) 
                                             \else (cons('f',cons('a',cons('l', cons('s', cons('e',empty))))))
                                             ) }
                      \modality{#normalassign}{.. ...}\endmodality(post) )
      \heuristics (simplify_prog, simplify_prog_subset)
      \displayname "concatenation"
  };

  
   stringConcatObjectLeft {
      \schemaVar \modalOperator { diamond, box, diamond_trc,
                   box_trc, throughout_trc } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrRight;
      \schemaVar \program SimpleNonStringObjectExpression #seLeft;
      \schemaVar \formula post;

      \find ( \modality{#normalassign}
              {.. #v = #seLeft + #sstrRight; ...}
              \endmodality(post))
      \replacewith (  
      	\modality{#normalassign}
              {.. #v = (#seLeft == null ? null : #seLeft) + #sstrRight.toString(); ...}
        \endmodality(post) )
      \heuristics (simplify_prog, simplify_prog_subset)
      \displayname "concatenation"
  };

  stringConcatObjectRight {
      \schemaVar \modalOperator { diamond, box, diamond_trc,
                   box_trc, throughout_trc } #normalassign;
      \schemaVar \program Variable #v;
      \schemaVar \program SimpleStringExpression #sstrLeft;
      \schemaVar \program SimpleNonStringObjectExpression #seRight;
      \schemaVar \formula post;

      \find ( \modality{#normalassign}
              {.. #v = #sstrLeft + #seRight; ...}
              \endmodality(post))
      \replacewith (  
      	\modality{#normalassign}
              {.. #v = #sstrLeft + (#seRight == null ? null : #seRight.toString()); ...}
        \endmodality(post) )
      \heuristics (simplify_prog, simplify_prog_subset)
      \displayname "concatenation"
  };
}
