// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
package de.uka.ilkd.key.util.keydoc.html;

import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import de.uka.ilkd.key.util.keydoc.parser.*;

import antlr.CommonAST;

/**
 * This class is my impelementation of the builder itself.
 * It builds the HTML documentation file of a given .key file.
 * To parse the .key file it uses classes generated by the Tool antlr.
 * The location of the parsing package is src.parser.
 * It stores the HTML file and certain information needed by the director
 * (name of the file, shordescription of the file)
 * in a BoxedFile.
 * 
 * @author sebastian
 *
 */
class KDKeYToHTMLBuilder extends KeYToHTMLBuilder {

	final static String bgcolor= "#BEBEFF"; // The Backgroundcolor of the HTML table headlines
    
    protected static BoxedFile buildHTMLFile(File toBuild){
	try{
		
		
	    StringBuffer html= new StringBuffer(40);
	    
	    // firing up the lexer, parser and treewalker
	    FileInputStream file= new FileInputStream(toBuild);
	    DataInputStream dataInput= new DataInputStream(file);
	    KeYDocLexer lexer= new KeYDocLexer(dataInput);
	    KeYDocParser parser= new KeYDocParser(lexer);
	    parser.startRule();
	    CommonAST parseTree = (CommonAST)parser.getAST();
	    KeYDocTreeWalker walker = new KeYDocTreeWalker();
	    walker.keyDocExpr(parseTree);
	    
	    // htmlcode generation

	    // the header
	    html.append("<html><head><title>");
	    html.append(toBuild.getName());
	    html.append("</title></head>");				
	    
	    // the body
	    html.append("<body>");

	    html.append("<center><b>");
	    html.append(toBuild.getName());
	    html.append("</b></center>");
	    // provable??
	    if (walker.provable!=null) {
		html.append("<dl><dt><b>Provable:</b></dt><dd>");
			html.append(walker.provable);
			html.append("</dd></dl>"); 
	    }
	    
	    // Integers for the determination of the first line of text.
	    int firstOffset= html.length();
	    int firstLength= parser.firstLength;
	    int firstLinkLength= 0;
	    
	    // htmlText. First LinkTags are inserted
	    StringBuffer htmlText= parser.htmlText;
	    int position; // position of the Linktags 
	    
	    int linkOffset=0; // Adds length of the linktags themselfes to the length of the text.
	    for (int i=0; i<parser.links.size(); i++) {
	    	position=((Integer) parser.links.get(i)).intValue();
	    	String link= ((StringBuffer) walker.link.get(i)).toString();
	    	htmlText.insert(position+linkOffset, link);
	    	linkOffset+= link.length();
	    	if (position<firstLength)
	    		firstLinkLength+= link.length();
	    	// pretty complicated lines short: copy the LinkTags into the htmlText StringBuffer.
	    	// update the length of the firstline, if the Linktag is within it.
	    }
	    firstLength+= firstLinkLength;
	    
	    
	    
	    html.append(htmlText);
	    
	    // see??
	    if (walker.see.size()!=0) {
		
		html.append("<dl><dt><b>See</b></dt><dd><code>");
		html.append(walker.see.get(0));
		for (int i=1; i<walker.see.size(); i++) {
		    html.append(", ");
		    html.append(walker.see.get(i));
		}
		html.append("</code></dd></dl>");
	    }
	    
	    html.append("<hr>");
	    
	    html.append("<pre>");
	    html.append(parser.keyText);
	    html.append("</pre>");
	    
	    html.append("<hr>");
	    
	    // statistics??
	    if (walker.stat1.size()!=0) {
		html.append("<center><table  border=\"1\" width=\"80%\"><colgroup><col width=\"2*\"><col width=\"1*\"></colgroup><tr><td colspan=\"1\" bgcolor=\"" + bgcolor + "\"><h2>Statistics</h2></td><td colspan=\"1\" bgcolor=\"" + bgcolor + "\">&#160;</td></tr>");
		for (int i=0; i<walker.stat1.size(); i++) {
		    html.append("<tr><code><td class=\"left\" valign=\"top\"><code>");
		    html.append(walker.stat1.get(i));
		    html.append("</td><td class=\"right\">");
		    html.append(walker.stat2.get(i));
		    html.append("</td></code></tr>");
		}
		html.append("</table></center><br>");
	    }
	    
	    html.append("<table border=\"0\" cellspacing=\"40\"><tr>");
	    
	    // Since??
	    if (walker.since!=null) {
		html.append("<td><dl><dt><b>Since:</b></dt><dd><code>");
		html.append(walker.since);
		html.append("</code></dd></dl></td>"); 
	    }
	    
	    //	  Version??
	    if (walker.version!=null) {
		html.append("<td><dl><dt><b>Version:</b></dt><dd><code>");
		html.append(walker.version);
		html.append("</code></dd></dl></td>"); 
	    }
	    
	    // Author??
	    if (walker.auth.size()!=0) {
		html.append("<td><dl><dt><b>Author</b></dt><dd><code>");
		html.append(walker.auth.get(0));
		for (int i=1; i<walker.auth.size(); i++) {
		    html.append(", ");
		    html.append(walker.auth.get(i));
		}		
		html.append("</code></dd></dl></td>");
	    }
	    
	    // Deprecated??
	    if (walker.deprecated!=false) {
		html.append("<td><dl><dt><b>Deprecated</b></dt><dd><code>");
		html.append("</code></dd></dl></td>"); 
	    }
	    
	    
	    html.append("</tr></table>");
	    
	    // TODO: delete .key
	    return new BoxedFile(toBuild, firstLength, firstOffset, new HTMLFile(html));

	}
	catch(IOException iOE) {
		System.out.println("IOException occured during parsing file");		
	}
	catch(Exception e){
	    System.out.println("Exception: " + e + " occured during parsing file");
	}
	
	System.out.println("Due to the Error, file will be skipped.");
	return null;
    }
    
}
