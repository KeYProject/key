// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2005 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
//

/* Generated by Together */

package de.uka.ilkd.key.logic;

import java.io.IOException;
import java.io.StringWriter;

import de.uka.ilkd.key.lang.common.pprinter.ProgramPrinterUtil;
import de.uka.ilkd.key.lang.common.program.IProgramElement;
import de.uka.ilkd.key.java.NameAbstractionTable;
import de.uka.ilkd.key.java.NonTerminalProgramElement;
import de.uka.ilkd.key.java.PrettyPrinter;
import de.uka.ilkd.key.java.ProgramElement;
import de.uka.ilkd.key.java.StatementBlock;


public class JavaBlock {
    
    public static final JavaBlock EMPTY_JAVABLOCK=new JavaBlock();
    private final ProgramElement prg;


    /** create a new empty JavaBlock as singleton 
     */
    private JavaBlock() {
	this.prg=null;
    }

    /** create a new JavaBlock 
     * @param prg the root ProgramElement for this JavaBlock
     */
    private JavaBlock(ProgramElement prg) {
	this.prg=prg;
    }

    /** create a new JavaBlock 
     * @param prg the root ProgramElement for this JavaBlock.
     */
    //TODO: TacletIndex relies on <code>prg</code> being indeed a StatementBlock.
    public static JavaBlock createJavaBlock(ProgramElement prg) {
	if (prg==null) {
	    return EMPTY_JAVABLOCK;	   
	} 
	return new JavaBlock(prg);

    }
    

    public boolean isEmpty() {
	if ((program() instanceof StatementBlock))  {
	    return ((StatementBlock)program()).isEmpty();
	}
	return this == EMPTY_JAVABLOCK;
    }
    
    public int size() {
	if ((program() instanceof NonTerminalProgramElement))  {
	    return ((NonTerminalProgramElement)program()).getChildCount();
	}
	return 0;
    }
    
    /** returns the hashCode */
    public int hashCode() {    	   
    	return 17 + ((program()==null) ? 0 : program().hashCode());
    }

    /** returns true iff the program elements are equal */
    public boolean equals(Object o) {
        if ( o == this ) {
            return true;
        } else if (!(o instanceof JavaBlock)) {
            return false;
        }       
        return ((JavaBlock)o).program().equals(program());
    }

    /** returns true if the given ProgramElement is equal to the
     * one of the JavaBlock modulo renaming (see comment in SourceElement)
     */ 
    public boolean equalsModRenaming(Object o, 
				     NameAbstractionTable nat) {
        if (!(o instanceof JavaBlock)) {
            return false;
        }       
        return equalsModRenaming(((JavaBlock)o).program(), nat);
    }


    /** returns true if the given ProgramElement is equal to the
     * one of the JavaBlock modulo renaming (see comment in SourceElement)
     */ 
    private boolean equalsModRenaming(ProgramElement pe,
				     NameAbstractionTable nat) {
	if (pe == null && program() == null) {
	    return true;
	} else if (pe != null && program() != null) {	    
	    return program().equalsModRenaming(pe, nat);	   
	}
        return false;
    }

    /** returns the java program 
     * @return the stored ProgramElement
     */
    public ProgramElement program() {
	return prg;
    }

    /** toString */
    public String toString() {
	if (this==EMPTY_JAVABLOCK) return "";
	String result = "";
	try {
        if (prg instanceof IProgramElement)
            result = ProgramPrinterUtil.formatProgramElementNoLF((IProgramElement)prg);
        else {
            StringWriter sw=new StringWriter();
            PrettyPrinter pp=new PrettyPrinter(sw, true);
            pp.setIndentationLevel(0);
            prg.prettyPrint(pp);
            result = sw.toString();
        }
	} catch (IOException e) {
	    System.err.println("toString of JavaBlock failed due to :"+e);
	    e.printStackTrace();
	}
	return result;
    }

}
