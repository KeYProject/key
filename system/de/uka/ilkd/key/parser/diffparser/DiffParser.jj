// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
//

options {
//    OPTIMIZE_TOKEN_MANAGER = true; // this is obsolete from Javacc 4 on
//    DEBUG_PARSER = true;
//    DEBUG_TOKEN_MANAGER = true;
    STATIC = false;
}


PARSER_BEGIN(DiffParser)

package de.uka.ilkd.key.parser.diffparser;

import java.util.Vector;

public class DiffParser {

   boolean postDiff = false;
   int hunkStart;
   String currentFile = null;
   Vector results = new Vector(10,10);

   
   public MarkerHint[] getMarkers() {
      return (MarkerHint[]) results.toArray(new MarkerHint[]{});
   }
   
   
   public class MarkerHint {
   
      public String file;
      public int line;
   
      MarkerHint(String file, int line) {
         this.file=file;
         this.line=line;
      }
   }

}

PARSER_END(DiffParser)


<*> TOKEN:
{ 
   <LINE: "\n"> : LINE_BEGIN
}


<INLINE> MORE :
{
  <ANYCHAR: ~[]>
}


<LINE_BEGIN> TOKEN :
{
  <SPACE: " "> : INLINE
|
  <PLUSNONPLUS: "+"> : INLINE
|  
  <MINUSNONMINUS: "-"> : INLINE
|  
  <FROMHEADER: "--- "> : FROMLINE
|
  <TOHEADER: "+++ "> : INLINE
|
  <JUNKSTART: ["=","a"-"z","A"-"Z"]> : INLINE
}

<FROMLINE> TOKEN :
{
  <FILENAME: (~["\t",":"])+>
}

<FROMLINE> SKIP :
{
  <TAB: "\t"> : INLINE
|
  <COLON: ":"> : INLINE
}



<HUNK_HEADER> TOKEN :
{
  <COMMA: ",">
|
  <NUMBER: ["1"-"9"] (["0"-"9"])*>
|
  <SPACEPLUS: " +"> 
| 
  <SPACEATAT: " @@">
}




void UniDiff() :
{}
{
  (File())*
  <EOF>
}


void File() :
{}
{
  (JunkLine())*
  FromLine()
  ToLine()
  (Hunk())*
}


void Hunk() :
{}
{
  HunkHeader()
  (DiffLine())*
}


void HunkHeader() :
{
  Token num;
}
{
  <NUMBER> {num=getToken(0);} (<COMMA> <NUMBER>)? <SPACEPLUS>
  <NUMBER> (<COMMA> <NUMBER>)? <SPACEATAT> <LINE>
  {
    postDiff = false; 
    try {
       hunkStart = Integer.parseInt(num.toString());
    } catch(NumberFormatException e) {
       throw new ParseException("Cannot parse hunk start line number "+
          num+" at line "+hunkStart);
    }
  }
}

void DiffLine() :
{}
{
  (InsLine() | DelLine() | ContextLine())
}


void DelLine() :
{}
{
  <MINUSNONMINUS> <LINE> { postDiff = true; hunkStart++; }
}


void InsLine() :
{}
{
  <PLUSNONPLUS> <LINE> { postDiff = true; }
}


void ContextLine() :
{Token t;}
{
  <SPACE> t=<LINE> 
  { 
     if (postDiff) results.add(new MarkerHint(currentFile, hunkStart));
else if (t.toString().startsWith("else"))     results.add(new MarkerHint(currentFile, hunkStart)); 
     hunkStart++;
     postDiff = false; 
  }
}


void JunkLine() :
{}
{
  <JUNKSTART> <LINE> 
}


void FromLine() :
{Token t;}
{
  <FROMHEADER> t=<FILENAME> <LINE> { currentFile = t.toString(); }
}


void ToLine() :
{}
{
  <TOHEADER> <LINE>
}


<LINE_BEGIN> SKIP:
{
  "@@ -" : HUNK_HEADER
}


