#!/bin/sh
# This file is part of KeY - Integrated Deductive Software Design
# Copyright (C) 2001-2005 Universitaet Karlsruhe, Germany
#                         Universitaet Koblenz-Landau, Germany
#                         Chalmers University of Technology, Sweden
#
# The KeY system is protected by the GNU General Public License. 
# See LICENSE.TXT for details.
#
#
#
#
#!/bin/sh
pck=$1
outDir=$GENERATED_SRC_PATH`echo $1 | sed 's!\.!/!g;'`
mkdir -p $outDir
outFile=$outDir"/ArrayOf"$2".java"
ext="extends ArrayOf"$3
cons0="super()"
cons1="super(arr)"
cons2="super(el)"
cons3="super(list)"
getbody="("$2")get"$3"(pos)"
sizebody="super.size()"
var="";
import="";
arraycopy="";
hashcode="";
equals="";
if (test $3 = "null";) then
  var="private final "$2"[] arr; private int hashCode;"
  ext=""
  cons0="this.arr = new $2[0]"
  cons1="this.arr = new $2[arr.length]; System.arraycopy(arr,0,this.arr,0,arr.length)"
  cons2="this.arr = new $2[]{el}"
  cons3="this.arr = ($2[])list.toArray(new $2[list.size()])"
  getbody="arr[pos]"
  sizebody="arr.length"
  hashcode="public int hashCode() { if (hashCode == 0) { for (int i = 0; i<arr.length; i++) { hashCode += 17*arr[i].hashCode();} hashCode = ((hashCode == 0) ? -1 : hashCode);} return hashCode; }"
  equals="public boolean equals(Object o) { if (!(o instanceof ArrayOf"$2")) return false; ArrayOf"$2" cmp = (ArrayOf"$2")o; if (cmp.size() != size()) return false; for (int i = 0; i<arr.length; i++) { if (!arr[i].equals(cmp.arr[i])) { return false;} } return true;  }"
  arraycopy="public void arraycopy(int srcIdx, Object dest, int destIndex, int length) { System.arraycopy(this.arr, srcIdx, dest, destIndex, length); }"
fi
if (test $4 != "null";) then 
  import="import "$4".*;"
fi

sed "s/<IMPORT>/$import/g;s/<E>/$ext/g;s/<VAR>/$var/g;s/<CONSBODY0>/$cons0/g;s/<CONSBODY1>/$cons1/g;s/<CONSBODY2>/$cons2/g;s/<CONSBODY3>/$cons3/g;s/<GETBODY>/$getbody/g;s/<SIZEBODY>/$sizebody/g;s/<ARRAYCOPY>/$arraycopy/g;s/<HASHCODE>/$hashcode/g;s/<EQUALS>/$equals/g;s/<Pck>/$pck/g;s/<S>/$2/g;" <<END_OF_CLASS >$outFile


package <Pck>;
/** wraps an array of <S>s to achieve immutability */
<IMPORT>
import java.util.List;

public class ArrayOf<S> <E> implements java.io.Serializable {

    <VAR>

    /** creates an empty new <S>Array
     */
    public ArrayOf<S>() {
	<CONSBODY0>;
    }

    /** creates a new <S>Array
     * @param arr the ProgrammElement array to wrap
     */
    public ArrayOf<S>(<S>[] arr) {
	<CONSBODY1>;
    }


    /** creates a new <S>Array with one element
     * @param el the <S> that is put into the array
     */
    public ArrayOf<S>(<S> el) {
	<CONSBODY2>;
    }

    /** creates a new <S>Array
     * @param list a LinkedList (order is preserved)
     */
    public ArrayOf<S>(List list) {
	<CONSBODY3>;
    }


    /** gets the element at the specified position
     * @param pos an int describing the position
     * @return the element at pos
     */
    public final <S> get<S>(int pos) {
	return <GETBODY>;
    }

    /** 
     * returns the last element of the array
     * @return the element at position size() - 1
     */
    public final <S> last<S>() {
	return get<S>(size() - 1);
    }


    /** @return size of the array */
    public int size() {
	return <SIZEBODY>;
    }

    <ARRAYCOPY>

    <HASHCODE>
    
    <EQUALS>
 
    public String toString() {
	StringBuffer sb = new StringBuffer();
	sb.append("[");
        for (int i = 0; i<size(); i++) { 
		sb.append(""+get<S>(i));
		if (i<size()-1) sb.append(",");
	}
	sb.append("]");
	return sb.toString();
    }
    
}
END_OF_CLASS
