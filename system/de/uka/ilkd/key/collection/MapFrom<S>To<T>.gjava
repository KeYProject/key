#!/bin/sh
# This file is part of KeY - Integrated Deductive Software Design
# Copyright (C) 2001-2005 Universitaet Karlsruhe, Germany
#                         Universitaet Koblenz-Landau, Germany
#                         Chalmers University of Technology, Sweden
#
# The KeY system is protected by the GNU General Public License. 
# See LICENSE.TXT for details.
#
#
#
#
#!/bin/sh
pck=$1
outDir=$GENERATED_SRC_PATH`echo $1 | sed 's!\.!/!g;'`
mkdir -p $outDir
outFile=$outDir"/MapFrom"$2"To"$3".java"
sed "s/<Pck>/$pck/g;s/<S>/$2/g;s/<T>/$3/g;" <<END_OF_CLASS >$outFile


package <Pck>;

import de.uka.ilkd.key.logic.*;  //because the involved classes may be spread
import de.uka.ilkd.key.proof.*;  //because the involved classes may be spread
import de.uka.ilkd.key.rule.*;  //because the involved classes may be spread
import de.uka.ilkd.key.rule.inst.*;  //because the involved classes may be spread


/**
 * This interface has to be implemented by a Class providing a
 * persistent Map.  
 * CONVENTION: Every Class implementing MapFrom<S>To<T> has to provide
 * a static final variable with the empty map  
 */
public interface MapFrom<S>To<T> extends java.io.Serializable {
   
    /** adds a mapping <key,val> to the Map (old map is not modified) 
     * if key exists old entry has to be removed 
     * @return the new mapping 
     */
    MapFrom<S>To<T> put(<S> key,<T> value);

    /** @return value of type <T> that is mapped by key of type<S> */
    <T> get(<S> key);

    /** @return number of entries as int */
    int size();

    /** @return true iff the map includes key */
    boolean containsKey(<S> key);

    /** @return true iff the map includes value */
    boolean containsValue(<T> value);

    /** removes mapping (key,...) from map
     * @return the new map (the same if key is not in the map)
     */
    MapFrom<S>To<T> remove(<S> key);

    /** removes all mappings (...,value) from map
     * @return the new map (the same if value is not mapped)
     */
    MapFrom<S>To<T> removeAll(<T> value);

    /** @return iterator about all keys */
    IteratorOf<S> keyIterator();

    /** @return iterator about all values */
    IteratorOf<T> valueIterator();

    /** @return iterator for entries */
    IteratorOfEntryOf<S>And<T> entryIterator();

}




    
