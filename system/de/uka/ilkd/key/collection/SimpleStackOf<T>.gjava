#!/bin/sh
# This file is part of KeY - Integrated Deductive Software Design
# Copyright (C) 2001-2005 Universitaet Karlsruhe, Germany
#                         Universitaet Koblenz-Landau, Germany
#                         Chalmers University of Technology, Sweden
#
# The KeY system is protected by the GNU General Public License. 
# See LICENSE.TXT for details.
#
#
#
#
#!/bin/sh
pck=$1
outDir=$GENERATED_SRC_PATH`echo $1 | sed 's!\.!/!g;'`
mkdir -p $outDir
outFile=$outDir"/"SimpleStackOf$2".java"
sed "s/<Pck>/$pck/g;s/<T>/$2/g;" <<END_OF_CLASS >$outFile


package <Pck>;


/** 
 * This class provides a simple stack implementation allowing only
 * elements of type <T>. It supports a subset of the  
 * methods of @see{java.util.Stack}. Look their for a description of
 * the commands. They will react in the same way while replacing Object
 * through <T>
 */ 
public class SimpleStackOf<T> {

    private final StackElement bottom = new StackElement(null, null);
    private StackElement top;

    /**
     * creates a new empty stack that may contain elements of type <T>
     */
    public SimpleStackOf<T>() {	
	top = bottom;
    }

    /**
     * removes the top element of the stack and returns it
     */
    public <T> pop() {
	final <T> result = top.value();
	if (top != bottom) {
	    top = top.bottom();
	    top.removeTop();
	}
	return result;
    }
    
    /**
     * returns the top element of the stack without removing it
     */
    public <T> peek() {	    
	return top.value();
    }

    /**
     * puts object <code>element</code> on the stack
     */
    public void push(<T> element) {
	top = new StackElement(top, element);
    }

    /**
     * returns an interator through the stack from booton to top
     */
    public IteratorOf<T> iterator() {
	return new StackIterator(this);
    }

    /**
     * returns true iff the stack is empty
     */
    public boolean empty() {
	return top == bottom;
    }   
    

    /**
     * the linked structure realising the stack 
     */
    static class StackElement {

	private StackElement top;
	private StackElement bottom;
	private final <T> val;
	
	StackElement(StackElement bottom, <T> val) {
	    this.bottom = bottom;
	    this.val  = val;
	}

	<T> value() {
	    return val;
	} 	
	
	StackElement bottom() {
	    return bottom;
	}

	void removeTop() {
	    top = null;
	}

    }

    static class StackIterator implements IteratorOf<T> {

        private final SimpleStackOf<T> originalStack;
	private StackElement stack;

	StackIterator(SimpleStackOfExtList originalStack) {
		this.originalStack = originalStack;
		stack = originalStack.bottom;
	}

	public boolean hasNext() {
	    return stack != originalStack.top;
	}
	
	public <T> next() {
	    stack = stack.top;
	    return stack.val;
	}

	/** 
	 * throws an unsupported operation exception a
	 */
	 public void remove() {
	     throw new UnsupportedOperationException("Removing elements via an iterator" +
	    	" is not supported for simple stacks.");
	 } 
    }

}
