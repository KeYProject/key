\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Apr 12 13:14:10 CEST 2023
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, finalFields-finalFields\\:immutable, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:on, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\proofObligation {
	"name": "bprod_all_positive",
	"class": "de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput",
 }

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "80a871ca3bac8bb405ecc216fcb6fa9ef6f8a395"))

(autoModeTime "0")

(branch "dummy ID"
(rule "notRight" (formula "1") (newnames "v_uSub,f_i0,f_i1,f_t1"))
(rule "impLeft" (formula "1") (userinteraction))
(branch
    (builtin "One Step Simplification" (formula "1"))
   (rule "closeTrue" (formula "1"))
)
(branch
   (rule "notLeft" (formula "1"))
   (rule "impRight" (formula "1"))
   (rule "cut" (inst "cutFormula=leq(f_i0, f_i1)<<origin(\"User_Interaction @ node 42 (cut)\",\"[]\")>>") (userinteraction))
   (branch "CUT: f_i0 <= f_i1 TRUE"
      (rule "int_induction" (inst "b=(   leq(nv, sub(f_i1, f_i0))<<origin(\"User_Interaction @ node 999 (int_induction)\",\"[]\")>>
 -> geq(bprod{int v_uSub;}(f_i0,
                           add(f_i0, nv),
                           f_t1(v_uSub)),
        Z(0(#)))<<origin(\"User_Interaction @ node 999 (int_induction)\",\"[]\")>>)<<origin(\"User_Interaction @ node 999 (int_induction)\",\"[]\")>>") (inst "nv=nv") (userinteraction))
      (branch "Base Case"
         (rule "add_zero_right" (formula "3") (term "1,0,1"))
         (rule "bprod_lower_equals_upper" (formula "3") (term "0,1"))
         (rule "qeq_literals" (formula "3") (term "1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "closeTrue" (formula "3"))
      )
      (branch "Step Case"
         (rule "allRight" (formula "3") (inst "sk=nv_0") (userinteraction))
         (rule "impRight" (formula "3"))
         (rule "impRight" (formula "4"))
         (rule "andLeft" (formula "2"))
         (rule "impLeft" (formula "3") (userinteraction))
         (branch
            (rule "polySimp_elimSub" (formula "5") (term "1"))
            (rule "polySimp_elimSub" (formula "1") (term "1"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "polySimp_addComm0" (formula "5") (term "1"))
            (rule "polySimp_addComm0" (formula "1") (term "1"))
            (rule "inEqSimp_leqRight" (formula "5"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
            (rule "mul_literals" (formula "2") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
            (rule "polySimp_addComm0" (formula "2") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1"))
            (rule "mul_literals" (formula "1") (term "0,0,1"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
            (rule "andLeft" (formula "2"))
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
            (rule "polySimp_rightDist" (formula "2") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
            (rule "mul_literals" (formula "2") (term "0,0,1,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "1,1,0"))
            (rule "times_zero_1" (formula "2") (term "1,0"))
            (rule "add_zero_right" (formula "2") (term "0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "1,1,0"))
            (rule "times_zero_1" (formula "2") (term "1,0"))
            (rule "add_zero_right" (formula "2") (term "0"))
            (rule "leq_literals" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
         (branch
            (rule "bprod_induction_upper" (formula "6") (term "0") (userinteraction))
            (rule "polySimp_elimSub" (formula "6") (term "1,0,0"))
            (rule "mul_literals" (formula "6") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "6") (term "0,1,1,0"))
            (rule "mul_literals" (formula "6") (term "1,0,1,1,0"))
            (rule "polySimp_elimSub" (formula "1") (term "1"))
            (rule "polySimp_addComm0" (formula "6") (term "1,1,0,1,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "polySimp_addComm0" (formula "6") (term "1,0,1,0,0"))
            (rule "polySimp_addComm0" (formula "6") (term "1,0,0,1,1,0"))
            (rule "polySimp_addComm0" (formula "1") (term "1"))
            (rule "polySimp_addAssoc" (formula "6") (term "1,0,1,0"))
            (rule "polySimp_addComm0" (formula "6") (term "0,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "6") (term "0,1,0,0"))
            (rule "polySimp_addComm1" (formula "6") (term "1,0,0"))
            (rule "polySimp_addLiterals" (formula "6") (term "0,1,0,0"))
            (rule "add_zero_right" (formula "6") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,1,0"))
            (rule "polySimp_addComm1" (formula "6") (term "0,1,1,0"))
            (rule "polySimp_addLiterals" (formula "6") (term "0,0,1,1,0"))
            (rule "add_zero_right" (formula "6") (term "0,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_geqRight" (formula "6"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,0,1,1,0"))
            (rule "mul_literals" (formula "1") (term "0,0,1,0,0,0,1,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,1,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0,1,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,1,1,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,0,1,1,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,0,0,1,1,0"))
            (rule "polySimp_pullOutFactor2" (formula "1") (term "0,0,0,1,1,0"))
            (rule "add_literals" (formula "1") (term "1,0,0,0,1,1,0"))
            (rule "times_zero_1" (formula "1") (term "0,0,0,1,1,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
            (rule "mul_literals" (formula "2") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
            (rule "polySimp_addComm0" (formula "2") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
            (rule "inEqSimp_invertInEq0" (formula "1") (term "0,1,1,0"))
            (rule "times_zero_2" (formula "1") (term "1,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,0,1,1,0"))
            (rule "replace_known_left" (formula "1") (term "0,1,1,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "divide_inEq1" (formula "1") (inst "divY=f_t1(add(f_i0, nv_0))") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "leq_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_imp2or" (formula "7") (term "0"))
            (rule "nnf_notAnd" (formula "7") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
            (rule "allLeft" (formula "7") (inst "t=add(f_i0, nv_0)"))
            (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "7") (term "0,0,1,0"))
            (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0,0"))
            (rule "add_literals" (formula "7") (term "1,1,0,0,0,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "7") (term "0,1,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "7") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "0,0,0"))
            (rule "inEqSimp_contradInEq0" (formula "7") (term "1,0") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "0,1,0,0,1,0"))
            (rule "mul_literals" (formula "7") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0,0,0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
            (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0"))
            (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1,0"))
            (rule "polySimp_pullOutFactor2b" (formula "7") (term "0,0,1,0"))
            (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,1,0"))
            (rule "leq_literals" (formula "7") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "inEqSimp_contradInEq0" (formula "7") (term "1") (ifseqformula "1"))
            (rule "qeq_literals" (formula "7") (term "0,1"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "7"))
            (rule "qeq_literals" (formula "4") (term "0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "closeFalse" (formula "4"))
         )
      )
      (branch "Use Case"
         (rule "allLeftHide" (formula "1") (inst "t=sub(f_i1, f_i0)") (userinteraction))
         (rule "polySimp_elimSub" (formula "1") (term "1,0,1"))
         (rule "polySimp_elimSub" (formula "1") (term "0,0"))
         (rule "polySimp_elimSub" (formula "1") (term "1,1,0,1,1"))
         (rule "polySimp_elimSub" (formula "1") (term "0,0,1"))
         (rule "polySimp_addComm0" (formula "1") (term "1,0,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "1,1,0,1,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "1,0,1,1"))
         (rule "polySimp_pullOutFactor1" (formula "1") (term "0,1,0,1,1"))
         (rule "add_literals" (formula "1") (term "1,0,1,0,1,1"))
         (rule "times_zero_1" (formula "1") (term "0,1,0,1,1"))
         (rule "add_zero_left" (formula "1") (term "1,0,1,1"))
         (rule "replace_known_right" (formula "1") (term "1,1") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_commuteLeq" (formula "2"))
         (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1"))
         (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,1"))
         (rule "add_literals" (formula "1") (term "1,0,0,1"))
         (rule "times_zero_1" (formula "1") (term "0,0,1"))
         (rule "qeq_literals" (formula "1") (term "0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "inEqSimp_geqRight" (formula "3"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
         (rule "andLeft" (formula "1"))
         (rule "inEqSimp_homoInEq1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "leq_literals" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "CUT: f_i0 <= f_i1 FALSE"
      (rule "bprod_empty" (formula "3") (term "0") (userinteraction))
      (branch "Precondition"
         (rule "inEqSimp_leqRight" (formula "2"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_leqRight" (formula "3"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
         (rule "andLeft" (formula "1"))
         (rule "inEqSimp_homoInEq1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "leq_literals" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Empty Sum"
         (rule "qeq_literals" (formula "3"))
         (rule "closeTrue" (formula "3"))
      )
   )
)
)
}
