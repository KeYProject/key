\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Sep 05 18:11:46 CEST 2023
[Choice]DefaultChoices=JavaCard-JavaCard\\:on, Strings-Strings\\:on, assertions-assertions\\:on, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:showSatisfiability, moreSeqRules-moreSeqRules\\:on, optimisedSelectRules-optimisedSelectRules\\:on, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[Labels]UseOriginLabels=true
[SMTSettings]SelectedTaclets=
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]maxGenericSorts=2
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[Strategy]ActiveStrategy=JavaCardDLStrategy
[Strategy]MaximumNumberOfAutomaticApplications=500
[Strategy]Timeout=-1
"
}

\proofObligation "#Proof Obligation Settings
#Tue Sep 05 18:11:46 CEST 2023
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
name=seqDef_split
";

\proof {
(keyLog "0" (keyUser "arne" ) (keyVersion "6c808a3515ac39349724327a9e38578fbb2121d9"))
(keyLog "1" (keyUser "arne" ) (keyVersion "6c808a3515ac39349724327a9e38578fbb2121d9"))

(autoModeTime "0")

(branch "dummy ID"
(rule "defOfSeqConcat" (formula "1") (term "1,1") (newnames "v_uSub,f_from,f_to,f_t,f_idx,v_uSub1") (inst "uSub=uSub") (userinteraction))
(rule "equalityToSeqGetAndSeqLenRight" (formula "1") (inst "iv=iv") (userinteraction))
(rule "andRight" (formula "1") (userinteraction))
(branch "Case 1"
   (rule "lenOfSeqDef" (formula "1") (term "0") (userinteraction))
   (rule "cut" (inst "cutFormula=leq(f_from, f_idx) & lt(f_idx, f_to)") (userinteraction))
   (branch "CUT: f_from <= f_idx & f_idx < f_to TRUE"
      (rule "replace_known_left" (formula "2") (term "0,0,1") (ifseqformula "1") (userinteraction))
       (builtin "One Step Simplification" (formula "2"))
      (rule "andLeft" (formula "1") (userinteraction))
      (rule "cut_direct" (formula "3") (term "0,0") (userinteraction))
      (branch "CUT: f_from < f_to TRUE"
          (builtin "One Step Simplification" (formula "4"))
         (rule "lenOfSeqDef" (formula "4") (term "1") (userinteraction))
         (rule "lenOfSeqDef" (formula "4") (term "0,1,0,1") (userinteraction))
         (rule "lenOfSeqDef" (formula "4") (term "1,1,0,1") (userinteraction))
         (rule "lenOfSeqDef" (formula "4") (term "0,0,1,1") (userinteraction))
         (rule "lenOfSeqDef" (formula "4") (term "1,0,1,1") (userinteraction))
         (rule "eqSymm" (formula "4"))
         (rule "replace_known_left" (formula "4") (term "0,1,0,1,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "3")))
         (rule "polySimp_elimSub" (formula "4") (term "1,0"))
         (rule "times_zero_2" (formula "4") (term "1,1,0"))
         (rule "add_zero_right" (formula "4") (term "1,0"))
         (rule "polySimp_elimSub" (formula "4") (term "1,0,1,0,0"))
         (rule "polySimp_elimSub" (formula "4") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "4") (term "1"))
         (rule "polySimp_elimSub" (formula "4") (term "1,1,0"))
         (rule "polySimp_elimSub" (formula "4") (term "1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0"))
         (rule "add_zero_right" (formula "4") (term "0,0,0"))
         (rule "polySimp_addComm0" (formula "4") (term "1"))
         (rule "polySimp_addComm0" (formula "4") (term "1,1,0"))
         (rule "polySimp_addComm0" (formula "4") (term "1,0,1,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "polySimp_addComm1" (formula "4") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "2"))
         (rule "polySimp_addComm0" (formula "4") (term "1,1,1,0,0,0"))
         (rule "polySimp_addComm0" (formula "4") (term "1,0,1,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "4") (term "0,0,0,1,1,0,0,0"))
         (rule "polySimp_addComm0" (formula "4") (term "1,0"))
         (rule "polySimp_addComm0" (formula "4") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "0,1,0,0,0"))
         (rule "polySimp_mulAssoc" (formula "4") (term "0,0,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "0,0,0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "4") (term "0,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
         (rule "ifthenelse_split" (formula "4") (term "1,1,0"))
         (branch "f_idx >= 1 + f_from TRUE"
            (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "polySimp_addComm1" (formula "5") (term "1,0"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "5") (term "0,0,1,0"))
            (rule "polySimp_pullOutFactor2b" (formula "5") (term "0,1,0"))
            (rule "add_literals" (formula "5") (term "1,1,0,1,0"))
            (rule "times_zero_1" (formula "5") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "5") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "orRight" (formula "5"))
            (rule "inEqSimp_geqRight" (formula "5"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0,0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
            (rule "polySimp_elimOne" (formula "1") (term "1"))
            (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
            (rule "andLeft" (formula "3"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
            (rule "add_literals" (formula "3") (term "1,1,0"))
            (rule "times_zero_1" (formula "3") (term "1,0"))
            (rule "add_zero_right" (formula "3") (term "0"))
            (rule "leq_literals" (formula "3"))
            (rule "closeFalse" (formula "3"))
         )
         (branch "f_idx >= 1 + f_from FALSE"
            (rule "add_zero_right" (formula "5") (term "1,0"))
            (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "inEqSimp_geqRight" (formula "4"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "inEqSimp_homoInEq1" (formula "5") (term "0,0"))
            (rule "times_zero_2" (formula "5") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "5") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
            (rule "polySimp_elimOne" (formula "1") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "5") (term "0,0,0"))
            (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "polySimp_homoEq" (formula "5"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "5") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "5") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "5") (term "0"))
            (rule "polySimp_addComm1" (formula "5") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
            (rule "add_literals" (formula "5") (term "1,1,0"))
            (rule "times_zero_1" (formula "5") (term "1,0"))
            (rule "add_zero_right" (formula "5") (term "0"))
            (rule "polySimp_sepPosMonomial" (formula "5"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1"))
            (rule "polySimp_elimOne" (formula "5") (term "1"))
            (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "5"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_homoInEq1" (formula "1"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "leq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "CUT: f_from < f_to FALSE"
         (rule "inEqSimp_ltRight" (formula "3"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "2"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
         (rule "polySimp_rightDist" (formula "3") (term "0,0"))
         (rule "mul_literals" (formula "3") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "2"))
         (rule "andLeft" (formula "3"))
         (rule "inEqSimp_homoInEq1" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0"))
         (rule "polySimp_addComm0" (formula "3") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "1,1,0"))
         (rule "times_zero_1" (formula "3") (term "1,0"))
         (rule "add_literals" (formula "3") (term "0"))
         (rule "leq_literals" (formula "3"))
         (rule "closeFalse" (formula "3"))
      )
   )
   (branch "CUT: f_from <= f_idx & f_idx < f_to FALSE"
      (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "1") (userinteraction))
       (builtin "One Step Simplification" (formula "2"))
      (rule "lenOfSeqDef" (formula "2") (term "1") (userinteraction))
       (builtin "One Step Simplification" (formula "2"))
      (rule "closeTrue" (formula "2") (userinteraction))
   )
)
(branch "Case 2"
   (rule "allRight" (formula "1") (inst "sk=iv_4") (userinteraction))
   (rule "impRight" (formula "1") (userinteraction))
   (rule "andLeft" (formula "1") (userinteraction))
   (rule "lenOfSeqDef" (formula "2") (term "1") (userinteraction))
   (rule "cut" (inst "cutFormula=leq(f_from, f_idx) & lt(f_idx, f_to)") (userinteraction))
   (branch "CUT: f_from <= f_idx & f_idx < f_to TRUE"
      (rule "replace_known_left" (formula "4") (term "0,0,1") (ifseqformula "1") (userinteraction))
       (builtin "One Step Simplification" (formula "4"))
      (rule "andLeft" (formula "1") (userinteraction))
      (rule "cut_direct" (formula "4") (term "0,1") (userinteraction))
      (branch "CUT: f_from < f_to TRUE"
          (builtin "One Step Simplification" (formula "5"))
         (rule "getOfSeqDef" (formula "6") (term "1") (userinteraction))
         (rule "getOfSeqDef" (formula "6") (term "0") (userinteraction))
         (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "3") (userinteraction))
         (rule "replace_known_left" (formula "6") (term "0,0,1") (ifseqformula "3") (userinteraction))
          (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")))
         (rule "lenOfSeqDef" (formula "6") (term "0,0,1,0,1") (userinteraction))
         (rule "lenOfSeqDef" (formula "6") (term "1,0,1,0,1") (userinteraction))
         (rule "replace_known_left" (formula "6") (term "0,1,0,1,0,1") (ifseqformula "2") (userinteraction))
          (builtin "One Step Simplification" (formula "6"))
         (rule "apply_subst" (formula "6") (term "2,0,2,1,1"))
         (rule "add_zero_right" (formula "6") (term "0,0,1,1"))
         (rule "add_zero_right" (formula "6") (term "0,1,2,1,1"))
         (rule "add_zero_right" (formula "6") (term "1,1,1,1"))
         (rule "eqSymm" (formula "6"))
         (rule "polySimp_elimSub" (formula "5") (term "1"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,0,1,0,0"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,1,0,0"))
         (rule "polySimp_elimSub" (formula "6") (term "1,2,1,0"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,0"))
         (rule "times_zero_2" (formula "6") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "6") (term "1,0,0"))
         (rule "polySimp_addComm0" (formula "6") (term "0,1"))
         (rule "polySimp_addComm0" (formula "5") (term "1"))
         (rule "polySimp_addComm0" (formula "6") (term "1,0,0"))
         (rule "polySimp_addComm0" (formula "6") (term "0,1,0,0"))
         (rule "polySimp_addComm0" (formula "6") (term "1,1,1,0,0"))
         (rule "lenOfSeqDef" (formula "6") (term "1,0,1,0"))
         (rule "polySimp_elimSub" (formula "6") (term "1,1,0,1,0"))
         (rule "polySimp_addComm0" (formula "6") (term "1,1,0,1,0"))
         (rule "getOfSeqDef" (formula "6") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "3")))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,1,1,0"))
         (rule "polySimp_addComm0" (formula "6") (term "0,1,1,1,0"))
         (rule "polySimp_addComm0" (formula "6") (term "1,0,1,1,0"))
         (rule "getOfSeqDef" (formula "6") (term "2,1,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_elimSub" (formula "6") (term "1,1,0,2,1,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0,1,2,1,0"))
         (rule "polySimp_addComm0" (formula "6") (term "1,1,0,2,1,0"))
         (rule "polySimp_addComm0" (formula "6") (term "0,0,1,2,1,0"))
         (rule "lenOfSeqDef" (formula "6") (term "0,1,0,1,0,2,1,0"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,1,0,1,0,2,1,0"))
         (rule "polySimp_addComm0" (formula "6") (term "1,0,1,0,1,0,2,1,0"))
         (rule "lenOfSeqDef" (formula "6") (term "0,1,1,0,0,2,1,0"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,1,1,0,0,2,1,0"))
         (rule "polySimp_addComm0" (formula "6") (term "1,0,1,1,0,0,2,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "5"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
         (rule "polySimp_mulAssoc" (formula "5") (term "0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "0,1,0,0"))
         (rule "lenOfSeqDef" (formula "6") (term "0,1,0,1,2,1,0"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,1,0,1,2,1,0"))
         (rule "polySimp_addComm0" (formula "6") (term "1,0,1,0,1,2,1,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,1,0,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,1,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,1,1,0"))
         (rule "polySimp_mulAssoc" (formula "6") (term "0,1,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "0,0,1,0,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,1,0,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,1,0,0,0,1,1,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,0,1,0,2,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,1,0,1,0,2,1,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,0,1,0,2,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "3"))
         (rule "inEqSimp_commuteLeq" (formula "1"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,0,0,2,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,1,1,0,0,2,1,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,1,0,0,2,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,0,1,2,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,1,0,1,2,1,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,0,1,2,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "0,1,0,0,0,0"))
         (rule "polySimp_mulAssoc" (formula "6") (term "0,0,1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "0,0,0,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,1,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,2,1,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,2,1,0"))
         (rule "polySimp_mulAssoc" (formula "6") (term "0,1,0,0,1,0,2,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "0,0,1,0,0,1,0,2,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,1,0,0,1,0,2,1,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,1,0,0,1,0,2,1,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,2,1,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,1,0,2,1,0"))
         (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0,2,1,0"))
         (rule "times_zero_2" (formula "6") (term "1,0,0,0,2,1,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,2,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "1"))
         (rule "polySimp_rightDist" (formula "5") (term "1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1"))
         (rule "polySimp_rightDist" (formula "5") (term "0,1"))
         (rule "mul_literals" (formula "5") (term "0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "6") (term "0,1,0,1,1,0"))
         (rule "mul_literals" (formula "6") (term "0,0,1,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,0,1,2,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,0,1,2,1,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,0,1,2,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "1,0,2,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,1,0,2,1,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,1,0,2,1,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "6") (term "0,0,2,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,2,1,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0,2,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,0,2,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,0,2,1,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,0,2,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,0,0,2,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,0,0,2,1,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0,0,0,2,1,0"))
         (rule "ifthenelse_split" (formula "6") (term "0,0,0,2,1,0"))
         (branch "f_idx >= 1 + f_from TRUE"
            (rule "replace_known_left" (formula "7") (term "0,0,0,1,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,1,2,1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,1,2,1,0"))
            (rule "polySimp_mulAssoc" (formula "7") (term "0,1,0,1,2,1,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,0,1,2,1,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0,1,2,1,0"))
            (rule "polySimp_elimOne" (formula "7") (term "0,1,0,1,2,1,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0,1,2,1,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,2,1,0"))
            (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1,2,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,2,1,0"))
            (rule "add_literals" (formula "7") (term "1,1,0,0,1,2,1,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0,1,2,1,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,1,2,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,2,1,0"))
            (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0,2,1,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,1,0,2,1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,1,0,2,1,0"))
            (rule "polySimp_mulAssoc" (formula "7") (term "0,1,0,1,0,2,1,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,0,1,0,2,1,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0,1,0,2,1,0"))
            (rule "polySimp_elimOne" (formula "7") (term "0,1,0,1,0,2,1,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0,1,0,2,1,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0,0,1,0,2,1,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,1,0,2,1,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0,0,0,0,1,0,2,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0,1,0,2,1,0"))
            (rule "add_literals" (formula "7") (term "1,1,0,0,0,1,0,2,1,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0,0,1,0,2,1,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,0,1,0,2,1,0"))
            (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0"))
            (rule "polySimp_mulAssoc" (formula "7") (term "0,1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "7") (term "0,1,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,1,0"))
            (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
            (rule "polySimp_mulAssoc" (formula "7") (term "0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "0,1,0,0,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0,0,0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "7") (term "1,1,0,0,0,0,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,2,1,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,2,1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,1,0,2,1,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,2,1,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,2,1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "0,1,1,0,2,1,0"))
            (rule "mul_literals" (formula "7") (term "0,0,1,1,0,2,1,0"))
            (rule "replace_known_left" (formula "7") (term "1,0,2,1,0") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,1,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "0,1,0,1,0"))
            (rule "mul_literals" (formula "7") (term "0,0,1,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "0,1,0,0"))
            (rule "mul_literals" (formula "7") (term "0,0,1,0,0"))
            (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "ifthenelse_split" (formula "7") (term "0"))
            (branch "iv_4 <= -1 + f_from * -1 + f_idx TRUE"
                (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")))
               (rule "closeTrue" (formula "8"))
            )
            (branch "iv_4 <= -1 + f_from * -1 + f_idx FALSE"
                (builtin "One Step Simplification" (formula "8"))
               (rule "orRight" (formula "8"))
               (rule "inEqSimp_leqRight" (formula "7"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_geqRight" (formula "8"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1"))
               (rule "mul_literals" (formula "1") (term "0,0,1"))
               (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
               (rule "andLeft" (formula "2"))
               (rule "inEqSimp_homoInEq1" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0"))
               (rule "polySimp_rightDist" (formula "2") (term "0,1,0"))
               (rule "mul_literals" (formula "2") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
               (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0"))
               (rule "polySimp_addComm1" (formula "2") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "1,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,0"))
               (rule "add_zero_right" (formula "2") (term "0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0"))
               (rule "polySimp_addComm0" (formula "2") (term "0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "1,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,0"))
               (rule "add_zero_right" (formula "2") (term "0"))
               (rule "leq_literals" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
         )
         (branch "f_idx >= 1 + f_from FALSE"
            (rule "replace_known_right" (formula "7") (term "0,0,1,0,2,1,0") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")))
            (rule "times_zero_2" (formula "7") (term "1,0,1,2,1,0"))
            (rule "add_zero_right" (formula "7") (term "0,1,2,1,0"))
            (rule "inEqSimp_geqRight" (formula "6"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,2,1,0"))
            (rule "replace_known_left" (formula "7") (term "0,0,2,1,0") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "inEqSimp_homoInEq1" (formula "7") (term "0,2,1,0"))
            (rule "times_zero_2" (formula "7") (term "1,0,0,2,1,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,2,1,0"))
            (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
            (rule "times_zero_2" (formula "7") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,1,0"))
            (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
            (rule "times_zero_2" (formula "7") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
            (rule "polySimp_elimOne" (formula "1") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,2,1,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,2,1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,2,1,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,2,1,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,0,2,1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "0,1,0,2,1,0"))
            (rule "mul_literals" (formula "7") (term "0,0,1,0,2,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,1,0"))
            (rule "mul_literals" (formula "7") (term "1,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "0,1,0,0"))
            (rule "mul_literals" (formula "7") (term "0,0,1,0,0"))
            (rule "inEqSimp_contradInEq1" (formula "7") (term "0,1,0") (ifseqformula "4"))
            (rule "qeq_literals" (formula "7") (term "0,0,1,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "1"))
            (rule "applyEqRigid" (formula "8") (term "0,1,0,1,0,0") (ifseqformula "2"))
            (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "applyEq" (formula "8") (term "0,1,0,1,0,0") (ifseqformula "2"))
            (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "closeTrue" (formula "8"))
         )
      )
      (branch "CUT: f_from < f_to FALSE"
          (builtin "One Step Simplification" (formula "4"))
         (rule "inEqSimp_ltToLeq" (formula "4"))
         (rule "times_zero_1" (formula "4") (term "1,0,0"))
         (rule "add_zero_right" (formula "4") (term "0,0"))
         (rule "inEqSimp_commuteLeq" (formula "3"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4"))
         (rule "mul_literals" (formula "4") (term "1"))
         (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "4"))
         (rule "qeq_literals" (formula "3") (term "0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "closeFalse" (formula "3"))
      )
   )
   (branch "CUT: f_from <= f_idx & f_idx < f_to FALSE"
      (rule "replace_known_right" (formula "4") (term "0,0,1") (ifseqformula "3") (userinteraction))
       (builtin "One Step Simplification" (formula "4"))
      (rule "closeTrue" (formula "4") (userinteraction))
   )
)
)
}
