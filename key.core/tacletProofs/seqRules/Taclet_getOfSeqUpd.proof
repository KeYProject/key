\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:off",
        "Strings" : "Strings:on",
        "assertions" : "assertions:safe",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:treatAsAxiom",
        "moreSeqRules" : "moreSeqRules:off",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:ban",
        "sequences" : "sequences:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 10000,
        "Timeout" : -1,
        "options" : { 
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_SCOPE_INV_TACLET",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_NONE",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_OFF",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_DEFAULT",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\proofObligation "#Proof Obligation Settings
#Wed Jan 10 23:17:36 CET 2024
name=getOfSeqUpd
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "mattias" ) (keyVersion "4a2b5ce3719644caff60bd1214c21ec1cdc945ee"))

(autoModeTime "574")

(branch "dummy ID"
(rule "ifthenelse_split" (formula "1") (term "1") (newnames "f_seq,f_idx,f_value,f_jdx") (userinteraction))
(branch "0 <= f_jdx & f_jdx < f_seq.length & f_idx = f_jdx TRUE"
   (rule "defOfSeqUpd" (formula "2") (term "0,0") (inst "uSub=uSub") (userinteraction))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "3"))
   (rule "getOfSeqDef" (formula "4") (term "0"))
   (rule "add_zero_right" (formula "4") (term "1,2,0,1,0"))
   (rule "add_zero_right" (formula "4") (term "0,0,0,1,0"))
   (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "3")))
   (rule "orRight" (formula "4"))
   (rule "polySimp_elimSub" (formula "4") (term "1"))
   (rule "times_zero_2" (formula "4") (term "1,1"))
   (rule "add_zero_right" (formula "4") (term "1"))
   (rule "close" (formula "4") (ifseqformula "2"))
)
(branch "0 <= f_jdx & f_jdx < f_seq.length & f_idx = f_jdx FALSE"
   (rule "andRight" (formula "1") (userinteraction))
   (branch "Case 1"
      (rule "seqSelfDefinition" (formula "2") (term "0,1") (inst "s=s") (inst "u=u") (userinteraction))
      (rule "allLeftHide" (formula "1") (inst "t=f_seq") (userinteraction))
      (rule "applyEqRigid" (formula "3") (term "0,1") (ifseqformula "1") (userinteraction))
      (rule "defOfSeqUpd" (formula "3") (term "0,0") (inst "uSub=uSub") (userinteraction))
      (rule "getOfSeqDef" (formula "3") (term "0") (userinteraction))
      (rule "getOfSeqDef" (formula "3") (term "1") (userinteraction))
      (rule "sub_zero_2" (formula "3") (term "1,1,0,1") (userinteraction))
      (rule "sub_zero_2" (formula "3") (term "1,1,0,0") (userinteraction))
      (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "2") (userinteraction))
      (rule "replace_known_right" (formula "3") (term "0,1") (ifseqformula "2") (userinteraction))
       (builtin "One Step Simplification" (formula "3"))
      (rule "closeTrue" (formula "3"))
   )
   (branch "Case 2"
      (rule "defOfSeqUpd" (formula "2") (term "0,0") (inst "uSub=uSub") (userinteraction))
      (rule "getOfSeqDef" (formula "2") (term "0") (userinteraction))
      (rule "add_zero_right" (formula "2") (term "0,0,0,1,0") (userinteraction))
      (rule "eqSymm" (formula "2") (term "0,0,1,0") (userinteraction))
      (rule "replace_known_right" (formula "2") (term "0,0,1,0") (ifseqformula "1") (userinteraction))
       (builtin "One Step Simplification" (formula "2") (userinteraction))
      (rule "add_zero_right" (formula "2") (term "1,0,1,0") (userinteraction))
      (rule "ifthenelse_split" (formula "2") (term "0") (userinteraction))
      (branch "0 <= f_jdx & f_jdx < f_seq.length - 0 TRUE"
         (rule "andLeft" (formula "1"))
         (rule "eqSymm" (formula "3"))
         (rule "polySimp_elimSub" (formula "2") (term "1"))
         (rule "times_zero_2" (formula "2") (term "1,1"))
         (rule "add_zero_right" (formula "2") (term "1"))
         (rule "castedGetAny" (formula "4") (term "0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "closeTrue" (formula "4"))
      )
      (branch "0 <= f_jdx & f_jdx < f_seq.length - 0 FALSE"
         (rule "sub_zero_2" (formula "2") (term "1,1") (userinteraction))
         (rule "seqSelfDefinition" (formula "3") (term "0,1") (inst "s=s") (inst "u=u") (userinteraction))
         (rule "allLeftHide" (formula "1") (inst "t=f_seq") (userinteraction))
         (rule "applyEqRigid" (formula "4") (term "0,1") (ifseqformula "1") (userinteraction))
         (rule "eqSymm" (formula "4"))
         (rule "eqSymm" (formula "1"))
         (rule "eqSymm" (formula "2"))
         (rule "getOfSeqDef" (formula "4") (term "0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "add_zero_right" (formula "4") (term "1,0,0,1"))
         (rule "orRight" (formula "4"))
         (rule "notRight" (formula "4"))
         (rule "andLeft" (formula "1"))
         (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_elimSub" (formula "2") (term "1"))
         (rule "times_zero_2" (formula "2") (term "1,1"))
         (rule "add_zero_right" (formula "2") (term "1"))
         (rule "close" (formula "5") (ifseqformula "2"))
      )
   )
)
)
}
