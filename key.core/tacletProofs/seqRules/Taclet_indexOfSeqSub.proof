\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Dec 16 18:25:51 MET 2013
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]RETREAT_MODE_OPTIONS_KEY=RETREAT_MODE_NONE
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=500
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=Strings-Strings\\:on , reach-reach\\:on , JavaCard-JavaCard\\:on , assertions-assertions\\:on , bigint-bigint\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , initialisation-initialisation\\:disableStaticInitialisation , modelFields-modelFields\\:showSatisfiability , sequences-sequences\\:on , integerSimplificationRules-integerSimplificationRules\\:full , runtimeExceptions-runtimeExceptions\\:ban , optimisedSelectRules-optimisedSelectRules\\:on
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Mon Dec 16 18:25:51 MET 2013
name=indexOfSeqSub
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "pschmitt" ) (keyVersion "cd4d244ec17586d37f1e609c330df9c3940650fc"))

(autoModeTime "1168")

(branch "dummy ID"
(rule "notRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(builtin "One Step Simplification" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "exLeft" (formula "4") (inst "sk=v_nx_0") (userinteraction))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "seqIndexOf" (formula "7") (term "0") (inst "m=m") (inst "n=n") (userinteraction))
(rule "impLeft" (formula "1") (userinteraction))
(branch "Case 1"
   (rule "exRightHide" (formula "7") (inst "t=sub(seqIndexOf(f_s, f_x), f_from)") (userinteraction))
   (rule "cut_direct" (formula "7") (term "0,0") (userinteraction))
   (branch "CUT: 0 <= seqIndexOf(f_s, f_x) - f_from TRUE"
      (builtin "One Step Simplification" (formula "8"))
      (rule "lenOfSeqSub" (formula "8") (term "1,0") (userinteraction))
      (rule "cut_direct" (formula "8") (term "0,1,0") (userinteraction))
      (branch "CUT: f_from < f_to TRUE"
         (builtin "One Step Simplification" (formula "9"))
         (rule "cut_direct" (formula "9") (term "0") (userinteraction))
         (branch "CUT: seqIndexOf(f_s, f_x) - f_from < f_to - f_from TRUE"
            (builtin "One Step Simplification" (formula "10"))
            (rule "getOfSeqSub" (formula "10") (term "0") (userinteraction))
            (rule "replace_known_left" (formula "10") (term "0,0,0") (ifseqformula "3") (userinteraction))
            (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "1")))
            (rule "sub" (formula "10") (term "0,1,0") (userinteraction))
            (rule "switch_brackets" (formula "10") (term "1,0") (userinteraction))
            (rule "add_sub_elim_left" (formula "10") (term "1,1,0") (userinteraction))
            (rule "add_zero_right" (formula "10") (term "1,0") (userinteraction))
            (rule "seqIndexOf" (formula "10") (term "1,0") (inst "m=m") (inst "n=n") (userinteraction))
            (rule "impLeft" (formula "1") (userinteraction))
            (branch "Case 1"
               (rule "eqSymm" (formula "12"))
               (rule "polySimp_elimSub" (formula "1") (term "0"))
               (rule "polySimp_elimSub" (formula "1") (term "1"))
               (rule "polySimp_elimSub" (formula "3") (term "1"))
               (rule "polySimp_elimSub" (formula "12") (term "0"))
               (rule "eqSymm" (formula "12"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "8"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "1"))
               (rule "polySimp_addComm0" (formula "3") (term "1"))
               (rule "polySimp_addComm0" (formula "12") (term "1"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "polySimp_addComm1" (formula "8") (term "0"))
               (rule "polySimp_addComm0" (formula "1") (term "1,0"))
               (rule "polySimp_addComm0" (formula "1") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "inEqSimp_commuteLeq" (formula "4"))
               (rule "inEqSimp_commuteLeq" (formula "7"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "3"))
               (rule "times_zero_2" (formula "3") (term "1,0"))
               (rule "add_zero_right" (formula "3") (term "0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1"))
               (rule "polySimp_rightDist" (formula "4") (term "1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
               (rule "mul_literals" (formula "4") (term "0,1"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0"))
               (rule "polySimp_elimOne" (formula "7") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1"))
               (rule "polySimp_elimOne" (formula "2") (term "1"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0"))
               (rule "polySimp_addComm0" (formula "2") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "mul_literals" (formula "2") (term "0,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "nnf_ex2all" (formula "8"))
               (rule "nnf_notAnd" (formula "1") (term "0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
               (rule "allLeft" (formula "1") (inst "t=v_nx_0"))
               (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "9"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "8"))
               (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_literals" (formula "1") (term "0,0,1"))
               (rule "leq_literals" (formula "1") (term "0,1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
               (rule "qeq_literals" (formula "7") (term "0"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "closeFalse" (formula "7"))
            )
            (branch "Case 2"
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "close" (formula "13") (ifseqformula "2"))
            )
         )
         (branch "CUT: seqIndexOf(f_s, f_x) - f_from < f_to - f_from FALSE"
            (builtin "One Step Simplification" (formula "10"))
            (rule "false_right" (formula "10"))
            (rule "eqSymm" (formula "10"))
            (rule "polySimp_elimSub" (formula "2") (term "1"))
            (rule "polySimp_elimSub" (formula "9") (term "1"))
            (rule "polySimp_elimSub" (formula "9") (term "0"))
            (rule "polySimp_elimSub" (formula "10") (term "0"))
            (rule "eqSymm" (formula "10"))
            (rule "inEqSimp_ltRight" (formula "9"))
            (rule "inEqSimp_ltToLeq" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "5"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
            (rule "polySimp_addComm0" (formula "3") (term "1"))
            (rule "polySimp_addComm0" (formula "10") (term "1"))
            (rule "polySimp_addComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "1,0"))
            (rule "polySimp_addComm1" (formula "8") (term "0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "6"))
            (rule "inEqSimp_commuteLeq" (formula "7"))
            (rule "inEqSimp_commuteLeq" (formula "4"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0"))
            (rule "polySimp_mulAssoc" (formula "1") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "3"))
            (rule "times_zero_2" (formula "3") (term "1,0"))
            (rule "add_zero_right" (formula "3") (term "0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0"))
            (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "1,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5"))
            (rule "polySimp_mulComm0" (formula "5") (term "1"))
            (rule "polySimp_rightDist" (formula "5") (term "1"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
            (rule "mul_literals" (formula "5") (term "0,1"))
            (rule "polySimp_elimOne" (formula "5") (term "1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "8"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0"))
            (rule "polySimp_elimOne" (formula "8") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1"))
            (rule "polySimp_elimOne" (formula "3") (term "1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
            (rule "polySimp_elimOne" (formula "1") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "1"))
            (rule "andLeft" (formula "4"))
            (rule "inEqSimp_homoInEq1" (formula "4"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
            (rule "polySimp_rightDist" (formula "4") (term "1,0"))
            (rule "mul_literals" (formula "4") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "4") (term "0"))
            (rule "polySimp_addComm0" (formula "4") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
            (rule "add_literals" (formula "4") (term "1,1,0"))
            (rule "times_zero_1" (formula "4") (term "1,0"))
            (rule "add_zero_right" (formula "4") (term "0"))
            (rule "leq_literals" (formula "4"))
            (rule "closeFalse" (formula "4"))
         )
      )
      (branch "CUT: f_from < f_to FALSE"
         (builtin "One Step Simplification" (formula "9"))
         (rule "eqSymm" (formula "10"))
         (rule "polySimp_elimSub" (formula "1") (term "1"))
         (rule "polySimp_elimSub" (formula "9") (term "0,0"))
         (rule "polySimp_elimSub" (formula "9") (term "1,0,1"))
         (rule "polySimp_elimSub" (formula "10") (term "0"))
         (rule "eqSymm" (formula "10"))
         (rule "inEqSimp_ltRight" (formula "8"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,0"))
         (rule "polySimp_addComm0" (formula "2") (term "1"))
         (rule "polySimp_addComm0" (formula "9") (term "1,0,1"))
         (rule "polySimp_addComm0" (formula "10") (term "1"))
         (rule "polySimp_addComm0" (formula "1") (term "0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "polySimp_addComm0" (formula "9") (term "1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "5"))
         (rule "inEqSimp_commuteLeq" (formula "3"))
         (rule "inEqSimp_commuteLeq" (formula "6"))
         (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
         (rule "inEqSimp_homoInEq0" (formula "2"))
         (rule "times_zero_2" (formula "2") (term "1,0"))
         (rule "add_zero_right" (formula "2") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1"))
         (rule "polySimp_rightDist" (formula "4") (term "1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
         (rule "mul_literals" (formula "4") (term "0,1"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0"))
         (rule "polySimp_elimOne" (formula "7") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
         (rule "mul_literals" (formula "9") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1"))
         (rule "polySimp_elimOne" (formula "2") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "2"))
         (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
         (rule "polySimp_addComm0" (formula "8") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0"))
         (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "8") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "8") (term "0,0,0"))
         (rule "leq_literals" (formula "8") (term "0,0"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "false_right" (formula "8"))
         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
         (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0"))
         (rule "polySimp_addComm0" (formula "2") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
         (rule "andLeft" (formula "2"))
         (rule "inEqSimp_homoInEq1" (formula "2"))
         (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
         (rule "add_literals" (formula "2") (term "1,1,0"))
         (rule "times_zero_1" (formula "2") (term "1,0"))
         (rule "add_zero_right" (formula "2") (term "0"))
         (rule "leq_literals" (formula "2"))
         (rule "closeFalse" (formula "2"))
      )
   )
   (branch "CUT: 0 <= seqIndexOf(f_s, f_x) - f_from FALSE"
      (builtin "One Step Simplification" (formula "8"))
      (rule "false_right" (formula "8"))
      (rule "eqSymm" (formula "8"))
      (rule "polySimp_elimSub" (formula "7") (term "1"))
      (rule "polySimp_elimSub" (formula "8") (term "0"))
      (rule "eqSymm" (formula "8"))
      (rule "inEqSimp_leqRight" (formula "7"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "6"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
      (rule "polySimp_addComm0" (formula "8") (term "1"))
      (rule "polySimp_addComm0" (formula "1") (term "1,1,0"))
      (rule "polySimp_addComm1" (formula "6") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "5"))
      (rule "inEqSimp_commuteLeq" (formula "4"))
      (rule "inEqSimp_commuteLeq" (formula "2"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "mul_literals" (formula "3") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
      (rule "polySimp_elimOne" (formula "3") (term "1,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "6"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0"))
      (rule "polySimp_elimOne" (formula "6") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
      (rule "andLeft" (formula "2"))
      (rule "inEqSimp_homoInEq1" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
      (rule "polySimp_rightDist" (formula "2") (term "1,0"))
      (rule "mul_literals" (formula "2") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0"))
      (rule "polySimp_addComm0" (formula "2") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
      (rule "add_literals" (formula "2") (term "1,1,0"))
      (rule "times_zero_1" (formula "2") (term "1,0"))
      (rule "add_zero_right" (formula "2") (term "0"))
      (rule "leq_literals" (formula "2"))
      (rule "closeFalse" (formula "2"))
   )
)
(branch "Case 2"
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "lenOfSeqSub" (formula "2") (term "1") (userinteraction))
   (rule "cut_direct" (formula "2") (term "0,1") (userinteraction))
   (branch "CUT: f_from < f_to TRUE"
      (builtin "One Step Simplification" (formula "3"))
      (rule "instAll" (formula "12") (term "1") (ifseqformula "5") (userinteraction))
      (rule "impLeft" (formula "1") (userinteraction))
      (branch "Case 1"
         (rule "andRight" (formula "12") (userinteraction))
         (branch "Case 1"
            (rule "eqSymm" (formula "13"))
            (rule "polySimp_elimSub" (formula "12") (term "1"))
            (rule "polySimp_elimSub" (formula "3") (term "1"))
            (rule "polySimp_elimSub" (formula "13") (term "0"))
            (rule "eqSymm" (formula "13"))
            (rule "inEqSimp_leqRight" (formula "12"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "11"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "4"))
            (rule "polySimp_addComm0" (formula "13") (term "1"))
            (rule "polySimp_addComm0" (formula "1") (term "1,1,0"))
            (rule "polySimp_addComm1" (formula "11") (term "0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "polySimp_addComm0" (formula "4") (term "1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "2"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "9"))
            (rule "inEqSimp_commuteLeq" (formula "7"))
            (rule "inEqSimp_commuteLeq" (formula "10"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
            (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
            (rule "polySimp_mulAssoc" (formula "4") (term "0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "4") (term "0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0,1,0,0"))
            (rule "polySimp_elimOne" (formula "4") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1"))
            (rule "polySimp_rightDist" (formula "8") (term "1"))
            (rule "mul_literals" (formula "8") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
            (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "11"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0"))
            (rule "polySimp_elimOne" (formula "11") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4"))
            (rule "polySimp_mulComm0" (formula "4") (term "1"))
            (rule "polySimp_rightDist" (formula "4") (term "1"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
            (rule "polySimp_elimOne" (formula "4") (term "1,1"))
            (rule "polySimp_rightDist" (formula "4") (term "0,1"))
            (rule "mul_literals" (formula "4") (term "0,0,1"))
            (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
            (rule "andLeft" (formula "7"))
            (rule "inEqSimp_homoInEq1" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0"))
            (rule "mul_literals" (formula "7") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0"))
            (rule "polySimp_addComm0" (formula "7") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
            (rule "add_literals" (formula "7") (term "1,1,0"))
            (rule "times_zero_1" (formula "7") (term "1,0"))
            (rule "add_zero_right" (formula "7") (term "0"))
            (rule "leq_literals" (formula "7"))
            (rule "closeFalse" (formula "7"))
         )
         (branch "Case 2"
            (rule "seqIndexOf" (formula "13") (term "0,1") (inst "m=m") (inst "n=n") (userinteraction))
            (rule "impLeft" (formula "1") (userinteraction))
            (branch "Case 1"
               (rule "instEx" (formula "9") (term "1") (ifseqformula "12") (userinteraction))
               (rule "eqSymm" (formula "15"))
               (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "11"))
               (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "9")) (ifInst ""  (formula "10")))
               (rule "closeTrue" (formula "12"))
            )
            (branch "Case 2"
               (rule "andLeft" (formula "1") (userinteraction))
               (rule "andLeft" (formula "1") (userinteraction))
               (rule "andLeft" (formula "1") (userinteraction))
               (rule "allLeftHide" (formula "4") (inst "t=add(seqIndexOf(seqSub(f_s, f_from, f_to), f_x), f_from)") (userinteraction))
               (rule "eqSymm" (formula "17"))
               (rule "polySimp_elimSub" (formula "7") (term "1"))
               (rule "polySimp_elimSub" (formula "16") (term "0"))
               (rule "polySimp_elimSub" (formula "17") (term "0"))
               (rule "eqSymm" (formula "17"))
               (rule "inEqSimp_ltRight" (formula "16"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "12"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "15"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "8"))
               (rule "polySimp_addComm0" (formula "5") (term "1,0,0"))
               (rule "polySimp_addComm0" (formula "5") (term "1,0,0,1"))
               (rule "polySimp_addComm0" (formula "17") (term "1"))
               (rule "polySimp_addComm0" (formula "1") (term "1,0"))
               (rule "polySimp_addComm0" (formula "5") (term "1,0,1,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "14"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "inEqSimp_commuteLeq" (formula "13"))
               (rule "inEqSimp_commuteLeq" (formula "11"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "2"))
               (rule "polySimp_addComm0" (formula "8") (term "1,1,0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulAssoc" (formula "8") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "8") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0,1,0"))
               (rule "polySimp_addComm1" (formula "5") (term "0,0,1,0"))
               (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0"))
               (rule "times_zero_2" (formula "5") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "5") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12"))
               (rule "polySimp_mulComm0" (formula "12") (term "1"))
               (rule "polySimp_rightDist" (formula "12") (term "1"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
               (rule "mul_literals" (formula "12") (term "0,1"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1"))
               (rule "polySimp_rightDist" (formula "3") (term "1"))
               (rule "mul_literals" (formula "3") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0"))
               (rule "polySimp_elimOne" (formula "15") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0"))
               (rule "polySimp_elimOne" (formula "7") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "5") (term "1,1,0"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0"))
               (rule "polySimp_rightDist" (formula "5") (term "0,1,1,0"))
               (rule "mul_literals" (formula "5") (term "0,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8"))
               (rule "polySimp_mulComm0" (formula "8") (term "1"))
               (rule "polySimp_rightDist" (formula "8") (term "1"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1"))
               (rule "polySimp_rightDist" (formula "8") (term "0,1"))
               (rule "mul_literals" (formula "8") (term "0,0,1"))
               (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "17"))
               (rule "polySimp_addAssoc" (formula "1") (term "1"))
               (rule "replace_known_left" (formula "5") (term "1,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "inEqSimp_contradEq3" (formula "17") (ifseqformula "1"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
               (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
               (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0"))
               (rule "add_literals" (formula "17") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,0"))
               (rule "add_zero_right" (formula "17") (term "0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "17") (term "0,0"))
               (rule "add_literals" (formula "17") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,0"))
               (rule "add_zero_right" (formula "17") (term "0,0"))
               (rule "qeq_literals" (formula "17") (term "0"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "false_right" (formula "17"))
               (rule "getOfSeqSub" (formula "9") (term "0"))
               (rule "castDel" (formula "9") (term "2,0"))
               (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
               (rule "polySimp_addComm0" (formula "9") (term "1,1,0"))
               (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
               (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "6"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "0,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,0,1,0,0"))
               (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "8"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "replace_known_left" (formula "5") (term "0,1") (ifseqformula "9"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "notLeft" (formula "5"))
               (rule "inEqSimp_geqRight" (formula "16"))
               (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "getOfSeqSub" (formula "10") (term "0,0,1,0"))
               (rule "castDel" (formula "10") (term "2,0,0,1,0"))
               (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0,1,0"))
               (rule "polySimp_addComm0" (formula "10") (term "1,1,0,0,1,0"))
               (rule "polySimp_addComm0" (formula "10") (term "1,1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "0,1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "10") (term "0,0,1,1,0,0,0,1,0"))
               (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "8"))
               (rule "times_zero_1" (formula "6") (term "0,0"))
               (rule "add_zero_left" (formula "6") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1"))
               (rule "polySimp_rightDist" (formula "6") (term "1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
               (rule "mul_literals" (formula "6") (term "0,1"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1"))
               (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
               (rule "times_zero_1" (formula "6") (term "0,0"))
               (rule "add_zero_left" (formula "6") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "6"))
               (rule "polySimp_mulLiterals" (formula "6") (term "0"))
               (rule "polySimp_elimOne" (formula "6") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "14"))
               (rule "qeq_literals" (formula "6") (term "0"))
               (builtin "One Step Simplification" (formula "6"))
               (rule "closeFalse" (formula "6"))
            )
         )
      )
      (branch "Case 2"
         (rule "notLeft" (formula "1") (userinteraction))
         (rule "getOfSeqSub" (formula "12") (term "0") (userinteraction))
         (rule "cut_direct" (formula "12") (term "0,0") (userinteraction))
         (branch "CUT: 0 <= seqIndexOf(f_s, f_x) - f_from & seqIndexOf(f_s, f_x) - f_from < f_to - f_from TRUE"
            (builtin "One Step Simplification" (formula "13"))
            (rule "sub" (formula "13") (term "0,1,0") (userinteraction))
            (rule "polySimp_addComm1" (formula "13") (term "1,0") (userinteraction))
            (rule "switch_brackets" (formula "13") (term "1,0") (userinteraction))
            (rule "add_sub_elim_right" (formula "13") (term "1,1,0") (userinteraction))
            (rule "add_zero_right" (formula "13") (term "1,0") (userinteraction))
            (rule "seqIndexOf" (formula "13") (term "1,0") (inst "m=m") (inst "n=n") (userinteraction))
            (rule "impLeft" (formula "1") (userinteraction))
            (branch "Case 1"
               (rule "instEx" (formula "10") (term "1") (ifseqformula "13") (userinteraction))
               (rule "andLeft" (formula "1"))
               (rule "eqSymm" (formula "17"))
               (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "13"))
               (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "11")) (ifInst ""  (formula "12")))
               (rule "closeTrue" (formula "14"))
            )
            (branch "Case 2"
               (rule "andLeft" (formula "2"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "close" (formula "17") (ifseqformula "2"))
            )
         )
         (branch "CUT: 0 <= seqIndexOf(f_s, f_x) - f_from & seqIndexOf(f_s, f_x) - f_from < f_to - f_from FALSE"
            (builtin "One Step Simplification" (formula "13"))
            (rule "castDel" (formula "13") (term "0"))
            (rule "eqSymm" (formula "14"))
            (rule "polySimp_elimSub" (formula "12") (term "0,1"))
            (rule "polySimp_elimSub" (formula "3") (term "1"))
            (rule "polySimp_elimSub" (formula "12") (term "1,1"))
            (rule "polySimp_elimSub" (formula "12") (term "1,0"))
            (rule "polySimp_elimSub" (formula "14") (term "0"))
            (rule "eqSymm" (formula "14"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "10"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "3"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1"))
            (rule "polySimp_addComm0" (formula "12") (term "1,0"))
            (rule "polySimp_addComm0" (formula "14") (term "1"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "polySimp_addComm1" (formula "10") (term "0"))
            (rule "polySimp_addComm0" (formula "3") (term "1,1,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,0,1"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "9"))
            (rule "inEqSimp_commuteLeq" (formula "8"))
            (rule "inEqSimp_commuteLeq" (formula "6"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
            (rule "polySimp_mulAssoc" (formula "3") (term "0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "3") (term "0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0,0"))
            (rule "polySimp_elimOne" (formula "3") (term "0,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
            (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1"))
            (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
            (rule "times_zero_2" (formula "12") (term "1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,1"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0,1"))
            (rule "add_literals" (formula "12") (term "1,1,0,0,0,1"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,1"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "7"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_geqRight" (formula "12"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1"))
            (rule "polySimp_rightDist" (formula "8") (term "1"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
            (rule "mul_literals" (formula "8") (term "0,1"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "11"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0"))
            (rule "polySimp_elimOne" (formula "11") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4"))
            (rule "polySimp_mulComm0" (formula "4") (term "1"))
            (rule "polySimp_rightDist" (formula "4") (term "1"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
            (rule "polySimp_elimOne" (formula "4") (term "1,1"))
            (rule "polySimp_rightDist" (formula "4") (term "0,1"))
            (rule "mul_literals" (formula "4") (term "0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
            (rule "andLeft" (formula "7"))
            (rule "inEqSimp_homoInEq1" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0"))
            (rule "mul_literals" (formula "7") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0"))
            (rule "polySimp_addComm0" (formula "7") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
            (rule "add_literals" (formula "7") (term "1,1,0"))
            (rule "times_zero_1" (formula "7") (term "1,0"))
            (rule "add_zero_right" (formula "7") (term "0"))
            (rule "leq_literals" (formula "7"))
            (rule "closeFalse" (formula "7"))
         )
      )
   )
   (branch "CUT: f_from < f_to FALSE"
      (builtin "One Step Simplification" (formula "2"))
      (rule "eqSymm" (formula "12"))
      (rule "polySimp_elimSub" (formula "12") (term "0"))
      (rule "eqSymm" (formula "12"))
      (rule "inEqSimp_ltRight" (formula "11"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "7"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "10"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "3"))
      (rule "times_zero_1" (formula "3") (term "1,0,0"))
      (rule "add_literals" (formula "3") (term "0,0"))
      (rule "polySimp_addComm0" (formula "12") (term "1"))
      (rule "polySimp_addComm0" (formula "1") (term "0"))
      (rule "polySimp_addComm1" (formula "10") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "2"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "9"))
      (rule "inEqSimp_commuteLeq" (formula "6"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
      (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7"))
      (rule "polySimp_mulComm0" (formula "7") (term "1"))
      (rule "polySimp_rightDist" (formula "7") (term "1"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
      (rule "mul_literals" (formula "7") (term "0,1"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3"))
      (rule "mul_literals" (formula "3") (term "1"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "10"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0"))
      (rule "polySimp_elimOne" (formula "10") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "2"))
      (rule "qeq_literals" (formula "3") (term "0"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "closeFalse" (formula "3"))
   )
)
)

}
