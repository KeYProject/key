\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Apr 12 13:33:37 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on, Strings-Strings\\:on, assertions-assertions\\:on, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:showSatisfiability, moreSeqRules-moreSeqRules\\:on, optimisedSelectRules-optimisedSelectRules\\:on, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=500
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\proofObligation {
	"name": "indexOfSeqSub",
	"class": "de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput",
 }

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "80a871ca3bac8bb405ecc216fcb6fa9ef6f8a395"))

(autoModeTime "0")

(branch "dummy ID"
(rule "notRight" (formula "1") (newnames "f_s,f_from,f_to,f_x,v_nx"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
 (builtin "One Step Simplification" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "exLeft" (formula "4") (inst "sk=v_nx_0") (userinteraction))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "seqIndexOf" (formula "7") (term "0") (inst "m=m") (inst "n=n") (userinteraction))
(rule "impLeft" (formula "1") (userinteraction))
(branch
   (rule "exRightHide" (formula "7") (inst "t=sub(seqIndexOf(f_s, f_x), f_from)") (userinteraction))
   (rule "cut_direct" (formula "7") (term "0,0") (userinteraction))
   (branch "CUT: 0 <= seqIndexOf(f_s, f_x) - f_from TRUE"
       (builtin "One Step Simplification" (formula "8"))
      (rule "lenOfSeqSub" (formula "8") (term "1,0") (userinteraction))
      (rule "cut_direct" (formula "8") (term "0,1,0") (userinteraction))
      (branch "CUT: f_from < f_to TRUE"
          (builtin "One Step Simplification" (formula "9"))
         (rule "cut_direct" (formula "9") (term "0") (userinteraction))
         (branch "CUT: seqIndexOf(f_s, f_x) - f_from < f_to - f_from TRUE"
             (builtin "One Step Simplification" (formula "10"))
            (rule "getOfSeqSub" (formula "10") (term "0") (userinteraction))
            (rule "replace_known_left" (formula "10") (term "0,0,0") (ifseqformula "3") (userinteraction))
             (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "1")))
            (rule "sub" (formula "10") (term "0,1,0") (userinteraction))
            (rule "switch_brackets" (formula "10") (term "1,0") (userinteraction))
            (rule "add_sub_elim_left" (formula "10") (term "1,1,0") (userinteraction))
            (rule "add_zero_right" (formula "10") (term "1,0") (userinteraction))
            (rule "seqIndexOf" (formula "10") (term "1,0") (inst "m=m") (inst "n=n") (userinteraction))
            (rule "impLeft" (formula "1") (userinteraction))
            (branch
               (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "8"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "8") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "7"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "8"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0"))
               (rule "polySimp_elimOne" (formula "8") (term "0"))
               (rule "nnf_ex2all" (formula "10"))
               (rule "nnf_notAnd" (formula "1") (term "0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
               (rule "allLeft" (formula "1") (inst "t=v_nx_0"))
               (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "10"))
               (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_literals" (formula "1") (term "0,0,1"))
               (rule "leq_literals" (formula "1") (term "0,1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "1"))
               (rule "qeq_literals" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "closeFalse" (formula "9"))
            )
            (branch
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "close" (formula "13") (ifseqformula "2"))
            )
         )
         (branch "CUT: seqIndexOf(f_s, f_x) - f_from < f_to - f_from FALSE"
            (rule "polySimp_elimSub" (formula "9") (term "1"))
            (rule "polySimp_elimSub" (formula "9") (term "0"))
            (rule "inEqSimp_ltRight" (formula "9"))
            (rule "inEqSimp_ltToLeq" (formula "5"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0"))
            (rule "polySimp_mulAssoc" (formula "1") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0"))
            (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "1,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5"))
            (rule "polySimp_mulComm0" (formula "5") (term "1"))
            (rule "polySimp_rightDist" (formula "5") (term "1"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
            (rule "mul_literals" (formula "5") (term "0,1"))
            (rule "polySimp_elimOne" (formula "5") (term "1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
            (rule "polySimp_elimOne" (formula "1") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "1"))
            (rule "andLeft" (formula "5"))
            (rule "inEqSimp_homoInEq1" (formula "5"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0"))
            (rule "mul_literals" (formula "5") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "5") (term "0"))
            (rule "polySimp_addComm0" (formula "5") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
            (rule "add_literals" (formula "5") (term "1,1,0"))
            (rule "times_zero_1" (formula "5") (term "1,0"))
            (rule "add_zero_right" (formula "5") (term "0"))
            (rule "leq_literals" (formula "5"))
            (rule "closeFalse" (formula "5"))
         )
      )
      (branch "CUT: f_from < f_to FALSE"
         (rule "inEqSimp_ltRight" (formula "8"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "3"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1"))
         (rule "polySimp_rightDist" (formula "4") (term "1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
         (rule "mul_literals" (formula "4") (term "0,1"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
         (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0"))
         (rule "polySimp_addComm0" (formula "3") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1"))
         (rule "polySimp_rightDist" (formula "3") (term "1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
         (rule "mul_literals" (formula "3") (term "0,1"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1"))
         (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
         (rule "andLeft" (formula "3"))
         (rule "inEqSimp_homoInEq1" (formula "3"))
         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "1,1,0"))
         (rule "times_zero_1" (formula "3") (term "1,0"))
         (rule "add_zero_right" (formula "3") (term "0"))
         (rule "leq_literals" (formula "3"))
         (rule "closeFalse" (formula "3"))
      )
   )
   (branch "CUT: 0 <= seqIndexOf(f_s, f_x) - f_from FALSE"
      (rule "polySimp_elimSub" (formula "7") (term "1"))
      (rule "inEqSimp_leqRight" (formula "7"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "polySimp_addComm0" (formula "1") (term "1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "2"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
      (rule "andLeft" (formula "2"))
      (rule "inEqSimp_homoInEq1" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
      (rule "polySimp_rightDist" (formula "2") (term "1,0"))
      (rule "mul_literals" (formula "2") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0"))
      (rule "polySimp_addComm0" (formula "2") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
      (rule "add_literals" (formula "2") (term "1,1,0"))
      (rule "times_zero_1" (formula "2") (term "1,0"))
      (rule "add_zero_right" (formula "2") (term "0"))
      (rule "leq_literals" (formula "2"))
      (rule "closeFalse" (formula "2"))
   )
)
(branch
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "lenOfSeqSub" (formula "2") (term "1") (userinteraction))
   (rule "cut_direct" (formula "2") (term "0,1") (userinteraction))
   (branch "CUT: f_from < f_to TRUE"
       (builtin "One Step Simplification" (formula "3"))
      (rule "instAll" (formula "12") (term "1") (ifseqformula "5") (userinteraction))
      (rule "impLeft" (formula "1") (userinteraction))
      (branch
         (rule "andRight" (formula "12") (userinteraction))
         (branch
            (rule "polySimp_elimSub" (formula "12") (term "1"))
            (rule "inEqSimp_leqRight" (formula "12"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "polySimp_addComm0" (formula "1") (term "1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "7"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
            (rule "andLeft" (formula "7"))
            (rule "inEqSimp_homoInEq1" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0"))
            (rule "mul_literals" (formula "7") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0"))
            (rule "polySimp_addComm0" (formula "7") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
            (rule "add_literals" (formula "7") (term "1,1,0"))
            (rule "times_zero_1" (formula "7") (term "1,0"))
            (rule "add_zero_right" (formula "7") (term "0"))
            (rule "leq_literals" (formula "7"))
            (rule "closeFalse" (formula "7"))
         )
         (branch
            (rule "seqIndexOf" (formula "13") (term "0,1") (inst "m=m") (inst "n=n") (userinteraction))
            (rule "impLeft" (formula "1") (userinteraction))
            (branch
               (rule "instEx" (formula "9") (term "1") (ifseqformula "12") (userinteraction))
               (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "9")) (ifInst ""  (formula "10")))
               (rule "closeTrue" (formula "12"))
            )
            (branch
               (rule "andLeft" (formula "1") (userinteraction))
               (rule "allLeftHide" (formula "2") (inst "t=add(seqIndexOf(seqSub(f_s, f_from, f_to), f_x), f_from)") (userinteraction))
               (rule "eqSymm" (formula "15"))
               (rule "polySimp_elimSub" (formula "5") (term "1"))
               (rule "polySimp_elimSub" (formula "14") (term "0"))
               (rule "polySimp_elimSub" (formula "15") (term "0"))
               (rule "eqSymm" (formula "15"))
               (rule "inEqSimp_ltRight" (formula "14"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "6"))
               (rule "polySimp_addComm0" (formula "3") (term "1,0,0"))
               (rule "polySimp_addComm0" (formula "3") (term "1,0,0,1"))
               (rule "polySimp_addComm0" (formula "15") (term "1"))
               (rule "polySimp_addComm0" (formula "1") (term "1,0"))
               (rule "polySimp_addComm0" (formula "3") (term "1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "4"))
               (rule "inEqSimp_commuteLeq" (formula "11"))
               (rule "polySimp_addComm0" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
               (rule "polySimp_mulAssoc" (formula "6") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,1,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0"))
               (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0"))
               (rule "times_zero_2" (formula "3") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "3") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,1,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0"))
               (rule "polySimp_rightDist" (formula "3") (term "0,1,1,0"))
               (rule "mul_literals" (formula "3") (term "0,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1"))
               (rule "polySimp_rightDist" (formula "6") (term "1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1"))
               (rule "polySimp_rightDist" (formula "6") (term "0,1"))
               (rule "mul_literals" (formula "6") (term "0,0,1"))
               (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "15"))
               (rule "polySimp_addAssoc" (formula "1") (term "1"))
               (rule "replace_known_left" (formula "3") (term "1,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "getOfSeqSub" (formula "7") (term "0"))
               (rule "castDel" (formula "7") (term "2,0"))
               (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
               (rule "polySimp_addComm0" (formula "7") (term "1,1,0"))
               (rule "polySimp_addComm0" (formula "7") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulAssoc" (formula "7") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "0,1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
               (rule "replace_known_left" (formula "7") (term "0,0,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "0,1,0,0"))
               (rule "mul_literals" (formula "7") (term "0,0,1,0,0"))
               (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "6"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "replace_known_left" (formula "3") (term "0,1") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "notLeft" (formula "3"))
               (rule "inEqSimp_geqRight" (formula "14"))
               (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
               (rule "times_zero_1" (formula "4") (term "0,0"))
               (rule "add_zero_left" (formula "4") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "polySimp_elimOne" (formula "4") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "12"))
               (rule "qeq_literals" (formula "4") (term "0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "closeFalse" (formula "4"))
            )
         )
      )
      (branch
         (rule "notLeft" (formula "1") (userinteraction))
         (rule "getOfSeqSub" (formula "12") (term "0") (userinteraction))
         (rule "cut_direct" (formula "12") (term "0,0") (userinteraction))
         (branch "CUT: 0 <= seqIndexOf(f_s, f_x) - f_from & seqIndexOf(f_s, f_x) - f_from < f_to - f_from TRUE"
             (builtin "One Step Simplification" (formula "13"))
            (rule "sub" (formula "13") (term "0,1,0") (userinteraction))
            (rule "polySimp_addComm1" (formula "13") (term "1,0") (userinteraction))
            (rule "switch_brackets" (formula "13") (term "1,0") (userinteraction))
            (rule "add_sub_elim_right" (formula "13") (term "1,1,0") (userinteraction))
            (rule "add_zero_right" (formula "13") (term "1,0") (userinteraction))
            (rule "seqIndexOf" (formula "13") (term "1,0") (inst "m=m") (inst "n=n") (userinteraction))
            (rule "impLeft" (formula "1") (userinteraction))
            (branch
               (rule "instEx" (formula "10") (term "1") (ifseqformula "13") (userinteraction))
               (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "10")) (ifInst ""  (formula "11")))
               (rule "closeTrue" (formula "13"))
            )
            (branch
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "close" (formula "16") (ifseqformula "2"))
            )
         )
         (branch "CUT: 0 <= seqIndexOf(f_s, f_x) - f_from & seqIndexOf(f_s, f_x) - f_from < f_to - f_from FALSE"
            (rule "polySimp_elimSub" (formula "12") (term "0,1"))
            (rule "polySimp_elimSub" (formula "12") (term "1,1"))
            (rule "polySimp_elimSub" (formula "12") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1"))
            (rule "polySimp_addComm0" (formula "12") (term "1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,0,1"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "6"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
            (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1"))
            (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
            (rule "times_zero_2" (formula "12") (term "1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,1"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0,1"))
            (rule "add_literals" (formula "12") (term "1,1,0,0,0,1"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,1"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,1"))
            (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_geqRight" (formula "12"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
            (rule "andLeft" (formula "7"))
            (rule "inEqSimp_homoInEq1" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0"))
            (rule "mul_literals" (formula "7") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0"))
            (rule "polySimp_addComm0" (formula "7") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
            (rule "add_literals" (formula "7") (term "1,1,0"))
            (rule "times_zero_1" (formula "7") (term "1,0"))
            (rule "add_zero_right" (formula "7") (term "0"))
            (rule "leq_literals" (formula "7"))
            (rule "closeFalse" (formula "7"))
         )
      )
   )
   (branch "CUT: f_from < f_to FALSE"
       (builtin "One Step Simplification" (formula "2"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "times_zero_1" (formula "2") (term "1,0,0"))
      (rule "add_literals" (formula "2") (term "0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2"))
      (rule "mul_literals" (formula "2") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
      (rule "qeq_literals" (formula "2") (term "0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "closeFalse" (formula "2"))
   )
)
)
}
