\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Apr 12 13:31:59 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_INSTANTIATE
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:on, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:showSatisfiability, moreSeqRules-moreSeqRules\\:off, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:allow, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=1000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\proofObligation {
	"name": "getOfArray2seq",
	"class": "de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput",
 }

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "80a871ca3bac8bb405ecc216fcb6fa9ef6f8a395"))

(autoModeTime "0")

(branch "dummy ID"
(rule "notRight" (formula "1") (newnames "f_h,f_a,f_idx") (userinteraction))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "cut" (inst "cutFormula=  f_h
= store(f_h,
        f_a,
        arr(f_idx),
        any::select(f_h, f_a, arr(f_idx)))") (userinteraction))
(branch "CUT: f_h = f_h[f_a[f_idx] := any::select(f_h, f_a, arr(f_idx))] TRUE"
   (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1") (userinteraction))
   (rule "applyEqRigid" (formula "3") (term "0,1") (ifseqformula "1") (userinteraction))
   (rule "selectOfStore" (formula "3") (term "1") (userinteraction))
   (rule "array2seqDef" (formula "3") (term "0,0") (inst "u=u") (userinteraction))
   (rule "getOfSeqDef" (formula "3") (term "0") (userinteraction))
    (builtin "One Step Simplification" (formula "2"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "add_zero_right" (formula "3") (term "0,2,0,1,0"))
   (rule "andLeft" (formula "2"))
   (rule "eqSymm" (formula "1"))
   (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "polySimp_elimSub" (formula "4") (term "1,0,0"))
   (rule "times_zero_2" (formula "4") (term "1,1,0,0"))
   (rule "add_zero_right" (formula "4") (term "1,0,0"))
   (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "closeTrue" (formula "4"))
)
(branch "CUT: f_h = f_h[f_a[f_idx] := any::select(f_h, f_a, arr(f_idx))] FALSE"
   (rule "equalityToSelect" (formula "2") (inst "ov=ov") (inst "fv=fv") (userinteraction))
   (rule "allRight" (formula "2") (inst "sk=ov_0") (userinteraction))
   (rule "allRight" (formula "2") (inst "sk=fv_0") (userinteraction))
   (rule "pullOutSelect" (formula "2") (term "1") (inst "selectSK=fv_0_0") (userinteraction))
   (rule "selectOfStore" (formula "1") (term "0") (userinteraction))
   (rule "cut_direct" (formula "1") (term "0,0") (userinteraction))
   (branch "CUT: f_a = ov_0 & arr(f_idx) = fv_0 & !arr(f_idx) = java.lang.Object::<created> TRUE"
       (builtin "One Step Simplification" (formula "2"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "castDel" (formula "2") (term "0"))
      (rule "andLeft" (formula "1"))
      (rule "eqSymm" (formula "1"))
      (rule "eqSymm" (formula "2"))
      (rule "applyEq" (formula "5") (term "2,0") (ifseqformula "2"))
      (rule "applyEqRigid" (formula "5") (term "1,0") (ifseqformula "1"))
      (rule "close" (formula "5") (ifseqformula "3"))
   )
   (branch "CUT: f_a = ov_0 & arr(f_idx) = fv_0 & !arr(f_idx) = java.lang.Object::<created> FALSE"
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
      (rule "closeFalse" (formula "1"))
   )
)
)
}
