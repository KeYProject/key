\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Apr 12 13:30:07 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:showSatisfiability, moreSeqRules-moreSeqRules\\:on, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_COMPLETION
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\proofObligation {
	"name": "seqPermFromSwap",
	"class": "de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput",
 }

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "80a871ca3bac8bb405ecc216fcb6fa9ef6f8a395"))

(autoModeTime "0")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "f_t1,f_t2,v_iv,v_jv,f_s2,f_s1"))
(rule "orRight" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notRight" (formula "4"))
(rule "exLeft" (formula "3") (inst "sk=v_iv_1") (userinteraction))
(rule "exLeft" (formula "3") (inst "sk=v_jv_1") (userinteraction))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "defOfSeqSwap" (formula "7") (term "1") (inst "uSub=uSub") (userinteraction))
(rule "seqPermDefLeft" (formula "1") (inst "s=s") (inst "iv=iv") (userinteraction))
(rule "andLeft" (formula "1"))
(rule "seqPermDef" (formula "10") (inst "s=s") (inst "iv=iv") (userinteraction))
(rule "andRight" (formula "10") (userinteraction))
(branch
   (rule "exLeft" (formula "2") (inst "sk=s_0"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "eqSymm" (formula "1"))
   (rule "eqSymm" (formula "12"))
   (rule "eqSymm" (formula "6"))
   (rule "eqSymm" (formula "11"))
   (rule "replace_known_left" (formula "11") (term "1,0,0,0,2,0") (ifseqformula "9"))
    (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "7")) (ifInst ""  (formula "8")) (ifInst ""  (formula "10")))
   (rule "lenOfSeqDefEQ" (formula "2") (term "1") (ifseqformula "11"))
   (rule "eqSymm" (formula "2"))
   (rule "polySimp_elimSub" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "1,1,0"))
   (rule "add_zero_right" (formula "2") (term "1,0"))
   (rule "lenOfSeqDefEQ" (formula "1") (term "1") (ifseqformula "11"))
   (rule "eqSymm" (formula "1"))
   (rule "polySimp_elimSub" (formula "1") (term "1,0"))
   (rule "times_zero_2" (formula "1") (term "1,1,0"))
   (rule "add_zero_right" (formula "1") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "10"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "10") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
   (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "6"))
   (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "2"))
   (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
   (rule "polySimp_elimOne" (formula "10") (term "0"))
   (rule "ifthenelse_split" (formula "2") (term "0"))
   (branch "f_s2.length >= 0 TRUE"
      (rule "eqSymm" (formula "3"))
      (rule "close" (formula "13") (ifseqformula "3"))
   )
   (branch "f_s2.length >= 0 FALSE"
      (rule "inEqSimp_geqRight" (formula "12"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "1"))
      (rule "polySimp_rightDist" (formula "11") (term "0,0"))
      (rule "mul_literals" (formula "11") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0"))
      (rule "add_literals" (formula "11") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "11"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0"))
      (rule "polySimp_elimOne" (formula "11") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "9"))
      (rule "qeq_literals" (formula "11") (term "0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "closeFalse" (formula "11"))
   )
)
(branch
   (rule "exLeft" (formula "2") (inst "sk=s_1") (userinteraction))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "exRightHide" (formula "12") (inst "t=seqDef{int u;}(Z(0(#)),
               seqLen(s_1),
               \\if (u = v_iv_1)
                   \\then (any::seqGet(s_1, v_jv_1))
                   \\else (\\if (u = v_jv_1)
                              \\then (any::seqGet(s_1,
                                                 v_iv_1))
                              \\else (any::seqGet(s_1,
                                                 u))))") (userinteraction))
   (rule "andRight" (formula "12") (userinteraction))
   (branch
      (rule "andRight" (formula "12") (userinteraction))
      (branch
         (rule "eqSymm" (formula "1"))
         (rule "eqSymm" (formula "11"))
         (rule "replace_known_left" (formula "11") (term "1,0,0,2,0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "7")) (ifInst ""  (formula "8")) (ifInst ""  (formula "9")))
         (rule "lenOfSeqDef" (formula "12") (term "0"))
         (rule "polySimp_elimSub" (formula "12") (term "1,0"))
         (rule "times_zero_2" (formula "12") (term "1,1,0"))
         (rule "add_zero_right" (formula "12") (term "1,0"))
         (rule "lenOfSeqDefEQ" (formula "2") (term "1") (ifseqformula "11"))
         (rule "eqSymm" (formula "2"))
         (rule "polySimp_elimSub" (formula "2") (term "1,0"))
         (rule "times_zero_2" (formula "2") (term "1,1,0"))
         (rule "add_zero_right" (formula "2") (term "1,0"))
         (rule "lenOfSeqDefEQ" (formula "1") (term "1") (ifseqformula "11"))
         (rule "eqSymm" (formula "1"))
         (rule "polySimp_elimSub" (formula "1") (term "1,0"))
         (rule "times_zero_2" (formula "1") (term "1,1,0"))
         (rule "add_zero_right" (formula "1") (term "1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "8"))
         (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
         (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
         (rule "eqSymm" (formula "2"))
         (rule "applyEqRigid" (formula "12") (term "0,1,0,0,0") (ifseqformula "2"))
         (rule "applyEqRigid" (formula "12") (term "1,0") (ifseqformula "2"))
         (rule "inEqSimp_sepNegMonomial0" (formula "10"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0"))
         (rule "polySimp_elimOne" (formula "10") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "0,0,0"))
         (rule "ifthenelse_split" (formula "1") (term "0"))
         (branch "f_s2.length >= 0 TRUE"
            (rule "eqSymm" (formula "2"))
            (rule "applyEq" (formula "13") (term "0,0,0") (ifseqformula "2"))
            (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "orRight" (formula "13"))
            (rule "eqSymm" (formula "14"))
            (rule "inEqSimp_geqRight" (formula "13"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_strengthen1" (formula "2") (ifseqformula "14"))
            (rule "add_zero_right" (formula "2") (term "1"))
            (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
         (branch "f_s2.length >= 0 FALSE"
            (rule "inEqSimp_geqRight" (formula "12"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "1"))
            (rule "polySimp_rightDist" (formula "11") (term "0,0"))
            (rule "mul_literals" (formula "11") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "11") (term "0"))
            (rule "add_literals" (formula "11") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "11"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0"))
            (rule "polySimp_elimOne" (formula "11") (term "0"))
            (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "11"))
            (rule "qeq_literals" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "closeFalse" (formula "9"))
         )
      )
      (branch
         (rule "seqNPermDefLeft" (formula "3") (inst "iv=iv") (inst "jv=jv") (userinteraction))
         (rule "seqNPermDefReplace" (formula "13") (inst "iv=iv") (inst "jv=jv") (userinteraction))
         (rule "allRight" (formula "13") (inst "sk=iv_2") (userinteraction))
         (rule "impRight" (formula "13") (userinteraction))
         (rule "andLeft" (formula "1"))
         (rule "lenOfSeqDef" (formula "2") (term "1"))
         (rule "polySimp_elimSub" (formula "2") (term "1,1"))
         (rule "mul_literals" (formula "2") (term "1,1,1"))
         (rule "add_zero_right" (formula "2") (term "1,1"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
         (rule "add_zero_right" (formula "2") (term "0,0,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "applyEqRigid" (formula "2") (term "1,0,1,0") (ifseqformula "4"))
         (rule "applyEqRigid" (formula "2") (term "0,1,0,0,0,1,0") (ifseqformula "4"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
         (rule "ifthenelse_split" (formula "2") (term "0"))
         (branch "f_s1.length >= 1 TRUE"
            (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0"))
            (rule "applyEqRigid" (formula "16") (term "1,0,0,1,0,1,0,0") (ifseqformula "5"))
            (rule "lenOfSeqDef" (formula "16") (term "0,1,0,1,0,0"))
            (rule "polySimp_elimSub" (formula "16") (term "1,0,1,0,1,0,0"))
            (rule "times_zero_2" (formula "16") (term "1,1,0,1,0,1,0,0"))
            (rule "add_zero_right" (formula "16") (term "1,0,1,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "16") (term "0,0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
            (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
            (rule "ifthenelse_split" (formula "16") (term "0,0,1,1,1,0,0"))
            (branch "1 + f_s1.length * -1 <= 0 TRUE"
               (rule "times_minus_one_1" (formula "17") (term "0,1,1,1,0,0") (userinteraction))
               (rule "times_minus_one_1" (formula "17") (term "1,1,1,0,0") (userinteraction))
               (rule "sub_sub_elim" (formula "17") (term "1,1,1,0,0") (userinteraction))
               (rule "switch_params" (formula "17") (term "1,1,0,0") (userinteraction))
               (rule "instAll" (formula "17") (term "1,1,0") (ifseqformula "7") (userinteraction))
               (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3") (userinteraction))
               (rule "cut_direct" (formula "1") (term "1,0") (userinteraction))
               (branch "CUT: iv_2 < s_1.length TRUE"
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "exLeft" (formula "2") (inst "sk=jv_1") (userinteraction))
                  (rule "andLeft" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "cut" (inst "cutFormula=jv_1 = v_iv_1") (userinteraction))
                  (branch "CUT: jv_1 = v_iv_1 TRUE"
                     (rule "exRightHide" (formula "22") (inst "t=v_jv_1") (userinteraction))
                     (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "18") (userinteraction))
                     (rule "cut_direct" (formula "22") (term "1,0") (userinteraction))
                     (branch "CUT: v_jv_1 <= f_s1.length + -1 TRUE"
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "getOfSeqDef" (formula "23") (term "0") (userinteraction))
                        (rule "sub_zero_2" (formula "23") (term "1,1,0,0") (userinteraction))
                        (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "19") (userinteraction))
                        (rule "cut_direct" (formula "23") (term "1,0,0") (userinteraction))
                        (branch "CUT: v_jv_1 < s_1.length TRUE"
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "castDel" (formula "24") (term "0"))
                           (rule "add_zero_right" (formula "24") (term "1,2,2,0"))
                           (rule "add_zero_right" (formula "24") (term "0,0,0"))
                           (rule "add_zero_right" (formula "24") (term "0,0,2,0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "eqSymm" (formula "3"))
                           (rule "applyEqRigid" (formula "24") (term "1,2,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "24") (term "1,0,0") (ifseqformula "3"))
                           (rule "applyEqRigid" (formula "24") (term "2,0") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "orRight" (formula "24"))
                           (rule "notRight" (formula "24"))
                           (rule "applyEqRigid" (formula "25") (term "1,0") (ifseqformula "1"))
                           (rule "close" (formula "25") (ifseqformula "8"))
                        )
                        (branch "CUT: v_jv_1 < s_1.length FALSE"
                           (rule "eqSymm" (formula "11"))
                           (rule "eqSymm" (formula "22"))
                           (rule "replace_known_left" (formula "22") (term "1,0,0,2,0") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "18")) (ifInst ""  (formula "19")) (ifInst ""  (formula "20")))
                           (rule "polySimp_addComm0" (formula "1") (term "1"))
                           (rule "inEqSimp_ltRight" (formula "23"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "lenOfSeqDefEQ" (formula "13") (term "1") (ifseqformula "23"))
                           (rule "eqSymm" (formula "13"))
                           (rule "polySimp_elimSub" (formula "13") (term "1,0"))
                           (rule "times_zero_2" (formula "13") (term "1,1,0"))
                           (rule "add_zero_right" (formula "13") (term "1,0"))
                           (rule "lenOfSeqDefEQ" (formula "12") (term "1") (ifseqformula "23"))
                           (rule "eqSymm" (formula "12"))
                           (rule "polySimp_elimSub" (formula "12") (term "1,0"))
                           (rule "mul_literals" (formula "12") (term "1,1,0"))
                           (rule "add_zero_right" (formula "12") (term "1,0"))
                           (rule "lenOfSeqDefEQ" (formula "2") (term "1,1") (ifseqformula "23"))
                           (rule "polySimp_elimSub" (formula "2") (term "1,1,1"))
                           (rule "times_zero_2" (formula "2") (term "1,1,1,1"))
                           (rule "add_zero_right" (formula "2") (term "1,1,1"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "2") (term "0,1,1"))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "applyEqRigid" (formula "13") (term "0") (ifseqformula "12"))
                           (rule "eqSymm" (formula "13"))
                           (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "12"))
                           (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "13"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "CUT: v_jv_1 <= f_s1.length + -1 FALSE"
                        (rule "eqSymm" (formula "21"))
                        (rule "eqSymm" (formula "10"))
                        (rule "replace_known_left" (formula "21") (term "1,0,0,2,0") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "17")) (ifInst ""  (formula "18")) (ifInst ""  (formula "19")))
                        (rule "polySimp_addComm0" (formula "22") (term "1"))
                        (rule "lenOfSeqDefEQ" (formula "22") (term "1,1") (ifseqformula "21"))
                        (rule "polySimp_elimSub" (formula "22") (term "1,1,1"))
                        (rule "mul_literals" (formula "22") (term "1,1,1,1"))
                        (rule "add_zero_right" (formula "22") (term "1,1,1"))
                        (rule "lenOfSeqDefEQ" (formula "10") (term "1") (ifseqformula "21"))
                        (rule "eqSymm" (formula "10"))
                        (rule "polySimp_elimSub" (formula "10") (term "1,0"))
                        (rule "mul_literals" (formula "10") (term "1,1,0"))
                        (rule "add_zero_right" (formula "10") (term "1,0"))
                        (rule "lenOfSeqDefEQ" (formula "11") (term "1") (ifseqformula "21"))
                        (rule "eqSymm" (formula "11"))
                        (rule "polySimp_elimSub" (formula "11") (term "1,0"))
                        (rule "times_zero_2" (formula "11") (term "1,1,0"))
                        (rule "add_zero_right" (formula "11") (term "1,0"))
                        (rule "lenOfSeqDefEQ" (formula "8") (term "0") (ifseqformula "21"))
                        (rule "polySimp_elimSub" (formula "8") (term "1,0"))
                        (rule "mul_literals" (formula "8") (term "1,1,0"))
                        (rule "add_zero_right" (formula "8") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "20"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "20") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "22"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1,0"))
                        (rule "applyEqRigid" (formula "1") (term "0,1,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "9") (term "0") (ifseqformula "11"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
                        (rule "applyEqRigid" (formula "12") (term "1") (ifseqformula "11"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "21"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                        (rule "polySimp_elimOne" (formula "21") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "ifthenelse_split" (formula "12") (term "0"))
                        (branch "f_s2.length >= 0 TRUE"
                           (rule "eqSymm" (formula "13"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "13"))
                           (rule "inEqSimp_contradInEq0" (formula "22") (ifseqformula "1"))
                           (rule "andLeft" (formula "22"))
                           (rule "inEqSimp_homoInEq1" (formula "22"))
                           (rule "polySimp_pullOutFactor1b" (formula "22") (term "0"))
                           (rule "add_literals" (formula "22") (term "1,1,0"))
                           (rule "times_zero_1" (formula "22") (term "1,0"))
                           (rule "add_zero_right" (formula "22") (term "0"))
                           (rule "leq_literals" (formula "22"))
                           (rule "closeFalse" (formula "22"))
                        )
                        (branch "f_s2.length >= 0 FALSE"
                           (rule "eqSymm" (formula "12"))
                           (rule "applyEq" (formula "9") (term "0") (ifseqformula "12"))
                           (rule "qeq_literals" (formula "9"))
                           (rule "closeFalse" (formula "9"))
                        )
                     )
                  )
                  (branch "CUT: jv_1 = v_iv_1 FALSE"
                     (rule "cut" (inst "cutFormula=jv_1 = v_jv_1") (userinteraction))
                     (branch "CUT: jv_1 = v_jv_1 TRUE"
                        (rule "exRightHide" (formula "23") (inst "t=v_iv_1") (userinteraction))
                        (rule "eqSymm" (formula "21"))
                        (rule "eqSymm" (formula "10"))
                        (rule "eqSymm" (formula "1"))
                        (rule "replace_known_left" (formula "21") (term "0,0,0,0,0,2,0") (ifseqformula "17"))
                         (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "18")) (ifInst ""  (formula "19")) (ifInst ""  (formula "20")))
                        (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "17"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "polySimp_addComm0" (formula "23") (term "1,0"))
                        (rule "getOfSeqDef" (formula "23") (term "0,1"))
                        (rule "castDel" (formula "23") (term "1,0,1"))
                        (rule "castDel" (formula "23") (term "2,0,1"))
                        (rule "add_zero_right" (formula "23") (term "0,0,2,1,0,1"))
                        (rule "add_zero_right" (formula "23") (term "0,0,1,0,1"))
                         (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "17")))
                        (rule "polySimp_elimSub" (formula "23") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "23") (term "1,1,0,0,1"))
                        (rule "add_zero_right" (formula "23") (term "1,0,0,1"))
                        (rule "lenOfSeqDefEQ" (formula "10") (term "1") (ifseqformula "21"))
                        (rule "eqSymm" (formula "10"))
                        (rule "polySimp_elimSub" (formula "10") (term "1,0"))
                        (rule "mul_literals" (formula "10") (term "1,1,0"))
                        (rule "add_zero_right" (formula "10") (term "1,0"))
                        (rule "lenOfSeqDefEQ" (formula "11") (term "1") (ifseqformula "21"))
                        (rule "eqSymm" (formula "11"))
                        (rule "polySimp_elimSub" (formula "11") (term "1,0"))
                        (rule "mul_literals" (formula "11") (term "1,1,0"))
                        (rule "add_zero_right" (formula "11") (term "1,0"))
                        (rule "lenOfSeqDefEQ" (formula "8") (term "0") (ifseqformula "21"))
                        (rule "polySimp_elimSub" (formula "8") (term "1,0"))
                        (rule "times_zero_2" (formula "8") (term "1,1,0"))
                        (rule "add_zero_right" (formula "8") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "19"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "19") (term "0"))
                        (rule "lenOfSeqDefEQ" (formula "23") (term "1,1,0") (ifseqformula "21"))
                        (rule "polySimp_elimSub" (formula "23") (term "1,1,1,0"))
                        (rule "mul_literals" (formula "23") (term "1,1,1,1,0"))
                        (rule "add_zero_right" (formula "23") (term "1,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,1"))
                        (rule "polySimp_addComm1" (formula "23") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "23") (term "0,1,1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "23") (term "0"))
                        (rule "polySimp_addComm1" (formula "23") (term "0,0"))
                        (rule "applyEqRigid" (formula "23") (term "1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "8") (term "0") (ifseqformula "11"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                        (rule "eqSymm" (formula "11"))
                        (rule "applyEqRigid" (formula "23") (term "1,1,0,1") (ifseqformula "1"))
                        (rule "apply_eq_monomials" (formula "23") (term "1,0,0,0,1") (ifseqformula "11"))
                        (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,0,0,1"))
                        (rule "polySimp_pullOutFactor0b" (formula "23") (term "1,0,0,0,1"))
                        (rule "add_literals" (formula "23") (term "1,1,1,0,0,0,1"))
                        (rule "times_zero_1" (formula "23") (term "1,1,0,0,0,1"))
                        (rule "add_zero_right" (formula "23") (term "1,0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1"))
                        (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "11"))
                        (rule "applyEq" (formula "23") (term "1,0,1") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                        (rule "polySimp_elimOne" (formula "19") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "0,0,1"))
                        (rule "polySimp_elimOne" (formula "23") (term "0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "23") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0"))
                        (rule "mul_literals" (formula "23") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "23") (term "1,1,0"))
                        (rule "ifthenelse_split" (formula "10") (term "0"))
                        (branch "f_s2.length >= 0 TRUE"
                           (rule "eqSymm" (formula "11"))
                           (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "11"))
                           (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "orRight" (formula "24"))
                           (rule "inEqSimp_geqRight" (formula "24"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "12"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "1"))
                           (rule "andLeft" (formula "21"))
                           (rule "inEqSimp_homoInEq1" (formula "21"))
                           (rule "polySimp_pullOutFactor1b" (formula "21") (term "0"))
                           (rule "add_literals" (formula "21") (term "1,1,0"))
                           (rule "times_zero_1" (formula "21") (term "1,0"))
                           (rule "add_literals" (formula "21") (term "0"))
                           (rule "leq_literals" (formula "21"))
                           (rule "closeFalse" (formula "21"))
                        )
                        (branch "f_s2.length >= 0 FALSE"
                           (rule "eqSymm" (formula "10"))
                           (rule "applyEq" (formula "8") (term "0") (ifseqformula "10"))
                           (rule "qeq_literals" (formula "8"))
                           (rule "closeFalse" (formula "8"))
                        )
                     )
                     (branch "CUT: jv_1 = v_jv_1 FALSE"
                        (rule "instEx" (formula "21") (term "0") (ifseqformula "23") (userinteraction))
                        (rule "eqSymm" (formula "9"))
                        (rule "eqSymm" (formula "23"))
                        (rule "eqSymm" (formula "20"))
                        (rule "eqSymm" (formula "22"))
                        (rule "replace_known_left" (formula "20") (term "0,0,0,0,0,2,0") (ifseqformula "16"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "17")) (ifInst ""  (formula "18")) (ifInst ""  (formula "19")))
                        (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "polySimp_addComm0" (formula "21") (term "1,0"))
                        (rule "getOfSeqDef" (formula "21") (term "0,1"))
                        (rule "castDel" (formula "21") (term "1,0,1"))
                        (rule "castDel" (formula "21") (term "2,0,1"))
                        (rule "add_zero_right" (formula "21") (term "0,0,2,1,0,1"))
                        (rule "add_zero_right" (formula "21") (term "0,0,1,0,1"))
                        (rule "add_zero_right" (formula "21") (term "1,2,2,1,0,1"))
                        (rule "eqSymm" (formula "21") (term "0,2,1,0,1"))
                        (rule "eqSymm" (formula "21") (term "0,1,0,1"))
                        (rule "replace_known_left" (formula "21") (term "0,0,0,1") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "23")) (ifInst ""  (formula "22")))
                        (rule "polySimp_elimSub" (formula "21") (term "1,0,0,1"))
                        (rule "times_zero_2" (formula "21") (term "1,1,0,0,1"))
                        (rule "add_zero_right" (formula "21") (term "1,0,0,1"))
                        (rule "replace_known_left" (formula "21") (term "0,0,1") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "4")))
                        (rule "lenOfSeqDefEQ" (formula "9") (term "1") (ifseqformula "20"))
                        (rule "eqSymm" (formula "9"))
                        (rule "polySimp_elimSub" (formula "9") (term "1,0"))
                        (rule "times_zero_2" (formula "9") (term "1,1,0"))
                        (rule "add_zero_right" (formula "9") (term "1,0"))
                        (rule "lenOfSeqDefEQ" (formula "10") (term "1") (ifseqformula "20"))
                        (rule "eqSymm" (formula "10"))
                        (rule "polySimp_elimSub" (formula "10") (term "1,0"))
                        (rule "mul_literals" (formula "10") (term "1,1,0"))
                        (rule "add_zero_right" (formula "10") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "21"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "lenOfSeqDefEQ" (formula "1") (term "0,1,0") (ifseqformula "21"))
                        (rule "polySimp_elimSub" (formula "1") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "1") (term "1,1,0,1,0"))
                        (rule "add_zero_right" (formula "1") (term "1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1,0"))
                        (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "11"))
                        (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "11"))
                        (rule "applyEqRigid" (formula "1") (term "0,1,0") (ifseqformula "10"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,0") (ifseqformula "10"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
                        (rule "andLeft" (formula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                        (rule "add_literals" (formula "4") (term "1,1,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0"))
                        (rule "add_literals" (formula "4") (term "0"))
                        (rule "leq_literals" (formula "4"))
                        (rule "closeFalse" (formula "4"))
                     )
                  )
               )
               (branch "CUT: iv_2 < s_1.length FALSE"
                  (rule "eqSymm" (formula "6"))
                  (rule "eqSymm" (formula "17"))
                  (rule "replace_known_left" (formula "17") (term "0,0,0,0,0,2,0") (ifseqformula "13"))
                   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")))
                  (rule "lenOfSeqDefEQ" (formula "5") (term "0") (ifseqformula "17"))
                  (rule "polySimp_elimSub" (formula "5") (term "1,0"))
                  (rule "mul_literals" (formula "5") (term "1,1,0"))
                  (rule "add_zero_right" (formula "5") (term "1,0"))
                  (rule "lenOfSeqDefEQ" (formula "7") (term "1") (ifseqformula "17"))
                  (rule "eqSymm" (formula "7"))
                  (rule "polySimp_elimSub" (formula "7") (term "1,0"))
                  (rule "mul_literals" (formula "7") (term "1,1,0"))
                  (rule "add_zero_right" (formula "7") (term "1,0"))
                  (rule "inEqSimp_ltRight" (formula "18"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "lenOfSeqDefEQ" (formula "7") (term "1") (ifseqformula "18"))
                  (rule "eqSymm" (formula "7"))
                  (rule "polySimp_elimSub" (formula "7") (term "1,0"))
                  (rule "times_zero_2" (formula "7") (term "1,1,0"))
                  (rule "add_zero_right" (formula "7") (term "1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0"))
                  (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "7"))
                  (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                  (rule "eqSymm" (formula "8"))
                  (rule "applyEqRigid" (formula "1") (term "0,1,0") (ifseqformula "8"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "1"))
                  (rule "andLeft" (formula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "6"))
                  (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                  (rule "add_literals" (formula "6") (term "1,1,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0"))
                  (rule "add_zero_right" (formula "6") (term "0"))
                  (rule "leq_literals" (formula "6"))
                  (rule "closeFalse" (formula "6"))
               )
            )
            (branch "1 + f_s1.length * -1 <= 0 FALSE"
               (rule "inEqSimp_leqRight" (formula "16"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_invertInEq1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
               (rule "qeq_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "f_s1.length >= 1 FALSE"
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "times_zero_2" (formula "2") (term "1,0"))
            (rule "add_zero_right" (formula "2") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "multiply_2_inEq0" (formula "2") (ifseqformula "1"))
            (rule "neg_literal" (formula "2") (term "0,0,0,1"))
            (rule "mul_literals" (formula "2") (term "1,0,1"))
            (rule "times_zero_1" (formula "2") (term "0"))
            (rule "double_unary_minus_literal" (formula "2") (term "0,0,0,1"))
            (rule "add_zero_right" (formula "2") (term "0,1"))
            (rule "polySimp_elimOneLeft0" (formula "2") (term "0,1"))
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1,0"))
            (rule "add_zero_right" (formula "2") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2"))
            (rule "multiply_2_inEq0" (formula "3") (ifseqformula "3"))
            (rule "neg_literal" (formula "3") (term "0,0,0,1"))
            (rule "mul_literals" (formula "3") (term "0,0,1"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,1"))
            (rule "polySimp_pullOutFactor3b" (formula "3") (term "1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
            (rule "polySimp_rightDist" (formula "3") (term "0,0"))
            (rule "mul_literals" (formula "3") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "3") (term "0"))
            (rule "add_literals" (formula "3") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "3") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "3"))
            (rule "mul_literals" (formula "3") (term "1"))
            (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "5"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "3"))
            (rule "qeq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch
      (rule "allRight" (formula "12") (inst "sk=iv_0"))
      (rule "impRight" (formula "12"))
      (rule "andLeft" (formula "1"))
      (rule "eqSymm" (formula "13"))
      (rule "eqSymm" (formula "8"))
      (rule "eqSymm" (formula "3"))
      (rule "eqSymm" (formula "6") (term "1,0"))
      (rule "eqSymm" (formula "14"))
      (rule "replace_known_left" (formula "13") (term "1,0,0,0,2,0") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "9")) (ifInst ""  (formula "10")) (ifInst ""  (formula "12")))
      (rule "lenOfSeqDef" (formula "2") (term "1"))
      (rule "polySimp_elimSub" (formula "2") (term "1,1"))
      (rule "mul_literals" (formula "2") (term "1,1,1"))
      (rule "add_zero_right" (formula "2") (term "1,1"))
      (rule "getOfSeqDef" (formula "14") (term "1,0"))
      (rule "add_zero_right" (formula "14") (term "1,2,2,0,1,1,0"))
      (rule "add_zero_right" (formula "14") (term "0,0,0,1,1,0"))
      (rule "add_zero_right" (formula "14") (term "0,0,2,0,1,1,0"))
      (rule "eqSymm" (formula "14") (term "0,0,1,1,0"))
      (rule "eqSymm" (formula "14") (term "0,2,0,1,1,0"))
      (rule "replace_known_left" (formula "14") (term "0,0,1,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "polySimp_elimSub" (formula "14") (term "1,0,1,0"))
      (rule "times_zero_2" (formula "14") (term "1,1,0,1,0"))
      (rule "add_zero_right" (formula "14") (term "1,0,1,0"))
      (rule "lenOfSeqDefEQ" (formula "4") (term "1") (ifseqformula "13"))
      (rule "eqSymm" (formula "4"))
      (rule "polySimp_elimSub" (formula "4") (term "1,0"))
      (rule "mul_literals" (formula "4") (term "1,1,0"))
      (rule "add_zero_right" (formula "4") (term "1,0"))
      (rule "lenOfSeqDefEQ" (formula "3") (term "1") (ifseqformula "13"))
      (rule "eqSymm" (formula "3"))
      (rule "polySimp_elimSub" (formula "3") (term "1,0"))
      (rule "mul_literals" (formula "3") (term "1,1,0"))
      (rule "add_zero_right" (formula "3") (term "1,0"))
      (rule "inEqSimp_ltToLeq" (formula "11"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "12"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "12") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
      (rule "add_zero_right" (formula "2") (term "0,0,1"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "14") (term "0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "9"))
      (rule "inEqSimp_commuteLeq" (formula "10"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
      (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
      (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
      (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "8"))
      (rule "applyEqRigid" (formula "14") (term "0,1,0,0,1,0") (ifseqformula "3"))
      (rule "applyEq" (formula "2") (term "1,0,1,0") (ifseqformula "3"))
      (rule "applyEqRigid" (formula "2") (term "0,1,0,0,0,1,0") (ifseqformula "3"))
      (rule "applyEqRigid" (formula "6") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
      (rule "applyEqRigid" (formula "4") (term "1") (ifseqformula "3"))
      (rule "inEqSimp_sepNegMonomial0" (formula "11"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0"))
      (rule "polySimp_elimOne" (formula "11") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "12"))
      (rule "polySimp_mulLiterals" (formula "12") (term "0"))
      (rule "polySimp_elimOne" (formula "12") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,0"))
      (rule "polySimp_elimOne" (formula "14") (term "0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "getOfSeqDefEQ" (formula "6") (term "1,1,0") (ifseqformula "13"))
      (rule "castDel" (formula "6") (term "1,1,1,0"))
      (rule "castDel" (formula "6") (term "2,1,1,0"))
      (rule "add_zero_right" (formula "6") (term "0,0,2,1,1,1,0"))
      (rule "add_zero_right" (formula "6") (term "0,0,1,1,1,0"))
      (rule "add_zero_right" (formula "6") (term "1,2,2,1,1,1,0"))
      (rule "eqSymm" (formula "6") (term "1,0"))
      (rule "polySimp_elimSub" (formula "6") (term "1,1,0,0,1,0"))
      (rule "times_zero_2" (formula "6") (term "1,1,1,0,0,1,0"))
      (rule "add_zero_right" (formula "6") (term "1,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0"))
      (rule "nnf_imp2or" (formula "6") (term "0"))
      (rule "nnf_notAnd" (formula "6") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "6") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,0"))
      (rule "ifthenelse_to_or_left" (formula "6") (term "1,0"))
      (rule "eqSymm" (formula "6") (term "1,1,1,0"))
      (rule "nnf_notAnd" (formula "6") (term "0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "6") (term "0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "6") (term "0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,1,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0,1,0"))
      (rule "add_zero_right" (formula "6") (term "0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,1,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,0,1,0"))
      (rule "commute_or" (formula "6") (term "1,1,0"))
      (rule "cnf_rightDist" (formula "6") (term "1,1,0"))
      (rule "cnf_rightDist" (formula "6") (term "0"))
      (rule "distr_forallAnd" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "shift_paren_or" (formula "6") (term "0"))
      (rule "commute_or_2" (formula "6") (term "0,0"))
      (rule "shift_paren_or" (formula "6") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "ifthenelse_split" (formula "15") (term "0,1,1,0"))
      (branch "v_iv_1 = iv_0 TRUE"
         (rule "castedGetAny" (formula "16") (term "1,1,0"))
         (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "1"))
         (rule "applyEqRigid" (formula "7") (term "1,1,2,0,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "7") (term "1,0,0,1,0") (ifseqformula "1"))
         (rule "ifthenelse_split" (formula "5") (term "0"))
         (branch "f_s2.length >= 0 TRUE"
            (rule "eqSymm" (formula "6"))
            (rule "applyEqRigid" (formula "8") (term "1,1,0,0") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "applyEq" (formula "17") (term "0,0,1,0") (ifseqformula "6"))
            (rule "replace_known_left" (formula "17") (term "0,1,0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "ifthenelse_to_or_left" (formula "8") (term "1,0"))
            (rule "eqSymm" (formula "8") (term "1,0,1,0"))
            (rule "cnf_rightDist" (formula "8") (term "0"))
            (rule "distr_forallAnd" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "commute_or_2" (formula "9") (term "0"))
            (rule "commute_or" (formula "8") (term "1,0"))
            (rule "shift_paren_or" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0") (ifseqformula "15"))
            (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0"))
            (rule "add_literals" (formula "8") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "8") (term "0,0,1,0"))
            (rule "leq_literals" (formula "8") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "2"))
            (rule "qeq_literals" (formula "8") (term "0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "shift_paren_or" (formula "9") (term "0,0"))
            (rule "commute_or" (formula "9") (term "0,0,0"))
            (rule "ifthenelse_to_or_left" (formula "9") (term "1,0"))
            (rule "eqSymm" (formula "9") (term "1,0,1,0"))
            (rule "eqSymm" (formula "9") (term "1,1,1,0"))
            (rule "cnf_rightDist" (formula "9") (term "0"))
            (rule "distr_forallAnd" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "shift_paren_or" (formula "9") (term "0"))
            (rule "commute_or_2" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "19")))
            (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0") (ifseqformula "15"))
            (rule "qeq_literals" (formula "9") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "17"))
            (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
            (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "9") (term "0,0,1"))
            (rule "leq_literals" (formula "9") (term "0,1"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "9"))
            (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "8"))
            (rule "applyEqRigid" (formula "19") (term "1,0") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "closeTrue" (formula "19"))
         )
         (branch "f_s2.length >= 0 FALSE"
            (rule "eqSymm" (formula "5"))
            (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "5"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "times_zero_2" (formula "3") (term "1,0"))
            (rule "add_zero_right" (formula "3") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "mul_literals" (formula "3") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "2"))
            (rule "qeq_literals" (formula "3") (term "0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "closeFalse" (formula "3"))
         )
      )
      (branch "v_iv_1 = iv_0 FALSE"
         (rule "ifthenelse_split" (formula "4") (term "0"))
         (branch "f_s2.length >= 0 TRUE"
            (rule "eqSymm" (formula "5"))
            (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "5"))
            (rule "applyEq" (formula "7") (term "1,1,0,0") (ifseqformula "5"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "applyEqRigid" (formula "17") (term "0,0,1,0") (ifseqformula "5"))
            (rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "5"))
            (rule "ifthenelse_to_or_left" (formula "7") (term "1,0"))
            (rule "eqSymm" (formula "7") (term "1,0,1,0"))
            (rule "cnf_rightDist" (formula "7") (term "0"))
            (rule "distr_forallAnd" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "commute_or_2" (formula "8") (term "0"))
            (rule "shift_paren_or" (formula "7") (term "0"))
            (rule "commute_or_2" (formula "7") (term "0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "12"))
            (rule "qeq_literals" (formula "7") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "14"))
            (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0"))
            (rule "add_literals" (formula "7") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0,0"))
            (rule "add_literals" (formula "7") (term "0,0,0"))
            (rule "leq_literals" (formula "7") (term "0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "shift_paren_or" (formula "8") (term "0,0"))
            (rule "commute_or" (formula "8") (term "0,0,0"))
            (rule "ifthenelse_to_or_left" (formula "8") (term "1,0"))
            (rule "eqSymm" (formula "8") (term "1,0,1,0"))
            (rule "eqSymm" (formula "8") (term "1,1,1,0"))
            (rule "cnf_rightDist" (formula "8") (term "0"))
            (rule "distr_forallAnd" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "commute_or_2" (formula "9") (term "0"))
            (rule "shift_paren_or" (formula "9") (term "0,0"))
            (rule "commute_or" (formula "9") (term "0,0,0"))
            (rule "ifthenelse_split" (formula "19") (term "0,1,1,0"))
            (branch "v_jv_1 = iv_0 TRUE"
               (rule "castedGetAny" (formula "20") (term "1,1,0"))
               (rule "applyEq" (formula "17") (term "1,1") (ifseqformula "1"))
               (rule "replace_known_left" (formula "20") (term "0,1,0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "applyEq" (formula "20") (term "0") (ifseqformula "8"))
               (rule "applyEqRigid" (formula "20") (term "1,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "closeTrue" (formula "20"))
            )
            (branch "v_jv_1 = iv_0 FALSE"
               (rule "castedGetAny" (formula "20") (term "1,1,0"))
               (rule "ifthenelse_split" (formula "2") (term "0"))
               (branch "f_s2.length >= 1 TRUE"
                  (rule "replace_known_left" (formula "21") (term "0,1,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "allLeft" (formula "10") (inst "t=iv_0"))
                  (rule "eqSymm" (formula "10") (term "1,0,0,0"))
                  (rule "eqSymm" (formula "10") (term "1,0,0"))
                  (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "20")) (ifInst ""  (formula "21")))
                  (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                  (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "10") (term "0,0,1"))
                  (rule "leq_literals" (formula "10") (term "0,1"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "closeFalse" (formula "10"))
               )
               (branch "f_s2.length >= 1 FALSE"
                  (rule "inEqSimp_homoInEq1" (formula "2"))
                  (rule "times_zero_2" (formula "2") (term "1,0"))
                  (rule "add_zero_right" (formula "2") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "f_s2.length >= 0 FALSE"
            (rule "eqSymm" (formula "4"))
            (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1,0"))
            (rule "add_zero_right" (formula "2") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
)
)
}
