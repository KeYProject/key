\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Aug 02 14:34:25 CEST 2023
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:on, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[Labels]UseOriginLabels=true
[NewSMT]Axiomatisations=false
[NewSMT]Presburger=false
[NewSMT]sqrtSMTTranslation=SMT
[SMTSettings]SelectedTaclets=
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]maxGenericSorts=2
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[Strategy]ActiveStrategy=JavaCardDLStrategy
[Strategy]MaximumNumberOfAutomaticApplications=10000
[Strategy]Timeout=-1
"
}

\proofObligation {
	"class": "de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput",
	"name": "seqPermForall",
 }

\proof {
(keyLog "0" (keyUser "Wolfram" ) (keyVersion "802791f53995f75600352ac8d6929fd89f529c86"))

(autoModeTime "0")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "v_iv,f_s1,v_x,f_phi,f_s2") (userinteraction))
(rule "notRight" (formula "2") (userinteraction))
(rule "notLeft" (formula "2") (userinteraction))
(rule "apply_subst_for" (formula "2") (term "1,0,0") (userinteraction))
(rule "apply_subst_for" (formula "2") (term "1,0,1") (userinteraction))
(rule "seqPermDef" (formula "1") (inst "iv=iv") (inst "s=s") (userinteraction))
(rule "andLeft" (formula "1") (userinteraction))
(rule "equiv_right" (formula "3") (userinteraction))
(branch "Case '->'"
   (rule "exLeft" (formula "3") (inst "sk=s_0") (userinteraction))
   (rule "seqNPermDefReplace" (formula "3") (term "1,0") (inst "jv=jv") (inst "iv=iv") (userinteraction))
   (rule "andLeft" (formula "3") (userinteraction))
   (rule "andLeft" (formula "3") (userinteraction))
   (rule "allRight" (formula "6") (inst "sk=v_iv_0") (userinteraction))
   (rule "impRight" (formula "6") (userinteraction))
   (rule "andLeft" (formula "1") (userinteraction))
   (rule "instAll" (formula "2") (term "0") (ifseqformula "6") (userinteraction))
   (rule "impLeft" (formula "2") (userinteraction))
   (branch "Case 1"
      (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "inEqSimp_ltRight" (formula "8"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "applyEqRigid" (formula "1") (term "0,1,0") (ifseqformula "6"))
      (rule "inEqSimp_sepNegMonomial0" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
      (rule "andLeft" (formula "3"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
      (rule "add_literals" (formula "3") (term "1,1,0"))
      (rule "times_zero_1" (formula "3") (term "1,0"))
      (rule "add_zero_right" (formula "3") (term "0"))
      (rule "leq_literals" (formula "3"))
      (rule "closeFalse" (formula "3"))
   )
   (branch "Case 2"
      (rule "exLeft" (formula "2") (inst "sk=jv_0") (userinteraction))
      (rule "andLeft" (formula "2") (userinteraction))
      (rule "andLeft" (formula "2") (userinteraction))
      (rule "instAll" (formula "4") (term "1,0") (ifseqformula "10") (userinteraction))
      (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "2") (userinteraction))
      (rule "replace_known_left" (formula "4") (term "1,0") (ifseqformula "3") (userinteraction))
       (builtin "One Step Simplification" (formula "4"))
      (rule "eqTermCut" (formula "4") (term "1,1") (inst "s=v_iv_0") (userinteraction))
      (branch "Assume (int)s_0[jv_0] = v_iv_0"
         (rule "eqSymm" (formula "5"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "2"))
         (rule "applyEqRigid" (formula "5") (term "1,0") (ifseqformula "4"))
         (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "10"))
         (rule "applyEq" (formula "13") (term "0") (ifseqformula "5"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "nnf_imp2or" (formula "8") (term "0"))
         (rule "nnf_notAnd" (formula "8") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
         (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
         (rule "mul_literals" (formula "8") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "8") (term "0"))
         (rule "commute_or" (formula "8") (term "0,0"))
         (rule "allLeft" (formula "8") (inst "t=jv_0"))
         (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "14"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "2"))
         (rule "qeq_literals" (formula "8") (term "0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "8"))
         (rule "andLeft" (formula "3"))
         (rule "inEqSimp_homoInEq1" (formula "3"))
         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "1,1,0"))
         (rule "times_zero_1" (formula "3") (term "1,0"))
         (rule "add_zero_right" (formula "3") (term "0"))
         (rule "leq_literals" (formula "3"))
         (rule "closeFalse" (formula "3"))
      )
      (branch "Assume (int)s_0[jv_0] != v_iv_0"
         (rule "notLeft" (formula "4") (userinteraction))
         (rule "seqGetAlphaCast" (formula "12") (term "0") (userinteraction))
         (rule "applyEqReverse" (formula "13") (term "0") (ifseqformula "1") (userinteraction))
         (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "6") (userinteraction))
         (rule "castDel" (formula "13") (term "0") (userinteraction))
          (builtin "One Step Simplification" (formula "13"))
         (rule "closeTrue" (formula "13") (userinteraction))
      )
   )
)
(branch "Case '<-'"
   (rule "exLeft" (formula "3") (inst "sk=s_0") (userinteraction))
   (rule "commute_and" (formula "3") (term "0") (userinteraction))
   (rule "andLeft" (formula "3") (userinteraction))
   (rule "andLeft" (formula "3") (userinteraction))
   (rule "seqNPermRange" (formula "3") (inst "iv=iv") (userinteraction))
   (rule "allRight" (formula "7") (inst "sk=v_iv_0"))
   (rule "impRight" (formula "7"))
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "8") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "1"))
   (rule "applyEqRigid" (formula "5") (term "0,1,0,0,1,0,1,0") (ifseqformula "7"))
   (rule "applyEqRigid" (formula "5") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
   (rule "applyEq" (formula "8") (term "0,1,0,0,1,0,0") (ifseqformula "7"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,1,0"))
   (rule "mul_literals" (formula "5") (term "0,1,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
   (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "3") (term "0"))
   (rule "nnf_imp2or" (formula "5") (term "0"))
   (rule "nnf_imp2or" (formula "8") (term "0"))
   (rule "nnf_notAnd" (formula "3") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0"))
   (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "3") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0"))
   (rule "mul_literals" (formula "3") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "3") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "5") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
   (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
   (rule "mul_literals" (formula "5") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "8") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
   (rule "commute_or_2" (formula "3") (term "0"))
   (rule "commute_or_2" (formula "8") (term "0"))
   (rule "commute_and_2" (formula "5") (term "1,0"))
   (rule "commute_or" (formula "3") (term "0,0"))
   (rule "commute_or" (formula "8") (term "0,0"))
   (rule "cnf_rightDist" (formula "5") (term "0"))
   (rule "distr_forallAnd" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "commute_or" (formula "6") (term "0"))
   (rule "cnf_rightDist" (formula "5") (term "0"))
   (rule "distr_forallAnd" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "allLeft" (formula "10") (inst "t=v_iv_0"))
   (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
   (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "2"))
   (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
   (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
   (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "10") (term "0,0,1"))
   (rule "leq_literals" (formula "10") (term "0,1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "1"))
   (rule "qeq_literals" (formula "10") (term "0,1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "allLeft" (formula "5") (inst "t=v_iv_0"))
   (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0"))
   (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0") (ifseqformula "1"))
   (rule "qeq_literals" (formula "5") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "2"))
   (rule "inEqSimp_homoInEq1" (formula "5") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
   (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
   (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "5") (term "0,0,0"))
   (rule "leq_literals" (formula "5") (term "0,0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "allLeft" (formula "8") (inst "t=v_iv_0"))
   (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
   (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0") (ifseqformula "2"))
   (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0"))
   (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0"))
   (rule "add_literals" (formula "8") (term "1,1,0,0,1,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,1,0"))
   (rule "add_literals" (formula "8") (term "0,0,1,0"))
   (rule "leq_literals" (formula "8") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "1"))
   (rule "qeq_literals" (formula "8") (term "0,0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "allLeft" (formula "3") (inst "t=int::seqGet(s_0, v_iv_0)"))
   (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "13"))
   (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "15"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "inEqSimp_contradInEq0" (formula "3") (term "1") (ifseqformula "9"))
   (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1"))
   (rule "mul_literals" (formula "3") (term "0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,0,1"))
   (rule "polySimp_addComm0" (formula "3") (term "0,0,0,1"))
   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1"))
   (rule "add_literals" (formula "3") (term "1,1,0,0,1"))
   (rule "times_zero_1" (formula "3") (term "1,0,0,1"))
   (rule "add_literals" (formula "3") (term "0,0,1"))
   (rule "leq_literals" (formula "3") (term "0,1"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "6"))
   (rule "qeq_literals" (formula "3") (term "0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "closeFalse" (formula "3"))
)
)
}
