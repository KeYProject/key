\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Apr 12 13:29:44 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:showSatisfiability, moreSeqRules-moreSeqRules\\:on, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[Strategy]MaximumNumberOfAutomaticApplications=200
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\proofObligation {
	"name": "seqNPermRange",
	"class": "de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput",
 }

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "80a871ca3bac8bb405ecc216fcb6fa9ef6f8a395"))

(autoModeTime "0")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "v_iv,f_s"))
(rule "notRight" (formula "2"))
(rule "notLeft" (formula "2"))
(rule "cut" (inst "cutFormula=\\forall int v_iv;
  \\forall Seq s;
    (   seqNPerm(s) & seqLen(s) = v_iv
     -> \\forall int idx;
          (   leq(Z(0(#)), idx) & lt(idx, v_iv)
           ->   leq(Z(0(#)),
                    (int)(any::seqGet(s, idx)))
              & lt((int)(any::seqGet(s, idx)),
                   seqLen(s))
              &   int::instance(any::seqGet(s, idx))
                = TRUE))"))
(branch "CUT: forall int v_iv; forall Seq s; ( seqNPerm(s) & s.length = v_iv -> forall int idx; ( 0 <= idx & idx < v_iv -> 0 <= (int)(s[idx]) & (int)(s[idx]) < s.length & int::instance(s[idx]) = TRUE)) TRUE"
   (rule "allRight" (formula "3") (inst "sk=v_iv_0"))
   (rule "impRight" (formula "3"))
   (rule "andLeft" (formula "1"))
   (rule "allLeftHide" (formula "3") (inst "t=seqLen(f_s)"))
   (rule "allLeftHide" (formula "3") (inst "t=f_s"))
   (rule "impLeft" (formula "3"))
   (branch
       (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "3")))
      (rule "closeTrue" (formula "4"))
   )
   (branch
      (rule "allLeftHide" (formula "3") (inst "t=v_iv_0"))
      (rule "replace_known_left" (formula "3") (term "1,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
      (rule "andLeft" (formula "3"))
      (rule "andLeft" (formula "3"))
      (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "castedGetAny" (formula "3") (term "1"))
      (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "castedGetAny" (formula "4") (term "0"))
      (rule "close" (formula "7") (ifseqformula "4"))
   )
)
(branch "CUT: forall int v_iv; forall Seq s; ( seqNPerm(s) & s.length = v_iv -> forall int idx; ( 0 <= idx & idx < v_iv -> 0 <= (int)(s[idx]) & (int)(s[idx]) < s.length & int::instance(s[idx]) = TRUE)) FALSE"
   (rule "auto_int_induction_geqZero" (formula "2") (inst "sk=v_iv_1"))
   (branch "Base Case"
      (rule "allRight" (formula "2") (inst "sk=s_0"))
      (rule "impRight" (formula "2"))
      (rule "allRight" (formula "3") (inst "sk=idx_0"))
      (rule "impRight" (formula "3"))
      (rule "andLeft" (formula "1"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "times_zero_1" (formula "2") (term "1,0,0"))
      (rule "add_zero_right" (formula "2") (term "0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2"))
      (rule "mul_literals" (formula "2") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
      (rule "qeq_literals" (formula "2") (term "0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "closeFalse" (formula "2"))
   )
   (branch "Step Case (positive)"
      (rule "impRight" (formula "2"))
      (rule "andLeft" (formula "1"))
      (rule "allRight" (formula "4") (inst "sk=s_1"))
      (rule "impRight" (formula "4"))
      (rule "andLeft" (formula "1"))
      (rule "seqNPermDefLeft" (formula "1") (inst "iv=iv") (inst "jv=jv"))
      (rule "allLeft" (formula "1") (inst "t=v_iv_1"))
      (rule "impLeft" (formula "1"))
      (branch
         (rule "polySimp_addComm0" (formula "3") (term "1"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
         (rule "polySimp_addComm1" (formula "7") (term "0,1"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0"))
         (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_leqRight" (formula "7"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "applyEqRigid" (formula "1") (term "0,1,0") (ifseqformula "4"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "qeq_literals" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch
         (rule "exLeft" (formula "1") (inst "sk=jv_0"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "allLeftHide" (formula "8") (inst "t=seqRemove(s_1, jv_0)"))
         (rule "impLeft" (formula "8"))
         (branch
            (rule "andRight" (formula "9"))
            (branch
               (rule "seqNPermDefReplace" (formula "9") (inst "iv=iv") (inst "jv=jv"))
               (rule "allRight" (formula "9") (inst "sk=iv_0"))
               (rule "impRight" (formula "9"))
               (rule "andLeft" (formula "1"))
               (rule "lenOfRemove" (formula "2") (term "1"))
               (rule "replace_known_left" (formula "2") (term "1,0,1") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "3")))
               (rule "allLeftHide" (formula "6") (inst "t=iv_0"))
               (rule "impLeft" (formula "6"))
               (branch
                  (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "polySimp_elimSub" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "1,1"))
                  (rule "polySimp_addComm0" (formula "7") (term "1"))
                  (rule "polySimp_addComm0" (formula "2") (term "1"))
                  (rule "inEqSimp_ltRight" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "3"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "applyEqRigid" (formula "3") (term "0,1,0") (ifseqformula "8"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0"))
                  (rule "applyEqRigid" (formula "1") (term "0,1,0") (ifseqformula "8"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
                  (rule "andLeft" (formula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "1,1,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0"))
                  (rule "add_literals" (formula "3") (term "0"))
                  (rule "leq_literals" (formula "3"))
                  (rule "closeFalse" (formula "3"))
               )
               (branch
                  (rule "exLeft" (formula "6") (inst "sk=jv_1"))
                  (rule "andLeft" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "cut" (inst "cutFormula=jv_1 = jv_0"))
                  (branch "CUT: jv_1 = jv_0 TRUE"
                     (rule "polySimp_elimSub" (formula "3") (term "1"))
                     (rule "mul_literals" (formula "3") (term "1,1"))
                     (rule "polySimp_addComm0" (formula "11") (term "1"))
                     (rule "polySimp_addComm0" (formula "3") (term "1"))
                     (rule "inEqSimp_ltToLeq" (formula "3"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "applyEqRigid" (formula "9") (term "1,0") (ifseqformula "1"))
                     (rule "applyEqRigid" (formula "3") (term "0,1,0") (ifseqformula "11"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0"))
                     (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "9"))
                     (rule "eqSymm" (formula "6"))
                     (rule "applyEqRigid" (formula "3") (term "0,1,0") (ifseqformula "6"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "1,1,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0"))
                     (rule "add_literals" (formula "3") (term "0"))
                     (rule "leq_literals" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
                  (branch "CUT: jv_1 = jv_0 FALSE"
                     (rule "cut" (inst "cutFormula=lt(jv_1, jv_0)"))
                     (branch "CUT: jv_1 < jv_0 TRUE"
                        (rule "exRightHide" (formula "15") (inst "t=jv_1"))
                        (rule "andRight" (formula "15"))
                        (branch
                           (rule "andRight" (formula "15"))
                           (branch
                              (rule "close" (formula "15") (ifseqformula "7"))
                           )
                           (branch
                              (rule "lenOfRemove" (formula "15") (term "1"))
                              (rule "replace_known_left" (formula "15") (term "1,0,1") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "4")))
                              (rule "polySimp_elimSub" (formula "15") (term "1"))
                              (rule "mul_literals" (formula "15") (term "1,1"))
                              (rule "polySimp_addComm0" (formula "11") (term "1"))
                              (rule "polySimp_addComm0" (formula "15") (term "1"))
                              (rule "inEqSimp_ltRight" (formula "15"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "6"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "6") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "9"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "9") (term "0"))
                              (rule "applyEq" (formula "9") (term "0,1,0") (ifseqformula "12"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "9") (term "0"))
                              (rule "polySimp_addComm1" (formula "9") (term "0,0"))
                              (rule "add_literals" (formula "9") (term "0,0,0"))
                              (rule "add_zero_left" (formula "9") (term "0,0"))
                              (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "12"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0"))
                              (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                              (rule "add_literals" (formula "6") (term "0,0,0"))
                              (rule "add_zero_left" (formula "6") (term "0,0"))
                              (rule "applyEqRigid" (formula "1") (term "0,1,0") (ifseqformula "12"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1"))
                              (rule "mul_literals" (formula "2") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                              (rule "polySimp_elimOne" (formula "9") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                              (rule "polySimp_elimOne" (formula "6") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "1"))
                              (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "2"))
                              (rule "andLeft" (formula "6"))
                              (rule "inEqSimp_homoInEq1" (formula "6"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0"))
                              (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                              (rule "add_literals" (formula "6") (term "1,1,0"))
                              (rule "times_zero_1" (formula "6") (term "1,0"))
                              (rule "add_zero_right" (formula "6") (term "0"))
                              (rule "leq_literals" (formula "6"))
                              (rule "closeFalse" (formula "6"))
                           )
                        )
                        (branch
                           (rule "getOfRemoveAny" (formula "15") (term "0"))
                           (rule "castDel" (formula "15") (term "2,2,2,0"))
                           (rule "replace_known_left" (formula "15") (term "0,2,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "9")))
                           (rule "closeTrue" (formula "15"))
                        )
                     )
                     (branch "CUT: jv_1 < jv_0 FALSE"
                        (rule "exRightHide" (formula "15") (inst "t=sub(jv_1, Z(1(#)))"))
                        (rule "andRight" (formula "15"))
                        (branch
                           (rule "polySimp_elimSub" (formula "15") (term "0,1"))
                           (rule "mul_literals" (formula "15") (term "1,0,1"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,0"))
                           (rule "mul_literals" (formula "15") (term "1,1,0"))
                           (rule "polySimp_addComm0" (formula "10") (term "1"))
                           (rule "polySimp_addComm0" (formula "15") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "15") (term "1,0"))
                           (rule "inEqSimp_ltRight" (formula "13"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "8"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                           (rule "polySimp_addComm1" (formula "15") (term "0,1"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,0,1"))
                           (rule "add_literals" (formula "15") (term "0,0,0,1"))
                           (rule "add_zero_left" (formula "15") (term "0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "7"))
                           (rule "inEqSimp_commuteLeq" (formula "4"))
                           (rule "inEqSimp_homoInEq0" (formula "15") (term "0"))
                           (rule "times_zero_2" (formula "15") (term "1,0,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0"))
                           (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "11"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                           (rule "mul_literals" (formula "8") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,0"))
                           (rule "add_zero_left" (formula "8") (term "0,0"))
                           (rule "applyEq" (formula "5") (term "0,1,0") (ifseqformula "11"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                           (rule "add_literals" (formula "5") (term "0,0,0"))
                           (rule "add_zero_left" (formula "5") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0"))
                           (rule "mul_literals" (formula "15") (term "1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                           (rule "polySimp_elimOne" (formula "8") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                           (rule "polySimp_elimOne" (formula "5") (term "0"))
                           (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "14"))
                           (rule "lenOfRemove" (formula "15") (term "0,1"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,0,1"))
                           (rule "mul_literals" (formula "15") (term "1,1,0,1"))
                           (rule "polySimp_addComm0" (formula "15") (term "1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1"))
                           (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1"))
                           (rule "replace_known_left" (formula "15") (term "0,0,0,1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "applyEqRigid" (formula "15") (term "2,0,1") (ifseqformula "11"))
                           (rule "applyEq" (formula "15") (term "0,1,0,0,0,1") (ifseqformula "11"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1"))
                           (rule "mul_literals" (formula "15") (term "0,1,0,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1"))
                           (rule "polySimp_addComm1" (formula "15") (term "0,0,0,0,1"))
                           (rule "add_literals" (formula "15") (term "0,0,0,0,0,1"))
                           (rule "add_zero_left" (formula "15") (term "0,0,0,0,1"))
                           (rule "applyEq" (formula "15") (term "1,1,0,1") (ifseqformula "11"))
                           (rule "polySimp_addAssoc" (formula "15") (term "1,0,1"))
                           (rule "add_literals" (formula "15") (term "0,1,0,1"))
                           (rule "add_zero_left" (formula "15") (term "1,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1"))
                           (rule "replace_known_left" (formula "15") (term "0,0,1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "8")))
                           (rule "inEqSimp_geqRight" (formula "15"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "1"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq1" (formula "2"))
                           (rule "times_zero_2" (formula "2") (term "1,0"))
                           (rule "add_zero_right" (formula "2") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                        (branch
                           (rule "getOfRemoveAny" (formula "15") (term "0"))
                           (rule "castDel" (formula "15") (term "2,2,2,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,1,0"))
                           (rule "mul_literals" (formula "15") (term "1,1,1,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "0,1,0,2,2,0"))
                           (rule "mul_literals" (formula "15") (term "1,0,1,0,2,2,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,1,0,2,2,0"))
                           (rule "mul_literals" (formula "15") (term "1,1,1,0,2,2,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,0,0,2,2,0"))
                           (rule "mul_literals" (formula "15") (term "1,1,0,0,2,2,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "1,1,2,0"))
                           (rule "mul_literals" (formula "15") (term "1,1,1,2,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "0,0,2,0"))
                           (rule "mul_literals" (formula "15") (term "1,0,0,2,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "0,1,1,2,2,0"))
                           (rule "mul_literals" (formula "15") (term "1,0,1,1,2,2,0"))
                           (rule "polySimp_addLiterals" (formula "15") (term "1,1,2,2,0"))
                           (rule "add_zero_right" (formula "15") (term "1,1,2,2,0"))
                           (rule "polySimp_addComm0" (formula "10") (term "1"))
                           (rule "polySimp_addComm0" (formula "15") (term "1,1,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "0,1,0,2,2,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "1,1,0,2,2,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "1,0,0,2,2,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "1,1,2,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "0,0,2,0"))
                           (rule "inEqSimp_ltRight" (formula "13"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                           (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "8"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,2,2,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,2,2,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,2,2,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,2,2,0"))
                           (rule "add_literals" (formula "15") (term "0,0,0,1,0,2,2,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0,1,0,2,2,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,2,2,0"))
                           (rule "add_literals" (formula "15") (term "0,0,0,1,0,2,2,0"))
                           (rule "replace_known_left" (formula "15") (term "1,0,2,2,0") (ifseqformula "8"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "inEqSimp_commuteLeq" (formula "4"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "0,2,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,2,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,0,2,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0,0,0,2,0"))
                           (rule "add_literals" (formula "15") (term "0,0,0,0,2,0"))
                           (rule "add_zero_left" (formula "15") (term "0,0,0,2,0"))
                           (rule "inEqSimp_homoInEq0" (formula "15") (term "0,2,2,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0,0,2,2,0"))
                           (rule "applyEq" (formula "15") (term "0,1,0,0") (ifseqformula "11"))
                           (rule "inEqSimp_homoInEq0" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,0,1,0,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "0,0,1,0,0"))
                           (rule "applyEq" (formula "15") (term "1,2,2,0") (ifseqformula "9"))
                           (rule "applyEqRigid" (formula "5") (term "0,1,0") (ifseqformula "11"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                           (rule "add_literals" (formula "5") (term "0,0,0"))
                           (rule "add_zero_left" (formula "5") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                           (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,2,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,0,2,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,0,2,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,2,2,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,2,2,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,0,2,2,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,0,2,2,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,2,2,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,0,2,2,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "15") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                           (rule "polySimp_elimOne" (formula "5") (term "0"))
                           (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "14"))
                           (rule "replace_known_left" (formula "15") (term "0,2,2,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0,0") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "15") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0") (ifseqformula "5"))
                           (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0,0"))
                           (rule "add_literals" (formula "15") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "15") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0,0,0"))
                           (rule "leq_literals" (formula "15") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "orRight" (formula "15"))
                           (rule "notRight" (formula "15"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
               )
            )
            (branch
               (rule "lenOfRemove" (formula "9") (term "0"))
               (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "2")))
               (rule "polySimp_elimSub" (formula "9") (term "0"))
               (rule "mul_literals" (formula "9") (term "1,0"))
               (rule "polySimp_homoEq" (formula "9"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
               (rule "polySimp_addComm0" (formula "6") (term "1"))
               (rule "polySimp_addComm0" (formula "9") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0"))
               (rule "polySimp_addComm0" (formula "9") (term "0,0"))
               (rule "applyEqRigid" (formula "9") (term "0,1,0") (ifseqformula "6"))
               (rule "polySimp_pullOutFactor1" (formula "9") (term "0"))
               (rule "add_literals" (formula "9") (term "1,0"))
               (rule "times_zero_1" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "closeTrue" (formula "9"))
            )
         )
         (branch
            (rule "allRight" (formula "10") (inst "sk=idx_2"))
            (rule "impRight" (formula "10"))
            (rule "andLeft" (formula "1"))
            (rule "cut" (inst "cutFormula=lt(idx_2, jv_0)"))
            (branch "CUT: idx_2 < jv_0 TRUE"
               (rule "allLeftHide" (formula "11") (inst "t=idx_2"))
               (rule "impLeft" (formula "11"))
               (branch
                  (rule "andRight" (formula "12"))
                  (branch
                     (rule "close" (formula "12") (ifseqformula "2"))
                  )
                  (branch
                     (rule "polySimp_addComm0" (formula "3") (term "1"))
                     (rule "polySimp_addComm0" (formula "9") (term "1"))
                     (rule "inEqSimp_ltRight" (formula "12"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "6") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "4"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                     (rule "add_literals" (formula "4") (term "0,0,0"))
                     (rule "add_zero_left" (formula "4") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "4") (term "0"))
                     (rule "applyEqRigid" (formula "6") (term "0,1,0") (ifseqformula "10"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                     (rule "mul_literals" (formula "6") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0"))
                     (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                     (rule "add_literals" (formula "6") (term "0,0,0"))
                     (rule "add_zero_left" (formula "6") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                     (rule "polySimp_elimOne" (formula "6") (term "0"))
                     (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
                     (rule "applyEq" (formula "7") (term "0") (ifseqformula "4"))
                     (rule "inEqSimp_commuteGeq" (formula "7"))
                     (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "2"))
                     (rule "andLeft" (formula "7"))
                     (rule "inEqSimp_homoInEq1" (formula "7"))
                     (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                     (rule "add_literals" (formula "7") (term "1,1,0"))
                     (rule "times_zero_1" (formula "7") (term "1,0"))
                     (rule "add_zero_right" (formula "7") (term "0"))
                     (rule "leq_literals" (formula "7"))
                     (rule "closeFalse" (formula "7"))
                  )
               )
               (branch
                  (rule "andLeft" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "getOfRemoveAny" (formula "11") (term "0,1"))
                  (rule "castDel" (formula "11") (term "2,2,2,0,1"))
                  (rule "replace_known_left" (formula "11") (term "0,2,0,1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "lenOfRemove" (formula "12") (term "1"))
                  (rule "replace_known_left" (formula "12") (term "0,0,1") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "5")))
                  (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "polySimp_elimSub" (formula "12") (term "1"))
                  (rule "mul_literals" (formula "12") (term "1,1"))
                  (rule "polySimp_addComm0" (formula "9") (term "1"))
                  (rule "polySimp_addComm0" (formula "12") (term "1"))
                  (rule "castedGetAny" (formula "12") (term "0"))
                  (rule "castedGetAny" (formula "15") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "12"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                  (rule "applyEqRigid" (formula "12") (term "0,1,0,0") (ifseqformula "9"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0"))
                  (rule "applyEq" (formula "15") (term "0,1,0,0,0") (ifseqformula "9"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0,0,0"))
                  (rule "add_literals" (formula "15") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "15") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1"))
                  (rule "polySimp_rightDist" (formula "12") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                  (rule "mul_literals" (formula "12") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,0"))
                  (rule "getOfRemoveAny" (formula "13") (term "0,0"))
                  (rule "castDel" (formula "13") (term "2,2,2,0,0"))
                  (rule "polySimp_elimSub" (formula "13") (term "1,1,0,2,2,0,0"))
                  (rule "mul_literals" (formula "13") (term "1,1,1,0,2,2,0,0"))
                  (rule "polySimp_addComm0" (formula "13") (term "1,1,2,2,0,0"))
                  (rule "polySimp_addComm0" (formula "13") (term "1,1,0,2,2,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "0,2,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,2,0,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,0,2,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,2,2,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,2,2,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,2,2,0,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,2,2,0,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,1,0,2,2,0,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,1,0,2,2,0,0"))
                  (rule "applyEqRigid" (formula "13") (term "0,1,0,1,0,2,2,0,0") (ifseqformula "9"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0,2,2,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0,2,2,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,1,0,2,2,0,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,2,2,0,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,0,1,0,2,2,0,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,1,0,2,2,0,0"))
                  (rule "applyEqRigid" (formula "13") (term "0,1,0,0,0") (ifseqformula "9"))
                  (rule "inEqSimp_homoInEq0" (formula "13") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "13") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,2,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "0,0,2,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "0,0,2,0,0"))
                  (rule "replace_known_left" (formula "13") (term "0,2,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "13"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_leqRight" (formula "15"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "getOfRemoveAny" (formula "13") (term "0"))
                  (rule "polySimp_elimSub" (formula "13") (term "1,1,0,2,2,0"))
                  (rule "mul_literals" (formula "13") (term "1,1,1,0,2,2,0"))
                  (rule "polySimp_addComm0" (formula "13") (term "1,1,2,2,0"))
                  (rule "polySimp_addComm0" (formula "13") (term "1,1,0,2,2,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "0,2,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,2,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,0,2,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,2,2,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,2,2,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,2,2,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,2,2,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,1,0,2,2,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,1,0,2,2,0"))
                  (rule "applyEq" (formula "13") (term "0,1,0,0") (ifseqformula "10"))
                  (rule "inEqSimp_homoInEq0" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0"))
                  (rule "polySimp_addComm0" (formula "13") (term "0,0,1,0,0"))
                  (rule "applyEq" (formula "13") (term "0,1,0,1,0,2,2,0") (ifseqformula "10"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0,2,2,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0,2,2,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,1,0,2,2,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,2,2,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,0,1,0,2,2,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,1,0,2,2,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,2,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "0,0,2,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "0,0,2,0"))
                  (rule "replace_known_left" (formula "13") (term "0,2,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "13"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "CUT: idx_2 < jv_0 FALSE"
               (rule "cut" (inst "cutFormula=lt(jv_0, idx_2)"))
               (branch "CUT: jv_0 < idx_2 TRUE"
                  (rule "allLeftHide" (formula "11") (inst "t=sub(idx_2, Z(1(#)))"))
                  (rule "impLeft" (formula "11"))
                  (branch
                     (rule "polySimp_elimSub" (formula "12") (term "1,0"))
                     (rule "mul_literals" (formula "12") (term "1,1,0"))
                     (rule "polySimp_elimSub" (formula "12") (term "0,1"))
                     (rule "mul_literals" (formula "12") (term "1,0,1"))
                     (rule "polySimp_addComm0" (formula "3") (term "1"))
                     (rule "polySimp_addComm0" (formula "12") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "3"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0"))
                     (rule "add_zero_left" (formula "3") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "3") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1"))
                     (rule "add_literals" (formula "12") (term "0,0,0,1"))
                     (rule "add_zero_left" (formula "12") (term "0,0,1"))
                     (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "inEqSimp_leqRight" (formula "12"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "3"))
                     (rule "inEqSimp_commuteLeq" (formula "5"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "mul_literals" (formula "2") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                     (rule "inEqSimp_invertInEq1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
                     (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "3"))
                     (rule "add_zero_right" (formula "2") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch
                     (rule "andLeft" (formula "11"))
                     (rule "andLeft" (formula "11"))
                     (rule "lenOfRemove" (formula "12") (term "1"))
                     (rule "replace_known_left" (formula "12") (term "1,0,1") (ifseqformula "5"))
                      (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "4")))
                     (rule "andRight" (formula "16"))
                     (branch
                        (rule "andRight" (formula "16"))
                        (branch
                           (rule "getOfRemoveAny" (formula "11") (term "0,1"))
                           (rule "castDel" (formula "11") (term "2,2,2,0,1"))
                           (rule "polySimp_elimSub" (formula "11") (term "0,1,1,2,2,0,1"))
                           (rule "mul_literals" (formula "11") (term "1,0,1,1,2,2,0,1"))
                           (rule "polySimp_addLiterals" (formula "11") (term "1,1,2,2,0,1"))
                           (rule "add_zero_right" (formula "11") (term "1,1,2,2,0,1"))
                           (rule "polySimp_elimSub" (formula "11") (term "1,0,0,2,2,0,1"))
                           (rule "mul_literals" (formula "11") (term "1,1,0,0,2,2,0,1"))
                           (rule "polySimp_elimSub" (formula "11") (term "0,1,0,2,2,0,1"))
                           (rule "mul_literals" (formula "11") (term "1,0,1,0,2,2,0,1"))
                           (rule "polySimp_elimSub" (formula "11") (term "1,1,0,2,2,0,1"))
                           (rule "mul_literals" (formula "11") (term "1,1,1,0,2,2,0,1"))
                           (rule "polySimp_elimSub" (formula "11") (term "1,1,0,1"))
                           (rule "mul_literals" (formula "11") (term "1,1,1,0,1"))
                           (rule "polySimp_elimSub" (formula "11") (term "0,0,2,0,1"))
                           (rule "mul_literals" (formula "11") (term "1,0,0,2,0,1"))
                           (rule "polySimp_elimSub" (formula "11") (term "1,1,2,0,1"))
                           (rule "mul_literals" (formula "11") (term "1,1,1,2,0,1"))
                           (rule "polySimp_addComm0" (formula "3") (term "1"))
                           (rule "polySimp_addComm0" (formula "9") (term "1"))
                           (rule "polySimp_addComm0" (formula "11") (term "1,0,0,2,2,0,1"))
                           (rule "polySimp_addComm0" (formula "11") (term "0,1,0,2,2,0,1"))
                           (rule "polySimp_addComm0" (formula "11") (term "1,1,0,2,2,0,1"))
                           (rule "polySimp_addComm0" (formula "11") (term "1,1,0,1"))
                           (rule "polySimp_addComm0" (formula "11") (term "0,0,2,0,1"))
                           (rule "polySimp_addComm0" (formula "11") (term "1,1,2,0,1"))
                           (rule "castedGetAny" (formula "16") (term "1"))
                           (rule "inEqSimp_ltToLeq" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1"))
                           (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,1"))
                           (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "3"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0"))
                           (rule "add_zero_left" (formula "3") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "3") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "16"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,2,2,0,1"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,2,2,0,1"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,2,2,0,1"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,2,2,0,1"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,2,2,0,1"))
                           (rule "polySimp_addComm1" (formula "12") (term "0,1,0,2,2,0,1"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,2,2,0,1"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,2,2,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "0,2,0,1"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,2,0,1"))
                           (rule "polySimp_addComm1" (formula "12") (term "0,0,2,0,1"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,2,0,1"))
                           (rule "add_literals" (formula "12") (term "0,0,0,0,2,0,1"))
                           (rule "add_zero_left" (formula "12") (term "0,0,0,2,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "5"))
                           (rule "inEqSimp_commuteLeq" (formula "12"))
                           (rule "applyEqRigid" (formula "12") (term "0,1,0,1,0,2,2,0,0") (ifseqformula "10"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,2,2,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0,2,2,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,1,0,2,2,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,2,2,0,0"))
                           (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0,2,2,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,2,2,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,1,0,2,2,0,0"))
                           (rule "replace_known_left" (formula "12") (term "1,0,2,2,0,0") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "applyEqRigid" (formula "6") (term "0,1,0") (ifseqformula "10"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                           (rule "add_literals" (formula "6") (term "0,0,0"))
                           (rule "add_zero_left" (formula "6") (term "0,0"))
                           (rule "applyEq" (formula "12") (term "0,1,0,0,0") (ifseqformula "10"))
                           (rule "inEqSimp_homoInEq0" (formula "12") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,0"))
                           (rule "polySimp_addComm0" (formula "12") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "replace_known_left" (formula "12") (term "0,2,2,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                           (rule "polySimp_elimOne" (formula "6") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "12") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,2,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "0,0,2,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "0,0,2,0,0"))
                           (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0,0,0") (ifseqformula "6"))
                           (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0"))
                           (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "12") (term "1,1,0,0,1,0,0,0"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0"))
                           (rule "leq_literals" (formula "12") (term "0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0,0") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "12") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "inEqSimp_contradInEq0" (formula "12") (term "0,0,0") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "12") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                           (rule "polySimp_addComm0" (formula "12") (term "0,0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "12") (term "1,1,0,0,0,0,0"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                           (rule "leq_literals" (formula "12") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "castedGetAny" (formula "12") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "12"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch
                           (rule "getOfRemoveAny" (formula "12") (term "0,0"))
                           (rule "castDel" (formula "12") (term "2,2,2,0,0"))
                           (rule "polySimp_elimSub" (formula "12") (term "1,1,0,2,2,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,1,1,0,2,2,0,0"))
                           (rule "polySimp_elimSub" (formula "12") (term "0,0,2,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,2,0,0"))
                           (rule "polySimp_elimSub" (formula "12") (term "1,0,0,2,2,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,1,0,0,2,2,0,0"))
                           (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,1,1,0,0"))
                           (rule "polySimp_elimSub" (formula "12") (term "0,1,0,2,2,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,1,0,2,2,0,0"))
                           (rule "polySimp_elimSub" (formula "12") (term "0,1,1,2,2,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,1,1,2,2,0,0"))
                           (rule "polySimp_addLiterals" (formula "12") (term "1,1,2,2,0,0"))
                           (rule "add_zero_right" (formula "12") (term "1,1,2,2,0,0"))
                           (rule "polySimp_elimSub" (formula "12") (term "1"))
                           (rule "mul_literals" (formula "12") (term "1,1"))
                           (rule "polySimp_elimSub" (formula "12") (term "1,1,2,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,1,1,2,0,0"))
                           (rule "polySimp_addComm0" (formula "3") (term "1"))
                           (rule "polySimp_addComm0" (formula "9") (term "1"))
                           (rule "polySimp_addComm0" (formula "12") (term "0,0,2,0,0"))
                           (rule "polySimp_addComm0" (formula "12") (term "1,0,0,2,2,0,0"))
                           (rule "polySimp_addComm0" (formula "12") (term "1,1,0,2,2,0,0"))
                           (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "12") (term "0,1,0,2,2,0,0"))
                           (rule "polySimp_addComm0" (formula "12") (term "1"))
                           (rule "polySimp_addComm0" (formula "12") (term "1,1,2,0,0"))
                           (rule "castedGetAny" (formula "16") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "3"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0"))
                           (rule "add_zero_left" (formula "3") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "3") (term "0"))
                           (rule "inEqSimp_ltRight" (formula "16"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "0,2,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,2,0,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0,0,2,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,2,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,0,2,0,0"))
                           (rule "add_zero_left" (formula "13") (term "0,0,0,2,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,2,2,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,2,2,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,2,2,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,2,2,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,1,0,2,2,0,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0,1,0,2,2,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,2,2,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,1,0,2,2,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "5"))
                           (rule "inEqSimp_ltToLeq" (formula "13"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0"))
                           (rule "applyEq" (formula "13") (term "0,1,0,1,0,2,2,0,1,0") (ifseqformula "10"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0,2,2,0,1,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0,2,2,0,1,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,1,0,2,2,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,2,2,0,1,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0,0,1,0,2,2,0,1,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,1,0,2,2,0,1,0"))
                           (rule "add_zero_left" (formula "13") (term "0,0,1,0,2,2,0,1,0"))
                           (rule "replace_known_left" (formula "13") (term "1,0,2,2,0,1,0") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "applyEqRigid" (formula "6") (term "0,1,0") (ifseqformula "10"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                           (rule "add_literals" (formula "6") (term "0,0,0"))
                           (rule "add_zero_left" (formula "6") (term "0,0"))
                           (rule "applyEqRigid" (formula "1") (term "0,0,0") (ifseqformula "10"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,0"))
                           (rule "applyEqRigid" (formula "13") (term "0,1,0,0,1,0") (ifseqformula "10"))
                           (rule "inEqSimp_homoInEq0" (formula "13") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0,0,1,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,1,0"))
                           (rule "polySimp_addComm0" (formula "13") (term "0,0,1,0,0,1,0"))
                           (rule "applyEq" (formula "13") (term "0,1,0,0") (ifseqformula "10"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "replace_known_left" (formula "13") (term "0,2,2,0,1,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                           (rule "polySimp_elimOne" (formula "6") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "13") (term "1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,2,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0,0,2,0,1,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0,0,2,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1"))
                           (rule "polySimp_rightDist" (formula "13") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                           (rule "mul_literals" (formula "13") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                           (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0,0,0") (ifseqformula "6"))
                           (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0"))
                           (rule "polySimp_addComm0" (formula "13") (term "0,0,0,1,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "13") (term "1,1,0,0,1,0,0,0"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0,0"))
                           (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,0"))
                           (rule "leq_literals" (formula "13") (term "0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "inEqSimp_contradInEq0" (formula "13") (term "0,2,0,0") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "13") (term "0,0,2,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,2,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,2,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0,0,2,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,2,0,0"))
                           (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,2,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,2,0,0"))
                           (rule "add_literals" (formula "13") (term "1,1,0,0,0,2,0,0"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0,0,2,0,0"))
                           (rule "add_zero_right" (formula "13") (term "0,0,0,2,0,0"))
                           (rule "leq_literals" (formula "13") (term "0,0,2,0,0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "inEqSimp_contradInEq1" (formula "13") (term "0,0,0") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "13") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "castedGetAny" (formula "13") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "13"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch
                        (rule "polySimp_elimSub" (formula "13") (term "1,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "3") (term "1"))
                        (rule "polySimp_addComm0" (formula "9") (term "1"))
                        (rule "polySimp_addComm0" (formula "13") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "3"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0"))
                        (rule "add_zero_left" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "3") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "4"))
                        (rule "applyEqRigid" (formula "5") (term "0,1,0") (ifseqformula "9"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                        (rule "add_literals" (formula "5") (term "0,0,0"))
                        (rule "add_zero_left" (formula "5") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                        (rule "polySimp_elimOne" (formula "5") (term "0"))
                        (rule "getOfRemoveAny" (formula "13") (term "0,0"))
                        (rule "castDel" (formula "13") (term "2,2,2,0,0"))
                        (rule "replace_known_left" (formula "13") (term "0,0,2,2,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "polySimp_elimSub" (formula "13") (term "1,0,2,2,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,1,0,2,2,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "1,1,2,2,0,0"))
                        (rule "add_literals" (formula "13") (term "0,1,1,2,2,0,0"))
                        (rule "add_zero_left" (formula "13") (term "1,1,2,2,0,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "1,0,2,2,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0"))
                        (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0,2,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,2,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,0,2,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,2,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,2,0,0"))
                        (rule "add_zero_left" (formula "13") (term "0,0,0,2,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0,2,2,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,2,2,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,0,2,2,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,2,2,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,2,2,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,0,2,2,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,2,2,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,2,2,0,0"))
                        (rule "applyEqRigid" (formula "13") (term "0,1,0,0,2,2,0,0") (ifseqformula "9"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,2,2,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,2,2,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,2,2,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,2,2,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,0,0,2,2,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,2,2,0,0"))
                        (rule "add_zero_left" (formula "13") (term "0,0,0,2,2,0,0"))
                        (rule "applyEqRigid" (formula "13") (term "0,1,0,0,0") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq0" (formula "13") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,2,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0,0,2,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "0,0,2,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,2,2,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0,0,2,2,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "0,0,2,2,0,0"))
                        (rule "replace_known_left" (formula "13") (term "0,2,2,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "13") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,0"))
                        (rule "inEqSimp_contradInEq0" (formula "13") (term "0,2,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "13") (term "0,0,2,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,2,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,2,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,0,2,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,2,0,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,2,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,2,0,0"))
                        (rule "add_literals" (formula "13") (term "1,1,0,0,0,2,0,0"))
                        (rule "times_zero_1" (formula "13") (term "1,0,0,0,2,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,2,0,0"))
                        (rule "leq_literals" (formula "13") (term "0,0,2,0,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_contradInEq1" (formula "13") (term "0,0,0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "13") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_contradInEq1" (formula "13") (term "0,0,0") (ifseqformula "5"))
                        (rule "inEqSimp_homoInEq1" (formula "13") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "1,1,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
                        (rule "leq_literals" (formula "13") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "16")))
                        (rule "closeFalse" (formula "13"))
                     )
                  )
               )
               (branch "CUT: jv_0 < idx_2 FALSE"
                  (rule "cut" (inst "cutFormula=!idx_2 = jv_0"))
                  (branch "CUT: !idx_2 = jv_0 TRUE"
                     (rule "notLeft" (formula "1"))
                     (rule "eqSymm" (formula "12"))
                     (rule "inEqSimp_ltRight" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "inEqSimp_ltRight" (formula "14"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_strengthen1" (formula "2") (ifseqformula "14"))
                     (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                     (rule "andLeft" (formula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "2"))
                     (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,1,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0"))
                     (rule "add_zero_right" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: !idx_2 = jv_0 FALSE"
                     (rule "notRight" (formula "12"))
                     (rule "andRight" (formula "15"))
                     (branch
                        (rule "andRight" (formula "15"))
                        (branch
                           (rule "cut" (inst "cutFormula=leq(Z(0(#)), (int)(any::seqGet(s_1, jv_0)))"))
                           (branch "CUT: 0 <= (int)(s_1[jv_0]) TRUE"
                              (rule "eqSymm" (formula "2"))
                              (rule "castedGetAny" (formula "16") (term "1"))
                              (rule "castedGetAny" (formula "1") (term "1"))
                              (rule "inEqSimp_leqRight" (formula "16"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "2"))
                              (rule "applyEqRigid" (formula "2") (term "1,0") (ifseqformula "3"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "CUT: 0 <= (int)(s_1[jv_0]) FALSE"
                              (rule "geq_to_leq" (formula "10"))
                              (rule "applyEqRigid" (formula "13") (term "0,1") (ifseqformula "6") (userinteraction))
                              (rule "castDel" (formula "13") (term "1") (userinteraction))
                              (rule "close" (formula "13") (ifseqformula "10") (userinteraction))
                           )
                        )
                        (branch
                           (rule "applyEq" (formula "15") (term "1,0,0") (ifseqformula "1") (userinteraction))
                           (rule "applyEqRigid" (formula "15") (term "0,0") (ifseqformula "6") (userinteraction))
                           (rule "castDel" (formula "15") (term "0") (userinteraction))
                           (rule "applyEqRigid" (formula "15") (term "1") (ifseqformula "9") (userinteraction))
                           (rule "polySimp_addComm0" (formula "15") (term "1"))
                           (rule "inEqSimp_ltRight" (formula "15"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "qeq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch
                        (rule "applyEqRigid" (formula "15") (term "1,0,0") (ifseqformula "1") (userinteraction))
                        (rule "applyEqRigid" (formula "15") (term "0,0") (ifseqformula "6") (userinteraction))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "closeTrue" (formula "15") (userinteraction))
                     )
                  )
               )
            )
         )
      )
   )
   (branch "Step Case (negative)"
      (rule "impRight" (formula "2"))
      (rule "andLeft" (formula "1"))
      (rule "allRight" (formula "4") (inst "sk=s_2"))
      (rule "impRight" (formula "4"))
      (rule "allRight" (formula "5") (inst "sk=idx_3"))
      (rule "impRight" (formula "5"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_elimSub" (formula "2") (term "1"))
      (rule "mul_literals" (formula "2") (term "1,1"))
      (rule "polySimp_addComm0" (formula "2") (term "1"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
      (rule "mul_literals" (formula "2") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
      (rule "add_literals" (formula "2") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "4"))
      (rule "add_zero_right" (formula "2") (term "0"))
      (rule "polySimp_rightDist" (formula "2") (term "0"))
      (rule "mul_literals" (formula "2") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
      (rule "qeq_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
)
}
