\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Apr 12 13:27:40 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:off, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\proofObligation {
	"name": "powMono",
	"class": "de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput",
 }

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "80a871ca3bac8bb405ecc216fcb6fa9ef6f8a395"))

(autoModeTime "0")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "f_base,f_exp,f_exp_2"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "powDef" (formula "4") (term "0") (inst "i=i") (userinteraction))
(rule "powDef" (formula "4") (term "1") (inst "i=i") (userinteraction))
(rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "1") (userinteraction))
 (builtin "One Step Simplification" (formula "4"))
(rule "cut_direct" (formula "4") (term "0,1") (userinteraction))
(branch "CUT: f_exp_2 >= 0 TRUE"
    (builtin "One Step Simplification" (formula "5"))
   (rule "int_induction" (inst "b=leq(bprod{int i;}(Z(0(#)), f_exp, f_base),
    bprod{int i;}(Z(0(#)), add(f_exp, nv), f_base))<<origin(\"User_Interaction @ node 35 (int_induction)\",\"[]\")>>") (inst "nv=nv") (userinteraction))
   (branch "Base Case"
      (rule "add_zero_right" (formula "5") (term "1,1"))
      (rule "inEqSimp_leqRight" (formula "5"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "qeq_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Step Case"
      (rule "allRight" (formula "5") (inst "sk=nv_0") (userinteraction))
      (rule "impRight" (formula "5"))
      (rule "andLeft" (formula "1"))
      (rule "bprod_induction_upper" (formula "7") (term "1") (userinteraction))
      (rule "ifthenelse_split" (formula "7") (term "1,1") (userinteraction))
      (branch "0 < f_exp + (nv_0 + 1) TRUE"
         (rule "eqTermCut" (formula "8") (term "0,1") (inst "s=bprod{int i;}(Z(0(#)), add(f_exp, nv_0), f_base)") (userinteraction))
         (branch "Assume bprod{int i;}(0, f_exp + (nv_0 + 1) - 1, f_base) = bprod{int i;}(0, f_exp + nv_0, f_base)"
            (rule "applyEqRigid" (formula "9") (term "0,1") (ifseqformula "1") (userinteraction))
            (rule "pullOut" (formula "9") (term "0,1") (inst "sk=bprod_0") (userinteraction))
            (rule "applyEq" (formula "5") (term "1") (ifseqformula "1") (userinteraction))
            (rule "cut" (inst "cutFormula=leq(bprod_0, mul(bprod_0, f_base))<<origin(\"User_Interaction @ node 3635 (cut)\",\"[]\")>>") (userinteraction))
            (branch "CUT: bprod_0 <= bprod_0 * f_base TRUE"
               (rule "polySimp_mulComm0" (formula "11") (term "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "inEqSimp_leqRight" (formula "11"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "2"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0"))
               (rule "polySimp_addComm0" (formula "2") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "mul_literals" (formula "2") (term "0,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "8"))
               (rule "andLeft" (formula "2"))
               (rule "inEqSimp_homoInEq1" (formula "2"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "1,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,0"))
               (rule "add_zero_right" (formula "2") (term "0"))
               (rule "leq_literals" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
            (branch "CUT: bprod_0 <= bprod_0 * f_base FALSE"
               (rule "bprod_all_positive" (formula "1") (term "0") (userinteraction))
               (rule "impLeft" (formula "1") (userinteraction))
               (branch
                  (rule "allRight" (formula "10") (inst "sk=i_0"))
                  (rule "impRight" (formula "10"))
                  (rule "inEqSimp_geqRight" (formula "11"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "11") (term "0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "closeFalse" (formula "11"))
               )
               (branch
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "2") (userinteraction))
                  (rule "cut" (inst "cutFormula=gt(f_base, Z(1(#)))<<origin(\"User_Interaction @ node 4827 (cut)\",\"[]\")>>") (userinteraction))
                  (branch "CUT: f_base > 1 TRUE"
                     (rule "inEqSimp_gtToGeq" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1"))
                     (rule "inEqSimp_leqRight" (formula "12"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "multiply_2_inEq3" (formula "2") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "2") (term "1,1"))
                     (rule "times_zero_1" (formula "2") (term "0,0,1"))
                     (rule "add_zero_right" (formula "2") (term "1"))
                     (rule "add_zero_left" (formula "2") (term "1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                     (rule "polySimp_mulAssoc" (formula "2") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0"))
                     (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,1,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "5") (term "0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "closeFalse" (formula "5"))
                  )
                  (branch "CUT: f_base > 1 FALSE"
                     (rule "polySimp_mulComm0" (formula "12") (term "1"))
                     (rule "inEqSimp_gtRight" (formula "11"))
                     (rule "mul_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_leqRight" (formula "12"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_antiSymm" (formula "12") (ifseqformula "2"))
                     (rule "applyEqRigid" (formula "1") (term "0,0") (ifseqformula "12"))
                     (rule "polySimp_elimOneLeft0" (formula "1") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "1"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "qeq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
         )
         (branch "Assume bprod{int i;}(0, f_exp + (nv_0 + 1) - 1, f_base) != bprod{int i;}(0, f_exp + nv_0, f_base)"
            (rule "notLeft" (formula "1"))
            (rule "polySimp_elimSub" (formula "8") (term "1,0"))
            (rule "mul_literals" (formula "8") (term "1,1,0"))
            (rule "polySimp_addComm0" (formula "8") (term "1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,1,0"))
            (rule "polySimp_addComm1" (formula "8") (term "1,0"))
            (rule "polySimp_addLiterals" (formula "8") (term "0,1,0"))
            (rule "add_zero_right" (formula "8") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "closeTrue" (formula "8"))
         )
      )
      (branch "0 < f_exp + (nv_0 + 1) FALSE"
         (rule "polySimp_elimOne" (formula "8") (term "1"))
         (rule "polySimp_elimSub" (formula "8") (term "1,1"))
         (rule "mul_literals" (formula "8") (term "1,1,1"))
         (rule "polySimp_addComm0" (formula "8") (term "1,0,1,1"))
         (rule "polySimp_addAssoc" (formula "8") (term "0,1,1"))
         (rule "polySimp_addComm1" (formula "8") (term "1,1"))
         (rule "polySimp_addLiterals" (formula "8") (term "0,1,1"))
         (rule "add_zero_right" (formula "8") (term "0,1,1"))
         (rule "close" (formula "8") (ifseqformula "2"))
      )
   )
   (branch "Use Case"
      (rule "allLeftHide" (formula "1") (inst "t=sub(f_exp_2, f_exp)") (userinteraction))
      (rule "polySimp_elimSub" (formula "1") (term "1,1,1,1"))
      (rule "polySimp_elimSub" (formula "1") (term "0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "1,1,1,1"))
      (rule "polySimp_addComm0" (formula "1") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "1,1,1"))
      (rule "polySimp_pullOutFactor1" (formula "1") (term "0,1,1,1"))
      (rule "add_literals" (formula "1") (term "1,0,1,1,1"))
      (rule "times_zero_1" (formula "1") (term "0,1,1,1"))
      (rule "add_zero_left" (formula "1") (term "1,1,1"))
      (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_geqRight" (formula "5"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
      (rule "andLeft" (formula "4"))
      (rule "inEqSimp_homoInEq1" (formula "4"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,0"))
      (rule "mul_literals" (formula "4") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "4") (term "0"))
      (rule "polySimp_addComm0" (formula "4") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
      (rule "add_literals" (formula "4") (term "1,1,0"))
      (rule "times_zero_1" (formula "4") (term "1,0"))
      (rule "add_zero_right" (formula "4") (term "0"))
      (rule "leq_literals" (formula "4"))
      (rule "closeFalse" (formula "4"))
   )
)
(branch "CUT: f_exp_2 >= 0 FALSE"
   (rule "inEqSimp_geqRight" (formula "4"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
   (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
   (rule "polySimp_addComm0" (formula "3") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "polySimp_elimOne" (formula "3") (term "0"))
   (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "3"))
   (rule "qeq_literals" (formula "2") (term "0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "closeFalse" (formula "2"))
)
)
}
