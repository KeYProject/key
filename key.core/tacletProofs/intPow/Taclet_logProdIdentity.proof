\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Apr 12 13:25:56 CEST 2023
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, finalFields-finalFields\\:immutable, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:on, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_COMPLETION
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\proofObligation {
	"name": "logProdIdentity",
	"class": "de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput",
 }

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "80a871ca3bac8bb405ecc216fcb6fa9ef6f8a395"))

(autoModeTime "0")

(branch "dummy ID"
(rule "notRight" (formula "1") (newnames "f_base,v_i,f_exp"))
(rule "impLeft" (formula "1") (userinteraction))
(branch
    (builtin "One Step Simplification" (formula "1"))
   (rule "closeTrue" (formula "1"))
)
(branch
   (rule "notLeft" (formula "1"))
   (rule "impRight" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "int_induction" (inst "b=(log(f_base, bprod{int v_i;}(Z(0(#)), nv, f_base)) = nv)<<origin(\"User_Interaction @ node 8 (int_induction)\",\"[]\")>>") (inst "nv=nv") (userinteraction))
   (branch "Base Case"
      (rule "bprod_lower_equals_upper" (formula "3") (term "1,0") (userinteraction))
      (rule "logDefinition" (formula "3") (term "0") (userinteraction))
      (rule "ifthenelse_split" (formula "3") (term "0") (userinteraction))
      (branch "1 >= 1 & f_base > 1 TRUE"
          (builtin "One Step Simplification" (formula "4"))
         (rule "orRight" (formula "4"))
         (rule "inEqSimp_ltRight" (formula "4"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0"))
         (rule "inEqSimp_gtToGeq" (formula "4"))
         (rule "mul_literals" (formula "4") (term "1,0,0"))
         (rule "add_literals" (formula "4") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "4"))
         (rule "mul_literals" (formula "4") (term "1"))
         (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
         (rule "qeq_literals" (formula "4") (term "0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "closeFalse" (formula "4"))
      )
      (branch "1 >= 1 & f_base > 1 FALSE"
         (rule "qeq_literals" (formula "3") (term "0"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")))
         (rule "closeTrue" (formula "3"))
      )
   )
   (branch "Step Case"
      (rule "allRight" (formula "3") (inst "sk=nv_0") (userinteraction))
      (rule "impRight" (formula "3"))
      (rule "andLeft" (formula "1"))
      (rule "logDefinition" (formula "5") (term "0") (userinteraction))
      (rule "ifthenelse_split" (formula "5") (term "0") (userinteraction))
      (branch "bprod{int v_i;}(0, nv_0 + 1, f_base) >= 1 & f_base > 1 TRUE"
         (rule "ifthenelse_split" (formula "6") (term "0") (userinteraction))
         (branch "bprod{int v_i;}(0, nv_0 + 1, f_base) < f_base TRUE"
            (rule "andLeft" (formula "2"))
            (rule "logDefinition" (formula "4") (term "0") (userinteraction))
            (rule "ifthenelse_split" (formula "4") (term "0") (userinteraction))
            (branch "bprod{int v_i;}(0, nv_0, f_base) >= 1 & f_base > 1 TRUE"
               (rule "andLeft" (formula "4"))
               (rule "bprod_induction_upper" (formula "1") (term "0") (userinteraction))
               (rule "polySimp_elimSub" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_addLiterals" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0"))
               (rule "polySimp_addComm0" (formula "1") (term "1,0,0,0"))
               (rule "inEqSimp_gtToGeq" (formula "7"))
               (rule "mul_literals" (formula "7") (term "1,0,0"))
               (rule "add_literals" (formula "7") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0,1,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7"))
               (rule "mul_literals" (formula "7") (term "1"))
               (rule "inEqSimp_invertInEq0" (formula "1") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,0"))
               (rule "times_zero_2" (formula "1") (term "1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,0"))
               (rule "replace_known_left" (formula "1") (term "0,0,1,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "multiply_2_inEq3" (formula "4") (ifseqformula "7"))
               (rule "neg_literal" (formula "4") (term "0,0,0,1"))
               (rule "mul_literals" (formula "4") (term "0,0,1"))
               (rule "polySimp_elimOneLeft0" (formula "4") (term "1,0,1"))
               (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
               (rule "polySimp_rightDist" (formula "4") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0"))
               (rule "polySimp_rightDist" (formula "4") (term "0,0,0"))
               (rule "mul_literals" (formula "4") (term "0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
               (rule "add_literals" (formula "4") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "4") (term "0,0"))
               (rule "add_literals" (formula "4") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "4") (term "1,0,0"))
               (rule "add_zero_right" (formula "4") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "inEqSimp_contradInEq5" (formula "4") (ifseqformula "6"))
               (rule "greater_literals" (formula "4") (term "0,0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1,0"))
               (rule "qeq_literals" (formula "4") (term "0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "closeFalse" (formula "4"))
            )
            (branch "bprod{int v_i;}(0, nv_0, f_base) >= 1 & f_base > 1 FALSE"
               (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "6"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "polySimp_addComm0" (formula "2") (term "1,0"))
               (rule "bprod_induction_upper_concrete" (formula "2") (term "0"))
               (rule "polySimp_mulComm0" (formula "2") (term "0"))
               (rule "inEqSimp_geqRight" (formula "7"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
               (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "0"))
               (rule "inEqSimp_gtToGeq" (formula "7"))
               (rule "mul_literals" (formula "7") (term "1,0,0"))
               (rule "add_literals" (formula "7") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7"))
               (rule "mul_literals" (formula "7") (term "1"))
               (rule "divide_inEq5" (formula "3") (inst "divY=f_base") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "qeq_literals" (formula "3") (term "0,1"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "leq_literals" (formula "3") (term "0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "3"))
               (rule "qeq_literals" (formula "8") (term "0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "closeFalse" (formula "8"))
            )
         )
         (branch "bprod{int v_i;}(0, nv_0 + 1, f_base) < f_base FALSE"
            (rule "polySimp_homoEq" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
            (rule "polySimp_addComm0" (formula "7") (term "0,0"))
            (rule "polySimp_addComm0" (formula "7") (term "1,0,1,1,1,1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0"))
            (rule "mul_literals" (formula "7") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0"))
            (rule "polySimp_addComm1" (formula "7") (term "0,0"))
            (rule "add_literals" (formula "7") (term "0,0,0"))
            (rule "add_zero_left" (formula "7") (term "0,0"))
            (rule "bprod_induction_upper_concrete" (formula "7") (term "0,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0,1,0"))
            (rule "replace_known_left" (formula "7") (term "0,0,0,1,0,1,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,1,0"))
            (rule "polySimp_sepNegMonomial" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0"))
            (rule "polySimp_elimOne" (formula "7") (term "0"))
            (rule "inEqSimp_gtToGeq" (formula "5"))
            (rule "mul_literals" (formula "5") (term "1,0,0"))
            (rule "add_literals" (formula "5") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "5"))
            (rule "mul_literals" (formula "5") (term "1"))
            (rule "polyDiv_pullOut" (formula "7") (term "1,0") (inst "polyDivCoeff=bprod{int v_i;}(Z(0(#)), nv_0, f_base)"))
            (rule "polySimp_mulComm1" (formula "7") (term "1,0,0,2,1,0"))
            (rule "polySimp_pullOutFactor1" (formula "7") (term "0,0,2,1,0"))
            (rule "add_literals" (formula "7") (term "1,0,0,2,1,0"))
            (rule "times_zero_1" (formula "7") (term "0,0,2,1,0"))
            (rule "inEqSimp_contradEq7" (formula "7") (term "0,1,0") (ifseqformula "5"))
            (rule "times_zero_1" (formula "7") (term "1,0,0,0,1,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,0,1,0"))
            (rule "leq_literals" (formula "7") (term "0,0,1,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "polyDiv_zero" (formula "7") (term "0,1,0"))
            (rule "div_literals" (formula "7") (term "1,0,1,0"))
            (rule "polySimp_addComm0" (formula "7") (term "1,0"))
            (rule "inEqSimp_contradEq7" (formula "7") (term "0,1,1,0") (ifseqformula "5"))
            (rule "times_zero_1" (formula "7") (term "1,0,0,0,1,1,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,0,1,1,0"))
            (rule "leq_literals" (formula "7") (term "0,0,1,1,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "add_zero_right" (formula "7") (term "1,0"))
            (rule "close" (formula "7") (ifseqformula "3"))
         )
      )
      (branch "bprod{int v_i;}(0, nv_0 + 1, f_base) >= 1 & f_base > 1 FALSE"
         (rule "andRight" (formula "5") (userinteraction))
         (branch
            (rule "int_induction" (inst "b=geq(bprod{int v_i;}(Z(0(#)), nv, f_base), Z(1(#)))<<origin(\"User_Interaction @ node 181 (int_induction)\",\"[]\")>>") (inst "nv=nv") (userinteraction))
            (branch "Base Case"
               (rule "bprod_lower_equals_upper" (formula "5") (term "0"))
               (rule "qeq_literals" (formula "5"))
               (rule "closeTrue" (formula "5"))
            )
            (branch "Step Case"
               (rule "allRight" (formula "5") (inst "sk=nv_1"))
               (rule "impRight" (formula "5"))
               (rule "andLeft" (formula "1"))
               (rule "polySimp_addComm0" (formula "7") (term "1,0"))
               (rule "bprod_induction_upper_concrete" (formula "7") (term "0"))
               (rule "polySimp_mulComm0" (formula "7") (term "0"))
               (rule "inEqSimp_gtToGeq" (formula "6"))
               (rule "mul_literals" (formula "6") (term "1,0,0"))
               (rule "add_literals" (formula "6") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "7"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7"))
               (rule "mul_literals" (formula "7") (term "1"))
               (rule "divide_inEq0" (formula "1") (inst "divY=f_base") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "qeq_literals" (formula "1") (term "0,1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "qeq_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
               (rule "qeq_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Use Case"
               (rule "polySimp_addComm0" (formula "6") (term "1,0"))
               (rule "bprod_induction_upper_concrete" (formula "6") (term "0"))
               (rule "polySimp_mulComm0" (formula "6") (term "0"))
               (rule "inEqSimp_geqRight" (formula "6"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_gtToGeq" (formula "6"))
               (rule "mul_literals" (formula "6") (term "1,0,0"))
               (rule "add_literals" (formula "6") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "6"))
               (rule "mul_literals" (formula "6") (term "1"))
               (rule "divide_inEq0" (formula "1") (inst "divY=bprod{int v_i;}(Z(0(#)), nv_0, f_base)") (ifseqformula "6"))
               (rule "qeq_literals" (formula "1") (term "0,1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "div_literals" (formula "1") (term "1,1,1"))
               (rule "qeq_literals" (formula "1") (term "0,1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "nnf_imp2or" (formula "3") (term "0"))
               (rule "inEqSimp_notGeq" (formula "3") (term "0,0"))
               (rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0"))
               (rule "mul_literals" (formula "3") (term "1,0,0"))
               (rule "allLeft" (formula "3") (inst "t=nv_0"))
               (rule "inEqSimp_contradInEq0" (formula "3") (term "1") (ifseqformula "1"))
               (rule "qeq_literals" (formula "3") (term "0,1"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "3"))
               (rule "qeq_literals" (formula "5") (term "0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "closeFalse" (formula "5"))
            )
         )
         (branch
            (rule "close" (formula "5") (ifseqformula "4"))
         )
      )
   )
   (branch "Use Case"
      (rule "instAll" (formula "4") (term "1,1,0") (ifseqformula "1") (userinteraction))
      (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
      (rule "closeFalse" (formula "1"))
   )
)
)
}
