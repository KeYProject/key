\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Apr 12 13:20:57 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on, Strings-Strings\\:on, assertions-assertions\\:on, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:showSatisfiability, moreSeqRules-moreSeqRules\\:off, nullPointerPolicy-nullPointerPolicy\\:nullCheck, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_NORMAL
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\proofObligation {
	"name": "div_zero",
	"class": "de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput",
 }

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "80a871ca3bac8bb405ecc216fcb6fa9ef6f8a395"))

(autoModeTime "0")

(branch "dummy ID"
(rule "notRight" (formula "1") (newnames "f_divDenom"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
 (builtin "One Step Simplification" (formula "1"))
(rule "notLeft" (formula "1") (userinteraction))
(rule "div_axiom" (formula "2") (term "0") (inst "quotient=quotient_0") (userinteraction))
(rule "replace_known_right" (formula "1") (term "0") (ifseqformula "2") (userinteraction))
 (builtin "One Step Simplification" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "1") (userinteraction))
(rule "cut" (inst "cutFormula=geq(f_divDenom, Z(0(#)))") (userinteraction))
(branch "CUT: f_divDenom >= 0 TRUE"
   (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "1") (userinteraction))
    (builtin "One Step Simplification" (formula "4"))
   (rule "add_zero_right" (formula "4") (term "0,1") (userinteraction))
   (rule "times_minus_one_2" (formula "4") (term "1,1") (userinteraction))
   (rule "cut" (inst "cutFormula=gt(f_divDenom, Z(0(#)))") (userinteraction))
   (branch "CUT: f_divDenom > 0 TRUE"
      (rule "cut" (inst "cutFormula=gt(quotient_0, Z(0(#)))") (userinteraction))
      (branch "CUT: quotient_0 > 0 TRUE"
         (rule "polySimp_mulComm0" (formula "5") (term "0"))
         (rule "inEqSimp_gtToGeq" (formula "1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "inEqSimp_gtToGeq" (formula "2"))
         (rule "times_zero_1" (formula "2") (term "1,0,0"))
         (rule "add_zero_right" (formula "2") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "mul_literals" (formula "2") (term "1"))
         (rule "divide_inEq0" (formula "5") (inst "divY=f_divDenom") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "qeq_literals" (formula "5") (term "0,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "qeq_literals" (formula "5") (term "0,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "eqSymm" (formula "5") (term "0"))
         (rule "polySimp_mulComm0" (formula "5") (term "0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "2"))
         (rule "qeq_literals" (formula "5") (term "0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "closeFalse" (formula "5"))
      )
      (branch "CUT: quotient_0 > 0 FALSE"
         (rule "cut" (inst "cutFormula=lt(quotient_0, Z(0(#)))") (userinteraction))
         (branch "CUT: quotient_0 < 0 TRUE"
            (rule "cut" (inst "cutFormula=gt(mul(quotient_0, f_divDenom), neg(f_divDenom))") (userinteraction))
            (branch "CUT: quotient_0 * f_divDenom > -f_divDenom TRUE"
               (rule "gt_to_lt" (formula "1") (userinteraction))
               (rule "lt_to_gt" (formula "1") (userinteraction))
               (rule "cut" (inst "cutFormula=gt(add(mul(quotient_0, f_divDenom), f_divDenom),
   Z(0(#)))") (userinteraction))
               (branch "CUT: quotient_0 * f_divDenom + f_divDenom > 0 TRUE"
                  (rule "cut" (inst "cutFormula=gt(mul(add(quotient_0, Z(1(#))), f_divDenom), Z(0(#)))") (userinteraction))
                  (branch "CUT: (quotient_0 + 1) * f_divDenom > 0 TRUE"
                     (rule "cut" (inst "cutFormula=leq(add(quotient_0, Z(1(#))), Z(0(#)))") (userinteraction))
                     (branch "CUT: quotient_0 + 1 <= 0 TRUE"
                        (rule "mul_comm" (formula "2") (term "0") (userinteraction))
                        (rule "cut" (inst "cutFormula=leq(mul(add(quotient_0, Z(1(#))), f_divDenom), Z(0(#)))") (userinteraction))
                        (branch "CUT: (quotient_0 + 1) * f_divDenom <= 0 TRUE"
                           (rule "polySimp_mulComm0" (formula "1") (term "0"))
                           (rule "polySimp_addComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                           (rule "inEqSimp_gtToGeq" (formula "3"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "CUT: (quotient_0 + 1) * f_divDenom <= 0 FALSE"
                           (rule "multiply_inEq0" (formula "1") (inst "multFac=f_divDenom") (userinteraction))
                           (rule "times_zero_2" (formula "1") (term "1,1") (userinteraction))
                           (rule "times_zero_2" (formula "1") (term "1,2") (userinteraction))
                           (rule "cut_direct" (formula "1") (term "0") (userinteraction))
                           (branch "CUT: f_divDenom >= 0 TRUE"
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
                              (rule "closeFalse" (formula "1") (userinteraction))
                           )
                           (branch "CUT: f_divDenom >= 0 FALSE"
                              (rule "inEqSimp_geqRight" (formula "12"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_gtToGeq" (formula "8"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                              (rule "mul_literals" (formula "8") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                     )
                     (branch "CUT: quotient_0 + 1 <= 0 FALSE"
                        (rule "polySimp_addComm0" (formula "10") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "10"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "5"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                        (rule "mul_literals" (formula "5") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "CUT: (quotient_0 + 1) * f_divDenom > 0 FALSE"
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "polySimp_addComm0" (formula "9") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                     (rule "close" (formula "9") (ifseqformula "1"))
                  )
               )
               (branch "CUT: quotient_0 * f_divDenom + f_divDenom > 0 FALSE"
                  (rule "polySimp_elimNeg" (formula "1") (term "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "0"))
                  (rule "inEqSimp_gtRight" (formula "8"))
                  (rule "times_zero_1" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_gtToGeq" (formula "2"))
                  (rule "polySimp_mulAssoc" (formula "2") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "CUT: quotient_0 * f_divDenom > -f_divDenom FALSE"
               (rule "polySimp_elimNeg" (formula "7") (term "1"))
               (rule "polySimp_elimNeg" (formula "6") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "6") (term "0"))
               (rule "polySimp_mulComm0" (formula "7") (term "0"))
               (rule "inEqSimp_gtRight" (formula "7"))
               (rule "polySimp_mulAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_homoInEq1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
               (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "leq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "CUT: quotient_0 < 0 FALSE"
            (rule "inEqSimp_gtRight" (formula "7"))
            (rule "times_zero_1" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_ltRight" (formula "7"))
            (rule "times_zero_1" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "9"))
            (rule "add_zero_right" (formula "2") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
      )
   )
   (branch "CUT: f_divDenom > 0 FALSE"
      (rule "inEqSimp_gtRight" (formula "5"))
      (rule "times_zero_1" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "6"))
      (rule "add_zero_right" (formula "1") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
      (rule "qeq_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "CUT: f_divDenom >= 0 FALSE"
   (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "4") (userinteraction))
    (builtin "One Step Simplification" (formula "3"))
   (rule "add_zero_right" (formula "3") (term "0,1") (userinteraction))
   (rule "cut" (inst "cutFormula=lt(f_divDenom, Z(0(#)))") (userinteraction))
   (branch "CUT: f_divDenom < 0 TRUE"
      (rule "cut" (inst "cutFormula=geq(quotient_0, Z(0(#)))") (userinteraction))
      (branch "CUT: quotient_0 >= 0 TRUE"
         (rule "cut" (inst "cutFormula=gt(quotient_0, Z(0(#)))") (userinteraction))
         (branch "CUT: quotient_0 > 0 TRUE"
            (rule "cut" (inst "cutFormula=gt(mul(quotient_0, f_divDenom), f_divDenom)") (userinteraction))
            (branch "CUT: quotient_0 * f_divDenom > f_divDenom TRUE"
               (rule "cut" (inst "cutFormula=gt(sub(mul(quotient_0, f_divDenom), f_divDenom),
   Z(0(#)))") (userinteraction))
               (branch "CUT: quotient_0 * f_divDenom - f_divDenom > 0 TRUE"
                  (rule "cut" (inst "cutFormula=gt(mul(sub(quotient_0, Z(1(#))), f_divDenom), Z(0(#)))") (userinteraction))
                  (branch "CUT: (quotient_0 - 1) * f_divDenom > 0 TRUE"
                     (rule "sub" (formula "1") (term "0,0") (userinteraction))
                     (rule "neg_literal" (formula "1") (term "1,0,0") (userinteraction))
                     (rule "cut" (inst "cutFormula=geq(sub(quotient_0, Z(1(#))), Z(0(#)))") (userinteraction))
                     (branch "CUT: quotient_0 - 1 >= 0 TRUE"
                        (rule "sub" (formula "1") (term "0") (userinteraction))
                        (rule "neg_literal" (formula "1") (term "1,0") (userinteraction))
                        (rule "cut" (inst "cutFormula=leq(mul(add(quotient_0, Z(neglit(1(#)))), f_divDenom),
    Z(0(#)))") (userinteraction))
                        (branch "CUT: (quotient_0 + -1) * f_divDenom <= 0 TRUE"
                           (rule "polySimp_mulComm0" (formula "3") (term "0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0"))
                           (rule "polySimp_addComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                           (rule "inEqSimp_gtToGeq" (formula "3"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "CUT: (quotient_0 + -1) * f_divDenom <= 0 FALSE"
                           (rule "multiply_inEq1" (formula "1") (inst "multFac=f_divDenom") (userinteraction))
                           (rule "cut_direct" (formula "1") (term "0") (userinteraction))
                           (branch "CUT: f_divDenom >= 0 TRUE"
                              (rule "inEqSimp_ltToLeq" (formula "9"))
                              (rule "times_zero_1" (formula "9") (term "1,0,0"))
                              (rule "add_zero_right" (formula "9") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                              (rule "mul_literals" (formula "9") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "9"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "CUT: f_divDenom >= 0 FALSE"
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "times_zero_2" (formula "1") (term "1") (userinteraction))
                              (rule "close" (formula "12") (ifseqformula "1") (userinteraction))
                           )
                        )
                     )
                     (branch "CUT: quotient_0 - 1 >= 0 FALSE"
                        (rule "polySimp_elimSub" (formula "10") (term "0"))
                        (rule "mul_literals" (formula "10") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "10") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "10"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_gtToGeq" (formula "5"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "mul_literals" (formula "5") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "5") (term "0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "closeFalse" (formula "5"))
                     )
                  )
                  (branch "CUT: (quotient_0 - 1) * f_divDenom > 0 FALSE"
                     (rule "polySimp_elimSub" (formula "9") (term "0,0"))
                     (rule "mul_literals" (formula "9") (term "1,0,0"))
                     (rule "polySimp_elimSub" (formula "1") (term "0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "9") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "polySimp_rightDist" (formula "9") (term "0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                     (rule "close" (formula "9") (ifseqformula "1"))
                  )
               )
               (branch "CUT: quotient_0 * f_divDenom - f_divDenom > 0 FALSE"
                  (rule "polySimp_elimSub" (formula "8") (term "0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "0"))
                  (rule "inEqSimp_gtRight" (formula "8"))
                  (rule "times_zero_1" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_gtToGeq" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "CUT: quotient_0 * f_divDenom > f_divDenom FALSE"
               (rule "polySimp_mulComm0" (formula "7") (term "0"))
               (rule "polySimp_mulComm0" (formula "6") (term "0"))
               (rule "inEqSimp_gtRight" (formula "7"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
               (rule "andLeft" (formula "7"))
               (rule "inEqSimp_homoInEq1" (formula "7"))
               (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
               (rule "add_literals" (formula "7") (term "1,1,0"))
               (rule "times_zero_1" (formula "7") (term "1,0"))
               (rule "add_zero_right" (formula "7") (term "0"))
               (rule "leq_literals" (formula "7"))
               (rule "closeFalse" (formula "7"))
            )
         )
         (branch "CUT: quotient_0 > 0 FALSE"
            (rule "inEqSimp_gtRight" (formula "6"))
            (rule "times_zero_1" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "9"))
            (rule "add_zero_right" (formula "1") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "CUT: quotient_0 >= 0 FALSE"
         (rule "polySimp_mulComm0" (formula "3") (term "0"))
         (rule "inEqSimp_geqRight" (formula "6"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "inEqSimp_geqRight" (formula "6"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2"))
         (rule "mul_literals" (formula "2") (term "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "divide_inEq6" (formula "5") (inst "divY=f_divDenom") (ifseqformula "1"))
         (rule "leq_literals" (formula "5") (term "0,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "qeq_literals" (formula "5") (term "0,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "div_literals" (formula "5") (term "1,1"))
         (rule "eqSymm" (formula "5") (term "0"))
         (rule "polySimp_mulComm0" (formula "5") (term "0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "5"))
         (rule "qeq_literals" (formula "2") (term "0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "closeFalse" (formula "2"))
      )
   )
   (branch "CUT: f_divDenom < 0 FALSE"
      (rule "inEqSimp_geqRight" (formula "5"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "inEqSimp_ltRight" (formula "5"))
      (rule "times_zero_1" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2"))
      (rule "mul_literals" (formula "2") (term "1"))
      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
      (rule "qeq_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
)
}
