
//
//

// *** THESE RULES ARE FOR JUnit TESTS. PLEASE DO NOT MODIFY! ***
// *** THIS FILE WILL BE MOVED TO A DIFFERENT PLACE. ***
// Input file for KeY standalone prover version 0.497

\programVariables {
	int i;
	int j;
}

\sorts {
	nat;
	int;
	s;
	\generic G;
}

\predicates {  
	p(s);
	A;
	B;
	D;
}
\functions {
	s const;
	s f(s);
}

\heuristicsDecl {
  simplify;
  split;
}

\schemaVariables {
	\modalOperator {box, diamond} #diabox;
        \modalOperator {#diabox} #diabox2;
	\modalOperator {diamond} #dia;
	\modalOperator {box} #box;
	\formula b,c, d, e, post, p1, p2, p3;
	\program Statement #p1, #p2 ; 
	\program Expression #e, #e2 ; 
	\program[list] Statement #slist, #slist1, #slist2 ;
	\program[list] Catch #cs ;
	\program Type #t, #t2 ;
	\program Variable #v, #v1, #v2, #v3 ;
	\program MethodName #mn;
        \program Label #l ;
	\term s w0 ;
	\term s w1 ;
	\term G g1 ;
	\skolemTerm s sk ;
	\variables s u,v ;
	\variables G e1 ;
        \program Label #inner, #outer;
} 


\rules { 

  testSyntacticalReplaceVisitor_0 { 
	     \find (\forall u; b & 
	     \forall v; c)  
	     \varcond(\notFreeIn(u,c)) 
	     \replacewith( \forall u; (b & {\subst v; u}c)) };

  close_goal { \assumes (b ==>) \find (==> b) \closegoal 
  			  \heuristics(simplify) 
  			  \noninteractive };
  close_by_false { \find (false ==>) \closegoal \heuristics(simplify) };
  close_by_true  { \find (==> true) \closegoal \heuristics(simplify) };
  
  
  // junctor rules
  true_left    { \find (true ==>) \replacewith(==>) \heuristics(simplify) };
  false_right  { \find (==> false) \replacewith(==>) \heuristics(simplify) };

  not_left  { \find (! b ==>) \replacewith(==> b) \heuristics(simplify) };
  not_right { \find (==> ! b) \replacewith(b ==>) \heuristics(simplify) };

  imp_left  { \find (b -> c ==>) 
		\replacewith(==> b); 
                \replacewith(c ==>)
	      \heuristics(split) };
  imp_right { \find (==> b -> c) \replacewith(b ==> c) 
		\heuristics(simplify) };

  TestApplyTaclet_imp_right_add{\find (==> b->c) \replacewith(b==>c) 
		\addrules(cut{\add (b==>); \add (==>b)})};

  and_left  { \find (b & c ==>) \replacewith(b, c ==>) \heuristics(simplify) };
  and_right { \find (==> b & c) \replacewith(==> b); \replacewith(==> c) 
                    \heuristics(split) };
  or_left   { \find (b | c ==>) \replacewith(b ==>); \replacewith(c ==>)
                    \heuristics(split) };
  or_right  { \find (==> b | c) \replacewith(==> b, c) \heuristics(simplify) };
  equiv_left   { \find (b <-> c ==>) 
		      \replacewith(b, c ==>); 
                      \replacewith(==> b, c)
                    \heuristics(split) };
  
  equiv_right  { \find (==> b <-> c) 
		      \replacewith(b ==> c);
                      \replacewith(c ==> b)
                    \heuristics(split) };
  all_right { \find (==> \forall u; b) \varcond(\newDependingOn(sk, b) )
		\replacewith (==> {\subst u; sk}b) \heuristics (simplify) };

  TestApplyTaclet_contradiction{ \find (b->c) \replacewith(!c -> !b)};
  TestApplyTaclet_cut{\add (b==>); \add (==>b)};
  TestApplyTaclet_cut_direct { \find ( b ) \sameUpdateLevel
               \replacewith ( true ) \add (b ==>);
               \replacewith ( false ) \add (==> b)
        };

  TestApplyTaclet_cut_direct_r {\find (==>b) \replacewith(==>b); \add (b==>)};

  TestApplyTaclet_hide_r{\find (==>b) \replacewith(==>)};

  TestCollisionResolving_coll_varSV {
        \find ((\forall u; b) & (\exists v; c)) \varcond(\notFreeIn(u,c), \notFreeIn(v,b))
	\replacewith(\exists v; \forall u; (b & c)) };

  TestCollisionResolving_coll_context {
        \find (b & (\exists u; c)) \varcond(\notFreeIn(u,b))
	\replacewith(\exists u; (b & c)) };


               
  TestCollisionResolving_ns1 {	
        \find (p(w0))
	\replacewith(p(w1)) };

  TestCollisionResolving_ns2 {
        \add (==>\forall u; p(w0)) };

  TestCollisionResolving_name_conflict {
        \assumes (==>\exists v; p(v)) \find (==>\forall u; p(u)) \add (==>\forall u; \exists v; p(w0)) };

  TestCollisionResolving_name_conflict2 {
        \add (==>\forall u; \exists v; p(w0)) };

  TestCollisionResolving_name_conflict_with_context {
        \assumes (==>\exists v; p(v)) \find (b) \replacewith(\exists v; p(w0)) };

  TestCollisionResolving_name_conflict_with_context2 {
        \find (b) \replacewith (\exists v; p(w0)) };


  TestMatchTaclet_whileright {
		\find (\<{.. while(#e2) {#p1} ...}\>post)
                \varcond(\newLabel(#inner), \newLabel(#outer))
	        \replacewith (\<{.. #unwind-loop (#inner, #outer, while(#e2) {#p1});  ...}\>post) }; 

  TestApplyTaclet_while0 {
		\find (\<{.. while(#e2) {#p1} ...}\>A)
	        \replacewith (\<{.. #p1 while(#e2) {#p1};  ...}\>A)
		\add (\<{.. #p1 ...}\>B ==>)}; 


  TestApplyTaclet_and_left_alternative {
		\assumes ( ==> ! (d | e) )
		\find (b & c ==>)
		\replacewith (b ==>) \add (d & e ==>)}; 
		
  TestApplyTaclet_allPullOutBehindDiamond {
	\find(\<{..  ...}\>(\forall e1; post))
	\replacewith(\forall e1;\<{..  ...}\>(post))
  };

  TestApplyTaclet_addEmptyStatement {
	\find(\<{..  ...}\>(post))
	\replacewith(\<{.. ; ...}\>(post))
  };

  TestApplyTaclet_removeEmptyBlock {
	\find(\<{.. {} ...}\>(post))
	\replacewith(\<{.. ...}\>(post))
  };


  apply_eq_nonrigid { \assumes ( w0=w1 ==> ) \find (w0) \sameUpdateLevel \replacewith (w1) };

  make_insert_eq_nonrigid { \find (w0 = w1 ==>)
		\addrules ( insert_eq { \find (w0) \sameUpdateLevel \replacewith (w1) } ) };  

 TestApplyTaclet_wrap_blocks_two_empty_lists { \find ( \<{ {#slist} {#slist1} }\> post )
                    \replacewith ( \<{ {{#slist}} {{#slist1}} }\> post ) };

  testSchemaModal1 {
	\find (\modality{#diabox}{.. while(#e2) {#p1} ...}\endmodality(p1))
	        \replacewith (\modality{#diabox}{.. #p1 while(#e2) {#p1}  ...}\endmodality(p1))
		\add (\modality{#diabox}{.. #p1 ...}\endmodality(p1) ==>)}; 

  testSchemaModal2 {
	\find (\modality{#diabox}{.. if(#e2) {#p1}else{#p2} ...}\endmodality(p1))
	        \replacewith (\modality{#diabox}{.. #p1 #p2  ...}\endmodality(p1))}; 

  testSchemaModal3 {
		\find (==> \modality{#diabox}{.. #p1 ...}\endmodality(p1))
		\replacewith (==> \modality{#diabox}{.. #p1 ...}\endmodality(p1));
		\replacewith (==> \<{.. #p1 ...}\>p1);
                \replacewith (==> \box{.. #p1 ...}\endmodality(p1))}; 

  test_catch_list0 { \find ( \<{ try { #slist }
                               catch ( #t #v ) { #slist1 }
                               catch #cs }\> post )
                     \replacewith ( \<{ try { #slist }
                                      catch ( #t #v ) { #slist1 }
                                      try { #slist }
                                      catch #cs }\> post ) };

  test_catch_list1 { \find ( \<{ try { #slist }
                               catch ( #t #v ) { #slist1 }
                               catch #cs
                               finally { #slist2 } }\> post )
                     \replacewith ( \<{ try { #slist }
                                      catch ( #t #v ) { #slist1 }
                                      finally { #slist2 }
                                      try { #slist }
                                      catch #cs }\> post ) };



// Tests for the creation of proof obligations for taclets

  testPO0 { \find ( \<{ #l: if ( 0 == 1 ) #p1 else #p2 }\> ( p ( w0 ) | post ) ) \sameUpdateLevel
            \replacewith ( \<{ #l: if ( 0 == 0 ) #p2 else #p1 }\> ( post | p ( w0 ) ) ) };


  testPO1 { \find ( \<{ try { #v = false;
                            try { #p1 }
                            catch (java.lang.Throwable #v2){} }
                      catch (java.lang.Exception #v3) {} }\> post ) \sameUpdateLevel
            \replacewith ( \<{ try { #p1 }
                             catch (java.lang.Throwable #v2){} }\> post ) };

  testPO2 { \find ( \<{ int #v; #v = 3; while ( #v != 0 ) --#v; #v2 = #v; }\> post ) \sameUpdateLevel
            \replacewith ( \<{ #v2 = 0; }\> post ) };

  testPO3 { \find ( \<{.. int #v; #v = #v2; #v2 = #v3; #v3 = #v; ...}\> post ) \sameUpdateLevel
            \replacewith ( {#v2:=#v3 || #v3:=#v2} \<{.. int #v; #v = #v3; ...}\> post ) };

  testPO4 { \find ( \<{ if ( true ) { int #v3; #p1 } #p2
                      for ( int #v2 = 0; #v2 != 1; ++#v2 ) #v = #e; }\> post ) \sameUpdateLevel
            \replacewith ( \<{ #v = #e2; #v = #v; }\> post ) };

  testPO5 { \find ( \<{ #v = 1 + #e; }\> post ) \sameUpdateLevel
            \replacewith ( \<{ #v = #e + 1; }\> post ) };
            
  testUninstantiatedSVCollector {
           \find ({#v:=1 || heap:=store(heap,#v3,#memberPVToField(#v2),2)}\<{}\> int::select(heap,#v3,#memberPVToField(#v1)) = 4) \replacewith ( true )
  };

  testParsingExplicitMethodBody {
	\find	(\[{.. #t.mn(#v)@#t; ...}\] post)
        \replacewith (true)
  };

  TestRemovingGenericSorts {
        \find ( g1 = 0 )
        \replacewith ( \forall e1; (e1 = e1) )
  };

} 
