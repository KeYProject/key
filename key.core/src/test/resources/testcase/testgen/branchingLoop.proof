\settings {
"#Proof-Settings-Config-File
#Fri Jul 17 11:22:40 CEST 2009
[General]SoundNotification=false
[DecisionProcedure]Exec=
[View]FontIndex=2
[StrategyProperty]GOALCHOOSER_OPTIONS_KEY=GOALCHOOSER_DEFAULT
[General]UseOCL=false
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[DecisionProcedure]Timeout=60
[View]ShowWholeTaclet=false
[General]ProofAssistant=false
[View]MaxTooltipLines=40
[General]DnDDirectionSensitive=true
[SimultaneousUpdateSimplifier]EagerSimplification=true
[General]StupidMode=true
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[Libraries]Default=/home/mbender/.key/libraries/stringRules.key-false, /home/mbender/.key/libraries/deprecatedRules.key-false, /home/mbender/.key/libraries/acc.key-false
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_NONE
[Choice]DefaultChoices=transactions-transactions\\:transactionsOn , throughout-throughout\\:toutOn , assertions-assertions\\:on , programRules-programRules\\:Java , intRules-intRules\\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\\:disableStaticInitialisation , transactionAbort-transactionAbort\\:abortOn , nullPointerPolicy-nullPointerPolicy\\:nullCheck , javacard-javacard\\:jcOff
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[DecisionProcedure]ActiveRule=Simplify
[General]UseJML=true
[View]HideClosedSubtrees=false
[Choice]Choices=throughout-throughout\\:toutOn-throughout\\:toutOff , transactions-transactions\\:transactionsOn-transactions\\:transactionsOff , assertions-assertions\\:on-assertions\\:off-assertions\\:safe , intRules-intRules\\:javaSemantics-intRules\\:arithmeticSemanticsIgnoringOF-intRules\\:arithmeticSemanticsCheckingOF , programRules-programRules\\:Java-programRules\\:ODL , initialisation-initialisation\\:enableStaticInitialisation-initialisation\\:disableStaticInitialisation , transactionAbort-transactionAbort\\:abortOn-transactionAbort\\:abortOff , nullPointerPolicy-nullPointerPolicy\\:noNullCheck-nullPointerPolicy\\:nullCheck , javacard-javacard\\:jcOff-javacard\\:jcOn
[View]HideIntermediateProofsteps=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource ".";



\programVariables {
java.lang.Throwable exc;
BranchingLoop self;
int n;
int _n;
}

\functions {
}

\predicates {
}

\problem {
     inReachableState
   & (  self.<created>@(java.lang.Object) = TRUE
      & !self = null)
   & inInt(n)
-> {_n:=n}
     \[{
         exc=null;try {
           self.doIt(_n)@BranchingLoop;
         }  catch (java.lang.Throwable e) {
           exc=e;
         }
       }\] exc = null

}

\proof {
(keyLog "0" (keyUser "mbender" ) (keyVersion "1c39933b3669389c45a5c355928249ea37fc5a91"))

(autoModeTime "2103")

(branch "dummy ID"
(rule "inInt" (formula "1") (term "1,0"))
(rule "concrete_and_3" (formula "1") (term "0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "notLeft" (formula "3"))
(rule "assignment" (formula "4") (term "1"))
(builtin "Update Simplification" (formula "4"))
(rule "methodBodyExpand" (formula "4") (term "2"))
(rule "variableDeclarationAssign" (formula "4") (term "2"))
(rule "variableDeclaration" (formula "4") (term "2") (newnames "i"))
(rule "assignment" (formula "4") (term "2"))
(builtin "Update Simplification" (formula "4"))
(rule "variableDeclarationAssign" (formula "4") (term "3"))
(rule "variableDeclaration" (formula "4") (term "3") (newnames "oldN"))
(rule "assignment" (formula "4") (term "3"))
(builtin "Update Simplification" (formula "4"))
(rule "whileInvBox" (formula "4") (newnames "i_0,_n_0,i_1,_n_1,anon_0") (inst "inv=    (jint)(javaDivInt((jint)(javaAddInt(i, (jint)(4))),
                      (jint)(javaSubInt((jint)(javaAddInt((jint)(1),
                                                          _n)),
                                        oldN))))
  = (jint)(4)
& inReachableState") (inst "#v1=b") (inst "#modifies={i,_n}"))
(branch " Invariant Initially Valid"
   (builtin "Update Simplification" (formula "4"))
   (rule "castDelInt" (formula "4") (term "0,0"))
   (rule "castDelInt" (formula "4") (term "1,0"))
   (rule "castDelInt" (formula "4") (term "0,0,0,0,1,0,0"))
   (rule "castDelInt" (formula "4") (term "1,0,0,0,0"))
   (rule "castDelInt" (formula "4") (term "0,0,0,0,0"))
   (rule "castDelInt" (formula "4") (term "1,0,0"))
   (rule "castDelInt" (formula "4") (term "0,0,0"))
   (rule "castDelInt" (formula "4") (term "0,1,0,0"))
   (rule "translateJavaAddInt" (formula "4") (term "0,0,0"))
   (rule "add_zero_left" (formula "4") (term "0,0,0"))
   (rule "translateJavaAddInt" (formula "4") (term "0,1,0,0"))
   (rule "translateJavaDivInt" (formula "4") (term "0,0"))
   (rule "translateJavaSubInt" (formula "4") (term "1,0,0"))
   (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "1"))
   (rule "concrete_and_3" (formula "4"))
   (rule "polySimp_elimSub" (formula "4") (term "1,0"))
   (rule "polySimp_pullOutFactor1b" (formula "4") (term "1,0"))
   (rule "add_literals" (formula "4") (term "1,1,1,0"))
   (rule "times_zero_1" (formula "4") (term "1,1,0"))
   (rule "add_zero_right" (formula "4") (term "1,0"))
   (rule "jdiv_axiom_inline" (formula "4") (term "0"))
   (rule "qeq_literals" (formula "4") (term "0,0"))
   (rule "ifthenelse_true" (formula "4") (term "0"))
   (rule "div_literals" (formula "4") (term "0"))
   (rule "eqClose" (formula "4"))
   (rule "closeTrue" (formula "4"))
)
(branch " Body Preserves Invariant"
   (builtin "Update Simplification" (formula "4"))
   (rule "concrete_impl_1" (formula "4"))
   (rule "impRight" (formula "4"))
   (rule "andLeft" (formula "1"))
   (rule "impRight" (formula "6"))
   (rule "andLeft" (formula "3"))
   (rule "castDelInt" (formula "7") (term "0,0,0,0,1,0,0,0,1,1,1,0,4"))
   (rule "castDelInt" (formula "7") (term "0,0,0,0,1,1,1,0,4"))
   (rule "castDelInt" (formula "7") (term "1,0,1,1,1,0,4"))
   (rule "castDelInt" (formula "3") (term "0,0,0,0,1,0,0"))
   (rule "castDelInt" (formula "3") (term "0,0,0"))
   (rule "castDelInt" (formula "3") (term "1"))
   (rule "castDelInt" (formula "7") (term "0,0,1,0,0,0,1,1,1,0,4"))
   (rule "castDelInt" (formula "7") (term "1,0,0,0,0,1,1,1,0,4"))
   (rule "castDelInt" (formula "3") (term "1,0,0"))
   (rule "castDelInt" (formula "3") (term "1,0,0,0"))
   (rule "castDelInt" (formula "7") (term "1,0,0,0,1,1,1,0,4"))
   (rule "castDelInt" (formula "3") (term "0,1,0,0"))
   (rule "castDelInt" (formula "7") (term "0,0,1,1,1,0,4"))
   (rule "castDelInt" (formula "3") (term "0"))
   (rule "translateJavaSubInt" (formula "7") (term "1,0,0,1,1,1,0,4"))
   (rule "translateJavaAddInt" (formula "7") (term "0,0,0,1,1,1,0,4"))
   (rule "translateJavaAddInt" (formula "3") (term "0,1,0"))
   (rule "translateJavaAddInt" (formula "3") (term "0,0"))
   (rule "translateJavaAddInt" (formula "7") (term "0,1,0,0,1,1,1,0,4"))
   (rule "translateJavaSubInt" (formula "3") (term "1,0"))
   (rule "translateJavaDivInt" (formula "7") (term "0,0,1,1,1,0,4"))
   (rule "translateJavaDivInt" (formula "3") (term "0"))
   (rule "polySimp_elimSub" (formula "7") (term "1,0,0,1,1,1,0,4"))
   (rule "polySimp_elimSub" (formula "3") (term "1,0"))
   (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1,1,1,0,4"))
   (rule "polySimp_addComm0" (formula "3") (term "0,0"))
   (rule "variableDeclarationAssign" (formula "1") (term "2"))
   (rule "variableDeclarationAssign" (formula "7") (term "4"))
   (rule "variableDeclaration" (formula "1") (term "2") (newnames "b"))
   (rule "variableDeclaration" (formula "7") (term "4") (newnames "exc_1"))
   (rule "compound_less_than_comparison_2" (formula "1") (term "2") (inst "#v1=j_1") (inst "#v0=j"))
   (rule "assignment" (formula "7") (term "4"))
   (builtin "Update Simplification" (formula "7"))
   (rule "variableDeclarationAssign" (formula "1") (term "2"))
   (rule "variableDeclaration" (formula "7") (term "5") (newnames "thrownExc"))
   (rule "variableDeclaration" (formula "1") (term "2") (newnames "j"))
   (rule "assignment" (formula "1") (term "2"))
   (builtin "Update Simplification" (formula "1"))
   (rule "variableDeclarationAssign" (formula "1") (term "2"))
   (rule "variableDeclaration" (formula "1") (term "2") (newnames "j_1"))
   (rule "assignmentMultiplicationInt" (formula "1") (term "2"))
   (builtin "Update Simplification" (formula "1"))
   (rule "translateJavaMulInt" (formula "1") (term "1"))
   (rule "less_than_comparison_new" (formula "1") (term "2"))
   (builtin "Update Simplification" (formula "1"))
   (rule "castDelInt" (formula "1") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "0"))
   (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
   (rule "ifUnfold" (formula "7") (term "5") (inst "#boolv=b"))
   (rule "variableDeclaration" (formula "7") (term "5") (newnames "b_2"))
   (rule "compound_less_than_comparison_2" (formula "7") (term "5") (inst "#v1=j_1") (inst "#v0=j"))
   (rule "variableDeclarationAssign" (formula "7") (term "5"))
   (rule "variableDeclaration" (formula "7") (term "5") (newnames "j_4"))
   (rule "assignment" (formula "7") (term "5"))
   (builtin "Update Simplification" (formula "7"))
   (rule "variableDeclarationAssign" (formula "7") (term "6"))
   (rule "variableDeclaration" (formula "7") (term "6") (newnames "j_5"))
   (rule "assignmentMultiplicationInt" (formula "7") (term "6"))
   (builtin "Update Simplification" (formula "7"))
   (rule "translateJavaMulInt" (formula "7") (term "5"))
   (rule "less_than_comparison_new" (formula "7") (term "7"))
   (builtin "Update Simplification" (formula "7"))
   (rule "castDelInt" (formula "7") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "0"))
   (rule "polySimp_mulAssoc" (formula "7") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0"))
   (rule "ifthenelse_split_for" (formula "1"))
   (branch " i_0 <= -1 + _n_0 * 2 TRUE"
      (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "1"))
      (rule "ifthenelse_true_for" (formula "8"))
      (rule "ifEnterThen" (formula "8") (term "5"))
      (rule "assignment" (formula "2"))
      (rule "assignment" (formula "8") (term "5"))
      (builtin "Update Simplification" (formula "8"))
      (rule "methodCallEmpty" (formula "2") (term "1"))
      (rule "compound_assignment_op_plus" (formula "8") (term "5"))
      (rule "emptyModality" (formula "2") (term "1"))
      (builtin "Update Simplification" (formula "2"))
      (rule "boolean_equal" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "compound_int_cast_expression" (formula "7") (term "5") (inst "#v=j"))
      (rule "variableDeclarationAssign" (formula "7") (term "5"))
      (rule "variableDeclaration" (formula "7") (term "5") (newnames "j_6"))
      (rule "remove_parentheses_right" (formula "7") (term "5"))
      (rule "compound_addition_2" (formula "7") (term "5") (inst "#v1=j_8") (inst "#v0=j_7"))
      (rule "variableDeclarationAssign" (formula "7") (term "5"))
      (rule "variableDeclaration" (formula "7") (term "5") (newnames "j_7"))
      (rule "assignment" (formula "7") (term "5"))
      (builtin "Update Simplification" (formula "7"))
      (rule "variableDeclarationAssign" (formula "7") (term "6"))
      (rule "variableDeclaration" (formula "7") (term "6") (newnames "j_8"))
      (rule "remove_parentheses_right" (formula "7") (term "6"))
      (rule "assignment" (formula "7") (term "6"))
      (builtin "Update Simplification" (formula "7"))
      (rule "assignmentAdditionInt" (formula "7") (term "7"))
      (builtin "Update Simplification" (formula "7"))
      (rule "castDelInt" (formula "7") (term "1,4"))
      (rule "translateJavaAddInt" (formula "7") (term "4"))
      (rule "polySimp_addComm0" (formula "7") (term "4"))
      (rule "widening_identity_cast_5" (formula "7") (term "6"))
      (rule "assignment" (formula "7") (term "6"))
      (builtin "Update Simplification" (formula "7"))
      (rule "castDelInt" (formula "7") (term "0"))
      (rule "ifUnfold" (formula "7") (term "5") (inst "#boolv=b"))
      (rule "variableDeclaration" (formula "7") (term "5") (newnames "b_3"))
      (rule "greater_equal_than_comparison_new" (formula "7") (term "5"))
      (builtin "Update Simplification" (formula "7"))
      (rule "ifthenelse_split_for" (formula "7"))
      (branch " i_0 >= 64 TRUE"
         (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
         (rule "mul_literals" (formula "1") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "elimGcdGeq_antec" (formula "1") (inst "elimGcdRightDiv=33") (inst "elimGcdLeftDiv=_n_0") (inst "elimGcd=2"))
         (rule "leq_literals" (formula "1") (term "0,0"))
         (rule "concrete_or_2" (formula "1") (term "0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
         (rule "polySimp_addLiterals" (formula "1") (term "0,0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "leq_literals" (formula "1") (term "0"))
         (rule "concrete_or_2" (formula "1"))
         (rule "ifEnterThen" (formula "9") (term "5"))
         (rule "assignment" (formula "9") (term "5"))
         (builtin "Update Simplification" (formula "9"))
         (rule "methodCallWithinClass" (formula "9") (term "5"))
         (rule "variableDeclarationAssign" (formula "9") (term "5"))
         (rule "variableDeclaration" (formula "9") (term "5") (newnames "n_1"))
         (rule "assignment" (formula "9") (term "5"))
         (builtin "Update Simplification" (formula "9"))
         (rule "castDelInt" (formula "9") (term "4"))
         (rule "methodBodyExpand" (formula "9") (term "6"))
         (builtin "Update Simplification" (formula "9"))
         (rule "methodCallEmpty" (formula "9") (term "5"))
         (rule "blockEmpty" (formula "9") (term "5"))
         (rule "compound_assignment_op_plus" (formula "9") (term "5"))
         (rule "compound_int_cast_expression" (formula "9") (term "5") (inst "#v=j"))
         (rule "variableDeclarationAssign" (formula "9") (term "5"))
         (rule "variableDeclaration" (formula "9") (term "5") (newnames "j_9"))
         (rule "remove_parentheses_right" (formula "9") (term "5"))
         (rule "compound_addition_2" (formula "9") (term "5") (inst "#v1=j_11") (inst "#v0=j_10"))
         (rule "variableDeclarationAssign" (formula "9") (term "5"))
         (rule "variableDeclaration" (formula "9") (term "5") (newnames "j_10"))
         (rule "assignment" (formula "9") (term "5"))
         (builtin "Update Simplification" (formula "9"))
         (rule "variableDeclarationAssign" (formula "9") (term "6"))
         (rule "variableDeclaration" (formula "9") (term "6") (newnames "j_11"))
         (rule "remove_parentheses_right" (formula "9") (term "6"))
         (rule "assignment" (formula "9") (term "6"))
         (builtin "Update Simplification" (formula "9"))
         (rule "assignmentAdditionInt" (formula "9") (term "7"))
         (builtin "Update Simplification" (formula "9"))
         (rule "castDelInt" (formula "9") (term "1,4"))
         (rule "translateJavaAddInt" (formula "9") (term "4"))
         (rule "polySimp_addComm0" (formula "9") (term "4"))
         (rule "widening_identity_cast_5" (formula "9") (term "6"))
         (rule "assignment" (formula "9") (term "6"))
         (builtin "Update Simplification" (formula "9"))
         (rule "castDelInt" (formula "9") (term "3"))
         (rule "tryEmpty" (formula "9") (term "5"))
         (rule "methodCallEmpty" (formula "9") (term "5"))
         (rule "emptyModality" (formula "9") (term "5"))
         (builtin "Update Simplification" (formula "9"))
         (rule "boolean_not_equal_2" (formula "9") (term "0,0,1"))
         (rule "boolean_not_equal_2" (formula "9") (term "0,0"))
         (rule "concrete_not_2" (formula "9") (term "0,1"))
         (rule "concrete_impl_2" (formula "9") (term "0"))
         (rule "concrete_impl_1" (formula "9") (term "1"))
         (rule "concrete_and_1" (formula "9"))
         (rule "castDelInt" (formula "9") (term "1,0,1,0,0,1"))
         (rule "castDelInt" (formula "9") (term "1,0,0,0,1"))
         (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "4"))
         (rule "concrete_and_1" (formula "9"))
         (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "6"))
         (rule "concrete_and_3" (formula "9"))
         (rule "polySimp_addAssoc" (formula "9") (term "0,1,0"))
         (rule "add_literals" (formula "9") (term "0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
         (rule "add_literals" (formula "9") (term "0,0,0"))
         (opengoal "     inReachableState    & (  self.<created>@(java.lang.Object) = TRUE       & !self = null)    & inInt(n) -> {_n:=n}      \\[{          exc=null;try {            self.doIt(_n)@BranchingLoop;          }  catch (java.lang.Throwable e) {            exc=e;          }        }\\] exc = null ")
      )
      (branch " i_0 >= 64 FALSE"
         (rule "inEqSimp_geqRight" (formula "7"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "ifSkipThen" (formula "8") (term "5"))
         (rule "assignment" (formula "8") (term "5"))
         (builtin "Update Simplification" (formula "8"))
         (rule "compound_assignment_op_plus" (formula "8") (term "5"))
         (rule "compound_int_cast_expression" (formula "8") (term "5") (inst "#v=j"))
         (rule "variableDeclarationAssign" (formula "8") (term "5"))
         (rule "variableDeclaration" (formula "8") (term "5") (newnames "j_12"))
         (rule "remove_parentheses_right" (formula "8") (term "5"))
         (rule "compound_addition_2" (formula "8") (term "5") (inst "#v1=j_14") (inst "#v0=j_13"))
         (rule "variableDeclarationAssign" (formula "8") (term "5"))
         (rule "variableDeclaration" (formula "8") (term "5") (newnames "j_13"))
         (rule "assignment" (formula "8") (term "5"))
         (builtin "Update Simplification" (formula "8"))
         (rule "variableDeclarationAssign" (formula "8") (term "6"))
         (rule "variableDeclaration" (formula "8") (term "6") (newnames "j_14"))
         (rule "remove_parentheses_right" (formula "8") (term "6"))
         (rule "assignment" (formula "8") (term "6"))
         (builtin "Update Simplification" (formula "8"))
         (rule "assignmentAdditionInt" (formula "8") (term "7"))
         (builtin "Update Simplification" (formula "8"))
         (rule "castDelInt" (formula "8") (term "1,4"))
         (rule "translateJavaAddInt" (formula "8") (term "4"))
         (rule "polySimp_addComm0" (formula "8") (term "4"))
         (rule "widening_identity_cast_5" (formula "8") (term "6"))
         (rule "assignment" (formula "8") (term "6"))
         (builtin "Update Simplification" (formula "8"))
         (rule "castDelInt" (formula "8") (term "3"))
         (rule "tryEmpty" (formula "8") (term "5"))
         (rule "methodCallEmpty" (formula "8") (term "5"))
         (rule "emptyModality" (formula "8") (term "5"))
         (builtin "Update Simplification" (formula "8"))
         (rule "boolean_not_equal_2" (formula "8") (term "0,0"))
         (rule "boolean_not_equal_2" (formula "8") (term "0,0,1"))
         (rule "concrete_impl_2" (formula "8") (term "0"))
         (rule "concrete_not_2" (formula "8") (term "0,1"))
         (rule "concrete_and_1" (formula "8"))
         (rule "concrete_impl_1" (formula "8"))
         (rule "castDelInt" (formula "8") (term "1,0,0,0,1"))
         (rule "castDelInt" (formula "8") (term "1,0,1,0,0,1"))
         (rule "replace_known_left" (formula "8") (term "2,0") (ifseqformula "3"))
         (builtin "Update Simplification" (formula "8"))
         (rule "concrete_and_1" (formula "8"))
         (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "5"))
         (rule "concrete_and_3" (formula "8"))
         (rule "polySimp_addAssoc" (formula "8") (term "0,1,0"))
         (rule "add_literals" (formula "8") (term "0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
         (rule "add_literals" (formula "8") (term "0,0,0"))
         (opengoal "     inReachableState    & (  self.<created>@(java.lang.Object) = TRUE       & !self = null)    & inInt(n) -> {_n:=n}      \\[{          exc=null;try {            self.doIt(_n)@BranchingLoop;          }  catch (java.lang.Throwable e) {            exc=e;          }        }\\] exc = null ")
      )
   )
   (branch " i_0 <= -1 + _n_0 * 2 FALSE"
      (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "6"))
      (rule "ifthenelse_false_for" (formula "8"))
      (rule "inEqSimp_leqRight" (formula "6"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
      (rule "ifSkipThen" (formula "8") (term "5"))
      (rule "assignment" (formula "2"))
      (rule "assignment" (formula "8") (term "5"))
      (builtin "Update Simplification" (formula "8"))
      (rule "methodCallEmpty" (formula "2") (term "1"))
      (rule "tryEmpty" (formula "8") (term "5"))
      (rule "emptyModality" (formula "2") (term "1"))
      (builtin "Update Simplification" (formula "2"))
      (rule "boolean_not_equal_2" (formula "2"))
      (rule "closeFalse" (formula "2"))
   )
)
(branch " Use Case"
   (rule "false_to_not_true" (formula "4") (term "0,0,1,2,4"))
   (builtin "Update Simplification" (formula "4"))
   (rule "impRight" (formula "4"))
   (rule "andLeft" (formula "1"))
   (rule "castDelInt" (formula "1") (term "1,0,0"))
   (rule "castDelInt" (formula "1") (term "1,0,0,0,0"))
   (rule "castDelInt" (formula "1") (term "1"))
   (rule "castDelInt" (formula "1") (term "0,0,0,1,0,0"))
   (rule "castDelInt" (formula "1") (term "0,0,0"))
   (rule "castDelInt" (formula "1") (term "0,1,0,0"))
   (rule "castDelInt" (formula "1") (term "0"))
   (rule "translateJavaAddInt" (formula "1") (term "0,0"))
   (rule "translateJavaAddInt" (formula "1") (term "0,1,0"))
   (rule "translateJavaDivInt" (formula "1") (term "0"))
   (rule "translateJavaSubInt" (formula "1") (term "1,0"))
   (rule "polySimp_elimSub" (formula "1") (term "1,0"))
   (rule "polySimp_addComm0" (formula "1") (term "0,0"))
   (rule "variableDeclarationAssign" (formula "5") (term "3"))
   (rule "variableDeclaration" (formula "5") (term "3") (newnames "b_1"))
   (rule "compound_less_than_comparison_2" (formula "5") (term "3") (inst "#v1=j_1") (inst "#v0=j"))
   (rule "variableDeclarationAssign" (formula "5") (term "3"))
   (rule "variableDeclaration" (formula "5") (term "3") (newnames "j_2"))
   (rule "assignment" (formula "5") (term "3"))
   (builtin "Update Simplification" (formula "5"))
   (rule "variableDeclarationAssign" (formula "5") (term "3"))
   (rule "variableDeclaration" (formula "5") (term "3") (newnames "j_3"))
   (rule "assignmentMultiplicationInt" (formula "5") (term "3"))
   (builtin "Update Simplification" (formula "5"))
   (rule "translateJavaMulInt" (formula "5") (term "2"))
   (rule "less_than_comparison_new" (formula "5") (term "3"))
   (builtin "Update Simplification" (formula "5"))
   (rule "castDelInt" (formula "5") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "5") (term "0"))
   (rule "polySimp_mulAssoc" (formula "5") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,0"))
   (rule "mul_literals" (formula "5") (term "0,1,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
   (rule "ifthenelse_split_for" (formula "5"))
   (branch " i_1 <= -1 + _n_1 * 2 TRUE"
      (rule "assignment" (formula "6") (term "1"))
      (builtin "Update Simplification" (formula "6"))
      (rule "methodCallEmpty" (formula "6") (term "2"))
      (rule "emptyModality" (formula "6") (term "2"))
      (builtin "Update Simplification" (formula "6"))
      (rule "boolean_equal" (formula "6") (term "0,0"))
      (rule "concrete_not_1" (formula "6") (term "0"))
      (rule "concrete_impl_2" (formula "6"))
      (rule "closeTrue" (formula "6"))
   )
   (branch " i_1 <= -1 + _n_1 * 2 FALSE"
      (rule "inEqSimp_leqRight" (formula "5"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
      (rule "assignment" (formula "6") (term "1"))
      (builtin "Update Simplification" (formula "6"))
      (rule "methodCallEmpty" (formula "6") (term "2"))
      (rule "emptyModality" (formula "6") (term "2"))
      (builtin "Update Simplification" (formula "6"))
      (rule "boolean_not_equal_2" (formula "6") (term "0,0"))
      (rule "concrete_not_2" (formula "6") (term "0"))
      (rule "concrete_impl_1" (formula "6"))
      (rule "methodCallEmpty" (formula "6") (term "1"))
      (rule "tryEmpty" (formula "6") (term "1"))
      (rule "emptyModality" (formula "6") (term "1"))
      (builtin "Update Simplification" (formula "6"))
      (rule "eqClose" (formula "6"))
      (rule "closeTrue" (formula "6"))
   )
)
)

}
