### Comment

The same seqDef should be shared.

### KeY

\programVariables { int p; }

\problem {
   \forall int x;
     ( int::seqGet(seqDef{int i;}(1, p, i*i), x) =
       int::seqGet(seqDef{int i;}(1, p, i*i), x*1) )
}

### contains.1

; --- Sequent
(assert (not (forall ((var_x Int))
    (= (cast (k_seqGet (seqDef1 u_p) (i2u var_x)) sort_int)
       (cast (k_seqGet (seqDef1 u_p) (i2u (* var_x 1))) sort_int)))))

### contains.2

(assert (forall ((var_p Int)) (= (k_seqLen (seqDef1 (i2u var_p)))
    (let ((u_p var_p)) (ite (>= (- u_p 1) 0) (i2u (- u_p 1)) (i2u 0))))))

### contains.3

(assert (forall ((var_p U) (var_i U))
    (=> (and (instanceof var_p sort_int) (<= 0 (u2i var_i))
        (< (u2i var_i) (- (u2i u_p) 1)))
        (= (k_seqGet (seqDef1 var_p) var_i) (let ((var_i (i2u (+ (u2i var_i) 1))))
        (i2u (* (u2i var_i) (u2i var_i))))))))

### expected

valid

### state

ignore