\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Sep 29 17:13:52 CEST 2020
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\problem {
\forall int i;
  \forall Seq s;
    (   lt(i, Z(0(#)))
      | geq(i, seqLen(s))
     -> any::seqGet(s, i)<<Trigger>> = seqGetOutside)

}

\proof {
(keyLog "0" (keyUser "mattias" ) (keyVersion "349a54095919541f123c791ed54f1a26a623c396"))

(autoModeTime "228")

(branch "dummy ID"
(rule "seqOutsideValue" (formula "1") (term "1,1,0,0") (inst "s=s") (inst "iv=iv") (userinteraction))
(rule "allRight" (formula "2") (inst "sk=i_0"))
(rule "allRight" (formula "2") (inst "sk=s_0"))
(rule "impRight" (formula "2"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,0,0"))
(rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "2") (term "0,0,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "0"))
(rule "times_zero_1" (formula "1") (term "1,0,0,0"))
(rule "add_zero_right" (formula "1") (term "0,0,0"))
(rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0"))
(rule "mul_literals" (formula "2") (term "1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0"))
(rule "mul_literals" (formula "1") (term "1,0"))
(rule "nnf_imp2or" (formula "2") (term "0,0"))
(rule "nnf_notOr" (formula "2") (term "0,0,0"))
(rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0"))
(rule "mul_literals" (formula "2") (term "0,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "2") (term "0,0,0,0"))
(rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,0"))
(rule "add_literals" (formula "2") (term "0,0,0,0,0,0"))
(rule "add_zero_left" (formula "2") (term "0,0,0,0,0"))
(rule "commute_or" (formula "2") (term "0,0"))
(rule "cnf_rightDist" (formula "2") (term "0,0"))
(rule "distr_forallAnd" (formula "2") (term "0"))
(rule "distr_forallAnd" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "commute_or" (formula "3") (term "0,0"))
(rule "allLeft" (formula "2") (inst "t=s_0"))
(rule "allLeft" (formula "4") (inst "t=s_0"))
(rule "inEqSimp_homoInEq1" (formula "4") (term "1,0"))
(rule "polySimp_addComm1" (formula "4") (term "0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0"))
(rule "polySimp_mulComm0" (formula "4") (term "1,1,0"))
(rule "polySimp_rightDist" (formula "4") (term "1,1,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0"))
(rule "mul_literals" (formula "4") (term "0,1,1,0"))
(rule "polySimp_elimOne" (formula "4") (term "1,1,1,0"))
(rule "allLeft" (formula "2") (inst "t=i_0"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "2"))
(rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "2"))
(rule "qeq_literals" (formula "1") (term "0,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "allLeft" (formula "5") (inst "t=i_0"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "8"))
 (builtin "One Step Simplification" (formula "5"))
(rule "inEqSimp_homoInEq0" (formula "5"))
(rule "polySimp_addComm1" (formula "5") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5"))
(rule "polySimp_mulComm0" (formula "5") (term "1"))
(rule "polySimp_rightDist" (formula "5") (term "1"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
(rule "mul_literals" (formula "5") (term "0,1"))
(rule "polySimp_elimOne" (formula "5") (term "1,1"))
(rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "1"))
(rule "andLeft" (formula "5"))
(rule "inEqSimp_homoInEq1" (formula "5"))
(rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
(rule "add_literals" (formula "5") (term "1,1,0"))
(rule "times_zero_1" (formula "5") (term "1,0"))
(rule "add_zero_right" (formula "5") (term "0"))
(rule "leq_literals" (formula "5"))
(rule "closeFalse" (formula "5"))
)
}
