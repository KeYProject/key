(1/58) -- recoder.java.declaration.InterfaceDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
(0/1) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model two_state @*/
(0/1) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model two_state @*/
(0/1) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model two_state @*/
(0/1) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(0/1) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(0/1) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(0/1) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(0/1) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(0/1) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(59/1) -- de.uka.ilkd.key.java.recoderext.JMLTransformer$1
  * //@ public instance ghost LockSpec spec;
  * /*@ normal_behavior         requires spec.lockStat
  * /*@instance ghost @*/
(69/69) -- recoder.java.declaration.MethodDeclaration
  * //@ public instance ghost LockSpec spec;
  * /*@ normal_behavior         requires spec.lockStat
(69/69) -- recoder.java.declaration.modifier.Native
  * /*@ helper @*/
(77/77) -- recoder.java.declaration.MethodDeclaration
  * /*@ normal_behavior         requires spec.lockStat
(77/77) -- recoder.java.declaration.modifier.Native
  * /*@ helper @*/
(0/1) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(0/1) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(0/1) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model two_state @*/
(0/1) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model two_state @*/
(0/1) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(0/1) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(0/1) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(0/1) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(-1/82) -- recoder.java.reference.TypeReference
  * /*@ non_null @*/
(104/108) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
