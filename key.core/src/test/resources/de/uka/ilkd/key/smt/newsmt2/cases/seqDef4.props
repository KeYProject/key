### Comment

Something with objects

### sources

class C { int f; }

### KeY

\problem {
   \forall C c; (c != null -> int::seqGet(seqDef{int i;}(1, 100, c.f), 2) = c.f)
}

### contains.1

;--- Sequent
(assert (not (forall ((var_c U))
  (=> (instanceof var_c sort_C)
    (=> (not (= var_c k_null))
      (= (cast (k_seqGet (seqDef1 u_heap var_c) (i2u 2)) sort_int)
         (cast (k_select u_heap var_c |field_C::$f|) sort_int)))))))

### contains.2

(assert (forall ((var_0 U) (var_1 U))
   (! (instanceof (seqDef1 var_0 var_1) sort_Seq) :pattern ((seqDef1 var_0 var_1)))))

### contains.3

(assert (forall ((var_x U) (var_i U))
  (=> (and (instanceof var_x sort_int)
           (<= 0 (u2i var_i)) (< (u2i var_i) (- (u2i var_x) 1)))
      (= (k_seqGet (seqDef1 var_x) var_i)
         (let ((var_i (i2u (+ (u2i var_i) 1)))) (i2u (* (u2i var_i) (u2i var_i))))))))

### contains.4

(assert (forall ((var_x U)) (= (k_seqLen (seqDef1 var_x)) (ite (>= (- (u2i var_x) 1) 0) (i2u (- (u2i var_x) 1)) (i2u 0)))))

### expected

valid

### state

ignore

