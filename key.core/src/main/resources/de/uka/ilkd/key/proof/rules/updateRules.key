\rules {
   
    //--------------------------------------------------------------------------
    //dropping overwritten and ignored update parts
    //--------------------------------------------------------------------------
    
    simplifyUpdate1 {
	\schemaVar \update u;
	\schemaVar \term any t, result;	
	
	\find({u}t)
	\varcond(\dropEffectlessElementaries(u, t, result))
	
	\replacewith(result)
	
	\heuristics(update_elim)
    };
    
    
    simplifyUpdate2 {
	\schemaVar \update u;
	\schemaVar \formula phi, result;	
	
	\find({u}phi)
	\varcond(\dropEffectlessElementaries(u, phi, result))
	
	\replacewith(result)
	
	\heuristics(update_elim)
    };
    
    
    simplifyUpdate3 {
	\schemaVar \update u, u2, result;
	
	\find({u}u2)
	\varcond(\dropEffectlessElementaries(u, u2, result))
	
	\replacewith(result)
	
	\heuristics(update_elim)
    };  

    simplifyIfThenElseUpdate1{
	\schemaVar \update u1, u2;
	\schemaVar \formula phi, result, t;
	
	\find ( \if (phi) \then ({u1}t) \else ({u2}t) )
       	\varcond(\simplifyIfThenElseUpdate(phi,u1,u2,t, result))
	
	\replacewith(result)
	\displayname "simplifyIfThenElse"  
    };  

    simplifyIfThenElseUpdate2{
	\schemaVar \update u1, u2;
	\schemaVar \formula phi, result, t;
	
	\find ( \if (phi) \then (t) \else ({u2}t) )
       	\varcond(\simplifyIfThenElseUpdate(phi,u1,u2,t, result))
	
	\replacewith(result)
	\displayname "simplifyIfThenElse"  
    };  

    simplifyIfThenElseUpdate3{
	\schemaVar \update u1, u2;
	\schemaVar \formula phi, result, t;
	
	\find ( \if (phi) \then ({u1}t) \else (t) )
       	\varcond(\simplifyIfThenElseUpdate(phi,u1,u2,t, result))
	
	\replacewith(result)
	\displayname "simplifyIfThenElse"  
    };  

    simplifyIfThenElseUpdate4{
	\schemaVar \update u1, u2;
	\schemaVar \formula phi, result, t;
	
	\find ( \if (phi) \then (t) \else (t) )
       	\varcond(\simplifyIfThenElseUpdate(phi,u1,u2,t, result))
	
	\replacewith(result)
	\displayname "simplifyIfThenElse"  
    };  
    
    
    
    //--------------------------------------------------------------------------
    //converting sequential updates to parallel ones
    //(these rules should have better priority than the applyOnRigid rules)
    //--------------------------------------------------------------------------

    sequentialToParallel1{
	\schemaVar \update u, u2;
	\schemaVar \term any t;	
	
	\find({u}{u2}t)
	
	\replacewith({u || {u} u2}t)
	
	\heuristics(update_join)
    };


    sequentialToParallel2 {
	\schemaVar \update u, u2;
	\schemaVar \formula phi;	
	
	\find({u}{u2}phi)
	
	\replacewith({u || {u} u2}phi)
	
	\heuristics(update_join)
    };
    
    
    sequentialToParallel3 {
	\schemaVar \update u, u2, u3;
	
	\find({u}{u2}u3)
	
	\replacewith({u || {u} u2}u3)
	
	\heuristics(update_join)
    };
        

        
    //--------------------------------------------------------------------------
    //update application
    //--------------------------------------------------------------------------
    
    applyOnRigidTerm {
	\schemaVar \update u;
	\schemaVar \term any t, result;	
	
	\find({u}t)
	\varcond(\applyUpdateOnRigid(u, t, result))
	
	\replacewith(result)
	
	\heuristics(update_apply)
    };
    
    
    applyOnRigidFormula {
	\schemaVar \update u;
	\schemaVar \formula phi, result;
	
	\find({u}phi)
	\varcond(\applyUpdateOnRigid(u, phi, result))
	
	\replacewith(result)
	
	\heuristics(update_apply)
    };
    
    
    applyOnElementary {
	\schemaVar \update u;
	\schemaVar \program Variable #pv;
	\schemaVar \term any t;	
	
	\find({u}(#pv := t))
	
	\replacewith(#pv := {u}t)
	
	\heuristics(update_apply_on_update)
    };


        
	
        
    
    applyOnParallel {
	\schemaVar \update u, u2, u3;	
	
	\find({u}(u2 || u3))
	
	\replacewith({u}u2 || {u}u3)
	
	\heuristics(update_apply_on_update)    
    };
    
    
    applyOnSkip {
	\schemaVar \update u;	
	
	\find({u}skip)
	
	\replacewith(skip)
	
	\heuristics(update_elim)    
    };    
    
        
    applyOnPV {
	\schemaVar \program Variable #pv;
	\schemaVar \term any t;	
	
	\find({#pv := t}#pv)
	
	\replacewith(t)
	
	\heuristics(update_elim)
    };
    
    
    
    //--------------------------------------------------------------------------
    //rules for skip
    //--------------------------------------------------------------------------
    
    parallelWithSkip1 {
	\schemaVar \update u;	
	
	\find(skip || u)
	
	\replacewith(u)
	
	\heuristics(update_elim)
    }; 


    parallelWithSkip2 {
	\schemaVar \update u;	
	
	\find(u || skip)
	
	\replacewith(u)
	
	\heuristics(update_elim)
    }; 
    
    
    applySkip1 {
	\schemaVar \term any t;	
	
	\find({skip}t)
	
	\replacewith(t)
	
	\heuristics(concrete)
    }; 
    
    
    applySkip2 {
	\schemaVar \formula phi;	
	
	\find({skip}phi)
	
	\replacewith(phi)
	
	\heuristics(update_elim)
    };        
    
    
    applySkip3 {
	\schemaVar \update u;	
	
	\find({skip}u)
	
	\replacewith(u)
	
	\heuristics(update_elim)
    };    
    
    // sort updates
/**    commuteSimpleUpdates {
      	\schemaVar \program Variable loc1, loc2;
	\schemaVar \term any val1, val2;
    	\schemaVar \update u;
    	
    	\find ( loc1:=val1 || loc2 := val2 )
    	\varcond(\different(loc1, loc2))
    	\replacewith( loc2:=val2 || loc1 := val1 )    	    
    };
    
    elimSelfUpdateFor {
    	\schemaVar \update u;
    	\schemaVar \program Variable loc;    	
    	\schemaVar \formula phi;	
    	
    	\find ( {loc:=loc || u} phi )
    	\replacewith( {u} phi )    	    
	\heuristics(update_elim)
    };

    elimSelfSingleUpdateFor {
    	\schemaVar \program Variable loc;
    	\schemaVar \formula phi;	
    	
    	\find ( {loc:=loc} phi )    	
    	\replacewith( phi )
	\heuristics(update_elim)
    	
    	\displayname "elimSelfUpdate"    	    
    };

    elimSelfUpdateTrm {
    	\schemaVar \update u;
    	\schemaVar \program Variable loc;    	
    	\schemaVar \term any t;

    	\find ( {loc:=loc || u} t )
    	\replacewith( {u} t )    	    
	\heuristics(update_elim)

    	\displayname "elimSelfUpdate"    	    
    };

    elimSelfSingleUpdateTrm {
    	\schemaVar \program Variable loc;    	
    	\schemaVar \term any t;
    	
    	\find ( {loc:=loc} t )    	
    	\replacewith( t )
	\heuristics(update_elim)
    	
    	\displayname "elimSelfUpdate"    	    
    };
*/
}
