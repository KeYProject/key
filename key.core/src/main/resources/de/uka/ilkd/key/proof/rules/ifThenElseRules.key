/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

// This file contains rules that are applicable for every sort (as they
// use \generic sorts).
// The format is the same as for problem files.

\sorts {
    \generic G, G2;
}

// These schema variables are used to write the following rules.
// They will not be visible in later runs of the parser, so you are
// fairly free in choosing their names.
\schemaVariables {
    \term G2 else, then;
    \formula phi, b, c;

    \variables int intVar;
    \skolemTerm int intSk;
    \term int t, intT1, intT2, intValue;
}

\predicates {
    // Note: ifEx is DEPRECATED and this predicate may be removed in the future.
    wellOrderLeqInt(int, int);
}

\rules {

    // ------------- handling the if-then-else-operator ----------------------

    ifthenelse_true {
        \find(\if(true) \then(then) \else(else))
        \replacewith(then)
        \heuristics(concrete)
    };

    ifthenelse_true_for {
        \find(\if(true) \then(b) \else(c))
        \replacewith(b)
        \heuristics(concrete)
        \displayname "ifthenelse_true"
    };

    ifthenelse_false {
        \find(\if(false) \then(then) \else(else))
        \replacewith(else)
        \heuristics(concrete)
    };

    ifthenelse_false_for {
        \find(\if(false) \then(b) \else(c))
        \replacewith(c)
        \heuristics(concrete)
        \displayname "ifthenelse_false"
    };

    ifthenelse_negated {
        \find(\if(!phi) \then(then) \else(else))
        \replacewith(\if(phi) \then(else) \else(then))
        \heuristics(simplify)
    };

    ifthenelse_negated_for {
        \find(\if(!phi) \then(b) \else(c))
        \replacewith(\if(phi) \then(c) \else(b))
        \heuristics(simplify)
        \displayname "ifthenelse_negated"
    };

    ifthenelse_same_branches {
        \find(\if(phi) \then(then) \else(then))
        \replacewith(then)
        \heuristics(concrete)
    };

    ifthenelse_same_branches_for {
        \find(\if(phi) \then(b) \else(b))
        \replacewith(b)
        \heuristics(concrete)
        \displayname "ifthenelse_same_branches"
    };

    ifthenelse_concrete {
        \find(\if(phi) \then(true) \else(false))
        \replacewith(phi)
        \heuristics(concrete)
    };

    ifthenelse_concrete2 {
        \find(\if(phi) \then(false) \else(true))
        \replacewith(!phi)
        \heuristics(concrete)
        \displayname "ifthenelse_concrete"
    };

    ifthenelse_concrete3 {
        \find(\if(phi) \then(then) \else(else) = then)
        \replacewith(phi | else = then)
        \heuristics(concrete)
        \displayname "ifthenelse_concrete"
    };

    ifthenelse_concrete4 {
        \find(\if(phi) \then(then) \else(else) = else)
        \replacewith(!phi | then = else)
        \heuristics(concrete)
        \displayname "ifthenelse_concrete"
    };

    ifthenelse_split {
        \find(\if(phi) \then(then) \else(else))
        \sameUpdateLevel
        "#phi TRUE":
            \replacewith(then) \add(phi ==>);
        "#phi FALSE":
            \replacewith(else) \add( ==> phi)
        \heuristics(split_cond)
    };

    ifthenelse_split_for {
        \find(\if(phi) \then(b) \else(c))
        \sameUpdateLevel
        "#phi TRUE":
            \replacewith(b) \add(phi ==>);
        "#phi FALSE":
            \replacewith(c) \add( ==> phi)
        \heuristics(split_cond)
        \displayname "ifthenelse_split"
    };

    // ------------- handling the ifEx-then-else-operator, 1 var ----------------------

    // Note: ifEx is DEPRECATED and may be removed in the future. 01/01/2014

    ifExthenelse1_false {
        \find(\ifEx intVar; (false)\then(then)\else(else))
        \replacewith(else)
        \heuristics(concrete)
    };

    ifExthenelse1_false_for {
        \find(\ifEx intVar; (false)\then(b)\else(c))
        \replacewith(c)
        \heuristics(concrete)
        \displayname "ifExthenelse1_false"
    };

    ifExthenelse1_eq {
        \find(\ifEx intVar; (intVar = t)\then(then)\else(else))
        \varcond(\notFreeIn(intVar, t))
        \replacewith({\subst intVar; t}then)
        \heuristics(concrete)
    };

    ifExthenelse1_eq_for {
        \find(\ifEx intVar; (intVar = t)\then(b)\else(c))
        \varcond(\notFreeIn(intVar, t))
        \replacewith({\subst intVar; t}b)
        \heuristics(concrete)
        \displayname "ifExthenelse1_eq"
    };

    ifExthenelse1_eq2 {
        \find(\ifEx intVar; (t = intVar)\then(then)\else(else))
        \varcond(\notFreeIn(intVar, t))
        \replacewith({\subst intVar; t}then)
        \heuristics(concrete)
        \displayname "ifExthenelse1_eq"
    };

    ifExthenelse1_eq2_for {
        \find(\ifEx intVar; (t = intVar)\then(b)\else(c))
        \varcond(\notFreeIn(intVar, t))
        \replacewith({\subst intVar; t}b)
        \heuristics(concrete)
        \displayname "ifExthenelse1_eq"
    };

    ifExthenelse1_eq_phi {
        \find(\ifEx intVar; (phi & intVar = t)\then(then)\else(else))
        \varcond(\notFreeIn(intVar, t))
        \replacewith(\if({\subst intVar; t}phi)
                \then({\subst intVar; t}then)
                \else(else))
        \heuristics(concrete)
    };

    ifExthenelse1_eq_for_phi {
        \find(\ifEx intVar; (phi & intVar = t)\then(b)\else(c))
        \varcond(\notFreeIn(intVar, t))
        \replacewith(\if({\subst intVar; t}phi)
                \then({\subst intVar; t}b)
                \else(c))
        \heuristics(concrete)
        \displayname "ifExthenelse1_eq"
    };

    ifExthenelse1_eq2_phi {
        \find(\ifEx intVar; (phi & t = intVar)\then(then)\else(else))
        \varcond(\notFreeIn(intVar, t))
        \replacewith(\if({\subst intVar; t}phi)
                \then({\subst intVar; t}then)
                \else(else))
        \heuristics(concrete)
        \displayname "ifExthenelse1_eq"
    };

    ifExthenelse1_eq2_for_phi {
        \find(\ifEx intVar; (phi & t = intVar)\then(b)\else(c))
        \varcond(\notFreeIn(intVar, t))
        \replacewith(\if({\subst intVar; t}phi)
                \then({\subst intVar; t}b)
                \else(c))
        \heuristics(concrete)
        \displayname "ifExthenelse1_eq"
    };

    ifExthenelse1_unused_var {
        \find(\ifEx intVar; (phi)\then(then)\else(else))
        \varcond(\notFreeIn(intVar, then))
        \replacewith(\if(\exists intVar; phi) \then(then) \else(else))
        \heuristics(simplify)
    };

    ifExthenelse1_unused_var_for {
        \find(\ifEx intVar; (phi)\then(b)\else(c))
        \varcond(\notFreeIn(intVar, b))
        \replacewith(\if(\exists intVar; phi) \then(b) \else(c))
        \heuristics(simplify)
        \displayname "ifExthenelse1_unused_var"
    };

    ifExthenelse1_split {
        \find(\ifEx intVar; (phi)\then(then)\else(else))
        \sameUpdateLevel
        \varcond(\newDependingOn(intSk, phi),
            \notFreeIn(intVar, intSk))
        \replacewith({\subst intVar; intSk}then)
        \add({\subst intVar; intSk}phi,
            \forall intVar; (phi -> wellOrderLeqInt(intSk, intVar)) ==>);
        \replacewith(else) \add( ==> \exists intVar; phi)
        \heuristics(split_cond)
    };

    ifExthenelse1_solve {
        \find(\ifEx intVar; (phi)\then(then)\else(else))
        \sameUpdateLevel
        \varcond(\notFreeIn(intVar, intValue))
        \replacewith({\subst intVar; intValue}then);
        \replacewith(\ifExintVar; (phi)\then(then)\else(else))
        \add( ==> {\subst intVar; intValue}phi &
            \forall intVar; (phi -> wellOrderLeqInt(intValue, intVar)))
    };

    ifExthenelse1_min {
        \find(\ifEx intVar; (phi)\then(then)\else(else))
        \sameUpdateLevel
        \varcond(\notFreeIn(intVar, phi))
        \replacewith(\if(phi) \then({\subst intVar; 0}then) \else(else))
        \heuristics(concrete)
    };

    ifExthenelse1_split_for {
        \find(\ifEx intVar; (phi)\then(b)\else(c))
        \sameUpdateLevel
        \varcond(\newDependingOn(intSk, phi),
            \notFreeIn(intVar, intSk))
        \replacewith({\subst intVar; intSk}b)
        \add({\subst intVar; intSk}phi,
            \forall intVar; (phi -> wellOrderLeqInt(intSk, intVar)) ==>);
        \replacewith(c) \add( ==> \exists intVar; phi)
        \heuristics(split_cond)
        \displayname "ifExthenelse1_split"
    };

    ifExthenelse1_solve_for {
        \find(\ifEx intVar; (phi)\then(b)\else(c))
        \sameUpdateLevel
        \varcond(\notFreeIn(intVar, intValue))
        \replacewith({\subst intVar; intValue}b);
        \replacewith(\ifExintVar; (phi)\then(b)\else(c))
        \add( ==> {\subst intVar; intValue}phi &
            \forall intVar; (phi -> wellOrderLeqInt(intValue, intVar)))
        \displayname "ifExthenelse1_solve"
    };

    ifExthenelse1_min_for {
        \find(\ifEx intVar; (phi)\then(b)\else(c))
        \sameUpdateLevel
        \varcond(\notFreeIn(intVar, phi))
        \replacewith(\if(phi) \then({\subst intVar; 0}b) \else(c))
        \heuristics(concrete)
        \displayname "ifExthenelse1_min"
    };

    // ------------- well-orderings used ----------------------

    def_wellOrderLeqInt {
        \find(wellOrderLeqInt(intT1, intT2))
        \replacewith((geq(intT1, intT2) & lt(intT2, 0)) |
            (leq(0, intT1) & leq(intT1, intT2)))
        \heuristics(simplify)
    };
}
