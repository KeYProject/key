/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

\rules(integerSimplificationRules:full) {

    // The pull out rules are currently commented out
    // because the regular pull out rule can do the job.
    // These here are meant to be assigned a special
    // ruleset in the future for better automation.

    /*
      pullOutMin {
        \schemaVar\variables alpha x;
        \schemaVar\term boolean b;
        \schemaVar\term int t;
        \schemaVar\skolemTerm int sk;
        \find( min{x;}(b,t) )
        \varcond ( \newDependingOn(sk, b),
               \newDependingOn(sk, t))
        \replacewith ( sk )
        \add( min{x;}(b,t) = sk ==> )
      };
    */

    minAxiom {
        \schemaVar \variables alpha x, y, z;
        \schemaVar \term boolean b;
        \schemaVar \term int t, t2;
        \find(min{x;}(b, t) = t2 ==>)
        \varcond(\notFreeIn(x, t2), \notFreeIn(y, b, t, t2))
        "Use Axiom":
            \add(\forall y; {\subst x; y}(b = TRUE -> t >= t2)
                & \exists y; {\subst x; y}(b = TRUE & t = t2) ==>);
        "Show Satisfiability":
            \add( ==> \exists x; (b = TRUE
                    & \forall y; ({\subst x; y}b = TRUE -> {\subst x; y}t >= t)))
    };

    /*
      pullOutMax {
        \schemaVar\variables alpha x;
        \schemaVar\term boolean b;
        \schemaVar\term int t;
        \schemaVar\skolemTerm int sk;
        \find( max{x;}(b,t) )
        \varcond ( \newDependingOn(sk, b),
               \newDependingOn(sk, t))
        \replacewith ( sk )
        \add( max{x;}(b,t) = sk ==> )
      };
    */

    maxAxiom {
        \schemaVar \variables alpha x, y, z;
        \schemaVar \term boolean b;
        \schemaVar \term int t, t2;
        \find(max{x;}(b, t) = t2 ==>)
        \varcond(\notFreeIn(x, t2), \notFreeIn(y, b, t, t2))
        "Use Axiom":
            \add(\forall y; {\subst x; y}(b = TRUE -> t <= t2)
                & \exists y; {\subst x; y}(b = TRUE & t = t2) ==>);
        "Show Satisfiability":
            \add( ==> \exists x; (b = TRUE
                    & \forall y; ({\subst x; y}b = TRUE -> {\subst x; y}t <= t)))
    };
}
