/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

\sorts {
    numbers;
    int;

    // these sort are not axiomatised yet; to come in CHARTER
    // they are here included to allow us to load Java program that
    // contain some methods or fields of type float or double

    real; // TODO @Real
}

\functions {

    // ----------------------------------------------------------------------------
    // The functions declared below preserve their semantics independently
    // from the current integer semantics.
    // ----------------------------------------------------------------------------

    numbers #;
    numbers 0(numbers);
    numbers 1(numbers);
    numbers 2(numbers);
    numbers 3(numbers);
    numbers 4(numbers);
    numbers 5(numbers);
    numbers 6(numbers);
    numbers 7(numbers);
    numbers 8(numbers);
    numbers 9(numbers);
    numbers neglit(numbers);

    int Z(numbers);
    int C(numbers);

    // arithmetic operators on mathematical integers
    int add(int, int);
    int neg(int);
    int sub(int, int);
    int mul(int, int);
    int div(int, int);
    int mod(int, int);
    int pow(int, int);
    int log(int, int);

    // comprehensions
    int bsum {false, false, true}(int, int, int);
    int bprod {false, false, true}(int, int, int);
    int sum {true, true}(boolean, int);
    int prod {true, true}(boolean, int);
    int min {true, true}(boolean, int);
    int max {true, true}(boolean, int);

    // max and min constants
    int byte_MAX;
    int byte_MIN;
    int char_MAX;
    int char_MIN;
    int int_MAX;
    int int_MIN;
    int long_MAX;
    int long_MIN;
    int short_MAX;
    int short_MIN;

    // range constants
    int byte_HALFRANGE;
    int byte_RANGE;
    int char_RANGE;
    int int_HALFRANGE;
    int int_RANGE;
    int long_HALFRANGE;
    int long_RANGE;
    int short_HALFRANGE;
    int short_RANGE;

    // functions to indicate undefinedness
    int undefinedPow(int, int);
    int undefinedLog(int, int);

    // functions to indicate overflows
    int javaUnaryMinusIntOverFlow(int);
    int javaUnaryMinusLongOverFlow(int);
    int javaAddIntOverFlow(int, int);
    int javaAddLongOverFlow(int, int);
    int javaSubIntOverFlow(int, int);
    int javaSubLongOverFlow(int, int);
    int javaMulIntOverFlow(int, int);
    int javaMulLongOverFlow(int, int);
    int javaModOverFlow(int, int);
    int javaDivIntOverFlow(int, int);
    int javaDivLongOverFlow(int, int);
    int javaUnsignedShiftRightOverFlow(int, int);
    int javaBitwiseOrIntOverFlow(int, int);
    int javaCastByteOverFlow(int);
    int javaCastShortOverFlow(int);
    int javaCastIntOverFlow(int);
    int javaCastLongOverFlow(int);
    int javaCastCharOverFlow(int);

    // arithmetic operators with modulo semantics
    int jmod(int, int);
    int jdiv(int, int);
    int unaryMinusJint(int);
    int unaryMinusJlong(int);
    int addJint(int, int);
    int addJlong(int, int);
    int subJint(int, int);
    int subJlong(int, int);
    int mulJint(int, int);
    int mulJlong(int, int);
    int modJint(int, int);
    int modJlong(int, int);
    int divJint(int, int);
    int divJlong(int, int);
    int moduloByte(int);
    int moduloShort(int);
    int moduloInt(int);
    int moduloLong(int);
    int moduloChar(int);

    // bitvector operations
    int bitwiseNegateJint(int);
    int bitwiseNegateJlong(int);

    // shift operations

    // left '>>' right
    int shiftright(/* left */ int, /* right */ int);
    // left '<<' right
    int shiftleft(/* left */ int, /* right */ int);

    // left '>>' right with right >= 0
    int shiftrightPositiveShift(/* left */ int, /* right */ int);
    // left '<<' right with right >= 0
    int shiftleftPositiveShift(/* left */ int, /* right */ int);

    // unsignedshift for arbitrary length bitvectors does not make much sense
    // therefore only a version with an explicit bitvector size is supported
    int unsignedshift(/* left */ int, /* right */ int, /* bitsize */ int);

    // bitvector operations as in Java with bitvector sizes 32 (int) and 64 (long)
    // right op only the lower 5 bits/6 bits (i.e., range is always 0..31 inclusive for int and 0..63 incl. for long
    int shiftrightJint(int, int);
    int shiftleftJint(int, int);

    int shiftleftJlong(int, int);
    int shiftrightJlong(int, int);

    int unsignedshiftrightJint(int, int);
    int unsignedshiftrightJlong(int, int);

    // bitmask operations &, |, ^
    int binaryAnd(/* left */ int, /* right */ int);
    int binaryOr(/* left */ int, /* right */ int);
    int binaryXOr(/* left */ int, /* right */ int);

    // bitmask operations for Java
    int orJint(int, int);
    int orJlong(int, int);
    int andJint(int, int);
    int andJlong(int, int);
    int xorJint(int, int);
    int xorJlong(int, int);

    // placeholder for loop index variable
    int index;

    // ----------------------------------------------------------------------------
    // The functions declared below change their semantics when switching the
    // used integer semantics.
    // ----------------------------------------------------------------------------

    int javaUnaryMinusInt(int);
    int javaUnaryMinusLong(int);
    int javaBitwiseNegateInt(int);
    int javaBitwiseNegateLong(int);
    int javaAddInt(int, int);
    int javaAddLong(int, int);
    int javaSubInt(int, int);
    int javaSubLong(int, int);
    int javaMulInt(int, int);
    int javaMulLong(int, int);
    int javaMod(int, int);
    int javaDivInt(int, int);
    int javaDivLong(int, int);
    int javaShiftRightInt(int, int);
    int javaShiftRightLong(int, int);
    int javaShiftLeftInt(int, int);
    int javaShiftLeftLong(int, int);
    int javaUnsignedShiftRightInt(int, int);
    int javaUnsignedShiftRightLong(int, int);
    int javaBitwiseOrInt(int, int);
    int javaBitwiseOrLong(int, int);
    int javaBitwiseAndInt(int, int);
    int javaBitwiseAndLong(int, int);
    int javaBitwiseXOrInt(int, int);
    int javaBitwiseXOrLong(int, int);
    int javaCastByte(int);
    int javaCastShort(int);
    int javaCastInt(int);
    int javaCastLong(int);
    int javaCastChar(int);

    // ----------------------------------------------------------------------------
    // The functions declared below are have checked overflow in wd-checks
    // and otherwise behave like the bigint mode.
    // ----------------------------------------------------------------------------
    int checkedUnaryMinusInt(int);
    int checkedUnaryMinusLong(int);
    int checkedBitwiseNegateInt(int);
    int checkedBitwiseNegateLong(int);
    int checkedAddInt(int, int);
    int checkedAddLong(int, int);
    int checkedSubInt(int, int);
    int checkedSubLong(int, int);
    int checkedMulInt(int, int);
    int checkedMulLong(int, int);
    int checkedDivInt(int, int);
    int checkedDivLong(int, int);
    int checkedShiftRightInt(int, int);
    int checkedShiftRightLong(int, int);
    int checkedShiftLeftInt(int, int);
    int checkedShiftLeftLong(int, int);
    int checkedUnsignedShiftRightInt(int, int);
    int checkedUnsignedShiftRightLong(int, int);
    int checkedBitwiseOrInt(int, int);
    int checkedBitwiseOrLong(int, int);
    int checkedBitwiseAndInt(int, int);
    int checkedBitwiseAndLong(int, int);
    int checkedBitwiseXOrInt(int, int);
    int checkedBitwiseXOrLong(int, int);
}

\predicates {

    // ----------------------------------------------------------------------------
    // The predicates declared below preserve their semantics independently
    // from the current integer semantics.
    // ----------------------------------------------------------------------------

    leq(int, int);
    lt(int, int);
    geq(int, int);
    gt(int, int);

    // ----------------------------------------------------------------------------
    // The functions declared below change their semantics when switching the
    // used integer semantics.
    // ----------------------------------------------------------------------------

    inByte(int);
    inChar(int);
    inInt(int);
    inLong(int);
    inShort(int);

    // ----------------------------------------------------------------------------
    // The predicates declared below preserve their semantics independently
    // from the current integer semantics.
    // ----------------------------------------------------------------------------

    inRangeByte(int);
    inRangeChar(int);
    inRangeInt(int);
    inRangeLong(int);
    inRangeShort(int);
}
