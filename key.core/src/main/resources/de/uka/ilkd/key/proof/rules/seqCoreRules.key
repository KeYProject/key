/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

// This file contains only the CORE RULES for the sequence datatype.
// Find the DECLARATIONS in file seq.key and
// definitional extensions in file seqRules.key
// Definitions and derived taclets for permutations may be found
// in file seqPerm.key


\rules(sequences:on) {

    // ===============================================================
    //  Core axioms
    //  (4 in total)
    // ===============================================================

    // --------------------------------------------------------------------
    // Core axiom for length of sequences
    // --------------------------------------------------------------------

    lenNonNegative {
        \schemaVar \term Seq seq;

        \find(seqLen(seq))
        \sameUpdateLevel

        \add(0 <= seqLen(seq) ==>)

        \heuristics(inReachableStateImplication)
    };

    // --------------------------------------------------------------------
    // Core axiom for equality of sequences
    // --------------------------------------------------------------------

    equalityToSeqGetAndSeqLen {
        \schemaVar \term Seq left, right;
        \schemaVar \variables int iv;

        \find(left = right)
        \varcond(\notFreeIn(iv, left, right))

        \replacewith(seqLen(left) = seqLen(right)
            & \forall iv; (0 <= iv & iv < seqLen(left)
                -> any::seqGet(left, iv) = any::seqGet(right, iv)))
        \heuristics(defOpsSeqEquality)
    };

    // --------------------------------------------------------------------
    // Core axiom for sequence definition
    // --------------------------------------------------------------------

    getOfSeqDef {
        \schemaVar \term int idx, from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \find(alpha::seqGet(seqDef{uSub;}(from, to, t), idx))
        \varcond(\notFreeIn(uSub, from),
            \notFreeIn(uSub, to))
        \replacewith(\if(0 <= idx & idx < (to - from))
                \then((alpha){\subst uSub; (idx + from)}t)
                \else((alpha)seqGetOutside))

        \heuristics(simplify)
    };

    lenOfSeqDef {
        \schemaVar \term int from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \find(seqLen(seqDef{uSub;}(from, to, t)))

        \replacewith(\if(from < to) \then((to - from)) \else(0))

        \heuristics(simplify)
    };

    // --------------------------------------------------------------------
    // The core taclets for Seq end here.
    // Consistency of the core theory has to be guaranteed by external means,
    //  e.g. by presenting a model for it.
    // --------------------------------------------------------------------
}
