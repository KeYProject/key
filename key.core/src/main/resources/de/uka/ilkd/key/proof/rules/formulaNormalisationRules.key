// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 


// These schema variables are used to write the following rules.
// They will not be visible in later runs of the parser, so you are
// fairly free in choosing their names.

\sorts {
  \generic G;
  \generic H;
  \generic I;
  \generic subG \extends G;
  \generic NonSingleton \oneof {int, boolean};
}

\schemaVariables {
  \formula phi, psi, eta;
  \formula commLeft, commRight, commResidue;
  \formula assoc0, assoc1, assoc2;
  \formula distLeft, distRight0, distRight1;
  \formula b,c,d;

  \formula varFreeFirstLeft,varFreeFirstRight;
  \formula cnfOrder1,cnfOrder2,cnfOrder3;
  \formula pushDownCNFLeft, pushDownCNFRight;
  \formula pullOutCNFLeft, pullOutCNFRight;

  \variables G u, u2;
  \variables H v;  
  \variables G Gvar;
  \term subG subGterm;
  \term H Hterm;

  \term G applyEqLeft;
  \term H applyEqRight;
  \term I applyEqOther;
  \term G  else, then;
  \term H t;

  \variables NonSingleton nonSingleVar;
  \term int intTerm, intTermLeft, intTermRight;
  \variables int INTVar;
}

\rules {

// Propositional simplification

  eq_imp   { \find (phi -> phi)
             \replacewith (true)
             \heuristics(concrete) };

  eq_and   { \find (phi & phi)
             \replacewith (phi)
             \heuristics(concrete) };

  eq_and_2 { \find ((psi & phi) & phi)
             \replacewith (psi & phi)
             \heuristics(concrete) };

  eq_or    { \find (phi | phi)
             \replacewith (phi)
             \heuristics(concrete) };

  eq_or_2  { \find ((psi | phi) | phi)
             \replacewith (psi | phi)
             \heuristics(concrete) };

  eq_eq    { \find (phi <-> phi)
             \replacewith (true)
             \heuristics(concrete) };

  neq_and  { \find (phi&(!phi))
	     \replacewith(false)
	     \heuristics(concrete) };
 
  neq_and_2{ \find ((!phi)&phi)
	     \replacewith(false)
	     \heuristics(concrete) };
 
  neq_and_3{ \find ((psi&phi)&(!phi))
	     \replacewith(false)
	     \heuristics(concrete) };
 
  neq_and_4{ \find ((psi&(!phi))&phi)
	     \replacewith(false)
	     \heuristics(concrete) };
 
  neq_or   { \find (phi|(!phi))
	     \replacewith(true)
	     \heuristics(concrete) };
 
  neq_or_2 { \find ((!phi)|phi)
	     \replacewith(true)
	     \heuristics(concrete) };
 
  neq_or_3 { \find ((psi|phi)|(!phi))
	     \replacewith(true)
	     \heuristics(concrete) };
 
  neq_or_4 { \find ((psi|(!phi))|phi)
	     \replacewith(true)
	     \heuristics(concrete) };

// Negation normal form
//noninteractive
  nnf_ex2all     { \find (==> \exists u; phi)
                   \replacewith (\forall u; (!phi)==>)
                   \heuristics(moveQuantToLeft, notHumanReadable)
  };

  nnf_imp2or     { \find (phi->psi)
                   \replacewith ((!phi)|psi)
                   \heuristics(negationNormalForm,notHumanReadable) 
  };

  nnf_notAll     { \find (!(\forall u; phi))
		   \replacewith (\exists u; (!phi))
                   \heuristics(negationNormalForm, notHumanReadable) 
  };
		   
  nnf_notEx      { \find (!(\exists u; phi))
	           \replacewith (\forall u; (!phi))
                   \heuristics(negationNormalForm, notHumanReadable)
  };
		   
  nnf_notOr      { \find (!(phi|psi))
  	           \replacewith ((!phi)&(!psi))
                   \heuristics(negationNormalForm, notHumanReadable)
  };
  		   
  nnf_notAnd     { \find (!(phi&psi))
                   \replacewith ((!phi)|(!psi))
                   \heuristics(negationNormalForm, notHumanReadable)
  };

  nnf_notEqv     { \find ( !(phi <-> psi) )
                   \replacewith ( phi <-> !psi )
                   \heuristics(negationNormalForm, notHumanReadable)
  };

// Application of equations underneath quantifiers

  applyEq_and_gen0 { \find ( applyEqLeft = applyEqOther
                             & applyEqLeft = applyEqRight )
                     \replacewith ( applyEqRight = applyEqOther
                                    & applyEqLeft = applyEqRight )
                     \heuristics(apply_equations_andOr) };

  applyEq_and_gen1 { \find ( (b & applyEqLeft = applyEqOther)
                             & applyEqLeft = applyEqRight )
                     \replacewith ( (b & applyEqRight = applyEqOther)
                                    & applyEqLeft = applyEqRight )
                     \heuristics(apply_equations_andOr) };

  applyEq_and_gen2 { \find ( applyEqLeft != applyEqOther
                             & applyEqLeft = applyEqRight )
                     \replacewith ( applyEqRight != applyEqOther
                                    & applyEqLeft = applyEqRight )
                     \heuristics(apply_equations_andOr) };

  applyEq_and_gen3 { \find ( (b & applyEqLeft != applyEqOther)
                             & applyEqLeft = applyEqRight )
                     \replacewith ( (b & applyEqRight != applyEqOther)
                                    & applyEqLeft = applyEqRight )
                     \heuristics(apply_equations_andOr) };

  applyEq_or_gen0  { \find ( applyEqLeft = applyEqOther
                             | applyEqLeft != applyEqRight )
                     \replacewith ( applyEqRight = applyEqOther
                                    | applyEqLeft != applyEqRight )
                     \heuristics(apply_equations_andOr) };

  applyEq_or_gen1  { \find ( (b | applyEqLeft = applyEqOther)
                             | applyEqLeft != applyEqRight )
                     \replacewith ( (b | applyEqRight = applyEqOther)
                                    | applyEqLeft != applyEqRight )
                     \heuristics(apply_equations_andOr) };

  applyEq_or_gen2  { \find ( applyEqLeft != applyEqOther
                             | applyEqLeft != applyEqRight )
                     \replacewith ( applyEqRight != applyEqOther
                                    | applyEqLeft != applyEqRight )
                     \heuristics(apply_equations_andOr) };

  applyEq_or_gen3  { \find ( (b | applyEqLeft != applyEqOther)
                             | applyEqLeft != applyEqRight )
                     \replacewith ( (b | applyEqRight != applyEqOther)
                                    | applyEqLeft != applyEqRight )
                     \heuristics(apply_equations_andOr) };

// Putting things in CNF
//noninteractive
  shift_paren_and { \find (assoc0 & (assoc1 & assoc2))
                    \replacewith ((assoc0 & assoc1) & assoc2)
                    \heuristics(conjNormalForm, cnf_andAssoc) 
		
  };

  shift_paren_or  { \find (assoc0 | (assoc1 | assoc2))
                    \replacewith ((assoc0 | assoc1) | assoc2)
                    \heuristics(conjNormalForm, cnf_orAssoc) 
	      
  };

  commute_and { \find (commLeft & commRight)
                \replacewith (commRight & commLeft)
                \heuristics(conjNormalForm, cnf_andComm) };

  commute_and_2 { \find ((commResidue & commLeft) & commRight)
                  \replacewith ((commResidue & commRight) & commLeft)
                  \heuristics(conjNormalForm, cnf_andComm) };

  commute_or  { \find (commLeft | commRight)
                \replacewith (commRight | commLeft)
                \heuristics(conjNormalForm, cnf_orComm) };

  commute_or_2  { \find ((commResidue | commLeft) | commRight)
                  \replacewith ((commResidue | commRight) | commLeft)
                  \heuristics(conjNormalForm, cnf_orComm) };

  cnf_rightDist { \find ( distLeft | (distRight0 & distRight1) )
		  \replacewith ( (distLeft | distRight0)
                                 & (distRight1 | distLeft) )
                  \heuristics(conjNormalForm, cnf_dist) };

  local_cut { \find ( phi )
              \replacewith ( (!psi | phi) & (psi | phi) ) };


  cnf_eqv { \find ( phi <-> psi )
            \replacewith ( ( phi | !psi ) & ( !phi | psi ) )
            \heuristics(conjNormalForm, cnf_expandIfThenElse,notHumanReadable) 
	
  };

  ifthenelse_to_or_left { \find ( \if (phi) \then (then) \else (else) = t )
                          \replacewith ( (!phi | then = t) & (phi | else = t) )
                          \heuristics (conjNormalForm, cnf_expandIfThenElse, notHumanReadable) 
  };

  ifthenelse_to_or_left2 { \find ( \if (phi) \then (then) \else (else) != t )
                           \replacewith ( (!phi | then != t) & (phi | else != t) )
                           \heuristics (conjNormalForm, cnf_expandIfThenElse, notHumanReadable) 
  };

  ifthenelse_to_or_right { \find ( t = \if (phi) \then (then) \else (else) )
                           \replacewith ( (!phi | t = then) & (phi | t = else) )
                           \heuristics (conjNormalForm, cnf_expandIfThenElse, notHumanReadable)
  };

  ifthenelse_to_or_right2 { \find ( t != \if (phi) \then (then) \else (else) )
                            \replacewith ( (!phi | t != then) & (phi | t != else) )
                            \heuristics (conjNormalForm, cnf_expandIfThenElse, notHumanReadable) 
  };

  ifthenelse_to_or_for { \find ( \if (phi) \then (b) \else (c) )
                         \replacewith ( (!phi | b) & (phi | c) )
                         \heuristics (conjNormalForm, cnf_expandIfThenElse, notHumanReadable) 
  };

  ifthenelse_to_or_for2 { \find ( !(\if (phi) \then (b) \else (c)) )
                          \replacewith ( (!phi | !b) & (phi | !c) )
                          \heuristics (conjNormalForm, cnf_expandIfThenElse, notHumanReadable) 
  };

// Eliminate quantifiers

  elim_forall0 { \find ( \forall Gvar; ( Gvar != subGterm ) )
                 \varcond ( \notFreeIn ( Gvar, subGterm ) )
                 \replacewith ( false )
                 \heuristics(elimQuantifier) };

  elim_forall1 { \find ( \forall Gvar; ( subGterm != Gvar ) )
                 \varcond ( \notFreeIn ( Gvar, subGterm ) )
                 \replacewith ( false )
                 \heuristics(elimQuantifier) };

  elim_forall2 { \find ( \forall Gvar; ( Gvar != Hterm ) )
                 \varcond ( \notFreeIn ( Gvar, Hterm ) )
                 \replacewith ( G::instance(Hterm) = FALSE )
                 \heuristics(elimQuantifier, elimQuantifierWithCast) };

  elim_forall3 { \find ( \forall Gvar; ( Hterm != Gvar ) )
                 \varcond ( \notFreeIn ( Gvar, Hterm ) )
                 \replacewith ( G::instance(Hterm) = FALSE )
                 \heuristics(elimQuantifier, elimQuantifierWithCast) };

  elim_forall4 { \find ( \forall Gvar; ( phi | Gvar != subGterm ) )
                 \varcond ( \notFreeIn ( Gvar, subGterm ) )
                 \replacewith ( {\subst Gvar; subGterm}phi )
                 \heuristics(elimQuantifier) };

  elim_forall5 { \find ( \forall Gvar; ( phi | subGterm != Gvar ) )
                 \varcond ( \notFreeIn ( Gvar, subGterm ) )
                 \replacewith ( {\subst Gvar; subGterm}phi )
                 \heuristics(elimQuantifier) };

  elim_forall6 { \find ( \forall Gvar; ( phi | Gvar != Hterm ) )
                 \varcond ( \notFreeIn ( Gvar, Hterm ) )
                 \replacewith ( ({\subst Gvar; (G)Hterm}phi)
                                | G::instance(Hterm) = FALSE )
                 \heuristics(elimQuantifier, elimQuantifierWithCast) };

  elim_forall7 { \find ( \forall Gvar; ( phi | Hterm != Gvar ) )
                 \varcond ( \notFreeIn ( Gvar, Hterm ) )
                 \replacewith ( ({\subst Gvar; (G)Hterm}phi)
                                | G::instance(Hterm) = FALSE )
                 \heuristics(elimQuantifier, elimQuantifierWithCast) };

  // some shortcut rules that are not really necessary,
  // but that can make proofs much shorter
  elim_forall8 { \find ( \forall Gvar; ( Gvar = subGterm -> phi ) )
                 \varcond ( \notFreeIn ( Gvar, subGterm ) )
                 \replacewith ( {\subst Gvar; subGterm}phi )
                 \heuristics(elimQuantifier) };

  elim_forall9 { \find ( \forall Gvar; ( subGterm = Gvar -> phi ) )
                 \varcond ( \notFreeIn ( Gvar, subGterm ) )
                 \replacewith ( {\subst Gvar; subGterm}phi )
                 \heuristics(elimQuantifier) };

  elim_forall10 { \find ( \forall Gvar; ( Gvar = Hterm -> phi ) )
                  \varcond ( \notFreeIn ( Gvar, Hterm ) )
                  \replacewith ( ({\subst Gvar; (G)Hterm}phi)
                                 | G::instance(Hterm) = FALSE )
                  \heuristics(elimQuantifier, elimQuantifierWithCast) };

  elim_forall11 { \find ( \forall Gvar; ( Hterm = Gvar -> phi ) )
                  \varcond ( \notFreeIn ( Gvar, Hterm ) )
                  \replacewith ( ({\subst Gvar; (G)Hterm}phi)
                                 | G::instance(Hterm) = FALSE )
                  \heuristics(elimQuantifier, elimQuantifierWithCast) };

  elim_forall12 { \find ( \forall Gvar; ( (psi & Gvar = subGterm) -> phi ) )
                 \varcond ( \notFreeIn ( Gvar, subGterm ) )
                 \replacewith ( {\subst Gvar; subGterm}(psi -> phi) )
                 \heuristics(elimQuantifier) };

  elim_forall13 { \find ( \forall Gvar; ( (psi & subGterm = Gvar) -> phi ) )
                 \varcond ( \notFreeIn ( Gvar, subGterm ) )
                 \replacewith ( {\subst Gvar; subGterm}(psi -> phi) )
                 \heuristics(elimQuantifier) };

  elim_forall14 { \find ( \forall Gvar; ( (psi & Gvar = Hterm) -> phi ) )
                  \varcond ( \notFreeIn ( Gvar, Hterm ) )
                  \replacewith ( ({\subst Gvar; (G)Hterm}(psi -> phi))
                                 | G::instance(Hterm) = FALSE )
                  \heuristics(elimQuantifier, elimQuantifierWithCast) };

  elim_forall15 { \find ( \forall Gvar; ( (psi & Hterm = Gvar) -> phi ) )
                  \varcond ( \notFreeIn ( Gvar, Hterm ) )
                  \replacewith ( ({\subst Gvar; (G)Hterm}(psi -> phi))
                                 | G::instance(Hterm) = FALSE )
                  \heuristics(elimQuantifier, elimQuantifierWithCast) };

  elim_forall16 { \find ( \forall Gvar; ( (Gvar = subGterm & psi) -> phi ) )
                 \varcond ( \notFreeIn ( Gvar, subGterm ) )
                 \replacewith ( {\subst Gvar; subGterm}(psi -> phi) )
                 \heuristics(elimQuantifier) };

  elim_forall17 { \find ( \forall Gvar; ( (subGterm = Gvar & psi) -> phi ) )
                 \varcond ( \notFreeIn ( Gvar, subGterm ) )
                 \replacewith ( {\subst Gvar; subGterm}(psi -> phi) )
                 \heuristics(elimQuantifier) };

  elim_forall18 { \find ( \forall Gvar; ( (Gvar = Hterm & psi) -> phi ) )
                  \varcond ( \notFreeIn ( Gvar, Hterm ) )
                  \replacewith ( ({\subst Gvar; (G)Hterm}(psi -> phi))
                                 | G::instance(Hterm) = FALSE )
                  \heuristics(elimQuantifier, elimQuantifierWithCast) };

  elim_forall19 { \find ( \forall Gvar; ( (Hterm = Gvar & psi) -> phi ) )
                  \varcond ( \notFreeIn ( Gvar, Hterm ) )
                  \replacewith ( ({\subst Gvar; (G)Hterm}(psi -> phi))
                                 | G::instance(Hterm) = FALSE )
                  \heuristics(elimQuantifier, elimQuantifierWithCast) };

  elim_exists0 { \find ( \exists Gvar; ( Gvar = subGterm ) )
                 \varcond ( \notFreeIn ( Gvar, subGterm ) )
                 \replacewith ( true )
                 \heuristics(elimQuantifier) };

  elim_exists1 { \find ( \exists Gvar; ( subGterm = Gvar ) )
                 \varcond ( \notFreeIn ( Gvar, subGterm ) )
                 \replacewith ( true )
                 \heuristics(elimQuantifier) };

  elim_exists2 { \find ( \exists Gvar; ( Gvar = Hterm ) )
                 \varcond ( \notFreeIn ( Gvar, Hterm ) )
                 \replacewith ( G::instance(Hterm) = TRUE )
                 \heuristics(elimQuantifier, elimQuantifierWithCast) };

  elim_exists3 { \find ( \exists Gvar; ( Hterm = Gvar ) )
                 \varcond ( \notFreeIn ( Gvar, Hterm ) )
                 \replacewith ( G::instance(Hterm) = TRUE )
                 \heuristics(elimQuantifier, elimQuantifierWithCast) };

  elim_exists4 { \find ( \exists Gvar; ( phi & Gvar = subGterm ) )
                 \varcond ( \notFreeIn ( Gvar, subGterm ) )
                 \replacewith ( {\subst Gvar; subGterm}phi )
                 \heuristics(elimQuantifier) };

  elim_exists5 { \find ( \exists Gvar; ( phi & subGterm = Gvar ) )
                 \varcond ( \notFreeIn ( Gvar, subGterm ) )
                 \replacewith ( {\subst Gvar; subGterm}phi )
                 \heuristics(elimQuantifier) };

  elim_exists6 { \find ( \exists Gvar; ( phi & Gvar = Hterm ) )
                 \varcond ( \notFreeIn ( Gvar, Hterm ) )
                 \replacewith ( ({\subst Gvar; (G)Hterm}phi)
                                & G::instance(Hterm) = TRUE )
                 \heuristics(elimQuantifier, elimQuantifierWithCast) };

  elim_exists7 { \find ( \exists Gvar; ( phi & Hterm = Gvar ) )
                 \varcond ( \notFreeIn ( Gvar, Hterm ) )
                 \replacewith ( ({\subst Gvar; (G)Hterm}phi)
                                & G::instance(Hterm) = TRUE )
                 \heuristics(elimQuantifier, elimQuantifierWithCast) };

  // ---------------------------------------------------------------------------
  // ----- cases when quantifiers over non-singleton sorts can be removed ------
  // ---------------------------------------------------------------------------

  elim_forall_nonSingleton0 { \find ( \forall nonSingleVar; ( nonSingleVar = Hterm ) )
                              \varcond ( \notFreeIn ( nonSingleVar, Hterm ) )
                              \replacewith ( false )
                              \heuristics(elimQuantifier) };

  elim_forall_nonSingleton1 { \find ( \forall nonSingleVar; ( Hterm = nonSingleVar ) )
                              \varcond ( \notFreeIn ( nonSingleVar, Hterm ) )
                              \replacewith ( false )
                              \heuristics(elimQuantifier) };

  elim_forall_nonSingleton2 { \find ( \forall INTVar; ( INTVar >= intTerm ) )
                              \varcond ( \notFreeIn ( INTVar, intTerm ) )
                              \replacewith ( false )
                              \heuristics(elimQuantifier) };

  elim_forall_nonSingleton3 { \find ( \forall INTVar; ( INTVar <= intTerm ) )
                              \varcond ( \notFreeIn ( INTVar, intTerm ) )
                              \replacewith ( false )
                              \heuristics(elimQuantifier) };

  elim_forall_nonSingleton4 { \find ( \forall INTVar; ( intTerm >= INTVar ) )
                              \varcond ( \notFreeIn ( INTVar, intTerm ) )
                              \replacewith ( false )
                              \heuristics(elimQuantifier) };

  elim_forall_nonSingleton5 { \find ( \forall INTVar; ( intTerm <= INTVar ) )
                              \varcond ( \notFreeIn ( INTVar, intTerm ) )
                              \replacewith ( false )
                              \heuristics(elimQuantifier) };

  elim_exists_nonSingleton0 { \find ( \exists nonSingleVar; ( nonSingleVar != Hterm ) )
                              \varcond ( \notFreeIn ( nonSingleVar, Hterm ) )
                              \replacewith ( true )
                              \heuristics(elimQuantifier) };

  elim_exists_nonSingleton1 { \find ( \exists nonSingleVar; ( Hterm != nonSingleVar ) )
                              \varcond ( \notFreeIn ( nonSingleVar, Hterm ) )
                              \replacewith ( true )
                              \heuristics(elimQuantifier) };

  elim_exists_nonSingleton2 { \find ( \exists INTVar; ( INTVar >= intTerm ) )
                              \varcond ( \notFreeIn ( INTVar, intTerm ) )
                              \replacewith ( true )
                              \heuristics(elimQuantifier) };

  elim_exists_nonSingleton3 { \find ( \exists INTVar; ( INTVar <= intTerm ) )
                              \varcond ( \notFreeIn ( INTVar, intTerm ) )
                              \replacewith ( true )
                              \heuristics(elimQuantifier) };

  elim_exists_nonSingleton4 { \find ( \exists INTVar; ( intTerm >= INTVar ) )
                              \varcond ( \notFreeIn ( INTVar, intTerm ) )
                              \replacewith ( true )
                              \heuristics(elimQuantifier) };

  elim_exists_nonSingleton5 { \find ( \exists INTVar; ( intTerm <= INTVar ) )
                              \varcond ( \notFreeIn ( INTVar, intTerm ) )
                              \replacewith ( true )
                              \heuristics(elimQuantifier) };

// quantifier elimination rules for sets

 //verified with KeY -- RB 12.10.2013
 elim_exists_sub_1 {
        \schemaVar \variables LocSet locVar;
        \schemaVar \term LocSet locSetTermLeft, locSetTermRight;

  	\find (\exists locVar; (subset(locVar, locSetTermRight) & subset(locSetTermLeft, locVar)))
   	\varcond(\notFreeIn(locVar, locSetTermLeft, locSetTermRight))
   	\replacewith(subset(locSetTermLeft, locSetTermRight))
   	\heuristics (elimQuantifier) 
 };


 //verified with KeY -- RB 12.10.2013
 elim_exists_sub_1_or_phi {
        \schemaVar \variables LocSet locVar;
        \schemaVar \term LocSet locSetTermLeft, locSetTermRight;

  	\find (\exists locVar; ((subset(locVar, locSetTermRight) & subset(locSetTermLeft, locVar)) | phi))
   	\varcond(\notFreeIn(locVar, locSetTermLeft, locSetTermRight))
   	\replacewith(subset(locSetTermLeft, locSetTermRight) | \exists locVar; phi)
   	\heuristics (elimQuantifier) 
 };

 //verified with KeY -- RB 12.10.2013
 elim_exists_sub_1_and_phi {
        \schemaVar \variables LocSet locVar;
        \schemaVar \term LocSet locSetTerm;

  	\find (\exists locVar; (subset(locVar, locSetTerm) & subset(locSetTerm, locVar) & phi))
   	\varcond(\notFreeIn(locVar, locSetTerm))
   	\replacewith(\exists locVar;(locVar = locSetTerm & phi))
   	\heuristics (elimQuantifier) 
 };

 //verified with KeY -- RB 12.10.2013
 elim_forall_superOfAll {
        \schemaVar \variables LocSet locVar;
        \schemaVar \term LocSet locSetTerm;

  	\find (\forall locVar; subset(locVar, locSetTerm))
   	\varcond(\notFreeIn(locVar, locSetTerm))
   	\replacewith(locSetTerm = allLocs)
   	\heuristics (elimQuantifier) 
 };

 //verified with KeY -- RB 12.10.2013
 elim_forall_subOfAll {
        \schemaVar \variables LocSet locVar;
        \schemaVar \term LocSet locSetTerm;

  	\find (\forall locVar; subset(locSetTerm,locVar))
   	\varcond(\notFreeIn(locVar, locSetTerm))
   	\replacewith(locSetTerm = empty)
   	\heuristics (elimQuantifier) 
 };


 //verified with KeY -- RB 12.10.2013
 elim_forall_subOfAll_and_phi {
        \schemaVar \variables LocSet locVar;
        \schemaVar \term LocSet locSetTerm;

  	\find (\forall locVar; (subset(locSetTerm, locVar) & phi))
   	\varcond(\notFreeIn(locVar, locSetTerm))
   	\replacewith(locSetTerm = empty & \forall locVar; phi)
   	\heuristics (elimQuantifier) 
 };

 //verified with KeY -- RB 12.10.2013
 elim_forall_superOfAll_and_phi {
        \schemaVar \variables LocSet locVar;
        \schemaVar \term LocSet locSetTerm;

  	\find (\forall locVar; (subset(locVar, locSetTerm) & phi))
   	\varcond(\notFreeIn(locVar, locSetTerm))
   	\replacewith(locSetTerm = allLocs & \forall locVar; phi)
   	\heuristics (elimQuantifier) 
 };

 //verified with KeY -- RB 12.10.2013
 elim_forall_eqSet_imp_phi {
        \schemaVar \variables LocSet locVar;
        \schemaVar \term LocSet locSetTerm;

  	\find (\forall locVar; ((subset(locVar, locSetTerm) & subset(locSetTerm, locVar)) -> phi))
   	\varcond(\notFreeIn(locVar, locSetTerm))
   	\replacewith(\forall locVar;(locSetTerm = locVar -> phi))
   	\heuristics (elimQuantifier) 
 };


// quantifier elimination rules for orders

  elim_forall_leq {
   	\find (\forall INTVar; (INTVar<=intTermLeft | INTVar>=intTermRight))
   	\varcond(\notFreeIn(INTVar, intTermLeft, intTermRight))
   	\replacewith(intTermRight <= intTermLeft + 1)
   	\heuristics (elimQuantifier)
  };

  elim_exists_leq {
	\find (\exists INTVar; (INTVar<=intTermLeft & INTVar>=intTermRight))
	\varcond(\notFreeIn(INTVar, intTermLeft, intTermRight))
	\replacewith(intTermRight <= intTermLeft)
	\heuristics (elimQuantifier)
  };


// Swap two quantifiers
  swapQuantifiersAll { \find ( \forall u; \forall v; phi )
                       \replacewith ( \forall v; \forall u; phi )
                       \heuristics ( swapQuantifiers ) };

  swapQuantifiersEx { \find ( \exists u; \exists v; phi )
                      \replacewith ( \exists v; \exists u; phi )
                      \heuristics ( swapQuantifiers ) };

// Distribute quantifiers
//noninteractive
  distr_forallAnd { \find (\forall u; (phi & psi))
                    \replacewith ((\forall u; phi) & (\forall u; psi))
                    \heuristics(distrQuantifier, notHumanReadable)
  };

  distr_existsOr  { \find (\exists u; (phi | psi))
                    \replacewith ((\exists u; phi) | (\exists u; psi))
                    \heuristics(distrQuantifier, notHumanReadable) 
  };

  distr_forallOr1 { \find (\forall u; (phi | psi))
                    \varcond (\notFreeIn(u, psi))
                    \replacewith ((\forall u; phi) | psi)
                    \heuristics(distrQuantifier, notHumanReadable) 
  };

  distr_forallOr2 { \find (\forall u; (phi | psi))
                    \varcond (\notFreeIn(u, phi))
                    \replacewith (phi | (\forall u; psi))
                    \heuristics(distrQuantifier, notHumanReadable) 
  };


  distr_existsAnd1  { \find (\exists u; (phi & psi))
                      \varcond (\notFreeIn(u, psi))
                      \replacewith ((\exists u; phi) & psi)
                      \heuristics(distrQuantifier, notHumanReadable) 
  };

  distr_existsAnd2  { \find (\exists u; (phi & psi))
                      \varcond (\notFreeIn(u, phi))
                      \replacewith (phi & (\exists u; psi))
                      \heuristics(distrQuantifier, notHumanReadable) 
  };


// Pull out quantifiers

  all_pull_out0 { \find ((\forall u; b) & c)
		  \varcond ( \notFreeIn(u, c) )
		  \replacewith (\forall u; (b & c))
		  \heuristics (pullOutQuantifierAll) };

  all_pull_out1 { \find (c & (\forall u; b))
		  \varcond ( \notFreeIn(u, c) )
		  \replacewith (\forall u; (c & b))
		  \heuristics (pullOutQuantifierAll) };

  all_pull_out2 { \find ((\forall u; b) | c)
		  \varcond ( \notFreeIn(u, c) )
		  \replacewith (\forall u; (b | c))
		  \heuristics (pullOutQuantifierAll) };

  all_pull_out3 { \find (c | (\forall u; b))
		  \varcond ( \notFreeIn(u, c) )
		  \replacewith (\forall u; (c | b))
		  \heuristics (pullOutQuantifierAll) };

  all_pull_out4 { \find ((\forall u; b) & (\forall u2; c))
		  \varcond ( \notFreeIn(u, c) )
	          \replacewith (\forall u; (b & {\subst u2; u}c))
		  \heuristics (pullOutQuantifierAll, pullOutQuantifierUnifying) };

  ex_pull_out0 { \find ((\exists u; b) & c)
		  \varcond ( \notFreeIn(u, c) )
		  \replacewith (\exists u; (b & c))
		  \heuristics (pullOutQuantifierEx) };

  ex_pull_out1 { \find (c & (\exists u; b))
		  \varcond ( \notFreeIn(u, c) )
		  \replacewith (\exists u; (c & b))
		  \heuristics (pullOutQuantifierEx) };

  ex_pull_out2 { \find ((\exists u; b) | c)
		  \varcond ( \notFreeIn(u, c) )
		  \replacewith (\exists u; (b | c))
		  \heuristics (pullOutQuantifierEx) };

  ex_pull_out3 { \find (c | (\exists u; b))
		  \varcond ( \notFreeIn(u, c) )
		  \replacewith (\exists u; (c | b))
		  \heuristics (pullOutQuantifierEx) };

  ex_pull_out4 { \find ((\exists u; b) | (\exists u2; c))
		  \varcond ( \notFreeIn(u, c) )
		  \replacewith (\exists u; (b | {\subst u2; u}c))
		  \heuristics (pullOutQuantifierEx, pullOutQuantifierUnifying) };

  // proven with KeY (CS)
  ifEqualsNull {
    \schemaVar \term any x, y;

    \find (\if(phi) \then(x) \else(y) = null)
    \replacewith((phi & x = null) | (!phi & y = null))
    \heuristics(simplify)
  };


  // proven with KeY (CS)
  ifEqualsTRUE {
    \schemaVar \term any x, y;

    \find (\if(phi) \then(x) \else(y) = TRUE)
    \replacewith((phi & x = TRUE) | (!phi & y = TRUE))
    \heuristics(simplify)
  };


  // proven with KeY (CS)
  ifEqualsInteger {
    \schemaVar \term any x, y;
    \schemaVar \term numbers iz;

    \find (\if(phi) \then(x) \else(y) = Z(iz))
    \replacewith((phi & x = Z(iz)) | (!phi & y = Z(iz)))
    \heuristics(simplify)
  };
}
