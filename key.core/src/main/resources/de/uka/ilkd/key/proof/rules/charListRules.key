/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

\rules(Strings:on) {
    /***********
     *  AXIOMS *
     ***********/
    /*
     * Seq clTranslateInt (int)
     * - translating an integer into a Seq
     */
    translate0 {
        \schemaVar \term numbers iz;
        \find(clTranslateInt(Z(0(iz))))
        \replacewith(seqConcat(clTranslateInt(Z(iz)), seqSingleton('0')))
        \heuristics(integerToString)
    };

    translate1 {
        \schemaVar \term numbers iz;
        \find(clTranslateInt(Z(1(iz))))
        \replacewith(seqConcat(clTranslateInt(Z(iz)), seqSingleton('1')))
        \heuristics(integerToString)
    };

    translate2 {
        \schemaVar \term numbers iz;
        \find(clTranslateInt(Z(2(iz))))
        \replacewith(seqConcat(clTranslateInt(Z(iz)), seqSingleton('2')))
        \heuristics(integerToString)
    };

    translate3 {
        \schemaVar \term numbers iz;
        \find(clTranslateInt(Z(3(iz))))
        \replacewith(seqConcat(clTranslateInt(Z(iz)), seqSingleton('3')))
        \heuristics(integerToString)
    };

    translate4 {
        \schemaVar \term numbers iz;
        \find(clTranslateInt(Z(4(iz))))
        \replacewith(seqConcat(clTranslateInt(Z(iz)), seqSingleton('4')))
        \heuristics(integerToString)
    };

    translate5 {
        \schemaVar \term numbers iz;
        \find(clTranslateInt(Z(5(iz))))
        \replacewith(seqConcat(clTranslateInt(Z(iz)), seqSingleton('5')))
        \heuristics(integerToString)
    };

    translate6 {
        \schemaVar \term numbers iz;
        \find(clTranslateInt(Z(6(iz))))
        \replacewith(seqConcat(clTranslateInt(Z(iz)), seqSingleton('6')))
        \heuristics(integerToString)
    };

    translate7 {
        \schemaVar \term numbers iz;
        \find(clTranslateInt(Z(7(iz))))
        \replacewith(seqConcat(clTranslateInt(Z(iz)), seqSingleton('7')))
        \heuristics(integerToString)
    };

    translate8 {
        \schemaVar \term numbers iz;
        \find(clTranslateInt(Z(8(iz))))
        \replacewith(seqConcat(clTranslateInt(Z(iz)), seqSingleton('8')))
        \heuristics(integerToString)
    };

    translate9 {
        \schemaVar \term numbers iz;
        \find(clTranslateInt(Z(9(iz))))
        \replacewith(seqConcat(clTranslateInt(Z(iz)), seqSingleton('9')))
        \heuristics(integerToString)
    };

    translate# {
        \find(clTranslateInt(Z(#)))
        \replacewith(seqEmpty)
        \heuristics(integerToString)
    };

    translateNegLit {
        \schemaVar \term numbers iz;
        \find(clTranslateInt(Z(neglit(iz))))
        \replacewith(seqConcat(seqSingleton('-'), clTranslateInt(Z(iz))))
        \heuristics(integerToString)
    };

    /*
     * Seq clRemoveZeros (Seq) - removing '0' from
     * the beginning of a Seq must not lead to the empty list
     */
    removeZeros {
        \schemaVar \term Seq l;
        \find(clRemoveZeros(l))
        \replacewith(\if(l = seqEmpty | int::seqGet(l, 0) = '0') \then(l) \else(clRemoveZeros(seqSub(l, 1, seqLen(l)))))
        \heuristics(integerToString)
    };

    /*
     * = (Seq,Seq)nonNe
     * the equality predicate
     */

    /*
     * clContains (Seq,Seq)
     * predicate indicating whether the second character sequence is contained in the first one
     */
    containsAxiomAntec {
        \schemaVar \term Seq searchString, textString;
        \schemaVar \variables int iv;

        \find(clContains(textString, searchString) ==>)
        \varcond(\notFreeIn(iv, searchString), \notFreeIn(iv, textString))
        \replacewith(\exists iv; (iv >= 0
                & iv + seqLen(searchString) <= seqLen(textString)
                & seqSub(textString, iv, iv + seqLen(searchString)) = searchString) ==>)

        \heuristics(stringsExpandDefNormalOp)
    };

    containsAxiomSucc {
        \schemaVar \term Seq searchString, textString;
        \schemaVar \variables int iv;

        \find( ==> clContains(textString, searchString))
        \varcond(\notFreeIn(iv, searchString), \notFreeIn(iv, textString))
        \replacewith( ==> \exists iv; (iv >= 0
                & iv + seqLen(searchString) <= seqLen(textString)
                & seqSub(textString, iv, iv + seqLen(searchString)) = searchString))

        \heuristics(stringsExpandDefNormalOp)
    };

    contains {
        \schemaVar \term Seq searchString, textStringTail;
        \schemaVar \term int fstTextCharacter;
        \schemaVar \skolemTerm int newSym;

        \find(clContains(seqConcat(seqSingleton(fstTextCharacter), textStringTail), searchString))
        \sameUpdateLevel
        \varcond(\newDependingOn(newSym, searchString))
        \replacewith(newSym < seqLen(textStringTail) &
            (seqSub(seqConcat(seqSingleton(fstTextCharacter), textStringTail), 0, newSym) = searchString |
                clContains(textStringTail, searchString)))
        \add(seqLen(searchString) = newSym ==>)

        \heuristics(stringsContainsDefInline, stringsIntroduceNewSym)

    };

    /*
     * int clIndexOfChar (Sequent, int, int)
     */
    indexOf {
        \schemaVar \term Seq l;
        \schemaVar \term int c;
        \schemaVar \term int i;
        \schemaVar \variables int iv;
        \find(clIndexOfChar(l, c, i))
        \varcond(\notFreeIn(iv, l),
            \notFreeIn(iv, c),
            \notFreeIn(iv, i))
        \replacewith(\ifExiv; (i >= 0
                & iv >= i
                & iv < seqLen(l)
                & int::seqGet(l, iv) = c)
            \then(iv)
            \else(-1))
        \heuristics(stringsExpandDefNormalOp)
    };

    /*
     * Seq clReplace (Seq, int, int)
     * replace all occurrences of the first character
     * with the second character
     */
    replaceEmpty {
        \schemaVar \term int searchChar, replChar;

        \find(clReplace(seqEmpty, searchChar, replChar))
        \replacewith(seqEmpty)
        \heuristics(stringsSimplify)
    };

    replaceSingleton {
        \schemaVar \term Seq str;
        \schemaVar \term int searchChar, replChar, fstChar;

        \find(clReplace(seqSingleton(fstChar), searchChar, replChar))
        \replacewith(\if(searchChar = fstChar)
                \then(seqSingleton(replChar))
                \else(seqSingleton(fstChar)))
        \heuristics(stringsSimplify)
    };

    replaceCons {
        \schemaVar \term Seq str;
        \schemaVar \term int searchChar, replChar, fstChar;

        \find(clReplace(seqConcat(seqSingleton(fstChar), str), searchChar, replChar))
        \replacewith(\if(searchChar = fstChar)
                \then(seqConcat(seqSingleton(replChar),
                        clReplace(str, searchChar, replChar)))
                \else(seqConcat(seqSingleton(fstChar),
                        clReplace(str, searchChar, replChar))))
        \heuristics(defOpsReplaceInline)
    };

    replaceDef {
        \schemaVar \term Seq str;
        \schemaVar \skolemTerm Seq newSym;
        \schemaVar \term int searchChar, replChar;
        \schemaVar \variables int pos;

        \find(clReplace(str, searchChar, replChar))
        \sameUpdateLevel
        \varcond(
            \notFreeIn(pos, str, searchChar, replChar),
            \newDependingOn(newSym, searchChar),
            \newDependingOn(newSym, replChar),
            \newDependingOn(newSym, str))
        \add(clReplace(str, searchChar, replChar) = newSym &
            seqDef{pos;}(0, seqLen(str), \if(int::seqGet(str, pos) = searchChar) \then(replChar) \else(int::seqGet(str, pos))) = newSym
            ==>)

        \heuristics(defOpsReplace, stringsIntroduceNewSym)
    };

    /*
     * clEndsWith(Seq,Seq)
     * predicate indicating if the second list
     * is a suffix of the first one
     */
    endsWith {
        \schemaVar \term Seq sourceStr, searchStr;

        \find(clEndsWith(sourceStr, searchStr))
        \replacewith(
            \if(seqLen(searchStr) > seqLen(sourceStr))
                \then(false)
                \else(seqSub(sourceStr, seqLen(sourceStr) - seqLen(searchStr), seqLen(sourceStr)) = searchStr))

        \heuristics(defOpsStartsEndsWith)
    };

    /*
     * clStartsWith(Seq,Seq)
     * predicate indicating if the second list
     * is a prefix of the first one
     */
    startsWith {
        \schemaVar \term Seq sourceStr, searchStr;
        \find(clStartsWith(sourceStr, searchStr))
        \replacewith(
            \if(seqLen(searchStr) > seqLen(sourceStr))
                \then(false)
                \else(seqSub(sourceStr, 0, seqLen(searchStr)) = searchStr))
        \heuristics(defOpsStartsEndsWith)
    };

    /*
     * int clIndexOfCl (Seq,int,Seq)
     */
    indexOfStr {
        \schemaVar \term Seq searchStr, sourceStr;
        \schemaVar \term int i;
        \schemaVar \variables int iv;
        \find(clIndexOfCl(sourceStr, i, searchStr))
        \varcond(\notFreeIn(iv, searchStr), \notFreeIn(iv, sourceStr), \notFreeIn(iv, i))
        \replacewith(\ifExiv; (iv >= i
                & iv >= 0
                & iv + seqLen(searchStr) <= seqLen(sourceStr)
                & (seqSub(sourceStr, iv, iv + seqLen(searchStr)) = searchStr))
            \then(iv)
            \else(-1))
        \heuristics(stringsExpandDefNormalOp)
    };

    /*
     * int clLastIndexOfChar (int,int,Seq)
     */
    lastIndexOf {
        \schemaVar \term Seq sourceStr;
        \schemaVar \term int c;
        \schemaVar \term int i;
        \schemaVar \variables int iv;
        \find(clLastIndexOfChar(sourceStr, c, i))
        \varcond(\notFreeIn(iv, c), \notFreeIn(iv, i), \notFreeIn(iv, sourceStr))
        \replacewith(\ifExiv; (iv > 0
                & i >= iv
                & i - iv < seqLen(sourceStr)
                & int::seqGet(sourceStr, i - iv) = c)
            \then(i - iv)
            \else(-1))
        \heuristics(stringsExpandDefNormalOp)
    };

    /*
     * int clLastIndexOfCl (Seq,int,Seq)
     */
    lastIndexOfStr {
        \schemaVar \term Seq searchStr, sourceStr;
        \schemaVar \term int i;
        \schemaVar \variables int iv;
        \find(clLastIndexOfCl(sourceStr, i, searchStr))
        \varcond(\notFreeIn(iv, searchStr), \notFreeIn(iv, i), \notFreeIn(iv, sourceStr))
        \replacewith(\ifExiv; (iv > 0
                & i - iv >= 0
                & seqLen(searchStr) + i - iv <= seqLen(sourceStr)
                & (seqSub(sourceStr, i - iv, seqLen(searchStr) + i - iv) = searchStr))
            \then(i - iv)
            \else(-1))
        \heuristics(stringsExpandDefNormalOp)
    };

    /**
     * we define only the base case
     */
    hashCodeBase {
        \find(clHashCode(seqEmpty))
        \replacewith(0)
        \heuristics(simplify_literals)
    };

    /************
     *  LEMMAS  *
     ************/

    /*
     * A clReplace application will not change
     * the length of the string
     */
    lengthReplace {
        \schemaVar \term Seq str, newStr;
        \schemaVar \term int searchChar, replaceChar;

        \find(seqLen(clReplace(str, searchChar, replaceChar)))
        \replacewith(seqLen(str))
        \heuristics(stringsSimplify)
    };

    lengthReplaceEQ {
        \schemaVar \term Seq str, newStr;
        \schemaVar \term int searchChar, replaceChar;

        \assumes(clReplace(str, searchChar, replaceChar) = newStr ==>)
        \find(seqLen(newStr))
        \sameUpdateLevel
        \replacewith(seqLen(str))
        \heuristics(stringsSimplify)
    };

    /*
     * Two succedent substring calls can be combined to one
     */
    substringSubstring {
        \schemaVar \term Seq str;
        \schemaVar \skolemTerm Seq newSym;
        \schemaVar \term int outerStartIdx, outerEndIdx, innerStartIdx, innerEndIdx;

        \find(seqSub(seqSub(str, innerStartIdx, innerEndIdx), outerStartIdx, outerEndIdx))
        \sameUpdateLevel

        \varcond(
            \newDependingOn(newSym, str),
            \newDependingOn(newSym, outerStartIdx),
            \newDependingOn(newSym, outerEndIdx),
            \newDependingOn(newSym, innerStartIdx))
        \add((innerStartIdx >= 0
                & innerEndIdx >= innerStartIdx
                & innerEndIdx <= seqLen(str)
                & outerStartIdx >= 0
                & outerEndIdx >= outerStartIdx
                & outerEndIdx <= innerEndIdx - innerStartIdx)
            ->
            (
                seqSub(seqSub(str, innerStartIdx, innerEndIdx), outerStartIdx, outerEndIdx) = newSym &
                seqSub(str, outerStartIdx + innerStartIdx, innerStartIdx + outerEndIdx) = newSym) ==>)
        \heuristics(stringsReduceSubstring, stringsIntroduceNewSym)
    };

    substringSubstring2 {
        \schemaVar \term Seq str, innerSub;
        \schemaVar \skolemTerm Seq newSym;
        \schemaVar \term int outerStartIdx, outerEndIdx, innerStartIdx, innerEndIdx;

        \assumes(seqSub(str, innerStartIdx, innerEndIdx) = innerSub ==>)
        \find(seqSub(innerSub, outerStartIdx, outerEndIdx))
        \sameUpdateLevel
        \varcond(
            \newDependingOn(newSym, str),
            \newDependingOn(newSym, outerStartIdx),
            \newDependingOn(newSym, outerEndIdx),
            \newDependingOn(newSym, innerStartIdx))
        \add((innerStartIdx >= 0
                & innerEndIdx >= innerStartIdx
                & innerEndIdx <= seqLen(str)
                & outerStartIdx >= 0
                & outerEndIdx >= outerStartIdx
                & outerEndIdx <= innerEndIdx - innerStartIdx)
            ->
            (seqSub(innerSub, outerStartIdx, outerEndIdx) = newSym &
                seqSub(str, outerStartIdx + innerStartIdx, innerStartIdx + outerEndIdx) = newSym) ==>)
        \heuristics(stringsReduceSubstring, stringsIntroduceNewSym)
    };

    equalCharacters {
        \schemaVar \term numbers iz1, iz2;
        \find(C(iz1) = C(iz2))
        \replacewith(Z(iz1) = Z(iz2))
        \heuristics(stringsSimplify)
    };

    replaceSubstring {
        \schemaVar \term Seq str, subStr;
        \schemaVar \term int searchChar, replaceChar;
        \schemaVar \term int startIdx, endIdx;

        \assumes(seqSub(str, startIdx, endIdx) = subStr ==>)

        \find(clReplace(subStr, searchChar, replaceChar))
        \sameUpdateLevel
        \replacewith(\if(startIdx >= 0 & endIdx >= startIdx & endIdx <= seqLen(str))
                \then(seqSub(clReplace(str, searchChar, replaceChar), startIdx, endIdx))
                \else(clReplace(subStr, searchChar, replaceChar)))
        \heuristics(stringsMoveReplaceInside)

        \displayname "replaceSubstring"
    };

    /*
     * A clReplace inside a seqConcat application
     * does not affect the seqConcat...
     */
    replaceConcat {
        \schemaVar \term Seq leftStr, rightStr;
        \schemaVar \term int searchChar, replaceChar;
        \find(clReplace(seqConcat(leftStr, rightStr), searchChar, replaceChar))
        \replacewith(seqConcat(clReplace(leftStr, searchChar, replaceChar),
                clReplace(rightStr, searchChar, replaceChar)))
        \heuristics(stringsMoveReplaceInside)
    };
}
