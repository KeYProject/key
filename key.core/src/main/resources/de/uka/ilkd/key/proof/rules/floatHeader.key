// This file is part of KeY - Integrated Deductive Software Design
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2014 Karlsruhe Institute of Technology, Germany
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General
// Public License. See LICENSE.TXT for details.
//

\sorts {

    fp;
    float \extends fp;
    double \extends fp;

    java.lang.Math \extends java.lang.Object;
}

\functions {
    // Float literals, represented as the integer with the
    // same binary representation as the fp literal in smt
    float FP(numbers);
    double DFP(numbers);

    // SINGLE PRECISION OPERATIONS

    // Arithmetic operations transformed differently depending on chosen semantics
    float javaUnaryMinusFloat(float);
    float javaAddFloat(float, float);
    float javaSubFloat(float, float);
    float javaMulFloat(float, float);
    float javaDivFloat(float, float);
    float javaModFloat(float, float);
    float javaMinFloat(float, float);
    float javaMaxFloat(float, float);

    // Operations indicating forbidden float values (e.g. NaN or overflow/underflow)
    float javaAddFloatForbiddenResult(float, float);
    float javaSubFloatForbiddenResult(float, float);
    float javaMulFloatForbiddenResult(float, float);
    float javaDivFloatForbiddenResult(float, float);

    // Floating-point arithmetic with IEEE 754 semantics
    float addFloat(float, float);
    float subFloat(float, float);
    float mulFloat(float, float);
    float divFloat(float, float);
    float negFloat(float);

    float absFloat(float);

    // DOUBLE PRECISION OPERATIONS

    // Arithmetic operations transformed differently depending on chosen semantics
    double javaUnaryMinusDouble(double);
    double javaAddDouble(double, double);
    double javaSubDouble(double, double);
    double javaMulDouble(double, double);
    double javaDivDouble(double, double);
    double javaModDouble(double, double);
    double javaMinDouble(double, double);
    double javaMaxDouble(double, double);

    // Operations indicating forbidden double values (e.g. NaN or overflow/underflow)
    double javaAddDoubleForbiddenResult(double, double);
    double javaSubDoubleForbiddenResult(double, double);
    double javaMulDoubleForbiddenResult(double, double);
    double javaDivDoubleForbiddenResult(double, double);

    // Double arithmetic with IEEE 754 semantics
    double addDouble(double, double);
    double subDouble(double, double);
    double mulDouble(double, double);
    double divDouble(double, double);
    double negDouble(double);

    double absDouble(double);

    // Mathematical representations of transcendental functions
    double sinDouble(double);
    double asinDouble(double);
    double cosDouble(double);
    double acosDouble(double);
    double tanDouble(double);
    double atan2Double(double, double);
    double sqrtDouble(double);
    double powDouble(double, double);
    double expDouble(double);
    double atanDouble(double);
}

\predicates
{
    ltFloat(float, float);
    gtFloat(float, float);
    leqFloat(float, float);
    geqFloat(float, float);
    eqFloat(float, float);

    floatIsNaN(float);
    floatIsZero(float);
    floatIsNormal(float);
    floatIsSubnormal(float);
    floatIsInfinite(float);
    floatIsPositive(float);
    floatIsNegative(float);
    floatIsNice(float);

    ltDouble(double, double);
    gtDouble(double, double);
    leqDouble(double, double);
    geqDouble(double, double);
    eqDouble(double, double);

    doubleIsNaN(double);
    doubleIsZero(double);
    doubleIsNormal(double);
    doubleIsSubnormal(double);
    doubleIsInfinite(double);
    doubleIsPositive(double);
    doubleIsNegative(double);
    doubleIsNice(double);
}
