/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

/**
    Rules for java integer semantics and all functions which simulate Java overflow.

    See intRules.key for an overview of the integer files.
*/

\schemaVariables {
    \term int left, right, i, i0, i1;
    \term numbers iz, jz;
}

// ------------------------------------------------------------------------
// rules handling modulo functions which simulate Java overflow
// ------------------------------------------------------------------------
\rules {
    // reviewed 04/20/2004, St.S.
    expand_addJint {
        \find(addJint(i, i1))
        \replacewith(moduloInt(add(i, i1)))
        \heuristics(defOps_expandJNumericOp)
    };

    // reviewed 04/20/2004, St.S.
    expand_unaryMinusJint {
        \find(unaryMinusJint(i))
        \replacewith(moduloInt(neg(i)))
        \heuristics(defOps_expandJNumericOp)
    };

    // reviewed 04/20/2004, St.S.
    expand_subJint {
        \find(subJint(i, i1))
        \replacewith(moduloInt(sub(i, i1)))
        \heuristics(defOps_expandJNumericOp)
    };

    // reviewed 04/20/2004, St.S.
    expand_mulJint {
        \find(mulJint(i, i1))
        \replacewith(moduloInt(mul(i, i1)))
        \heuristics(defOps_expandJNumericOp)
    };

    // reviewed 04/20/2004, St.S.
    expand_divJint {
        \find(divJint(i, i1))
        \replacewith(moduloInt(jdiv(i, i1)))
        \heuristics(defOps_expandJNumericOp)
    };

    // reviewed 04/20/2004, St.S.
    expand_modJint {
        \find(modJint(i, i1))
        \replacewith(moduloInt(jmod(i, i1)))
        \heuristics(defOps_expandJNumericOp)
    };

    // reviewed 11/30/2004, St.S.
    expand_addJlong {
        \find(addJlong(i, i1))
        \replacewith(moduloLong(add(i, i1)))
        \heuristics(defOps_expandJNumericOp)
    };

    // reviewed 11/30/2004, St.S.
    expand_unaryMinusJlong {
        \find(unaryMinusJlong(i))
        \replacewith(moduloLong(neg(i)))
        \heuristics(defOps_expandJNumericOp)
    };

    // reviewed 11/30/2004, St.S.
    expand_subJlong {
        \find(subJlong(i, i1))
        \replacewith(moduloLong(sub(i, i1)))
        \heuristics(defOps_expandJNumericOp)
    };

    // reviewed 11/30/2004, St.S.
    expand_mulJlong {
        \find(mulJlong(i, i1))
        \replacewith(moduloLong(mul(i, i1)))
        \heuristics(defOps_expandJNumericOp)
    };

    // reviewed 11/30/2004, St.S.
    expand_divJlong {
        \find(divJlong(i, i1))
        \replacewith(moduloLong(jdiv(i, i1)))
        \heuristics(defOps_expandJNumericOp)
    };

    // reviewed 11/30/2004, St.S.
    expand_modJlong {
        \find(modJlong(i, i1))
        \replacewith(moduloLong(jmod(i, i1)))
        \heuristics(defOps_expandJNumericOp)
    };

    bitwiseNegateJIntDefinition {
        \find(bitwiseNegateJint(i))
        \replacewith(sub(neg(i), 1))
        \heuristics(javaIntegerSemantics)
        \displayname "bitwiseNegateDefinition"
    };

    bitwiseNegateJlongDefinition {
        \find(bitwiseNegateJlong(i))
        \replacewith(sub(neg(i), 1))
        \heuristics(javaIntegerSemantics)
        \displayname "bitwiseNegateDefinition"
    };
}

// --------------------------------------------------------------------------
// Axioms defining the integer translation functions
// --------------------------------------------------------------------------
\rules(programRules:Java, intRules:javaSemantics) {
    expandInByte {
        \find(inByte(i))
        \replacewith(inRangeByte(i))
        \heuristics(concrete)
    };

    expandInChar {
        \find(inChar(i))
        \replacewith(inRangeChar(i))
        \heuristics(concrete)
    };

    expandInShort {
        \find(inShort(i))
        \replacewith(inRangeShort(i))
        \heuristics(concrete)
    };

    expandInInt {
        \find(inInt(i))
        \replacewith(inRangeInt(i))
        \heuristics(concrete)
    };

    expandInLong {
        \find(inLong(i))
        \replacewith(inRangeLong(i))
        \heuristics(concrete)
    };

    translateJavaUnaryMinusInt {
        \find(javaUnaryMinusInt(left))
        \replacewith(unaryMinusJint(left))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaUnaryMinus"
    };

    translateJavaUnaryMinusLong {
        \find(javaUnaryMinusLong(left))
        \replacewith(unaryMinusJlong(left))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaUnaryMinus"
    };

    translatejavaBitwiseNegateInt {
        \find(javaBitwiseNegateInt(left))
        \replacewith(bitwiseNegateJint(left))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseNegation"
    };

    translatejavaBitwiseNegateLong {
        \find(javaBitwiseNegateLong(left))
        \replacewith(bitwiseNegateJlong(left))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseNegation"
    };

    translateJavaAddInt {
        \find(javaAddInt(left, right))
        \replacewith(addJint(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaAdd"
    };

    translateJavaAddLong {
        \find(javaAddLong(left, right))
        \replacewith(addJlong(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaAdd"
    };

    translateJavaSubInt {
        \find(javaSubInt(left, right))
        \replacewith(subJint(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaSub"
    };

    translateJavaSubLong {
        \find(javaSubLong(left, right))
        \replacewith(subJlong(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaSub"
    };

    translateJavaMulInt {
        \find(javaMulInt(left, right))
        \replacewith(mulJint(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaMul"
    };

    translateJavaMulLong {
        \find(javaMulLong(left, right))
        \replacewith(mulJlong(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaMul"
    };

    translateJavaMod {
        \find(javaMod(left, right))
        \replacewith(jmod(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaMod"
    };

    translateJavaDivInt {
        \find(javaDivInt(left, right))
        \replacewith(divJint(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaDiv"
    };

    translateJavaDivLong {
        \find(javaDivLong(left, right))
        \replacewith(divJlong(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaDiv"
    };

    translateJavaCastByte {
        \find(javaCastByte(left))
        \replacewith(moduloByte(left))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaCast"
    };

    translateJavaCastShort {
        \find(javaCastShort(left))
        \replacewith(moduloShort(left))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaCast"
    };

    translateJavaCastInt {
        \find(javaCastInt(left))
        \replacewith(moduloInt(left))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaCast"
    };

    translateJavaCastLong {
        \find(javaCastLong(left))
        \replacewith(moduloLong(left))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaCast"
    };

    translateJavaCastChar {
        \find(javaCastChar(left))
        \replacewith(moduloChar(left))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaCast"
    };

    translateJavaShiftRightInt {
        \find(javaShiftRightInt(left, right))
        \replacewith(shiftrightJint(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaShiftRight"
    };

    translateJavaShiftRightLong {
        \find(javaShiftRightLong(left, right))
        \replacewith(shiftrightJlong(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaShiftRight"
    };

    translateJavaShiftLeftInt {
        \find(javaShiftLeftInt(left, right))
        \replacewith(shiftleftJint(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaShiftLeft"
    };

    translateJavaShiftLeftLong {
        \find(javaShiftLeftLong(left, right))
        \replacewith(shiftleftJlong(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaShiftLeft"
    };

    translateJavaUnsignedShiftRightInt {
        \find(javaUnsignedShiftRightInt(left, right))
        \replacewith(unsignedshiftrightJint(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaUnsignedShiftRight"
    };

    translateJavaUnsignedShiftRightLong {
        \find(javaUnsignedShiftRightLong(left, right))
        \replacewith(unsignedshiftrightJlong(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaUnsignedShiftRight"
    };

    translateJavaBitwiseOrInt {
        \find(javaBitwiseOrInt(left, right))
        \replacewith(orJint(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseOr"
    };

    translateJavaBitwiseOrLong {
        \find(javaBitwiseOrLong(left, right))
        \replacewith(orJlong(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseOr"
    };

    translateJavaBitwiseAndInt {
        \find(javaBitwiseAndInt(left, right))
        \replacewith(andJint(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseAnd"
    };

    translateJavaBitwiseAndLong {
        \find(javaBitwiseAndLong(left, right))
        \replacewith(andJlong(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseAnd"
    };

    translateJavaBitwiseXOrInt {
        \find(javaBitwiseXOrInt(left, right))
        \replacewith(xorJint(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseXOr"
    };

    translateJavaBitwiseXOrLong {
        \find(javaBitwiseXOrLong(left, right))
        \replacewith(xorJlong(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseXOr"
    };
}
