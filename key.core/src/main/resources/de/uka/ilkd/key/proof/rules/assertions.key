/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

\schemaVariables {
    \program Expression #e, #e1, #e2;
    \program NonSimpleExpression #nse1, #nse2;
    \program SimpleExpression #se1, #se2;
    \program Variable #condition, #message;
    \program ExecutionContext #ex;

    \formula b;

    \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;
}

\rules(programRules:Java, assertions:on) {

    evaluateAssertCondition_1 {
        \find(\modality{#allmodal}{.. assert #nse1; ...}\endmodality (b))
        \varcond(\newTypeOf(#condition, #nse1))
        \replacewith(\modality{#allmodal}{.. #typeof(#nse1) #condition = #nse1;
                assert #condition; ...}\endmodality (b))
        \heuristics(simplify_prog)
        \displayname "evaluate assert condition"
    };

    evaluateAssertCondition_2 {
        \find(\modality{#allmodal}{.. assert #nse1 : #e; ...}\endmodality (b))
        \varcond(\newTypeOf(#condition, #nse1))
        \replacewith(\modality{#allmodal}{.. #typeof(#nse1) #condition = #nse1;
                assert #condition : #e; ...}\endmodality (b))
        \heuristics(simplify_prog)
        \displayname "evaluate assert condition"
    };

    evaluateAssertMessage {
        \find(\modality{#allmodal}{.. assert #se1 : #nse2; ...}\endmodality (b))
        \varcond(\newTypeOf(#message, #nse2))
        \replacewith(\modality{#allmodal}{.. #typeof(#nse2) #message = #nse2;
                assert #se1 : #message; ...}\endmodality (b))
        \heuristics(simplify_prog)
        \displayname "evaluate assert condition"
    };

    assert {
        \find(\modality{#allmodal}{.. assert #se1; ...}\endmodality (b))
        \sameUpdateLevel
        "Assertion (#se1) OK":
            \replacewith(\modality{#allmodal}{..  ...}\endmodality (b)) \add(#se1 = TRUE ==>);
        "Assertion (#se1) Failure":
            \replacewith(\modality{#allmodal}{.. throw new java.lang.AssertionError(); ...}\endmodality (b)) \add(#se1 = FALSE ==>)
        \heuristics(simplify_prog)
        \displayname "assert"
    };

    assertWithReferenceMessage {
        \find(\modality{#allmodal}{.. assert #se1 : #se2; ...}\endmodality (b))
        \sameUpdateLevel
        \varcond(\isReference [non_null](\typeof(#se2)))
        "Assertion (#se1) OK":
            \replacewith(\modality{#allmodal}{..  ...}\endmodality (b)) \add(#se1 = TRUE ==>);
        "Assertion (#se1) Failure":
            \replacewith(\modality{#allmodal}{.. throw new java.lang.AssertionError(#se2); ...}\endmodality (b)) \add(#se1 = FALSE ==>)
        \heuristics(simplify_prog)
        \displayname "assert"
    };

    assertWithReferenceMessageNull {
        \find(\modality{#allmodal}{.. assert #se1 : null; ...}\endmodality (b))
        \sameUpdateLevel
        "Assertion (#se1) OK":
            \replacewith(\modality{#allmodal}{..  ...}\endmodality (b)) \add(#se1 = TRUE ==>);
        "Assertion (#se1) Failure":
            \replacewith(\modality{#allmodal}{..
                    throw new java.lang.AssertionError((java.lang.Object)null); ...}\endmodality (b)) \add(#se1 = FALSE ==>)
        \heuristics(simplify_prog)
        \displayname "assert"
    };

    assertWithPrimitiveMessage {
        \find(\modality{#allmodal}{.. assert #se1 : #se2; ...}\endmodality (b))
        \sameUpdateLevel
        \varcond(\not \isReference [non_null](\typeof(#se2)))
        "Assertion (#se1) OK":
            \replacewith(\modality{#allmodal}{..  ...}\endmodality (b)) \add(#se1 = TRUE ==>);
        "Assertion (#se1) Failure":
            \replacewith(\modality{#allmodal}{.. throw new java.lang.AssertionError(#se2); ...}\endmodality (b)) \add(#se1 = FALSE ==>)
        \heuristics(simplify_prog)
        \displayname "assert"
    };

}

\rules(programRules:Java, assertions:off) {
    skipAssert {
        \find(\modality{#allmodal}{.. assert #e1 : #e2; ...}\endmodality (b))
        \replacewith(\modality{#allmodal}{..  ...}\endmodality (b))
        \heuristics(simplify_prog)
        \displayname "skip assert"
    };

    skipAssert_2 {
        \find(\modality{#allmodal}{.. assert #e1; ...}\endmodality (b))
        \replacewith(\modality{#allmodal}{..  ...}\endmodality (b))
        \heuristics(simplify_prog)
        \displayname "skip assert"
    };

}

\rules(programRules:Java, assertions:safe) {

    assertSafe {
        \schemaVar \variable Field f;
        \schemaVar \variable java.lang.Object o;
        \schemaVar \skolemTerm Heap oldHeap;

        \find( ==> \modality{#allmodal}{.#ex.. assert #e1; ...}\endmodality (b))
        \varcond(\newTypeOf(#condition, #e1), \newDependingOn(oldHeap, b), \not \containsAssignment(#e1))
        "Assertion (#e1) Skip":
            \replacewith( ==> \modality{#allmodal}{..  ...}\endmodality (b));
        "Assertion (#e1) Terminates And OK":
            \replacewith( ==> \<{method-frame(#ex){#condition = #e1;}}\> #condition = TRUE);
        "Assertion (#e1) No Effects":
            \replacewith( ==> \[{ method-frame(#ex){
                          #typeof(#e1) #condition = #e1 ;
                        }
                    }\] (\forall f; \forall o; ((o != null & boolean::select(oldHeap, o, java.lang.Object::<created>) = FALSE) | any::select(oldHeap, o, f) = any::select(heap, o, f))))
            \add(oldHeap = heap ==>)
        \heuristics(simplify_prog)
        \displayname "assert"
    };

    assertSafeWithMessage {
        \schemaVar \variable Field f;
        \schemaVar \variable java.lang.Object o;
        \schemaVar \skolemTerm Heap oldHeap;

        \find( ==> \modality{#allmodal}{.#ex.. assert #e1 : #e2; ...}\endmodality (b))
        \varcond(
            \newTypeOf(#condition, #e1),
            \newTypeOf(#message, #e2),
            \newDependingOn(oldHeap, b),
            \not \containsAssignment(#e1),
            \not \containsAssignment(#e2))
        "Assertion (#e1) Skip":
            \replacewith( ==> \modality{#allmodal}{..  ...}\endmodality (b));
        "Assertion (#e1) Terminates And OK":
            \replacewith( ==> \<{method-frame(#ex){#typeof(#e1) #condition = #e1;
                    #typeof(#e2) #message   = #e2;}}\> #condition = TRUE);
        "Assertion (#e1) No Effects":
            \replacewith( ==> \[{ method-frame(#ex){
                                    #typeof(#e1) #condition = #e1;
                    #typeof(#e2) #message   = #e2;
                                  }
                              }\] (\forall f; \forall o; ((o != null & boolean::select(oldHeap, o, java.lang.Object::<created>) = FALSE) | any::select(oldHeap, o, f) = any::select(heap, o, f))))
            \add(oldHeap = heap ==>)
        \heuristics(simplify_prog)
        \displayname "assert"
    };
}
