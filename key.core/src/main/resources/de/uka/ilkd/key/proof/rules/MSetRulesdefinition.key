
\rules(multisets:on){

    defOfMSetEmpty{
      \schemaVar \term any msetEl;
            \schemaVar \variables int x;

            \find(msetEmpty)

            \varcond(\notFreeIn(x, msetEl))
            \replacewith(mset{x;}(0, 0, msetEl))
    };

        defOfMSetSingle{
            \schemaVar \term any msetEl;
            \schemaVar \variables int x;

            \find(msetSingle(msetEl))

            \varcond(\notFreeIn(x, msetEl))
            \replacewith(mset{x;}(0, 1, msetEl))
        };

     //   defOfMSetMul{
       //     \schemaVar \term Mset m;
         //   \schemaVar \term any msetEl;
           // \schemaVar \variables int x;

            //    \find(msetMul(m, msetEl))
             //   \varcond(\notFreeIn(x, m) ,
               //          \notFreeIn(x, msetEl))


        // ???????????????}


        //defOfMSetCard{

        //???????????????}


        defOfMSetUnion{
            \schemaVar \term Mset m, s;
            \schemaVar \term any msetEl;
            \schemaVar \variables int x;

            \find(msetUnion(m, s))
            \varcond(\notFree(x, m),
                     \notFree(x, s),
                     \notFree(x, msetEl))

            \replacewith(\if(msetMul(m, msetEl) > 0 && msetMul(s, msetEl) = 0))
                         \then(msetSum(m, s))
                         \else(msetSum(m , s) - msetIntersec(m , s))

        };

        defOfMSetIntersec{
            \schemaVar \term Mset m, s;
            \schemaVar \term any msetEl;
            \schemaVar \variables int x;

                        \find(msetIntersec(m, s))
                        \varcond(\notFree(x, m),
                                 \notFree(x, s),
                                 \notFree(x, msetEl))

                        \replacewith(msetSum(m , s) - msetUnion(m, s))

        };

        defOfMSetSum{
            \schemaVar \term Mset m, s;
            \schemaVar \term any msetEl;
            \schemaVar \variables int x;

                        \find(msetIntersec(m, s))
                        \varcond(\notFree(x, m),
                                 \notFree(x, s),
                                 \notFree(x, msetEl))

                        \replacewith( mset(m) + mset(s))
        };


        defOfMSetDiff{
        \schemaVar \term Mset m, s;
        \schemaVar \term any msetEl;
        \schemaVar \variables int x;

                   \find(msetIntersec(m, s))
                   \varcond(\notFree(x, m),
                            \notFree(x, s),
                            \notFree(x, msetEl))

                   \replacewith( mset(m) - mset(s))
        };


        \lemma
        msetUnionWithMSetEmpty1{

             \find(msetUnion(msetEmpty, msetEmpty))
             \replacewith(msetEmpty)

                \heuristics(concrete)
                \displayname "msetUnionWithEmpty"
        };

        \lemma
        msetUnionWithMSetEmpty2{
           \schemaVar \term Mset m;

              \find(msetUnion(m, msetEmpty))
              \replacewith(m)

                     \heuristics(concrete)
                     \displayname "msetUnionWithEmpty"
                };

        \lemma
        msetUnionWithMSetEmpty3{
            \schemaVar \term any msetEl;

               \find(msetUnion(msetSingle(msetEl), msetEmpty))
               \replacewith(msetSingle(msetEl))

                             \heuristics(concrete)
                             \displayname "msetUnionWithEmpty"
                        };

        \lemma
        msetUnionWithMSetSingle1{
            \schemaVar \term any msetEl;

                \find(msetUnion(msetSingle(msetEl), msetSingle(msetEl)))
                \replacewith(msetSingle(msetEl))

                 \heuristics(concrete)
                 \displayname "msetUnionWithSingle"
        };

        \lemma
        msetUnionWithMSetSingle2{
            \schemaVar \term any msetEl1, msetEl2;

                  \find(msetUnion(msetSingle(msetEl1), msetSingle(msetEl2))
                  \replacewith(msetSum(msetSingle(msetEl1), msetSingle(msetEl2))

                        \heuristics(concrete)
                        \displayname "msetUnionWithSingle"
             };

        \lemma
        msetUnionWithSameMSets{
              \schemaVar \term Mset m;

                    \find(msetUnion(m , m))
                    \replacewith(m)
                    \heuristics(concrete)

             };

        \lemma
        msetUnionCommutativity{
               \schemaVar \term Mset m, s;

                    \find(msetUnion(m, s))
                    \replacewith(msetUnion(s, m))
                    \heuristics(concrete)

           };

        \lemma
        msetUnionAssociativity{
               \schemaVar \term Mset m, s, t;

               \find(msetUnion(m, msetUnion(s, t)))
               \replacewith(msetUnion(msetUnion(m, s) , t))
               \heuristics(concrete)

        };

        \lemma
        msetUnionWithMSetIntersection{
               \schemaVar \term Mset m, s;

               \find(msetUnion(m, msetIntersec(m, s)))
               \replacewith(m)
                heuristics(concrete)

        };

        \lemma
        msetUnionSubset{
              \schemaVar \term Mset m, s;
              \schemaVar \term any msetEl;


               \find(msetUnion(m, s))
               \varcond(
                      \notFreeIn(msetEl, m),
                      \notFreeIn(msetEl, s)
                  )
               \replacewith(\if(msetMul(m, msetEl) > 0 && msetMul(s, msetEl) > 0 && msetIntersec(m, s) == s)
                            \then(m)
                            \else(msetUnion(m, s)))
        };


        \lemma
        msetIntersectionWithMSetEmpty1{

             \find(msetIntersec(msetEmpty, msetEmpty))
             \replacewith(msetEmpty)

                \heuristics(concrete)
                \displayname "msetIntersecWithEmpty"
        };

         \lemma
          msetIntersectionWithMSetEmpty2{
                   \schemaVar \term Mset m;

                      \find(msetIntersec(m, msetEmpty))
                      \replacewith(msetEmpty)

                             \heuristics(concrete)
                             \displayname "msetIntersecWithEmpty"
                        };

                \lemma
               msetIntersectionWithMSetEmpty3{
                    \schemaVar \term any msetEl;

                       \find(msetIntersec(msetSingle(msetEl), msetEmpty))
                       \replacewith(msetEmpty)

                                     \heuristics(concrete)
                                     \displayname "msetIntersecWithEmpty"
                                };

               \lemma
               msetIntersectionWithMSetSingle1{
                    \schemaVar \term any msetEl;

                    \find(msetIntersec(msetSingle(msetEl), msetSingle(msetEl)))
                    \replacewith(msetSingle(msetEl))
               \heuristics(concrete)
               \displayname "msetIntersecWithSingle"

               };

              \lemma
                msetIntersectionWithMSetSingle2{
                        \schemaVar \term any msetEl1 , msetEl2;

                           \find(msetIntersec(msetSingle(msetEl1), msetSingle(msetEl2)))
                           \replacewith(msetEmpty)
                              \heuristics(concrete)
                              \displayname "msetIntersecWithSingle"

                              };

                \lemma
                       msetIntersecWithSameMSets{
                             \schemaVar \term Mset m;

                                   \find(msetIntersec(m , m))
                                   \replacewith(m)
                                   \heuristics(concrete)

                            };

                       \lemma
                       msetIntersecCommutativity{
                              \schemaVar \term Mset m, s;

                                   \find(msetIntersec(m, s))
                                   \replacewith(msetIntersec(s, m))
                                   \heuristics(concrete)

                          };


                  \lemma
                  msetIntersecDifferent{
                        \schemaVar \term Mset m, s;

                        \find(msetIntersec(m, s))
                        \replacewith(\if(msetMul(m, msetEl) > 0 && msetMul(s, msetEl) = 0)
                                 \than(msetEmpty)
                                 \else(msetIntersec(m,s)))

                          \heuristics(concrete)

                  };

                \lemma
                msetIntersecSubset{
                       \schemaVar \term Mset m, s;
                       \schemaVar \term any msetEl;

                       \find(msetIntersec(m, s))
                       \replacewith(\if(msetMul(m, msetEl) > 0 && msetMul(s, msetEl) > 0 && msetUnion(m, s) == m)
                                \than(s)
                                \else(msetIntersec(m, s)))

                \heuristics(concrete)

                };

                \lemma
                msetIntersecWithMSetUnion{
                      \schemaVar \term Mset m, s, t;

                      \find(msetIntersec(m, msetUnion(s,t)))
                      \replacewith(msetUnion(msetIntersec(m,s), msetIntersec(m, t)))
                      \heuristics(concrete)

                };



               \lemma
                msetSumWithMSetEmpty1{

                            \find(msetSum(msetEmpty, msetEmpty))
                            \replacewith(msetEmpty)

                               \heuristics(concrete)
                               \displayname "msetSumWithEmpty"
                       };

                       \lemma
                       msetSumWithMSetEmpty2{
                          \schemaVar \term Mset m;

                             \find(msetSum(m, msetEmpty))
                             \replacewith(m)

                                    \heuristics(concrete)
                                    \displayname "msetSumWithEmpty"
                               };

                       \lemma
                       msetSumWithMSetEmpty3{
                           \schemaVar \term any msetEl;

                              \find(msetSum(msetSingle(msetEl), msetEmpty))
                              \replacewith(msetSingle(msetEl))

                                            \heuristics(concrete)
                                            \displayname "msetSumWithEmpty"
                                       };

                        \lemma
                        msetSumWithMSetSingle1{
                            \schemaVar \term any msetEl;

                            \find(msetSum(msetSingle(msetEl), msetSingle(msetEl)))
                            \replacewith(msetSingle(msetEl) + msetSingle(msetEL))
                            \heuristics(concrete)
                           \displayname "msetSumWithSingle"

                        };

                        \lemma
                        \msetSumWithMSetSingle2{
                            \schemaVar \term Mset m;
                            \schemaVar \term any msetEl;

                            \find(msetSum(m, msetSingle(msetEl)))
                            \replacewith(m + msetSingle(msetEl))
                                           \heuristics(concrete)
                                            \displayname "msetSumWithSingle"

                        };


                       \lemma
                        msetSumCommutativity {
                                \schemaVar \term Mset m, s;
                                \find(msetSum(m, s))
                                \replacewith(msetSum(s, m))
                                \heuristics(concrete)
                            };

                        \lemma
                         msetSumAssociativity {
                                \schemaVar \term Mset m, s, t;
                                \find(msetSum(m, msetSum(s, t)))
                                \replacewith(msetSum(msetSum(m, s), t))
                            };


                        \lemma
                        msetSummWithSameMSets{
                            \schemaVar \term Mset m;
                            \find(msetSum(m,m))
                            \replace(m * 2)
                            \heuristics(concrete)

                        };






                      \lemma
                      msetDiffWithMSetEmpty1{

                                   \find(msetDiff(msetEmpty, msetEmpty))
                                   \replacewith(msetEmpty)

                                      \heuristics(concrete)
                                      \displayname "msetDiffWithEmpty"
                              };

                              \lemma
                              msetDiffWithMSetEmpty2{
                                 \schemaVar \term Mset m;

                                    \find(msetDiff(m, msetEmpty))
                                    \replacewith(m)

                                           \heuristics(concrete)
                                           \displayname "msetDiffWithEmpty"
                                      };

                              \lemma
                              msetDiffWithMSetEmpty3{
                                  \schemaVar \term any msetEl;

                                     \find(msetDiff(msetSingle(msetEl), msetEmpty))
                                     \replacewith(msetSingle(msetEl))

                                                   \heuristics(concrete)
                                                   \displayname "msetDiffWithEmpty"
                                              };



                    \lemma
                      \msetDiffWithMSetSingle1{
                             \schemaVar \term any msetEl;

                                        \find(msetDiff(msetSingle(msetEl), msetSingle(msetEl)))
                                        \replacewith(msetEmpty)
                                              \heuristics(concrete)
                                              \displayname "msetDiffWithSingle"

                                           };

                    \lemma
                    \msetDiffWithMSetSingle2{
                        \schemaVar \term any msetEl1, msetEl2;

                        \find(msetDiff(msetSingle(msetEl1), msetSingle(msetEl2)))
                        \replace(msetSum(msetSingle(msetEl1), msetSingle(msetEl2)))

                        \heuristics(concrete)
                        \displayname "msetDiffWithSingle"

                       }

                     \lemma
                     msetDiffWithMSetSingle3{
                           \schemaVar \term Mset m;
                           \schemaVar \term any msetEl;

                           \find(msetDiff(m, msetSingle(msetEl)))
                           \replacewith(\if(msetMul(m, msetEl) > 0 && msetMul(msetSingle(msetEl), msetEl) == 1)
                                        \than(m)
                                        \else(msetSum(m, msetSingle(msetEl))))

                                  \heuristics(concrete)
                                  \displayname "msetDiffWithSingle"

                     }

                     \lemma
                     msetDiffCommutativity{
                            \schemaVar \term Mset m, s;
                            \find(msetDiff(m, s))
                            \replacewith(msetDiff(s, m))
                            \heuristics(concrete)

                     }



}

