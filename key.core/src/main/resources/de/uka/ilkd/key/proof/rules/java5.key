/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

\sorts {
    \generic E;
    \generic G;
}

\schemaVariables {
    \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;
    \program Type #ty;
    \program SimpleExpression #se;
    \program NonSimpleExpression #nse;
    \program Expression #e;
    \program Variable #v0;
    \program Variable #id;
    \program Variable #a;
    \program Statement #stm;

    \variables int I;
    \skolemTerm G ar;

    \formula anon1, anon2;

    \formula post, inv;

    \term E e;
}

/***
 *** Enhanced for
 ***/
\rules(programRules:Java) {

    /* enhancedfor_array {
         \find( \modality{#allmodal}{ .. for (#ty #id : #e) #stm ... }\endmodality(post) )
         \varcond(\newTypeOf(#v0, int), \new(#a, #e), \isArray(#e))
         \replacewith( \modality{#allmodal}{ ..
             {
                #typeof(#a) #a = #e;
                for(int #v0 = 0; #v0 < #length-reference(#a); #v0 ++)
                {
                   #ty #id = #a[#v0];
                   #stm
                }
             } ... }\endmodality(post) )
         \displayname "enhancedfor_array"
         \heuristics(loop_expand,obsolete)
    };*/

    enhancedfor_iterable {
        \find(\modality{#allmodal}{ .. for (#ty #id : #e) #stm ... }\endmodality (post))
        \replacewith(\modality{#allmodal}{ .. #enhancedfor-elim(for (#ty #id : #e) #stm); ... }\endmodality (post))
        \displayname "enhancedfor"
        \heuristics(simplify_prog)
    };

    /*
     * Make the iterated expression in an enhanced for loop simple.
     */
    /*
    enhancedfor_not_simple {
      \find( \modality{#allmodal}{ .. for (#ty #id: #nse) #stm ... }\endmodality(post) )
      \varcond(\newTypeOf(#v0, #nse))
      \replacewith( \modality{#allmodal}{ .. #typeof(#nse) #v0 = #nse; for (#ty #id: #v0) #stm ... }\endmodality(post) )
         \heuristics(simplify_prog)
    };*/
}

/***
 *** Enumerations
 ***/
\rules(programRules:Java) {
    /* XXX
      enumConstantByIndex {
           \assumes(wellFormed(heap) ==>)
           \find( e )
           \sameUpdateLevel
           \varcond(\enumConstant(e))
           \replacewith( E::<get>(#enumconstantvalue(e)) )
           \heuristics(simplify)
      };


      enumOrdinalToIndex {
           \find( #fieldref(e, "ordinal") )
           \varcond(\isEnumType(E))
           \add(e = E::<get>(#fieldref(e, "ordinal")) ==> )
      };

    }

    \rules(programRules:Java,initialisation:disableStaticInitialisation) {

      enumNextToCreateConstant {
           \assumes( wellFormed(heap) ==> )
           \find( #nc )
           \sameUpdateLevel
           \varcond(\isEnumType(\containerType(#nc)))
           \replacewith( #enumconstantvalue( #nc ) )
           \heuristics(simplify)
      };

    }

    \rules(programRules:Java,initialisation:enableStaticInitialisation) {

      enumNextToCreateConstant {
           \assumes ( wellFormed(heap), #classInitialized = TRUE ==> )
           \find( #nc )
           \sameUpdateLevel
           \varcond(\isEnumType(\containerType(#nc)), \same(\containerType(#classInitialized), \containerType(#nc)))
           \replacewith( #enumconstantvalue(#nc) )
           \heuristics(simplify)
      };
    */
}
