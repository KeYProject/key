/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

\schemaVariables {
    \term float f1, f2;
    \term double d1, d2;
}

\rules(programRules:Java, floatRules:assumeStrictfp) {

    translateJavaAddFloat {
        \find(javaAddFloat(f1, f2))
        \replacewith(addFloat(f1, f2))
        \heuristics(javaFloatSemantics)
    };

    translateJavaSubFloat {
        \find(javaSubFloat(f1, f2))
        \replacewith(subFloat(f1, f2))
        \heuristics(javaFloatSemantics)
    };

    translateJavaMulFloat {
        \find(javaMulFloat(f1, f2))
        \replacewith(mulFloat(f1, f2))
        \heuristics(javaFloatSemantics)
    };

    translateJavaDivFloat {
        \find(javaDivFloat(f1, f2))
        \replacewith(divFloat(f1, f2))
        \heuristics(javaFloatSemantics)
    };

    translateJavaAddDouble {
        \find(javaAddDouble(d1, d2))
        \replacewith(addDouble(d1, d2))
        \heuristics(javaFloatSemantics)
    };

    translateJavaSubDouble {
        \find(javaSubDouble(d1, d2))
        \replacewith(subDouble(d1, d2))
        \heuristics(javaFloatSemantics)
    };

    translateJavaMulDouble {
        \find(javaMulDouble(d1, d2))
        \replacewith(mulDouble(d1, d2))
        \heuristics(javaFloatSemantics)
    };

    translateJavaDivDouble {
        \find(javaDivDouble(d1, d2))
        \replacewith(divDouble(d1, d2))
        \heuristics(javaFloatSemantics)
    };

    // TODO MOVE THESE

    doubleSin {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;
        \find(\modality{#allmodal}{.. #loc = java.lang.Math.sin(#se); ...}\endmodality (post))
        \replacewith({#loc := sinDouble(#se)}\modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
    };

    doubleCos {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;
        \find(\modality{#allmodal}{.. #loc = java.lang.Math.cos(#se); ...}\endmodality (post))
        \replacewith({#loc := cosDouble(#se)}\modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
    };

    doubleAcos {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;
        \find(\modality{#allmodal}{.. #loc = java.lang.Math.acos(#se); ...}\endmodality (post))
        \replacewith({#loc := acosDouble(#se)}\modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
    };

    doubleAsin {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;
        \find(\modality{#allmodal}{.. #loc = java.lang.Math.asin(#se); ...}\endmodality (post))
        \replacewith({#loc := asinDouble(#se)}\modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
    };

    doubleTan {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;
        \find(\modality{#allmodal}{.. #loc = java.lang.Math.tan(#se); ...}\endmodality (post))
        \replacewith({#loc := tanDouble(#se)}\modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
    };

    doubleAtan2 {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se1;
        \schemaVar \program SimpleExpression #se2;
        \schemaVar \formula post;
        \schemaVar \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;
        \find(\modality{#allmodal}{.. #loc = java.lang.Math.atan2(#se1, #se2); ...}\endmodality (post))
        \replacewith({#loc := atan2Double(#se1, #se2)}\modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
    };

    doubleSqrt {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;
        \find(\modality{#allmodal}{.. #loc = java.lang.Math.sqrt(#se); ...}\endmodality (post))
        \replacewith({#loc := sqrtDouble(#se)}\modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
    };

    doublePow {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se1;
        \schemaVar \program SimpleExpression #se2;
        \schemaVar \formula post;
        \schemaVar \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;
        \find(\modality{#allmodal}{.. #loc = java.lang.Math.pow(#se1, #se2); ...}\endmodality (post))
        \replacewith({#loc := powDouble(#se1, #se2)}\modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
    };

    doubleExp {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;
        \find(\modality{#allmodal}{.. #loc = java.lang.Math.exp(#se); ...}\endmodality (post))
        \replacewith({#loc := expDouble(#se)}\modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
    };

    doubleAtan {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;
        \find(\modality{#allmodal}{.. #loc = java.lang.Math.atan(#se); ...}\endmodality (post))
        \replacewith({#loc := atanDouble(#se)}\modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
    };
}
