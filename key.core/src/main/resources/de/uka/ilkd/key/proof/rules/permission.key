// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2014 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 


\sorts {
  Permission;
  PermissionOwnerList;
}

\functions{
  \unique Object currentThread; // distinct object representing
                                // the currently running thread

  // Owner list constructors
  PermissionOwnerList emptyPermissionOwnerList;
  PermissionOwnerList consPermissionOwnerList(Object,PermissionOwnerList);

  // Owner list modifiers
  PermissionOwnerList insertPermissionOwner(Object,Object,int,PermissionOwnerList);
  PermissionOwnerList returnPermissionOwner(Object, PermissionOwnerList);

  // Permissions as such

  // Constructors 
  Permission emptyPermission;
  Permission slice(PermissionOwnerList,Permission);

  // Modifiers
  Permission transferPermission(boolean,Object,Object,int,Permission);
  Permission returnPermission(Object,Object,Permission);

  // Convenience
  Permission initFullPermission;
  PermissionOwnerList owner1(Object);
  PermissionOwnerList owner2(Object,Object);
  PermissionOwnerList owner3(Object,Object,Object);
  PermissionOwnerList owner4(Object,Object,Object,Object);

  Permission slice1(PermissionOwnerList);
  Permission slice2(PermissionOwnerList,PermissionOwnerList);

}

\predicates {
  checkPermissionOwner(Object,int,PermissionOwnerList);
//  equalPermissionOwners(PermissionOwnerList,PermissionOwnerList);

  readPermissionObject(Object, Permission);
  writePermissionObject(Object, Permission);
  readPermission(Permission); // abbr. readPermissionObject(currentThread, Permission)
  writePermission(Permission); // abbr. writePermissionObject(currentThread, Permission)
  readPermissionOwe(Object, Object, Permission);
  readPermissionOwe2(Object, Object, Permission);

  // Convenience

  twoPermissions(Object,Object,Permission);
  nonEmptyPermission(Permission);

  permissionsFor(Heap,Heap);
}
