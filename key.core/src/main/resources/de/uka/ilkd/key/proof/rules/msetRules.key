\sorts {
    Mset;
}

\functions {
    // Getters
    int msetMul(Mset, any);
    int msetCard(Mset);

    // Constructors
    Mset msetEmpty;
    Mset msetSingle(any);
    Mset msetUnion(Mset, Mset);
    Mset msetIntersec(Mset, Mset);
    Mset msetDiff(Mset, Mset);
    Mset msetSum(Mset, Mset);
    Mset mset {false, false, true}(int, int, any);
    Mset tempMset {false, false, true}(int, int, any);
}

\rules {
    // Rule: mset_split
    mset_split {
        \schemaVar \term int low, high, t;
        \schemaVar \term int middle;
        \schemaVar \variables int uSub;

        \find(tempMset{uSub;}(low, high, t))
        \varcond(\notFreeIn(uSub, low),
                 \notFreeIn(uSub, middle),
                 \notFreeIn(uSub, high))
        \replacewith(\if(low <= middle & middle <= high)
                     \then(msetSum(tempMset{uSub;}(low, middle-1, t),
                                   tempMset{uSub;}(middle, high, t)))
                     \else(tempMset{uSub;}(low, high, t)))
        \heuristics(comprehension_split, triggered)
        \trigger {middle} tempMset{uSub;}(low, middle-1, t)
        \avoid middle <= low, middle >= high;
    };

    // Rule: mset_Empty
    mset_Empty {
        \schemaVar \term int low, high, t;
        \schemaVar \variables int uSub;

        \find(tempMset{uSub;}(low, high-1, t))
        \varcond(\notFreeIn(uSub, low),
                 \notFreeIn(uSub, high))
        \replacewith(\if(low = high)
                     \then(msetEmpty)
                     \else(tempMset{uSub;}(low, high-1, t)))
        \heuristics(simplify)
    };

    // Rule: set_tempMset
    set_tempMset {
        \schemaVar \term int low, high, t;
        \schemaVar \variables int uSub;

        \find((mset{uSub;}(low, high, t)))
        \replacewith((tempMset{uSub;}(low, high-1, t)))
        \heuristics(simplify)
    };

    // Rule: mset_Single
    mset_Single {
        \schemaVar \term int low, high, t;
        \schemaVar \variables int uSub;

        \find(tempMset{uSub;}(low, low, t))
        \sameUpdateLevel
        \varcond(\notFreeIn(uSub, low),
                 \notFreeIn(uSub, high))
        \replacewith(msetSingle({\subst uSub; low}t))
        \heuristics(simplify)
    };

    // Union Rules
    msetUnionWithMSetEmpty1 {
        \find(msetUnion(msetEmpty, msetEmpty))
        \replacewith(msetEmpty)
        \heuristics(simplify)
        \displayname "msetUnionWithEmpty"
    };

    msetUnionWithMSetEmpty2 {
        \schemaVar \term Mset m;
        \find(msetUnion(m, msetEmpty))
        \replacewith(m)
        \heuristics(simplify)
        \displayname "msetUnionWithEmpty"
    };

    msetUnionWithSameMSets {
        \schemaVar \term Mset m;
        \find(msetUnion(m, m))
        \replacewith(m)
        \heuristics(simplify)
    };

    msetUnionCommutativity {
        \schemaVar \term Mset commLeft, commRight;
        \find(msetUnion(commLeft, commRight))
        \replacewith(msetUnion(commRight, commLeft))
        \heuristics(polySimp_expand, polySimp_addOrder)
    };

    msetUnionAssociativity {
        \schemaVar \term Mset addAssocPoly0, addAssocPoly1, addAssocMono;
        \find(msetUnion(addAssocPoly0, msetUnion(addAssocPoly1, addAssocMono)))
        \replacewith(msetUnion(msetUnion(addAssocPoly0, addAssocPoly1), addAssocMono))
        \heuristics(polySimp_expand, polySimp_addAssoc)
    };

    msetUnionWithMSetIntersection {
        \schemaVar \term Mset m, s;
        \find(msetUnion(m, msetIntersec(m, s)))
        \replacewith(m)
        \heuristics(simplify)
    };

    msetUnionSubset {
        \schemaVar \term Mset m, s;
        \schemaVar \term any msetEl;

        \find(msetUnion(m, s))
        \replacewith(\if(msetMul(m, msetEl) > 0 & msetMul(s, msetEl) > 0 & msetIntersec(m, s) = s)
                     \then(m)
                     \else(msetUnion(m, s)))
        \heuristics(simplify)
    };

    // Intersection Rules
    msetIntersectionWithMSetEmpty1 {
        \find(msetIntersec(msetEmpty, msetEmpty))
        \replacewith(msetEmpty)
        \heuristics(simplify)
        \displayname "msetIntersecWithEmpty"
    };

    msetIntersectionWithMSetEmpty2 {
        \schemaVar \term Mset m;
        \find(msetIntersec(m, msetEmpty))
        \replacewith(msetEmpty)
        \heuristics(simplify)
        \displayname "msetIntersecWithEmpty"
    };

    msetIntersecWithSameMSets {
        \schemaVar \term Mset m;
        \find(msetIntersec(m, m))
        \replacewith(m)
        \heuristics(simplify)
    };

    msetIntersecCommutativity {
        \schemaVar \term Mset commLeft, commRight;
        \find(msetIntersec(commLeft, commRight))
        \replacewith(msetIntersec(commRight, commLeft))
        \heuristics(polySimp_expand, polySimp_addOrder)
    };

    msetIntersecDifferent {
        \schemaVar \term Mset m, s;
        \schemaVar \term any msetEl;

        \find(msetIntersec(m, s))
        \replacewith(\if(msetMul(m, msetEl) > 0 & msetMul(s, msetEl) = 0)
                     \then(msetEmpty)
                     \else(msetIntersec(m, s)))
        \heuristics(simplify)
    };

    msetIntersecSubset {
        \schemaVar \term Mset m, s;
        \schemaVar \term any msetEl;

        \find(msetIntersec(m, s))
        \replacewith(\if(msetMul(m, msetEl) > 0 & msetMul(s, msetEl) > 0 & msetUnion(m, s) = m)
                     \then(s)
                     \else(msetIntersec(m, s)))
        \heuristics(simplify)
    };

    msetIntersecWithMSetUnion {
        \schemaVar \term Mset m, s, t;
        \find(msetIntersec(m, msetUnion(s, t)))
        \replacewith(msetUnion(msetIntersec(m, s), msetIntersec(m, t)))
        \heuristics(simplify)
    };

    // Sum Rules
    msetSumWithMSetEmpty1 {
        \find(msetSum(msetEmpty, msetEmpty))
        \replacewith(msetEmpty)
        \heuristics(simplify)
        \displayname "msetSumWithEmpty"
    };

    msetSumWithMSetEmpty2 {
        \schemaVar \term Mset m;
        \find(msetSum(m, msetEmpty))
        \replacewith(m)
        \heuristics(simplify)
        \displayname "msetSumWithEmpty"
    };

    msetSumCommutativity {
        \schemaVar \term Mset commLeft, commRight;
        \find(msetSum(commLeft, commRight))
        \replacewith(msetSum(commRight, commLeft))
        \heuristics(polySimp_expand, polySimp_addOrder)
    };

    msetSumAssociativity {
        \schemaVar \term Mset addAssocPoly0, addAssocPoly1, addAssocMono;
        \find(msetSum(addAssocPoly0, msetSum(addAssocPoly1, addAssocMono)))
        \replacewith(msetSum(msetSum(addAssocPoly0, addAssocPoly1), addAssocMono))
        \heuristics(polySimp_expand, polySimp_addAssoc)
    };

    // Difference Rules
    msetDiffWithMSetEmpty1 {
        \find(msetDiff(msetEmpty, msetEmpty))
        \replacewith(msetEmpty)
        \heuristics(simplify)
        \displayname "msetDiffWithEmpty"
    };

    msetDiffWithMSetEmpty2 {
        \schemaVar \term Mset m;
        \find(msetDiff(m, msetEmpty))
        \replacewith(m)
        \heuristics(simplify)
        \displayname "msetDiffWithEmpty"
    };

    msetDiffWithMSetSingle {
        \schemaVar \term Mset m;
        \schemaVar \term any msetEl;

        \find(msetDiff(m, msetSingle(msetEl)))
        \replacewith(\if(msetMul(m, msetEl) > 0 & msetMul(msetSingle(msetEl), msetEl) = 1)
                     \then(m)
                     \else(msetSum(m, msetSingle(msetEl))))
        \heuristics(simplify)
        \displayname "msetDiffWithSingle"
    };

    msetDiffCommutativity {
        \schemaVar \term Mset commLeft, commRight;
        \find(msetDiff(commLeft, commRight))
        \replacewith(msetDiff(commRight, commLeft))
        \heuristics(polySimp_expand, polySimp_addOrder)
    };
}
