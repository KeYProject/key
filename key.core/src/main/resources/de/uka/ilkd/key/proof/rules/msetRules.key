
\sorts {
Mset;

}

\functions {

    // getters
    int msetMul(Mset, any);
    int msetCard(Mset);

    // constructors
    Mset msetEmpty;
    Mset msetSingle(any);
    Mset msetUnion(Mset, Mset);
    Mset msetIntersec(Mset, Mset);
    Mset msetDiff(Mset, Mset);
    Mset msetSum(Mset, Mset);
    Mset mset {false, false, true}(int, int, any);


}

\rules{


mset_split {
        \schemaVar \term int low, high, t;
        \schemaVar \term int middle;
        \schemaVar \variables int uSub;

        \find(mset{uSub;}(low, high, t))
        \varcond(\notFreeIn(uSub, low),
            \notFreeIn(uSub, middle),
            \notFreeIn(uSub, high))
        \replacewith(\if(low <= middle & middle <= high)
                \then(msetSum(mset{uSub;}(low, middle, t), mset{uSub;}(middle, high, t)))
                \else(mset{uSub;}(low, high, t)))

        \heuristics(comprehension_split, triggered)

        \trigger {middle} mset{uSub;}(low, middle, t) \avoid middle <= low, middle >= high;
    };

  defOfMSetEmpty{
       \schemaVar \term int low, high, t;
       \schemaVar \variables int uSub;

            \find(mset{uSub;}(low, high, t))

              \varcond(\notFreeIn(uSub, low),
                        \notFreeIn(uSub, high))

     \replacewith(\if(low = high)
                    \then(msetEmpty)
                    \else(mset{uSub;}(low, high, t)))




    };


}