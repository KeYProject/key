
\sorts {
Mset;

}

\functions {

    // getters
    int msetMul(Mset, any);
    int msetCard(Mset);

    // constructors
    Mset msetEmpty;
    Mset msetSingle(any);
    Mset msetUnion(Mset, Mset);
    Mset msetIntersec(Mset, Mset);
    Mset msetDiff(Mset, Mset);
    Mset msetSum(Mset, Mset);
    Mset mset {false, false, true}(int, int, any);


}

\rules{


mset_split {
        \schemaVar \term int low, high, t;
        \schemaVar \term int middle;
        \schemaVar \variables int uSub;

        \find(mset{uSub;}(low, high, t))
        \varcond(\notFreeIn(uSub, low),
            \notFreeIn(uSub, middle),
            \notFreeIn(uSub, high))
        \replacewith(\if(low <= middle & middle <= high)
                \then(msetSum(mset{uSub;}(low, middle, t), mset{uSub;}(middle, high, t)))
                \else(mset{uSub;}(low, high, t)))

        \heuristics(comprehension_split, triggered)

        \trigger {middle} mset{uSub;}(low, middle, t) \avoid middle <= low, middle >= high;
    };

    mset_Empty{
       \schemaVar \term int low, high, t;
       \schemaVar \variables int uSub;

            \find(mset{uSub;}(low, high, t))

              \varcond(\notFreeIn(uSub, low),
                        \notFreeIn(uSub, high))

     \replacewith(\if(low = high)
                    \then(msetEmpty)
                    \else(mset{uSub;}(low, high, t)))

    };

      mset_Single{
            \schemaVar \term int low, high, t;
             \schemaVar \variables int uSub;

                        \find(mset{uSub;}(low, high, t))

                         \varcond(\notFreeIn(uSub, low),
                         \notFreeIn(uSub, high),
                         \notFreeIn(uSub, t))

                         \replacewith(\if(high - low = 1)
                         \then(msetSingle(t))
                         \else(mset{uSub;}(low, high, t)))

        };

                msetUnionWithMSetEmpty1{

                     \find(msetUnion(msetEmpty, msetEmpty))
                     \replacewith(msetEmpty)

                        \heuristics(concrete)
                        \displayname "msetUnionWithEmpty"
                };

  msetUnionWithMSetEmpty2{
           \schemaVar \term Mset m;

              \find(msetUnion(m, msetEmpty))
              \replacewith(m)

                     \heuristics(concrete)
                     \displayname "msetUnionWithEmpty"
                };

  msetUnionWithMSetEmpty3{
            \schemaVar \term any msetEl;

               \find(msetUnion(msetSingle(msetEl), msetEmpty))
               \replacewith(msetSingle(msetEl))

                             \heuristics(concrete)
                             \displayname "msetUnionWithEmpty"
                        };


        msetUnionWithMSetSingle1{
            \schemaVar \term any msetEl;

                \find(msetUnion(msetSingle(msetEl), msetSingle(msetEl)))
                \replacewith(msetSingle(msetEl))

                 \heuristics(concrete)
                 \displayname "msetUnionWithSingle"
        };

        msetUnionWithMSetSingle2{
            \schemaVar \term any msetEl1, msetEl2;

                  \find(msetUnion(msetSingle(msetEl1), msetSingle(msetEl2)))
                  \replacewith(msetSum(msetSingle(msetEl1), msetSingle(msetEl2)))

                        \heuristics(concrete)
                        \displayname "msetUnionWithSingle"
             };


        msetUnionWithSameMSets{
              \schemaVar \term Mset m;

                    \find(msetUnion(m , m))
                    \replacewith(m)
                    \heuristics(concrete)

             };

        msetUnionCommutativity{
               \schemaVar \term Mset m, s;

                    \find(msetUnion(m, s))
                    \replacewith(msetUnion(s, m))
                    \heuristics(concrete)

           };


        msetUnionAssociativity{
               \schemaVar \term Mset m, s, t;

               \find(msetUnion(m, msetUnion(s, t)))
               \replacewith(msetUnion(msetUnion(m, s) , t))
               \heuristics(concrete)

        };

        msetUnionWithMSetIntersection{
               \schemaVar \term Mset m, s;

               \find(msetUnion(m, msetIntersec(m, s)))
               \replacewith(m)
               \heuristics(concrete)

        };

     msetUnionSubset{
              \schemaVar \term Mset m, s;
              \schemaVar \term any msetEl;


               \find(msetUnion(m, s))
               \replacewith(\if(msetMul(m, msetEl) > 0 & msetMul(s, msetEl) > 0 & msetIntersec(m, s) = s)
                            \then(m)
                            \else(msetUnion(m, s)))
        };

  msetIntersectionWithMSetEmpty1{

             \find(msetIntersec(msetEmpty, msetEmpty))
             \replacewith(msetEmpty)

                \heuristics(concrete)
                \displayname "msetIntersecWithEmpty"
        };


          msetIntersectionWithMSetEmpty2{
                   \schemaVar \term Mset m;

                      \find(msetIntersec(m, msetEmpty))
                      \replacewith(msetEmpty)

                             \heuristics(concrete)
                             \displayname "msetIntersecWithEmpty"
                        };


               msetIntersectionWithMSetEmpty3{
                    \schemaVar \term any msetEl;

                       \find(msetIntersec(msetSingle(msetEl), msetEmpty))
                       \replacewith(msetEmpty)

                                     \heuristics(concrete)
                                     \displayname "msetIntersecWithEmpty"
                                };


               msetIntersectionWithMSetSingle1{
                    \schemaVar \term any msetEl;

                    \find(msetIntersec(msetSingle(msetEl), msetSingle(msetEl)))
                    \replacewith(msetSingle(msetEl))
               \heuristics(concrete)
               \displayname "msetIntersecWithSingle"

               };

                msetIntersectionWithMSetSingle2{
                        \schemaVar \term any msetEl1 , msetEl2;

                           \find(msetIntersec(msetSingle(msetEl1), msetSingle(msetEl2)))
                           \replacewith(msetEmpty)
                              \heuristics(concrete)
                              \displayname "msetIntersecWithSingle"

                              };




                       msetIntersecWithSameMSets{
                             \schemaVar \term Mset m;

                                   \find(msetIntersec(m , m))
                                   \replacewith(m)
                                   \heuristics(concrete)

                            };

                       msetIntersecCommutativity{
                              \schemaVar \term Mset m, s;

                                   \find(msetIntersec(m, s))
                                   \replacewith(msetIntersec(s, m))
                                   \heuristics(concrete)

                          };



                  msetIntersecDifferent{
                        \schemaVar \term Mset m, s;
                        \schemaVar \term any msetEl;

                        \find(msetIntersec(m, s))
                        \replacewith(\if(msetMul(m, msetEl) > 0 & msetMul(s, msetEl) = 0)
                                 \then(msetEmpty)
                                 \else(msetIntersec(m,s)))

                          \heuristics(concrete)

                  };

             msetIntersecSubset{
                       \schemaVar \term Mset m, s;
                       \schemaVar \term any msetEl;

                       \find(msetIntersec(m, s))
                       \replacewith(\if(msetMul(m, msetEl) > 0 & msetMul(s, msetEl) > 0 & msetUnion(m, s) = m)
                                \then(s)
                                \else(msetIntersec(m, s)))

                \heuristics(concrete)

                };


   msetIntersecWithMSetUnion{
                      \schemaVar \term Mset m, s, t;

                      \find(msetIntersec(m, msetUnion(s,t)))
                      \replacewith(msetUnion(msetIntersec(m,s), msetIntersec(m, t)))
                      \heuristics(concrete)

                };




                msetSumWithMSetEmpty1{

                            \find(msetSum(msetEmpty, msetEmpty))
                            \replacewith(msetEmpty)

                               \heuristics(concrete)
                               \displayname "msetSumWithEmpty"
                       };


                       msetSumWithMSetEmpty2{
                          \schemaVar \term Mset m;

                             \find(msetSum(m, msetEmpty))
                             \replacewith(m)

                                    \heuristics(concrete)
                                    \displayname "msetSumWithEmpty"
                               };


                       msetSumWithMSetEmpty3{
                           \schemaVar \term any msetEl;

                              \find(msetSum(msetSingle(msetEl), msetEmpty))
                              \replacewith(msetSingle(msetEl))

                                            \heuristics(concrete)
                                            \displayname "msetSumWithEmpty"
                                       };


                        msetSumCommutativity {
                                \schemaVar \term Mset m, s;
                                \find(msetSum(m, s))
                                \replacewith(msetSum(s, m))
                                \heuristics(concrete)
                            };


                         msetSumAssociativity {
                                \schemaVar \term Mset m, s, t;
                                \find(msetSum(m, msetSum(s, t)))
                                \replacewith(msetSum(msetSum(m, s), t))
                            };



                      msetDiffWithMSetEmpty1{

                                   \find(msetDiff(msetEmpty, msetEmpty))
                                   \replacewith(msetEmpty)

                                      \heuristics(concrete)
                                      \displayname "msetDiffWithEmpty"
                              };


                              msetDiffWithMSetEmpty2{
                                 \schemaVar \term Mset m;

                                    \find(msetDiff(m, msetEmpty))
                                    \replacewith(m)

                                           \heuristics(concrete)
                                           \displayname "msetDiffWithEmpty"
                                      };


                              msetDiffWithMSetEmpty3{
                                  \schemaVar \term any msetEl;

                                     \find(msetDiff(msetSingle(msetEl), msetEmpty))
                                     \replacewith(msetSingle(msetEl))

                                                   \heuristics(concrete)
                                                   \displayname "msetDiffWithEmpty"
                                              };




                      msetDiffWithMSetSingle1{
                             \schemaVar \term any msetEl;

                                        \find(msetDiff(msetSingle(msetEl), msetSingle(msetEl)))
                                        \replacewith(msetEmpty)
                                              \heuristics(concrete)
                                              \displayname "msetDiffWithSingle"

                                           };



                   msetDiffWithMSetSingle2{
                        \schemaVar \term any msetEl1, msetEl2;

                        \find(msetDiff(msetSingle(msetEl1), msetSingle(msetEl2)))
                        \replacewith(msetSum(msetSingle(msetEl1), msetSingle(msetEl2)))

                        \heuristics(concrete)
                        \displayname "msetDiffWithSingle"

                       };


                     msetDiffWithMSetSingle3{
                           \schemaVar \term Mset m;
                           \schemaVar \term any msetEl;

                           \find(msetDiff(m, msetSingle(msetEl)))
                           \replacewith(\if(msetMul(m, msetEl) > 0 & msetMul(msetSingle(msetEl), msetEl) = 1)
                                        \then(m)
                                        \else(msetSum(m, msetSingle(msetEl))))

                                  \heuristics(concrete)
                                  \displayname "msetDiffWithSingle"

                     };


                     msetDiffCommutativity{
                            \schemaVar \term Mset m, s;
                            \find(msetDiff(m, s))
                            \replacewith(msetDiff(s, m))
                            \heuristics(concrete)

                     };

}