/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

\schemaVariables {
    \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;
    \modalOperator {diamond, diamond_transaction} #diamond;
    \modalOperator {box, box_transaction} #box;
}

// LocSet

\rules(programRules:Java) {

    setUnionUnfoldLeft {
        \schemaVar \program Variable #v, #vLeftNew;
        \schemaVar \program NonSimpleExpression #nseLeft;
        \schemaVar \program Expression #eRight;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \set_union(#nseLeft, #eRight); ...}\endmodality (post))
        \varcond(\newTypeOf(#vLeftNew, #nseLeft))
        \replacewith(\modality{#allmodal}{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \set_union(#vLeftNew, #eRight); ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "setUnionUnfold"
    };

    setUnionUnfoldRight {
        \schemaVar \program Variable #v, #vRightNew;
        \schemaVar \program SimpleExpression #seLeft;
        \schemaVar \program NonSimpleExpression #nseRight;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \set_union(#seLeft, #nseRight); ...}\endmodality (post))
        \varcond(\newTypeOf(#vRightNew, #nseRight))
        \replacewith(\modality{#allmodal}{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \set_union(#seLeft, #vRightNew); ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "setUnionUnfold"
    };

    setIntersectUnfoldLeft {
        \schemaVar \program Variable #v, #vLeftNew;
        \schemaVar \program NonSimpleExpression #nseLeft;
        \schemaVar \program Expression #eRight;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \intersect(#nseLeft, #eRight); ...}\endmodality (post))
        \varcond(\newTypeOf(#vLeftNew, #nseLeft))
        \replacewith(\modality{#allmodal}{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \intersect(#vLeftNew, #eRight); ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "setIntersectUnfold"
    };

    setIntersectUnfoldRight {
        \schemaVar \program Variable #v, #vRightNew;
        \schemaVar \program SimpleExpression #seLeft;
        \schemaVar \program NonSimpleExpression #nseRight;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \intersect(#seLeft, #nseRight); ...}\endmodality (post))
        \varcond(\newTypeOf(#vRightNew, #nseRight))
        \replacewith(\modality{#allmodal}{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \intersect(#seLeft, #vRightNew); ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "setIntersectUnfold"
    };

    setMinusUnfoldLeft {
        \schemaVar \program Variable #v, #vLeftNew;
        \schemaVar \program NonSimpleExpression #nseLeft;
        \schemaVar \program Expression #eRight;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \set_minus(#nseLeft, #eRight); ...}\endmodality (post))
        \varcond(\newTypeOf(#vLeftNew, #nseLeft))
        \replacewith(\modality{#allmodal}{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \set_minus(#vLeftNew, #eRight); ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "setMinusUnfold"
    };

    setMinusUnfoldRight {
        \schemaVar \program Variable #v, #vRightNew;
        \schemaVar \program SimpleExpression #seLeft;
        \schemaVar \program NonSimpleExpression #nseRight;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \set_minus(#seLeft, #nseRight); ...}\endmodality (post))
        \varcond(\newTypeOf(#vRightNew, #nseRight))
        \replacewith(\modality{#allmodal}{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \set_minus(#seLeft, #vRightNew); ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "setMinusUnfold"
    };

    singletonUnfold {
        \schemaVar \program Variable #v, #a, #vObjNew;
        \schemaVar \program NonSimpleExpression #nseObj;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \singleton(#nseObj.#a); ...}\endmodality (post))
        \varcond(\newTypeOf(#vObjNew, #nseObj))
        \replacewith(\modality{#allmodal}{.. #typeof(#nseObj) #vObjNew=#nseObj; #v = \singleton(#vObjNew.#a); ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "singletonUnfold"
    };

    singletonAssignment {
        \schemaVar \program Variable #v, #a;
        \schemaVar \program SimpleExpression #seObj;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \singleton(#seObj.#a); ...}\endmodality (post))
        \replacewith({#v := singleton(#seObj, #memberPVToField(#a))}\modality{#allmodal}{.. ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "singletonAssignment"
    };

    allObjectsAssignment {
        \schemaVar \program Variable #v, #a;
        \schemaVar \program Expression #eObj;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \all_objects(#eObj.#a); ...}\endmodality (post))
        \replacewith({#v := allObjects(#memberPVToField(#a))}\modality{#allmodal}{.. ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "allObjectsAssignment"
    };

    allFieldsUnfold {
        \schemaVar \program Variable #v, #vObjNew;
        \schemaVar \program NonSimpleExpression #nseObj;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \all_fields(#nseObj); ...}\endmodality (post))
        \varcond(\newTypeOf(#vObjNew, #nseObj))
        \replacewith(\modality{#allmodal}{.. #typeof(#nseObj) #vObjNew=#nseObj; #v = \all_fields(#vObjNew); ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "allFieldsAssignment"
    };
}

// Sequent

\rules(programRules:Java) {

    seqConcatUnfoldLeft {
        \schemaVar \program Variable #v, #vLeftNew;
        \schemaVar \program NonSimpleExpression #nseLeft;
        \schemaVar \program Expression #eRight;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \seq_concat(#nseLeft, #eRight); ...}\endmodality (post))
        \varcond(\newTypeOf(#vLeftNew, #nseLeft))
        \replacewith(\modality{#allmodal}{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \seq_concat(#vLeftNew, #eRight); ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "seqConcatUnfold"
    };

    seqConcatUnfoldRight {
        \schemaVar \program Variable #v, #vRightNew;
        \schemaVar \program SimpleExpression #seLeft;
        \schemaVar \program NonSimpleExpression #nseRight;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \seq_concat(#seLeft, #nseRight); ...}\endmodality (post))
        \varcond(\newTypeOf(#vRightNew, #nseRight))
        \replacewith(\modality{#allmodal}{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \seq_concat(#seLeft, #vRightNew); ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "seqConcatUnfold"
    };

    seqGetUnfoldLeft {
        \schemaVar \program Variable #v, #vLeftNew;
        \schemaVar \program NonSimpleExpression #nseLeft;
        \schemaVar \program Expression #eRight;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \seq_get(#nseLeft, #eRight); ...}\endmodality (post))
        \varcond(\newTypeOf(#vLeftNew, #nseLeft))
        \replacewith(\modality{#allmodal}{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \seq_get(#vLeftNew, #eRight); ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "seqGetUnfold"
    };

    seqGetUnfoldRight {
        \schemaVar \program Variable #v, #vRightNew;
        \schemaVar \program SimpleExpression #seLeft;
        \schemaVar \program NonSimpleExpression #nseRight;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \seq_get(#seLeft, #nseRight); ...}\endmodality (post))
        \varcond(\newTypeOf(#vRightNew, #nseRight))
        \replacewith(\modality{#allmodal}{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \seq_get(#seLeft, #vRightNew); ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "seqGetUnfold"
    };

    seqIndexOfUnfoldLeft {
        \schemaVar \program Variable #v, #vLeftNew;
        \schemaVar \program NonSimpleExpression #nseLeft;
        \schemaVar \program Expression #eRight;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \indexOf(#nseLeft, #eRight); ...}\endmodality (post))
        \varcond(\newTypeOf(#vLeftNew, #nseLeft))
        \replacewith(\modality{#allmodal}{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \indexOf(#vLeftNew, #eRight); ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "seqIndexOfUnfold"
    };

    seqIndexOfUnfoldRight {
        \schemaVar \program Variable #v, #vRightNew;
        \schemaVar \program SimpleExpression #seLeft;
        \schemaVar \program NonSimpleExpression #nseRight;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \indexOf(#seLeft, #nseRight); ...}\endmodality (post))
        \varcond(\newTypeOf(#vRightNew, #nseRight))
        \replacewith(\modality{#allmodal}{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \indexOf(#seLeft, #vRightNew); ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "seqIndexOfUnfold"
    };

    seqSubUnfoldLeft {
        \schemaVar \program Variable #v, #vLeftNew;
        \schemaVar \program NonSimpleExpression #nseLeft;
        \schemaVar \program Expression #eMiddle, #eRight;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \seq_sub(#nseLeft, #eMiddle, #eRight); ...}\endmodality (post))
        \varcond(\newTypeOf(#vLeftNew, #nseLeft))
        \replacewith(\modality{#allmodal}{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \seq_sub(#vLeftNew, #eMiddle, #eRight); ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "seqSubUnfold"
    };

    seqSubUnfoldMiddle {
        \schemaVar \program Variable #v, #vMiddleNew;
        \schemaVar \program SimpleExpression #seLeft;
        \schemaVar \program NonSimpleExpression #nseMiddle;
        \schemaVar \program Expression #eRight;

        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \seq_sub(#seLeft, #nseMiddle, #eRight); ...}\endmodality (post))
        \varcond(\newTypeOf(#vMiddleNew, #nseMiddle))
        \replacewith(\modality{#allmodal}{.. #typeof(#nseMiddle) #vMiddleNew=#nseMiddle; #v = \seq_sub(#seLeft, #vMiddleNew, #eRight); ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "seqSubUnfold"
    };

    seqSubUnfoldRight {
        \schemaVar \program Variable #v, #vRightNew;
        \schemaVar \program SimpleExpression #seLeft, #seMiddle;
        \schemaVar \program NonSimpleExpression #nseRight;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \seq_sub(#seLeft, #seMiddle, #nseRight); ...}\endmodality (post))
        \varcond(\newTypeOf(#vRightNew, #nseRight))
        \replacewith(\modality{#allmodal}{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \seq_sub(#seLeft, #seMiddle, #vRightNew); ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "seqSubUnfold"
    };

    seqSingletonUnfold {
        \schemaVar \program Variable #v, #vNew;
        \schemaVar \program NonSimpleExpression #nse;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \seq_singleton(#nse); ...}\endmodality (post))
        \varcond(\newTypeOf(#vNew, #nse))
        \replacewith(\modality{#allmodal}{.. #typeof(#nse) #vNew=#nse; #v = \seq_singleton(#vNew); ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "seqSingletonUnfold"
    };

    seqLengthUnfold {
        \schemaVar \program Variable #v, #vNew;
        \schemaVar \program NonSimpleExpression #nse;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \seq_length(#nse); ...}\endmodality (post))
        \varcond(\newTypeOf(#vNew, #nse))
        \replacewith(\modality{#allmodal}{.. #typeof(#nse) #vNew=#nse; #v = \seq_length(#vNew); ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "seqLengthUnfold"
    };

    seqReverseUnfold {
        \schemaVar \program Variable #v, #vNew;
        \schemaVar \program NonSimpleExpression #nse;
        \schemaVar \formula post;

        \find(\modality{#allmodal}{.. #v = \seq_reverse(#nse); ...}\endmodality (post))
        \varcond(\newTypeOf(#vNew, #nse))
        \replacewith(\modality{#allmodal}{.. #typeof(#nse) #vNew=#nse; #v = \seq_reverse(#vNew); ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "seqReverseUnfold"
    };

    // seq_upd had some rules here too. But since set statements were refactored,
    // they are not needed anymore anyway.
    }
