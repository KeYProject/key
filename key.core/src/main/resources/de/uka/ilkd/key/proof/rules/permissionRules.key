// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2014 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 

\rules {

  writePermission {
    \schemaVar \term Permission p;
    \find( writePermission(p) )
    \replacewith ( writePermissionObject(currentThread, p) )
    \heuristics(simplify_enlarging)    
  };

  readPermission {
    \schemaVar \term Permission p;
    \find( readPermission(p) )
    \replacewith ( readPermissionObject(currentThread, p) )
    \heuristics(simplify_enlarging)
  };

  permissionDefaultValue {
    \find(Permission::defaultValue)
    \replacewith(initFullPermission)
    \heuristics(simplify)
  };

}

\rules(permissions:off) {

  writePermissionObject {
    \schemaVar \term Permission p;
    \schemaVar \term Object o;
    \find( writePermissionObject(o, p) )
    \replacewith ( true )
    \heuristics(concrete)
  };

  readPermissionObject {
    \schemaVar \term Permission p;
    \schemaVar \term Object o;
    \find( readPermissionObject(o, p) )
    \replacewith ( true )
    \heuristics(concrete)
  };

}

\rules(permissions:on) {

  // Permission owner list rules:

// Comparison: (not needed for now)
/*
  equalPermissionOwners_ne1 {
    \schemaVar \term Object o;
    \schemaVar \term PermissionOwnerList ol;
    \find(equalPermissionOwners(consPermissionOwnerList(o,ol), emptyPermissionOwnerList))
    \replacewith ( false )
    \heuristics(concrete)    
  };

  equalPermissionOwners_ne2 {
    \schemaVar \term Object o;
    \schemaVar \term PermissionOwnerList ol;
    \find(equalPermissionOwners(emptyPermissionOwnerList, consPermissionOwnerList(o,ol)))
    \replacewith ( false )
    \heuristics(concrete)    
  };

  equalPermissionOwners_eq1 {
    \find(equalPermissionOwners(emptyPermissionOwnerList, emptyPermissionOwnerList))
    \replacewith ( true )
    \heuristics(concrete)    
  };

  equalPermissionOwners_eq2 {
    \schemaVar \term Object o1, o2;
    \schemaVar \term PermissionOwnerList ol1, ol2;
    \find(equalPermissionOwners(consPermissionOwnerList(o1,ol1), consPermissionOwnerList(o2,ol2)))
    \replacewith ( o1 = o2 & equalPermissionOwners(ol1, ol2))
    \heuristics(simplify_expression)    
  };
*/

  // Check ownership at position

  checkPermissionOwner_empty {
    \schemaVar \term Object ow;
    \schemaVar \term int depth;
    \find(checkPermissionOwner(ow, depth, emptyPermissionOwnerList))
    "checkPermissionOwner definition": \replacewith ( false )
    ;
    "checkPermissionOwner precondition": \add(==>  depth >= 0)
    \heuristics(concrete)
  };

  checkPermissionOwner_nonempty {
    \schemaVar \term Object ow, o;
    \schemaVar \term int depth;
    \schemaVar \term PermissionOwnerList ol;
    \find(checkPermissionOwner(ow, depth, consPermissionOwnerList(o,ol)))
    "checkPermissionOwner definition": \replacewith ( \if(depth = 0)\then(ow = o)\else(checkPermissionOwner(ow, depth - 1, ol)) )
    ;
    "checkPermissionOwner precondition": \add(==>  depth >= 0)
    \heuristics(simplify_expression)    
  };

  // Insert new owner at position

  insertPermissionOwner {
    \schemaVar \term Object o, no, owner;
    \schemaVar \term int depth;
    \schemaVar \term PermissionOwnerList ol;
    \find(insertPermissionOwner(o, no, depth, consPermissionOwnerList(owner,ol)))
    "insertPermissionOwner definition": \replacewith(
        \if(depth = 0 )
          \then (consPermissionOwnerList(no,consPermissionOwnerList(owner, ol)))
          \else (
            consPermissionOwnerList(owner, insertPermissionOwner(o, no, depth - 1, ol))
          )
    )
    ; 
    "insertPermissionOwner precondition": \add(==> depth >= 0 & checkPermissionOwner(o, depth, consPermissionOwnerList(owner, ol)) )
    \heuristics(simplify_enlarging)
  };

  // Remove the owner on the top

  returnPermissionOwner {
    \schemaVar \term Object o, owner;
    \schemaVar \term PermissionOwnerList ol;
    \find(returnPermissionOwner(o, consPermissionOwnerList(owner,ol)))
    "returnPermissionOwner definition": \replacewith( ol )
    ;  
    "returnPermissionOwner precondition": \add(==> checkPermissionOwner(o, 0, consPermissionOwnerList(owner,ol)))
    \heuristics(simplify_expression)
  };

  // Permission transfer rules

  transferPermission_empty {
    \schemaVar \term boolean split;
    \schemaVar \term Object from, to;
    \schemaVar \term int depth;

    \find( transferPermission(split, from, to, depth, emptyPermission) )
    \replacewith( emptyPermission )
    \heuristics(concrete)
  };


  transferPermission_slice {
    \schemaVar \term boolean split;
    \schemaVar \term Object from, to;
    \schemaVar \term int depth;
    \schemaVar \term Permission p;
    \schemaVar \term PermissionOwnerList owners;

    \find( transferPermission(split, from, to, depth, slice(owners, p)) )
    \replacewith(
        \if(from = to) \then (slice(owners, p)) \else(
            \if(checkPermissionOwner(from, depth, owners))\then(
               slice(
                insertPermissionOwner(from, to, depth, owners), 
                \if(split = TRUE)\then(slice(owners, p))\else(transferPermission(split, from, to, depth, p))
               )
            )\else(
               slice(owners, transferPermission(split, from, to, depth, p))
            )
        )
    )
    \heuristics(simplify_enlarging)
  };


  returnPermission_empty {
    \schemaVar \term Object from, to;

    \find( returnPermission(from, to, emptyPermission) )
    \replacewith( emptyPermission )
    \heuristics(concrete)
  };

  returnPermission_slice_split {
    \schemaVar \term Object from, to;
    \schemaVar \term Permission p;
    \schemaVar \term PermissionOwnerList owners;
    \find(  returnPermission(from, to, slice(consPermissionOwnerList(from, owners), slice(owners, p)))  )
    "returnPermission definition": \replacewith ( slice(owners, returnPermission(from, to, p)) )
    ;
    "returnPermission precondition": \add( ==> from != to & checkPermissionOwner(to, 0, owners) )
    \heuristics(simplify)    // This one needs to be strictly higher priority than the next
  };

  returnPermission_slice {
    \schemaVar \term Object from, to;
    \schemaVar \term Permission p;
    \schemaVar \term PermissionOwnerList owners;

    \find( returnPermission(from, to, slice(owners, p)) )
    \replacewith( 
        \if(from = to) \then (slice(owners, p)) \else(
           \if(checkPermissionOwner(from, 0, owners) & checkPermissionOwner(to, 1, owners)) \then(
              slice(returnPermissionOwner(from, owners), returnPermission(from, to, p))
           )\else(
              slice(owners, returnPermission(from, to, p))
           )
        )
    )
    \heuristics(simplify_expression)
  };

  // Permission rights checks

  readPermissionSlice {
    \schemaVar \term Object o;
    \schemaVar \term PermissionOwnerList ol;
    \schemaVar \term Permission p;

    \find(readPermissionObject(o, slice(ol, p)))
    \replacewith ( checkPermissionOwner(o, 0, ol) | readPermissionObject(o, p) )
    \heuristics(simplify_enlarging)    
  };

  readPermissionEmpty {
    \schemaVar \term Object o;
    \find(readPermissionObject(o, emptyPermission))
    \replacewith ( false )
    \heuristics(concrete)
  };

  writePermissionSlice {
    \schemaVar \term Object o;
    \schemaVar \term PermissionOwnerList ol;
    \schemaVar \term Permission p;

    \find(writePermissionObject(o, slice(ol, p)))
    \replacewith ( checkPermissionOwner(o, 0, ol) & writePermissionObject(o, p) )
    \heuristics(simplify_enlarging)
  };

  writePermissionEmpty {
    \schemaVar \term Object o;
    \find(writePermissionObject(o, emptyPermission))
    \replacewith ( true )
    \heuristics(concrete)
  };


  // Convenience

  initFullPermission {
    \find(initFullPermission)
    \replacewith(slice(consPermissionOwnerList(currentThread, emptyPermissionOwnerList), emptyPermission))
    \heuristics(simplify_enlarging)
  };


  permOwner1 {
    \schemaVar \term Object o1;
    \find(owner1(o1))
    \replacewith ( consPermissionOwnerList(o1, emptyPermissionOwnerList) )
    \heuristics(simplify_enlarging)
  };

  permOwner2 {
    \schemaVar \term Object o1, o2;
    \find(owner2(o1, o2))
    \replacewith ( consPermissionOwnerList(o1, consPermissionOwnerList(o2, emptyPermissionOwnerList)) )
    \heuristics(simplify_enlarging)
  };

  permOwner3 {
    \schemaVar \term Object o1, o2, o3;
    \find(owner3(o1, o2, o3))
    \replacewith ( consPermissionOwnerList(o1, consPermissionOwnerList(o2, consPermissionOwnerList(o3, emptyPermissionOwnerList))) )
    \heuristics(simplify_enlarging)
  };

  permOwner4 {
    \schemaVar \term Object o1, o2, o3, o4;
    \find(owner4(o1, o2, o3, o4))
    \replacewith ( consPermissionOwnerList(o1, consPermissionOwnerList(o2, consPermissionOwnerList(o3, consPermissionOwnerList(o4, emptyPermissionOwnerList)))) )
    \heuristics(simplify_enlarging)
  };

  permSlice1 {
    \schemaVar \term PermissionOwnerList pol1;
    \find(slice1(pol1))
    \replacewith ( slice(pol1, emptyPermission) )
    \heuristics(simplify_enlarging)
  };

  permSlice2 {
    \schemaVar \term PermissionOwnerList pol1, pol2;
    \find(slice2(pol1, pol2))
    \replacewith ( slice(pol1, slice(pol2, emptyPermission)) )
    \heuristics(simplify_enlarging)
  };

  twoPermissions {
    \schemaVar \term Object o1, o2;
    \schemaVar \term Permission p;
    \schemaVar \variables PermissionOwnerList ol1, ol2;
    \find(twoPermissions(o1, o2, p))
    \varcond ( \notFreeIn (ol1, p), \notFreeIn (ol2, p), \notFreeIn (ol1, o1), \notFreeIn (ol2, o1),  \notFreeIn (ol1, o2), \notFreeIn (ol2, o2))
    \replacewith ( \exists ol1, ol2; p = slice(consPermissionOwnerList(o1, ol1), slice(consPermissionOwnerList(o2, ol2), emptyPermission)) )
    \heuristics(simplify_enlarging)
  };

  nonEmptyPermission {
    \schemaVar \term Permission p;
    \schemaVar \variables Permission pp;
    \schemaVar \variables PermissionOwnerList ol;
    \find(nonEmptyPermission(p))
    \varcond ( \notFreeIn (ol, p), \notFreeIn (pp, p) )
    \replacewith ( \exists ol; \exists pp; p = slice(ol, pp) )
    \heuristics(simplify_enlarging)
  };

  readPermissionOwe {
    \schemaVar \term Permission p;
    \schemaVar \term Object o1, o2;
    \schemaVar \variables Permission pp;
    \schemaVar \variables PermissionOwnerList ol;
    \find(readPermissionOwe(o1, o2, p))
    \varcond ( \notFreeIn (ol, p), \notFreeIn (pp, p), \notFreeIn (ol, o1), \notFreeIn (pp, o1), \notFreeIn (ol, o2), \notFreeIn (pp, o2) )
    \replacewith ( \exists ol; \exists pp; p = slice(consPermissionOwnerList(o1,consPermissionOwnerList(o2, ol)), pp) )
    \heuristics(simplify_enlarging)
  };

  readPermissionOwe2 {
    \schemaVar \term Permission p;
    \schemaVar \term Object o1, o2;
    \schemaVar \variables Permission pp;
    \schemaVar \variables PermissionOwnerList ol, ol0;
    \find(readPermissionOwe2(o1, o2, p))
    \varcond ( \notFreeIn (ol0, p), \notFreeIn (ol, p), \notFreeIn (pp, p), \notFreeIn (ol0, o1), \notFreeIn (ol, o1), \notFreeIn (pp, o1), \notFreeIn (ol0, o2), \notFreeIn (ol, o2), \notFreeIn (pp, o2) )
    \replacewith ( \exists ol0; \exists ol; \exists pp; p = slice(ol0, slice(consPermissionOwnerList(o1,consPermissionOwnerList(o2, ol)), pp)) )
    \heuristics(simplify_enlarging)
  };

  writePermissionImpliesReadPermission {
    \schemaVar \term Object o;
    \schemaVar \term Permission p;

    \assumes(writePermissionObject(o, p) ==>)
    \find(readPermissionObject(o, p))
    \replacewith ( true )
    \heuristics(simplify)
  };

  readPermissionAfterTransferRead {
    \schemaVar \term Object o1, o2;
    \schemaVar \term Permission p;
    \schemaVar \term boolean split;

    \assumes(readPermissionObject(o1, p) ==>)
    \find(readPermissionObject(o2, transferPermission(split, o1, o2, 0, p)))
    \replacewith ( true )
    \heuristics(simplify)
  };

  readPermissionAfterTransferReadEQ {
    \schemaVar \term Object o1, o2;
    \schemaVar \term Permission p, p1;
    \schemaVar \term boolean split;

    \assumes(readPermissionObject(o1, p), transferPermission(split, o1, o2, 0, p) = p1 ==>)
    \find(readPermissionObject(o2, p1))
    \replacewith ( true )
    \heuristics(simplify)
  };

  readPermissionAfterTransferWrite {
    \schemaVar \term Object o1, o2;
    \schemaVar \term Permission p;
    \schemaVar \term boolean split;

    \assumes(writePermissionObject(o1, p) ==>)
    \find(readPermissionObject(o2, transferPermission(split, o1, o2, 0, p)))
    \replacewith ( true )
    \heuristics(simplify)
  };

  readPermissionAfterTransferWriteEQ {
    \schemaVar \term Object o1, o2;
    \schemaVar \term Permission p, p1;
    \schemaVar \term boolean split;

    \assumes(writePermissionObject(o1, p), transferPermission(split, o1, o2, 0, p) = p1 ==>)
    \find(readPermissionObject(o2, p1))
    \replacewith ( true )
    \heuristics(simplify)
  };

  writePermissionAfterFullTransfer {
    \schemaVar \term Object o1, o2;
    \schemaVar \term Permission p;

    \assumes(writePermissionObject(o1, p) ==>)
    \find(writePermissionObject(o2, transferPermission(FALSE, o1, o2, 0, p)))
    \replacewith ( true )
    \heuristics(simplify)
  };

  writePermissionAfterFullTransferEQ {
    \schemaVar \term Object o1, o2;
    \schemaVar \term Permission p1, p2;

    \assumes(writePermissionObject(o1, p2), transferPermission(FALSE, o1, o2, 0, p2) = p1 ==>)
    \find(writePermissionObject(o2, p1))
    \replacewith ( true )
    \heuristics(simplify)
  };

  writePermissionAfterReturn {
    \schemaVar \term Object o1, o2;
    \schemaVar \term Permission p;

    \assumes(writePermissionObject(o1, p) ==>)
    \find(writePermissionObject(o2, returnPermission(o1, o2, p)))
    \replacewith ( true )
    \heuristics(simplify)
  };

  writePermissionAfterReturnEQ {
    \schemaVar \term Object o1, o2;
    \schemaVar \term Permission p1, p2;

    \assumes(writePermissionObject(o1, p2), returnPermission(o1, o2, p2) = p1 ==>)
    \find(writePermissionObject(o2, p1))
    \replacewith ( true )
    \heuristics(simplify)
  };

  permissionTransferReturnIdentity {
    \schemaVar \term Object o1, o2;
    \schemaVar \term Permission p;

    \find(returnPermission(o2, o1, transferPermission(FALSE, o1, o2, 0, p)))
    \replacewith ( p )
    \heuristics(simplify)
  };

  permissionTransferReturnIdentityEQ {
    \schemaVar \term Object o1, o2;
    \schemaVar \term Permission p1, p2;

    \assumes(p2 = transferPermission(FALSE, o1, o2, 0, p1) ==>)
    \find(returnPermission(o2, o1, p2))
    \replacewith ( p1 )
    \heuristics(simplify)
  };

  writePermissionOtherNoPermissionCurrentRead {
    \schemaVar \term Object o1, o2;
    \schemaVar \term Permission p;

    \assumes(writePermissionObject(o1, p) ==> o2 = o1)
    \find(readPermissionObject(o2, p))
    \replacewith( false )
    \heuristics(simplify)
  };

  writePermissionOtherNoPermissionCurrentWrite {
    \schemaVar \term Object o1, o2;
    \schemaVar \term Permission p;

    \assumes(writePermissionObject(o1, p) ==> o2 = o1)
    \find(writePermissionObject(o2, p))
    \replacewith( false )
    \heuristics(simplify)
  };

  // connection between heap and permissions

  createdOnHeapImpliesCreatedOnPermissions {
    \schemaVar \term Object o;
    \schemaVar \term Heap h, p;

    \assumes(wellFormed(h), wellFormed(p), permissionsFor(p, h), boolean::select(h, o, java.lang.Object::<created>) = TRUE ==>)
    \find(boolean::select(p, o, java.lang.Object::<created>))
    \sameUpdateLevel
    \replacewith(TRUE)

    // FIXME used to be inReachableStateImplication, this heuristics is sometimes switched off (bug?)
    \heuristics(simplify)
  };

}



