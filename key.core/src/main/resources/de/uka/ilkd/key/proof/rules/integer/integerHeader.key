/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

\sorts {
    numbers;
    int;

    // these sort are not axiomatised yet; to come in CHARTER
    // they are here included to allow us to load Java program that
    // contain some methods or fields of type float or double

    real; // TODO @Real
}

\functions {

    // ----------------------------------------------------------------------------
    // The functions declared below preserve their semantics independently
    // from the current integer semantics.
    // ----------------------------------------------------------------------------

    numbers #;
    numbers 0(numbers);
    numbers 1(numbers);
    numbers 2(numbers);
    numbers 3(numbers);
    numbers 4(numbers);
    numbers 5(numbers);
    numbers 6(numbers);
    numbers 7(numbers);
    numbers 8(numbers);
    numbers 9(numbers);
    numbers neglit(numbers);

    int Z(numbers);

    // arithmetic operators on mathematical integers
    int add(int, int);
    int neg(int);
    int sub(int, int);
    int mul(int, int);
    int div(int, int);
    int mod(int, int);
    int pow(int, int);
    int log(int, int);

    // comprehensions
    int bsum {false, false, true}(int, int, int);
    int bprod {false, false, true}(int, int, int);
    int sum {true, true}(boolean, int);
    int prod {true, true}(boolean, int);
    int min {true, true}(boolean, int);
    int max {true, true}(boolean, int);

    // functions to indicate undefinedness
    int undefinedPow(int, int);
    int undefinedLog(int, int);

    // arithmetic operators with modulo semantics
    int jmod(int, int);
    int jdiv(int, int);

    // shift operations

    // left '>>' right
    int shiftright(/* left */ int, /* right */ int);
    // left '<<' right
    int shiftleft(/* left */ int, /* right */ int);

    // left '>>' right with right >= 0
    int shiftrightPositiveShift(/* left */ int, /* right */ int);
    // left '<<' right with right >= 0
    int shiftleftPositiveShift(/* left */ int, /* right */ int);

    // unsignedshift for arbitrary length bitvectors does not make much sense
    // therefore only a version with an explicit bitvector size is supported
    int unsignedshift(/* left */ int, /* right */ int, /* bitsize */ int);

    // bitmask operations &, |, ^
    int binaryAnd(/* left */ int, /* right */ int);
    int binaryOr(/* left */ int, /* right */ int);
    int binaryXOr(/* left */ int, /* right */ int);
}

\predicates {

    // ----------------------------------------------------------------------------
    // The predicates declared below preserve their semantics independently
    // from the current integer semantics.
    // ----------------------------------------------------------------------------

    leq(int, int);
    lt(int, int);
    geq(int, int);
    gt(int, int);
}
