// This file is part of KeY - Integrated Deductive Software Design
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General
// Public License. See LICENSE.TXT for details.
//

\schemaVariables {
	\term int i, j;
	\term Heap h;
	\variables alpha a;
	\variables beta b;
	\variables Field c;
	\term Object o;
	\term Field f;
	\term LocSet l, s;
}

\rules(wdChecks:on) {
	wd_LocSet_AllFields {

		\find (
			wd( allFields(o) )
		)
		\varcond (
			\not \isArray(o)
		)
		\replacewith (
			wd(o)
		)
		\heuristics ( simplify )
	};

	wd_LocSet_AllFieldsArr {

		\find (
			wd( allFields(o) )
		)
		\varcond (
			\isArray(o)
		)
		\replacewith (
			wd(o) & o != null
		)
		\heuristics ( simplify )
	};

	wd_LocSet_AllObjects {

		\find (
			wd( allObjects(f) )
		)
		\replacewith (
			wd(f)
		)
		\heuristics ( simplify )
	};

	wd_LocSet_FreshLocs {

		\find (
			wd( freshLocs(h) )
		)
		\replacewith (
			wd(h) & wellFormed(h)
		)
		\heuristics ( simplify )
	};

	wd_LocSet_Singleton {

		\find (
			wd( singleton(o, f) )
		)
		\varcond (
			\not \isArray(o),
			\not \isStaticField(f)
		)
		\replacewith (
			wd(o) & wd(f) & o != null
		)
		\heuristics ( simplify )
	};

	wd_LocSet_Singleton_Static {

		\find (
			wd( singleton(o, f) )
		)
		\varcond (
			\not \isArray(o),
			\isStaticField(f)
		)
		\replacewith (
			wd(o) & wd(f) & o = null
		)
		\heuristics ( simplify )
	};

	wd_LocSet_Singleton_Arr {

		\find (
			wd( singleton(o, arr(i)) )
		)
		\varcond (
			\isArray(o)
		)
		\replacewith (
			wd(o) & wd(i) & o != null & leq(0,i) & lt(i,length(o))
		)
		\heuristics ( simplify )
	};

	wd_LocSet_Singleton_Quant {

		\find (
			\forall c; wd( singleton(o, f) )
		)
		\varcond (
			\not \isArray(o)
		)
		\replacewith (
			\forall c; (wd(o) & wd(f))
		)
		\heuristics ( simplify )
	};

	wd_LocSet_Union {

		\find (
			wd( union(l, s) )
		)
		\replacewith (
			wd(l) & wd(s)
		)
		\heuristics ( simplify )
	};

	wd_LocSet_Intersect {
		\find (
			wd( intersect(l, s) )
		)
		\replacewith (
			wd(l) & wd(s)
		)
		\heuristics ( simplify )
	};

	wd_LocSet_Diff {

		\find (
			wd( setMinus(l, s) )
		)
		\replacewith (
			wd(l) & wd(s)
		)
		\heuristics ( simplify )
	};

	wd_LocSet_ArrRange {

		\find (
			wd( arrayRange(o, i, j) )
		)
		\varcond (
			\isArray(o)
		)
		\replacewith (
			wd(o) & wd(i) & wd(j) & o != null & leq(0,i) & leq(i,j) & lt(j,length(o))
		)
		\heuristics ( simplify )
	};

	wd_LocSet_AllElemsArr {

		\find (
			wd( allElementsOfArray(h, o, l) )
		)
		\varcond (
			\isArray(o)
		)
		\replacewith (
			wd(h) & wd(o) & wd(l) & wellFormed(h) & o != null
			& boolean::select(h, o, java.lang.Object::<created>) = TRUE
		)
		\heuristics ( simplify )
	};

	wd_LocSet_AllElemsArrLocsets {

		\find (
			wd( allElementsOfArrayLocsets(h, o, l) )
		)
		\varcond (
			\isArray(o)
		)
		\replacewith (
			wd(h) & wd(o) & wd(l) & wellFormed(h) & o != null
			& boolean::select(h, o, java.lang.Object::<created>) = TRUE
		)
		\heuristics ( simplify )
	};

	wd_LocSet_InfiniteUnion {

		\find (
			wd( infiniteUnion{a;}(l) )
		)
		\replacewith (
			\forall a; wd(l)
		)
		\heuristics ( simplify )
	};

	wd_LocSet_InfiniteUnion2 {

		\find (
			wd( infiniteUnion{a, b;}(l) )
		)
		\replacewith (
			\forall a; (\forall b; wd(l))
		)
		\heuristics ( simplify )
		\displayname "wd_LocSet_InfiniteUnion"
	};

	wd_LocSet_Pred_ElementOf {

		\find (
			WD( elementOf(o, f, l) )
		)
		\varcond (
			\not \isStaticField(f)
		)
		\replacewith (
			wd(o) & wd(f) & wd(l) & o != null
		)
		\heuristics ( simplify )
	};

	wd_LocSet_Pred_ElementOf_Static {

		\find (
			WD( elementOf(o, f, l) )
		)
		\varcond (
			\isStaticField(f)
		)
		\replacewith (
			wd(o) & wd(f) & wd(l) & o = null
		)
		\heuristics ( simplify )
	};

	wd_LocSet_Pred_Subset {

		\find (
			WD( subset(l, s) )
		)
		\replacewith (
			wd(l) & wd(s)
		)
		\heuristics ( simplify )
	};

	wd_LocSet_Pred_Disjoint {
		\find (
			WD( disjoint(l, s) )
		)
		\replacewith (
			wd(l) & wd(s)
		)
		\heuristics ( simplify )
	};

	wd_LocSet_Pred_InHeap {

		\find (
			WD( createdInHeap(l, h) )
		)
		\replacewith (
			wd(l) & wd(h) & wellFormed(h)
		)
		\heuristics ( simplify )
	};
}
