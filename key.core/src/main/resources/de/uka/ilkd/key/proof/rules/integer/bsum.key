/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

// --------------------------------------------------------------------
// rules for bounded sums
// --------------------------------------------------------------------

\schemaVariables {

    \term int i, i0, i1, i2, i3, i4, j, j0, j1, t, t1, t2;
    \skolemTerm int sk, sk2;

    \term numbers iz, jz;
    \formula b, psi, phi, post, inv;
    \variables int uSub, uSub1, uSub2;
}

\rules(integerSimplificationRules:full) {

    // axiom
    bsum_def {
        \find(bsum{uSub;}(i0, i1, t))
        \sameUpdateLevel
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i1))
        \replacewith(\if(i0 < i1)
                \then(bsum{uSub;}(i0, i1 - 1, t) + {\subst uSub; (i1 - 1)}t)
                \else(0))
    };

    \lemma
    bsum_empty {
        \find(bsum{uSub;}(i0, i1, t))
        \sameUpdateLevel
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i1))
        "Precondition":
            \add( ==> i1 <= i0);
        "Empty Sum":
            \replacewith(0)
    };

    \lemma
    bsum_induction_upper {
        \find(bsum{uSub;}(i0, i2, t))
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2))
        \replacewith(bsum{uSub;}(i0, i2 - 1, t) + \if(i0 < i2) \then({\subst uSub; (i2 - 1)}t) \else(0))
    };

    \lemma
    bsum_induction_lower {
        \find(bsum{uSub;}(i0, i2, t))
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2))
        \replacewith(bsum{uSub;}(i0 + 1, i2, t) + \if(i0 < i2) \then({\subst uSub; (i0)}t) \else(0))
    };

    \lemma
    bsum_num_of_bounds {
        \find(bsum{uSub;}(i0, i2, \if(phi) \then(1) \else(0)))
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2))
        \add(0 <= bsum{uSub;}(i0, i2, \if(phi) \then(1) \else(0)),
            i0 <= i2 -> bsum{uSub;}(i0, i2, \if(phi) \then(1) \else(0)) <= i2 - i0 ==>)
    };

    \lemma
    bsum_num_of_bounds2 {
        \find(bsum{uSub;}(i0, i2, \if(phi) \then(0) \else(1)))
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2))
        \add(0 <= bsum{uSub;}(i0, i2, \if(phi) \then(0) \else(1)),
            i0 <= i2 -> bsum{uSub;}(i0, i2, \if(phi) \then(0) \else(1)) <= i2 - i0 ==>)
    };

    bsum_split {
        \schemaVar \term int low, high;
        \schemaVar \term int middle;

        \find(bsum{uSub;}(low, high, t))
        \varcond(\notFreeIn(uSub, low),
            \notFreeIn(uSub, middle),
            \notFreeIn(uSub, high))
        \replacewith(\if(low <= middle & middle <= high)
                \then(bsum{uSub;}(low, middle, t) + bsum{uSub;}(middle, high, t))
                \else(bsum{uSub;}(low, high, t)))

        \heuristics(comprehension_split, triggered)

        \trigger {middle} bsum{uSub;}(low, middle, t) \avoid middle <= low, middle >= high;
    };

    bsum_commutative_associative {
        \find(bsum{uSub;}(i0, i2, t + t2))
        \varcond(
            \notFreeIn(uSub1, i0),
            \notFreeIn(uSub1, i2),
            \notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2),
            \notFreeIn(uSub1, t2))
        \replacewith(bsum{uSub;}(i0, i2, t) + bsum{uSub1;}(i0, i2, {\subst uSub; uSub1}t2))

    };

    \lemma
    bsum_induction_upper2 {
        \find(bsum{uSub;}(i0, i2, t))
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2))
        \replacewith(bsum{uSub;}(i0, i2 + 1, t) - \if(i0 < i2 + 1) \then({\subst uSub; (i2)}t) \else(0))

    };

    \lemma
    bsum_induction_upper_concrete {
        \find(bsum{uSub;}(i0, 1 + i2, t))
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2))
        \replacewith(bsum{uSub;}(i0, i2, t) + \if(i0 <= i2) \then({\subst uSub; (i2)}t) \else(0))
        \heuristics(simplify)
    };

    \lemma
    bsum_induction_upper_concrete_2 {
        \find(bsum{uSub;}(Z(iz), Z(jz), t))
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2))
        \replacewith(bsum{uSub;}(Z(iz), Z(jz) - 1, t) + \if(Z(iz) <= Z(jz) - 1) \then({\subst uSub; (Z(jz) - 1)}t) \else(0))
        \heuristics(simplify)
    };

    \lemma
    bsum_induction_upper2_concrete {
        \find(bsum{uSub;}(i0, -1 + i2, t))
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2))
        \replacewith(bsum{uSub;}(i0, i2, t) - \if(i0 < i2) \then({\subst uSub; (i2 - 1)}t) \else(0))
        \heuristics(simplify)
    };

    \lemma
    bsum_induction_lower_concrete {
        \find(bsum{uSub;}(-1 + i0, i2, t))
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2))
        \replacewith(bsum{uSub;}(i0, i2, t) + \if(-1 + i0 < i2) \then({\subst uSub; (-1 + i0)}t) \else(0))
        \heuristics(simplify)
    };

    \lemma
    bsum_induction_lower2 {
        \find(bsum{uSub;}(i0, i2, t))
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2))
        \replacewith(bsum{uSub;}(i0 - 1, i2, t) - \if(i0 - 1 < i2) \then({\subst uSub; (i0 - 1)}t) \else(0))
    };

    \lemma
    bsum_induction_lower2_concrete {
        \find(bsum{uSub;}(1 + i0, i2, t))
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2))
        \replacewith(bsum{uSub;}(i0, i2, t) - \if(i0 < i2) \then({\subst uSub; (i0)}t) \else(0))
        \heuristics(simplify)
    };

    bsum_zero_right {
        \find( ==> bsum{uSub;}(i0, i2, t) = 0)
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2))
        \add( ==> \forall uSub; {\subst uSub; uSub}(uSub >= i0 & uSub < i2 -> t = 0))
        \heuristics(comprehensions)
    };

    bsum_distributive {
        \find(bsum{uSub;}(i0, i2, t * t1))
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2),
            \notFreeIn(uSub, t1))
        \replacewith(bsum{uSub;}(i0, i2, t) * t1)
        \heuristics(simplify)
    };

    bsum_equal_split1 {
        \find( ==> bsum{uSub1;}(i0, i1, t1) = bsum{uSub2;}(i0, i2, t2))
        \varcond(
            \notFreeIn(uSub1, i0),
            \notFreeIn(uSub1, i1),
            \notFreeIn(uSub1, i2),
            \notFreeIn(uSub1, t2),
            \notFreeIn(uSub2, i2),
            \notFreeIn(uSub2, i1),
            \notFreeIn(uSub2, t1),
            \notFreeIn(uSub2, i0))
        \add( ==> i0 <= i1 & i0 <= i2 &
            \if(i1 < i2)
                \then(bsum{uSub1;}(i0, i1, t1 - {\subst uSub2; uSub1}t2) = bsum{uSub2;}(i1, i2, t2))
                \else(bsum{uSub1;}(i2, i1, t1) = bsum{uSub2;}(i0, i2, t2 - {\subst uSub1; uSub2}t1)))
        \heuristics(comprehensions)
    };

    bsum_equal_split2 {
        \assumes(bsum{uSub1;}(i0, i1, t1) = i ==>)
        \find( ==> bsum{uSub2;}(i0, i2, t2) = i)
        \varcond(
            \notFreeIn(uSub1, i0),
            \notFreeIn(uSub1, i1),
            \notFreeIn(uSub1, i2),
            \notFreeIn(uSub1, t2),
            \notFreeIn(uSub2, i2),
            \notFreeIn(uSub2, t1),
            \notFreeIn(uSub2, i1),
            \notFreeIn(uSub2, i0))
        \add( ==> i0 <= i1 & i0 <= i2 &
            \if(i2 < i1)
                \then(bsum{uSub1;}(i2, i1, t1) = bsum{uSub2;}(i0, i2, t2 - {\subst uSub1; uSub2}t1))
                \else(bsum{uSub1;}(i0, i1, t1 - {\subst uSub2; uSub1}t2) = bsum{uSub2;}(i1, i2, t2)))
        \heuristics(comprehensions)
    };

    bsum_equal_split3 {
        \find( ==> bsum{uSub1;}(i1, i0, t1) = bsum{uSub2;}(i2, i0, t2))
        \varcond(
            \notFreeIn(uSub1, i0),
            \notFreeIn(uSub1, i1),
            \notFreeIn(uSub1, i2),
            \notFreeIn(uSub1, t2),
            \notFreeIn(uSub2, i2),
            \notFreeIn(uSub2, i1),
            \notFreeIn(uSub2, t1),
            \notFreeIn(uSub2, i0))
        \add( ==> i1 <= i0 & i2 <= i0 &
            \if(i1 < i2)
                \then(bsum{uSub1;}(i1, i2, t1) = bsum{uSub2;}(i2, i0, t2 - {\subst uSub1; uSub2}t1))
                \else(bsum{uSub1;}(i1, i0, t1 - {\subst uSub2; uSub1}t2) = bsum{uSub2;}(i2, i1, t2)))
        \heuristics(comprehensions)
    };

    bsum_equal_split4 {
        \assumes(bsum{uSub1;}(i1, i0, t1) = i ==>)
        \find( ==> bsum{uSub2;}(i2, i0, t2) = i)
        \varcond(
            \notFreeIn(uSub1, i0),
            \notFreeIn(uSub1, i1),
            \notFreeIn(uSub1, i2),
            \notFreeIn(uSub1, t2),
            \notFreeIn(uSub2, i2),
            \notFreeIn(uSub2, t1),
            \notFreeIn(uSub2, i1),
            \notFreeIn(uSub2, i0))
        \add( ==> i1 <= i0 & i2 <= i0 &
            \if(i2 < i1)
                \then(bsum{uSub1;}(i1, i0, t1 - {\subst uSub2; uSub1}t2) = bsum{uSub2;}(i2, i1, t2))
                \else(bsum{uSub1;}(i1, i2, t1) = bsum{uSub2;}(i2, i0, t2 - {\subst uSub1; uSub2}t1)))
        \heuristics(comprehensions)
    };

    bsum_split_in_three {
        \find(bsum{uSub;}(i0, i2, t))
        \sameUpdateLevel
        \varcond(
            \notFreeIn(uSub, i1),
            \notFreeIn(uSub1, t),
            \notFreeIn(uSub1, i1),
            \notFreeIn(uSub, i0),
            \notFreeIn(uSub1, i2))
        "Precondition":
            \add( ==> (i0 <= i1 & i1 < i2));
        "Splitted Sum":
            \replacewith(bsum{uSub;}(i0, i1, t) +
                {\subst uSub; i1}t +
                bsum{uSub1;}(i1 + 1, i2, {\subst uSub; uSub1}t))
    };

    bsum_one_summand {
        \find(bsum{uSub;}(i0, i1, t))
        \sameUpdateLevel
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i1))
        \replacewith(\if(i0 + 1 = i1) \then({\subst uSub; i0}t) \else(bsum{uSub;}(i0, i1, t)))
    };

    bsum_one_summand_concrete1 {
        \find(bsum{uSub;}(i0, 1 + i0, t))
        \sameUpdateLevel
        \varcond(\notFreeIn(uSub, i0))
        \replacewith({\subst uSub; i0}t)
        \heuristics(concrete)
    };

    bsum_one_summand_concrete2 {
        \find(bsum{uSub;}(-1 + i0, i0, t))
        \sameUpdateLevel
        \varcond(\notFreeIn(uSub, i0))
        \replacewith({\subst uSub; -1 + i0}t)
        \heuristics(concrete)
    };

    // proven in KeY (DB 25/10/2013)
    bsum_shift_index {
        \find(bsum{uSub;}(i0, i1, t))
        \varcond(
            \notFreeIn(uSub, i0),
            \notFreeIn(uSub, i1),
            \notFreeIn(uSub1, i0),
            \notFreeIn(uSub1, i1),
            \notFreeIn(uSub1, t))
        \replacewith(bsum{uSub1;}(0, i1 - i0, {\subst uSub; uSub1 + i0}t))
    };

    // proven in KeY (DB 25/10/2013)
    bsum_same_summand {
        \find(bsum{uSub;}(i0, i1, t))
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i1),
            \notFreeIn(uSub, t))
        \replacewith(\if(i1 >= i0)
                \then(t * (i1 - i0))
                \else(0))
        \heuristics(simplify)
    };

    bsum_zero {
        \find(bsum{uSub;}(i0, i1, 0))
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i1))
        \replacewith(0)
        \heuristics(concrete)
    };

    bsum_lower_equals_upper {
        \find(bsum{uSub;}(i0, i0, t))
        \sameUpdateLevel
        \varcond(\notFreeIn(uSub, i0))
        \replacewith(0)
        \heuristics(concrete)
    };

    \lemma
    bsum_positive {
        \find( ==> bsum{uSub;}(i0, i1, t) >= 0)
        \sameUpdateLevel
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i1))
        \add( ==> \forall uSub; ((uSub >= i0 & uSub < i1) -> t >= 0))
    };

    \lemma
    bsum_upper_bound {
        \find(bsum{uSub;}(i0, i1, t))
        \sameUpdateLevel
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i1),
            \notFreeIn(uSub, j))
        \add(\forall uSub; ((uSub >= i0 & uSub < i1) -> t <= j) -> bsum{uSub;}(i0, i1, t) <= \if(i1 - i0 > 0) \then((i1 - i0) * j) \else(0) ==>)
    };

    \lemma
    bsum_lower_bound {
        \find(bsum{uSub;}(i0, i1, t))
        \sameUpdateLevel
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i1),
            \notFreeIn(uSub, j))
        \add(\forall uSub; ((uSub >= i0 & uSub < i1) -> t >= j) -> bsum{uSub;}(i0, i1, t) >= \if(i1 - i0 > 0) \then((i1 - i0) * j) \else(0) ==>)
    };

    \lemma
    bsum_positive_lower_bound_element {
        \schemaVar \term int index;
        \find(bsum{uSub;}(i0, i1, t))
        \sameUpdateLevel
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i1),
            \notFreeIn(uSub, index))
        "Precondition":
            \add( ==> \forall uSub; ((uSub >= i0 & uSub < i1 & uSub != index) -> t >= 0) & i0 <= index & index < i1);
        "Usage":
            \add(({\subst uSub; index}t) <= bsum{uSub;}(i0, i1, t) ==>)
    };

    \lemma
    bsum_sub_same_index {
        \find(bsum{uSub1;}(i0, i1, t1) - bsum{uSub2;}(i0, i1, t2))
        \sameUpdateLevel
        \varcond(
            \notFreeIn(uSub1, i0),
            \notFreeIn(uSub2, i0),
            \notFreeIn(uSub1, t2),
            \notFreeIn(uSub2, t1),
            \notFreeIn(uSub1, i1),
            \notFreeIn(uSub2, i1))
        \add(bsum{uSub1;}(i0, i1, t1 - ({\subst uSub2; uSub1}t2)) = bsum{uSub1;}(i0, i1, t1) - bsum{uSub2;}(i0, i1, t2) ==>)
    };

    \lemma
    bsum_less_same_index {
        \find( ==> bsum{uSub1;}(i0, i1, t1) < bsum{uSub2;}(i0, i1, t2))
        \sameUpdateLevel
        \varcond(
            \notFreeIn(uSub1, i0),
            \notFreeIn(uSub2, i0),
            \notFreeIn(uSub1, t2),
            \notFreeIn(uSub2, t1),
            \notFreeIn(uSub1, i1),
            \notFreeIn(uSub2, i1))
        \add( ==> \forall uSub1; ((uSub1 >= i0 & uSub1 < i1) -> t1 <= ({\subst uSub2; uSub1}t2)) & \exists uSub1; ((uSub1 >= i0 & uSub1 < i1) & t1 < ({\subst uSub2; uSub1}t2)))
    };

    // this case occurs when translating \num_of
    bsum_positive1 {
        \find(bsum{uSub;}(i0, i1, \if(b) \then(1) \else(0)))
        \sameUpdateLevel
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i1))
        \add(bsum{uSub;}(i0, i1, \if(b) \then(1) \else(0)) >= 0 ==>)
    };

    // this case occurs when translating \num_of
    bsum_positive2 {
        \find(bsum{uSub;}(i0, i1, \if(b) \then(0) \else(1)))
        \sameUpdateLevel
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i1))
        \add(bsum{uSub;}(i0, i1, \if(b) \then(0) \else(1)) >= 0 ==>)
    };

    equal_bsum1 {
        \find( ==> bsum{uSub1;}(i0, i1, t1) = bsum{uSub2;}(i0, i1, t2))
        \varcond(
            \notFreeIn(uSub2, t1),
            \notFreeIn(uSub1, t2),
            \notFreeIn(uSub1, i0),
            \notFreeIn(uSub1, i1),
            \notFreeIn(uSub2, i0),
            \notFreeIn(uSub2, i1))
        \add( ==> \forall uSub1; ((uSub1 >= i0 & uSub1 < i1) -> t1 = ({\subst uSub2; uSub1}t2)))
        \heuristics(comprehensions)
        \displayname "equal_bsum_same_index"
    };

    equal_bsum2 {
        \assumes(bsum{uSub1;}(i0, i1, t1) = i ==>)
        \find( ==> bsum{uSub2;}(i0, i1, t2) = i)
        \varcond(
            \notFreeIn(uSub2, t1),
            \notFreeIn(uSub1, t2),
            \notFreeIn(uSub1, i0),
            \notFreeIn(uSub1, i1),
            \notFreeIn(uSub2, i0),
            \notFreeIn(uSub2, i1))
        \add( ==> \forall uSub1; ((uSub1 >= i0 & uSub1 < i1) -> t1 = ({\subst uSub2; uSub1}t2)))
        \heuristics(comprehensions)
        \displayname "equal_bsum_same_index"
    };

    equal_bsum3 {
        \assumes(bsum{uSub1;}(i0, i1, t1) = i, bsum{uSub2;}(i0, i1, t2) = j ==>)
        \find( ==> j = i)
        \varcond(
            \notFreeIn(uSub2, t1),
            \notFreeIn(uSub1, t2),
            \notFreeIn(uSub1, i0),
            \notFreeIn(uSub1, i1),
            \notFreeIn(uSub2, i0),
            \notFreeIn(uSub2, i1))
        \add( ==> \forall uSub1; ((uSub1 >= i0 & uSub1 < i1) -> t1 = ({\subst uSub2; uSub1}t2)))
        \heuristics(comprehensions)
        \displayname "equal_bsum_same_index"
    };

    \lemma
    bsum_equal_except_one_index {
        \schemaVar \term int index;
        \find( ==> bsum{uSub1;}(i0, i1, t1) = bsum{uSub2;}(i0, i1, t2) + t)
        \sameUpdateLevel
        \varcond(
            \notFreeIn(uSub1, i0),
            \notFreeIn(uSub2, i0),
            \notFreeIn(uSub1, t2),
            \notFreeIn(uSub2, t1),
            \notFreeIn(uSub1, t),
            \notFreeIn(uSub2, t),
            \notFreeIn(uSub1, index),
            \notFreeIn(uSub2, index),
            \notFreeIn(uSub1, i1),
            \notFreeIn(uSub2, i1))
        "Precondition":
            \add( ==>
                i0 <= index &
                index < i1 &
                \forall uSub1; ((uSub1 >= i0 & uSub1 < i1 & uSub1 != index) -> t1 = ({\subst uSub2; uSub1}t2))
            );
        "Usage":
            \add( ==>
                t = (({\subst uSub1; index}t1) - ({\subst uSub2; index}t2))
            )
    };

    // proven in KeY (DB 25/10/2013)
    equal_bsum5 {
        \find( ==> bsum{uSub1;}(i0, i1, t1) = bsum{uSub2;}(i2, i3, t2))
        \varcond(
            \notFreeIn(uSub2, t1),
            \notFreeIn(uSub1, t2),
            \notFreeIn(uSub1, i0),
            \notFreeIn(uSub2, i0),
            \notFreeIn(uSub1, i1),
            \notFreeIn(uSub2, i1),
            \notFreeIn(uSub1, i2),
            \notFreeIn(uSub2, i2),
            \notFreeIn(uSub1, i3),
            \notFreeIn(uSub2, i3))
        "Equal length":
            \add( ==> i1 - i0 = i3 - i2);
        "Equal elements":
            \add( ==> \forall uSub1; ((uSub1 >= i0 & uSub1 < i1) -> t1 = ({\subst uSub2; uSub1 + i2 - i0}t2)))
        \heuristics(comprehensions_high_costs)
        \displayname "equal_bsum"
    };

    \lemma
    bsum_num_of_is_max {
        \find(bsum{uSub;}(i0, i2, \if(phi) \then(1) \else(0)) = i2 - i0 ==>)
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2))
        \add(\forall uSub; ((uSub >= i0 & uSub < i2) -> phi) ==>)
        \heuristics(simplify_enlarging)
    };

    \lemma
    bsum_num_of_is_max2 {
        \assumes(i2 > i0 ==>)
        \find(\forall uSub; ((uSub >= i0 & uSub < i2) -> phi) ==>)
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2))
        \add(bsum{uSub;}(i0, i2, \if(phi) \then(1) \else(0)) = i2 - i0 ==>)
        \heuristics(simplify_enlarging)
    };

    \lemma
    bsum_num_of_is_max3 {
        \find(bsum{uSub;}(i0, i2, \if(phi) \then(0) \else(1)) = i2 - i0 ==>)
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2))
        \add(\forall uSub; ((uSub >= i0 & uSub < i2) -> !phi) ==>)
        \heuristics(simplify_enlarging)
    };

    \lemma
    bsum_num_of_is_max4 {
        \assumes(i2 > i0 ==>)
        \find(\forall uSub; ((uSub >= i0 & uSub < i2) -> !phi) ==>)
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2))
        \add(bsum{uSub;}(i0, i2, \if(phi) \then(0) \else(1)) = i2 - i0 ==>)
        \heuristics(simplify_enlarging)
    };

    \lemma
    bsum_num_of_lt_max {
        \assumes(i2 > i0 & i0 >= 0 ==>)
        \find(bsum{uSub;}(i0, i2, \if(phi) \then(1) \else(0)) < i2 - i0 ==>)
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2))
        \add(\exists uSub; ((uSub >= i0 & uSub < i2) & !phi) ==>)
        \heuristics(simplify_enlarging)
    };

    \lemma
    bsum_num_of_lt_max2 {
        \assumes(i2 > i0 & i0 >= 0 ==>)
        \find(\exists uSub; ((uSub >= i0 & uSub < i2) & !phi) ==>)
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2))
        \add(bsum{uSub;}(i0, i2, \if(phi) \then(1) \else(0)) < i2 - i0 ==>)
        \heuristics(simplify_enlarging)
    };

    \lemma
    bsum_num_of_lt_max3 {
        \assumes(i2 > i0 & i0 >= 0 ==>)
        \find(bsum{uSub;}(i0, i2, \if(phi) \then(0) \else(1)) < i2 - i0 ==>)
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2))
        \add(\exists uSub; ((uSub >= i0 & uSub < i2) & phi) ==>)
        \heuristics(simplify_enlarging)
    };

    \lemma
    bsum_num_of_lt_max4 {
        \assumes(i2 > i0 & i0 >= 0 ==>)
        \find(\exists uSub; ((uSub >= i0 & uSub < i2) & phi) ==>)
        \varcond(\notFreeIn(uSub, i0),
            \notFreeIn(uSub, i2))
        \add(bsum{uSub;}(i0, i2, \if(phi) \then(0) \else(1)) < i2 - i0 ==>)
        \heuristics(simplify_enlarging)
    };

    \lemma
    bsum_num_of_gt0 {
        \find(bsum{uSub;}(i0, i2, \if(phi) \then(1) \else(0)))
        \varcond(\notFreeIn(uSub, i0), \notFreeIn(uSub, i2))
        \add(bsum{uSub;}(i0, i2, \if(phi) \then(1) \else(0)) > 0 ->
            \exists uSub; (i0 <= uSub & uSub < i2 & phi) ==>)
    };

    \lemma
    bsum_num_of_gt0_alt {
        \find(bsum{uSub;}(i0, i2, \if(phi) \then(0) \else(1)))
        \varcond(\notFreeIn(uSub, i0), \notFreeIn(uSub, i2))
        \add(bsum{uSub;}(i0, i2, \if(phi) \then(0) \else(1)) > 0 ->
            \exists uSub; (i0 <= uSub & uSub < i2 & !phi) ==>)
    };

}

\rules(integerSimplificationRules:full, sequences:on) {
    equal_bsum_perm1 {
        \find( ==> bsum{uSub1;}(i0, i1, t1) = bsum{uSub2;}(i2, i3, t2))
        \varcond(
            \notFreeIn(uSub2, t1),
            \notFreeIn(uSub1, t2),
            \notFreeIn(uSub1, i0),
            \notFreeIn(uSub2, i0),
            \notFreeIn(uSub1, i1),
            \notFreeIn(uSub2, i1),
            \notFreeIn(uSub1, i2),
            \notFreeIn(uSub2, i2),
            \notFreeIn(uSub1, i3),
            \notFreeIn(uSub2, i3))
        \add( ==> seqPerm(seqDef{uSub1;}(i0, i1, t1), seqDef{uSub2;}(i2, i3, t2)))
        \displayname "equal_bsum_perm"
    };

    equal_bsum_perm2 {
        \assumes(bsum{uSub2;}(i2, i3, t2) = t ==>)
        \find( ==> bsum{uSub1;}(i0, i1, t1) = t)
        \varcond(
            \notFreeIn(uSub2, t1),
            \notFreeIn(uSub1, t2),
            \notFreeIn(uSub1, i0),
            \notFreeIn(uSub2, i0),
            \notFreeIn(uSub1, i1),
            \notFreeIn(uSub2, i1),
            \notFreeIn(uSub1, i2),
            \notFreeIn(uSub2, i2),
            \notFreeIn(uSub1, i3),
            \notFreeIn(uSub2, i3))
        \add( ==> seqPerm(seqDef{uSub1;}(i0, i1, t1), seqDef{uSub2;}(i2, i3, t2)))
        \displayname "equal_bsum_perm"
    };
}

\rules(integerSimplificationRules:full) {
    equal_bsum_zero_cut {
        \find( ==> bsum{uSub1;}(i0, i1, t1) = bsum{uSub2;}(i2, i3, t2) * t)
        \add( ==> bsum{uSub1;}(i0, i1, t1) = 0);
        \add(bsum{uSub1;}(i0, i1, t1) = 0 ==>)
    };

    pullOutbsum1 {
        \find(bsum{uSub1;}(i0, i1, t1) >= t ==>)
        \varcond(\newDependingOn(sk, t1),
            \newDependingOn(sk, i0),
            \newDependingOn(sk, i1))
        \replacewith(sk >= t ==>)
        \add(bsum{uSub1;}(i0, i1, t1) = sk ==>)
    };

    pullOutbsum2 {
        \find(bsum{uSub1;}(i0, i1, t1) <= t ==>)
        \varcond(\newDependingOn(sk, t1),
            \newDependingOn(sk, i0),
            \newDependingOn(sk, i1))
        \replacewith(sk <= t ==>)
        \add(bsum{uSub1;}(i0, i1, t1) = sk ==>)
    };

    bsum_invert_index {
        \find(bsum{uSub;}(i0, i1, t))
        \varcond(\notFreeIn(uSub, i0, i1),
            \notFreeIn(uSub1, i0, i1, t))
        \replacewith(bsum{uSub1;}(-i1, -i0, {\subst uSub; -uSub1}t))
    };

    bsum_invert_index_concrete {
        \find(bsum{uSub;}(i0 * -1, i1 * -1, t))
        \varcond(\notFreeIn(uSub, i0, i1),
            \notFreeIn(uSub1, i0, i1, t))
        \replacewith(bsum{uSub1;}(i1, i0, {\subst uSub; -uSub1}t))
        \heuristics(simplify)
    };

    // not proven yet
    bsum_add {
        \find(bsum{uSub1;}(i0, i1, t1) + bsum{uSub2;}(i2, i3, t2))
        \varcond(\notFreeIn(uSub1, i0, i1, i2, i3, t2),
            \notFreeIn(uSub2, i0, i1, i2, i3, t1))
        \replacewith(bsum{uSub1;}(
                \if(i0 < i2) \then(i0) \else(i2),
                \if(i1 > i3) \then(i1) \else(i3),
                {\subst uSub2; uSub1}(
                    \if(i0 <= uSub1 & uSub1 < i1) \then(t1) \else(0) +
                    \if(i2 <= uSub1 & uSub1 < i3) \then(t2) \else(0))
            )
        )
    };

    \lemma // conditionally (see above) -- DB 2012/12/11
    bsum_add_concrete {
        \find(bsum{uSub1;}(i0, i1, t1) + bsum{uSub2;}(i1, i3, t2))
        \varcond(\notFreeIn(uSub1, i0, i1, i3, t2),
            \notFreeIn(uSub2, i0, i1, i3, t1))
        \add( ==> i0 <= i1 & i1 <= i3);
        \replacewith(bsum{uSub1;}(i0, i3,
                {\subst uSub2; uSub1}\if(uSub1 < i1) \then(t1) \else(t2))
        )
    };

    // --------------------------------------------------------------------
    // rules for general sums
    // --------------------------------------------------------------------

    sum_empty {
        \schemaVar \variables alpha x;
        \find(sum{x;}(FALSE, t))
        \replacewith(0)
        \heuristics(concrete)
    };

    sum_zero {
        \schemaVar \variables alpha x;
        \schemaVar \term boolean range;
        \find(sum{x;}(range, 0))
        \replacewith(0)
        \heuristics(concrete)
    };

}
