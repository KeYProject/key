/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

\schemaVariables {
    \term int i, j;
    \term Seq c, l;
}

\rules(wdChecks:on) {
    wd_String_Translate {

        \find(
            wd(clTranslateInt(i))
        )
        \replacewith(
            wd(i)
        )
        \heuristics(simplify)
    };

    wd_String_RmvZeros {

        \find(
            wd(clRemoveZeros(c))
        )
        \replacewith(
            wd(c)
        )
        \heuristics(simplify)
    };

    wd_String_Hash {

        \find(
            wd(clHashCode(c))
        )
        \replacewith(
            wd(c)
        )
        \heuristics(simplify)
    };

    wd_String_IndexOfChar {

        \find(
            wd(clIndexOfChar(c, i, j))
        )
        \replacewith(
            wd(i) & wd(j) & wd(c) & leq(0, i) & leq(i, j) & lt(j, seqLen(c))
        )
        \heuristics(simplify)
    };

    wd_String_IndexOfStr {

        \find(
            wd(clIndexOfCl(l, i, c))
        )
        \replacewith(
            wd(c) & wd(i) & wd(l) & leq(0, i) & lt(add(i, seqLen(c)), seqLen(l))
        )
        \heuristics(simplify)
    };

    wd_String_LastIndexOfChar {

        \find(
            wd(clLastIndexOfChar(c, i, j))
        )
        \replacewith(
            wd(i) & wd(j) & wd(c) & leq(0, i) & leq(i, j) & lt(j, seqLen(c))
        )
        \heuristics(simplify)
    };

    wd_String_LastIndexOfStr {

        \find(
            wd(clLastIndexOfCl(l, i, c))
        )
        \replacewith(
            wd(c) & wd(i) & wd(l) & leq(0, i) & lt(add(i, seqLen(c)), seqLen(l))
        )
        \heuristics(simplify)
    };

    wd_String_Replace {

        \find(
            wd(clReplace(c, i, j))
        )
        \replacewith(
            wd(i) & wd(j) & wd(c) & leq(0, i) & leq(0, j) & lt(i, seqLen(c)) & lt(j, seqLen(c))
        )
        \heuristics(simplify)
    };

    wd_String_Pred_StartsWith {

        \find(
            WD(clStartsWith(l, c))
        )
        \replacewith(
            wd(c) & wd(l)
        )
        \heuristics(simplify)
    };

    wd_String_Pred_EndsWith {

        \find(
            WD(clEndsWith(l, c))
        )
        \replacewith(
            wd(c) & wd(l)
        )
        \heuristics(simplify)
    };

    wd_String_Pred_Contains {

        \find(
            WD(clContains(l, c))
        )
        \replacewith(
            wd(c) & wd(l)
        )
        \heuristics(simplify)
    };
}
