/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

/**
    Rules for integer constants, inRangeInt and moduloInt

    READ FIRST BEFORE EDITING:
    In case of changes PLEASE preserve the files intended meaning. If
    you want to test some rules before implementing them completely,
    please create a new file and include it into the standardRules.key

    Files:
        // rules treating Java programs

        integerAssignment2UpdateRules.key: all integer related assignment
                                           rules for normal assignments

        integerCommonRules.key: integer semantics independent rules which
            transform programs

        // rules treating integer semantics insensitive functions

        integerSimplificationRules.key: rules for arithmetic functions
            that do not depend on the chose integer semantics

        // rules treating integer semantics sensitive functions

        intRules.key: Rules for integer constants, inRangeInt and moduloInt

        intRulesCheckedSemantics.key: Rules for checked overflows

        intRulesUncheckedSemantics.key: Rules for unchecked overflows

        intRulesJavaSemantics.key: Rules for java integer semantics and all functions which simulate Java overflow.
*/

\schemaVariables {
    \term int left, right, i, i0, i1;
    \term numbers iz, jz;
}

// --------------------------------------------------------------------
// -- Rules to replace the min/max constants by concrete values
// --------------------------------------------------------------------
\rules {
    // reviewed 04/16/2004, St.S.
    replace_byte_MAX {
        \find(byte_MAX)
        \replacewith(127)
        \heuristics(defOps_expandRanges)
    };

    // reviewed 04/16/2004, St.S.
    replace_byte_MIN {
        \find(byte_MIN)
        \replacewith(-128)
        \heuristics(defOps_expandRanges)
    };

    // reviewed 04/16/2004, St.S.
    replace_char_MAX {
        \find(char_MAX)
        \replacewith(65535)
        \heuristics(defOps_expandRanges)
    };

    // reviewed 04/16/2004, St.S.
    replace_char_MIN {
        \find(char_MIN)
        \replacewith(0)
        \heuristics(defOps_expandRanges)
    };

    // reviewed 04/16/2004, St.S.
    replace_short_MAX {
        \find(short_MAX)
        \replacewith(32767)
        \heuristics(defOps_expandRanges)
    };

    // reviewed 04/16/2004, St.S.
    replace_short_MIN {
        \find(short_MIN)
        \replacewith(-32768)
        \heuristics(defOps_expandRanges)
    };

    // reviewed 04/16/2004, St.S.
    replace_int_MAX {
        \find(int_MAX)
        \replacewith(2147483647)
        \heuristics(defOps_expandRanges)
    };

    // reviewed 04/16/2004, St.S.
    replace_int_MIN {
        \find(int_MIN)
        \replacewith(-2147483648)
        \heuristics(defOps_expandRanges)
    };

    // reviewed 04/16/2004, St.S.
    replace_long_MAX {
        \find(long_MAX)
        \replacewith(9223372036854775807)
        \heuristics(defOps_expandRanges)
    };

    // reviewed 04/16/2004, St.S.
    replace_long_MIN {
        \find(long_MIN)
        \replacewith(-9223372036854775808)
        \heuristics(defOps_expandRanges)
    };

    // --------------------------------------------------------------------
    // -- Rules to replace the min/max constants by concrete values
    // --------------------------------------------------------------------

    // reviewed 04/19/2004, St.S.
    replace_byte_RANGE {
        \find(byte_RANGE)
        \replacewith(256)
        \heuristics(defOps_expandRanges)
    };

    // reviewed 04/19/2004, St.S.
    replace_byte_HALFRANGE {
        \find(byte_HALFRANGE)
        \replacewith(128)
        \heuristics(defOps_expandRanges)
    };

    // reviewed 04/19/2004, St.S.
    replace_short_RANGE {
        \find(short_RANGE)
        \replacewith(65536)
        \heuristics(defOps_expandRanges)
    };

    // reviewed 04/19/2004, St.S.
    replace_short_HALFRANGE {
        \find(short_HALFRANGE)
        \replacewith(32768)
        \heuristics(defOps_expandRanges)
    };

    // reviewed 04/19/2004, St.S.
    replace_char_RANGE {
        \find(char_RANGE)
        \replacewith(65536)
        \heuristics(defOps_expandRanges)
    };

    // reviewed 04/19/2004, St.S.
    replace_int_RANGE {
        \find(int_RANGE)
        \replacewith(4294967296)
        \heuristics(defOps_expandRanges)
    };

    // reviewed 04/19/2004, St.S.
    replace_int_HALFRANGE {
        \find(int_HALFRANGE)
        \replacewith(2147483648)
        \heuristics(defOps_expandRanges)
    };

    // reviewed 04/19/2004, St.S.
    replace_long_RANGE {
        \find(long_RANGE)
        \replacewith(18446744073709551616)
        \heuristics(defOps_expandRanges)
    };
    // reviewed 04/19/2004, St.S.
    replace_long_HALFRANGE {
        \find(long_HALFRANGE)
        \replacewith(9223372036854775808)
        \heuristics(defOps_expandRanges)
    };
}

//
// Expanding inRangeInt
//
\rules {
    expandInRangeByte {
        \find(inRangeByte(i))
        \replacewith(leq(i, byte_MAX) & leq(byte_MIN, i))
        \heuristics(defOps_expandRanges, delayedExpansion)
    };

    expandInRangeChar {
        \find(inRangeChar(i))
        \replacewith(leq(i, char_MAX) & leq(char_MIN, i))
        \heuristics(defOps_expandRanges, delayedExpansion)
    };

    expandInRangeShort {
        \find(inRangeShort(i))
        \replacewith(leq(i, short_MAX) & leq(short_MIN, i))
        \heuristics(defOps_expandRanges, delayedExpansion)
    };

    expandInRangeInt {
        \find(inRangeInt(i))
        \replacewith(leq(i, int_MAX) & leq(int_MIN, i))
        \heuristics(defOps_expandRanges, delayedExpansion)
    };

    expandInRangeLong {
        \find(inRangeLong(i))
        \replacewith(leq(i, long_MAX) & leq(long_MIN, i))
        \heuristics(defOps_expandRanges, delayedExpansion)
    };
}

\rules {
    // ------------------------------------------------------------------------
    // rules for expansion of moduloInt
    // ------------------------------------------------------------------------

    // reviewed 04/20/2004, St.S.
    expand_moduloByte {
        \find(moduloByte(i))
        \replacewith(add(byte_MIN, mod(add(byte_HALFRANGE, i), byte_RANGE)))
        \heuristics(defOps_expandJNumericOp, delayedExpansion)
    };

    // reviewed 04/20/2004, St.S.
    expand_moduloShort {
        \find(moduloShort(i))
        \replacewith(add(short_MIN, mod(add(short_HALFRANGE, i), short_RANGE)))
        \heuristics(defOps_expandJNumericOp, delayedExpansion)
    };

    // reviewed 04/20/2004, St.S.
    expand_moduloInteger {
        \find(moduloInt(i))
        \replacewith(add(int_MIN, mod(add(int_HALFRANGE, i), int_RANGE)))
        \heuristics(defOps_expandJNumericOp, delayedExpansion)
    };

    // reviewed 04/20/2004, St.S.
    expand_moduloLong {
        \find(moduloLong(i))
        \replacewith(add(long_MIN, mod(add(long_HALFRANGE, i), long_RANGE)))
        \heuristics(defOps_expandJNumericOp, delayedExpansion)
    };

    expand_moduloChar {
        \find(moduloChar(i))
        \replacewith(mod(i, char_MAX + 1))
        \heuristics(defOps_expandJNumericOp, delayedExpansion)
    };

    //
    // Lemmas for easy elimination of moduloInt
    //

    moduloIntFixpoint {
        \assumes(inRangeInt(i) ==>)
        \find(moduloInt(i))
        \sameUpdateLevel
        \replacewith(i)

        \heuristics(simplify)
    };

    moduloLongFixpoint {
        \assumes(inRangeLong(i) ==>)
        \find(moduloLong(i))
        \sameUpdateLevel
        \replacewith(i)

        \heuristics(simplify)
    };

    moduloShortFixpoint {
        \assumes(inRangeShort(i) ==>)
        \find(moduloShort(i))
        \sameUpdateLevel
        \replacewith(i)

        \heuristics(simplify)
    };

    moduloByteFixpoint {
        \assumes(inRangeByte(i) ==>)
        \find(moduloByte(i))
        \sameUpdateLevel
        \replacewith(i)

        \heuristics(simplify)
    };

    moduloCharFixpoint {
        \assumes(inRangeChar(i) ==>)
        \find(moduloChar(i))
        \sameUpdateLevel
        \replacewith(i)

        \heuristics(simplify)
    };

    moduloIntFixpointInline {
        \schemaVar \skolemTerm int moduloT;

        \find(moduloInt(i))
        \sameUpdateLevel
        \varcond(\newDependingOn(moduloT, i))
        \replacewith(moduloT)
        \add(\if(inRangeInt(i)) \then(i) \else(moduloT) = moduloT, moduloInt(i) = moduloT ==>)
    };

    moduloLongFixpointInline {
        \schemaVar \skolemTerm int moduloT;

        \find(moduloLong(i))
        \sameUpdateLevel
        \varcond(\newDependingOn(moduloT, i))
        \replacewith(moduloT)
        \add(\if(inRangeLong(i)) \then(i) \else(moduloT) = moduloT, moduloLong(i) = moduloT ==>)
    };

    moduloShortFixpointInline {
        \schemaVar \skolemTerm int moduloT;

        \find(moduloShort(i))
        \sameUpdateLevel
        \varcond(\newDependingOn(moduloT, i))
        \replacewith(moduloT)
        \add(\if(inRangeShort(i)) \then(i) \else(moduloT) = moduloT, moduloShort(i) = moduloT ==>)
    };

    moduloByteFixpointInline {
        \schemaVar \skolemTerm int moduloT;

        \find(moduloByte(i))
        \sameUpdateLevel
        \varcond(\newDependingOn(moduloT, i))
        \replacewith(moduloT)
        \add(\if(inRangeByte(i)) \then(i) \else(moduloT) = moduloT, moduloByte(i) = moduloT ==>)
    };

    moduloCharFixpointInline {
        \schemaVar \skolemTerm int moduloT;

        \find(moduloChar(i))
        \sameUpdateLevel
        \varcond(\newDependingOn(moduloT, i))
        \replacewith(moduloT)
        \add(\if(inRangeChar(i)) \then(i) \else(moduloT) = moduloT, moduloChar(i) = moduloT ==>)
    };

    //
    // Useful rules for elimination of inRangeInt moduloInt chains
    //

    moduloIntIsInRangeInt {
        \find(inRangeInt(moduloInt(i)))
        \replacewith(true)
        \heuristics(concrete)
    };

    moduloLongIsInRangeLong {
        \find(inRangeLong(moduloLong(i)))
        \replacewith(true)
        \heuristics(concrete)
    };

    moduloShortIsInRangeShort {
        \find(inRangeShort(moduloShort(i)))
        \replacewith(true)
        \heuristics(concrete)
    };

    moduloByteIsInRangeByte {
        \find(inRangeByte(moduloByte(i)))
        \replacewith(true)
        \heuristics(concrete)
    };

    moduloCharIsInRangeChar {
        \find(inRangeChar(moduloChar(i)))
        \replacewith(true)
        \heuristics(concrete)
    };
}
