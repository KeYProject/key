
\predicates {
    traceIf(int);
    traceAfter(int, java.lang.String);
    traceBefore(int, java.lang.String);
}

\schemaVariables {
    \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;
    \program SimpleExpression #se;
    \program Statement #s0, #s1, #s2;
    \formula post;
    \term int idx;
    \term java.lang.String str;
    \term Seq #seq;
}

\programVariables {
    Seq traceSeq;
}

\rules(programRules:Java) {

//    traceSeq {
//      \add( traceSeq = strContent(tracer.Trace.bits) ==> )
//      \heuristics(simplify)
//    };

//    traceUnpackO {
//      \find( traceSeq[idx] = '0' ==> )
//      \add( ==> traceIf(idx) )
//      \heuristics(simplify)
//    };

//    traceUnpackI {
//      \find( traceSeq[idx] = '1' ==> )
//      \add( traceIf(idx) ==> )
//      \heuristics(simplify)
//    };

    traceIndexInit {
       \add( tracer.Trace.index = 0 ==> )
       \heuristics(simplify)
    };

    traceFollowElse {
      \find(
          traceAfter(idx, strPool(seqConcat(seqSingleton('0'), #seq)))
      )
      \replacewith(
          !traceIf(idx) & traceAfter(idx + 1, strPool(#seq))
      )
      \heuristics(simplify)
    };

    traceFollowElseEnd {
      \find(
         traceAfter(idx, strPool(seqSingleton('0')))
      )
      \replacewith(
         !traceIf(idx)
      )
      \heuristics(simplify)
    };

    traceFollowIf {
      \find(
          traceAfter(idx, strPool(seqConcat(seqSingleton('1'), #seq)))
      )
      \replacewith(
          traceIf(idx) & traceAfter(idx + 1, strPool(#seq))
      )
      \heuristics(simplify)
    };

    traceFollowIfEnd {
      \find(
         traceAfter(idx, strPool(seqSingleton('1')))
      )
      \replacewith(
         traceIf(idx)
      )
      \heuristics(simplify)
    };

    traceBefore {
        \find(
            traceBefore(idx, strPool(#seq))
        )
        \replacewith(
            traceAfter(idx - seqLen(#seq), strPool(#seq))
        )
        \heuristics(simplify)
    };

    traceIf {
        \find(
            ==> \modality{#allmodal}{.. 
                if(#se) #s0
            ...}\endmodality (post)
        )
        \sameUpdateLevel
        \replacewith(
            ==>
            \if(traceIf(tracer.Trace.index))
            \then(
                {tracer.Trace.index := tracer.Trace.index+1}\modality{#allmodal}{..
                    #s0
                ...}\endmodality (post)
            )
            \else(
                {tracer.Trace.index := tracer.Trace.index+1}\modality{#allmodal}{..
                ...}\endmodality (post)
            )
        )
        \add(
            (#se = TRUE) <-> traceIf(tracer.Trace.index)
            ==>
        )
        \heuristics(retrace)
    };

    traceIfElse {
        \find(
            ==> \modality{#allmodal}{.. 
                if(#se) #s0 else #s1
            ...}\endmodality (post)
        )
        \sameUpdateLevel
        \replacewith(
            ==>
            \if(traceIf(tracer.Trace.index))
            \then(
                {tracer.Trace.index := tracer.Trace.index+1}\modality{#allmodal}{..
                    #s0
                ...}\endmodality (post)
            )
            \else(
                {tracer.Trace.index := tracer.Trace.index+1}\modality{#allmodal}{..
                    #s1
                ...}\endmodality (post)
            )
        )
        \add(
            (#se = TRUE) <-> traceIf(tracer.Trace.index)
            ==>
        )
        \heuristics(retrace)
    };
}
