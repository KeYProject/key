/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

\schemaVariables {
    \term float left, right;
}

\rules {

    // primary
    // If the argument is NaN or an infinity, then the result is NaN.
    sinIsNaN {
        \schemaVar \term double arg;
        \find(sinDouble(arg))
        \add(doubleIsNaN(arg) | doubleIsInfinite(arg) -> doubleIsNaN(sinDouble(arg)) ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the argument is zero, then the result is a zero with the same sign as the argument.
    sineIsZero {
        \schemaVar \term double arg;
        \find(sinDouble(arg))
        \add(arg = 0.0d -> sinDouble(arg) = 0.0d ==>)
        \heuristics(userTaclets1)
    };

    sineRange {
        \schemaVar \term double arg;
        \find(sinDouble(arg))
        \add(sinDouble(arg) >= -1.0d & sinDouble(arg) <= 1.0d | doubleIsNaN(sinDouble(arg)) ==>)
        \heuristics(userTaclets1)
    };

    sineIsNaNAlt {
        \schemaVar \term double arg;
        \find(doubleIsNaN(sinDouble(arg)))
        \replacewith(doubleIsNaN(arg) | doubleIsInfinite(arg))
        \heuristics(simplify)
    };

    sineRangeAlt {
        \schemaVar \term double arg;
        \find( ==> doubleIsNaN(sinDouble(arg)))
        \add(sinDouble(arg) >= -1.0d & sinDouble(arg) <= 1.0d ==>)
        \heuristics(userTaclets1)
    };

    // lemma
    sinIsNotNaN {
        \schemaVar \term double arg;
        \find(sinDouble(arg))
        \add(!doubleIsNaN(arg) & !doubleIsInfinite(arg) -> !doubleIsNaN(sinDouble(arg)) ==>)
        \heuristics(userTaclets1)
    };

    // lemma
    sinRange2 {
        \schemaVar \term double arg;
        \find(sinDouble(arg))
        \add(!doubleIsNaN(arg) & !doubleIsInfinite(arg) -> sinDouble(arg) >= -1.0d & sinDouble(arg) <= 1.0d ==>)
        \heuristics(userTaclets1)
    };

    // lemma
    sinRange3 {
        \schemaVar \term double arg;
        \find(sinDouble(arg))
        \add(!doubleIsNaN(arg) & !doubleIsInfinite(arg) -> mulDouble(sinDouble(arg), sinDouble(arg)) >= 0.0d &
            mulDouble(sinDouble(arg), sinDouble(arg)) <= 1.0d ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the argument is NaN or an infinity, then the result is NaN.
    cosIsNaN {
        \schemaVar \term double arg;
        \find(cosDouble(arg))
        \add(doubleIsNaN(arg) | doubleIsInfinite(arg) -> doubleIsNaN(cosDouble(arg)) ==>)
        \heuristics(userTaclets1)
    };

    cosRange {
        \schemaVar \term double arg;
        \find(cosDouble(arg))
        \add(cosDouble(arg) >= 0.0d & cosDouble(arg) <= 1.0d | doubleIsNaN(cosDouble(arg)) ==>)
        \heuristics(userTaclets1)
    };

    cosIsNaNAlt {
        \schemaVar \term double arg;
        \find(doubleIsNaN(cosDouble(arg)))
        \replacewith(doubleIsNaN(arg) | doubleIsInfinite(arg))
        \heuristics(simplify)
    };

    cosRangeAlt {
        \schemaVar \term double arg;
        \find( ==> doubleIsNaN(cosDouble(arg)))
        \add(cosDouble(arg) >= 0.0d & cosDouble(arg) <= 1.0d ==>)
        \heuristics(userTaclets1)
    };

    // lemma
    cosIsNotNaN {
        \schemaVar \term double arg;
        \find(cosDouble(arg))
        \add(!doubleIsNaN(arg) & !doubleIsInfinite(arg) -> !doubleIsNaN(cosDouble(arg)) ==>)
        \heuristics(userTaclets1)
    };

    // lemma
    cosRange2 {
        \schemaVar \term double arg;
        \find(cosDouble(arg))
        \add(!doubleIsNaN(arg) & !doubleIsInfinite(arg) -> cosDouble(arg) >= 0.0d & cosDouble(arg) <= 1.0d ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the argument is NaN or its absolute value is greater than 1, then the result is NaN.
    asinIsNaN {
        \schemaVar \term double arg;
        \find(asinDouble(arg))
        \add(doubleIsNaN(arg) | arg < -1.0d | arg > 1.0d -> doubleIsNaN(asinDouble(arg)) ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the argument is zero, then the result is a zero with the same sign as the argument.
    asineIsZero {
        \schemaVar \term double arg;
        \find(asinDouble(arg))
        \add(arg = 0.0d -> asinDouble(arg) = 0.0d ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the argument is between -1 and 1 then the returned angle is in the range -pi/2 through pi/2
    asineRange {
        \schemaVar \term double arg;
        \find(asinDouble(arg))
        \add(arg >= -1.0d & arg <= 1.0d -> asinDouble(arg) >= -1.5707963267948966d & asinDouble(arg) <= 1.5707963267948966d ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the argument is NaN or its absolute value is greater than 1, then the result is NaN
    acosIsNaN {
        \schemaVar \term double arg;
        \find(acosDouble(arg))
        \add(doubleIsNaN(arg) | arg < -1.0d | arg > 1.0d -> doubleIsNaN(acosDouble(arg)) ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the argument is between -1 and 1 then the returned angle is in the range 0.0 through pi
    acosRange {
        \schemaVar \term double arg;
        \find(acosDouble(arg))
        \add(arg >= -1.0d & arg <= 1.0d -> acosDouble(arg) >= 0.0d & acosDouble(arg) <= 3.14159265358979323846d ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the argument is NaN or an infinity, then the result is NaN
    tanIsNaN {
        \schemaVar \term double arg;
        \find(tanDouble(arg))
        \add(doubleIsNaN(arg) | doubleIsInfinite(arg) -> doubleIsNaN(tanDouble(arg)) ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the argument is zero, then the result is a zero with the same sign as the argument.
    tanIsZero {
        \schemaVar \term double arg;
        \find(tanDouble(arg))
        \add(arg = 0.0d -> tanDouble(arg) = 0.0d ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If either argument is NaN, then the result is NaN
    atan2IsNaN {
        \schemaVar \term double arg1, arg2;
        \find(atan2Double(arg1, arg2))
        \add(doubleIsNaN(arg1) | doubleIsNaN(arg2) -> doubleIsNaN(atan2Double(arg1, arg2)) ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If neither argument is NaN, then the returned angle is in the range of -pi through pi
    atan2Range {
        \schemaVar \term double arg1, arg2;
        \find(atan2Double(arg1, arg2))
        \add(!doubleIsNaN(arg1) & !doubleIsNaN(arg2) -> atan2Double(arg1, arg2) >= -3.14159265358979323846d & atan2Double(arg1, arg2) <= 3.14159265358979323846d ==>)
    };

    // primary
    // If the argument is NaN or less than zero, then the result is NaN
    sqrtIsNaN {
        \schemaVar \term double arg;
        \find(sqrtDouble(arg))
        \add(doubleIsNaN(arg) | arg < 0.0d -> doubleIsNaN(sqrtDouble(arg)) ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the argument is positive infinity, then the result is positive infinity.
    sqrtIsInfinite {
        \schemaVar \term double arg;
        \find(sqrtDouble(arg))
        \add(doubleIsInfinite(arg) & arg > 0.0d -> doubleIsInfinite(sqrtDouble(arg)) & sqrtDouble(arg) > 0.0d ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the argument is positive zero or negative zero, then the result is the same as the argument.
    sqrtIsZero {
        \schemaVar \term double arg;
        \find(sqrtDouble(arg))
        \add(arg = 0.0d -> sqrtDouble(arg) = 0.0d ==>)
        \heuristics(userTaclets1)
    };

    // proved by SMT solver
    // If the argument is not NaN and greater or equal to zero, then the result is not NaN
    sqrtIsNotNaN {
        \schemaVar \term double arg;
        \find(sqrtDouble(arg))
        \add(!doubleIsNaN(arg) & arg >= 0.0d -> !doubleIsNaN(sqrtDouble(arg)) ==>)
        \heuristics(userTaclets1)
    };

    sqrtIsSmaller {
        \schemaVar \term double arg;
        \find(sqrtDouble(arg))
        \add(!doubleIsInfinite(arg) & arg > 1.0d -> sqrtDouble(arg) < arg ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the second argument is positive or negative zero, then the result is 1.0.
    powIsOne {
        \schemaVar \term double arg1, arg2;
        \find(powDouble(arg1, arg2))
        \add(arg2 = 0.0d -> powDouble(arg1, arg2) = 1.0d ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the second argument is 1.0 and the first argument is not a NaN, then the result is the same as the first argument.
    powIsNotNaN {
        \schemaVar \term double arg1, arg2;
        \find(powDouble(arg1, arg2))
        \add(!doubleIsNaN(arg1) & arg2 = 1.0d -> powDouble(arg1, arg2) = arg1 ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the second argument is NaN, then the result is NaN.
    powIsNaN1 {
        \schemaVar \term double arg1, arg2;
        \find(powDouble(arg1, arg2))
        \add(doubleIsNaN(arg2) -> doubleIsNaN(powDouble(arg1, arg2)) ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the first argument is NaN and the second argument is nonzero, then the result is NaN.
    powIsNaN2 {
        \schemaVar \term double arg1, arg2;
        \find(powDouble(arg1, arg2))
        \add(doubleIsNaN(arg1) & arg2 != 0.0d -> doubleIsNaN(powDouble(arg1, arg2)) ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the absolute value of the first argument is greater than 1 and the second argument is positive infinity, or
    // the absolute value of the first argument is less than 1 and the second argument is negative infinity,
    // then the result is positive infinity.
    powIsInfinite1 {
        \schemaVar \term double arg1, arg2;
        \find(powDouble(arg1, arg2))
        \add(((arg1 >= 1.0d | arg1 <= -1.0d) & doubleIsInfinite(arg2) & arg2 > 0.0d) |
            (arg1 < 1.0d & arg1 > -1.0d & doubleIsInfinite(arg2) & arg2 < 0.0d)
            -> doubleIsInfinite(powDouble(arg1, arg2)) & powDouble(arg1, arg2) > 0.0d ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the absolute value of the first argument is greater than 1 and the second argument is negative infinity, or
    // the absolute value of the first argument is less than 1 and the second argument is positive infinity,
    // then the result is positive zero.
    powIsZero1 {
        \schemaVar \term double arg1, arg2;
        \find(powDouble(arg1, arg2))
        \add(((arg1 >= 1.0d | arg1 <= -1.0d) & doubleIsInfinite(arg2) & arg2 < 0.0d) |
            (arg1 < 1.0d & arg1 > -1.0d & doubleIsInfinite(arg2) & arg2 > 0.0d)
            -> powDouble(arg1, arg2) = 0.0d ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the absolute value of the first argument equals 1 and the second argument is infinite, then the result is NaN.
    powIsNaN3 {
        \schemaVar \term double arg1, arg2;
        \find(powDouble(arg1, arg2))
        \add((arg1 >= 1.0d | arg1 <= -1.0d) & doubleIsInfinite(arg2) -> doubleIsNaN(powDouble(arg1, arg2)) ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // the first argument is positive zero and the second argument is greater than zero, or
    // the first argument is positive infinity and the second argument is less than zero,
    // then the result is positive zero.
    powIsZero2 {
        \schemaVar \term double arg1, arg2;
        \find(powDouble(arg1, arg2))
        \add((eqDouble(arg1, 0.0d) & arg2 > 0.0d) | (doubleIsInfinite(arg1) & arg1 > 0.0d & arg2 < 0.0d)
            -> powDouble(arg1, arg2) = 0.0d ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // the first argument is positive zero and the second argument is less than zero, or
    // the first argument is positive infinity and the second argument is greater than zero,
    // then the result is positive infinity.
    powIsInfinite2 {
        \schemaVar \term double arg1, arg2;
        \find(powDouble(arg1, arg2))
        \add((eqDouble(arg1, 0.0d) & arg2 < 0.0d) | (doubleIsInfinite(arg1) & arg1 > 0.0d & arg2 > 0.0d)
            -> doubleIsInfinite(powDouble(arg1, arg2)) & powDouble(arg1, arg2) > 0.0d ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the argument is NaN, the result is NaN.
    expIsNaN {
        \schemaVar \term double arg;
        \find(expDouble(arg))
        \add(doubleIsNaN(arg) -> doubleIsNaN(expDouble(arg)) ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the argument is positive infinity, then the result is positive infinity.
    expIsInfinite {
        \schemaVar \term double arg;
        \find(expDouble(arg))
        \add(doubleIsInfinite(arg) & arg > 0.0d -> doubleIsInfinite(expDouble(arg)) & expDouble(arg) > 0.0d ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the argument is negative infinity, then the result is positive zero.
    expIsZero {
        \schemaVar \term double arg;
        \find(expDouble(arg))
        \add(doubleIsInfinite(arg) & arg < 0.0d -> expDouble(arg) = 0.0d ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the argument is NaN, the result is NaN.
    atanIsNaN {
        \schemaVar \term double arg;
        \find(atanDouble(arg))
        \add(doubleIsNaN(arg) -> doubleIsNaN(atanDouble(arg)) ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the argument is zero, then the result is a zero with the same sign as the argument.
    atanIsZero {
        \schemaVar \term double arg;
        \find(atanDouble(arg))
        \add(arg = 0.0d -> atanDouble(arg) = 0.0d ==>)
        \heuristics(userTaclets1)
    };

    // primary
    // If the argument is not NaN,  the returned angle is in the range -pi/2 through pi/2
    atanRange {
        \schemaVar \term double arg;
        \find(atanDouble(arg))
        \add(!doubleIsNaN(arg) -> atanDouble(arg) >= -1.5707963267948966d & atanDouble(arg) <= 1.5707963267948966d ==>)
        \heuristics(userTaclets1)
    };

    // rules for "niceness" syntactic sugar
    niceFloat {
        \schemaVar \term float arg;
        \find(floatIsNice(arg))
        \replacewith(!floatIsNaN(arg) & !floatIsInfinite(arg))
        \heuristics(simplify)
    };

    niceDouble {
        \schemaVar \term double arg;
        \find(doubleIsNice(arg))
        \replacewith(!doubleIsNaN(arg) & !doubleIsInfinite(arg))
        \heuristics(simplify)
    };

}
