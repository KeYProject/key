/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

\schemaVariables {
    \formula a, b, c;
    \term any s, t;
    \variables alpha i;
    \variables int j;
    \skolemTerm int jPrime;
    \termlabel l;
}

\rules(wdChecks:on, wdOperator:L) {

    wd_Logical_Op_Neg {

        \find(
            WD(!a)
        )
        \replacewith(
            WD(a)
        )
        \heuristics(simplify)
    };

    wd_Logical_Op_And {

        \find(
            WD((a & b)<<l>>)
        )
        \varcond(
            \not \hasLabel(l, SC)
        )
        \replacewith(
            WD(a) & WD(b)
        )
        \heuristics(simplify)
    };

    wd_Logical_Op_AndSC {

        \find(
            WD(((a & b)<<l>>))
        )
        \varcond(
            \hasLabel(l, SC)
        )
        \replacewith(
            WD(a) & (a -> WD(b))
        )
        \heuristics(simplify)
    };

    wd_Logical_Op_Or {

        \find(
            WD((a | b)<<l>>)
        )
        \varcond(
            \not \hasLabel(l, SC)
        )
        \replacewith(
            WD(a) & WD(b)
        )
        \heuristics(simplify)
    };

    wd_Logical_Op_OrSC {

        \find(
            WD(((a | b)<<l>>))
        )
        \varcond(
            \hasLabel(l, SC)
        )
        \replacewith(
            WD(a) & (!a -> WD(b))
        )
        \heuristics(simplify)
    };

    wd_Logical_Op_Imp {

        \find(
            WD((a -> b))
        )
        \replacewith(
            WD(a) & (a -> WD(b))
        )
        \heuristics(simplify)
    };

    wd_Logical_Op_Eqv {

        \find(
            WD((a <-> b))
        )
        \replacewith(
            WD(a) & WD(b)
        )
        \heuristics(simplify)
    };

    wd_Logical_Op_Cond_Expr {

        \find(
            wd(\if(a) \then(s) \else(t))
        )
        \replacewith(
            WD(a) & (a -> wd(s)) & (!a -> wd(t))
        )
        \heuristics(simplify)
    };

    wd_Logical_Op_Cond_Form {

        \find(
            WD(\if(a) \then(b) \else(c))
        )
        \replacewith(
            WD(a) & (a -> WD(b)) & (!a -> WD(c))
        )
        \heuristics(simplify)
    };

    wd_Logical_Op_ExCond_Expr {

        \find(
            wd(\ifExj; (a)\then(s)\else(t))
        )
        \varcond(
            \notFreeIn(j, t)
        )
        \replacewith(
            (\forall j; WD(a)) & ((\forall j; !a) -> wd(t))
            & (\forall j; (a -> wd(s)))
        )
        \heuristics(simplify)
    };

    wd_Logical_Op_ExCond_Form {

        \find(
            WD(\ifExj; (a)\then(b)\else(c))
        )
        \varcond(
            \notFreeIn(j, c)
        )
        \replacewith(
            (\forall j; WD(a)) & ((\forall j; !a) -> WD(c))
            & (\forall j; (a -> WD(b)))
        )
        \heuristics(simplify)
    };

    wd_Logical_Quant_All {

        \find(
            WD(\forall i; a)
        )
        \replacewith(
            \forall i; WD(a)
        )
        \heuristics(simplify)
    };

    wd_Logical_Quant_Exist {

        \find(
            WD(\exists i; a)
        )
        \replacewith(
            \forall i; WD(a)
        )
        \heuristics(simplify)
    };
}

\rules(wdChecks:on, wdOperator:D) {

    wd_Logical_Op_Neg {

        \find(
            WD(!a)
        )
        \replacewith(
            WD(a)
        )
        \heuristics(simplify)
    };

    wd_Logical_Op_And {

        \find(
            WD((a & b))
        )
        \replacewith(
            (WD(a) & !a) | (WD(b) & !b) | (WD(a) & WD(b))
        )
        \heuristics(simplify)
    };

    wd_Logical_Op_Or {

        \find(
            WD((a | b))
        )
        \replacewith(
            (WD(a) & a) | (WD(b) & b) | (WD(a) & WD(b))
        )
        \heuristics(simplify)
    };

    wd_Logical_Op_Imp {

        \find(
            WD((a -> b))
        )
        \replacewith(
            (WD(a) & !a) | (WD(b) & b) | (WD(a) & WD(b))
        )
        \heuristics(simplify)
    };

    wd_Logical_Op_Eqv {

        \find(
            WD((a <-> b))
        )
        \replacewith(
            WD(a) & WD(b)
        )
        \heuristics(simplify)
    };

    wd_Logical_Op_Cond_Expr {

        \find(
            wd(\if(a) \then(s) \else(t))
        )
        \replacewith(
            (WD(a) & wd(s) & a) | (WD(a) & wd(t) & !a) | (wd(s) & wd(t) & (s = t))
        )
        \heuristics(simplify)
    };

    wd_Logical_Op_Cond_Form {

        \find(
            WD(\if(a) \then(b) \else(c))
        )
        \replacewith(
            (WD(a) & WD(b) & a) | (WD(a) & WD(c) & !a) | (WD(b) & WD(c) & (b <-> c))
        )
        \heuristics(simplify)
    };

    wd_Logical_Op_ExCond_Expr {

        \find(
            wd(\ifExj; (a)\then(s)\else(t))
        )
        \varcond(
            \notFreeIn(j, t),
            \notFreeIn(j, jPrime),
            \newDependingOn(jPrime, a)
        )
        \replacewith(
            (\exists j; (WD(a) & wd(s) & a
                    & ((wellOrderLeqInt(jPrime, j) & (jPrime != j)) -> {\subst j; jPrime}(WD(a) & !a))))
            | (\forall j; (WD(a) & wd(t) & !a))
            | (\forall j; (wd(s) & wd(t) & (s = t)))
        )
        \heuristics(simplify)
    };

    wd_Logical_Op_ExCond_Form {

        \find(
            WD(\ifExj; (a)\then(b)\else(c))
        )
        \varcond(
            \notFreeIn(j, c),
            \notFreeIn(j, jPrime),
            \newDependingOn(jPrime, a)
        )
        \replacewith(
            (\exists j; (WD(a) & WD(b) & a
                    & ((wellOrderLeqInt(jPrime, j) & (jPrime != j)) -> {\subst j; jPrime}(WD(a) & !a))))
            | (\forall j; (WD(a) & WD(c) & !a))
            | (\forall j; (WD(b) & WD(c) & (b <-> c)))
        )
        \heuristics(simplify)
    };

    wd_Logical_Quant_All {

        \find(
            WD(\forall i; a)
        )
        \replacewith(
            (\exists i; (WD(a) & !a)) | (\forall i; WD(a))
        )
        \heuristics(simplify)
    };

    wd_Logical_Quant_Exist {

        \find(
            WD(\exists i; a)
        )
        \replacewith(
            (\exists i; (WD(a) & a)) | (\forall i; WD(a))
        )
        \heuristics(simplify)
    };
}

\rules(wdChecks:on, wdOperator:Y) {

    wd_T_Logical_Op_Neg {

        \find(
            T(!a)
        )
        \replacewith(
            F(a)
        )
        \heuristics(simplify)
    };

    wd_F_Logical_Op_Neg {

        \find(
            F(!a)
        )
        \replacewith(
            T(a)
        )
        \heuristics(simplify)
    };

    wd_T_Logical_Op_And {

        \find(
            T((a & b))
        )
        \replacewith(
            T(a) & T(b)
        )
        \heuristics(simplify)
    };

    wd_F_Logical_Op_And {

        \find(
            F((a & b))
        )
        \replacewith(
            F(a) | F(b)
        )
        \heuristics(simplify)
    };

    wd_T_Logical_Op_Or {

        \find(
            T((a | b))
        )
        \replacewith(
            T(a) | T(b)
        )
        \heuristics(simplify)
    };

    wd_F_Logical_Op_Or {

        \find(
            F((a | b))
        )
        \replacewith(
            F(a) & F(b)
        )
        \heuristics(simplify)
    };

    wd_T_Logical_Op_Imp {

        \find(
            T((a -> b))
        )
        \replacewith(
            F(a) | T(b)
        )
        \heuristics(simplify)
    };

    wd_F_Logical_Op_Imp {

        \find(
            F((a -> b))
        )
        \replacewith(
            T(a) & F(b)
        )
        \heuristics(simplify)
    };

    wd_T_Logical_Op_Eqv {

        \find(
            T((a <-> b))
        )
        \replacewith(
            (T(a) & T(b)) | (F(a) & F(b))
        )
        \heuristics(simplify)
    };

    wd_F_Logical_Op_Eqv {

        \find(
            F((a <-> b))
        )
        \replacewith(
            (T(a) & F(b)) | (F(a) & T(b))
        )
        \heuristics(simplify)
    };

    wd_Logical_Op_Cond_Expr {

        \find(
            wd(\if(a) \then(s) \else(t))
        )
        \replacewith(
            (T(a) & wd(s)) | (F(a) & wd(t)) | (wd(s) & wd(t) & (s = t))
        )
        \heuristics(simplify)
    };

    wd_T_Logical_Op_Cond_Form {

        \find(
            T(\if(a) \then(b) \else(c))
        )
        \replacewith(
            (T(a) & T(b)) | (F(a) & T(c)) | (T(b) & T(c))
        )
        \heuristics(simplify)
    };

    wd_F_Logical_Op_Cond_Form {

        \find(
            F(\if(a) \then(b) \else(c))
        )
        \replacewith(
            (T(a) & F(b)) | (F(a) & F(c)) | (F(b) & F(c))
        )
        \heuristics(simplify)
    };

    wd_Logical_Op_ExCond_Expr {

        \find(
            wd(\ifExj; (a)\then(s)\else(t))
        )
        \varcond(
            \notFreeIn(j, t),
            \notFreeIn(j, jPrime),
            \newDependingOn(jPrime, a)
        )
        \replacewith(
            (\exists j; (T(a) & wd(s)
                    & ((wellOrderLeqInt(jPrime, j) & (jPrime != j)) -> {\subst j; jPrime}F(a))))
            | (\forall j; (F(a) & wd(t)))
            | (\forall j; (wd(s) & wd(t) & (s = t)))
        )
        \heuristics(simplify)
    };

    wd_T_Logical_Op_ExCond_Form {

        \find(
            T(\ifExj; (a)\then(b)\else(c))
        )
        \varcond(
            \notFreeIn(j, c),
            \notFreeIn(j, jPrime),
            \newDependingOn(jPrime, a)
        )
        \replacewith(
            (\exists j; (T(a) & T(b)
                    & ((wellOrderLeqInt(jPrime, j) & (jPrime != j)) -> {\subst j; jPrime}F(a))))
            | (\forall j; (F(a) & T(c)))
            | (\forall j; (T(b) & T(c)))
        )
        \heuristics(simplify)
    };

    wd_F_Logical_Op_ExCond_Form {

        \find(
            F(\ifExj; (a)\then(b)\else(c))
        )
        \varcond(
            \notFreeIn(j, c),
            \notFreeIn(j, jPrime),
            \newDependingOn(jPrime, a)
        )
        \replacewith(
            (\exists j; (T(a) & F(b)
                    & ((wellOrderLeqInt(jPrime, j) & (jPrime != j)) -> {\subst j; jPrime}F(a))))
            | (\forall j; (F(a) & F(c)))
            | (\forall j; (F(b) & F(c)))
        )
        \heuristics(simplify)
    };

    wd_T_Logical_Quant_All {

        \find(
            T(\forall i; a)
        )
        \replacewith(
            \forall i; T(a)
        )
        \heuristics(simplify)
    };

    wd_F_Logical_Quant_All {

        \find(
            F(\forall i; a)
        )
        \replacewith(
            \exists i; F(a)
        )
        \heuristics(simplify)
    };

    wd_T_Logical_Quant_Exist {

        \find(
            T(\exists i; a)
        )
        \replacewith(
            \exists i; T(a)
        )
        \heuristics(simplify)
    };

    wd_F_Logical_Quant_Exist {

        \find(
            F(\exists i; a)
        )
        \replacewith(
            \forall i; F(a)
        )
        \heuristics(simplify)
    };

    // Split and resolve rules

    wd_Y_Split {

        \find(
            WD(a)
        )
        \varcond(
            \hasSubFormulas(a)
        )
        \replacewith(
            T(a) | F(a)
        )
        \heuristics(simplify)
    };

    wd_T_Resolve {

        \find(
            T(a)
        )
        \varcond(
            \not \hasSubFormulas(a)
        )
        \replacewith(
            WD(a) & a
        )
        \heuristics(simplify)
    };

    wd_F_Resolve {

        \find(
            F(a)
        )
        \varcond(
            \not \hasSubFormulas(a)
        )
        \replacewith(
            WD(a) & !a
        )
        \heuristics(simplify)
    };
}
