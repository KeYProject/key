/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

// This file contains the rule set for permutations in
// the sequence data type
// author P.H. Schmitt


// This file contains RULES for the permutation predicates in
// the sequence datatype.

// Find the DECLARATIONS in file seq.key and
// definitional extensions in file seqRules.key

\rules(sequences:on, moreSeqRules:on) {
    // --------------------------------------------------------------------------
    //  Second Extensions by Definitions
    //  These taclets were not part of the original Seq axiomatization by
    //  B.Weiss
    //  These taclets extend the signature of the core theory by indroducing
    //  the relation symbols
    //            seqPerm(Seq,Seq), seqNPerm(Seq)
    //  and the function symbols
    //           Seq seqSwap(Seq,int,int)
    //           Seq seqRemove(Seq,int)
    //  by direct definitions.
    //  Consistency of the extended theory is thus guaranteed.
    //  (Theorem on  conservative extentions)
    // --------------------------------------------------------------------------

    seqNPermDefReplace {
        \schemaVar \term Seq s1;
        \schemaVar \variables int iv, jv;

        \find(seqNPerm(s1))
        \varcond(\notFreeIn(iv, s1), \notFreeIn(jv, s1))

        \replacewith(
            (\forall iv; (0 <= iv & iv < seqLen(s1) ->
                    \exists jv; (0 <= jv & jv < seqLen(s1) & any::seqGet(s1, jv) = iv))))
    };

    seqNPermDefLeft {
        \schemaVar \term Seq s1;
        \schemaVar \variables int iv, jv;

        \find(seqNPerm(s1) ==>)
        \varcond(\notFreeIn(iv, s1), \notFreeIn(jv, s1))

        \add(
            (\forall iv; (0 <= iv & iv < seqLen(s1) ->
                    \exists jv; (0 <= jv & jv < seqLen(s1) & any::seqGet(s1, jv) = iv))) ==>)
    };

    seqPermDefLeft {
        \schemaVar \term Seq s1, s2, s3;
        \schemaVar \variables int iv;
        \schemaVar \variables Seq s;

        \find(seqPerm(s1, s2) ==>)

        \varcond(\notFreeIn(iv, s1, s2),
            \notFreeIn(s, s1, s2))

        \add(
            seqLen(s1) = seqLen(s2) &
            (\exists s; (seqLen(s) = seqLen(s1) & seqNPerm(s) &

                    (\forall iv; (0 <= iv & iv < seqLen(s) ->
                            any::seqGet(s1, iv) = any::seqGet(s2, int::seqGet(s, iv))))))
            ==>)
    };

    seqPermDef {
        \schemaVar \term Seq s1, s2, s3;
        \schemaVar \variables int iv;
        \schemaVar \variables Seq s;

        \find(seqPerm(s1, s2))

        \varcond(\notFreeIn(iv, s1, s2),
            \notFreeIn(s, s1, s2))

        \replacewith(
            seqLen(s1) = seqLen(s2) &
            (\exists s; (seqLen(s) = seqLen(s1) & seqNPerm(s) &

                    (\forall iv; (0 <= iv & iv < seqLen(s) ->
                            any::seqGet(s1, iv) = any::seqGet(s2, int::seqGet(s, iv))))))
        )
    };

    defOfSeqSwap {
        \schemaVar \term Seq s;
        \schemaVar \term int iv, jv;
        \schemaVar \variables int uSub;

        \find(seqSwap(s, iv, jv))

        \varcond(\notFreeIn(uSub, s),
            \notFreeIn(uSub, iv),
            \notFreeIn(uSub, jv))
        \replacewith(seqDef{uSub;}(0, seqLen(s),
                \if(!(0 <= iv & 0 <= jv & iv < seqLen(s) & jv < seqLen(s)))
                    \then(any::seqGet(s, uSub))
                    \else(\if(uSub = iv)
                            \then(any::seqGet(s, jv))
                            \else(\if(uSub = jv)
                                    \then(any::seqGet(s, iv))
                                    \else(any::seqGet(s, uSub))))))

    };

    defOfSeqRemove {
        \schemaVar \term Seq s;
        \schemaVar \term int iv;
        \schemaVar \variables int uSub;

        \find(seqRemove(s, iv))
        \varcond(\notFreeIn(uSub, s),
            \notFreeIn(uSub, iv))

        \replacewith(
            \if(iv < 0 | seqLen(s) <= iv)
                \then(s)
                \else(seqDef{uSub;}(0, seqLen(s) - 1,
                        \if(uSub < iv)
                            \then(any::seqGet(s, uSub))
                            \else(any::seqGet(s, uSub + 1)))))
    };

    // --------------------------------------------------------------------
    // definition for seqNPermInv
    //
    // --------------------------------------------------------------------

    defOfSeqNPermInv {
        \schemaVar \term Seq s;
        \schemaVar \variables int uSub;

        \find(seqNPermInv(s))
        \varcond(\notFreeIn(uSub, s))

        \replacewith(seqDef{uSub;}(0, seqLen(s), seqIndexOf(s, uSub)))

    };

    // ==================================================================
    //  derived taclets involving the functions seqSwap, seqRemove,
    //  and seqNPermInv
    //
    // ==================================================================


    lenOfNPermInv {
        \schemaVar \term Seq s1;
        \find(seqLen(seqNPermInv(s1)))
        \replacewith(seqLen(s1))

        \heuristics(simplify)
    };

    \lemma
    getAnyOfNPermInv {
        \schemaVar \term Seq s1;
        \schemaVar \term int i3;

        \find(any::seqGet(seqNPermInv(s1), i3))
        \replacewith(int::seqGet(seqNPermInv(s1), i3));
        \add( ==> 0 <= i3 & i3 < seqLen(s1))
        \heuristics(simplify)
    };

    getOfNPermInv {
        \schemaVar \term Seq s1;
        \schemaVar \term int i3;
        \schemaVar \skolemTerm int jsk;

        \find(int::seqGet(seqNPermInv(s1), i3))
        \varcond(\newDependingOn(jsk, i3))
        \replacewith(jsk)
        \add(int::seqGet(s1, jsk) = i3 & 0 <= jsk & jsk < seqLen(s1) ==>);
        \add( ==> 0 <= i3 & i3 < seqLen(s1) & seqNPerm(s1))

        \heuristics(simplify)
    };

    lenOfSwap {
        \schemaVar \term Seq s1;
        \schemaVar \term int iv1, iv2;
        \find(seqLen(seqSwap(s1, iv1, iv2)))
        \replacewith(seqLen(s1))

        \heuristics(simplify)
    };

    getOfSwap {
        \schemaVar \term Object o;
        \schemaVar \term Seq s1;
        \schemaVar \term int iv, jv, idx;
        \schemaVar \term Heap h;

        //  Differs from seqOutsideValue in seqStandard-new-verify.key
        //

        \find(alpha::seqGet(seqSwap(s1, iv, jv), idx))
        \replacewith(\if(!(0 <= iv & 0 <= jv & iv < seqLen(s1) & jv < seqLen(s1)))
                \then(alpha::seqGet(s1, idx))
                \else(\if(idx = iv)
                        \then(alpha::seqGet(s1, jv))
                        \else(\if(idx = jv)
                                \then(alpha::seqGet(s1, iv))
                                \else(alpha::seqGet(s1, idx)))))

        \heuristics(simplify_enlarging)
    };

    lenOfRemove {
        \schemaVar \term Seq s1;
        \schemaVar \term int iv1;

        \find(seqLen(seqRemove(s1, iv1)))
        \replacewith(
            \if(0 <= iv1 & iv1 < seqLen(s1))
                \then(seqLen(s1) - 1)
                \else(seqLen(s1)))

        \heuristics(simplify_enlarging)
    };

    //  Differs from seqOutsideValue in seqStandard-new-verify.key
    //

    getOfRemoveAny {
        \schemaVar \term Seq s1;
        \schemaVar \term int i3, i2;

        \find(alpha::seqGet(seqRemove(s1, i2), i3))
        \replacewith(\if(i2 < 0 | seqLen(s1) <= i2)
                \then(alpha::seqGet(s1, i3))
                \else(\if(i3 < i2)
                        \then(alpha::seqGet(s1, i3))
                        \else(\if(i2 <= i3 & i3 < seqLen(s1) - 1)
                                \then(alpha::seqGet(s1, i3 + 1))
                                \else((alpha)seqGetOutside))))

        \heuristics(simplify_enlarging)
    };

    getOfRemoveInt {
        \schemaVar \term Seq s1;
        \schemaVar \term int i3, i2;

        \find(int::seqGet(seqRemove(s1, i2), i3))
        \replacewith(\if(i2 < 0 | seqLen(s1) <= i2)
                \then(int::seqGet(s1, i3))
                \else(\if(i3 < i2)
                        \then(int::seqGet(s1, i3))
                        \else(\if(i2 <= i3 & i3 < seqLen(s1) - 1)
                                \then(int::seqGet(s1, i3 + 1))
                                \else((int)seqGetOutside))))

        \heuristics(simplify_enlarging)
    };

    lenOfRemoveConcrete1 {
        \schemaVar \term Seq s1;

        \assumes(seqLen(s1) >= 1 ==>)
        \find(seqLen(seqRemove(s1, seqLen(s1) - 1)))
        \replacewith(seqLen(s1) - 1)

        \heuristics(simplify)
    };

    lenOfRemoveConcrete2 {
        \schemaVar \term Seq s1;

        \assumes(seqLen(s1) >= 1 ==>)
        \find(seqLen(seqRemove(s1, 0)))
        \replacewith(seqLen(s1) - 1)

        \heuristics(simplify)
    };

    //  Differs from seqOutsideValue in seqStandard-new-verify.key
    //

    getOfRemoveAnyConcrete1 {
        \schemaVar \term Seq s1;
        \schemaVar \term int i3, i2;
        \assumes(seqLen(s1) >= 1 ==>)
        \find(alpha::seqGet(seqRemove(s1, seqLen(s1) - 1), i3))
        \replacewith(\if(i3 < seqLen(s1) - 1)
                \then(alpha::seqGet(s1, i3))
                \else((alpha)seqGetOutside))

        \heuristics(simplify_enlarging)
    };

    //  Differs from seqOutsideValue in seqStandard-new-verify.key
    //

    getOfRemoveAnyConcrete2 {
        \schemaVar \term Seq s1;
        \schemaVar \term int i3, i2;
        \assumes(seqLen(s1) >= 1 ==>)
        \find(alpha::seqGet(seqRemove(s1, 0), i3))
        \replacewith(\if(0 <= i3 & i3 < seqLen(s1) - 1)
                \then(alpha::seqGet(s1, i3 + 1))
                \else((alpha)seqGetOutside))

        \heuristics(simplify_enlarging)
    };

    // --------------------------------------------------------------------------
    //  derived basic properties of permutations on natural
    //  numbers
    //
    // --------------------------------------------------------------------------


    //
    //  The following taclet formalizes a kind of pidgeon hole principle
    //  It is the only taclet whose derivation requires induction
    //

    // seqNPermRange {
    //        \schemaVar \term Seq s;
    //        \schemaVar \variables int iv;
    //      \find(seqNPerm(s) ==> )
    //      \varcond( \notFreeIn (iv,s)  )
    //      \add(\forall iv;((0 <= iv & iv <  seqLen(s))
    //         ->  (0 <= int::seqGet(s,iv) &  int::seqGet(s,iv) < seqLen(s))) ==>)
    //            };
    // Improved version by PHS, correctness proof from Oct.19.2016

    \lemma
    seqNPermRange {
        \schemaVar \term Seq s;
        \schemaVar \variables int iv;
        \find(seqNPerm(s) ==>)
        \varcond(\notFreeIn(iv, s))
        \add(\forall iv; ((0 <= iv & iv < seqLen(s))
                -> (0 <= int::seqGet(s, iv) & int::seqGet(s, iv) < seqLen(s) &
                    int::instance(any::seqGet(s, iv)) = TRUE)) ==>)

    };

    //
    //  The following taclet formalizes the mathematical fact
    //  that every sujective function from a finite set into
    //  itself is injective.
    //  It can be proved using the previous taclet without induction.
    //

    seqNPermInjective {
        \schemaVar \term Seq s;
        \schemaVar \variables int iv, jv;
        \find(seqNPerm(s) ==>)
        \varcond(\notFreeIn(iv, s), \notFreeIn(jv, s))
        \add(\forall iv; (\forall jv; (
                    (0 <= iv & iv < seqLen(s) & 0 <= jv & jv < seqLen(s)
                        & int::seqGet(s, iv) = int::seqGet(s, jv))
                    -> iv = jv)) ==>)

    };

    // More transitivity rules (used for automation, see at end)

    \lemma
    seqPermTrans {
        \schemaVar \term Seq s1, s2, s3;

        \assumes(seqPerm(s2, s3) ==>)
        \find(seqPerm(s1, s2) ==>)
        \add(seqPerm(s1, s3) ==>)
    };

    // DB: changed 25/10/2013 to be applied on RHS
    \lemma
    seqPermRefl {
        \schemaVar \term Seq s;
        \find(seqPerm(s, s))
        \replacewith(true)
        \heuristics(concrete)
    };

    seqPermEmpty1 {
        \schemaVar \term Seq s;
        \find(seqPerm(seqEmpty, s))
        \replacewith(seqEmpty = s)
        \heuristics(simplify)
        \displayname "seqPermEmpty"
    };

    seqPermEmpty2 {
        \schemaVar \term Seq s;
        \find(seqPerm(s, seqEmpty))
        \replacewith(seqEmpty = s)
        \heuristics(simplify)
        \displayname "seqPermEmpty"
    };

    seqNPermSwapNPerm {
        \schemaVar \term Seq s1;
        \schemaVar \variables int iv, jv;

        \find(seqNPerm(s1) ==>)
        \varcond(\notFreeIn(iv, s1), \notFreeIn(jv, s1))

        \add(\forall iv; (\forall jv; (
                    (0 <= iv & 0 <= jv & iv < seqLen(s1) & jv < seqLen(s1))
                    -> seqNPerm(seqSwap(s1, iv, jv)))) ==>)

    };

    // changed; proven in KeY -- DB 29/10/2013
    seqNPermEmpty {
        \find(seqNPerm(seqEmpty))
        \replacewith(true)
        \heuristics(concrete)
    };

    // changed; proven in KeY -- DB 29/10/2013
    seqNPermSingletonConrete {
        \find(seqNPerm(seqSingleton(0)))
        \replacewith(true)
        \heuristics(concrete)
    };

    // changed; proven in KeY -- DB 29/10/2013
    seqNPermSingleton {
        \schemaVar \term int si;
        \find(seqNPerm(seqSingleton(si)))
        \replacewith(si = 0)
        \heuristics(simplify)
    };

    seqNPermComp {
        \schemaVar \term Seq s1, s2;
        \schemaVar \variables int u;
        \assumes(seqNPerm(s2) & seqLen(s1) = seqLen(s2) ==>)
        \find(seqNPerm(s1) ==>)
        \varcond(\notFreeIn(u, s1), \notFreeIn(u, s2))

        \add(seqNPerm(seqDef{u;}(0, seqLen(s1),
                    int::seqGet(s1, int::seqGet(s2, u)))) ==>)

    };

    seqGetSInvS {
        \schemaVar \term Seq s;
        \schemaVar \term int t;

        \find(int::seqGet(s, int::seqGet(seqNPermInv(s), t)))
        \replacewith(t);
        \add( ==> seqNPerm(s) & 0 <= t & t < seqLen(s))

        // \heuristics(simplify)

    };

    seqNPermInvNPermLeft {
        \schemaVar \term Seq s1;

        \find(seqNPerm(s1) ==>)
        \add(seqNPerm(seqNPermInv(s1)) ==>)
    };

    // DB: changed 25/10/2013 to be applied on RHS
    seqPermSym {
        \schemaVar \term Seq s1, s2;
        \find(seqPerm(s1, s2))
        \replacewith(seqPerm(s2, s1))
    };

    seqNPermInvNPermReplace {
        \schemaVar \term Seq s1;

        \find(seqNPerm(seqNPermInv(s1)))
        \replacewith(seqNPerm(s1))
    };

    seqPermConcatFW {
        \schemaVar \term Seq s1, s2, t1, t2;

        \assumes(seqPerm(s1, t1) ==>)
        \find(seqPerm(s2, t2) ==>)
        \add(seqPerm(seqConcat(s1, s2), seqConcat(t1, t2)) ==>)
    };

    seqPermConcatBW {
        \schemaVar \term Seq s1, s2, t1, t2;

        \assumes(seqPerm(s1, t1) ==>)
        \find( ==> seqPerm(seqConcat(s1, s2), seqConcat(t1, t2)))
        \replacewith( ==> seqPerm(s2, t2))

        \heuristics(simplify)
    };

    \lemma
    seqPermSplit {
        \schemaVar \term Seq s1, s2, t1, t2;
        \find( ==> seqPerm(seqConcat(s1, s2), seqConcat(t1, t2)))
        \replacewith( ==> seqPerm(s1, t1) & seqPerm(s2, t2))
    };

    seqnormalizeDef {
        \schemaVar \term Seq s1;
        \schemaVar \term int le, ri;
        \schemaVar \term any t;
        \schemaVar \variables int u;

        \find(seqDef{u;}(le, ri, t))
        \varcond(\notFreeIn(u, le), \notFreeIn(u, ri))
        \replacewith(\if(le < ri)
                \then(seqDef{u;}(0, (ri - le), ({\subst u; (u + le)}t)))
                \else(seqEmpty))

    };

    \lemma
    seqNPermRight {
        \schemaVar \term Seq s;
        \schemaVar \variables int iv, jv;

        \find( ==> seqNPerm(s))
        \varcond(\notFreeIn(iv, s), \notFreeIn(jv, s))
        \add( ==> \forall iv; (\forall jv; (
                    (0 <= iv & iv < seqLen(s) & 0 <= jv & jv < seqLen(s)
                        & int::seqGet(s, iv) = int::seqGet(s, jv))
                    -> iv = jv))
            & \forall iv; (0 <= iv & iv < seqLen(s) -> 0 <= int::seqGet(s, iv) & int::seqGet(s, iv) < seqLen(s))
            & \forall iv; (0 <= iv & iv < seqLen(s) -> int::instance(any::seqGet(s, iv)) = TRUE))
    };

    \lemma
    seqPermFromSwap {
        \schemaVar \term Seq s1, s2, t1, t2;
        \schemaVar \variables int iv, jv;

        \assumes(seqPerm(s1, t1) ==>)
        \find( ==> seqPerm(s2, t2))
        \varcond(
            \notFreeIn(iv, s1),
            \notFreeIn(iv, s2),
            \notFreeIn(iv, t1),
            \notFreeIn(iv, t2),
            \notFreeIn(jv, s1),
            \notFreeIn(jv, s2),
            \notFreeIn(jv, t1),
            \notFreeIn(jv, t2))
        \replacewith( ==> t1 = t2 &
            \exists iv; \exists jv; (0 <= iv & 0 <= jv & iv < s2.length & jv < s2.length &
                s1 = seqSwap(s2, iv, jv)))
    };

    /* seqPermOrder {
     \schemaVar \term Seq commEqLeft, commEqRight;
     \find(seqPerm(commEqLeft, commEqRight))
     \replacewith(seqPerm(commEqRight, commEqLeft))
     \heuristics(order_terms)
    };*/

    // These rules are variants of seqPermTrans used to prove transitive
    // seqPerm challenges automatically.

    \lemma
    seqPermTransAlt0 {
        \schemaVar \term Seq s1, s2, s3, x, y;

        \assumes(seqPerm(s2, s3) ==> seqPerm(x, y))
        \find(seqPerm(s1, s2) ==>)
        \add(seqPerm(s1, s3) ==>)
        \heuristics(inReachableStateImplication)
        \displayname "seqPermTrans"
    };

    \lemma
    seqPermTransAlt1 {
        \schemaVar \term Seq a, b, c, x, y;
        \assumes(seqPerm(a, b) ==> seqPerm(x, y))
        // apply this rule only if there is a seqPerm goal to prove!
        \find(seqPerm(a, c) ==>)
        \add(seqPerm(b, c) ==>)
        \heuristics(inReachableStateImplication)
        \displayname "seqPermTrans"
    };

    \lemma
    seqPermTransAlt2 {
        \schemaVar \term Seq a, b, c, x, y;
        \assumes(seqPerm(a, c) ==> seqPerm(x, y))
        // apply this rule only if there is a seqPerm goal to prove!
        \find(seqPerm(b, c) ==>)
        \add(seqPerm(a, b) ==>)
        \heuristics(inReachableStateImplication)
        \displayname "seqPermTrans"
    };

    \lemma
    seqPermTransAlt3 {
        \schemaVar \term Seq a, b, c, x, y;
        \assumes(seqPerm(a, c) ==> seqPerm(x, y))
        // apply this rule only if there is a seqPerm goal to prove!
        \find(seqPerm(b, a) ==>)
        \add(seqPerm(b, c) ==>)
        \heuristics(inReachableStateImplication)
        \displayname "seqPermTrans"
    };

    // Proven by ulbrich in Isabelle/HOL
    seqPermCountsInt {
        \schemaVar \term Seq s1, s2;
        \schemaVar \variables int iv;
        \schemaVar \variables any element;

        \find(seqPerm(s1, s2))

        \varcond(
            \notFreeIn(element, s1, s2),
            \notFreeIn(iv, s1, s2)
        )

        \replacewith(
            (\forall element;
                bsum{iv;}(0, s1.length, \if(any::seqGet(s1, iv) = element) \then(1) \else(0)) =
                bsum{iv;}(0, s2.length, \if(any::seqGet(s2, iv) = element) \then(1) \else(0))
            )
        )
    };

    \lemma
    seqPermForall {
        \schemaVar \term Seq s1;
        \schemaVar \term Seq s2;
        \schemaVar \formula phi;
        \schemaVar \variable int iv;
        \schemaVar \variable any x;
        \assumes(seqPerm(s1, s2) ==>)
        \varcond(\notFreeIn(iv, phi), \notFreeIn(iv, s1), \notFreeIn(iv, s2))
        \add(\forall iv; (0 <= iv & iv < seqLen(s1) -> {\subst x; any::seqGet(s1, iv)}phi)
            <->
            \forall iv; (0 <= iv & iv < seqLen(s1) -> {\subst x; any::seqGet(s2, iv)}phi) ==>)
    };

    \lemma
    seqPermExists {
        \schemaVar \term Seq s1;
        \schemaVar \term Seq s2;
        \schemaVar \formula phi;
        \schemaVar \variable int iv;
        \schemaVar \variable any x;
        \assumes(seqPerm(s1, s2) ==>)
        \varcond(\notFreeIn(iv, phi), \notFreeIn(iv, s1), \notFreeIn(iv, s2))
        \add(\exists iv; (0 <= iv & iv < seqLen(s1) & {\subst x; any::seqGet(s1, iv)}phi)
            <->
            \exists iv; (0 <= iv & iv < seqLen(s1) & {\subst x; any::seqGet(s2, iv)}phi) ==>)
    };
}
