/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

\schemaVariables {
    \term boolean bo, b1, b2;
}

\rules {
    boolean_equal {
        \find(bo = bo)
        \replacewith(true)
        \heuristics(simplify_boolean, concrete)
    };

    boolean_equal_2 {
        \find(b1 = TRUE <-> b2 = TRUE)
        \replacewith(b1 = b2)
        \heuristics(simplify_boolean, concrete)
        \displayname "boolean_equal"
    };

    boolean_not_equal_1 {
        \find(TRUE = FALSE)
        \replacewith(false)
        \heuristics(simplify_boolean, concrete)
        \displayname "boolean_not_equal"
    };
    boolean_not_equal_2 {
        \find(FALSE = TRUE)
        \replacewith(false)
        \heuristics(simplify_boolean, concrete)
        \displayname "boolean_not_equal"
    };

    true_to_not_false {
        \find(bo = TRUE)
        \replacewith(!bo = FALSE)
    };

    // anything to ...=TRUE:

    false_to_not_true {
        \find(bo = FALSE)
        \replacewith(!bo = TRUE)
        \heuristics(simplify_boolean, concrete)
    };

    boolean_true_commute {
        \find(TRUE = bo)
        \replacewith(bo = TRUE)
        \heuristics(simplify_boolean)
        \displayname "boolean commute"
    };

    boolean_false_commute {
        \find(FALSE = bo)
        \replacewith(bo = FALSE)
        \heuristics(simplify_boolean)
        \displayname "boolean commute"
    };

    ex_bool {
        \schemaVar \variables boolean x;
        \schemaVar \formula c;
        \find(\exists x; c)
        \replacewith({\subst x; FALSE}c | {\subst x; TRUE}c)
        \heuristics(boolean_cases)
    };

    all_bool {
        \schemaVar \variables boolean x;
        \schemaVar \formula c;
        \find(\forall x; c)
        \replacewith({\subst x; FALSE}c & {\subst x; TRUE}c)
        \heuristics(boolean_cases)
    };

    ///////////////////////////////////////////////////////////////////////////////

    apply_eq_boolean {
        \assumes( ==> bo = TRUE)
        \find(bo)
        \sameUpdateLevel
        \replacewith(FALSE)
        \heuristics(apply_equations)
    };

    apply_eq_boolean_2 {
        \assumes( ==> bo = FALSE)
        \find(bo)
        \sameUpdateLevel
        \replacewith(TRUE)
        \heuristics(apply_equations)
        \displayname "apply_eq_boolean"
    };

    apply_eq_boolean_rigid {
        \schemaVar \term [rigid] boolean br;
        \assumes( ==> br = TRUE)
        \find(br)
        \replacewith(FALSE)
        \heuristics(apply_equations)
        \displayname "apply_eq_boolean"
    };

    apply_eq_boolean_rigid_2 {
        \schemaVar \term [rigid] boolean br;
        \assumes( ==> br = FALSE)
        \find(br)
        \replacewith(TRUE)
        \heuristics(apply_equations)
        \displayname "apply_eq_boolean"
    };

    \lemma
    ifthenelse_equals {
        \schemaVar \formula b, c;
        \find(\if(b) \then(TRUE) \else(FALSE) = \if(c) \then(TRUE) \else(FALSE))
        \replacewith(b <-> c)
        \heuristics(concrete)
    };

    \lemma
    ifthenelse_equals_1 {
        \schemaVar \formula b;
        \schemaVar \term boolean c;
        \find(\if(b) \then(TRUE) \else(FALSE) = c)
        \replacewith(b <-> c = TRUE)
        // \heuristics(concrete)
    };

    \lemma
    ifthenelse_equals_2 {
        \schemaVar \term boolean b;
        \schemaVar \formula c;
        \find(b = \if(c) \then(TRUE) \else(FALSE))
        \replacewith(b = TRUE <-> c)
        // \heuristics(concrete)
    };
}
