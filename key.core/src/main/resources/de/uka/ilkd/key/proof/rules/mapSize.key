/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

/** Additional rules for the size of maps.
 * @author Kai Wallisch
 */

\schemaVariables {
    \term Map m, m0, m1;
    \term any key, value, x;
    \variables any vy;
}

\functions {
    int mapSize(Map);
}

\predicates {
    isFinite(Map);
}

\rules {

    // --------------------------------------------------------------------------
    // isFinite axiom
    // --------------------------------------------------------------------------

    defIsFinite {
        \schemaVar \variables any vx;
        \schemaVar \variables int ix;
        \schemaVar \variables Seq s;
        \find(isFinite(m))
        \varcond(\notFreeIn(vx, m), \notFreeIn(s, m))
        \replacewith(\exists s;
            (\forall vx;
                (inDomain(m, vx) <-> (\exists ix; (0 <= ix & ix < seqLen(s) & any::seqGet(s, ix) = vx)))
            ))
    };

    // --------------------------------------------------------------------------
    // isFinite derived rules
    // --------------------------------------------------------------------------

    isFiniteOfMapEmpty {
        \find(isFinite(mapEmpty))
        \sameUpdateLevel
        \replacewith(true)
        \heuristics(simplify)
    };

    isFiniteOfMapRemove {
        \find(isFinite(mapRemove(m, key)))
        \sameUpdateLevel
        \replacewith(isFinite(m))
        \heuristics(simplify)
    };

    isFiniteOfMapUpdate {
        \find(isFinite(mapUpdate(m, key, value)))
        \sameUpdateLevel
        \replacewith(isFinite(m))
        \heuristics(simplify)
    };

    isFiniteOfMapSingleton {
        \find(isFinite(mapSingleton(key, value)))
        \sameUpdateLevel
        \replacewith(true)
        \heuristics(simplify)
    };

    isFiniteOfSeq2Map {
        \schemaVar \term Seq s;
        \find(isFinite(seq2map(s)))
        \sameUpdateLevel
        \replacewith(true)
        \heuristics(simplify)
    };

    // --------------------------------------------------------------------------
    // mapSize axioms
    // --------------------------------------------------------------------------

    sizeOfMapEmpty {
        \find(mapSize(mapEmpty))
        \sameUpdateLevel
        \replacewith(0)
        \heuristics(simplify)
    };

    sizeOfMapRemove {
        \find(mapSize(mapRemove(m, key)))
        \add(isFinite(m) -> (
                mapSize(mapRemove(m, key)) =
                \if(inDomain(m, key)) \then(mapSize(m) - 1) \else(mapSize(m))
            ) ==>)
        \heuristics(inReachableStateImplication)
    };

    // --------------------------------------------------------------------------
    // mapSize derived rules
    // --------------------------------------------------------------------------

    sizeOfMapUpdate {
        \find(mapSize(mapUpdate(m, key, value)))
        \add(isFinite(m) -> (
                mapSize(mapUpdate(m, key, value)) =
                \if(inDomain(m, key)) \then(mapSize(m)) \else(mapSize(m) + 1)
            ) ==>)
        \heuristics(inReachableStateImplication)
    };

    sizeOfMapSingleton {
        \find(mapSize(mapSingleton(key, value)))
        \sameUpdateLevel
        \replacewith(1)
        \heuristics(simplify)
    };

    sizeOfSeq2Map {
        \schemaVar \term Seq s;
        \find(mapSize(seq2map(s)))
        \sameUpdateLevel
        \replacewith(seqLen(s))
        \heuristics(simplify)
    };

    mapSizeNotNegativeForFiniteMaps {
        \find(mapSize(m))
        \add(isFinite(m) -> (mapSize(m) >= 0) ==>)
        \heuristics(inReachableStateImplication)
    };

}
