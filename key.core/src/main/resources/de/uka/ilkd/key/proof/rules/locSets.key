/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

// This file contains the DECLARATIONS for location sets.
// Find the rules in file locSetRules.key

\sorts {
    LocSet;
    \generic ArraySort \extends java.lang.Object;
    \generic ElementSort \extends java.lang.Object;
}

\functions {
    // unique function symbols
    \unique LocSet empty;
    \unique LocSet allLocs;

    // other constructors
    LocSet singleton(Object, Field);
    LocSet union(LocSet, LocSet);
    LocSet intersect(LocSet, LocSet);
    LocSet setMinus(LocSet, LocSet);
    LocSet infiniteUnion {true}(LocSet);
    LocSet allFields(Object);
    LocSet allObjects(Field);
    LocSet arrayRange(Object, int, int);
    LocSet matrixRange(Heap, Object /* 2D array */,
                       int /* row start (incl.) */, int /* row end (excl.) */,
                       int /* col start (incl.) */, int /* col end (excl.) */);
    LocSet freshLocs(Heap);
    // work-a-round
    LocSet allElementsOfArray(Heap, Object, LocSet);
    LocSet allElementsOfArrayLocsets(Heap, Object, LocSet);
}

\predicates {
    elementOf(Object, Field, LocSet);
    subset(LocSet, LocSet);
    disjoint(LocSet, LocSet);
    createdInHeap(LocSet, Heap);

    /* wellformedMatrix(a,heap) asserts the following three properties:
        in the heap 'heap'
        - the array 'a' is not itself contained in 'a', i.e.,
            \forall int i; a[i] != a
        - no two entries of 'a' refer to the same array (object)
            \forall int i,j;(i != j -> a[i] != a[j])
        - matrices do not share rows, i.e.,
            \forall int i,j;(a[i] = b[j] -> a = b)
     */
    wellFormedMatrix(Object, Heap);
}
