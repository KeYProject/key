/**
  READ FIRST BEFORE EDITING:
    This file interpretes integer semantics sensitive functions
  but without overflows.

  In case of changes PLEASE preserve the files intended meaning. If
  you want to test some rules before implementing them completely,
  please create a new file and include it into the standardRules.key

  Files:
     // rules treating Java programs

     integerAssignment2UpdateRules.key: all integer related assignment
                                        rules for normal assignments
     integerAssignment2UpdateRulesTout.key: all integer related assignment
                                        rules for throughout assignments
     integerAssignment2UpdateRulesTraOnly.key: all integer related assignment
                                        rules for traonly assignments


     integerCommonRules.key: integer semantics independent rules which
         transform programs

     // rules treating integer semantics sensitive functions

     intRules.key: rules interpreting the generic translation
        functions 'java...' faithfully according to the Java Language
        Specification (sound, but a lot of divisions and modulo
        computation need to be performed)

     intRulesIgnoringOverflow.key: rules interpreting the generic translation
        functions 'java...' without overflow (not sound)

     intRulesArith.key: rules interpreting the generic translation
        functions 'java...' as in intRulesIgnoringOverflow.key, but
        requires to show absence of overflow or that the property to
        be proven does not depend on the value of an expression where
        an overflow occured (sound, but incomplete)

     // rules treating integer semantics insensitive functions

     integerSimplificationRules.key: rules for arithmetic functions
         that do not depend on the chose integer semantics

*/



\schemaVariables {
  \term int left, right, i, i0, i1 ;
  \term numbers iz, jz;
}



\rules(programRules:Java, intRules:arithmeticSemanticsIgnoringOF) {
//------------------------------------------------------------------------
// ------------ Rules to expand the predicates inByte, inShort, inInt, and inLong
//------------------------------------------------------------------------
  inByte {\find (inByte(i)) \replacewith ( true )
          \heuristics(concrete) };

  inChar {\find (inChar(i)) \replacewith ( true )
          \heuristics(concrete) };

  inShort {\find (inShort(i)) \replacewith ( true )
          \heuristics(concrete) };

  inInt {\find (inInt(i)) \replacewith ( true )
          \heuristics(concrete) };

  inLong {\find (inLong(i)) \replacewith ( true )
          \heuristics(concrete) };

//--------------------------------------------------------------------------
// Axioms defining the integer translation functions
//--------------------------------------------------------------------------

  translateJavaUnaryMinusInt {
     \find (javaUnaryMinusInt(left))
     \replacewith(neg(left))
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaUnaryMinus"
  };

  translateJavaUnaryMinusLong {
     \find (javaUnaryMinusLong(left))
     \replacewith(neg(left))
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaUnaryMinus"
  };

/** inverting bits is not canonical defineable in this semantics
  translateJavaBitwiseNegation {
     \find(javaBitwiseNegation(left))
     \replacewith(???)
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaUnaryMinus"
  };
*/

  translateJavaAddInt {
     \find(javaAddInt(left,right))
     \replacewith(add(left,right))
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaAdd"
  };

  translateJavaAddLong{
     \find(javaAddLong(left,right))
     \replacewith(add(left,right))
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaAdd"
  };

  translateJavaSubInt{
     \find(javaSubInt(left,right))
     \replacewith(sub(left,right))
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaSub"
  };

  translateJavaSubLong{
     \find(javaSubLong(left,right))
     \replacewith(sub(left,right))
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaSub"
  };

  translateJavaMulInt{
     \find(javaMulInt(left,right))
     \replacewith(mul(left,right))
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaMul"
  };

  translateJavaMulLong{
     \find(javaMulLong(left,right))
     \replacewith(mul(left,right))
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaMul"
  };

  translateJavaMod{
     \find(javaMod(left,right))
     \replacewith(jmod(left,right))
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaMod"
  };

  translateJavaDivInt{
     \find(javaDivInt(left,right))
     \replacewith(jdiv(left,right))
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaDiv"
  };

  translateJavaDivLong{
     \find(javaDivLong(left,right))
     \replacewith(jdiv(left,right))
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaDiv"
  };

  translateJavaCastByte{
     \find(javaCastByte(left))
     \replacewith(left)
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaCast"
  };

  translateJavaCastShort{
     \find(javaCastShort(left))
     \replacewith(left)
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaCast"
  };

  translateJavaCastInt{
     \find(javaCastInt(left))
     \replacewith(left)
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaCast"
  };

  translateJavaCastLong{
     \find(javaCastLong(left))
     \replacewith(left)
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaCast"
  };

  translateJavaCastChar{
     \find(javaCastChar(left))
     \replacewith(left)
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaCast"
  };

/**
  Bitwise operators like shift, and, or, xor working on integers are not
  implemented for these semantics. The reason is that their representation as
  functions on the whole numbers is rather cumbersome and in addition some of
  them depend on overflow.

  translateJavaShiftRightInt{
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaShiftRight"
  };

  translateJavaShiftRightLong{
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaShiftRight"
  };

  translateJavaShiftLeftInt{
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaShiftLeft"
  };
  */

  translateJavaShiftLeftIntConstant{
      \find(javaShiftLeftInt(Z(iz),Z(jz)))
      \sameUpdateLevel
      \replacewith(shiftleftJint(Z(iz),Z(jz)))
      \heuristics(simplify)
      \displayname "translateJavaShiftLeft"
  };

  translateJavaShiftLeftIntZero{
      \find(javaShiftLeftInt(left,0))
      \sameUpdateLevel
      \replacewith(left)
      \heuristics(simplify)
      \displayname "translateJavaShiftLeft"
  };

  shiftLeftMod32{
      \find(javaShiftLeftInt(left,i))
      \add((i >= 0) -> javaShiftLeftInt(left,i) = javaShiftLeftInt(left,jmod(i,32)) ==> )
  };

  shiftLeftSplitTwo{
      \find(javaShiftLeftInt(left,i))
      \add((1 <= i & i <= 31) -> javaShiftLeftInt(left,i - 1) * 2 = javaShiftLeftInt(left,i) ==> )
  };

  shiftLeftTimesTwo{
      \find(javaShiftLeftInt(left,i) * 2)
      \add((0 <= i & i <= 30) -> javaShiftLeftInt(left,i + 1) = javaShiftLeftInt(left,i) * 2 ==> )
  };

  /* not verified */
  shiftLeftChain{
      \find(javaShiftLeftInt(javaShiftLeftInt(left,i0),i))
      \add((0 <= i & 0 <= i0 & i + i0 <= 31) -> javaShiftLeftInt(javaShiftLeftInt(left,i0),i) = javaShiftLeftInt(left,i + i0) ==> )
  };

  /* not verified */
  shiftLeftLowerBoundGe{
      \assumes(i0 >= i1 ==> )
      \find(javaShiftLeftInt(1,i0))
      \add((0 <= i1 & i0 <= 30) -> javaShiftLeftInt(1,i0) >= javaShiftLeftInt(1,i1) ==> )
      \displayname "shiftLeftLowerBound"
  };

  /* not verified */
  shiftLeftLowerBoundGe1{
      \assumes(i1 >= i0 ==> )
      \find(javaShiftLeftInt(1,i0))
      \add((0 <= i0 & i1 <= 30) -> javaShiftLeftInt(1,i1) >= javaShiftLeftInt(1,i0) ==> )
      \displayname "shiftLeftLowerBound"
  };

  /* not verified */
  shiftLeftLowerBoundG{
      \assumes(i0 > i1 ==> )
      \find(javaShiftLeftInt(1,i0))
      \add((0 <= i1 & i0 <= 30) -> javaShiftLeftInt(1,i0) > javaShiftLeftInt(1,i1) ==> )
      \displayname "shiftLeftLowerBound"
  };

  /* not verified */
  shiftLeftLowerBoundG1{
      \assumes(i1 > i0 ==> )
      \find(javaShiftLeftInt(1,i0))
      \add((0 <= i0 & i1 <= 30) -> javaShiftLeftInt(1,i1) > javaShiftLeftInt(1,i0) ==> )
      \displayname "shiftLeftLowerBound"
  };

  /* not verified */
  shiftLeftUpperBoundLe{
      \assumes(i0 <= i1 ==> )
      \find(javaShiftLeftInt(1,i0))
      \add((0 <= i0 & i1 <= 30) -> javaShiftLeftInt(1,i0) <= javaShiftLeftInt(1,i1) ==> )
      \displayname "shiftLeftUpperBound"
  };

  /* not verified */
  shiftLeftUpperBoundLe1{
      \assumes(i1 <= i0 ==> )
      \find(javaShiftLeftInt(1,i0))
      \add((0 <= i1 & i0 <= 30) -> javaShiftLeftInt(1,i1) <= javaShiftLeftInt(1,i0) ==> )
      \displayname "shiftLeftUpperBound"
  };

  /* not verified */
  shiftLeftUpperBoundL{
      \assumes(i0 < i1 ==> )
      \find(javaShiftLeftInt(1,i0))
      \add((0 <= i0 & i1 <= 30) -> javaShiftLeftInt(1,i0) < javaShiftLeftInt(1,i1) ==> )
      \displayname "shiftLeftUpperBound"
  };

  /* not verified */
  shiftLeftUpperBoundL1{
      \assumes(i1 < i0 ==> )
      \find(javaShiftLeftInt(1,i0))
      \add((0 <= i1 & i0 <= 30) -> javaShiftLeftInt(1,i1) < javaShiftLeftInt(1,i0) ==> )
      \displayname "shiftLeftUpperBound"
  };

  /*
  translateJavaShiftLeftLong{
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaShiftLeft"
  };

  translateJavaUnsignedShiftRightInt{
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaUnsignedShiftRight"
  };

  translateJavaUnsignedShiftRightLong{
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaUnsignedShiftRight"
  };

  translateJavaOrInt{
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaOr"
  };

  translateJavaOrLong{
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaOr"
  };

  translateJavaBinaryAndInt{
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaBinaryAnd"
  };

  translateJavaBinaryAndLong{
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaBinaryAnd"
  };

  translateJavaXOrInt{
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaXOr"
  };

  translateJavaXOrLong{
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaXOr"
  };
*/
}
