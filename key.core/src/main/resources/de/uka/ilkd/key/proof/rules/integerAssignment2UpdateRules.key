/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

/**
    This file contains all rules moving an integer related assignment
    from the inside of a normalAssignment (diamond, box, etc.)
    modality to the logic (as an update). The Java operators are
    therefore mapped to their generic logic function. These generic
    functions (java...) are later interpreted as mathematical function
    dependent on the chosen Java semantics.

    See intRules.key for an overview of the integer files.
*/

\schemaVariables {
    \modalOperator {diamond, box, diamond_transaction, box_transaction} #normalassign;

    \program SimpleExpression #se, #se0, #se1;
    \program JavaByteExpression #seByte, #seByte0, #seByte1;
    \program JavaShortExpression #seShort, #seShort0, #seShort1;
    \program JavaIntExpression #seInt, #seInt0, #seInt1;
    \program JavaLongExpression #seLong, #seLong0, #seLong1;
    \program JavaCharByteShortIntExpression #seCharByteShortInt,
    #seCharByteShortInt0, #seCharByteShortInt1;
    \program JavaByteShortExpression #seByteShort;

    \program Variable #loc;

    \formula post;
}

\rules(programRules:Java) {

    // ------------------------------------------------------------------------
    // ----------- Rules for binary arithmetic operators
    // ------------------------------------------------------------------------

    // ------------- multiplication

    assignmentMultiplicationInt {
        \find(\modality{#normalassign}{..
                    #loc = #seCharByteShortInt0 * #seCharByteShortInt1;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inInt(mul(#seCharByteShortInt0, #seCharByteShortInt1)))
        };
        \replacewith({#loc := javaMulInt(#seCharByteShortInt0, #seCharByteShortInt1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "multiplication"
    };

    assignmentMultiplicationLong {
        \find(\modality{#normalassign}{..
                    #loc=#seCharByteShortInt * #seLong;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inLong(mul(#seCharByteShortInt, #seLong)))
        };
        \replacewith({#loc := javaMulLong(#seCharByteShortInt, #seLong)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "multiplication"
    };

    assignmentMultiplicationLong2 {
        \find(\modality{#normalassign}{..
                       #loc=#seLong * #seCharByteShortInt;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inLong(mul(#seLong, #seCharByteShortInt)))
        };
        \replacewith({#loc := javaMulLong(#seLong, #seCharByteShortInt)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "multiplication"
    };

    assignmentMultiplicationLong3 {
        \find(\modality{#normalassign}{..
                    #loc=#seLong0 * #seLong1;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inLong(mul(#seLong0, #seLong1)))
        };
        \replacewith({#loc := javaMulLong(#seLong0, #seLong1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "multiplication"
    };
}

\rules(programRules:Java, runtimeExceptions:ban) {

    // ------------- division
    // Integer division does not need an overflow check

    assignmentDivisionInt {
        \find( ==> \modality{#normalassign}{..
                    #loc=#seCharByteShortInt0 / #seCharByteShortInt1;
                ...}\endmodality (post))
        \replacewith(
            ==> {#loc := javaDivInt(#seCharByteShortInt0, #seCharByteShortInt1)}
            \modality{#normalassign}{.. ...}\endmodality (post));
        \replacewith( ==> #seCharByteShortInt1 != 0)
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };

    assignmentDivisionLong {
        \find( ==> \modality{#normalassign}{..
                    #loc=#se / #seLong;
                ...}\endmodality (post))
        \replacewith(
            ==> {#loc := javaDivLong(#se, #seLong)}
            \modality{#normalassign}{.. ...}\endmodality (post));
        \replacewith( ==> #seLong != 0)
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };

    assignmentDivisionLong2 {
        \find( ==> \modality{#normalassign}{..
                    #loc=#seLong / #seCharByteShortInt;
                ...}\endmodality (post))
        \replacewith(
            ==> {#loc := javaDivLong(#seLong, #seCharByteShortInt)}
            \modality{#normalassign}{.. ...}\endmodality (post));
        \replacewith( ==> #seCharByteShortInt != 0)
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };

    // ------------- modulo
    // a modulo operation cannot cause overflow since the magnitude of the result is always
    // less than the magnitude of the divisor (according to Java Lang Spec)

    assignmentModulo {
        \find( ==> \modality{#normalassign}{..
                    #loc=#se0 % #se1;
                ...}\endmodality (post))
        \replacewith(
            ==> {#loc := javaMod(#se0, #se1)}
            \modality{#normalassign}{.. ...}\endmodality (post));
        \replacewith( ==> #se1 != 0)
        \heuristics(executeIntegerAssignment)
        \displayname "modulo"
    };
}

\rules(programRules:Java, runtimeExceptions:ignore) {

    // ------------- division

    assignmentDivisionInt {
        \find(\modality{#normalassign}{..
                    #loc=#seCharByteShortInt0 / #seCharByteShortInt1;
                ...}\endmodality (post))
        \replacewith(
            {#loc := javaDivInt(#seCharByteShortInt0, #seCharByteShortInt1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };

    assignmentDivisionLong {
        \find(\modality{#normalassign}{..
                    #loc=#se / #seLong;
                ...}\endmodality (post))
        \replacewith(
            {#loc := javaDivLong(#se, #seLong)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };

    assignmentDivisionLong2 {
        \find(\modality{#normalassign}{..
                    #loc=#seLong / #seCharByteShortInt;
                ...}\endmodality (post))
        \replacewith(
            {#loc := javaDivLong(#seLong, #seCharByteShortInt)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };

    // ------------- modulo
    // a modulo operation cannot cause overflow since the magnitude of the result is always
    // less than the magnitude of the divisor (according to Java Lang Spec)

    assignmentModulo {
        \find(\modality{#normalassign}{..
                    #loc=#se0 % #se1;
                ...}\endmodality (post))
        \replacewith(
            {#loc := javaMod(#se0, #se1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "modulo"
    };
}

\rules(programRules:Java, runtimeExceptions:allow) {

    // ------------- division

    assignmentDivisionInt {
        \find(\modality{#normalassign}{..
                    #loc=#seCharByteShortInt0 / #seCharByteShortInt1;
                ...}\endmodality (post))
        \replacewith(\if(#seCharByteShortInt1 != 0)
                \then({#loc := javaDivInt(#seCharByteShortInt0, #seCharByteShortInt1)}
                    \modality{#normalassign}{.. ...}\endmodality (post))
                \else(\modality{#normalassign}{..
                            throw new java.lang.ArithmeticException();
                        ...}\endmodality (post)))
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };

    assignmentDivisionLong {
        \find(\modality{#normalassign}{..
                    #loc=#se / #seLong;
                ...}\endmodality (post))
        \replacewith(\if(#seLong != 0)
                \then({#loc := javaDivLong(#se, #seLong)}
                    \modality{#normalassign}{.. ...}\endmodality (post))
                \else(\modality{#normalassign}{..
                            throw new java.lang.ArithmeticException();
                        ...}\endmodality (post)))
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };

    assignmentDivisionLong2 {
        \find(\modality{#normalassign}{..
                    #loc=#seLong / #seCharByteShortInt;
                ...}\endmodality (post))
        \replacewith(\if(#seCharByteShortInt != 0)
                \then({#loc := javaDivLong(#seLong, #seCharByteShortInt)}
                    \modality{#normalassign}{.. ...}\endmodality (post))
                \else(\modality{#normalassign}{..
                        throw new java.lang.ArithmeticException();
                        ...}\endmodality (post)))
        \heuristics(executeIntegerAssignment)
        \displayname "division"
    };

    // ------------- modulo
    // a modulo operation cannot cause overflow since the magnitude of the result is always
    // less than the magnitude of the divisor (according to Java Lang Spec)

    assignmentModulo {
        \find(\modality{#normalassign}{..
                    #loc=#se0 % #se1;
                ...}\endmodality (post))
        \replacewith(\if(#se1 != 0)
                \then({#loc := javaMod(#se0, #se1)}
                    \modality{#normalassign}{.. ...}\endmodality (post))
                \else(\modality{#normalassign}{..
                           throw new java.lang.ArithmeticException();
                        ...}\endmodality (post)))
        \heuristics(executeIntegerAssignment)
        \displayname "modulo"
    };

}

\rules(programRules:Java) {

    // ------------- subtraction

    assignmentSubtractionInt {
        \find(\modality{#normalassign}{..
                    #loc = #seCharByteShortInt0 - #seCharByteShortInt1;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inInt(sub(#seCharByteShortInt0, #seCharByteShortInt1)))
        };
        \replacewith({#loc := javaSubInt(#seCharByteShortInt0, #seCharByteShortInt1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "subtraction"
    };

    assignmentSubtractionLong {
        \find(\modality{#normalassign}{..
                    #loc=#seCharByteShortInt - #seLong;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inLong(sub(#seCharByteShortInt, #seLong)))
        };
        \replacewith({#loc := javaSubLong(#seCharByteShortInt, #seLong)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "subtraction"
    };

    assignmentSubtractionLong2 {
        \find(\modality{#normalassign}{..
                    #loc=#seLong - #seCharByteShortInt;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inLong(sub(#seLong, #seCharByteShortInt)))
        };
        \replacewith(
            {#loc := javaSubLong(#seLong, #seCharByteShortInt)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "subtraction"
    };

    assignmentSubtractionLong3 {
        \find(\modality{#normalassign}{..
                     #loc=#seLong0 - #seLong1;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inLong(sub(#seLong0, #seLong1)))
        };
        \replacewith({#loc := javaSubLong(#seLong0, #seLong1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "subtraction"
    };

    // ------------- addition

    assignmentAdditionInt {
        \find(\modality{#normalassign}{..
                    #loc=#seCharByteShortInt0 + #seCharByteShortInt1;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inInt(add(#seCharByteShortInt0, #seCharByteShortInt1)))
        };
        \replacewith(
            {#loc := javaAddInt(#seCharByteShortInt0, #seCharByteShortInt1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "addition"
    };

    assignmentAdditionLong {
        \find(\modality{#normalassign}{..
                    #loc=#seCharByteShortInt + #seLong;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inLong(add(#seCharByteShortInt, #seLong)))
        };
        \replacewith(
            {#loc := javaAddLong(#seCharByteShortInt, #seLong)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "addition"
    };

    assignmentAdditionLong2 {
        \find(\modality{#normalassign}{..
                    #loc=#seLong + #seCharByteShortInt;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inLong(add(#seLong, #seCharByteShortInt)))
        };
        \replacewith({#loc := javaAddLong(#seLong, #seCharByteShortInt)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "addition"
    };

    // reviewed 04/20/2004, St.S.
    assignmentAdditionLong3 {
        \find(\modality{#normalassign}{..
                    #loc=#seLong0 + #seLong1;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inLong(add(#seLong0, #seLong1)))
        };
        \replacewith({#loc := javaAddLong(#seLong0, #seLong1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "addition"
    };

    // ------------- binary "and"
    // "and" and "or" can't overflow, no overflow branch needed

    assignmentBitwiseAndInt {
        \find(\modality{#normalassign}{..
                     #loc=#seCharByteShortInt0 & #seCharByteShortInt1;
                ...}\endmodality (post))
        \replacewith(
            {#loc := javaBitwiseAndInt(#seCharByteShortInt0, #seCharByteShortInt1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "bitwiseAnd"
    };

    assignmentBitwiseAndLong {
        \find(\modality{#normalassign}{..
                     #loc=#seCharByteShortInt & #seLong;
                ...}\endmodality (post))
        \replacewith(
            {#loc := javaBitwiseAndLong(#seCharByteShortInt, #seLong)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "bitwiseAnd"
    };

    assignmentBitwiseAndLong2 {
        \find(\modality{#normalassign}{..
                     #loc=#seLong & #seCharByteShortInt;
                ...}\endmodality (post))
        \replacewith(
            {#loc := javaBitwiseAndLong(#seLong, #seCharByteShortInt)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "bitwiseAnd"
    };

    assignmentBitwiseAndLong3 {
        \find(\modality{#normalassign}{..
                     #loc=#seLong0 & #seLong1;
                ...}\endmodality (post))
        \replacewith(
            {#loc := javaBitwiseAndLong(#seLong0, #seLong1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "bitwiseAnd"
    };

    // ------------- binary "or"

    assignmentBitwiseOrInt {
        \find(\modality{#normalassign}{..
                     #loc=#seCharByteShortInt0 | #seCharByteShortInt1;
                ...}\endmodality (post))
        \replacewith(
            {#loc := javaBitwiseOrInt(#seCharByteShortInt0, #seCharByteShortInt1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "bitwiseOr"
    };

    assignmentBitwiseOrLong {
        \find(\modality{#normalassign}{..
                     #loc=#seCharByteShortInt | #seLong;
                ...}\endmodality (post))
        \replacewith(
            {#loc := javaBitwiseOrLong(#seCharByteShortInt, #seLong)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "bitwiseOr"
    };

    // reviewed 04/20/2004, St.S.
    assignmentBitwiseOrLong2 {
        \find(\modality{#normalassign}{..
                     #loc=#seLong | #seCharByteShortInt;
                ...}\endmodality (post))
        \replacewith(
            {#loc := javaBitwiseOrLong(#seLong, #seCharByteShortInt)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "bitwiseOr"
    };

    // reviewed 04/20/2004, St.S.
    assignmentBitwiseOrLong3 {
        \find(\modality{#normalassign}{..
                     #loc=#seLong0 | #seLong1;
                ...}\endmodality (post))
        \replacewith(
            {#loc := javaBitwiseOrLong(#seLong0, #seLong1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "bitwiseOr"
    };

    // ------------- binary "xor"

    assignmentBitwiseXOrInt {
        \find(\modality{#normalassign}{..
                    #loc=#seCharByteShortInt0 ^ #seCharByteShortInt1;
                ...}\endmodality (post))
        \replacewith(
            {#loc := javaBitwiseXOrInt(#seCharByteShortInt0, #seCharByteShortInt1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "bitwiseXOr"
    };

    assignmentBitwiseXOrLong {
        \find(\modality{#normalassign}{..
                    #loc=#seCharByteShortInt ^ #seLong;
                ...}\endmodality (post))
        \replacewith(
            {#loc := javaBitwiseXOrLong(#seCharByteShortInt, #seLong)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "bitwiseXOr"
    };

    assignmentBitwiseXOrLong2 {
        \find(\modality{#normalassign}{..
                    #loc=#seLong ^ #seCharByteShortInt;
                ...}\endmodality (post))
        \replacewith(
            {#loc := javaBitwiseXOrLong(#seLong, #seCharByteShortInt)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "bitwiseXOr"
    };

    assignmentBitwiseXOrLong3 {
        \find(\modality{#normalassign}{..
                    #loc=#seLong0 ^ #seLong1;
                ...}\endmodality (post))
        \replacewith(
            {#loc := javaBitwiseXOrLong(#seLong0, #seLong1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "bitwiseXOr"
    };

    // ------------- binary shift-right

    assignmentShiftRightInt {
        \find(\modality{#normalassign}{..
                   #loc=#seCharByteShortInt0 >> #se;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inInt(shiftright(#seLong0, #se)))
        };
        \replacewith(
            {#loc := javaShiftRightInt(#seCharByteShortInt0, #se)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "shift"
    };

    assignmentShiftRightLong {
        \find(\modality{#normalassign}{..
                    #loc=#seLong0 >> #se;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inInt(shiftright(#seLong0, #se)))
        };
        \replacewith(
            {#loc := javaShiftRightLong(#seLong0, #se)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "shift"
    };

    // ------------- binary shift-left

    assignmentShiftLeftInt {
        \find(\modality{#normalassign}{..
                    #loc=#seCharByteShortInt0 << #se; ...}
                \endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inInt(shiftleft(#seCharByteShortInt0, #se)))
        };
        \replacewith(
            {#loc := javaShiftLeftInt(#seCharByteShortInt0, #se)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "shift"
    };

    assignmentShiftLeftLong {
        \find(\modality{#normalassign}{..
                    #loc=#seLong0 << #se;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inLong(shiftleft(#seLong0, #se)))
        };
        \replacewith(
            {#loc := javaShiftLeftLong(#seLong0, #se)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "shift"
    };

    // ------------- binary unsigned-shift-right

    assignmentUnsignedShiftRightInt {
        \find(\modality{#normalassign}{..
                    #loc=#seCharByteShortInt0 >>> #se; ...}
                \endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inLong(unsignedshiftrightJint(#seCharByteShortInt0, #se)))
        };
        \replacewith(
            {#loc := javaUnsignedShiftRightInt(#seCharByteShortInt0, #se)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "shift"
    };

    assignmentUnsignedShiftRightLong {
        \find(\modality{#normalassign}{..
                    #loc=#seLong0 >>> #se;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inLong(unsignedshiftrightJlong(#seLong0, #se)))
        };
        \replacewith({#loc := javaUnsignedShiftRightLong(#seLong0, #se)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "shift"
    };

    // ------------------------------------------------------------------------
    // ----------- Rules for unary plus, minus, and negation
    // ------------------------------------------------------------------------

    unaryMinusInt {
        \find(\modality{#normalassign}{..
                    #loc = - #seCharByteShortInt;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inInt(neg(#seCharByteShortInt)))
        };
        \replacewith({#loc := javaUnaryMinusInt(#seCharByteShortInt)}
            \modality{#normalassign}{..  ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "unaryMinus"
    };

    unaryMinusLong {
        \find(\modality{#normalassign}{..
                    #loc = - #seLong;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inLong(neg(#seLong)))
        };
        \replacewith({#loc := javaUnaryMinusLong(#seLong)}
            \modality{#normalassign}{..  ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "unary_minus"
    };

    bitwiseNegationInt {
        \find(\modality{#normalassign}{.. #loc = ~ #seCharByteShortInt; ...}\endmodality (post))
        \replacewith({#loc := javaBitwiseNegateInt(#se)}
            \modality{#normalassign}{..  ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "invertBits"
    };

    bitwiseNegationLong {
        \find(\modality{#normalassign}{.. #loc = ~ #se; ...}\endmodality (post))
        \replacewith({#loc := javaBitwiseNegateLong(#seLong)}
            \modality{#normalassign}{..  ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "invertBits"
    };

    // ------------------------------------------------------------------------
    // ------------- Rules for Java types narrowing casts
    // ------------------------------------------------------------------------

    narrowingByteCastShort {
        \find(\modality{#normalassign}{..
                    #loc = (byte) #seShort;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inByte(#seShort))
        };
        \replacewith({#loc := javaCastByte(#seShort)}
            \modality{#normalassign}{..  ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "cast"
    };

    narrowingByteCastInt {
        \find(\modality{#normalassign}{..
                    #loc = (byte) #seInt;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inByte(#seInt))
        };
        \replacewith({#loc := javaCastByte(#seInt)}
            \modality{#normalassign}{..  ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "cast"
    };

    narrowingByteCastLong {
        \find(\modality{#normalassign}{..
                    #loc = (byte) #seLong;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inByte(#seLong))
        };
        \replacewith({#loc := javaCastByte(#seLong)}
            \modality{#normalassign}{..  ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "cast"
    };

    narrowingShortCastInt {
        \find(\modality{#normalassign}{..
                   #loc = (short) #seInt;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inShort(#seInt))
        };
        \replacewith({#loc := javaCastShort(#seInt)}
            \modality{#normalassign}{..  ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "cast"
    };

    narrowingShortCastLong {
        \find(\modality{#normalassign}{..
                    #loc = (short) #seLong;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inShort(#seLong))
        };
        \replacewith({#loc := javaCastShort(#seLong)}
            \modality{#normalassign}{..  ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "cast"
    };

    narrowingIntCastLong {
        \find(\modality{#normalassign}{.. #loc = (int) #seLong; ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inInt(#seLong))
        };
        \replacewith({#loc := javaCastInt(#seLong)}
            \modality{#normalassign}{..  ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "cast"
    };

    narrowingCharCastByte {
        \find(\modality{#normalassign}{..
                    #loc = (char) #seByte;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inChar(#seByte))
        };
        \replacewith(
            {#loc := javaCastChar(#seByte)}
            \modality{#normalassign}{..  ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "cast"
    };

    narrowingCharCastShort {
        \find(\modality{#normalassign}{..
                    #loc = (char) #seShort;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inChar(#seShort))
        };
        \replacewith(
            {#loc := javaCastChar(#seShort)}
            \modality{#normalassign}{..  ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "cast"
    };

    narrowingCharCastInt {
        \find(\modality{#normalassign}{..
                    #loc = (char) #seInt;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inChar(#seInt))
        };
        \replacewith({#loc := javaCastChar(#seInt)}
            \modality{#normalassign}{..  ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "cast"
    };

    narrowingCharCastLong {
        \find(\modality{#normalassign}{..
                    #loc = (char) #seLong;
                ...}\endmodality (post))
        (intRules:checkedOverflow) {
            "Overflow check":
                \replacewith(inChar(#seLong))
        };
        \replacewith({#loc := javaCastChar(#seLong)}
            \modality{#normalassign}{..  ...}\endmodality (post))
        \heuristics(executeIntegerAssignment)
        \displayname "cast"
    };
}
