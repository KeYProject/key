/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

/**
    Rules for unchecked overflows.
    Most rules here are shared with check overflows semantics since the check is generated by the wd checker,
    the rest is analogous to unchecked overflows.

    See intRules.key for an overview of the integer files.
*/

\schemaVariables {
    \term int left, right, i, i0, i1;
    \term numbers iz, jz;
}

\rules(programRules:Java & (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF)) {

    // ------------------------------------------------------------------------
    // Rules to expand the predicates inByte, inShort, inInt, and inLong
    // ------------------------------------------------------------------------

    expandInByte {
        \find(inByte(i))
        \replacewith(true)
        \heuristics(concrete)
    };

    expandInChar {
        \find(inChar(i))
        \replacewith(true)
        \heuristics(concrete)
    };

    expandInShort {
        \find(inShort(i))
        \replacewith(true)
        \heuristics(concrete)
    };

    expandInInt {
        \find(inInt(i))
        \replacewith(true)
        \heuristics(concrete)
    };

    expandInLong {
        \find(inLong(i))
        \replacewith(true)
        \heuristics(concrete)
    };

    // --------------------------------------------------------------------------
    // Axioms defining the integer translation functions
    // --------------------------------------------------------------------------

    translateJavaUnaryMinusInt {
        \find(javaUnaryMinusInt(left))
        \replacewith(neg(left))
        \heuristics(javaIntegerSemantics, simplify)
        \displayname "translateJavaUnaryMinus"
    };

    translateJavaUnaryMinusLong {
        \find(javaUnaryMinusLong(left))
        \replacewith(neg(left))
        \heuristics(javaIntegerSemantics, simplify)
        \displayname "translateJavaUnaryMinus"
    };

    translatejavaBitwiseNegateInt {
        \find(javaBitwiseNegateInt(left))
        \replacewith(bitwiseNegateJint(left))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseNegation"
    };

    translatejavaBitwiseNegateLong {
        \find(javaBitwiseNegateLong(left))
        \replacewith(bitwiseNegateJlong(left))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseNegation"
    };

    translateJavaAddInt {
        \find(javaAddInt(left, right))
        \replacewith(add(left, right))
        \heuristics(javaIntegerSemantics, simplify)
        \displayname "translateJavaAdd"
    };

    translateJavaAddLong {
        \find(javaAddLong(left, right))
        \replacewith(add(left, right))
        \heuristics(javaIntegerSemantics, simplify)
        \displayname "translateJavaAdd"
    };

    translateJavaSubInt {
        \find(javaSubInt(left, right))
        \replacewith(sub(left, right))
        \heuristics(javaIntegerSemantics, simplify)
        \displayname "translateJavaSub"
    };

    translateJavaSubLong {
        \find(javaSubLong(left, right))
        \replacewith(sub(left, right))
        \heuristics(javaIntegerSemantics, simplify)
        \displayname "translateJavaSub"
    };

    translateJavaMulInt {
        \find(javaMulInt(left, right))
        \replacewith(mul(left, right))
        \heuristics(javaIntegerSemantics, simplify)
        \displayname "translateJavaMul"
    };

    translateJavaMulLong {
        \find(javaMulLong(left, right))
        \replacewith(mul(left, right))
        \heuristics(javaIntegerSemantics, simplify)
        \displayname "translateJavaMul"
    };

    translateJavaMod {
        \find(javaMod(left, right))
        \replacewith(jmod(left, right))
        \heuristics(javaIntegerSemantics, simplify)
        \displayname "translateJavaMod"
    };

    translateJavaDivInt {
        \find(javaDivInt(left, right))
        \replacewith(jdiv(left, right))
        \heuristics(javaIntegerSemantics, simplify)
        \displayname "translateJavaDiv"
    };

    translateJavaDivLong {
        \find(javaDivLong(left, right))
        \replacewith(jdiv(left, right))
        \heuristics(javaIntegerSemantics, simplify)
        \displayname "translateJavaDiv"
    };

    translateJavaCastByte {
        \find(javaCastByte(left))
        \replacewith(left)
        \heuristics(javaIntegerSemantics, simplify)
        \displayname "translateJavaCast"
    };

    translateJavaCastShort {
        \find(javaCastShort(left))
        \replacewith(left)
        \heuristics(javaIntegerSemantics, simplify)
        \displayname "translateJavaCast"
    };

    translateJavaCastInt {
        \find(javaCastInt(left))
        \replacewith(left)
        \heuristics(javaIntegerSemantics, simplify)
        \displayname "translateJavaCast"
    };

    translateJavaCastLong {
        \find(javaCastLong(left))
        \replacewith(left)
        \heuristics(javaIntegerSemantics, simplify)
        \displayname "translateJavaCast"
    };

    translateJavaCastChar {
        \find(javaCastChar(left))
        \replacewith(left)
        \heuristics(javaIntegerSemantics, simplify)
        \displayname "translateJavaCast"
    };

    translateJavaShiftRightInt {
        \find(javaShiftRightInt(left, right))
        \replacewith(shiftright(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaShiftRight"
    };

    translateJavaShiftRightLong {
        \find(javaShiftRightLong(left, right))
        \replacewith(shiftright(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaShiftRight"
    };

    translateJavaShiftLeftInt {
        \find(javaShiftLeftInt(left, right))
        \replacewith(shiftleft(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaShiftLeft"
    };

    translateJavaShiftLeftLong {
        \find(javaShiftLeftLong(left, right))
        \replacewith(shiftleft(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaShiftLeft"
    };

    /*
    translateJavaUnsignedShiftRightInt{
        \find(javaUnsignedShiftRightInt(left,right))
        \replacewith(unsignedshiftrightJint(left,right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaUnsignedShiftRight"
    };

    translateJavaUnsignedShiftRightLong{
        \find(javaUnsignedShiftRightLong(left,right))
        \replacewith(unsignedshiftrightJlong(left,right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaUnsignedShiftRight"
    };
    */

    translateJavaBitwiseOrInt {
        \find(javaBitwiseOrInt(left, right))
        \replacewith(binaryOr(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseOr"
    };

    translateJavaBitwiseOrLong {
        \find(javaBitwiseOrLong(left, right))
        \replacewith(binaryOr(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseOr"
    };

    translateJavaBitwiseAndInt {
        \find(javaBitwiseAndInt(left, right))
        \replacewith(binaryAnd(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseAnd"
    };

    translateJavaBitwiseAndLong {
        \find(javaBitwiseAndLong(left, right))
        \replacewith(binaryAnd(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseAnd"
    };

    translateJavaBitwiseXOrInt {
        \find(javaBitwiseXOrInt(left, right))
        \replacewith(binaryXOr(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseXOr"
    };

    translateJavaBitwiseXOrLong {
        \find(javaBitwiseXOrLong(left, right))
        \replacewith(binaryXOr(left, right))
        \heuristics(javaIntegerSemantics)
        \displayname "translateJavaBitwiseXOr"
    };
}
