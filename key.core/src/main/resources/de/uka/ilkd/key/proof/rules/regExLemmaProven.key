\rules(Strings:on){

  repeatMatchEmpty {
     \schemaVar \term RegEx rexp;
     \schemaVar \term int nTimes1;

     \find (match(repeat(rexp, nTimes1), seqEmpty))
     \replacewith (
        nTimes1 = 0 | (nTimes1 > 0 & match(rexp, seqEmpty))
     )
     \heuristics (simplify)
  };

  repeatZero {
     \schemaVar \term RegEx rexp;
     \schemaVar \term Seq string;

     \find (repeat(rexp, 0))
     \replacewith(regEx(seqEmpty))
     \heuristics (concrete)
  };

  repeatOnce {
     \schemaVar \term RegEx rexp;

     \find (repeat(rexp, 1))
     \replacewith (rexp)
     \heuristics (concrete)
  };




  // OPTIONAL RegEx Constructor
  optEmpty {
     \schemaVar \term RegEx rexp;

     \find (match(opt(rexp), seqEmpty))
     \replacewith(true)
     \heuristics (concrete)
  };

  // reduce

  regExConcatAltLeft {
     \schemaVar \term RegEx rexp1, rexp2, rexp3;
     \schemaVar \term Seq string;

     \find (match(regExConcat(alt(rexp1, rexp2), rexp3), string))
     \replacewith (
     		    match(regExConcat(rexp1, rexp3), string) 
		    |
     		    match(regExConcat(rexp2, rexp3), string)
	          )
     \heuristics (concrete)
  };

  regExConcatAltRight {
     \schemaVar \term RegEx rexp1, rexp2, rexp3;
     \schemaVar \term Seq string;

     \find (match(regExConcat(rexp1, alt(rexp2, rexp3)), string))
     \replacewith (
     		    match(regExConcat(rexp1, rexp2), string) 
		    |
     		    match(regExConcat(rexp1, rexp3), string)
	          )
     \heuristics (concrete)
  };

  regExConcatOptLeft {
     \schemaVar \term RegEx rexp1, rexp2;
     \schemaVar \term Seq string;

     \find (match(regExConcat(opt(rexp1), rexp2), string))
     \replacewith (
     		    match(rexp2, string) 
		    |
     		    match(regExConcat(rexp1, rexp2), string)
	          )
     \heuristics (concrete)
  };


  regExConcatOptRight {
     \schemaVar \term RegEx rexp1, rexp2;
     \schemaVar \term Seq string;

     \find (match(regExConcat(rexp1, opt(rexp2)), string))
     \replacewith (
     		    match(rexp1, string) 
		    |
     		    match(regExConcat(rexp1, rexp2), string)
	          )
     \heuristics (concrete)
  };

  regExConcatConcreteStringLeft {
     \schemaVar \term RegEx rexp;
     \schemaVar \term Seq string, pattern;

     \find (match(regExConcat(regEx(pattern), rexp), string))
     \replacewith (
                        seqLen(pattern) <= seqLen(string) &
                        match(regEx(pattern), seqSub(string, 0, seqLen(pattern))) &
                        match(rexp, seqSub(string, seqLen(pattern), seqLen(string)))
	          )
     \heuristics (concrete)
  };

  regExConcatConcreteStringRight {
     \schemaVar \term RegEx rexp;
     \schemaVar \term Seq string, pattern;

     \find (match(regExConcat(rexp, regEx(pattern)), string))
     \replacewith (
                        seqLen(pattern) <= seqLen(string) &
                        match(rexp, seqSub(string, 0, seqLen(string)-seqLen(pattern))) &
                        match(regEx(pattern), seqSub(string, seqLen(string)-seqLen(pattern), seqLen(string)))
	          )
     \heuristics (concrete)
  };

  regExConcatRepeatLeft {
     \schemaVar \term RegEx rexp1, rexp2;
     \schemaVar \term Seq string;
     \schemaVar \variables Seq string1, string2;
     \schemaVar \term int nTimes;

     \find (match(regExConcat(repeat(rexp1, nTimes), rexp2), string))
     \varcond(\notFreeIn(string1, string, rexp1, rexp2, nTimes), \notFreeIn(string2, string, rexp1, rexp2, nTimes))
     \replacewith (
     		    \if (nTimes = 0) 
                    \then (match(rexp2, string))
		    \else (
		      \if (nTimes < 0) 
                      \then (false)
		      \else (
		         \exists string1; \exists string2;(
		           match (repeat(rexp1, nTimes), string1) & 
			   match (rexp2, string2) &
                           string = seqConcat(string1, string2))			 
		    )
	          )
     )
     \heuristics (simplify)
  };

  regExConcatRepeatRight {
     \schemaVar \term RegEx rexp1, rexp2;
     \schemaVar \term Seq string;
     \schemaVar \variables Seq string1, string2;
     \schemaVar \term int nTimes;

     \find (match(regExConcat(rexp1, repeat(rexp2, nTimes)), string))
     \varcond(\notFreeIn(string1, string, rexp1, rexp2, nTimes), \notFreeIn(string2, string, rexp1, rexp2, nTimes))
     \replacewith (
     		    \if (nTimes = 0) 
                    \then (match(rexp1, string))
		    \else (
		      \if (nTimes < 0) 
                      \then (false)
		      \else (
			\exists string1; \exists string2;(
			  match (rexp1, string1) &
		          match (repeat(rexp2, nTimes), string2) & 
                          string = seqConcat(string1, string2) 			 
			 )
		    )
	          )
     )
     \heuristics (simplify)
  };

  concatRepeatContraction3 {
     \schemaVar \term RegEx rexp;
     \schemaVar \term int nTimes;


     \find (regExConcat(repeat(rexp, nTimes), regEx(seqEmpty)))
     \replacewith (
         repeat(rexp, nTimes)
     )
     \heuristics (concrete)
  };

  concatRepeatContraction3Sym {
     \schemaVar \term RegEx rexp;
     \schemaVar \term int nTimes;

     \find (regExConcat(regEx(seqEmpty), repeat(rexp, nTimes)))
     \replacewith (
         repeat(rexp, nTimes)
     )
     \heuristics (concrete)
  };


}
