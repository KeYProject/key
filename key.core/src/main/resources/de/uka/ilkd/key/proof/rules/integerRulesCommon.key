/**
  READ FIRST BEFORE EDITING:
    The rules in this file rewrite integer related statements without
  moving anything into the logic, e.g. decomposition of compound
  expressions.

  In case of changes PLEASE preserve the files intended meaning. If
  you want to test some rules before implementing them completely,
  please create a new file and include it into the standardRules.key

  Files:
     // rules treating Java programs

     integerAssignment2UpdateRules.key: all integer related assignment
                                        rules

     integerCommonRules.key: integer semantics independent rules which
         transform programs

     // rules treating integer semantics sensitive functions

     intRules.key: rules interpreting the generic translation
        functions 'java...' faithfully according to the Java Language
        Specification (sound, but a lot of divisions and modulo
        computation need to be performed)

     intRulesIgnoringOverflow.key: rules interpreting the generic translation
        functions 'java...' without overflow (not sound)

     intRulesArith.key: rules interpreting the generic translation
        functions 'java...' as in intRulesIgnoringOverflow.key, but
        requires to show absence of overflow or that the property to
        be proven does not depend on the value of an expression where
        an overflow occured (sound, but incomplete)

     // rules treating integer semantics insensitive functions

     integerSimplificationRules.key: rules for arithmetic functions
         that do not depend on the chose integer semantics

*/

\schemaVariables {
    \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;

    \program JavaCharExpression #seChar;
    \program JavaByteExpression #seByte, #seByte0, #seByte1;
    \program JavaShortExpression #seShort, #seShort0, #seShort1;
    \program JavaIntExpression #seInt, #seInt0, #seInt1;
    \program JavaLongExpression #seLong, #seLong0, #seLong1;
    \program JavaByteShortIntExpression #seByteShortInt,
    seByteShortInt0, #seByteShortInt1;
    \program JavaByteShortExpression #seByteShort;

    \program NonSimpleExpression #nse;
    \program Expression #e;
    \program Variable #v0;

    \program LeftHandSide #lhs;
    \formula post;

    \term int left, right, i;
}

\rules(programRules:Java) {

    // ------------------------------------------------------------------------
    // Rules for unary arithmetic operators  applied to a non-simple expression
    // ------------------------------------------------------------------------

    // reviewed 04/15/2004, St.S.
    compound_unary_plus_assignment {
        \find(\modality{#allmodal}{..#lhs=+#e;...}\endmodality (post))
        \replacewith(\modality{#allmodal}{..#lhs=#e;...}\endmodality (post)) \heuristics(executeIntegerAssignment)
    };

    // reviewed 04/15/2004, St.S.
    compound_unary_minus_eval {
        \find(\modality{#allmodal}{..#lhs=-#nse;...}\endmodality (post))
        \varcond(\newTypeOf(#v0, #nse))
        \replacewith(\modality{#allmodal}{.. #typeof(#nse) #v0 = #nse;
                #lhs = -#v0;
                           ...}\endmodality (post)) \heuristics(simplify_expression)
    };

    // reviewed 04/19/2004, St.S.
    compound_binary_neg {
        \find(\modality{#allmodal}{..#lhs=~#nse;...}\endmodality (post))
        \varcond(\newTypeOf(#v0, #nse))
        \replacewith(\modality{#allmodal}{..#typeof(#nse) #v0=#nse; #lhs=~#v0;...}
                \endmodality (post))
        \heuristics(simplify_expression)
    };

    // ------------------------------------------------------------------------
    //  Rules for widening or identity cast from Java types to Java types
    // ------------------------------------------------------------------------

    // reviewed 04/20/2004, St.S.
    widening_identity_cast_1 {
        \find(\modality{#allmodal}{.. #lhs = (byte) #seByte; ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. #lhs = #seByte;  ...}\endmodality (post))
        \heuristics(simplify_expression)
        \displayname "cast"
    };

    // reviewed 04/20/2004, St.S.
    widening_identity_cast_2 {
        \find(\modality{#allmodal}{.. #lhs = (short) #seByte; ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. #lhs = #seByte;  ...}\endmodality (post))
        \heuristics(simplify_expression)
        \displayname "cast"
    };

    // reviewed 04/20/2004, St.S.
    widening_identity_cast_3 {
        \find(\modality{#allmodal}{.. #lhs = (char) #seChar; ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. #lhs = #seChar;  ...}\endmodality (post))
        \heuristics(simplify_expression)
        \displayname "cast"
    };

    // reviewed 04/20/2004, St.S.
    widening_identity_cast_4 {
        \find(\modality{#allmodal}{.. #lhs = (short) #seShort; ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. #lhs = #seShort;  ...}\endmodality (post))
        \heuristics(simplify_expression)
        \displayname "cast"
    };

    // reviewed 04/20/2004, St.S.
    widening_identity_cast_5 {
        \find(\modality{#allmodal}{.. #lhs = (int) #seByteShortInt; ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. #lhs = #seByteShortInt;  ...}\endmodality (post))
        \heuristics(simplify_expression)
        \displayname "cast"
    };

    // reviewed 04/20/2004, St.S.
    widening_identity_cast_10 {
        \find(\modality{#allmodal}{.. #lhs = (long) #seByteShortInt; ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. #lhs = #seByteShortInt;  ...}\endmodality (post))
        \heuristics(simplify_expression)
        \displayname "cast"
    };

    // reviewed 04/20/2004, St.S.
    widening_identity_cast_11 {
        \find(\modality{#allmodal}{.. #lhs = (long) #seLong; ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. #lhs = #seLong;  ...}\endmodality (post))
        \heuristics(simplify_expression)
        \displayname "cast"
    };

    widening_identity_cast_12 {
        \find(\modality{#allmodal}{.. #lhs = (int) #seChar; ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. #lhs = #seChar;  ...}\endmodality (post))
        \heuristics(simplify_expression)
        \displayname "cast"
    };

    widening_identity_cast_13 {
        \find(\modality{#allmodal}{.. #lhs = (long) #seChar; ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. #lhs = #seChar;  ...}\endmodality (post))
        \heuristics(simplify_expression)
        \displayname "cast"
    };

    //
    // Expanding inRangeInt
    //

    expandInRangeByte {
        \find(inRangeByte(i))
        \replacewith(leq(i, byte_MAX) & leq(byte_MIN, i))
        \heuristics(defOps_expandRanges, delayedExpansion)
    };

    expandInRangeChar {
        \find(inRangeChar(i))
        \replacewith(leq(i, char_MAX) & leq(char_MIN, i))
        \heuristics(defOps_expandRanges, delayedExpansion)
    };

    expandInRangeShort {
        \find(inRangeShort(i))
        \replacewith(leq(i, short_MAX) & leq(short_MIN, i))
        \heuristics(defOps_expandRanges, delayedExpansion)
    };

    expandInRangeInt {
        \find(inRangeInt(i))
        \replacewith(leq(i, int_MAX) & leq(int_MIN, i))
        \heuristics(defOps_expandRanges, delayedExpansion)
    };

    expandInRangeLong {
        \find(inRangeLong(i))
        \replacewith(leq(i, long_MAX) & leq(long_MIN, i))
        \heuristics(defOps_expandRanges, delayedExpansion)
    };

    //
    // Lemmas for easy elimination of moduloInt
    //

    moduloIntFixpoint {
        \assumes(inRangeInt(i) ==>)
        \find(moduloInt(i))
        \sameUpdateLevel
        \replacewith(i)

        \heuristics(simplify)
    };

    moduloLongFixpoint {
        \assumes(inRangeLong(i) ==>)
        \find(moduloLong(i))
        \sameUpdateLevel
        \replacewith(i)

        \heuristics(simplify)
    };

    moduloShortFixpoint {
        \assumes(inRangeShort(i) ==>)
        \find(moduloShort(i))
        \sameUpdateLevel
        \replacewith(i)

        \heuristics(simplify)
    };

    moduloByteFixpoint {
        \assumes(inRangeByte(i) ==>)
        \find(moduloByte(i))
        \sameUpdateLevel
        \replacewith(i)

        \heuristics(simplify)
    };

    moduloCharFixpoint {
        \assumes(inRangeChar(i) ==>)
        \find(moduloChar(i))
        \sameUpdateLevel
        \replacewith(i)

        \heuristics(simplify)
    };

    moduloIntFixpointInline {
        \schemaVar \skolemTerm int moduloT;

        \find(moduloInt(i))
        \sameUpdateLevel
        \varcond(\newDependingOn(moduloT, i))
        \replacewith(moduloT)
        \add(\if(inRangeInt(i)) \then(i) \else(moduloT) = moduloT, moduloInt(i) = moduloT ==>)
    };

    moduloLongFixpointInline {
        \schemaVar \skolemTerm int moduloT;

        \find(moduloLong(i))
        \sameUpdateLevel
        \varcond(\newDependingOn(moduloT, i))
        \replacewith(moduloT)
        \add(\if(inRangeLong(i)) \then(i) \else(moduloT) = moduloT, moduloLong(i) = moduloT ==>)
    };

    moduloShortFixpointInline {
        \schemaVar \skolemTerm int moduloT;

        \find(moduloShort(i))
        \sameUpdateLevel
        \varcond(\newDependingOn(moduloT, i))
        \replacewith(moduloT)
        \add(\if(inRangeShort(i)) \then(i) \else(moduloT) = moduloT, moduloShort(i) = moduloT ==>)
    };

    moduloByteFixpointInline {
        \schemaVar \skolemTerm int moduloT;

        \find(moduloByte(i))
        \sameUpdateLevel
        \varcond(\newDependingOn(moduloT, i))
        \replacewith(moduloT)
        \add(\if(inRangeByte(i)) \then(i) \else(moduloT) = moduloT, moduloByte(i) = moduloT ==>)
    };

    moduloCharFixpointInline {
        \schemaVar \skolemTerm int moduloT;

        \find(moduloChar(i))
        \sameUpdateLevel
        \varcond(\newDependingOn(moduloT, i))
        \replacewith(moduloT)
        \add(\if(inRangeChar(i)) \then(i) \else(moduloT) = moduloT, moduloChar(i) = moduloT ==>)
    };

    //
    // Useful rules for elimination of inRangeInt moduloInt chains
    //

    moduloIntIsInRangeInt {
        \find(inRangeInt(moduloInt(i)))
        \replacewith(true)
        \heuristics(concrete)
    };

    moduloLongIsInRangeLong {
        \find(inRangeLong(moduloLong(i)))
        \replacewith(true)
        \heuristics(concrete)
    };

    moduloShortIsInRangeShort {
        \find(inRangeShort(moduloShort(i)))
        \replacewith(true)
        \heuristics(concrete)
    };

    moduloByteIsInRangeByte {
        \find(inRangeByte(moduloByte(i)))
        \replacewith(true)
        \heuristics(concrete)
    };

    moduloCharIsInRangeChar {
        \find(inRangeChar(moduloChar(i)))
        \replacewith(true)
        \heuristics(concrete)
    };

    translateCheckedUnaryMinusInt {
        \find(checkedUnaryMinusInt(left))
        \replacewith(neg(left))
        \heuristics(simplify)
    };
    translateCheckedUnaryMinusLong {
        \find(checkedUnaryMinusLong(left))
        \replacewith(neg(left))
        \heuristics(simplify)
    };
    translateCheckedBitwiseNegation {
        \find(checkedBitwiseNegation(left))
        \replacewith(sub(neg(left), 1))
        \heuristics(simplify)
    };
    translateCheckedAddInt {
        \find(checkedAddInt(left, right))
        \replacewith(add(left, right))
        \heuristics(simplify)
    };
    translateCheckedAddLong {
        \find(checkedAddLong(left, right))
        \replacewith(add(left, right))
        \heuristics(simplify)
    };
    translateCheckedSubInt {
        \find(checkedSubInt(left, right))
        \replacewith(sub(left, right))
        \heuristics(simplify)
    };
    translateCheckedSubLong {
        \find(checkedSubLong(left, right))
        \replacewith(sub(left, right))
        \heuristics(simplify)
    };
    translateCheckedMulInt {
        \find(checkedMulInt(left, right))
        \replacewith(mul(left, right))
        \heuristics(simplify)
    };
    translateCheckedMulLong {
        \find(checkedMulLong(left, right))
        \replacewith(mul(left, right))
        \heuristics(simplify)
    };
    translateCheckedDivInt {
        \find(checkedDivInt(left, right))
        \replacewith(jdiv(left, right))
        \heuristics(simplify)
    };
    translateCheckedDivLong {
        \find(checkedDivLong(left, right))
        \replacewith(jdiv(left, right))
        \heuristics(simplify)
    };
    translateCheckedShiftRightInt {
        \find(checkedShiftRightInt(left, right))
        \replacewith(shiftright(left, right))
        \heuristics(simplify)
    };
    translateCheckedShiftRightLong {
        \find(checkedShiftRightLong(left, right))
        \replacewith(shiftright(left, right))
        \heuristics(simplify)
    };
    translateCheckedShiftLeftInt {
        \find(checkedShiftLeftInt(left, right))
        \replacewith(shiftleft(left, right))
        \heuristics(simplify)
    };
    translateCheckedShiftLeftLong {
        \find(checkedShiftLeftLong(left, right))
        \replacewith(shiftleft(left, right))
        \heuristics(simplify)
    };
    /*
    translateCheckedUnsignedShiftRightInt {
      \find(checkedUnsignedShiftRightInt(left, right))
      \replacewith(x(left, right))
      \heuristics(simplify)
    };
    translateCheckedUnsignedShiftRightLong {
      \find(checkedUnsignedShiftRightLong(left, right))
      \replacewith(x(left, right))
      \heuristics(simplify)
    };
    */
    translateCheckedBitwiseOrInt {
        \find(checkedBitwiseOrInt(left, right))
        \replacewith(binaryOr(left, right))
        \heuristics(simplify)
    };
    translateCheckedBitwiseOrLong {
        \find(checkedBitwiseOrLong(left, right))
        \replacewith(binaryOr(left, right))
        \heuristics(simplify)
    };
    translateCheckedBitwiseAndInt {
        \find(checkedBitwiseAndInt(left, right))
        \replacewith(binaryAnd(left, right))
        \heuristics(simplify)
    };
    translateCheckedBitwiseAndLong {
        \find(checkedBitwiseAndLong(left, right))
        \replacewith(binaryAnd(left, right))
        \heuristics(simplify)
    };
    translateCheckedBitwiseXOrInt {
        \find(checkedBitwiseXOrInt(left, right))
        \replacewith(binaryXOr(left, right))
        \heuristics(simplify)
    };
    translateCheckedBitwiseXOrLong {
        \find(checkedBitwiseXOrLong(left, right))
        \replacewith(binaryXOr(left, right))
        \heuristics(simplify)
    };
}
