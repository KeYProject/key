/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

/**
    Integer semantics independent rules which transform programs.

    See intRules.key for an overview of the integer files.
*/

\schemaVariables {
    \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;

    \program JavaCharExpression #seChar;
    \program JavaByteExpression #seByte, #seByte0, #seByte1;
    \program JavaShortExpression #seShort, #seShort0, #seShort1;
    \program JavaIntExpression #seInt, #seInt0, #seInt1;
    \program JavaLongExpression #seLong, #seLong0, #seLong1;
    \program JavaByteShortIntExpression #seByteShortInt,
    seByteShortInt0, #seByteShortInt1;
    \program JavaByteShortExpression #seByteShort;

    \program NonSimpleExpression #nse;
    \program Expression #e;
    \program Variable #v0;

    \program LeftHandSide #lhs;
    \formula post;

    \term int left, right, i;
}

\rules(programRules:Java) {

    // ------------------------------------------------------------------------
    // Rules for unary arithmetic operators  applied to a non-simple expression
    // ------------------------------------------------------------------------

    // reviewed 04/15/2004, St.S.
    compound_unary_plus_assignment {
        \find(\modality{#allmodal}{..#lhs=+#e;...}\endmodality (post))
        \replacewith(\modality{#allmodal}{..#lhs=#e;...}\endmodality (post)) \heuristics(executeIntegerAssignment)
    };

    // reviewed 04/15/2004, St.S.
    compound_unary_minus_eval {
        \find(\modality{#allmodal}{..#lhs=-#nse;...}\endmodality (post))
        \varcond(\newTypeOf(#v0, #nse))
        \replacewith(\modality{#allmodal}{.. #typeof(#nse) #v0 = #nse;
                #lhs = -#v0;
                           ...}\endmodality (post)) \heuristics(simplify_expression)
    };

    // reviewed 04/19/2004, St.S.
    compound_binary_neg {
        \find(\modality{#allmodal}{..#lhs=~#nse;...}\endmodality (post))
        \varcond(\newTypeOf(#v0, #nse))
        \replacewith(\modality{#allmodal}{..#typeof(#nse) #v0=#nse; #lhs=~#v0;...}
                \endmodality (post))
        \heuristics(simplify_expression)
    };

    // ------------------------------------------------------------------------
    //  Rules for widening or identity cast from Java types to Java types
    // ------------------------------------------------------------------------

    // reviewed 04/20/2004, St.S.
    widening_identity_cast_1 {
        \find(\modality{#allmodal}{.. #lhs = (byte) #seByte; ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. #lhs = #seByte;  ...}\endmodality (post))
        \heuristics(simplify_expression)
        \displayname "cast"
    };

    // reviewed 04/20/2004, St.S.
    widening_identity_cast_2 {
        \find(\modality{#allmodal}{.. #lhs = (short) #seByte; ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. #lhs = #seByte;  ...}\endmodality (post))
        \heuristics(simplify_expression)
        \displayname "cast"
    };

    // reviewed 04/20/2004, St.S.
    widening_identity_cast_3 {
        \find(\modality{#allmodal}{.. #lhs = (char) #seChar; ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. #lhs = #seChar;  ...}\endmodality (post))
        \heuristics(simplify_expression)
        \displayname "cast"
    };

    // reviewed 04/20/2004, St.S.
    widening_identity_cast_4 {
        \find(\modality{#allmodal}{.. #lhs = (short) #seShort; ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. #lhs = #seShort;  ...}\endmodality (post))
        \heuristics(simplify_expression)
        \displayname "cast"
    };

    // reviewed 04/20/2004, St.S.
    widening_identity_cast_5 {
        \find(\modality{#allmodal}{.. #lhs = (int) #seByteShortInt; ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. #lhs = #seByteShortInt;  ...}\endmodality (post))
        \heuristics(simplify_expression)
        \displayname "cast"
    };

    // reviewed 04/20/2004, St.S.
    widening_identity_cast_10 {
        \find(\modality{#allmodal}{.. #lhs = (long) #seByteShortInt; ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. #lhs = #seByteShortInt;  ...}\endmodality (post))
        \heuristics(simplify_expression)
        \displayname "cast"
    };

    // reviewed 04/20/2004, St.S.
    widening_identity_cast_11 {
        \find(\modality{#allmodal}{.. #lhs = (long) #seLong; ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. #lhs = #seLong;  ...}\endmodality (post))
        \heuristics(simplify_expression)
        \displayname "cast"
    };

    widening_identity_cast_12 {
        \find(\modality{#allmodal}{.. #lhs = (int) #seChar; ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. #lhs = #seChar;  ...}\endmodality (post))
        \heuristics(simplify_expression)
        \displayname "cast"
    };

    widening_identity_cast_13 {
        \find(\modality{#allmodal}{.. #lhs = (long) #seChar; ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. #lhs = #seChar;  ...}\endmodality (post))
        \heuristics(simplify_expression)
        \displayname "cast"
    };
}
