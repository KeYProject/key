/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

// --------------- loops ------------------------------------------------------//
\schemaVariables {
    \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;
    \formula post;
    \program LeftHandSide #lhs, #lhs1;
    \program SimpleExpression #se;
    \program Statement #s;
    \program [list] Statement #slist, #slist1, #slist2, #slist3;
    \program Label #innerLabel, #outerLabel;
    \program Expression #e, #e0, #e1, #e2;
    \program NonSimpleExpression #nse;
    \program ForLoop #forloop;
    \program ProgramMethod #pm;
    \program Type #t, #t2;
    \program Variable #v, #v0, #v1, #a;
    \program NonStringLiteral #lit;
    \program ArrayLength #length;
    \program Label #lb, #lb1;
    \program [list] Ccatch #cs;
}

\rules(programRules:Java) {

    execNoCcatch {
        \find(
            \modality{#allmodal}{..
                    exec { #slist }
                ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{..
                    { #slist }
                ...}\endmodality (post))
        \heuristics(simplify_prog)
    };

    execEmpty {
        \find(
            \modality{#allmodal}{..
                    exec { } ccat #cs
                ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
    };

    ///////////////////////////////////
    // Abrupt completion catching rules
    ///////////////////////////////////

    execReturn {
        \find(
            \modality{#allmodal}{..
                    exec { return; #slist }
                    ccat ( \Return ) { #slist1 }
                    ccat #cs
                ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{..
                    { #slist1 }
                ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "execReturn"
    };

    execReturnVal {
        \find(
            \modality{#allmodal}{..
                    exec { return #se; #slist }
                    ccat ( \Return #t #v ) { #slist1 }
                    ccat #cs
                ...}\endmodality (post))
        \varcond(\sub(\typeof(#se), \typeof(#v)))
        \replacewith(\modality{#allmodal}{..
                    {
                        #t #v;
                        #v = (#t) #se;
                        #slist1
                    }
                ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "execReturn"
    };

    execBreak {
        \find(
            \modality{#allmodal}{..
                    exec { break; #slist }
                    ccat ( \Break ) { #slist1 }
                    ccat #cs
                ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{..
                    { #slist1 }
                ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "execBreak"
    };

    execBreakLabelMatch {
        \find(
            \modality{#allmodal}{..
                    exec { break #lb; #slist }
                    ccat ( \Break #lb ) { #slist1 }
                    ccat #cs
                ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{..
                    { #slist1 }
                ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "execBreakLabel"
    };

    execBreakLabelWildcard {
        \find(
            \modality{#allmodal}{..
                    exec { break #lb; #slist }
                    ccat ( \Break * ) { #slist1 }
                    ccat #cs
                ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{..
                    { #slist1 }
                ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "execBreakLabel"
    };

    execContinue {
        \find(
            \modality{#allmodal}{..
                    exec { continue; #slist }
                    ccat ( \Continue ) { #slist1 }
                    ccat #cs
                ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{..
                    { #slist1 }
                ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "execContinue"
    };

    execContinueLabelMatch {
        \find(
            \modality{#allmodal}{..
                    exec { continue #lb; #slist }
                    ccat ( \Continue #lb ) { #slist1 }
                    ccat #cs
                ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{..
                    { #slist1 }
                ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "execBreakLabel"
    };

    execContinueLabelWildcard {
        \find(
            \modality{#allmodal}{..
                    exec { continue #lb; #slist }
                    ccat ( \Continue * ) { #slist1 }
                    ccat #cs
                ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{..
                    { #slist1 }
                ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "execContinueLabel"
    };

    ////////////////////////////////////////////////
    // "Standard" exception rules (cf. try statement)
    ////////////////////////////////////////////////

    execCatchThrow {
        \find(\modality{#allmodal}{.. exec { throw #se; #slist }
                ccat ( #t #v0 ) { #slist1 } ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. if ( #se == null ) {
                      exec { throw new java.lang.NullPointerException (); }
                      ccat ( #t #v0 ) { #slist1 }
                } else if ( #se instanceof #t ) {
                      #t #v0;
                      #v0 = (#t) #se;
                      #slist1
                } else {
                      throw #se;
                } ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "execCatchThrow"
    };

    execMultipleCatchThrow {
        \find(\modality{#allmodal}{.. exec { throw #se; #slist }
                ccat ( #t #v0 ) { #slist1 }
                ccat ( #t2 #v1 ) { #slist3 }
                ccat #cs ...}\endmodality (post))
        \replacewith(\modality{#allmodal}{.. if ( #se == null ) {
                     exec { throw new java.lang.NullPointerException (); }
                     ccat ( #t #v0 ) { #slist1 }
                     ccat ( #t2 #v1 ) { #slist3 }
                     ccat #cs
                } else if ( #se instanceof #t ) {
                     #t #v0;
                     #v0 = (#t) #se;
                     #slist1
                } else {
                     exec { throw #se; }
                     ccat ( #t2 #v1 ) { #slist3 }
                     ccat #cs
                } ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "execCatchThrow"
    };

    //////////////////////////////////////////////////////////////////////
    // Rules for eliminating clauses that don't match the present behavior
    //////////////////////////////////////////////////////////////////////

    // Return

    // return-val clause has to come after return clause,
    // therefore can throw away whole exec statement.
    execReturnEliminateReturnVal {
        \find(\modality{#allmodal}{..
                   exec { return; #slist }
                   ccat ( \Return #t #v ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { return; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // break clause has to come after return clause,
    // therefore can throw away whole exec statement.
    execReturnEliminateBreak {
        \find(\modality{#allmodal}{..
                   exec { return; #slist }
                   ccat ( \Break ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { return; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // break-label clause has to come after return clause,
    // therefore can throw away whole exec statement.
    execReturnEliminateBreakLabel {
        \find(\modality{#allmodal}{..
                   exec { return; #slist }
                   ccat ( \Break #lb ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { return; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // break-label-wildcard clause has to come after return clause,
    // therefore can throw away whole exec statement.
    execReturnEliminateBreakLabelWildcard {
        \find(\modality{#allmodal}{..
                   exec { return; #slist }
                   ccat ( \Break * ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { return; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // continue clause has to come after return clause,
    // therefore can throw away whole exec statement.
    execReturnEliminateContinue {
        \find(\modality{#allmodal}{..
                   exec { return; #slist }
                   ccat ( \Continue ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { return; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // continue-label clause has to come after return clause,
    // therefore can throw away whole exec statement.
    execReturnEliminateContinueLabel {
        \find(\modality{#allmodal}{..
                   exec { return; #slist }
                   ccat ( \Continue #lb ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { return; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // continue-label-wildcard clause has to come after return clause,
    // therefore can throw away whole exec statement.
    execReturnEliminateContinueLabelWildcard {
        \find(\modality{#allmodal}{..
                   exec { return; #slist }
                   ccat ( \Continue * ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { return; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // exception ccatch clause has to come after return clause,
    // therefore can throw away whole exec statement.
    execReturnEliminateExcCcatch {
        \find(\modality{#allmodal}{..
                   exec { return; #slist }
                   ccat ( #t #v0 ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { return; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // Return-val

    execReturnValNonMatchingType {
        \find(
            \modality{#allmodal}{..
                    exec { return #se; #slist }
                    ccat ( \Return #t #v ) { #slist1 }
                    ccat #cs
                ...}\endmodality (post))
        \varcond(\not \sub(\typeof(#se), \typeof(#v)))
        \replacewith(\modality{#allmodal}{..
                    exec { return #se; #slist }
                    ccat #cs
                ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execReturnValEliminateReturn {
        \find(\modality{#allmodal}{..
                   exec { return #se; #slist }
                   ccat ( \Return ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { return #se; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // break clause has to come after return-val clause,
    // therefore can throw away whole exec statement.
    execReturnValEliminateBreak {
        \find(\modality{#allmodal}{..
                   exec { return #se; #slist }
                   ccat ( \Break ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { return #se; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // break-label clause has to come after return-val clause,
    // therefore can throw away whole exec statement.
    execReturnValEliminateBreakLabel {
        \find(\modality{#allmodal}{..
                   exec { return #se; #slist }
                   ccat ( \Break #lb ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { return #se; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // break-label-wildcard clause has to come after return-val clause,
    // therefore can throw away whole exec statement.
    execReturnValEliminateBreakLabelWildcard {
        \find(\modality{#allmodal}{..
                   exec { return #se; #slist }
                   ccat ( \Break * ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { return #se; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // continue clause has to come after return-val clause,
    // therefore can throw away whole exec statement.
    execReturnValEliminateContinue {
        \find(\modality{#allmodal}{..
                   exec { return #se; #slist }
                   ccat ( \Continue ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { return #se; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // continue-label clause has to come after return-val clause,
    // therefore can throw away whole exec statement.
    execReturnValEliminateContinueLabel {
        \find(\modality{#allmodal}{..
                   exec { return #se; #slist }
                   ccat ( \Continue #lb ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { return #se; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // continue-label-wildcard clause has to come after return-val clause,
    // therefore can throw away whole exec statement.
    execReturnValEliminateContinueLabelWildcard {
        \find(\modality{#allmodal}{..
                   exec { return #se; #slist }
                   ccat ( \Continue * ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { return #se; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // exception ccatch clause has to come after return-val clause,
    // therefore can throw away whole exec statement.
    execReturnValEliminateExcCcatch {
        \find(\modality{#allmodal}{..
                   exec { return #se; #slist }
                   ccat ( #t #v0 ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { return #se; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // Break

    execBreakEliminateReturn {
        \find(\modality{#allmodal}{..
                   exec { break; #slist }
                   ccat ( \Return ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { break; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execBreakEliminateReturnVal {
        \find(\modality{#allmodal}{..
                   exec { break; #slist }
                   ccat ( \Return #t #v ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { break; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // break-label clause has to come after break clause,
    // therefore can throw away whole exec statement.
    execBreakEliminateBreakLabel {
        \find(\modality{#allmodal}{..
                   exec { break; #slist }
                   ccat ( \Break #lb ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { break; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // break-label-wildcard clause has to come after break clause,
    // therefore can throw away whole exec statement.
    execBreakEliminateBreakLabelWildcard {
        \find(\modality{#allmodal}{..
                   exec { break; #slist }
                   ccat ( \Break * ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { break; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // continue clause has to come after break clause,
    // therefore can throw away whole exec statement.
    execBreakEliminateContinue {
        \find(\modality{#allmodal}{..
                   exec { break; #slist }
                   ccat ( \Continue ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { break; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // continue-label clause has to come after break clause,
    // therefore can throw away whole exec statement.
    execBreakEliminateContinueLabel {
        \find(\modality{#allmodal}{..
                   exec { break; #slist }
                   ccat ( \Continue #lb ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { break; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // continue-label-wildcard clause has to come after break clause,
    // therefore can throw away whole exec statement.
    execBreakEliminateContinueLabelWildcard {
        \find(\modality{#allmodal}{..
                   exec { break; #slist }
                   ccat ( \Continue * ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { break; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // exception ccatch clause has to come after break clause,
    // therefore can throw away whole exec statement.
    execBreakEliminateExcCcatch {
        \find(\modality{#allmodal}{..
                   exec { break; #slist }
                   ccat ( #t #v0 ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { break; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // Break-label

    execBreakLabelEliminateReturn {
        \find(\modality{#allmodal}{..
                   exec { break #lb; #slist }
                   ccat ( \Return ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { break #lb; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execBreakLabelEliminateReturnVal {
        \find(\modality{#allmodal}{..
                   exec { break #lb; #slist }
                   ccat ( \Return #t #v ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { break #lb; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execBreakLabelEliminateBreak {
        \find(\modality{#allmodal}{..
                   exec { break #lb; #slist }
                   ccat ( \Break ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { break #lb; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execBreakLabelEliminateBreakLabelNoMatch {
        \find(\modality{#allmodal}{..
                   exec { break #lb; #slist }
                   ccat ( \Break #lb1 ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \varcond(\different(#lb, #lb1))

        \replacewith(\modality{#allmodal}{..
                    exec { break #lb; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // continue ccatch clause has to come after break-label clause,
    // therefore can throw away whole exec statement.
    execBreakLabelEliminateContinue {
        \find(\modality{#allmodal}{..
                   exec { break #lb; #slist }
                   ccat ( \Continue ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { break #lb; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // continue-label ccatch clause has to come after break-label clause,
    // therefore can throw away whole exec statement.
    execBreakLabelEliminateContinueLabel {
        \find(\modality{#allmodal}{..
                   exec { break #lb; #slist }
                   ccat ( \Continue #lb1 ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { break #lb; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // continue-label-wildcard ccatch clause has to come after break-label clause,
    // therefore can throw away whole exec statement.
    execBreakLabelEliminateContinueLabelWildcard {
        \find(\modality{#allmodal}{..
                   exec { break #lb; #slist }
                   ccat ( \Continue * ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { break #lb; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // exception ccatch clause has to come after break-label clause,
    // therefore can throw away whole exec statement.
    execBreakLabelEliminateExcCcatch {
        \find(\modality{#allmodal}{..
                   exec { break #lb; #slist }
                   ccat ( #t #v ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { break #lb; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // Continue

    execContinueEliminateReturn {
        \find(\modality{#allmodal}{..
                   exec { continue; #slist }
                   ccat ( \Return ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { continue; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execContinueEliminateReturnVal {
        \find(\modality{#allmodal}{..
                   exec { continue; #slist }
                   ccat ( \Return #t #v ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { continue; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execContinueEliminateBreak {
        \find(\modality{#allmodal}{..
                   exec { continue; #slist }
                   ccat ( \Break ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { continue; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execContinueEliminateBreakLabel {
        \find(\modality{#allmodal}{..
                   exec { continue; #slist }
                   ccat ( \Break #lb ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { continue; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execContinueEliminateBreakLabelWildcard {
        \find(\modality{#allmodal}{..
                   exec { continue; #slist }
                   ccat ( \Break * ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { continue; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // exception ccatch clause has to come after continue clause,
    // therefore can throw away whole exec statement.
    execContinueEliminateExcCcatch {
        \find(\modality{#allmodal}{..
                   exec { continue; #slist }
                   ccat ( #t #v0 ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { continue; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // Continue-label

    execContinueLabelEliminateReturn {
        \find(\modality{#allmodal}{..
                   exec { continue #lb; #slist }
                   ccat ( \Return ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { continue #lb; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execContinueLabelEliminateReturnVal {
        \find(\modality{#allmodal}{..
                   exec { continue #lb; #slist }
                   ccat ( \Return #t #v ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { continue #lb; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execContinueLabelEliminateBreak {
        \find(\modality{#allmodal}{..
                   exec { continue #lb; #slist }
                   ccat ( \Break ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { continue #lb; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execContinueLabelEliminateBreakLabel {
        \find(\modality{#allmodal}{..
                   exec { continue #lb; #slist }
                   ccat ( \Break #lb1 ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { continue #lb; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execContinueLabelEliminateBreakLabelWildcard {
        \find(\modality{#allmodal}{..
                   exec { continue #lb; #slist }
                   ccat ( \Break * ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { continue #lb; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execContinueLabelEliminateContinue {
        \find(\modality{#allmodal}{..
                   exec { continue #lb; #slist }
                   ccat ( \Continue ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { continue #lb; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execContinueLabelEliminateContinueLabelNoMatch {
        \find(\modality{#allmodal}{..
                   exec { continue #lb; #slist }
                   ccat ( \Continue #lb1 ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \varcond(\different(#lb, #lb1))

        \replacewith(\modality{#allmodal}{..
                    exec { continue #lb; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // exception ccatch clause has to come after continue-label clause,
    // therefore can throw away whole exec statement.
    execContinueLabelEliminateExcCcatch {
        \find(\modality{#allmodal}{..
                   exec { continue #lb; #slist }
                   ccat ( #t #v ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    { continue #lb; }
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    // Exception

    execThrowEliminateReturn {
        \find(\modality{#allmodal}{..
                   exec { throw #se; #slist }
                   ccat ( \Return ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { throw #se; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execThrowEliminateReturnVal {
        \find(\modality{#allmodal}{..
                   exec { throw #se; #slist }
                   ccat ( \Return #t #v ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { throw #se; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execThrowEliminateBreak {
        \find(\modality{#allmodal}{..
                   exec { throw #se; #slist }
                   ccat ( \Break ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { throw #se; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execThrowEliminateBreakLabel {
        \find(\modality{#allmodal}{..
                   exec { throw #se; #slist }
                   ccat ( \Break #lb ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { throw #se; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execThrowEliminateBreakLabelWildcard {
        \find(\modality{#allmodal}{..
                   exec { throw #se; #slist }
                   ccat ( \Break * ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { throw #se; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execThrowEliminateContinue {
        \find(\modality{#allmodal}{..
                   exec { throw #se; #slist }
                   ccat ( \Continue ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { throw #se; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execThrowEliminateContinueLabel {
        \find(\modality{#allmodal}{..
                   exec { throw #se; #slist }
                   ccat ( \Continue #lb ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { throw #se; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

    execThrowEliminateContinueLabelWildcard {
        \find(\modality{#allmodal}{..
                   exec { throw #se; #slist }
                   ccat ( \Continue * ) { #slist1 }
                   ccat #cs
                ...}\endmodality (post))

        \replacewith(\modality{#allmodal}{..
                    exec { throw #se; }
                    ccat #cs
                ...}\endmodality (post))

        \heuristics(simplify_prog)
        \displayname "execEliminateNonMatching"
    };

}
