/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

\schemaVariables {
    \modalOperator {diamond, box, diamond_transaction, box_transaction} #normalassign;
    \modalOperator {diamond, box, diamond_transaction, box_transaction} #allmodal;

    \program JavaFloatExpression #seFloat, #seFloat0, #seFloat1;
    \program JavaDoubleExpression #seDouble, #seDouble0, #seDouble1;
    \program JavaCharByteShortIntExpression #seCharByteShortInt;
    \program JavaLongExpression #seLong;

    \program Variable #loc;
    \program LeftHandSide #lhs;

    \program Variable #v;

    \program NonSimpleExpression #nse;

    \formula post;

    \term float f1, f2;
}

\rules(programRules:Java) {

    // ------------- equality and inequality comparisons, float (similar to those in javaRules)
    // ------------- not covered by the same rules as int because the translation is to different predicates

    equality_comparison_simple_float {
        \find(\modality{#allmodal}{.. #lhs = #seFloat0 == #seFloat1; ...}\endmodality (post))
        \replacewith({#lhs := \if(eqFloat(#seFloat0, #seFloat1)) \then(TRUE) \else(FALSE)}
            \modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "equality comparison"
    };

    inequality_comparison_simple_float {
        \find(\modality{#allmodal}{.. #lhs = #seFloat0 != #seFloat1; ...}\endmodality (post))
        \replacewith({#lhs := \if(eqFloat(#seFloat0, #seFloat1)) \then(FALSE) \else(TRUE)}
            \modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "inequality comparison"
    };

    less_than_comparison_simple_float {
        \find(\modality{#allmodal}{.. #lhs = #seFloat0 < #seFloat1; ...}\endmodality (post))
        \replacewith({#lhs := \if(ltFloat(#seFloat0, #seFloat1)) \then(TRUE) \else(FALSE)}
            \modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "lesser than distinction"
    };

    less_equal_than_comparison_simple_float {
        \find(\modality{#allmodal}{.. #lhs = #seFloat0 <= #seFloat1; ...}\endmodality (post))
        \replacewith({#lhs := \if(leqFloat(#seFloat0, #seFloat1)) \then(TRUE) \else(FALSE)}
            \modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "less-or-equal than distinction"
    };

    greater_than_comparison_simple_float {
        \find(\modality{#allmodal}{.. #lhs = #seFloat0 > #seFloat1; ...}\endmodality (post))
        \replacewith({#lhs := \if(gtFloat(#seFloat0, #seFloat1)) \then(TRUE) \else(FALSE)}
            \modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "greater than distinction"
    };

    greater_equal_than_comparison_simple_float {
        \find(\modality{#allmodal}{.. #lhs = #seFloat0 >= #seFloat1; ...}\endmodality (post))
        \replacewith({#lhs := \if(geqFloat(#seFloat0, #seFloat1)) \then(TRUE) \else(FALSE)}
            \modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "greater-or-equal than distinction"
    };

    // ------------- equality and inequality comparisons, double (similar to those in javaRules)
    // ------------- not covered by the same rules as int because the translation is to different predicates

    equality_comparison_double {
        \find(\modality{#allmodal}{.. #lhs = #seDouble0 == #seDouble1; ...}\endmodality (post))
        \replacewith({#lhs := \if(eqDouble(#seDouble0, #seDouble1)) \then(TRUE) \else(FALSE)}
            \modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "equality comparison"
    };

    inequality_comparison_simple_double {
        \find(\modality{#allmodal}{.. #lhs = #seDouble0 != #seDouble1; ...}\endmodality (post))
        \replacewith({#lhs := \if(eqDouble(#seDouble0, #seDouble1)) \then(FALSE) \else(TRUE)}
            \modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "inequality comparison"
    };

    less_than_comparison_simple_double {
        \find(\modality{#allmodal}{.. #lhs = #seDouble0 < #seDouble1; ...}\endmodality (post))
        \replacewith({#lhs := \if(ltDouble(#seDouble0, #seDouble1)) \then(TRUE) \else(FALSE)}
            \modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "lesser than distinction"
    };

    less_equal_than_comparison_simple_double {
        \find(\modality{#allmodal}{.. #lhs = #seDouble0 <= #seDouble1; ...}\endmodality (post))
        \replacewith({#lhs := \if(leqDouble(#seDouble0, #seDouble1)) \then(TRUE) \else(FALSE)}
            \modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "less-or-equal than distinction"
    };

    greater_than_comparison_simple_double {
        \find(\modality{#allmodal}{.. #lhs = #seDouble0 > #seDouble1; ...}\endmodality (post))
        \replacewith({#lhs := \if(gtDouble(#seDouble0, #seDouble1)) \then(TRUE) \else(FALSE)}
            \modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "greater than distinction"
    };

    greater_equal_than_comparison_simple_double {
        \find(\modality{#allmodal}{.. #lhs = #seDouble0 >= #seDouble1; ...}\endmodality (post))
        \replacewith({#lhs := \if(geqDouble(#seDouble0, #seDouble1)) \then(TRUE) \else(FALSE)}
            \modality{#allmodal}{.. ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "greater-or-equal than distinction"
    };

    // ------------- unary minus for float

    unaryMinusFloat {
        \find(\modality{#normalassign}{..
                    #loc = - #seFloat;
                ...}\endmodality (post))
        \replacewith({#loc := javaUnaryMinusFloat(#seFloat)}
            \modality{#normalassign}{..  ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "unaryMinus"
    };

    unaryMinusDouble {
        \find(\modality{#normalassign}{..
                    #loc = - #seDouble;
                ...}\endmodality (post))
        \replacewith({#loc := javaUnaryMinusDouble(#seDouble)}
            \modality{#normalassign}{..  ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "unaryMinus"
    };

    // ------------- Arithmetic operations with strictfp
    // float
    assignmentAdditionFloatStrictFP {
        \find(\modality{#normalassign}{..
                    #loc=#seFloat0 + #seFloat1;
                ...}\endmodality (post))
        \varcond(\isInStrictFp)
        \replacewith(
            {#loc := addFloat(#seFloat0, #seFloat1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "addition"
    };

    assignmentSubtractionFloatStrictFP {
        \find(\modality{#normalassign}{..
                    #loc = #seFloat0 - #seFloat1;
                ...}\endmodality (post))
        \varcond(\isInStrictFp)
        \replacewith(
            {#loc := subFloat(#seFloat0, #seFloat1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "subtraction"
    };

    assignmentMultiplicationFloatStrictFP {
        \find(\modality{#normalassign}{..
                    #loc = #seFloat0 * #seFloat1;
                ...}\endmodality (post))
        \varcond(\isInStrictFp)
        \replacewith(
            {#loc := mulFloat(#seFloat0, #seFloat1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "multiplication"
    };

    assignmentDivisionFloatStrictFP {
        \find(\modality{#normalassign}{..
                    #loc = #seFloat0 / #seFloat1;
                ...}\endmodality (post))
        \varcond(\isInStrictFp)
        \replacewith(
            {#loc := divFloat(#seFloat0, #seFloat1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "division"
    };

    // double
    assignmentAdditionDoubleStrictFP {
        \find(\modality{#normalassign}{..
                    #loc=#seDouble0 + #seDouble1;
                ...}\endmodality (post))
        \varcond(\isInStrictFp)
        \replacewith(
            {#loc := addDouble(#seDouble0, #seDouble1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeDoubleAssignment)
        \displayname "addition"
    };

    assignmentSubtractionDoubleStrictFP {
        \find(\modality{#normalassign}{..
                    #loc = #seDouble0 - #seDouble1;
                ...}\endmodality (post))
        \varcond(\isInStrictFp)
        \replacewith(
            {#loc := subDouble(#seDouble0, #seDouble1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeDoubleAssignment)
        \displayname "subtraction"
    };

    assignmentMultiplicationDoubleStrictFP {
        \find(\modality{#normalassign}{..
                    #loc = #seDouble0 * #seDouble1;
                ...}\endmodality (post))
        \varcond(\isInStrictFp)
        \replacewith(
            {#loc := mulDouble(#seDouble0, #seDouble1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeDoubleAssignment)
        \displayname "multiplication"
    };

    assignmentDivisionDoubleStrictFP {
        \find(\modality{#normalassign}{..
                    #loc = #seDouble0 / #seDouble1;
                ...}\endmodality (post))
        \varcond(\isInStrictFp)
        \replacewith(
            {#loc := divDouble(#seDouble0, #seDouble1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeDoubleAssignment)
        \displayname "division"
    };

    // ------------- Arithmetic operations without strictfp

    assignmentAdditionFloat {
        \find(\modality{#normalassign}{..
                    #loc=#seFloat0 + #seFloat1;
                ...}\endmodality (post))
        \varcond(\not \isInStrictFp)
        \replacewith(
            {#loc := javaAddFloat(#seFloat0, #seFloat1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "addition"
    };

    assignmentAdditionDouble {
        \find(\modality{#normalassign}{..
                    #loc=#seDouble0 + #seDouble1;
                ...}\endmodality (post))
        \varcond(\not \isInStrictFp)
        \replacewith(
            {#loc := javaAddDouble(#seDouble0, #seDouble1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "addition"
    };

    assignmentSubtractionFloat {
        \find(\modality{#normalassign}{..
                    #loc = #seFloat0 - #seFloat1;
                ...}\endmodality (post))
        \varcond(\not \isInStrictFp)
        \replacewith(
            {#loc := javaSubFloat(#seFloat0, #seFloat1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "subtraction"
    };

    assignmentSubtractionDouble {
        \find(\modality{#normalassign}{..
                    #loc = #seDouble0 - #seDouble1;
                ...}\endmodality (post))
        \varcond(\not \isInStrictFp)
        \replacewith(
            {#loc := javaSubDouble(#seDouble0, #seDouble1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "subtraction"
    };

    assignmentMultiplicationFloat {
        \find(\modality{#normalassign}{..
                    #loc = #seFloat0 * #seFloat1;
                ...}\endmodality (post))
        \varcond(\not \isInStrictFp)
        \replacewith(
            {#loc := javaMulFloat(#seFloat0, #seFloat1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "multiplication"
    };

    assignmentMultiplicationDouble {
        \find(\modality{#normalassign}{..
                    #loc = #seDouble0 * #seDouble1;
                ...}\endmodality (post))
        \varcond(\not \isInStrictFp)
        \replacewith(
            {#loc := javaMulDouble(#seDouble0, #seDouble1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "multiplication"
    };

    assignmentDivisionFloat {
        \find(\modality{#normalassign}{..
                    #loc = #seFloat0 / #seFloat1;
                ...}\endmodality (post))
        \varcond(\not \isInStrictFp)
        \replacewith(
            {#loc := javaDivFloat(#seFloat0, #seFloat1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "division"
    };

    assignmentDivisionDouble {
        \find(\modality{#normalassign}{..
                    #loc = #seDouble0 / #seDouble1;
                ...}\endmodality (post))
        \varcond(\not \isInStrictFp)
        \replacewith(
            {#loc := javaDivDouble(#seDouble0, #seDouble1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "division"
    };

    // modulo operations
    assignmentModFloat {
        \find(\modality{#normalassign}{..
                    #loc = #seFloat0 % #seFloat1;
                ...}\endmodality (post))
        \replacewith(
            {#loc := javaModFloat(#seFloat0, #seFloat1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "mod"
    };

    assignmentModDouble {
        \find(\modality{#normalassign}{..
                    #loc = #seDouble0 % #seDouble1;
                ...}\endmodality (post))
        \replacewith(
            {#loc := javaModDouble(#seDouble0, #seDouble1)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "mod"
    };

    // Operations on combined float/int

    intLongToFloatAddition1 {
        \find(\modality{#normalassign}{..
                    #loc = #seLong + #seFloat;
                ...}\endmodality (post))
        \replacewith({#loc := javaAddFloat((float)#seLong, #seFloat)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "float addition"
    };

    // For int/short/char/byte, converting to float is the same as
    // converting to long first, then float
    intToFloatAddition {
        \find(\modality{#normalassign}{..
                    #loc = #seCharByteShortInt + #seFloat;
                ...}\endmodality (post))
        \replacewith({#loc := javaAddFloat((float)#seCharByteShortInt, #seFloat)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "float addition"
    };

    castLongToFloatAddition2 {
        \find(\modality{#normalassign}{..
                    #loc = #seFloat + #seLong;
                ...}\endmodality (post))
        \replacewith({#loc := javaAddFloat(#seFloat, (float)#seLong)}
            \modality{#normalassign}{.. ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "float addition"
    };

    // Typecasts


    // KeY integers are not bounded in size, but ints fit inside long
    wideningCastLongToFloat {
        \find(\modality{#normalassign}{..
                    #loc = (float) #seLong;
                ...}\endmodality (post))
        \replacewith({#loc := (float)#seLong}
            \modality{#normalassign}{..  ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "cast"
    };

    wideningCastIntToFloat {
        \find(\modality{#normalassign}{..
                    #loc = (float) #seCharByteShortInt;
                ...}\endmodality (post))
        \replacewith({#loc := (float)(#seCharByteShortInt)}
            \modality{#normalassign}{..  ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "cast"
    };

    identityCastFloat {
        \find(\modality{#normalassign}{..
                    #loc = (float) #seFloat;
                ...}\endmodality (post))
        \replacewith(\modality{#normalassign}{..
                    #loc = #seFloat;
                ...}\endmodality (post))
        \heuristics(simplify_expression)
        \displayname "identity cast"
    };

    identityCastDouble {
        \find(\modality{#normalassign}{..
                    #loc = (double) #seDouble;
                ...}\endmodality (post))
        \replacewith(\modality{#normalassign}{..
                    #loc = #seDouble;
                ...}\endmodality (post))
        \heuristics(simplify_expression)
        \displayname "identity cast"
    };

    narrowingCastFloatToInt {
        \find(\modality{#normalassign}{..
                    #loc = (int) #seFloat;
                ...}\endmodality (post))
        \replacewith({#loc := (long)(#seFloat)}
            \modality{#normalassign}{..  ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "cast"
    };

    narrowingCastFloatToLong {
        \find(\modality{#normalassign}{..
                    #loc = (long) #seFloat;
                ...}\endmodality (post))
        \replacewith({#loc := (long)(#seFloat)}
            \modality{#normalassign}{..  ...}\endmodality (post))
        \heuristics(executeFloatAssignment)
        \displayname "cast"
    };

    // Non-simple expressions

    compound_float_cast_expression {
        \find(\modality{#normalassign}{.. #loc = (float) #nse; ...}\endmodality (post))
        \varcond(\newTypeOf(#v, #nse))
        \replacewith(\modality{#normalassign}{.. #typeof(#nse) #v = #nse; #loc = (float) #v;  ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "cast"
    };

    compound_double_cast_expression {
        \find(\modality{#normalassign}{.. #loc = (double) #nse; ...}\endmodality (post))
        \varcond(\newTypeOf(#v, #nse))
        \replacewith(\modality{#normalassign}{.. #typeof(#nse) #v = #nse; #loc = (double) #v;  ...}\endmodality (post))
        \heuristics(simplify_prog)
        \displayname "cast"
    };

}
