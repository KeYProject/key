/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

// This file contains only the RULES for the definitional
// extension of the sequence datatype.
// The core theory is contained in file  seqCoreRules.key
// Find the DECLARATIONS in file seq.key.
// RULES for permutations are contained in the file seqPerm.key.

\sorts {
    \generic alpha, beta;
}

\rules(sequences:on) {
    // --------------------------------------------------------------------------
    //  These taclets were not part of the original Seq axiomatization by
    //  B.Weiss
    //  These taclets extend the signature of the core theory by indroducing
    //  function  symbols via explicit definition.
    //  Consistency of the extended theory is thus guaranteed by
    //  the Theorem on  conservative extentions.
    // --------------------------------------------------------------------------


    defOfEmpty {
        \schemaVar \term any te;
        \schemaVar \variables int uSub;

        \find(seqEmpty)

        \varcond(\notFreeIn(uSub, te))
        \replacewith(seqDef{uSub;}(0, 0, te))
    };

    defOfSeqSingleton {
        \schemaVar \term any x;
        \schemaVar \variables int uSub;

        \find(seqSingleton(x))

        \varcond(\notFreeIn(uSub, x))
        \replacewith(seqDef{uSub;}(0, 1, x))
    };

    defOfSeqConcat {
        \schemaVar \term Seq seq1, seq2;
        \schemaVar \variables int uSub;

        \find(seqConcat(seq1, seq2))

        \varcond(\notFreeIn(uSub, seq1),
            \notFreeIn(uSub, seq2))
        \replacewith(seqDef{uSub;}(0, seqLen(seq1) + seqLen(seq2),
                \if(uSub < seqLen(seq1))
                    \then(any::seqGet(seq1, uSub))
                    \else(any::seqGet(seq2, uSub - seqLen(seq1)))))

    };

    // --------------------------------------------------------------------
    //  This definition of "seqSub" differs from the original one.
    //  Now seqSub(seq,from,from) is the empty sequence, previously it
    //  was the singleton <seq(from)>.
    //  The new semantics however is in line with all other definitions
    //  involving a lower and and upper bound. The upper bound is always
    //  strict.
    // --------------------------------------------------------------------

    defOfSeqSub {
        \schemaVar \term Seq seq;
        \schemaVar \term int from, to;
        \schemaVar \variables int uSub;

        \find(seqSub(seq, from, to))
        \varcond(\notFreeIn(uSub, seq),
            \notFreeIn(uSub, from),
            \notFreeIn(uSub, to))
        \replacewith(seqDef{uSub;}(from, to, any::seqGet(seq, uSub)))

    };

    defOfSeqReverse {
        \schemaVar \term Seq seq;
        \schemaVar \variables int uSub;

        \find(seqReverse(seq))

        \varcond(\notFreeIn(uSub, seq))
        \replacewith(seqDef{uSub;}(0, seqLen(seq), any::seqGet(seq, seqLen(seq) - uSub - 1)))

    };

    defOfSeqUpd {
        \schemaVar \term Seq seq;
        \schemaVar \term int idx;
        \schemaVar \term any value;
        \schemaVar \variables int uSub;

        \find(seqUpd(seq, idx, value))

        \varcond(\notFreeIn(uSub, idx), \notFreeIn(uSub, value), \notFreeIn(uSub, seq))
        \replacewith(seqDef{uSub;}(0, seqLen(seq), \if(uSub=idx) \then(value) \else(any::seqGet(seq,uSub))))
    };

    // --------------------------------------------------------------------
    // rule for seqIndexOf
    // This is logically equivalent to a conditional (partial)
    // definition of  seqIndexOf
    // See also  taclet "seqIndexOf2" below
    // --------------------------------------------------------------------


    seqIndexOf {
        \schemaVar \term Seq s;
        \schemaVar \term any t;
        \schemaVar \skolemTerm int jsk;
        \schemaVar \variables int n, m;

        \find(seqIndexOf(s, t))
        \varcond(
            \notFreeIn(n, s),
            \notFreeIn(n, t),
            \notFreeIn(m, s),
            \notFreeIn(m, t))
        \add((\exists n; (0 <= n & n < seqLen(s) & any::seqGet(s, n) = t))
            ->
            (0 <= seqIndexOf(s, t) & seqIndexOf(s, t) < seqLen(s) &
                any::seqGet(s, seqIndexOf(s, t)) = t &
                \forall m; ((0 <= m & m < seqIndexOf(s, t)) -> any::seqGet(s, m) != t)) ==>)
    };

    // ====================================================================
    //
    //  Derived taclets
    //  All the following taclets can be derived from the taclets occuring prior
    //  to this point in this file.
    //  The taclets differ from the original axiomatization by
    //   (1) the right hand bound in seqDef is now strict
    //   (2) the default value is explicitely given by  seqGetOutside
    //       instead of   any::seqGet(seqEmpty, 0)
    //
    // ====================================================================


    \lemma
    seqSelfDefinition {
        \schemaVar \term Seq seq;
        \schemaVar \variables Seq s;
        \schemaVar \variables int u;
        \find(seq)
        \add(\forall s; (s = seqDef{u;}(0, seqLen(s), any::seqGet(s, u))) ==>)
    };

    \lemma
    seqOutsideValue {
        \schemaVar \variables Seq s;
        \schemaVar \variables int iv;
        \find(seqGetOutside)
        \add(\forall s; (\forall iv; ((iv < 0 | seqLen(s) <= iv)
                    -> any::seqGet(s, iv) = seqGetOutside)) ==>)
    };

    // --------------------------------------------------------------------
    // derived rule for generic types
    // --------------------------------------------------------------------

    \lemma
    castedGetAny {
        \schemaVar \term Seq seq;
        \schemaVar \term int idx;

        \find((beta)any::seqGet(seq, idx))

        \replacewith(beta::seqGet(seq, idx))

        \heuristics(simplify)
    };

    \lemma
    seqGetAlphaCast {
        \schemaVar \term Seq seq;
        \schemaVar \term int at;

        \find(alpha::seqGet(seq, at))
        \add((alpha)any::seqGet(seq, at) = alpha::seqGet(seq, at) ==>)
        \heuristics(inReachableStateImplication)
    };

    // --------------------------------------------------------------------
    // derived rule for getOfseqX
    // --------------------------------------------------------------------

    \lemma
    getOfSeqSingleton {
        \schemaVar \term any x;
        \schemaVar \term int idx;

        \find(alpha::seqGet(seqSingleton(x), idx))

        \replacewith(\if(idx = 0)
                \then((alpha)x)
                \else((alpha)seqGetOutside))

        \heuristics(simplify)
    };

    \lemma
    getOfSeqSingletonConcrete {
        \schemaVar \term any x;
        \find(alpha::seqGet(seqSingleton(x), 0))
        \replacewith((alpha)x)
        \heuristics(concrete)
    };

    \lemma
    getOfSeqConcat {
        \schemaVar \term Seq seq, seq2;
        \schemaVar \term int idx;

        \find(alpha::seqGet(seqConcat(seq, seq2), idx))

        \replacewith(\if(idx < seqLen(seq))
                \then(alpha::seqGet(seq, idx))
                \else(alpha::seqGet(seq2, idx - seqLen(seq))))

        \heuristics(simplify_enlarging)
    };

    \lemma
    getOfSeqSub {
        \schemaVar \term Seq seq;
        \schemaVar \term int idx, from, to;

        \find(alpha::seqGet(seqSub(seq, from, to), idx))

        \replacewith(\if(0 <= idx & idx < (to - from))
                \then(alpha::seqGet(seq, idx + from))
                \else((alpha)seqGetOutside))

        \heuristics(simplify_enlarging)
    };

    \lemma
    getOfSeqReverse {
        \schemaVar \term Seq seq;
        \schemaVar \term int idx;

        \find(alpha::seqGet(seqReverse(seq), idx))

        \replacewith(alpha::seqGet(seq, seqLen(seq) - 1 - idx))

        \heuristics(simplify_enlarging)
    };

    \lemma
    getOfSeqUpd {
        \schemaVar \term Seq seq;
        \schemaVar \term int idx, jdx;
        \schemaVar \term any value;

        \find(alpha::seqGet(seqUpd(seq, idx, value), jdx))
        \replacewith(\if(0<=jdx & jdx < seqLen(seq) & idx=jdx) \then((alpha)value) \else(alpha::seqGet(seq, jdx)))
        \heuristics(simplify_enlarging)
    };

    // --------------------------------------------------------------------
    // derived rule for lenOfX
    // --------------------------------------------------------------------

    \lemma
    lenOfSeqEmpty {
        \find(seqLen(seqEmpty))

        \replacewith(0)

        \heuristics(concrete)
    };

    \lemma
    lenOfSeqSingleton {
        \schemaVar \term alpha x;

        \find(seqLen(seqSingleton(x)))

        \replacewith(1)

        \heuristics(concrete)
    };

    \lemma
    lenOfSeqConcat {
        \schemaVar \term Seq seq, seq2;

        \find(seqLen(seqConcat(seq, seq2)))

        \replacewith(seqLen(seq) + seqLen(seq2))

        \heuristics(simplify)
    };

    \lemma
    lenOfSeqSub {
        \schemaVar \term Seq seq;
        \schemaVar \term int from, to;

        \find(seqLen(seqSub(seq, from, to)))

        \replacewith(\if(from < to) \then(to - from) \else(0))

        \heuristics(simplify)
    };

    \lemma
    lenOfSeqReverse {
        \schemaVar \term Seq seq;

        \find(seqLen(seqReverse(seq)))

        \replacewith(seqLen(seq))

        \heuristics(simplify)
    };

    \lemma
    lenOfSeqUpd {
        \schemaVar \term Seq seq;
        \schemaVar \term int idx;
        \schemaVar \term any value;

        \find(seqLen(seqUpd(seq, idx, value)))
        \replacewith(seqLen(seq))
        \heuristics(simplify)
    };


    // --------------------------------------------------------------------------
    // derived EQ versions
    // --------------------------------------------------------------------------

    \lemma
    equalityToSeqGetAndSeqLenLeft {
        \schemaVar \term Seq s, s2;
        \schemaVar \variables int iv;

        \find(s = s2 ==>)
        \varcond(\notFreeIn(iv, s, s2))

        \add(seqLen(s) = seqLen(s2)
            & \forall iv; (0 <= iv & iv < seqLen(s)
                -> any::seqGet(s, iv) = any::seqGet(s2, iv)) ==>)

        \heuristics(inReachableStateImplication)
        // uncertain about heuristics??
    };

    \lemma
    equalityToSeqGetAndSeqLenRight {
        \schemaVar \term Seq s, s2;
        \schemaVar \variables int iv;

        \find( ==> s = s2)
        \varcond(\notFreeIn(iv, s, s2))

        \replacewith( ==> seqLen(s) = seqLen(s2)
            & \forall iv; (0 <= iv & iv < seqLen(s)
                -> any::seqGet(s, iv) = any::seqGet(s2, iv)))

        \heuristics(simplify_enlarging)
    };

    \lemma
    getOfSeqSingletonEQ {
        \schemaVar \term any x;
        \schemaVar \term int idx;
        \schemaVar \term Seq EQ;

        \assumes(seqSingleton(x) = EQ ==>)
        \find(alpha::seqGet(EQ, idx))
        \sameUpdateLevel

        \replacewith(\if(idx = 0)
                \then((alpha)x)
                \else((alpha)seqGetOutside))

        \heuristics(no_self_application, simplify_enlarging)
        \displayname "getOfSeqSingleton"
    };

    \lemma
    getOfSeqConcatEQ {
        \schemaVar \term Seq seq, seq2;
        \schemaVar \term int idx;
        \schemaVar \term Seq EQ;

        \assumes(seqConcat(seq, seq2) = EQ ==>)
        \find(alpha::seqGet(EQ, idx))
        \sameUpdateLevel

        \replacewith(\if(idx < seqLen(seq))
                \then(alpha::seqGet(seq, idx))
                \else(alpha::seqGet(seq2, idx - seqLen(seq))))

        \heuristics(no_self_application, simplify_enlarging)
        \displayname "getOfSeqConcat"
    };

    \lemma
    getOfSeqSubEQ {
        \schemaVar \term Seq seq;
        \schemaVar \term int idx, from, to;
        \schemaVar \term Seq EQ;

        \assumes(seqSub(seq, from, to) = EQ ==>)
        \find(alpha::seqGet(EQ, idx))
        \sameUpdateLevel

        \replacewith(\if(0 <= idx & idx < (to - from))
                \then(alpha::seqGet(seq, idx + from))
                \else((alpha)seqGetOutside))

        \heuristics(no_self_application, simplify_enlarging)
        \displayname "getOfSeqSub"
    };

    \lemma
    getOfSeqReverseEQ {
        \schemaVar \term Seq seq;
        \schemaVar \term int idx;
        \schemaVar \term Seq EQ;

        \assumes(seqReverse(seq) = EQ ==>)
        \find(alpha::seqGet(EQ, idx))
        \sameUpdateLevel

        \replacewith(alpha::seqGet(seq, seqLen(seq) - 1 - idx))

        \heuristics(no_self_application, simplify_enlarging)
        \displayname "getOfSeqReverse"
    };

    \lemma
    lenOfSeqEmptyEQ {
        \schemaVar \term alpha x;
        \schemaVar \term Seq EQ;

        \assumes(seqEmpty = EQ ==>)
        \find(seqLen(EQ))
        \sameUpdateLevel
        \replacewith(0)

        \heuristics(concrete)
        \displayname "lenOfSeqEmpty"
    };

    \lemma
    lenOfSeqSingletonEQ {
        \schemaVar \term alpha x;
        \schemaVar \term Seq EQ;

        \assumes(seqSingleton(x) = EQ ==>)
        \find(seqLen(EQ))
        \sameUpdateLevel
        \replacewith(1)

        \heuristics(concrete)
        \displayname "lenOfSeqSingleton"
    };

    \lemma
    lenOfSeqConcatEQ {
        \schemaVar \term Seq seq, seq2;
        \schemaVar \term Seq EQ;

        \assumes(seqConcat(seq, seq2) = EQ ==>)
        \find(seqLen(EQ))
        \sameUpdateLevel

        \replacewith(seqLen(seq) + seqLen(seq2))

        \heuristics(simplify)
        \displayname "lenOfSeqConcat"
    };

    \lemma
    lenOfSeqSubEQ {
        \schemaVar \term Seq seq;
        \schemaVar \term int from, to;
        \schemaVar \term Seq EQ;

        \assumes(seqSub(seq, from, to) = EQ ==>)
        \find(seqLen(EQ))
        \sameUpdateLevel

        \replacewith(\if(from < to) \then(to - from) \else(0))

        \heuristics(simplify, find_term_not_in_assumes)
        \displayname "lenOfSeqSub"
    };

    \lemma
    lenOfSeqReverseEQ {
        \schemaVar \term Seq seq;
        \schemaVar \term Seq EQ;

        \assumes(seqReverse(seq) = EQ ==>)
        \find(seqLen(EQ))
        \sameUpdateLevel

        \replacewith(seqLen(seq))

        \heuristics(simplify)
        \displayname "lenOfSeqReverse"
    };

    \lemma
    getOfSeqDefEQ {
        \schemaVar \term int idx, from, to;
        \schemaVar \term Seq EQ;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \assumes(seqDef{uSub;}(from, to, t) = EQ ==>)
        \find(alpha::seqGet(EQ, idx))
        \sameUpdateLevel
        \varcond(\notFreeIn(uSub, from),
            \notFreeIn(uSub, to))
        \replacewith(\if(0 <= idx & idx < (to - from))
                \then((alpha){\subst uSub; (idx + from)}t)
                \else((alpha)seqGetOutside))

        \heuristics(simplify_enlarging)
        \displayname "getOfSeqDef"
    };

    \lemma
    lenOfSeqDefEQ {
        \schemaVar \term int from, to;
        \schemaVar \term Seq EQ;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \assumes(seqDef{uSub;}(from, to, t) = EQ ==>)
        \find(seqLen(EQ))
        \sameUpdateLevel

        \replacewith(\if(from <= to) \then((to - from)) \else(0))

        \heuristics(simplify)
        \displayname "lenOfSeqDef"
    };

    // --------------------------------------------------------------------------
    // derived taclets involving  seqEmpty
    // --------------------------------------------------------------------------

    \lemma
    seqConcatWithSeqEmpty1 {
        \schemaVar \term Seq seq;

        \find(seqConcat(seq, seqEmpty))

        \replacewith(seq)

        \heuristics(concrete)
        \displayname "seqConcatWithEmpty"
    };

    \lemma
    seqConcatWithSeqEmpty2 {
        \schemaVar \term Seq seq;

        \find(seqConcat(seqEmpty, seq))

        \replacewith(seq)

        \heuristics(concrete)
        \displayname "seqConcatWithEmpty"
    };

    \lemma
    seqReverseOfSeqEmpty {
        \find(seqReverse(seqEmpty))

        \replacewith(seqEmpty)

        \heuristics(concrete)
    };

    // --------------------------------------------------------------------------
    // derived taclets for special instantiations
    // --------------------------------------------------------------------------

    subSeqCompleteSeqDef {
        \schemaVar \term int u;
        \schemaVar \term any a;
        \schemaVar \variables int i;

        \find(seqSub(seqDef{i;}(0, u, a), 0, u))

        \replacewith(seqDef{i;}(0, u, a))
        \heuristics(concrete)
    };

    \lemma
    subSeqComplete {
        \schemaVar \term Seq seq;

        \find(seqSub(seq, 0, seqLen(seq)))
        \replacewith(seq)
        \heuristics(concrete)
    };

    subSeqCompleteSeqDefEQ {
        \schemaVar \term int u;
        \schemaVar \term any a;
        \schemaVar \variables int i;
        \schemaVar \term Seq EQ;

        \assumes(seqDef{i;}(0, u, a) = EQ ==>)
        \find(seqSub(EQ, 0, u))
        \replacewith(seqDef{i;}(0, u, a))
        \heuristics(no_self_application, concrete)
    };

    subSeqEmpty {
        \schemaVar \term Seq seq;
        \schemaVar \term int i;
        \find(seqSub(seq, i, i))
        \replacewith(seqEmpty)
        \heuristics(concrete)
    };

    \lemma
    subSeqTailR {
        \schemaVar \term Seq seq;
        \schemaVar \term any x;

        \find(seqSub(seqConcat(seqSingleton(x), seq), 1, seqLen(seq) + 1))

        \replacewith(seq)

        \heuristics(concrete)
        \displayname "subSeqTail"
    };

    \lemma
    subSeqTailL {
        \schemaVar \term Seq seq;
        \schemaVar \term any x;

        \find(seqSub(seqConcat(seqSingleton(x), seq), 1, 1 + seqLen(seq)))

        \replacewith(seq)

        \heuristics(concrete)
        \displayname "subSeqTail"
    };

    subSeqSingleton {
        \schemaVar \term Seq seq;
        \schemaVar \term any x;

        \find(seqSub(seqSingleton(x), 0, 1))

        \replacewith(seqSingleton(x))

        \heuristics(concrete)
    };

    subSeqSingletonEQ {
        \schemaVar \term Seq seq;
        \schemaVar \term any x;
        \schemaVar \term Seq EQ;

        \assumes(seqSingleton(x) = EQ ==>)
        \find(seqSub(EQ, 0, 1))

        \replacewith(seqSingleton(x))

        \heuristics(concrete)
    };

    \lemma
    subSeqTailEQR {
        \schemaVar \term Seq seq;
        \schemaVar \term any x;
        \schemaVar \term int EQ;

        \assumes(seqLen(seq) = EQ ==>)
        \find(seqSub(seqConcat(seqSingleton(x), seq), 1, EQ + 1))
        \sameUpdateLevel

        \replacewith(seq)

        \heuristics(concrete)
        \displayname "subSeqTail"
    };

    \lemma
    subSeqTailEQL {
        \schemaVar \term Seq seq;
        \schemaVar \term any x;
        \schemaVar \term int EQ;

        \assumes(seqLen(seq) = EQ ==>)
        \find(seqSub(seqConcat(seqSingleton(x), seq), 1, 1 + EQ))
        \sameUpdateLevel

        \replacewith(seq)

        \heuristics(concrete)
        \displayname "subSeqTail"
    };

    subSeqSingleton2 {
        \schemaVar \term Seq seq;
        \schemaVar \term any x;
        \schemaVar \term int l, u;

        \find(seqSub(seqSingleton(x), l, u))

        \replacewith(seqConcat(seqSub(seqEmpty,
                    \if(l < 0) \then(l) \else(0),
                    \if(u < 0) \then(u) \else(0)),
                seqConcat(\if(l <= 0 & u >= 1)
                        \then(seqSingleton(x))
                        \else(seqEmpty),
                    seqSub(seqEmpty,
                        \if(l > 0) \then(l) \else(1),
                        \if(u > 0) \then(u) \else(1)))))

        \heuristics(simplify_enlarging)
    };

    subSeqSingleton2EQ {
        \schemaVar \term Seq seq;
        \schemaVar \term any x;
        \schemaVar \term int l, u;
        \schemaVar \term Seq EQ;

        \assumes(seqSingleton(x) = EQ ==>)
        \find(seqSub(EQ, l, u))

        \replacewith(seqConcat(seqSub(seqEmpty,
                    \if(l < 0) \then(l) \else(0),
                    \if(u < 0) \then(u) \else(0)),
                seqConcat(\if(l <= 0 & u >= 1)
                        \then(seqSingleton(x))
                        \else(seqEmpty),
                    seqSub(seqEmpty,
                        \if(l > 0) \then(l) \else(1),
                        \if(u > 0) \then(u) \else(1)))))

        \heuristics(no_self_application, simplify_enlarging)
    };

    subSeqConcat {
        \schemaVar \term Seq s1, s2;
        \schemaVar \term int l, u;

        \find(seqSub(seqConcat(s1, s2), l, u))

        \replacewith(seqConcat(seqSub(s1, l, \if(seqLen(s1) < u) \then(seqLen(s1)) \else(u)),
                seqSub(s2, \if(l < seqLen(s1)) \then(0) \else(l - seqLen(s1)), u - seqLen(s1))))

        \heuristics(simplify_enlarging)
    };

    // fix
    subSeqConcatEQ {
        \schemaVar \term Seq s1, s2;
        \schemaVar \term int l, u;
        \schemaVar \term Seq EQ;

        \assumes(seqConcat(s1, s2) = EQ ==>)
        \find(seqSub(EQ, l, u))

        \replacewith(seqConcat(seqSub(s1, l, \if(seqLen(s1) < u) \then(seqLen(s1)) \else(u)),
                seqSub(s2, \if(l < seqLen(s1)) \then(0) \else(l - seqLen(s1)), u - seqLen(s1))))

        \heuristics(no_self_application, simplify_enlarging)
    };

    subSeqHeadSeqDef {
        \schemaVar \term Seq seq;
        \schemaVar \term any a;
        \schemaVar \term int u;
        \schemaVar \variables int i;

        \find(seqSub(seqConcat(seqDef{i;}(0, u, a), seq), 0, u))
        \replacewith(seqDef{i;}(0, u, a))
        \heuristics(concrete)
    };

    subSeqHeadSeqDefEQ {
        \schemaVar \term Seq seq;
        \schemaVar \term any a;
        \schemaVar \term int u;
        \schemaVar \variables int i;
        \schemaVar \term Seq EQ;

        \assumes(seqDef{i;}(0, u, a) = EQ ==>)
        \find(seqSub(seqConcat(EQ, seq), 0, u))

        \replacewith(seqDef{i;}(0, u, a))

        \heuristics(concrete)
    };

    // --------------------------------------------------------------------------
    // other derived taclets
    // --------------------------------------------------------------------------

    \lemma
    seqDef_split {
        \schemaVar \term int idx, from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \find(seqDef{uSub;}(from, to, t))
        \varcond(
            \notFreeIn(uSub1, from),
            \notFreeIn(uSub1, idx),
            \notFreeIn(uSub1, to),
            \notFreeIn(uSub, from),
            \notFreeIn(uSub, idx),
            \notFreeIn(uSub, to),
            \notFreeIn(uSub1, t))
        \replacewith(\if(from <= idx & idx < to)
                \then(seqConcat(
                        seqDef{uSub;}(from, idx, t),
                        seqDef{uSub1;}(idx, to, {\subst uSub; uSub1}t)))
                \else(seqDef{uSub;}(from, to, t)))
    };

    \lemma
    seqDef_induction_upper {
        \schemaVar \term int idx, from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \find(seqDef{uSub;}(from, to, t))
        \varcond(\notFreeIn(uSub, from),
            \notFreeIn(uSub, to))
        \replacewith(seqConcat(
                seqDef{uSub;}(from, to - 1, t),
                \if(from < to) \then(seqSingleton({\subst uSub; (to - 1)}t))
                    \else(seqEmpty)))
    };

    \lemma
    seqDef_induction_upper_concrete {
        \schemaVar \term int idx, from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \find(seqDef{uSub;}(from, 1 + to, t))
        \varcond(\notFreeIn(uSub, from),
            \notFreeIn(uSub, to))
        \replacewith(seqConcat(
                seqDef{uSub;}(from, to, t),
                \if(from <= to) \then(seqSingleton({\subst uSub; (to)}t))
                    \else(seqEmpty)))
        \heuristics(simplify_enlarging)
    };

    \lemma
    seqDef_induction_lower {
        \schemaVar \term int idx, from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \find(seqDef{uSub;}(from, to, t))
        \varcond(\notFreeIn(uSub, from),
            \notFreeIn(uSub, to))
        \replacewith(seqConcat(
                \if(from < to) \then(seqSingleton({\subst uSub; (from)}t))
                    \else(seqEmpty),
                seqDef{uSub;}(from + 1, to, t)))
    };

    \lemma
    seqDef_induction_lower_concrete {
        \schemaVar \term int idx, from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \find(seqDef{uSub;}(-1 + from, to, t))
        \varcond(\notFreeIn(uSub, from),
            \notFreeIn(uSub, to))
        \replacewith(seqConcat(
                \if(-1 + from < to) \then(seqSingleton({\subst uSub; (-1 + from)}t))
                    \else(seqEmpty),
                seqDef{uSub;}(from, to, t)))
        \heuristics(simplify)
    };

    \lemma
    seqDef_split_in_three {
        \schemaVar \term int idx, from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \find(seqDef{uSub;}(from, to, t))
        \sameUpdateLevel
        \varcond(
            \notFreeIn(uSub, idx),
            \notFreeIn(uSub1, t),
            \notFreeIn(uSub1, idx),
            \notFreeIn(uSub, from),
            \notFreeIn(uSub1, to))
        "Precondition":
            \add( ==> (from <= idx & idx < to));
        "Splitted SeqDef":
            \replacewith(
                seqConcat(seqDef{uSub;}(from, idx, t),
                    seqConcat(seqSingleton({\subst uSub; idx}t),
                        seqDef{uSub1;}(idx + 1, to, {\subst uSub; uSub1}t))))
    };

    \lemma
    seqDef_empty {
        \schemaVar \term int idx, from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \find(seqDef{uSub;}(from, idx, t))
        \sameUpdateLevel
        \varcond(\notFreeIn(uSub, from),
            \notFreeIn(uSub, idx))
        "Precondition":
            \add( ==> idx <= from);
        "Empty SeqDef":
            \replacewith(seqEmpty)
    };

    \lemma
    seqDef_one_summand {
        \schemaVar \term int idx, from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \find(seqDef{uSub;}(from, idx, t))
        \sameUpdateLevel
        \varcond(\notFreeIn(uSub, from),
            \notFreeIn(uSub, idx))
        \replacewith(\if(from + 1 = idx)
                \then(seqSingleton({\subst uSub; from}t))
                \else(seqDef{uSub;}(from, idx, t)))
    };

    \lemma
    seqDef_lower_equals_upper {
        \schemaVar \term int idx, from, to;
        \schemaVar \term any t;
        \schemaVar \variables int uSub, uSub1, uSub2;

        \find(seqDef{uSub;}(idx, idx, t))
        \sameUpdateLevel
        \varcond(\notFreeIn(uSub, idx))
        \replacewith(seqEmpty)
        \heuristics(simplify)
    };

    \lemma // in KeY -- DB 29/10/2013
    seqDefOfSeq {
        \schemaVar \term int x;
        \schemaVar \term Seq s;
        \schemaVar \variables int u, v;
        //    \find(seqDef{u;}(0,x,alpha::seqGet(s,u)))
        // changed by PHS 17.12.2013
        // original version caused inconsistency
        // proof by DB 29.10.2013 was based on
        // another incorrect taclet that has in the
        // meantime been removed.
        \find(seqDef{u;}(0, x, any::seqGet(s, u)))
        \varcond(\notFreeIn(u, x, s), \notFreeIn(v, x, s))
        \replacewith(\if(seqLen(s) = x)
                \then(s)
                \else(\if(seqLen(s) > x)
                        \then(seqSub(s, 0, x))
                        \else(seqConcat(s,
                                seqDef{v;}(seqLen(s), x, seqGetOutside))
                        )))
        \heuristics(simplify_enlarging)
    };

    \lemma // in KeY -- DB 29/10/2013
    seqSelfDefinitionEQ2 {
        \schemaVar \term Seq s;
        \schemaVar \term int x;
        \schemaVar \variables int u;
        \assumes(seqLen(s) = x ==>)
        \find(seqDef{u;}(0, x, any::seqGet(s, u)))
        \sameUpdateLevel
        \varcond(\notFreeIn(u, x, s))
        \replacewith(s)
        \heuristics(simplify)
        \displayname "seqSelfDefinition"
    };

    // --------------------------------------------------------------------------
    // derived taclets for seqIndexOf
    // --------------------------------------------------------------------------

    // The following rule has been removed since we agreed
    // to longer support \ifEx.


    //  seqIndexOf2 {
    //  \schemaVar \term Seq s;
    //  \schemaVar \term any t;
    //  \schemaVar \variables int n;
    //  \find( seqIndexOf(s,t) )
    //  \varcond ( \notFreeIn(n, s), \notFreeIn(n, t) )
    //  \replacewith( \ifEx n;
    //                (0 <= n & n < seqLen(s) & any::seqGet(s,n)=t)
    //                \then (n)
    //                \else (seqIndexOf(s,t)) )
    // };

    \lemma
    indexOfSeqSingleton {
        \schemaVar \term any x;
        \find(seqIndexOf(seqSingleton(x), x))
        \sameUpdateLevel
        \replacewith(0)
        \heuristics(concrete)
    };

    \lemma
    indexOfSeqConcatFirst {
        \schemaVar \term Seq s1, s2;
        \schemaVar \term any x;
        \schemaVar \variables int idx;
        \find(seqIndexOf(seqConcat(s1, s2), x))
        \sameUpdateLevel
        \varcond(\notFreeIn(idx, s1, s2, x))
        \replacewith(seqIndexOf(s1, x));
        \add( ==> \exists idx; (0 <= idx & idx < seqLen(s1) &
                any::seqGet(s1, idx) = x))
    };

    \lemma
    indexOfSeqConcatSecond {
        \schemaVar \term Seq s1, s2;
        \schemaVar \term any x;
        \schemaVar \variables int idx;
        \find(seqIndexOf(seqConcat(s1, s2), x))
        \sameUpdateLevel
        \varcond(\notFreeIn(idx, s1, s2, x))
        \replacewith(add(seqIndexOf(s2, x), seqLen(s1)));
        \add( ==> (!\exists idx;
                (0 <= idx & idx < seqLen(s1) & any::seqGet(s1, idx) = x)
                & \exists idx;
                (0 <= idx & idx < seqLen(s2) & any::seqGet(s2, idx) = x)))
    };

    \lemma
    indexOfSeqSub {
        \schemaVar \term Seq s;
        \schemaVar \term int from, to, n;
        \schemaVar \term any x;
        \schemaVar \variables int nx;

        \find(seqIndexOf(seqSub(s, from, to), x))
        \sameUpdateLevel
        \varcond(
            \notFreeIn(nx, s),
            \notFreeIn(nx, x),
            \notFreeIn(nx, from),
            \notFreeIn(nx, to))
        \replacewith(sub(seqIndexOf(s, x), from));
        \add( ==> from <= seqIndexOf(s, x) & seqIndexOf(s, x) < to & 0 <= from &
            \exists nx; ((0 <= nx & nx < seqLen(s) & any::seqGet(s, nx) = x)))
    };

    // --------------------------------------------------------------------------
    // work-a-round to use \seq_def in JML set statements
    // --------------------------------------------------------------------------

    definitionSeqdefWorkaround {
        \schemaVar \term int lower;
        \schemaVar \term int upper;
        \schemaVar \term Object array;
        \schemaVar \term Heap h;
        \schemaVar \variables int j;

        \find(seq_def_workaround(h,
                lower,
                upper,
                array
            )
        )
        \varcond(
            \notFreeIn(j, h),
            \notFreeIn(j, array),
            \notFreeIn(j, lower),
            \notFreeIn(j, upper))

        \replacewith(seqDef{j;}(lower,
                upper,
                any::select(h, array, arr(j))
            )
        )
        \heuristics(concrete)
    };

    definitionSeqdefWorkaround2 {
        \schemaVar \term int lower;
        \schemaVar \term int upper;
        \schemaVar \term Object array, o;
        \schemaVar \term Heap h;
        \schemaVar \term Field f;
        \schemaVar \variables int j;

        \find(seq_def_workaround2(h,
                lower,
                upper,
                array,
                singleton(o, f)
            )
        )
        \varcond(
            \notFreeIn(j, h),
            \notFreeIn(j, f),
            \notFreeIn(j, array),
            \notFreeIn(j, lower),
            \notFreeIn(j, upper))

        \replacewith(seqDef{j;}(lower,
                upper,
                any::select(h,
                    Object::select(h, array, arr(j)),
                    f
                )
            )
        )
        \heuristics(concrete)
    };

    // --------------------------------------------------------------------------
    // Definition of array2seq
    // --------------------------------------------------------------------------

    array2seqDef {
        \schemaVar \term Object a;
        \schemaVar \term Heap h;
        \schemaVar \variables int u;
        \find(array2seq(h, a))
        \varcond(\notFreeIn(u, a, h))
        \replacewith(seqDef{u;}(0, length(a), any::select(h, a, arr(u))))
        \heuristics(simplify_enlarging)
    };

    // --------------------------------------------------------------------------
    // Derived taclets for array2seq
    // --------------------------------------------------------------------------

    \lemma
    lenOfArray2seq {
        \schemaVar \term Object a;
        \schemaVar \term Heap h;
        \find(seqLen(array2seq(h, a)))
        \replacewith(length(a))
    };

    \lemma
    getAnyOfArray2seq {
        \schemaVar \term Object a;
        \schemaVar \term int idx;
        \schemaVar \term Heap h;
        \find(any::seqGet(array2seq(h, a), idx))
        \replacewith(any::select(h, a, arr(idx)));
        \add( ==> 0 <= idx & idx < length(a))
    };

    \lemma
    getOfArray2seq {
        \schemaVar \term Object a;
        \schemaVar \term int idx;
        \schemaVar \term Heap h;
        \find(alpha::seqGet(array2seq(h, a), idx))
        \replacewith(alpha::select(h, a, arr(idx)));
        \add( ==> 0 <= idx & idx < length(a))
    };

}
