/* This file is part of KeY - https://key-project.org
 * KeY is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only */

//
//  This file contains rule for integer division
//   both div and jdiv and the related operators
//   mod and jmod
//   In the beginning these rules were part o
//   integerSimplification.key
//   As they grew more and more they habe been put
//   in this separate file.
//

\schemaVariables {
    \term int divNum, divDenom, polyDivCoeff;
    \skolemTerm int l, quotient;
}

\rules {

    jdiv_axiom_inline {
        \find(jdiv(divNum, divDenom))
        \replacewith(\if(divNum >= 0)
                \then(div(divNum, divDenom))
                \else(div(divNum * (-1), divDenom) * (-1)))
        \heuristics(defOps_jdiv_inline, notHumanReadable)
    };

    jdiv_axiom {
        \find(jdiv(divNum, divDenom))
        \sameUpdateLevel
        \add(jdiv(divNum, divDenom) =
            \if(divNum >= 0)
                \then(div(divNum, divDenom))
                \else(div(divNum * (-1), divDenom) * (-1)) ==>)
        \heuristics(defOps_jdiv, notHumanReadable)
    };

    div_axiom {
        \find(div(divNum, divDenom))
        \sameUpdateLevel
        \varcond(\newDependingOn(quotient, divNum),
            \newDependingOn(quotient, divDenom))
        \add(divDenom = 0 |
            (div(divNum, divDenom) = quotient &
                mul(quotient, divDenom) <= divNum &
                \if(divDenom >= 0)
                    \then(mul(quotient, divDenom) >= 1 + divNum + (-1) * divDenom)
                    \else(mul(quotient, divDenom) >= 1 + divNum + divDenom)) ==>)
        \heuristics(defOps_div, polySimp_newSmallSym, notHumanReadable)
    };

    \lemma
    div_unique1 {
        \schemaVar \variables int a, cnom, x, y;
        \find(div(divNum, divDenom))
        \add(\forall a; \forall cnom; \forall x; \forall y;
            ((cnom > 0 & x * cnom <= a & y * cnom <= a &
                    x * cnom >= 1 + a - cnom & y * cnom >= 1 + a - cnom) -> x = y) ==>)
    };

    \lemma
    div_unique2 {
        \schemaVar \variables int a, cnom, x, y;
        \find(div(divNum, divDenom))
        \add(\forall a; \forall cnom; \forall x; \forall y;
            ((cnom < 0 & x * cnom <= a & y * cnom <= a &
                    x * cnom >= 1 + a + cnom & y * cnom >= 1 + a + cnom) -> x = y) ==>)
    };

    \lemma
    div_exists {
        \schemaVar \variables int a, cnom, qu, rm;
        \find(div(divNum, divDenom))
        \add(\forall cnom; (cnom != 0 -> \forall a; \exists qu; \exists rm;
                (a = qu * cnom + rm & 0 <= rm &
                    \if(cnom >= 0)
                        \then(mul(qu, cnom) >= 1 + a + (-1) * cnom & rm < cnom)
                        \else(mul(qu, cnom) >= 1 + a + cnom & rm < -cnom))) ==>
        )
    };
    \lemma
    div_one {
        \find(div(divNum, 1))
        \replacewith(divNum)
        \heuristics(concrete)
    };
    \lemma
    jdiv_one {
        \find(jdiv(divNum, 1))
        \replacewith(divNum)
        \heuristics(concrete)
    };

    \lemma
    div_zero {
        \find(div(0, divDenom))
        \replacewith(0);
        \add( ==> divDenom != 0)
        \heuristics(simplify_enlarging)
    };
    \lemma
    divResZero1 {
        \find(div(divNum, divDenom))
        \add((divDenom > 0 &
                0 <= divNum &
                divNum < divDenom) ->
            div(divNum, divDenom) = 0 ==>)
    };

    \lemma
    divResZero2 {
        \find(div(divNum, divDenom))
        \add((divDenom < 0 &
                0 <= divNum &
                divNum < -divDenom) ->
            div(divNum, divDenom) = 0 ==>)
    };

    \lemma
    divResOne1 {
        \find(div(divNum, divDenom))
        \add((divDenom > 0 &
                divNum < 0 &
                -divDenom < divNum) ->
            div(divNum, divDenom) = -1 ==>)
    };

    \lemma
    divResOne2 {
        \find(div(divNum, divDenom))
        \add((divDenom < 0 &
                divNum < 0 &
                divDenom < divNum) ->
            div(divNum, divDenom) = 1 ==>)
    };

    \lemma
    div_cancel1 {
        \find(div(divNum * divDenom, divDenom))
        \replacewith(divNum);
        \add( ==> divDenom != 0)
        \heuristics(simplify_enlarging)
    };

    \lemma
    div_cancel2 {
        \find(div(divDenom * divNum, divDenom))
        \replacewith(divNum);
        \add( ==> divDenom != 0)
        \heuristics(simplify_enlarging)
    };

    \lemma
    divAddMultDenom {
        \schemaVar \term int coef;
        \find(div(divNum + coef * divDenom, divDenom))
        \replacewith(div(divNum, divDenom) + coef);
        \add( ==> divDenom != 0)
        \heuristics(simplify_enlarging)
    };

    \lemma
    divMinus {
        \find(div(-divNum, divDenom))
        \replacewith(\if(div(divNum, divDenom) * divDenom = divNum)
                \then(-div(divNum, divDenom))
                \else(\if(divDenom > 0)
                        \then(-div(divNum, divDenom) - 1)
                        \else(-div(divNum, divDenom) + 1)));
        \add( ==> divDenom != 0)
    };

    \lemma
    divMinusDenom {
        \find(div(divNum, -divDenom))
        \replacewith(-div(divNum, divDenom));
        \add( ==> divDenom != 0)
        \heuristics(simplify_enlarging)
    };

    \lemma
    divLeastDPos {
        \schemaVar \term int coef;
        \find(divNum < divDenom * coef ==>)
        \add(divDenom > 0 -> div(divNum, divDenom) < coef ==>)
    };

    \lemma
    divLeastDNeg {
        \schemaVar \term int coef;
        \find(divDenom * coef <= divNum ==>)
        \add(divDenom < 0 -> div(divNum, divDenom) <= coef ==>)
    };

    \lemma
    divGreatestDPos {
        \schemaVar \term int coef;
        \find(divDenom * coef <= divNum ==>)
        \add(divDenom > 0 -> coef <= div(divNum, divDenom) ==>)
    };

    \lemma
    divGreatestDNeg {
        \schemaVar \term int coef;
        \find(divNum < divDenom * coef ==>)
        \add(divDenom < 0 -> coef < div(divNum, divDenom) ==>)
    };

    \lemma
    divIncreasingPos {
        \schemaVar \variables int divNum1, divNum2, divDenom1;
        \add(\forall divDenom1; (\forall divNum1; (\forall divNum2; (
                        divDenom1 > 0 & divNum1 <= divNum2
                        ->
                        div(divNum1, divDenom1) <= div(divNum2, divDenom1)))) ==>)
    };

    \lemma
    divIncreasingNeg {
        \schemaVar \variables int divNum1, divNum2, divDenom1;
        \add(\forall divDenom1; (\forall divNum1; (\forall divNum2; (
                        divDenom1 < 0 & divNum1 <= divNum2
                        ->
                        div(divNum1, divDenom1) >= div(divNum2, divDenom1)))) ==>)
    };

    \lemma
    jdiv_zero {
        \find(jdiv(0, divDenom))
        \replacewith(0);
        \add( ==> divDenom != 0)
        \heuristics(simplify_enlarging)
    };

    \lemma
    jdivPulloutMinusNum {
        \find(jdiv(-divNum, divDenom))
        \replacewith(-jdiv(divNum, divDenom));
        \add( ==> divDenom != 0)
    };

    \lemma
    jdivPulloutMinusDenom {
        \find(jdiv(divNum, -divDenom))
        \replacewith(-jdiv(divNum, divDenom));
        \add( ==> divDenom != 0)
        \heuristics(simplify_enlarging)
    };

    \lemma
    jdiv_uniquePosPos {
        \schemaVar \variables int a, cnom, x, y;
        \find(jdiv(divNum, divDenom))
        \add(\forall a; \forall cnom; \forall x; \forall y;
            ((a >= 0 & cnom > 0 & x * cnom <= a & y * cnom <= a &
                    (x + 1) * cnom > a & (y + 1) * cnom > a) -> x = y) ==>)
    };

    \lemma
    jdiv_uniquePosNeg {
        \schemaVar \variables int a, cnom, x, y;
        \find(jdiv(divNum, divDenom))
        \add(\forall a; \forall cnom; \forall x; \forall y;
            ((a >= 0 & cnom < 0 & x * cnom <= a & y * cnom <= a &
                    (x - 1) * cnom > a & (y - 1) * cnom > a) -> x = y) ==>)
    };

    \lemma
    jdiv_uniqueNegPos {
        \schemaVar \variables int a, cnom, x, y;
        \find(jdiv(divNum, divDenom))
        \add(\forall a; \forall cnom; \forall x; \forall y;
            ((a < 0 & cnom > 0 & x * cnom >= a & y * cnom >= a &
                    (x - 1) * cnom < a & (y - 1) * cnom < a) -> x = y) ==>)
    };

    \lemma
    jdiv_uniqueNegNeg {
        \schemaVar \variables int a, cnom, x, y;
        \find(jdiv(divNum, divDenom))
        \add(\forall a; \forall cnom; \forall x; \forall y;
            ((a < 0 & cnom < 0 & x * cnom >= a & y * cnom >= a &
                    (x + 1) * cnom < a & (y + 1) * cnom < a) -> x = y) ==>)
    };

    \lemma
    jdivMultDenom1 {
        \schemaVar \term int cfac;
        \find(jdiv(divDenom * cfac, divDenom))
        \replacewith(cfac);
        \add( ==> divDenom != 0)
        \heuristics(simplify_enlarging)
    };

    \lemma
    jdivMultDenom2 {
        \schemaVar \term int cfac;
        \find(jdiv(cfac * divDenom, divDenom))
        \replacewith(cfac);
        \add( ==> divDenom != 0)
    };

    jmod_axiom {
        \find(jmod(divNum, divDenom))
        \replacewith(divNum + jdiv(divNum, divDenom) * (-1) * divDenom)
        \heuristics(defOps_mod, notHumanReadable)
    };

    mod_axiom {
        \find(mod(divNum, divDenom))
        \replacewith(divNum + (divNum/divDenom) * (-1) * divDenom)
        \heuristics(defOps_mod, notHumanReadable)
    };

    \lemma
    mod_geZero {
        \find(mod(divNum, divDenom))
        \add(divDenom != 0 -> 0 <= mod(divNum, divDenom) ==>)
    };

    \lemma
    mod_lessDenom {
        \find(mod(divNum, divDenom))
        \add(divDenom != 0 -> mod(divNum, divDenom) < \if(divDenom >= 0)
                \then(divDenom)
                \else(-divDenom) ==>)
    };

    \lemma
    jmod_NumPos {
        \find(jmod(divNum, divDenom))
        \add((divDenom != 0 & divNum >= 0) -> jmod(divNum, divDenom) < \if(divDenom >= 0)
                \then(divDenom)
                \else(-divDenom) ==>)
    };

    \lemma
    jmod_NumNeg {
        \find(jmod(divNum, divDenom))
        \add((divDenom != 0 & divNum <= 0) -> jmod(divNum, divDenom) > \if(divDenom >= 0)
                \then(-divDenom)
                \else(divDenom) ==>)
    };

    \lemma
    jmod_geZero {
        \find(jmod(divNum, divDenom))
        \add((divDenom != 0 -> 0 <= \if(divNum >= 0)
                    \then(jmod(divNum, divDenom))
                    \else(-jmod(divNum, divDenom))) ==>)
    };

    \lemma
    jmodNumZero {
        \find(jmod(0, divDenom))
        \replacewith(0)
        \heuristics(concrete)
    };

    \lemma
    jmod_pulloutminusNum {
        \find(jmod(-divNum, divDenom))
        \replacewith(-jmod(divNum, divDenom));
        \add( ==> divDenom != 0)
    };

    \lemma
    jmod_pulloutminusDenom {
        \find(jmod(divNum, -divDenom))
        \replacewith(jmod(divNum, divDenom));
        \add( ==> divDenom != 0)
    };

    \lemma
    jmodUnique1 {
        \schemaVar \variables int a, deb, cmod, x;
        \add(\forall a; (\forall deb; (\forall cmod; (
                        (a >= 0 & deb != 0 & 0 <= cmod &
                            (cmod < \if(deb > 0)
                                    \then(deb)
                                    \else(-deb))
                            &
                            \exists x; (a = deb * x + cmod)) ->
                        cmod = jmod(a, deb))))
            ==>)
    };

    \lemma
    jmodUnique2 {
        \schemaVar \variables int a, deb, cmod, x;
        \add(\forall a; (\forall deb; (\forall cmod; (
                        (a <= 0 & deb != 0 &
                            (-cmod < \if(deb > 0)
                                    \then(deb)
                                    \else(-deb))
                            & cmod <= 0 &
                            \exists x; (a = deb * x + cmod)) ->
                        cmod = jmod(a, deb))))
            ==>)
    };

    \lemma
    intDivRem {
        \find(jmod(divNum, divDenom))
        \add(divDenom != 0 ->
            divNum = jdiv(divNum, divDenom) * divDenom + jmod(divNum, divDenom)
            ==>)
    };

    \lemma
    jmodjmod {
        \schemaVar \variables int N, D1, D2;
        \add(\forall N; (\forall D1; (\forall D2; (
                        (D1 != 0 & D2 != 0 & jmod(D1, D2) = 0 &
                            (D1 >= 0 <-> D2 >= 0))
                        ->
                        jmod(N, D2) = jmod(jmod(N, D1), D2))))
            ==>)
    };

    \lemma
    jmodDivisible {
        \schemaVar \variables int D, A;
        \add(\forall D; (\forall A; (
                    D != 0 -> jmod(D * A, D) = 0))
            ==>)
    };

    \lemma
    jmodDivisibleRep {
        \schemaVar \term int D, A;
        \find(jmod(D * A, D))
        \replacewith(0);
        \add( ==> D != 0)
        \heuristics(simplify_enlarging)
    };

    \lemma
    jdivAddMultDenom {
        \schemaVar \variables int N, D, A;
        \add(\forall N; (\forall D; (\forall A;
                    (D != 0 ->
                        (jdiv(N + A * D, D) =
                            (\if(N = jdiv(N, D) * D)
                                    \then(jdiv(N, D) + A)
                                    \else(\if(N != jdiv(N, D) * D & (N >= 0 <-> N + D * A >= 0))
                                            \then(jdiv(N, D) + A)
                                            \else(\if(N != jdiv(N, D) * D & (N >= 0 <-> N + D * A < 0) & (D > 0 <-> N + D * A < 0))
                                                    \then(jdiv(N, D) + A + 1)
                                                    \else(jdiv(N, D) + A - 1))))
                        ))))
            ==>)
    };

    \lemma
    jmodAltZero {
        \schemaVar \variables int N, D, A;
        \add(\forall N; (\forall D; (
                    D != 0 ->
                    (jmod(N, D) = 0 <-> \exists A; (N = A * D))))
            ==>)
    };

    \lemma
    jmodAddMultDenomZero {
        \schemaVar \term int N, D, A;
        \find(jmod(N + A * D, D) = 0)
        \sameUpdateLevel
        \replacewith(jmod(N, D) = 0);
        \add( ==> D != 0)
        \heuristics(simplify_enlarging)
    };

    polyDiv_pullOut {
        \find(divNum/divDenom)
        \replacewith(\if(divDenom = 0)
                \then(divNum/0)
                \else((divNum + polyDivCoeff * (-1) * divDenom)
                    /divDenom + polyDivCoeff))
        \heuristics(polyDivision, defOps_divModPullOut, notHumanReadable)
    };

    \lemma
    polyDiv_zero {
        \find(0/divDenom)
        \replacewith(\if(divDenom = 0)
                \then(0/0)
                \else(0))
        \heuristics(polyDivision)
    };

    polyMod_pullOut {
        \find(divNum % divDenom)
        \replacewith((divNum + polyDivCoeff * (-1) * divDenom)
            % divDenom)
        \heuristics(polyDivision, defOps_divModPullOut, notHumanReadable)
    };

    polyMod_zero {
        \find(0 % divDenom)
        \replacewith(0)
        \heuristics(polyDivision, concrete)
    };

    \lemma
    polyMod_ltdivDenom {
        \find(divNum % divDenom)
        \add((divDenom > 0 -> divNum % divDenom < divDenom)
            &
            (divDenom < 0 -> divNum % divDenom < -divDenom)
            ==>)
    };

    mod_homoEq {
        \schemaVar \term int modNumLeft, modNumRight, modDenom;
        \find(modNumLeft % modDenom = modNumRight % modDenom)
        \replacewith((modNumLeft - modNumRight) % modDenom = 0)
        \heuristics(defOps_modHomoEq, notHumanReadable)
    };

}
