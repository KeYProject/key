<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call BlockContractMagic42.magic()&gt;" pathCondition="true" pathConditionChanged="false">
      <statement name="int numberTwo;" pathCondition="true" pathConditionChanged="false">
         <blockContract name="magic()) catch(exc_0)
pre BlockContractMagic42.fourty = 40
post exc_0 = null
&amp; (numberTwo = 2 &amp; BlockContractMagic42.two = 2)
mod {(null, BlockContractMagic42::$two)}termination diamond" pathCondition="true" pathConditionChanged="false" preconditionComplied="true">
            <branchCondition name="true" pathCondition="true" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Validity">
               <statement name="numberTwo=2;" pathCondition="true" pathConditionChanged="false">
                  <statement name="two=numberTwo;" pathCondition="true" pathConditionChanged="false">
                     <termination name="&lt;block contract end&gt;" pathCondition="true" pathConditionChanged="false" terminationKind="BLOCK_CONTRACT_NORMAL" branchVerified="true">
                     </termination>
                  </statement>
               </statement>
            </branchCondition>
            <branchCondition name="or(not(equals(int::select(anon_heap,null,BlockContractMagic42::$two),BlockContractMagic42_two_0)),and(and(and(and(wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc_0,null)),equals(BlockContractMagic42_two_0,Z(2(#)))),equals(anon_numberTwo,Z(2(#)))),or(or(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" pathCondition="imp(and(and(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),equals(int::select(anon_heap,null,BlockContractMagic42::$two),BlockContractMagic42_two_0&lt;&lt;selectSK&gt;&gt;)),equals(add(BlockContractMagic42_two_0,mul(BlockContractMagic42_two_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(and(and(and(wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc_0,null)),equals(BlockContractMagic42_two_0,Z(2(#)))),equals(anon_numberTwo,Z(2(#)))),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" pathConditionChanged="true" branchCondition="or(not(equals(int::select(anon_heap,null,BlockContractMagic42::$two),BlockContractMagic42_two_0)),and(and(and(and(wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc_0,null)),equals(BlockContractMagic42_two_0,Z(2(#)))),equals(anon_numberTwo,Z(2(#)))),or(or(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Usage">
               <statement name="return fourty+two;" pathCondition="imp(and(and(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),equals(int::select(anon_heap,null,BlockContractMagic42::$two),BlockContractMagic42_two_0&lt;&lt;selectSK&gt;&gt;)),equals(add(BlockContractMagic42_two_0,mul(BlockContractMagic42_two_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(and(and(and(wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc_0,null)),equals(BlockContractMagic42_two_0,Z(2(#)))),equals(anon_numberTwo,Z(2(#)))),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" pathConditionChanged="false">
                  <methodReturn name="&lt;return of magic&gt;" signature="&lt;return of BlockContractMagic42.magic()&gt;" pathCondition="imp(and(and(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),equals(int::select(anon_heap,null,BlockContractMagic42::$two),BlockContractMagic42_two_0&lt;&lt;selectSK&gt;&gt;)),equals(add(BlockContractMagic42_two_0,mul(BlockContractMagic42_two_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(and(and(and(wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc_0,null)),equals(BlockContractMagic42_two_0,Z(2(#)))),equals(anon_numberTwo,Z(2(#)))),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="imp(and(and(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),equals(int::select(anon_heap,null,BlockContractMagic42::$two),BlockContractMagic42_two_0&lt;&lt;selectSK&gt;&gt;)),equals(add(BlockContractMagic42_two_0,mul(BlockContractMagic42_two_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(and(and(and(wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc_0,null)),equals(BlockContractMagic42_two_0,Z(2(#)))),equals(anon_numberTwo,Z(2(#)))),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))">
                     <termination name="&lt;end&gt;" pathCondition="imp(and(and(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),equals(int::select(anon_heap,null,BlockContractMagic42::$two),BlockContractMagic42_two_0&lt;&lt;selectSK&gt;&gt;)),equals(add(BlockContractMagic42_two_0,mul(BlockContractMagic42_two_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(and(and(and(wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;),equals(exc_0,null)),equals(BlockContractMagic42_two_0,Z(2(#)))),equals(anon_numberTwo,Z(2(#)))),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                     </termination>
                  </methodReturn>
               </statement>
            </branchCondition>
         </blockContract>
      </statement>
      <methodReturnEntry path="/0/0/0/1/0/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/1/0/0/0"/>
</start>
