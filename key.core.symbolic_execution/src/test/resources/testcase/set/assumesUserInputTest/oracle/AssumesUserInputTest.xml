<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call AssumesUserInputTest.min(_x,_y,_z)&gt;" pathCondition="true" pathConditionChanged="false">
      <branchStatement name="if (_x&lt;_y)" pathCondition="true" pathConditionChanged="false" blockOpened="true">
         <branchCondition name="gt(y,x)" pathCondition="gt(y,x)" pathConditionChanged="true" branchCondition="gt(y,x)" mergedBranchCondition="false" isBranchConditionComputed="true">
            <branchCondition name="and(and(and(or(or(lt(x,Z(1(#))),lt(y,Z(2(2(#))))),gt(z,Z(2(3(3(#)))))),or(or(or(not(SETAccumulate(heap,null,z,y,x)),gt(y,Z(1(2(#))))),lt(x,Z(1(#)))),gt(z,Z(2(3(3(#))))))),or(or(not(SETAccumulate(heap,null,z,y,x)),gt(x,Z(0(#)))),gt(z,Z(2(3(3(#))))))),or(not(SETAccumulate(heap,null,z,y,x)),lt(z,Z(3(3(3(#)))))))" pathCondition="and(and(and(and(gt(y,x),or(or(leq(x,Z(0(#))),leq(y,Z(1(2(#))))),geq(z,Z(3(3(3(#))))))),or(not(SETAccumulate(heap,null,z,y,x)),leq(z,Z(2(3(3(#))))))),or(or(not(SETAccumulate(heap,null,z,y,x)),geq(x,Z(1(#)))),geq(z,Z(3(3(3(#))))))),or(or(or(not(SETAccumulate(heap,null,z,y,x)),leq(x,Z(0(#)))),geq(y,Z(2(2(#))))),geq(z,Z(3(3(3(#)))))))" pathConditionChanged="true" branchCondition="and(and(and(or(or(lt(x,Z(1(#))),lt(y,Z(2(2(#))))),gt(z,Z(2(3(3(#)))))),or(or(or(not(SETAccumulate(heap,null,z,y,x)),gt(y,Z(1(2(#))))),lt(x,Z(1(#)))),gt(z,Z(2(3(3(#))))))),or(or(not(SETAccumulate(heap,null,z,y,x)),gt(x,Z(0(#)))),gt(z,Z(2(3(3(#))))))),or(not(SETAccumulate(heap,null,z,y,x)),lt(z,Z(3(3(3(#)))))))" mergedBranchCondition="false" isBranchConditionComputed="true">
               <statement name="return _x;" pathCondition="and(and(and(and(gt(y,x),or(or(leq(x,Z(0(#))),leq(y,Z(1(2(#))))),geq(z,Z(3(3(3(#))))))),or(not(SETAccumulate(heap,null,z,y,x)),leq(z,Z(2(3(3(#))))))),or(or(not(SETAccumulate(heap,null,z,y,x)),geq(x,Z(1(#)))),geq(z,Z(3(3(3(#))))))),or(or(or(not(SETAccumulate(heap,null,z,y,x)),leq(x,Z(0(#)))),geq(y,Z(2(2(#))))),geq(z,Z(3(3(3(#)))))))" pathConditionChanged="false">
                  <methodReturn name="&lt;return of min&gt;" signature="&lt;return of AssumesUserInputTest.min(_x,_y,_z)&gt;" pathCondition="and(and(and(and(gt(y,x),or(or(leq(x,Z(0(#))),leq(y,Z(1(2(#))))),geq(z,Z(3(3(3(#))))))),or(not(SETAccumulate(heap,null,z,y,x)),leq(z,Z(2(3(3(#))))))),or(or(not(SETAccumulate(heap,null,z,y,x)),geq(x,Z(1(#)))),geq(z,Z(3(3(3(#))))))),or(or(or(not(SETAccumulate(heap,null,z,y,x)),leq(x,Z(0(#)))),geq(y,Z(2(2(#))))),geq(z,Z(3(3(3(#)))))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="and(and(and(and(gt(y,x),or(or(leq(x,Z(0(#))),leq(y,Z(1(2(#))))),geq(z,Z(3(3(3(#))))))),or(not(SETAccumulate(heap,null,z,y,x)),leq(z,Z(2(3(3(#))))))),or(or(not(SETAccumulate(heap,null,z,y,x)),geq(x,Z(1(#)))),geq(z,Z(3(3(3(#))))))),or(or(or(not(SETAccumulate(heap,null,z,y,x)),leq(x,Z(0(#)))),geq(y,Z(2(2(#))))),geq(z,Z(3(3(3(#)))))))">
                     <termination name="&lt;end&gt;" pathCondition="and(and(and(and(gt(y,x),or(or(leq(x,Z(0(#))),leq(y,Z(1(2(#))))),geq(z,Z(3(3(3(#))))))),or(not(SETAccumulate(heap,null,z,y,x)),leq(z,Z(2(3(3(#))))))),or(or(not(SETAccumulate(heap,null,z,y,x)),geq(x,Z(1(#)))),geq(z,Z(3(3(3(#))))))),or(or(or(not(SETAccumulate(heap,null,z,y,x)),leq(x,Z(0(#)))),geq(y,Z(2(2(#))))),geq(z,Z(3(3(3(#)))))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                     </termination>
                  </methodReturn>
                  <completedBlockEntry path="/0/0" conditionString="and(and(and(and(gt(y,x),or(or(leq(x,Z(0(#))),leq(y,Z(1(2(#))))),geq(z,Z(3(3(3(#))))))),or(not(SETAccumulate(heap,null,z,y,x)),leq(z,Z(2(3(3(#))))))),or(or(not(SETAccumulate(heap,null,z,y,x)),geq(x,Z(1(#)))),geq(z,Z(3(3(3(#))))))),or(or(or(not(SETAccumulate(heap,null,z,y,x)),leq(x,Z(0(#)))),geq(y,Z(2(2(#))))),geq(z,Z(3(3(3(#)))))))"/>
               </statement>
            </branchCondition>
            <branchCondition name="and(and(geq(x,Z(1(#))),geq(y,Z(2(2(#))))),leq(z,Z(2(3(3(#))))))" pathCondition="and(and(and(geq(x,Z(1(#))),geq(y,Z(2(2(#))))),gt(y,x)),leq(z,Z(2(3(3(#))))))" pathConditionChanged="true" branchCondition="and(and(geq(x,Z(1(#))),geq(y,Z(2(2(#))))),leq(z,Z(2(3(3(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true">
               <statement name="return _x;" pathCondition="and(and(and(geq(x,Z(1(#))),geq(y,Z(2(2(#))))),gt(y,x)),leq(z,Z(2(3(3(#))))))" pathConditionChanged="false">
                  <methodReturn name="&lt;return of min&gt;" signature="&lt;return of AssumesUserInputTest.min(_x,_y,_z)&gt;" pathCondition="and(and(and(geq(x,Z(1(#))),geq(y,Z(2(2(#))))),gt(y,x)),leq(z,Z(2(3(3(#))))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="and(and(and(geq(x,Z(1(#))),geq(y,Z(2(2(#))))),gt(y,x)),leq(z,Z(2(3(3(#))))))">
                     <termination name="&lt;end&gt;" pathCondition="and(and(and(geq(x,Z(1(#))),geq(y,Z(2(2(#))))),gt(y,x)),leq(z,Z(2(3(3(#))))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                     </termination>
                  </methodReturn>
                  <completedBlockEntry path="/0/0" conditionString="and(and(and(geq(x,Z(1(#))),geq(y,Z(2(2(#))))),gt(y,x)),leq(z,Z(2(3(3(#))))))"/>
               </statement>
            </branchCondition>
         </branchCondition>
         <branchCondition name="leq(y,x)" pathCondition="leq(y,x)" pathConditionChanged="true" branchCondition="leq(y,x)" mergedBranchCondition="false" isBranchConditionComputed="true">
            <statement name="return _y;" pathCondition="leq(y,x)" pathConditionChanged="false">
               <methodReturn name="&lt;return of min&gt;" signature="&lt;return of AssumesUserInputTest.min(_x,_y,_z)&gt;" pathCondition="leq(y,x)" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="leq(y,x)">
                  <termination name="&lt;end&gt;" pathCondition="leq(y,x)" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                  </termination>
               </methodReturn>
               <completedBlockEntry path="/0/0" conditionString="leq(y,x)"/>
            </statement>
         </branchCondition>
         <blockCompletionEntry path="/0/0/0/0/0"/>
         <blockCompletionEntry path="/0/0/0/1/0"/>
         <blockCompletionEntry path="/0/0/1/0"/>
      </branchStatement>
      <methodReturnEntry path="/0/0/0/0/0/0"/>
      <methodReturnEntry path="/0/0/0/1/0/0"/>
      <methodReturnEntry path="/0/0/1/0/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/1/0/0/0"/>
   <terminationEntry path="/0/0/1/0/0/0"/>
</start>
