<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <variable name="heapAtPre" isArrayIndex="false">
      <value name="heapAtPre {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
      </value>
   </variable>
   <methodCall name="&lt;call self.calculate()&gt;" pathCondition="true" pathConditionChanged="false">
      <constraint name="wellFormed(heap)"/>
      <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
      <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
      <constraint name="not(equals(self,null))"/>
      <variable name="exc" isArrayIndex="false">
         <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
         </value>
      </variable>
      <statement name="this.low = 0;" pathCondition="true" pathConditionChanged="false">
         <constraint name="wellFormed(heap)"/>
         <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
         <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
         <constraint name="not(equals(self,null))"/>
         <variable name="self" isArrayIndex="false">
            <value name="self {true}" typeString="E_Loop" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
               <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
               <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
               <constraint name="not(equals(self,null))"/>
               <variable name="high" isArrayIndex="false">
                  <value name="high {true}" typeString="int" valueString="int::select(heap,self,E_Loop::$high)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="low" isArrayIndex="false">
                  <value name="low {true}" typeString="int" valueString="int::select(heap,self,E_Loop::$low)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
            </value>
         </variable>
         <variable name="exc" isArrayIndex="false">
            <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
            </value>
         </variable>
         <statement name="int i = 0;" pathCondition="true" pathConditionChanged="false">
            <constraint name="wellFormed(heap)"/>
            <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
            <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
            <constraint name="not(equals(self,null))"/>
            <variable name="self" isArrayIndex="false">
               <value name="self {true}" typeString="E_Loop" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                  <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                  <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                  <constraint name="not(equals(self,null))"/>
                  <variable name="high" isArrayIndex="false">
                     <value name="high {true}" typeString="int" valueString="int::select(heap,self,E_Loop::$high)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="low" isArrayIndex="false">
                     <value name="low {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
               </value>
            </variable>
            <variable name="exc" isArrayIndex="false">
               <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <loopInvariant name="invariant: (i &lt;= self.high + 1 &amp; self.low * 2 = i * (i - 1))&lt;&lt;SC&gt;&gt;;
variant: self.high - i + 1
mod: {(self, E_Loop::$low)}" pathCondition="true" pathConditionChanged="false" initiallyValid="false">
               <constraint name="wellFormed(heap)"/>
               <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
               <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
               <constraint name="not(equals(self,null))"/>
               <variable name="self" isArrayIndex="false">
                  <value name="self {true}" typeString="E_Loop" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                     <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                     <constraint name="not(equals(self,null))"/>
                     <variable name="high" isArrayIndex="false">
                        <value name="high {true}" typeString="int" valueString="int::select(heap,self,E_Loop::$high)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="low" isArrayIndex="false">
                        <value name="low {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                  </value>
               </variable>
               <variable name="exc" isArrayIndex="false">
                  <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="i" isArrayIndex="false">
                  <value name="i {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <branchCondition name="or(or(not(equals(int::select(anon_heap_LOOP,self,E_Loop::$low),E_Loop_low_0)),not(equals(int::select(heap,self,E_Loop::$high),E_Loop_high_0))),and(leq(i_0,E_Loop_high_0),equals(mul(i_0,i_0),add(mul(E_Loop_low_0,Z(2(#))),i_0))))" pathCondition="imp(and(and(equals(int::select(heap,self,E_Loop::$high),E_Loop_high_0),equals(int::select(anon_heap_LOOP,self,E_Loop::$low),E_Loop_low_0&lt;&lt;selectSK&gt;&gt;)),equals(add(E_Loop_low_0,mul(E_Loop_low_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(leq(i_0,E_Loop_high_0),equals(mul(i_0,i_0),add(mul(E_Loop_low_0,Z(2(#))),i_0))))" pathConditionChanged="true" branchCondition="or(or(not(equals(int::select(anon_heap_LOOP,self,E_Loop::$low),E_Loop_low_0)),not(equals(int::select(heap,self,E_Loop::$high),E_Loop_high_0))),and(leq(i_0,E_Loop_high_0),equals(mul(i_0,i_0),add(mul(E_Loop_low_0,Z(2(#))),i_0))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Body Preserves Invariant">
                  <constraint name="wellFormed(heap)"/>
                  <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                  <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                  <constraint name="wellFormed(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;)"/>
                  <constraint name="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,self,E_Loop::$low,Z(0(#))))),elem-update(i)(Z(0(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(heap)(anon(heap,singleton(self,E_Loop::$low),anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;))),and(and(leq(i,add(int::select(heap,self,E_Loop::$high),Z(1(#)))),equals(mul(int::select(heap,self,E_Loop::$low),Z(2(#))),mul(i,sub(i,Z(1(#))))))&lt;&lt;SC&gt;&gt;,inInt(i))))"/>
                  <constraint name="not(equals(self,null))"/>
                  <variable name="self" isArrayIndex="false">
                     <value name="self {true}" typeString="E_Loop" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                        <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                        <constraint name="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,self,E_Loop::$low,Z(0(#))))),elem-update(i)(Z(0(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(heap)(anon(heap,singleton(self,E_Loop::$low),anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;))),and(and(leq(i,add(int::select(heap,self,E_Loop::$high),Z(1(#)))),equals(mul(int::select(heap,self,E_Loop::$low),Z(2(#))),mul(i,sub(i,Z(1(#))))))&lt;&lt;SC&gt;&gt;,inInt(i))))"/>
                        <constraint name="not(equals(self,null))"/>
                        <variable name="high" isArrayIndex="false">
                           <value name="high {true}" typeString="int" valueString="int::select(heap,self,E_Loop::$high)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              <constraint name="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,self,E_Loop::$low,Z(0(#))))),elem-update(i)(Z(0(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(heap)(anon(heap,singleton(self,E_Loop::$low),anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;))),and(and(leq(i,add(int::select(heap,self,E_Loop::$high),Z(1(#)))),equals(mul(int::select(heap,self,E_Loop::$low),Z(2(#))),mul(i,sub(i,Z(1(#))))))&lt;&lt;SC&gt;&gt;,inInt(i))))"/>
                           </value>
                        </variable>
                        <variable name="low" isArrayIndex="false">
                           <value name="low {true}" typeString="int" valueString="int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="i" isArrayIndex="false">
                     <value name="i {true}" typeString="int" valueString="i_0" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="heap" isArrayIndex="false">
                     <value name="heap {true}" typeString="Heap" valueString="anon(store(heap,self,E_Loop::$low,Z(0(#))),singleton(self,E_Loop::$low),anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        <constraint name="wellFormed(heap)"/>
                        <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                        <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                        <constraint name="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,self,E_Loop::$low,Z(0(#))))),elem-update(i)(Z(0(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(heap)(anon(heap,singleton(self,E_Loop::$low),anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;))),and(and(leq(i,add(int::select(heap,self,E_Loop::$high),Z(1(#)))),equals(mul(int::select(heap,self,E_Loop::$low),Z(2(#))),mul(i,sub(i,Z(1(#))))))&lt;&lt;SC&gt;&gt;,inInt(i))))"/>
                        <constraint name="not(equals(self,null))"/>
                     </value>
                  </variable>
                  <variable name="heapBefore_LOOP" isArrayIndex="false">
                     <value name="heapBefore_LOOP {true}" typeString="Heap" valueString="store(heap,self,E_Loop::$low,Z(0(#)))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        <constraint name="wellFormed(heap)"/>
                        <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                        <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                        <constraint name="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,self,E_Loop::$low,Z(0(#))))),elem-update(i)(Z(0(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(heap)(anon(heap,singleton(self,E_Loop::$low),anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;))),and(and(leq(i,add(int::select(heap,self,E_Loop::$high),Z(1(#)))),equals(mul(int::select(heap,self,E_Loop::$low),Z(2(#))),mul(i,sub(i,Z(1(#))))))&lt;&lt;SC&gt;&gt;,inInt(i))))"/>
                        <constraint name="not(equals(self,null))"/>
                     </value>
                  </variable>
                  <variable name="iBefore_LOOP" isArrayIndex="false">
                     <value name="iBefore_LOOP {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="variant" isArrayIndex="false">
                     <value name="variant {true}" typeString="int" valueString="add(add(Z(1(#)),mul(i_0,Z(neglit(1(#))))),int::select(heap,self,E_Loop::$high))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        <constraint name="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,self,E_Loop::$low,Z(0(#))))),elem-update(i)(Z(0(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(heap)(anon(heap,singleton(self,E_Loop::$low),anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;))),and(and(leq(i,add(int::select(heap,self,E_Loop::$high),Z(1(#)))),equals(mul(int::select(heap,self,E_Loop::$low),Z(2(#))),mul(i,sub(i,Z(1(#))))))&lt;&lt;SC&gt;&gt;,inInt(i))))"/>
                     </value>
                  </variable>
                  <loopCondition name="i &lt;= this.high;" pathCondition="imp(and(and(equals(int::select(heap,self,E_Loop::$high),E_Loop_high_0),equals(int::select(anon_heap_LOOP,self,E_Loop::$low),E_Loop_low_0&lt;&lt;selectSK&gt;&gt;)),equals(add(E_Loop_low_0,mul(E_Loop_low_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(leq(i_0,E_Loop_high_0),equals(mul(i_0,i_0),add(mul(E_Loop_low_0,Z(2(#))),i_0))))" pathConditionChanged="false" blockOpened="false">
                     <constraint name="geq(int::select(heap,self,E_Loop::$high),i_0)"/>
                     <constraint name="geq(mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#))),mul(i_0,Z(neglit(1(#)))))"/>
                     <constraint name="wellFormed(heap)"/>
                     <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                     <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                     <constraint name="wellFormed(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;)"/>
                     <constraint name="equals(mul(i_0,i_0),add(i_0,mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#)))))"/>
                     <constraint name="not(equals(self,null))"/>
                     <variable name="self" isArrayIndex="false">
                        <value name="self {true}" typeString="E_Loop" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           <constraint name="geq(int::select(heap,self,E_Loop::$high),i_0)"/>
                           <constraint name="geq(mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#))),mul(i_0,Z(neglit(1(#)))))"/>
                           <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                           <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                           <constraint name="equals(mul(i_0,i_0),add(i_0,mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#)))))"/>
                           <constraint name="not(equals(self,null))"/>
                           <variable name="high" isArrayIndex="false">
                              <value name="high {true}" typeString="int" valueString="int::select(heap,self,E_Loop::$high)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 <constraint name="geq(int::select(heap,self,E_Loop::$high),i_0)"/>
                              </value>
                           </variable>
                           <variable name="low" isArrayIndex="false">
                              <value name="low {true}" typeString="int" valueString="int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 <constraint name="geq(mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#))),mul(i_0,Z(neglit(1(#)))))"/>
                                 <constraint name="equals(mul(i_0,i_0),add(i_0,mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#)))))"/>
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="i" isArrayIndex="false">
                        <value name="i {true}" typeString="int" valueString="i_0" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="heap" isArrayIndex="false">
                        <value name="heap {true}" typeString="Heap" valueString="anon(store(heap,self,E_Loop::$low,Z(0(#))),singleton(self,E_Loop::$low),anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           <constraint name="geq(int::select(heap,self,E_Loop::$high),i_0)"/>
                           <constraint name="geq(mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#))),mul(i_0,Z(neglit(1(#)))))"/>
                           <constraint name="wellFormed(heap)"/>
                           <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                           <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                           <constraint name="equals(mul(i_0,i_0),add(i_0,mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#)))))"/>
                           <constraint name="not(equals(self,null))"/>
                        </value>
                     </variable>
                     <variable name="variant" isArrayIndex="false">
                        <value name="variant {true}" typeString="int" valueString="add(add(Z(1(#)),mul(i_0,Z(neglit(1(#))))),int::select(heap,self,E_Loop::$high))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           <constraint name="geq(int::select(heap,self,E_Loop::$high),i_0)"/>
                        </value>
                     </variable>
                     <variable name="exc_1" isArrayIndex="false">
                        <value name="exc_1 {true}" typeString="boolean" valueString="FALSE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <statement name="this.low = this.low + i;" pathCondition="imp(and(and(equals(int::select(heap,self,E_Loop::$high),E_Loop_high_0),equals(int::select(anon_heap_LOOP,self,E_Loop::$low),E_Loop_low_0&lt;&lt;selectSK&gt;&gt;)),equals(add(E_Loop_low_0,mul(E_Loop_low_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(leq(i_0,E_Loop_high_0),equals(mul(i_0,i_0),add(mul(E_Loop_low_0,Z(2(#))),i_0))))" pathConditionChanged="false">
                        <constraint name="geq(int::select(heap,self,E_Loop::$high),i_0)"/>
                        <constraint name="geq(mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#))),mul(i_0,Z(neglit(1(#)))))"/>
                        <constraint name="wellFormed(heap)"/>
                        <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                        <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                        <constraint name="wellFormed(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;)"/>
                        <constraint name="equals(mul(i_0,i_0),add(i_0,mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#)))))"/>
                        <constraint name="not(equals(self,null))"/>
                        <variable name="self" isArrayIndex="false">
                           <value name="self {true}" typeString="E_Loop" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <constraint name="geq(int::select(heap,self,E_Loop::$high),i_0)"/>
                              <constraint name="geq(mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#))),mul(i_0,Z(neglit(1(#)))))"/>
                              <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                              <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                              <constraint name="equals(mul(i_0,i_0),add(i_0,mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#)))))"/>
                              <constraint name="not(equals(self,null))"/>
                              <variable name="high" isArrayIndex="false">
                                 <value name="high {true}" typeString="int" valueString="int::select(heap,self,E_Loop::$high)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    <constraint name="geq(int::select(heap,self,E_Loop::$high),i_0)"/>
                                 </value>
                              </variable>
                              <variable name="low" isArrayIndex="false">
                                 <value name="low {true}" typeString="int" valueString="int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    <constraint name="geq(mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#))),mul(i_0,Z(neglit(1(#)))))"/>
                                    <constraint name="equals(mul(i_0,i_0),add(i_0,mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#)))))"/>
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="i" isArrayIndex="false">
                           <value name="i {true}" typeString="int" valueString="i_0" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="heap" isArrayIndex="false">
                           <value name="heap {true}" typeString="Heap" valueString="anon(store(heap,self,E_Loop::$low,Z(0(#))),singleton(self,E_Loop::$low),anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              <constraint name="geq(int::select(heap,self,E_Loop::$high),i_0)"/>
                              <constraint name="geq(mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#))),mul(i_0,Z(neglit(1(#)))))"/>
                              <constraint name="wellFormed(heap)"/>
                              <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                              <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                              <constraint name="equals(mul(i_0,i_0),add(i_0,mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#)))))"/>
                              <constraint name="not(equals(self,null))"/>
                           </value>
                        </variable>
                        <variable name="variant" isArrayIndex="false">
                           <value name="variant {true}" typeString="int" valueString="add(add(Z(1(#)),mul(i_0,Z(neglit(1(#))))),int::select(heap,self,E_Loop::$high))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              <constraint name="geq(int::select(heap,self,E_Loop::$high),i_0)"/>
                           </value>
                        </variable>
                        <variable name="exc_1" isArrayIndex="false">
                           <value name="exc_1 {true}" typeString="boolean" valueString="FALSE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <statement name="i = i + 1;" pathCondition="imp(and(and(equals(int::select(heap,self,E_Loop::$high),E_Loop_high_0),equals(int::select(anon_heap_LOOP,self,E_Loop::$low),E_Loop_low_0&lt;&lt;selectSK&gt;&gt;)),equals(add(E_Loop_low_0,mul(E_Loop_low_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(leq(i_0,E_Loop_high_0),equals(mul(i_0,i_0),add(mul(E_Loop_low_0,Z(2(#))),i_0))))" pathConditionChanged="false">
                           <constraint name="geq(int::select(heap,self,E_Loop::$high),i_0)"/>
                           <constraint name="geq(mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#))),mul(i_0,Z(neglit(1(#)))))"/>
                           <constraint name="wellFormed(heap)"/>
                           <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                           <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                           <constraint name="wellFormed(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;)"/>
                           <constraint name="equals(mul(i_0,i_0),add(i_0,mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#)))))"/>
                           <constraint name="not(equals(self,null))"/>
                           <variable name="self" isArrayIndex="false">
                              <value name="self {true}" typeString="E_Loop" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <constraint name="geq(int::select(heap,self,E_Loop::$high),i_0)"/>
                                 <constraint name="geq(mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#))),mul(i_0,Z(neglit(1(#)))))"/>
                                 <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                                 <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                                 <constraint name="equals(mul(i_0,i_0),add(i_0,mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#)))))"/>
                                 <constraint name="not(equals(self,null))"/>
                                 <variable name="high" isArrayIndex="false">
                                    <value name="high {true}" typeString="int" valueString="int::select(heap,self,E_Loop::$high)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       <constraint name="geq(int::select(heap,self,E_Loop::$high),i_0)"/>
                                    </value>
                                 </variable>
                                 <variable name="low" isArrayIndex="false">
                                    <value name="low {true}" typeString="int" valueString="add(i_0,int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       <constraint name="geq(mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#))),mul(i_0,Z(neglit(1(#)))))"/>
                                       <constraint name="equals(mul(i_0,i_0),add(i_0,mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#)))))"/>
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="exc" isArrayIndex="false">
                              <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="i" isArrayIndex="false">
                              <value name="i {true}" typeString="int" valueString="i_0" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="variant" isArrayIndex="false">
                              <value name="variant {true}" typeString="int" valueString="add(add(Z(1(#)),mul(i_0,Z(neglit(1(#))))),int::select(heap,self,E_Loop::$high))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 <constraint name="geq(int::select(heap,self,E_Loop::$high),i_0)"/>
                              </value>
                           </variable>
                           <variable name="exc_1" isArrayIndex="false">
                              <value name="exc_1 {true}" typeString="boolean" valueString="FALSE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <termination name="&lt;loop body end&gt;" pathCondition="imp(and(and(equals(int::select(heap,self,E_Loop::$high),E_Loop_high_0),equals(int::select(anon_heap_LOOP,self,E_Loop::$low),E_Loop_low_0&lt;&lt;selectSK&gt;&gt;)),equals(add(E_Loop_low_0,mul(E_Loop_low_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(leq(i_0,E_Loop_high_0),equals(mul(i_0,i_0),add(mul(E_Loop_low_0,Z(2(#))),i_0))))" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="true">
                              <constraint name="geq(int::select(heap,self,E_Loop::$high),i_0)"/>
                              <constraint name="geq(mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#))),mul(i_0,Z(neglit(1(#)))))"/>
                              <constraint name="wellFormed(heap)"/>
                              <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                              <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                              <constraint name="wellFormed(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;)"/>
                              <constraint name="equals(mul(i_0,i_0),add(i_0,mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#)))))"/>
                              <constraint name="not(equals(self,null))"/>
                              <variable name="exc" isArrayIndex="false">
                                 <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="variant" isArrayIndex="false">
                                 <value name="variant {true}" typeString="int" valueString="add(add(Z(1(#)),mul(i_0,Z(neglit(1(#))))),int::select(heap,self,E_Loop::$high))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    <constraint name="geq(int::select(heap,self,E_Loop::$high),i_0)"/>
                                 </value>
                              </variable>
                              <variable name="exc_1" isArrayIndex="false">
                                 <value name="exc_1 {true}" typeString="boolean" valueString="FALSE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="i" isArrayIndex="false">
                                 <value name="i {true}" typeString="int" valueString="add(Z(1(#)),i_0)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </termination>
                        </statement>
                     </statement>
                  </loopCondition>
               </branchCondition>
               <branchCondition name="or(or(not(equals(int::select(anon_heap_LOOP,self,E_Loop::$low),E_Loop_low_0)),not(equals(int::select(heap,self,E_Loop::$high),E_Loop_high_0))),and(equals(i_0,add(Z(1(#)),E_Loop_high_0)),equals(mul(i_0,i_0),add(mul(E_Loop_low_0,Z(2(#))),i_0))))" pathCondition="imp(and(and(equals(int::select(heap,self,E_Loop::$high),E_Loop_high_0),equals(int::select(anon_heap_LOOP,self,E_Loop::$low),E_Loop_low_0&lt;&lt;selectSK&gt;&gt;)),equals(add(E_Loop_low_0,mul(E_Loop_low_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(equals(i_0,add(Z(1(#)),E_Loop_high_0)),equals(mul(i_0,i_0),add(mul(E_Loop_low_0,Z(2(#))),i_0))))" pathConditionChanged="true" branchCondition="or(or(not(equals(int::select(anon_heap_LOOP,self,E_Loop::$low),E_Loop_low_0)),not(equals(int::select(heap,self,E_Loop::$high),E_Loop_high_0))),and(equals(i_0,add(Z(1(#)),E_Loop_high_0)),equals(mul(i_0,i_0),add(mul(E_Loop_low_0,Z(2(#))),i_0))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
                  <constraint name="wellFormed(heap)"/>
                  <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                  <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                  <constraint name="wellFormed(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;)"/>
                  <constraint name="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,self,E_Loop::$low,Z(0(#))))),elem-update(i)(Z(0(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(heap)(anon(heap,singleton(self,E_Loop::$low),anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;))),and(and(leq(i,add(int::select(heap,self,E_Loop::$high),Z(1(#)))),equals(mul(int::select(heap,self,E_Loop::$low),Z(2(#))),mul(i,sub(i,Z(1(#))))))&lt;&lt;SC&gt;&gt;,inInt(i))))"/>
                  <constraint name="not(equals(self,null))"/>
                  <variable name="self" isArrayIndex="false">
                     <value name="self {true}" typeString="E_Loop" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                        <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                        <constraint name="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,self,E_Loop::$low,Z(0(#))))),elem-update(i)(Z(0(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(heap)(anon(heap,singleton(self,E_Loop::$low),anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;))),and(and(leq(i,add(int::select(heap,self,E_Loop::$high),Z(1(#)))),equals(mul(int::select(heap,self,E_Loop::$low),Z(2(#))),mul(i,sub(i,Z(1(#))))))&lt;&lt;SC&gt;&gt;,inInt(i))))"/>
                        <constraint name="not(equals(self,null))"/>
                        <variable name="high" isArrayIndex="false">
                           <value name="high {true}" typeString="int" valueString="int::select(heap,self,E_Loop::$high)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              <constraint name="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,self,E_Loop::$low,Z(0(#))))),elem-update(i)(Z(0(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(heap)(anon(heap,singleton(self,E_Loop::$low),anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;))),and(and(leq(i,add(int::select(heap,self,E_Loop::$high),Z(1(#)))),equals(mul(int::select(heap,self,E_Loop::$low),Z(2(#))),mul(i,sub(i,Z(1(#))))))&lt;&lt;SC&gt;&gt;,inInt(i))))"/>
                           </value>
                        </variable>
                        <variable name="low" isArrayIndex="false">
                           <value name="low {true}" typeString="int" valueString="int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="i" isArrayIndex="false">
                     <value name="i {true}" typeString="int" valueString="i_0" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="heap" isArrayIndex="false">
                     <value name="heap {true}" typeString="Heap" valueString="anon(store(heap,self,E_Loop::$low,Z(0(#))),singleton(self,E_Loop::$low),anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        <constraint name="wellFormed(heap)"/>
                        <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                        <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                        <constraint name="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,self,E_Loop::$low,Z(0(#))))),elem-update(i)(Z(0(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(heap)(anon(heap,singleton(self,E_Loop::$low),anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;))),and(and(leq(i,add(int::select(heap,self,E_Loop::$high),Z(1(#)))),equals(mul(int::select(heap,self,E_Loop::$low),Z(2(#))),mul(i,sub(i,Z(1(#))))))&lt;&lt;SC&gt;&gt;,inInt(i))))"/>
                        <constraint name="not(equals(self,null))"/>
                     </value>
                  </variable>
                  <methodReturn name="&lt;return of calculate&gt;" signature="&lt;return of self.calculate()&gt;" pathCondition="imp(and(and(equals(int::select(heap,self,E_Loop::$high),E_Loop_high_0),equals(int::select(anon_heap_LOOP,self,E_Loop::$low),E_Loop_low_0&lt;&lt;selectSK&gt;&gt;)),equals(add(E_Loop_low_0,mul(E_Loop_low_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(equals(i_0,add(Z(1(#)),E_Loop_high_0)),equals(mul(i_0,i_0),add(mul(E_Loop_low_0,Z(2(#))),i_0))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="imp(and(and(equals(int::select(heap,self,E_Loop::$high),E_Loop_high_0),equals(int::select(anon_heap_LOOP,self,E_Loop::$low),E_Loop_low_0&lt;&lt;selectSK&gt;&gt;)),equals(add(E_Loop_low_0,mul(E_Loop_low_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(equals(i_0,add(Z(1(#)),E_Loop_high_0)),equals(mul(i_0,i_0),add(mul(E_Loop_low_0,Z(2(#))),i_0))))">
                     <constraint name="geq(mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#))),mul(i_0,Z(neglit(1(#)))))"/>
                     <constraint name="wellFormed(heap)"/>
                     <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                     <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                     <constraint name="wellFormed(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;)"/>
                     <constraint name="geq(int::select(heap,self,E_Loop::$high),add(Z(neglit(1(#))),i_0))"/>
                     <constraint name="equals(mul(i_0,i_0),add(i_0,mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#)))))"/>
                     <constraint name="not(equals(self,null))"/>
                     <variable name="self" isArrayIndex="false">
                        <value name="self {true}" typeString="E_Loop" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           <constraint name="geq(mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#))),mul(i_0,Z(neglit(1(#)))))"/>
                           <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                           <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                           <constraint name="geq(int::select(heap,self,E_Loop::$high),add(Z(neglit(1(#))),i_0))"/>
                           <constraint name="equals(mul(i_0,i_0),add(i_0,mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#)))))"/>
                           <constraint name="not(equals(self,null))"/>
                           <variable name="high" isArrayIndex="false">
                              <value name="high {true}" typeString="int" valueString="int::select(heap,self,E_Loop::$high)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 <constraint name="geq(int::select(heap,self,E_Loop::$high),add(Z(neglit(1(#))),i_0))"/>
                              </value>
                           </variable>
                           <variable name="low" isArrayIndex="false">
                              <value name="low {true}" typeString="int" valueString="int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 <constraint name="geq(mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#))),mul(i_0,Z(neglit(1(#)))))"/>
                                 <constraint name="equals(mul(i_0,i_0),add(i_0,mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#)))))"/>
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="i" isArrayIndex="false">
                        <value name="i {true}" typeString="int" valueString="i_0" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="heap" isArrayIndex="false">
                        <value name="heap {true}" typeString="Heap" valueString="anon(store(heap,self,E_Loop::$low,Z(0(#))),singleton(self,E_Loop::$low),anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           <constraint name="geq(mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#))),mul(i_0,Z(neglit(1(#)))))"/>
                           <constraint name="wellFormed(heap)"/>
                           <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                           <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                           <constraint name="geq(int::select(heap,self,E_Loop::$high),add(Z(neglit(1(#))),i_0))"/>
                           <constraint name="equals(mul(i_0,i_0),add(i_0,mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#)))))"/>
                           <constraint name="not(equals(self,null))"/>
                        </value>
                     </variable>
                     <termination name="&lt;end&gt;" pathCondition="imp(and(and(equals(int::select(heap,self,E_Loop::$high),E_Loop_high_0),equals(int::select(anon_heap_LOOP,self,E_Loop::$low),E_Loop_low_0&lt;&lt;selectSK&gt;&gt;)),equals(add(E_Loop_low_0,mul(E_Loop_low_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(equals(i_0,add(Z(1(#)),E_Loop_high_0)),equals(mul(i_0,i_0),add(mul(E_Loop_low_0,Z(2(#))),i_0))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                        <constraint name="geq(mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#))),mul(i_0,Z(neglit(1(#)))))"/>
                        <constraint name="wellFormed(heap)"/>
                        <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                        <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                        <constraint name="wellFormed(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;)"/>
                        <constraint name="geq(int::select(heap,self,E_Loop::$high),add(Z(neglit(1(#))),i_0))"/>
                        <constraint name="equals(mul(i_0,i_0),add(i_0,mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#)))))"/>
                        <constraint name="not(equals(self,null))"/>
                        <variable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="i" isArrayIndex="false">
                           <value name="i {true}" typeString="int" valueString="i_0" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="heap" isArrayIndex="false">
                           <value name="heap {true}" typeString="Heap" valueString="anon(store(heap,self,E_Loop::$low,Z(0(#))),singleton(self,E_Loop::$low),anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              <constraint name="geq(mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#))),mul(i_0,Z(neglit(1(#)))))"/>
                              <constraint name="wellFormed(heap)"/>
                              <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                              <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                              <constraint name="geq(int::select(heap,self,E_Loop::$high),add(Z(neglit(1(#))),i_0))"/>
                              <constraint name="equals(mul(i_0,i_0),add(i_0,mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#)))))"/>
                              <constraint name="not(equals(self,null))"/>
                           </value>
                        </variable>
                     </termination>
                     <callStateVariable name="self" isArrayIndex="false">
                        <value name="self {true}" typeString="E_Loop" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           <constraint name="geq(mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#))),mul(i_0,Z(neglit(1(#)))))"/>
                           <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                           <constraint name="equals(E_Loop::exactInstance(self),TRUE)"/>
                           <constraint name="geq(int::select(heap,self,E_Loop::$high),add(Z(neglit(1(#))),i_0))"/>
                           <constraint name="equals(mul(i_0,i_0),add(i_0,mul(int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,E_Loop::$low),Z(2(#)))))"/>
                           <constraint name="not(equals(self,null))"/>
                           <variable name="high" isArrayIndex="false">
                              <value name="high {equals(int::select(heap,self,E_Loop::$high),E_Loop_high_0)}" typeString="int" valueString="E_Loop_high_0" isValueAnObject="false" isValueUnknown="false" conditionString="equals(int::select(heap,self,E_Loop::$high),E_Loop_high_0)">
                              </value>
                              <value name="high {not(equals(int::select(heap,self,E_Loop::$high),E_Loop_high_0))}" typeString="int" valueString="int::select(heap,self,E_Loop::$high)" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(int::select(heap,self,E_Loop::$high),E_Loop_high_0))">
                                 <constraint name="geq(int::select(heap,self,E_Loop::$high),add(Z(neglit(1(#))),i_0))"/>
                              </value>
                           </variable>
                           <variable name="low" isArrayIndex="false">
                              <value name="low {true}" typeString="int" valueString="int::select(heap,self,E_Loop::$low)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                        </value>
                     </callStateVariable>
                     <callStateVariable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </callStateVariable>
                     <callStateVariable name="heapBefore_calculate" isArrayIndex="false">
                        <value name="heapBefore_calculate {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           <constraint name="wellFormed(heap)"/>
                           <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                           <constraint name="geq(int::select(heap,self,E_Loop::$high),add(Z(neglit(1(#))),i_0))"/>
                        </value>
                     </callStateVariable>
                     <callStateVariable name="savedHeapBefore_calculate" isArrayIndex="false">
                        <value name="savedHeapBefore_calculate {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </callStateVariable>
                  </methodReturn>
               </branchCondition>
            </loopInvariant>
         </statement>
      </statement>
      <methodReturnEntry path="/0/0/0/0/1/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/1/0/0"/>
</start>
