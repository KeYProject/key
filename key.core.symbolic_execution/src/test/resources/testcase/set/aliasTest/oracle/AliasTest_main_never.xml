<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <variable name="heapAtPre" isArrayIndex="false">
      <value name="heapAtPre {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
      </value>
   </variable>
   <methodCall name="&lt;call self.main(a,b)&gt;" pathCondition="true" pathConditionChanged="false">
      <variable name="exc" isArrayIndex="false">
         <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
         </value>
      </variable>
      <statement name="a.value=2;" pathCondition="true" pathConditionChanged="false">
         <variable name="self" isArrayIndex="false">
            <value name="self {true}" typeString="AliasTest" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
            </value>
         </variable>
         <variable name="a" isArrayIndex="false">
            <value name="a {true}" typeString="AliasTest.IntWrapper" valueString="a" isValueAnObject="true" isValueUnknown="false" conditionString="true">
               <variable name="value" isArrayIndex="false">
                  <value name="value {true}" typeString="int" valueString="int::select(heap,a,AliasTest.IntWrapper::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
            </value>
         </variable>
         <variable name="b" isArrayIndex="false">
            <value name="b {true}" typeString="AliasTest.IntWrapper" valueString="b" isValueAnObject="true" isValueUnknown="false" conditionString="true">
               <variable name="value" isArrayIndex="false">
                  <value name="value {true}" typeString="int" valueString="int::select(heap,b,AliasTest.IntWrapper::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
            </value>
         </variable>
         <variable name="exc" isArrayIndex="false">
            <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
            </value>
         </variable>
         <statement name="b.value=3;" pathCondition="true" pathConditionChanged="false">
            <variable name="self" isArrayIndex="false">
               <value name="self {true}" typeString="AliasTest" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <variable name="a" isArrayIndex="false">
               <value name="a {true}" typeString="AliasTest.IntWrapper" valueString="a" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                  <variable name="value" isArrayIndex="false">
                     <value name="value {true}" typeString="int" valueString="Z(2(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
               </value>
            </variable>
            <variable name="b" isArrayIndex="false">
               <value name="b {true}" typeString="AliasTest.IntWrapper" valueString="b" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                  <variable name="value" isArrayIndex="false">
                     <value name="value {equals(b,a)}" typeString="int" valueString="Z(2(#))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(b,a)">
                     </value>
                     <value name="value {not(equals(b,a))}" typeString="int" valueString="int::select(heap,b,AliasTest.IntWrapper::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(b,a))">
                     </value>
                  </variable>
               </value>
            </variable>
            <variable name="exc" isArrayIndex="false">
               <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <statement name="return a.value+b.value;" pathCondition="true" pathConditionChanged="false">
               <variable name="self" isArrayIndex="false">
                  <value name="self {true}" typeString="AliasTest" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="a" isArrayIndex="false">
                  <value name="a {true}" typeString="AliasTest.IntWrapper" valueString="a" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     <variable name="value" isArrayIndex="false">
                        <value name="value {equals(b,a)}" typeString="int" valueString="Z(3(#))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(b,a)">
                        </value>
                        <value name="value {not(equals(b,a))}" typeString="int" valueString="Z(2(#))" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(b,a))">
                        </value>
                     </variable>
                  </value>
               </variable>
               <variable name="b" isArrayIndex="false">
                  <value name="b {true}" typeString="AliasTest.IntWrapper" valueString="b" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     <variable name="value" isArrayIndex="false">
                        <value name="value {true}" typeString="int" valueString="Z(3(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                  </value>
               </variable>
               <variable name="exc" isArrayIndex="false">
                  <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <methodReturn name="&lt;return of main&gt;" signature="&lt;return of self.main(a,b)&gt;" pathCondition="true" pathConditionChanged="false" nameIncludingReturnValue="&lt;return 
	Z(6(#)) {equals(b,a)}, 
	Z(5(#)) {not(equals(b,a))}
as result of main&gt;" signatureIncludingReturnValue="&lt;return 
	Z(6(#)) {equals(b,a)}, 
	Z(5(#)) {not(equals(b,a))}
as result of self.main(a,b)&gt;" isReturnValueComputed="true" methodReturnCondition="true">
                  <methodReturnValue name="Z(6(#)) {equals(b,a)}" returnValueString="Z(6(#))" hasCondition="true" conditionString="equals(b,a)">
                  </methodReturnValue>
                  <methodReturnValue name="Z(5(#)) {not(equals(b,a))}" returnValueString="Z(5(#))" hasCondition="true" conditionString="not(equals(b,a))">
                  </methodReturnValue>
                  <variable name="self" isArrayIndex="false">
                     <value name="self {true}" typeString="AliasTest" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="a" isArrayIndex="false">
                     <value name="a {true}" typeString="AliasTest.IntWrapper" valueString="a" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="value" isArrayIndex="false">
                           <value name="value {equals(b,a)}" typeString="int" valueString="Z(3(#))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(b,a)">
                           </value>
                           <value name="value {not(equals(b,a))}" typeString="int" valueString="Z(2(#))" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(b,a))">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="b" isArrayIndex="false">
                     <value name="b {true}" typeString="AliasTest.IntWrapper" valueString="b" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="value" isArrayIndex="false">
                           <value name="value {true}" typeString="int" valueString="Z(3(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <termination name="&lt;end&gt;" pathCondition="true" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                     <variable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                  </termination>
                  <callStateVariable name="self" isArrayIndex="false">
                     <value name="self {true}" typeString="AliasTest" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     </value>
                  </callStateVariable>
                  <callStateVariable name="a" isArrayIndex="false">
                     <value name="a {true}" typeString="AliasTest.IntWrapper" valueString="a" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="value" isArrayIndex="false">
                           <value name="value {true}" typeString="int" valueString="int::select(heap,a,AliasTest.IntWrapper::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                     </value>
                  </callStateVariable>
                  <callStateVariable name="b" isArrayIndex="false">
                     <value name="b {true}" typeString="AliasTest.IntWrapper" valueString="b" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="value" isArrayIndex="false">
                           <value name="value {true}" typeString="int" valueString="int::select(heap,b,AliasTest.IntWrapper::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                     </value>
                  </callStateVariable>
                  <callStateVariable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </callStateVariable>
                  <callStateVariable name="heapBefore_main" isArrayIndex="false">
                     <value name="heapBefore_main {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </callStateVariable>
                  <callStateVariable name="savedHeapBefore_main" isArrayIndex="false">
                     <value name="savedHeapBefore_main {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </callStateVariable>
               </methodReturn>
            </statement>
         </statement>
      </statement>
      <methodReturnEntry path="/0/0/0/0/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0"/>
</start>
