<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call LoopSplittingCondition.main(x)&gt;" pathCondition="true" pathConditionChanged="false">
      <statement name="int i = x&gt;=0 ?x :-x;" pathCondition="true" pathConditionChanged="false">
         <branchCondition name="gt(x,Z(neglit(1(#))))" pathCondition="gt(x,Z(neglit(1(#))))" pathConditionChanged="true" branchCondition="gt(x,Z(neglit(1(#))))" mergedBranchCondition="false" isBranchConditionComputed="true">
            <loopInvariant name="invariant: i &gt;= 0;
variant: i
mod: false" pathCondition="gt(x,Z(neglit(1(#))))" pathConditionChanged="false" initiallyValid="true">
               <branchCondition name="update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))" pathCondition="not(or(leq(x,Z(neglit(1(#)))),not(imp(geq(x,Z(0(#))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Body Preserves Invariant">
                  <loopCondition name="goOn(x);" pathCondition="not(or(leq(x,Z(neglit(1(#)))),not(imp(geq(x,Z(0(#))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))))))" pathConditionChanged="false" blockOpened="false">
                     <methodCall name="&lt;call LoopSplittingCondition.goOn(x_7)&gt;" pathCondition="not(or(leq(x,Z(neglit(1(#)))),not(imp(geq(x,Z(0(#))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))))))" pathConditionChanged="false">
                        <branchStatement name="if (x_7&gt;0)" pathCondition="not(or(leq(x,Z(neglit(1(#)))),not(imp(geq(x,Z(0(#))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))))))" pathConditionChanged="false" blockOpened="true">
                           <statement name="return true;" pathCondition="not(or(leq(x,Z(neglit(1(#)))),not(imp(geq(x,Z(0(#))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))))))" pathConditionChanged="false">
                              <methodReturn name="&lt;return of goOn&gt;" signature="&lt;return of LoopSplittingCondition.goOn(x_7)&gt;" pathCondition="not(or(leq(x,Z(neglit(1(#)))),not(imp(geq(x,Z(0(#))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))))))" pathConditionChanged="false" nameIncludingReturnValue="&lt;return TRUE as result of goOn&gt;" signatureIncludingReturnValue="&lt;return TRUE as result of LoopSplittingCondition.goOn(x_7)&gt;" isReturnValueComputed="true" methodReturnCondition="true">
                                 <methodReturnValue name="TRUE" returnValueString="TRUE" hasCondition="false">
                                 </methodReturnValue>
                                 <branchStatement name="if (i&gt;=0)" pathCondition="not(or(leq(x,Z(neglit(1(#)))),not(imp(geq(x,Z(0(#))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))))))" pathConditionChanged="false" blockOpened="true">
                                    <statement name="x--;" pathCondition="not(or(leq(x,Z(neglit(1(#)))),not(imp(geq(x,Z(0(#))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))))))" pathConditionChanged="false">
                                       <statement name="i--;" pathCondition="not(or(leq(x,Z(neglit(1(#)))),not(imp(geq(x,Z(0(#))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))))))" pathConditionChanged="false">
                                          <termination name="&lt;loop body end&gt;" pathCondition="not(or(leq(x,Z(neglit(1(#)))),not(imp(geq(x,Z(0(#))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))))))" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="false">
                                          </termination>
                                          <completedBlockEntry path="/0/0/0/0/0/0/0/0/0/0/0" conditionString="true"/>
                                       </statement>
                                    </statement>
                                    <blockCompletionEntry path="/0/0/0/0/0/0/0/0/0/0/0/0/0"/>
                                 </branchStatement>
                              </methodReturn>
                              <completedBlockEntry path="/0/0/0/0/0/0/0/0" conditionString="true"/>
                           </statement>
                           <blockCompletionEntry path="/0/0/0/0/0/0/0/0/0"/>
                        </branchStatement>
                        <methodReturnEntry path="/0/0/0/0/0/0/0/0/0/0"/>
                     </methodCall>
                  </loopCondition>
               </branchCondition>
               <branchCondition name="update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\&lt;{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\&gt; (and(not(equals(b,TRUE)),geq(i,Z(0(#))))))" pathCondition="not(or(leq(x,Z(neglit(1(#)))),not(imp(geq(x,Z(0(#))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\&lt;{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\&gt; (and(not(equals(b,TRUE)),geq(i,Z(0(#))))))))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\&lt;{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\&gt; (and(not(equals(b,TRUE)),geq(i,Z(0(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
                  <statement name="return i;" pathCondition="not(or(leq(x,Z(neglit(1(#)))),not(imp(geq(x,Z(0(#))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\&lt;{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\&gt; (and(not(equals(b,TRUE)),geq(i,Z(0(#))))))))))" pathConditionChanged="false">
                     <methodReturn name="&lt;return of main&gt;" signature="&lt;return of LoopSplittingCondition.main(x)&gt;" pathCondition="not(or(leq(x,Z(neglit(1(#)))),not(imp(geq(x,Z(0(#))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\&lt;{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\&gt; (and(not(equals(b,TRUE)),geq(i,Z(0(#))))))))))" pathConditionChanged="false" nameIncludingReturnValue="&lt;return i_0 as result of main&gt;" signatureIncludingReturnValue="&lt;return i_0 as result of LoopSplittingCondition.main(x)&gt;" isReturnValueComputed="true" methodReturnCondition="not(or(leq(x,Z(neglit(1(#)))),not(imp(geq(x,Z(0(#))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\&lt;{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\&gt; (and(not(equals(b,TRUE)),geq(i,Z(0(#))))))))))">
                        <methodReturnValue name="i_0" returnValueString="i_0" hasCondition="false">
                        </methodReturnValue>
                        <termination name="&lt;end&gt;" pathCondition="not(or(leq(x,Z(neglit(1(#)))),not(imp(geq(x,Z(0(#))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\&lt;{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\&gt; (and(not(equals(b,TRUE)),geq(i,Z(0(#))))))))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                        </termination>
                     </methodReturn>
                  </statement>
               </branchCondition>
            </loopInvariant>
         </branchCondition>
         <branchCondition name="lt(x,Z(0(#)))" pathCondition="lt(x,Z(0(#)))" pathConditionChanged="true" branchCondition="lt(x,Z(0(#)))" mergedBranchCondition="false" isBranchConditionComputed="true">
            <loopInvariant name="invariant: i &gt;= 0;
variant: i
mod: false" pathCondition="lt(x,Z(0(#)))" pathConditionChanged="false" initiallyValid="true">
               <branchCondition name="update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))" pathCondition="not(or(geq(x,Z(0(#))),not(imp(leq(x,Z(neglit(1(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Body Preserves Invariant">
                  <loopCondition name="goOn(x);" pathCondition="not(or(geq(x,Z(0(#))),not(imp(leq(x,Z(neglit(1(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))))))" pathConditionChanged="false" blockOpened="false">
                     <methodCall name="&lt;call LoopSplittingCondition.goOn(x_7)&gt;" pathCondition="not(or(geq(x,Z(0(#))),not(imp(leq(x,Z(neglit(1(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))))))" pathConditionChanged="false">
                        <branchStatement name="if (x_7&gt;0)" pathCondition="not(or(geq(x,Z(0(#))),not(imp(leq(x,Z(neglit(1(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))))))" pathConditionChanged="false" blockOpened="true">
                           <statement name="return true;" pathCondition="not(or(geq(x,Z(0(#))),not(imp(leq(x,Z(neglit(1(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))))))" pathConditionChanged="false">
                              <methodReturn name="&lt;return of goOn&gt;" signature="&lt;return of LoopSplittingCondition.goOn(x_7)&gt;" pathCondition="not(or(geq(x,Z(0(#))),not(imp(leq(x,Z(neglit(1(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))))))" pathConditionChanged="false" nameIncludingReturnValue="&lt;return TRUE as result of goOn&gt;" signatureIncludingReturnValue="&lt;return TRUE as result of LoopSplittingCondition.goOn(x_7)&gt;" isReturnValueComputed="true" methodReturnCondition="true">
                                 <methodReturnValue name="TRUE" returnValueString="TRUE" hasCondition="false">
                                 </methodReturnValue>
                                 <branchStatement name="if (i&gt;=0)" pathCondition="not(or(geq(x,Z(0(#))),not(imp(leq(x,Z(neglit(1(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))))))" pathConditionChanged="false" blockOpened="true">
                                    <statement name="x--;" pathCondition="not(or(geq(x,Z(0(#))),not(imp(leq(x,Z(neglit(1(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))))))" pathConditionChanged="false">
                                       <statement name="i--;" pathCondition="not(or(geq(x,Z(0(#))),not(imp(leq(x,Z(neglit(1(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))))))" pathConditionChanged="false">
                                          <termination name="&lt;loop body end&gt;" pathCondition="not(or(geq(x,Z(0(#))),not(imp(leq(x,Z(neglit(1(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\[{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\] (and(equals(b,TRUE),geq(i,Z(0(#))))))))))" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="false">
                                          </termination>
                                          <completedBlockEntry path="/0/0/1/0/0/0/0/0/0/0/0" conditionString="true"/>
                                       </statement>
                                    </statement>
                                    <blockCompletionEntry path="/0/0/1/0/0/0/0/0/0/0/0/0/0"/>
                                 </branchStatement>
                              </methodReturn>
                              <completedBlockEntry path="/0/0/1/0/0/0/0/0" conditionString="true"/>
                           </statement>
                           <blockCompletionEntry path="/0/0/1/0/0/0/0/0/0"/>
                        </branchStatement>
                        <methodReturnEntry path="/0/0/1/0/0/0/0/0/0/0"/>
                     </methodCall>
                  </loopCondition>
               </branchCondition>
               <branchCondition name="update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\&lt;{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\&gt; (and(not(equals(b,TRUE)),geq(i,Z(0(#))))))" pathCondition="not(or(geq(x,Z(0(#))),not(imp(leq(x,Z(neglit(1(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\&lt;{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\&gt; (and(not(equals(b,TRUE)),geq(i,Z(0(#))))))))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\&lt;{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\&gt; (and(not(equals(b,TRUE)),geq(i,Z(0(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
                  <statement name="return i;" pathCondition="not(or(geq(x,Z(0(#))),not(imp(leq(x,Z(neglit(1(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\&lt;{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\&gt; (and(not(equals(b,TRUE)),geq(i,Z(0(#))))))))))" pathConditionChanged="false">
                     <methodReturn name="&lt;return of main&gt;" signature="&lt;return of LoopSplittingCondition.main(x)&gt;" pathCondition="not(or(geq(x,Z(0(#))),not(imp(leq(x,Z(neglit(1(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\&lt;{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\&gt; (and(not(equals(b,TRUE)),geq(i,Z(0(#))))))))))" pathConditionChanged="false" nameIncludingReturnValue="&lt;return i_0 as result of main&gt;" signatureIncludingReturnValue="&lt;return i_0 as result of LoopSplittingCondition.main(x)&gt;" isReturnValueComputed="true" methodReturnCondition="not(or(geq(x,Z(0(#))),not(imp(leq(x,Z(neglit(1(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\&lt;{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\&gt; (and(not(equals(b,TRUE)),geq(i,Z(0(#))))))))))">
                        <methodReturnValue name="i_0" returnValueString="i_0" hasCondition="false">
                        </methodReturnValue>
                        <termination name="&lt;end&gt;" pathCondition="not(or(geq(x,Z(0(#))),not(imp(leq(x,Z(neglit(1(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(x)(x_0)),\&lt;{method-frame(source=main(int)@LoopSplittingCondition): {
    b=goOn(x);
  }
}\&gt; (and(not(equals(b,TRUE)),geq(i,Z(0(#))))))))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                        </termination>
                     </methodReturn>
                  </statement>
               </branchCondition>
            </loopInvariant>
         </branchCondition>
      </statement>
      <methodReturnEntry path="/0/0/0/0/1/0/0"/>
      <methodReturnEntry path="/0/0/1/0/1/0/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/1/0/0/0"/>
   <terminationEntry path="/0/0/1/0/0/0/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/1/0/1/0/0/0"/>
</start>
