<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call self.compute(x)&gt;" pathCondition="true" pathConditionChanged="false">
      <statement name="OneAssignmentTestValueWrapper tempX = x;" pathCondition="true" pathConditionChanged="false">
         <statement name="OneAssignmentTestValueWrapper tempY = this.y;" pathCondition="true" pathConditionChanged="false">
            <statement name="this.first=x;" pathCondition="true" pathConditionChanged="false">
               <statement name="this.second=this.y;" pathCondition="true" pathConditionChanged="false">
                  <statement name="return this.first.value+this.second.value+tempX.value+tempY.value;" pathCondition="true" pathConditionChanged="false">
                     <branchCondition name="not(equals(x,null))" pathCondition="not(equals(x,null))" pathConditionChanged="true" branchCondition="not(equals(x,null))" mergedBranchCondition="false" isBranchConditionComputed="true">
                        <branchCondition name="not(equals(OneAssignmentTestValueWrapper::select(heap,self,OneAssignmentTest::$y),null))" pathCondition="and(not(equals(x,null)),not(equals(OneAssignmentTestValueWrapper::select(heap,self,OneAssignmentTest::$y),null)))" pathConditionChanged="true" branchCondition="not(equals(OneAssignmentTestValueWrapper::select(heap,self,OneAssignmentTest::$y),null))" mergedBranchCondition="false" isBranchConditionComputed="true">
                           <methodReturn name="&lt;return of compute&gt;" signature="&lt;return of self.compute(x)&gt;" pathCondition="and(not(equals(x,null)),not(equals(OneAssignmentTestValueWrapper::select(heap,self,OneAssignmentTest::$y),null)))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="and(not(equals(x,null)),not(equals(OneAssignmentTestValueWrapper::select(heap,self,OneAssignmentTest::$y),null)))">
                              <termination name="&lt;end&gt;" pathCondition="and(not(equals(x,null)),not(equals(OneAssignmentTestValueWrapper::select(heap,self,OneAssignmentTest::$y),null)))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                              </termination>
                           </methodReturn>
                        </branchCondition>
                        <branchCondition name="equals(OneAssignmentTestValueWrapper::select(heap,self,OneAssignmentTest::$y),null)" pathCondition="and(not(equals(x,null)),equals(OneAssignmentTestValueWrapper::select(heap,self,OneAssignmentTest::$y),null))" pathConditionChanged="true" branchCondition="equals(OneAssignmentTestValueWrapper::select(heap,self,OneAssignmentTest::$y),null)" mergedBranchCondition="false" isBranchConditionComputed="true">
                           <exceptionalMethodReturn name="&lt;throw java.lang.NullPointerException&gt;" signature="&lt;exceptional return of &lt;call self.compute(x)&gt;&gt;" pathCondition="and(not(equals(x,null)),equals(OneAssignmentTestValueWrapper::select(heap,self,OneAssignmentTest::$y),null))" pathConditionChanged="false" methodReturnCondition="and(not(equals(x,null)),equals(OneAssignmentTestValueWrapper::select(heap,self,OneAssignmentTest::$y),null))">
                              <termination name="&lt;uncaught java.lang.NullPointerException&gt;" pathCondition="and(not(equals(x,null)),equals(OneAssignmentTestValueWrapper::select(heap,self,OneAssignmentTest::$y),null))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                              </termination>
                           </exceptionalMethodReturn>
                        </branchCondition>
                     </branchCondition>
                     <branchCondition name="equals(x,null)" pathCondition="equals(x,null)" pathConditionChanged="true" branchCondition="equals(x,null)" mergedBranchCondition="false" isBranchConditionComputed="true">
                        <exceptionalMethodReturn name="&lt;throw java.lang.NullPointerException&gt;" signature="&lt;exceptional return of &lt;call self.compute(x)&gt;&gt;" pathCondition="equals(x,null)" pathConditionChanged="false" methodReturnCondition="equals(x,null)">
                           <termination name="&lt;uncaught java.lang.NullPointerException&gt;" pathCondition="equals(x,null)" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                           </termination>
                        </exceptionalMethodReturn>
                     </branchCondition>
                  </statement>
               </statement>
            </statement>
         </statement>
      </statement>
      <methodReturnEntry path="/0/0/0/0/0/0/0/0/0"/>
      <methodReturnEntry path="/0/0/0/0/0/0/0/1/0"/>
      <methodReturnEntry path="/0/0/0/0/0/0/1/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/0/0/0/1/0/0"/>
   <terminationEntry path="/0/0/0/0/0/0/1/0/0"/>
</start>
