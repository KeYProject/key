<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <variable name="self" isArrayIndex="false">
      <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
      </value>
   </variable>
   <variable name="self" isArrayIndex="false">
      <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
         <variable name="passwords" isArrayIndex="false">
            <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
            </value>
         </variable>
      </value>
   </variable>
   <variable name="exc" isArrayIndex="false">
      <value name="exc {true}" typeString="java.lang.Throwable" valueString="exc" isValueAnObject="false" isValueUnknown="false" conditionString="true">
      </value>
   </variable>
   <methodCall name="&lt;call self.passwordChecker()&gt;" pathCondition="true" pathConditionChanged="false">
      <variable name="self" isArrayIndex="false">
         <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
         </value>
      </variable>
      <variable name="self" isArrayIndex="false">
         <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
            <variable name="passwords" isArrayIndex="false">
               <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
         </value>
      </variable>
      <variable name="exc" isArrayIndex="false">
         <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
         </value>
      </variable>
      <statement name="int i = 0;" pathCondition="true" pathConditionChanged="false">
         <variable name="self" isArrayIndex="false">
            <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
            </value>
         </variable>
         <variable name="self" isArrayIndex="false">
            <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
               <variable name="passwords" isArrayIndex="false">
                  <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
            </value>
         </variable>
         <variable name="exc" isArrayIndex="false">
            <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
            </value>
         </variable>
         <loopInvariant name="invariant:   i &gt;= 0
&amp; \forall int j_5;
    (   (j_5 &lt; i &amp; 0 &lt;= j_5)&lt;&lt;SC&gt;&gt; &amp; inInt(j_5)
     -&gt; self.passwords[j_5] &gt;= 0);
variant: self.passwords.length - i
mod: {}" pathCondition="true" pathConditionChanged="false" initiallyValid="true">
            <variable name="self" isArrayIndex="false">
               <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <variable name="self" isArrayIndex="false">
               <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                  <variable name="passwords" isArrayIndex="false">
                     <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
               </value>
            </variable>
            <variable name="exc" isArrayIndex="false">
               <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <variable name="i" isArrayIndex="false">
               <value name="i {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <branchCondition name="and(and(and(and(or(or(or(lt(i_0,Z(0(#))),lt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(or(lt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(geq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(0(#))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),lt(length(null),Z(0(#)))),leq(length(null),i_0))),or(or(or(or(gt(i_0,Z(neglit(1(#)))),lt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)))" pathCondition="imp(and(geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#))),geq(length(null),Z(0(#)))),and(and(and(and(or(or(leq(i_0,Z(neglit(1(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(geq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(0(#))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),leq(length(null),i_0))),or(or(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),geq(i_0,Z(0(#)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))))" pathConditionChanged="true" branchCondition="and(and(and(and(or(or(or(lt(i_0,Z(0(#))),lt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(or(lt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(geq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(0(#))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),lt(length(null),Z(0(#)))),leq(length(null),i_0))),or(or(or(or(gt(i_0,Z(neglit(1(#)))),lt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Body Preserves Invariant">
               <variable name="self" isArrayIndex="false">
                  <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     <variable name="passwords" isArrayIndex="false">
                        <value name="passwords {equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)">
                           <variable name="length" isArrayIndex="false">
                              <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                        </value>
                        <value name="passwords {not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))">
                           <variable name="length" isArrayIndex="false">
                              <value name="length {not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))">
                              </value>
                           </variable>
                           <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                              <value name="[i_0] {not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))">
                              </value>
                           </variable>
                        </value>
                     </variable>
                  </value>
               </variable>
               <variable name="i" isArrayIndex="false">
                  <value name="i {true}" typeString="int" valueString="i" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="self" isArrayIndex="false">
                  <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     <variable name="passwords" isArrayIndex="false">
                        <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                  </value>
               </variable>
               <variable name="b" isArrayIndex="false">
                  <value name="b {true}" typeString="boolean" valueString="b" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="exc#3" isArrayIndex="false">
                  <value name="exc#3 {true}" typeString="boolean" valueString="exc#3" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="exc" isArrayIndex="false">
                  <value name="exc {true}" typeString="java.lang.Throwable" valueString="exc" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="variant" isArrayIndex="false">
                  <value name="variant {true}" typeString="any" valueString="variant" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="iBefore_LOOP" isArrayIndex="false">
                  <value name="iBefore_LOOP {true}" typeString="int" valueString="iBefore_LOOP" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <branchCondition name="not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))" pathCondition="imp(and(geq(length(null),Z(0(#))),geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),and(and(and(and(or(or(leq(i_0,Z(neglit(1(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(geq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(0(#))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),leq(length(null),i_0))),or(or(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),geq(i_0,Z(0(#)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))))" pathConditionChanged="true" branchCondition="not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <variable name="self" isArrayIndex="false">
                     <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="passwords" isArrayIndex="false">
                           <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                                 <value name="[i_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="i_arr" isArrayIndex="false">
                     <value name="i_arr {true}" typeString="int[]" valueString="i_arr" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="length" isArrayIndex="false">
                           <value name="length {true}" typeString="int" valueString="length(i_arr)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="b_1" isArrayIndex="false">
                     <value name="b_1 {true}" typeString="boolean" valueString="b_1" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="self" isArrayIndex="false">
                     <value name="self {or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                        <variable name="passwords" isArrayIndex="false">
                           <value name="passwords {and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))">
                                 </value>
                              </variable>
                           </value>
                           <value name="passwords {and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="int[]" valueString="int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                           </value>
                           <value name="passwords {and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                           </value>
                        </variable>
                     </value>
                     <value name="self {and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                        <variable name="length" isArrayIndex="false">
                           <value name="length {or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="exc#3" isArrayIndex="false">
                     <value name="exc#3 {true}" typeString="boolean" valueString="exc#3" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        <variable name="length" isArrayIndex="false">
                           <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="i" isArrayIndex="false">
                     <value name="i {true}" typeString="int" valueString="i_0" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="variant" isArrayIndex="false">
                     <value name="variant {true}" typeString="int" valueString="add(mul(i_0,Z(neglit(1(#)))),length(int[]::select(heap,self,EnoughInfoReturn::$passwords)))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <loopCondition name="i &lt; this.passwords.length &amp;&amp; this.passwords[i] &gt;= 0;" pathCondition="imp(and(geq(length(null),Z(0(#))),geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),and(and(and(and(or(or(leq(i_0,Z(neglit(1(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(geq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(0(#))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),leq(length(null),i_0))),or(or(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),geq(i_0,Z(0(#)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))))" pathConditionChanged="false" blockOpened="false">
                     <variable name="self" isArrayIndex="false">
                        <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           <variable name="passwords" isArrayIndex="false">
                              <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                                 <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                                    <value name="[i_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="self" isArrayIndex="false">
                        <value name="self {or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                           <variable name="passwords" isArrayIndex="false">
                              <value name="passwords {and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))">
                                    </value>
                                 </variable>
                              </value>
                              <value name="passwords {and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="int[]" valueString="int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                              </value>
                              <value name="passwords {and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                              </value>
                           </variable>
                        </value>
                        <value name="self {and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                           <variable name="length" isArrayIndex="false">
                              <value name="length {or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))">
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="exc_1" isArrayIndex="false">
                        <value name="exc_1 {true}" typeString="boolean" valueString="FALSE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           <variable name="length" isArrayIndex="false">
                              <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="i" isArrayIndex="false">
                        <value name="i {true}" typeString="int" valueString="i_0" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="variant" isArrayIndex="false">
                        <value name="variant {true}" typeString="int" valueString="add(mul(i_0,Z(neglit(1(#)))),length(int[]::select(heap,self,EnoughInfoReturn::$passwords)))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <statement name="i += 1;" pathCondition="imp(and(geq(length(null),Z(0(#))),geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),and(and(and(and(or(or(leq(i_0,Z(neglit(1(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(geq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(0(#))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),leq(length(null),i_0))),or(or(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),geq(i_0,Z(0(#)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))))" pathConditionChanged="false">
                        <variable name="self" isArrayIndex="false">
                           <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="passwords" isArrayIndex="false">
                                 <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                                       <value name="[i_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="self" isArrayIndex="false">
                           <value name="self {or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                              <variable name="passwords" isArrayIndex="false">
                                 <value name="passwords {and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))">
                                       </value>
                                    </variable>
                                 </value>
                                 <value name="passwords {and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="int[]" valueString="int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                 </value>
                                 <value name="passwords {and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                                 </value>
                              </variable>
                           </value>
                           <value name="self {and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="exc_1" isArrayIndex="false">
                           <value name="exc_1 {true}" typeString="boolean" valueString="FALSE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="i" isArrayIndex="false">
                           <value name="i {true}" typeString="int" valueString="i_0" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="variant" isArrayIndex="false">
                           <value name="variant {true}" typeString="int" valueString="add(mul(i_0,Z(neglit(1(#)))),length(int[]::select(heap,self,EnoughInfoReturn::$passwords)))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <termination name="&lt;loop body end&gt;" pathCondition="imp(and(geq(length(null),Z(0(#))),geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),and(and(and(and(or(or(leq(i_0,Z(neglit(1(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(geq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(0(#))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),leq(length(null),i_0))),or(or(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),geq(i_0,Z(0(#)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))))" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="true">
                           <variable name="self" isArrayIndex="false">
                              <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="passwords" isArrayIndex="false">
                                    <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                       <variable name="length" isArrayIndex="false">
                                          <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                       <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                                          <value name="[i_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="self" isArrayIndex="false">
                              <value name="self {or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                 <variable name="passwords" isArrayIndex="false">
                                    <value name="passwords {and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                       <variable name="length" isArrayIndex="false">
                                          <value name="length {and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))">
                                          </value>
                                       </variable>
                                    </value>
                                    <value name="passwords {and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="int[]" valueString="int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                    </value>
                                    <value name="passwords {and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                                    </value>
                                 </variable>
                              </value>
                              <value name="self {and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="exc_1" isArrayIndex="false">
                              <value name="exc_1 {true}" typeString="boolean" valueString="FALSE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="exc" isArrayIndex="false">
                              <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="i" isArrayIndex="false">
                              <value name="i {true}" typeString="int" valueString="add(Z(1(#)),i_0)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="variant" isArrayIndex="false">
                              <value name="variant {true}" typeString="int" valueString="add(mul(i_0,Z(neglit(1(#)))),length(int[]::select(heap,self,EnoughInfoReturn::$passwords)))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                        </termination>
                     </statement>
                  </loopCondition>
               </branchCondition>
               <branchCondition name="equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)" pathCondition="not(and(geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#))),geq(length(null),Z(0(#)))))" pathConditionChanged="true" branchCondition="equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <variable name="self" isArrayIndex="false">
                     <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="passwords" isArrayIndex="false">
                           <value name="passwords {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="i_arr" isArrayIndex="false">
                     <value name="i_arr {true}" typeString="int[]" valueString="i_arr" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="b_1" isArrayIndex="false">
                     <value name="b_1 {true}" typeString="boolean" valueString="b_1" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="self" isArrayIndex="false">
                     <value name="self {or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                        <variable name="passwords" isArrayIndex="false">
                           <value name="passwords {and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))">
                                 </value>
                              </variable>
                           </value>
                           <value name="passwords {and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="int[]" valueString="int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                           </value>
                           <value name="passwords {and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                           </value>
                        </variable>
                     </value>
                     <value name="self {and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                        <variable name="length" isArrayIndex="false">
                           <value name="length {or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="exc#3" isArrayIndex="false">
                     <value name="exc#3 {true}" typeString="boolean" valueString="exc#3" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        <variable name="length" isArrayIndex="false">
                           <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="i" isArrayIndex="false">
                     <value name="i {true}" typeString="int" valueString="i_0" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="variant" isArrayIndex="false">
                     <value name="variant {true}" typeString="int" valueString="add(mul(i_0,Z(neglit(1(#)))),length(null))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <loopCondition name="i &lt; this.passwords.length &amp;&amp; this.passwords[i] &gt;= 0;" pathCondition="not(and(geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#))),geq(length(null),Z(0(#)))))" pathConditionChanged="false" blockOpened="false">
                     <variable name="self" isArrayIndex="false">
                        <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           <variable name="passwords" isArrayIndex="false">
                              <value name="passwords {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="n_3" isArrayIndex="false">
                        <value name="n_3 {true}" typeString="java.lang.NullPointerException" valueString="n_3" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="self" isArrayIndex="false">
                        <value name="self {or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                           <variable name="passwords" isArrayIndex="false">
                              <value name="passwords {and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))">
                                    </value>
                                 </variable>
                              </value>
                              <value name="passwords {and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="int[]" valueString="int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                              </value>
                              <value name="passwords {and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                              </value>
                           </variable>
                        </value>
                        <value name="self {and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                           <variable name="length" isArrayIndex="false">
                              <value name="length {or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))">
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="exc_1" isArrayIndex="false">
                        <value name="exc_1 {true}" typeString="boolean" valueString="FALSE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           <variable name="length" isArrayIndex="false">
                              <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="i" isArrayIndex="false">
                        <value name="i {true}" typeString="int" valueString="i_0" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="variant" isArrayIndex="false">
                        <value name="variant {true}" typeString="int" valueString="add(mul(i_0,Z(neglit(1(#)))),length(null))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <exceptionalMethodReturn name="&lt;throw java.lang.Throwable&gt;" signature="&lt;exceptional return of &lt;call self.passwordChecker()&gt;&gt;" pathCondition="not(and(geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#))),geq(length(null),Z(0(#)))))" pathConditionChanged="false" methodReturnCondition="imp(and(geq(length(null),Z(0(#))),geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),and(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),and(and(and(and(or(or(leq(i_0,Z(neglit(1(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(geq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(0(#))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),leq(length(null),i_0))),or(or(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),geq(i_0,Z(0(#)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)))))">
                        <variable name="self" isArrayIndex="false">
                           <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="passwords" isArrayIndex="false">
                                 <value name="passwords {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="n_3" isArrayIndex="false">
                           <value name="n_3 {true}" typeString="java.lang.NullPointerException" valueString="n_3" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="self" isArrayIndex="false">
                           <value name="self {or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                              <variable name="passwords" isArrayIndex="false">
                                 <value name="passwords {and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))">
                                       </value>
                                    </variable>
                                 </value>
                                 <value name="passwords {and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="int[]" valueString="int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                 </value>
                                 <value name="passwords {and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))">
                                 </value>
                              </variable>
                           </value>
                           <value name="self {and(equals(self,null),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(self,null),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="i" isArrayIndex="false">
                           <value name="i {true}" typeString="int" valueString="i_0" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="thrownExc" isArrayIndex="false">
                           <value name="thrownExc {true}" typeString="java.lang.NullPointerException" valueString="n_7" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              <variable name="message" isArrayIndex="false">
                                 <value name="message {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                              <variable name="cause" isArrayIndex="false">
                                 <value name="cause {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <termination name="&lt;uncaught java.lang.NullPointerException&gt;" pathCondition="not(and(geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#))),geq(length(null),Z(0(#)))))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                           <variable name="self" isArrayIndex="false">
                              <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="passwords" isArrayIndex="false">
                                    <value name="passwords {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       <variable name="length" isArrayIndex="false">
                                          <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="n_3" isArrayIndex="false">
                              <value name="n_3 {true}" typeString="java.lang.NullPointerException" valueString="n_3" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="self" isArrayIndex="false">
                              <value name="self {or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                 <variable name="passwords" isArrayIndex="false">
                                    <value name="passwords {and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                       <variable name="length" isArrayIndex="false">
                                          <value name="length {and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))">
                                          </value>
                                       </variable>
                                    </value>
                                    <value name="passwords {and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="int[]" valueString="int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                    </value>
                                    <value name="passwords {and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))">
                                    </value>
                                 </variable>
                              </value>
                              <value name="self {and(equals(self,null),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(self,null),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="exc" isArrayIndex="false">
                              <value name="exc {true}" typeString="java.lang.NullPointerException" valueString="n_7" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 <variable name="message" isArrayIndex="false">
                                    <value name="message {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       <variable name="length" isArrayIndex="false">
                                          <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                    </value>
                                 </variable>
                                 <variable name="cause" isArrayIndex="false">
                                    <value name="cause {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       <variable name="length" isArrayIndex="false">
                                          <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                        </termination>
                        <callStateVariable name="self" isArrayIndex="false">
                        </callStateVariable>
                        <callStateVariable name="self" isArrayIndex="false">
                        </callStateVariable>
                        <callStateVariable name="exc" isArrayIndex="false">
                        </callStateVariable>
                     </exceptionalMethodReturn>
                  </loopCondition>
               </branchCondition>
            </branchCondition>
            <branchCondition name="and(and(and(and(or(or(or(or(or(or(lt(i_0,Z(1(#))),lt(j_5_0,Z(0(#)))),geq(j_5_0,i_0)),gt(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))),Z(neglit(1(#))))),lt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(or(lt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(leq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),lt(length(null),Z(0(#)))),leq(length(null),i_0))),or(or(or(or(gt(i_0,Z(neglit(1(#)))),lt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)))" pathCondition="imp(and(geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#))),geq(length(null),Z(0(#)))),and(and(and(and(or(or(or(or(or(leq(i_0,Z(0(#))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),geq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))),Z(0(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(leq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),leq(length(null),i_0))),or(or(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),geq(i_0,Z(0(#)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))))" pathConditionChanged="true" branchCondition="and(and(and(and(or(or(or(or(or(or(lt(i_0,Z(1(#))),lt(j_5_0,Z(0(#)))),geq(j_5_0,i_0)),gt(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))),Z(neglit(1(#))))),lt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(or(lt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(leq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),lt(length(null),Z(0(#)))),leq(length(null),i_0))),or(or(or(or(gt(i_0,Z(neglit(1(#)))),lt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
               <variable name="self" isArrayIndex="false">
                  <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     <variable name="passwords" isArrayIndex="false">
                        <value name="passwords {equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)">
                           <variable name="length" isArrayIndex="false">
                              <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                        </value>
                        <value name="passwords {not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))">
                           <variable name="[j_5_0]" arrayIndex="j_5_0" isArrayIndex="true">
                              <value name="[j_5_0] {not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))">
                              </value>
                           </variable>
                           <variable name="length" isArrayIndex="false">
                              <value name="length {not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))">
                              </value>
                           </variable>
                           <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                              <value name="[i_0] {not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))">
                              </value>
                           </variable>
                        </value>
                     </variable>
                  </value>
               </variable>
               <variable name="i" isArrayIndex="false">
                  <value name="i {true}" typeString="int" valueString="i" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="self" isArrayIndex="false">
                  <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     <variable name="passwords" isArrayIndex="false">
                        <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                  </value>
               </variable>
               <variable name="b" isArrayIndex="false">
                  <value name="b {true}" typeString="boolean" valueString="b" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="exc" isArrayIndex="false">
                  <value name="exc {true}" typeString="java.lang.Throwable" valueString="exc" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <branchCondition name="leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)" pathCondition="imp(and(geq(length(null),Z(0(#))),geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),and(and(and(and(and(or(or(or(or(or(leq(i_0,Z(0(#))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),geq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))),Z(0(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(leq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),leq(length(null),i_0))),or(or(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),geq(i_0,Z(0(#)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)))" pathConditionChanged="true" branchCondition="leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <variable name="self" isArrayIndex="false">
                     <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="passwords" isArrayIndex="false">
                           <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="[j_5_0]" arrayIndex="j_5_0" isArrayIndex="true">
                                 <value name="[j_5_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                                 <value name="[i_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="b_2" isArrayIndex="false">
                     <value name="b_2 {true}" typeString="boolean" valueString="b_2" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="self" isArrayIndex="false">
                     <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="passwords" isArrayIndex="false">
                           <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="b_1" isArrayIndex="false">
                     <value name="b_1 {true}" typeString="boolean" valueString="b_1" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="java.lang.Throwable" valueString="exc" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="i" isArrayIndex="false">
                     <value name="i {true}" typeString="int" valueString="i" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <statement name="this.found = i &lt; this.passwords.length;" pathCondition="imp(and(geq(length(null),Z(0(#))),geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),and(and(and(and(and(or(or(or(or(or(leq(i_0,Z(0(#))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),geq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))),Z(0(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(leq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),leq(length(null),i_0))),or(or(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),geq(i_0,Z(0(#)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)))" pathConditionChanged="false">
                     <variable name="self" isArrayIndex="false">
                        <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           <variable name="passwords" isArrayIndex="false">
                              <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="[j_5_0]" arrayIndex="j_5_0" isArrayIndex="true">
                                    <value name="[j_5_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                                 <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                                    <value name="[i_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="self" isArrayIndex="false">
                        <value name="self {or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                           <variable name="passwords" isArrayIndex="false">
                              <value name="passwords {and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))">
                                    </value>
                                 </variable>
                              </value>
                              <value name="passwords {and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="int[]" valueString="int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                              </value>
                              <value name="passwords {and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                              </value>
                           </variable>
                        </value>
                        <value name="self {and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                           <variable name="length" isArrayIndex="false">
                              <value name="length {or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))">
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           <variable name="length" isArrayIndex="false">
                              <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="i" isArrayIndex="false">
                        <value name="i {true}" typeString="int" valueString="i_0" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <methodReturn name="&lt;return of passwordChecker&gt;" signature="&lt;return of self.passwordChecker()&gt;" pathCondition="imp(and(geq(length(null),Z(0(#))),geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),and(and(and(and(and(or(or(or(or(or(leq(i_0,Z(0(#))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),geq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))),Z(0(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(leq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),leq(length(null),i_0))),or(or(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),geq(i_0,Z(0(#)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="imp(and(geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#))),geq(length(null),Z(0(#)))),and(leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0),and(and(and(and(or(or(or(or(or(leq(i_0,Z(0(#))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),geq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))),Z(0(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(leq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),leq(length(null),i_0))),or(or(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),geq(i_0,Z(0(#)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)))))">
                        <variable name="self" isArrayIndex="false">
                           <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="passwords" isArrayIndex="false">
                                 <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                    <variable name="[j_5_0]" arrayIndex="j_5_0" isArrayIndex="true">
                                       <value name="[j_5_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                                       <value name="[i_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                              <variable name="found" isArrayIndex="false">
                                 <value name="found {true}" typeString="boolean" valueString="FALSE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="self" isArrayIndex="false">
                           <value name="self {or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                              <variable name="passwords" isArrayIndex="false">
                                 <value name="passwords {and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))">
                                       </value>
                                    </variable>
                                 </value>
                                 <value name="passwords {and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="int[]" valueString="int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                 </value>
                                 <value name="passwords {and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                                 </value>
                              </variable>
                           </value>
                           <value name="self {and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <termination name="&lt;end&gt;" pathCondition="imp(and(geq(length(null),Z(0(#))),geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),and(and(and(and(and(or(or(or(or(or(leq(i_0,Z(0(#))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),geq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))),Z(0(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(leq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),leq(length(null),i_0))),or(or(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),geq(i_0,Z(0(#)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                           <variable name="self" isArrayIndex="false">
                              <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="passwords" isArrayIndex="false">
                                    <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                       <variable name="[j_5_0]" arrayIndex="j_5_0" isArrayIndex="true">
                                          <value name="[j_5_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                       <variable name="length" isArrayIndex="false">
                                          <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                       <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                                          <value name="[i_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                    </value>
                                 </variable>
                                 <variable name="found" isArrayIndex="false">
                                    <value name="found {true}" typeString="boolean" valueString="FALSE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="self" isArrayIndex="false">
                              <value name="self {or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                 <variable name="passwords" isArrayIndex="false">
                                    <value name="passwords {and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                       <variable name="length" isArrayIndex="false">
                                          <value name="length {and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))">
                                          </value>
                                       </variable>
                                    </value>
                                    <value name="passwords {and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="int[]" valueString="int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                    </value>
                                    <value name="passwords {and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                                    </value>
                                 </variable>
                              </value>
                              <value name="self {and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="exc" isArrayIndex="false">
                              <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                        </termination>
                        <callStateVariable name="self" isArrayIndex="false">
                           <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="passwords" isArrayIndex="false">
                                 <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                    <variable name="[j_5_0]" arrayIndex="j_5_0" isArrayIndex="true">
                                       <value name="[j_5_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                       <value name="length {and(lt(i_0,Z(1(#))),lt(j_5_0,i_0))}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="and(lt(i_0,Z(1(#))),lt(j_5_0,i_0))">
                                       </value>
                                    </variable>
                                    <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                                       <value name="[i_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                       <value name="[i_0] {and(lt(i_0,Z(1(#))),lt(j_5_0,i_0))}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(Z(0(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="and(lt(i_0,Z(1(#))),lt(j_5_0,i_0))">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                           </value>
                        </callStateVariable>
                        <callStateVariable name="self" isArrayIndex="false">
                           <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="passwords" isArrayIndex="false">
                                 <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                        </callStateVariable>
                        <callStateVariable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="java.lang.Throwable" valueString="exc" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </callStateVariable>
                     </methodReturn>
                  </statement>
               </branchCondition>
               <branchCondition name="gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)" pathCondition="imp(and(geq(length(null),Z(0(#))),geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),and(and(and(and(and(or(or(or(or(or(leq(i_0,Z(0(#))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),geq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))),Z(0(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(leq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),leq(length(null),i_0))),or(or(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),geq(i_0,Z(0(#)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)))" pathConditionChanged="true" branchCondition="gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <variable name="self" isArrayIndex="false">
                     <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="passwords" isArrayIndex="false">
                           <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="[j_5_0]" arrayIndex="j_5_0" isArrayIndex="true">
                                 <value name="[j_5_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                                 <value name="[i_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="b_2" isArrayIndex="false">
                     <value name="b_2 {true}" typeString="boolean" valueString="b_2" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="self" isArrayIndex="false">
                     <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="passwords" isArrayIndex="false">
                           <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="b_1" isArrayIndex="false">
                     <value name="b_1 {true}" typeString="boolean" valueString="b_1" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="java.lang.Throwable" valueString="exc" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="i" isArrayIndex="false">
                     <value name="i {true}" typeString="int" valueString="i" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <statement name="this.found = i &lt; this.passwords.length;" pathCondition="imp(and(geq(length(null),Z(0(#))),geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),and(and(and(and(and(or(or(or(or(or(leq(i_0,Z(0(#))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),geq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))),Z(0(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(leq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),leq(length(null),i_0))),or(or(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),geq(i_0,Z(0(#)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)))" pathConditionChanged="false">
                     <variable name="self" isArrayIndex="false">
                        <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           <variable name="passwords" isArrayIndex="false">
                              <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="[j_5_0]" arrayIndex="j_5_0" isArrayIndex="true">
                                    <value name="[j_5_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                                 <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                                    <value name="[i_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="self" isArrayIndex="false">
                        <value name="self {or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                           <variable name="passwords" isArrayIndex="false">
                              <value name="passwords {and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))">
                                    </value>
                                 </variable>
                              </value>
                              <value name="passwords {and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="int[]" valueString="int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                              </value>
                              <value name="passwords {and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                              </value>
                           </variable>
                        </value>
                        <value name="self {and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                           <variable name="length" isArrayIndex="false">
                              <value name="length {or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))">
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           <variable name="length" isArrayIndex="false">
                              <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="i" isArrayIndex="false">
                        <value name="i {true}" typeString="int" valueString="i_0" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <methodReturn name="&lt;return of passwordChecker&gt;" signature="&lt;return of self.passwordChecker()&gt;" pathCondition="imp(and(geq(length(null),Z(0(#))),geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),and(and(and(and(and(or(or(or(or(or(leq(i_0,Z(0(#))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),geq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))),Z(0(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(leq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),leq(length(null),i_0))),or(or(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),geq(i_0,Z(0(#)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="imp(and(geq(length(null),Z(0(#))),geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),and(gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0),and(and(and(and(or(or(or(or(or(leq(i_0,Z(0(#))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),geq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))),Z(0(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(leq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),leq(length(null),i_0))),or(or(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),geq(i_0,Z(0(#)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)))))">
                        <variable name="self" isArrayIndex="false">
                           <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="passwords" isArrayIndex="false">
                                 <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                    <variable name="[j_5_0]" arrayIndex="j_5_0" isArrayIndex="true">
                                       <value name="[j_5_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                                       <value name="[i_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                              <variable name="found" isArrayIndex="false">
                                 <value name="found {true}" typeString="boolean" valueString="TRUE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="self" isArrayIndex="false">
                           <value name="self {or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                              <variable name="passwords" isArrayIndex="false">
                                 <value name="passwords {and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))">
                                       </value>
                                    </variable>
                                 </value>
                                 <value name="passwords {and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="int[]" valueString="int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                 </value>
                                 <value name="passwords {and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                                 </value>
                              </variable>
                           </value>
                           <value name="self {and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <termination name="&lt;end&gt;" pathCondition="imp(and(geq(length(null),Z(0(#))),geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),and(and(and(and(and(or(or(or(or(or(leq(i_0,Z(0(#))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),geq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))),Z(0(#)))),not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),or(or(not(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)),and(leq(if-then-else(and(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0)),int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))),Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5)),Z(0(#))))))))),or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null)),leq(length(null),i_0))),or(or(or(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null),not(equals(boolean::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),java.lang.Object::&lt;created&gt;),TRUE))),geq(i_0,Z(0(#)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0))),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),null))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                           <variable name="self" isArrayIndex="false">
                              <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="passwords" isArrayIndex="false">
                                    <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                       <variable name="[j_5_0]" arrayIndex="j_5_0" isArrayIndex="true">
                                          <value name="[j_5_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                       <variable name="length" isArrayIndex="false">
                                          <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                       <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                                          <value name="[i_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                    </value>
                                 </variable>
                                 <variable name="found" isArrayIndex="false">
                                    <value name="found {true}" typeString="boolean" valueString="TRUE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="self" isArrayIndex="false">
                              <value name="self {or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))),and(not(equals(self,null)),or(equals(self,null),equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                 <variable name="passwords" isArrayIndex="false">
                                    <value name="passwords {and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                       <variable name="length" isArrayIndex="false">
                                          <value name="length {and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)))">
                                          </value>
                                       </variable>
                                    </value>
                                    <value name="passwords {and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))}" typeString="int[]" valueString="int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,EnoughInfoReturn::$passwords),null)),and(not(equals(self,null)),not(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE))))">
                                    </value>
                                    <value name="passwords {and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(self,null)),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                                    </value>
                                 </variable>
                              </value>
                              <value name="self {and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="and(equals(self,null),or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null)))">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE),equals(self,null))">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="exc" isArrayIndex="false">
                              <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {true}" typeString="int" valueString="length(null)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                        </termination>
                        <callStateVariable name="self" isArrayIndex="false">
                           <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="passwords" isArrayIndex="false">
                                 <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                    <variable name="[j_5_0]" arrayIndex="j_5_0" isArrayIndex="true">
                                       <value name="[j_5_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(j_5_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                                       <value name="[i_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                           </value>
                        </callStateVariable>
                        <callStateVariable name="self" isArrayIndex="false">
                           <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="passwords" isArrayIndex="false">
                                 <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                        </callStateVariable>
                        <callStateVariable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="java.lang.Throwable" valueString="exc" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </callStateVariable>
                     </methodReturn>
                  </statement>
               </branchCondition>
            </branchCondition>
         </loopInvariant>
      </statement>
      <methodReturnEntry path="/0/0/0/0/1/0/0"/>
      <methodReturnEntry path="/0/0/0/1/0/0/0"/>
      <methodReturnEntry path="/0/0/0/1/1/0/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/1/0/0/0"/>
   <terminationEntry path="/0/0/0/1/0/0/0/0"/>
   <terminationEntry path="/0/0/0/1/1/0/0/0"/>
</start>
