<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call LightweightOperationContractTest.main(x)&gt;" pathCondition="true" pathConditionChanged="false">
      <statement name="return magic(x);" pathCondition="true" pathConditionChanged="false">
         <operationContract name="result_0 = magic(x) catch(exc_0)
pre: x &gt;  0 | x &lt; 0 | x = 0
post: (   x &gt;  0
   -&gt;   ((exc_0 = null)&lt;&lt;impl&gt;&gt; -&gt; result_0 = 1)
      &amp; (   !(exc_0 = null)&lt;&lt;impl&gt;&gt;
         -&gt;   java.lang.Error::instance(exc_0) = TRUE
            |   java.lang.RuntimeException::instance(exc_0)
              = TRUE))
&amp; (   x &lt; 0
   -&gt;   ((exc_0 = null)&lt;&lt;impl&gt;&gt; -&gt; result_0 = -1)
      &amp; (   !(exc_0 = null)&lt;&lt;impl&gt;&gt;
         -&gt;   java.lang.Error::instance(exc_0) = TRUE
            |   java.lang.RuntimeException::instance(exc_0)
              = TRUE))
&amp; (   x = 0
   -&gt; !(exc_0 = null)&lt;&lt;impl&gt;&gt;
   -&gt;   java.lang.Error::instance(exc_0) = TRUE
      |   java.lang.RuntimeException::instance(exc_0)
        = TRUE)
mod: allLocs
termination: diamond" pathCondition="true" pathConditionChanged="false" resultTerm="result_0" exceptionTerm="exc_0" contractParameters="x" preconditionComplied="true" hasNotNullCheck="false" notNullCheckComplied="false">
            <branchCondition name="update-application(parallel-upd(elem-update(exc)(null),elem-update(heapBefore_magic)(heap)),and(equals(exc_0,null)&lt;&lt;impl&gt;&gt;,or(gt(x,Z(0(#))),lt(x,Z(0(#))))))" pathCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(heapBefore_magic)(heap)),and(equals(exc_0,null)&lt;&lt;impl&gt;&gt;,or(gt(x,Z(0(#))),lt(x,Z(0(#))))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(heapBefore_magic)(heap)),and(equals(exc_0,null)&lt;&lt;impl&gt;&gt;,or(gt(x,Z(0(#))),lt(x,Z(0(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Post (magic)">
               <methodReturn name="&lt;return of main&gt;" signature="&lt;return of LightweightOperationContractTest.main(x)&gt;" pathCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(heapBefore_magic)(heap)),and(equals(exc_0,null)&lt;&lt;impl&gt;&gt;,or(gt(x,Z(0(#))),lt(x,Z(0(#))))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(heapBefore_magic)(heap)),and(equals(exc_0,null)&lt;&lt;impl&gt;&gt;,or(gt(x,Z(0(#))),lt(x,Z(0(#))))))">
                  <termination name="&lt;end&gt;" pathCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(heapBefore_magic)(heap)),and(equals(exc_0,null)&lt;&lt;impl&gt;&gt;,or(gt(x,Z(0(#))),lt(x,Z(0(#))))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                  </termination>
               </methodReturn>
            </branchCondition>
            <branchCondition name="update-application(parallel-upd(elem-update(exc)(null),elem-update(heapBefore_magic)(heap)),and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),equals(x,Z(0(#)))))" pathCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(heapBefore_magic)(heap)),and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),equals(x,Z(0(#)))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(heapBefore_magic)(heap)),and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),equals(x,Z(0(#)))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Exceptional Post (magic)">
               <exceptionalMethodReturn name="&lt;throw java.lang.Throwable&gt;" signature="&lt;exceptional return of &lt;call LightweightOperationContractTest.main(x)&gt;&gt;" pathCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(heapBefore_magic)(heap)),and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),equals(x,Z(0(#)))))" pathConditionChanged="false" methodReturnCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(heapBefore_magic)(heap)),and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),equals(x,Z(0(#)))))">
                  <termination name="&lt;uncaught java.lang.Throwable&gt;" pathCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(heapBefore_magic)(heap)),and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),equals(x,Z(0(#)))))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                  </termination>
               </exceptionalMethodReturn>
            </branchCondition>
         </operationContract>
      </statement>
      <methodReturnEntry path="/0/0/0/0/0"/>
      <methodReturnEntry path="/0/0/0/1/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/1/0/0"/>
</start>
