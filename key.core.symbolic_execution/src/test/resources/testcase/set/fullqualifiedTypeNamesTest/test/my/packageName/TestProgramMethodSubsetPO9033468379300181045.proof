\settings {
"#Proof-Settings-Config-File
#Thu Oct 04 18:18:29 CEST 2012
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Strategy]Timeout=-1
[StrategyProperty]RETREAT_MODE_OPTIONS_KEY=RETREAT_MODE_NONE
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion:noRestriction,JavaCard-JavaCard\\:on , assertions-assertions\\:on , programRules-programRules\\:Java , intRules-intRules\\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\\:disableStaticInitialisation , runtimeExceptions-runtimeExceptions\\:allow
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_NONE
[View]HideIntermediateProofsteps=true
[View]HideClosedSubtrees=false
[General]UseOCL=false
[Strategy]ActiveStrategy=DebuggerStrategy
[View]ShowWholeTaclet=false
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMinimum=-2147483645
[General]StupidMode=true
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[General]OneStepSimplification=true
[General]UseJML=true
[SMTSettings]integersMaximum=2147483645
[General]DnDDirectionSensitive=true
[View]FontIndex=2
[View]UseSystemLookAndFeel=false
[SMTSettings]useUninterpretedMultiplication=true
[Strategy]MaximumNumberOfAutomaticApplications=10000
[View]MaxTooltipLines=40
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[SMTSettings]explicitTypeHierarchy=false
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Thu Oct 04 18:18:29 CEST 2012
name=complicatedInnerMethod
addUninterpretedPredicate=true
class=de.uka.ilkd.key.symbolic_execution.po.ProgramMethodPO
method=my.packageName.TheClass.TheInnerClass\\#complicatedInnerMethod(my.packageName.TheClass, int, boolean, java.lang.String, java.lang.Object[], my.packageName.sub.AnotherClass)
";

\proof {
(keyLog "0" (keyUser "IStudent" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "78")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "9"))
(rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_complicatedInnerMethod"))
(builtin "One Step Simplification" (formula "9"))
(rule "methodCallReturn" (formula "9") (term "1"))
(rule "assignment" (formula "9") (term "1"))
(builtin "One Step Simplification" (formula "9"))
(rule "methodCallEmpty" (formula "9") (term "1"))
(rule "tryEmpty" (formula "9") (term "1"))
(rule "emptyModality" (formula "9") (term "1"))
(builtin "One Step Simplification" (formula "9"))
(rule "orLeft" (formula "7"))
(branch "ac.<created> = TRUE"
   (rule "orLeft" (formula "6"))
   (branch "o.<created> = TRUE"
      (rule "orLeft" (formula "4"))
      (branch "z.<created> = TRUE"
         (rule "orLeft" (formula "5"))
         (branch "x.<created> = TRUE"
            (opengoal " ")
         )
         (branch "x = null"
            (rule "applyEq" (formula "9") (term "5") (ifseqformula "5"))
            (opengoal " ")
         )
      )
      (branch "z = null"
         (rule "applyEq" (formula "9") (term "2") (ifseqformula "4"))
         (rule "orLeft" (formula "5"))
         (branch "x.<created> = TRUE"
            (opengoal " ")
         )
         (branch "x = null"
            (rule "applyEq" (formula "9") (term "5") (ifseqformula "5"))
            (opengoal " ")
         )
      )
   )
   (branch "o = null"
      (rule "applyEq" (formula "9") (term "6") (ifseqformula "6"))
      (rule "orLeft" (formula "4"))
      (branch "z.<created> = TRUE"
         (rule "orLeft" (formula "5"))
         (branch "x.<created> = TRUE"
            (opengoal " ")
         )
         (branch "x = null"
            (rule "applyEq" (formula "9") (term "5") (ifseqformula "5"))
            (opengoal " ")
         )
      )
      (branch "z = null"
         (rule "applyEq" (formula "9") (term "2") (ifseqformula "4"))
         (rule "orLeft" (formula "5"))
         (branch "x.<created> = TRUE"
            (opengoal " ")
         )
         (branch "x = null"
            (rule "applyEq" (formula "9") (term "5") (ifseqformula "5"))
            (opengoal " ")
         )
      )
   )
)
(branch "ac = null"
   (rule "applyEq" (formula "9") (term "7") (ifseqformula "7"))
   (rule "orLeft" (formula "6"))
   (branch "o.<created> = TRUE"
      (rule "orLeft" (formula "4"))
      (branch "z.<created> = TRUE"
         (rule "orLeft" (formula "5"))
         (branch "x.<created> = TRUE"
            (opengoal " ")
         )
         (branch "x = null"
            (rule "applyEq" (formula "9") (term "5") (ifseqformula "5"))
            (opengoal " ")
         )
      )
      (branch "z = null"
         (rule "applyEq" (formula "9") (term "2") (ifseqformula "4"))
         (rule "orLeft" (formula "5"))
         (branch "x.<created> = TRUE"
            (opengoal " ")
         )
         (branch "x = null"
            (rule "applyEq" (formula "9") (term "5") (ifseqformula "5"))
            (opengoal " ")
         )
      )
   )
   (branch "o = null"
      (rule "applyEq" (formula "9") (term "6") (ifseqformula "6"))
      (rule "orLeft" (formula "4"))
      (branch "z.<created> = TRUE"
         (rule "orLeft" (formula "5"))
         (branch "x.<created> = TRUE"
            (opengoal " ")
         )
         (branch "x = null"
            (rule "applyEq" (formula "9") (term "5") (ifseqformula "5"))
            (opengoal " ")
         )
      )
      (branch "z = null"
         (rule "applyEq" (formula "9") (term "2") (ifseqformula "4"))
         (rule "orLeft" (formula "5"))
         (branch "x.<created> = TRUE"
            (opengoal " ")
         )
         (branch "x = null"
            (rule "applyEq" (formula "9") (term "5") (ifseqformula "5"))
            (opengoal " ")
         )
      )
   )
)
)

}
