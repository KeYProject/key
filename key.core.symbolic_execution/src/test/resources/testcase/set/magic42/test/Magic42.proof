\profile "Java Profile for Symbolic Execution";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:off",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:noRestriction",
        "modelFields" : "modelFields:showSatisfiability",
        "moreSeqRules" : "moreSeqRules:off",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:allow",
        "sequences" : "sequences:on",
        "soundDefaultContracts" : "soundDefaultContracts:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "Symbolic Execution Strategy",
        "MaximumNumberOfAutomaticApplications" : 10000,
        "Timeout" : -1,
        "options" : { 
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_EXPAND",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_OFF",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_EXPAND",
            "METHOD_OPTIONS_KEY" : "METHOD_EXPAND",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_DEF_OPS",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_INSTANTIATE",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_RESTRICTED",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_DEFAULT",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\javaSource ".";

\proofObligation 
// Proof-Obligation settings
{ 
    "class" : "de.uka.ilkd.key.symbolic_execution.po.ProgramMethodPO",
    "method" : "Magic42#compute(int)",
    "name" : "compute(int)"
 }

\proof {
(keyLog "0" (keyUser "Martin" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "1" (keyUser "bubel" ) (keyVersion "568dbaf2107ef587f3f83796b2cb00c12b1ce5bc"))

(autoModeTime "4655")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre"))
(rule "impRight" (formula "1"))
(rule "assignment" (formula "2"))
(rule "methodBodyExpand" (formula "2") (term "1") (newnames "heapBefore_compute,savedHeapBefore_compute"))
 (builtin "One Step Simplification" (formula "2"))
(rule "variableDeclarationAssign" (formula "2") (term "1"))
(rule "variableDeclaration" (formula "2") (term "1") (newnames "y"))
(rule "methodCallWithAssignmentWithinClass" (formula "2") (term "1") (newnames "x#0") (inst "#v0=x"))
(rule "variableDeclaration" (formula "2") (term "1") (newnames "x"))
(rule "variableDeclarationAssign" (formula "2") (term "1"))
(rule "variableDeclaration" (formula "2") (term "1") (newnames "x_1"))
(rule "assignment" (formula "2") (term "1"))
 (builtin "One Step Simplification" (formula "2"))
(rule "methodBodyExpand" (formula "2") (term "1") (newnames "heapBefore_computeHelp,savedHeapBefore_computeHelp"))
 (builtin "One Step Simplification" (formula "2"))
(rule "variableDeclarationAssign" (formula "2") (term "1"))
(rule "variableDeclaration" (formula "2") (term "1") (newnames "y_1"))
(rule "compound_division_1" (formula "2") (term "1") (inst "#v=x_2"))
(rule "variableDeclarationAssign" (formula "2") (term "1"))
(rule "variableDeclaration" (formula "2") (term "1") (newnames "x_2"))
(rule "remove_parentheses_right" (formula "2") (term "1"))
(rule "condition" (formula "2") (term "1"))
(rule "ifElseUnfold" (formula "2") (term "1") (inst "#boolv=x_3"))
(rule "variableDeclaration" (formula "2") (term "1") (newnames "x_3"))
(rule "greater_equal_than_comparison_simple" (formula "2") (term "1"))
 (builtin "One Step Simplification" (formula "2"))
(rule "ifElseSplit" (formula "2"))
(branch "if x_3 true"
    (builtin "One Step Simplification" (formula "1"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "assignment" (formula "3") (term "1"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "blockEmpty" (formula "3") (term "1"))
   (rule "assignmentDivisionInt" (formula "3") (term "1"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "translateJavaDivInt" (formula "3") (term "0,1,0,1"))
   (rule "equal_literals" (formula "3") (term "0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "jdiv_axiom" (formula "3") (term "0,1,0"))
   (rule "eqSymm" (formula "1"))
   (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "eqSymm" (formula "1"))
   (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "1"))
   (rule "div_axiom" (formula "1") (term "1") (inst "quotient=quotient_1"))
   (rule "equal_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1,1,1,1"))
   (rule "qeq_literals" (formula "1") (term "0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "polySimp_addComm1" (formula "3") (term "1"))
   (rule "add_literals" (formula "3") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "2"))
   (rule "inEqSimp_homoInEq1" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "applyEq" (formula "7") (term "0,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "4") (term "1") (ifseqformula "1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1"))
   (rule "polySimp_rightDist" (formula "3") (term "1"))
   (rule "mul_literals" (formula "3") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
   (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "3"))
   (rule "times_zero_1" (formula "5") (term "0,0"))
   (rule "add_zero_left" (formula "5") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "5"))
   (rule "mul_literals" (formula "5") (term "1"))
   (rule "elimGcdGeq_antec" (formula "5") (inst "elimGcd=Z(0(0(0(2(#)))))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcdRightDiv=Z(0(#))"))
   (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0"))
   (rule "leq_literals" (formula "5") (term "0,0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "5") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
   (rule "add_literals" (formula "5") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "5") (term "1,0,0"))
   (rule "add_zero_right" (formula "5") (term "0,0"))
   (rule "leq_literals" (formula "5") (term "0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "returnUnfold" (formula "8") (term "1") (inst "#v0=x_1"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_6"))
   (rule "compound_addition_1" (formula "8") (term "1") (inst "#v=x_7"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_7"))
   (rule "assignmentMultiplicationInt" (formula "8") (term "1"))
   (rule "translateJavaMulInt" (formula "8") (term "0,0,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_mulComm0" (formula "8") (term "0,1,0"))
   (rule "assignmentAdditionInt" (formula "8") (term "1"))
   (rule "translateJavaAddInt" (formula "8") (term "0,0,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
   (rule "methodCallReturn" (formula "8") (term "1"))
   (rule "assignment" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallEmpty" (formula "8") (term "1"))
   (rule "blockEmpty" (formula "8") (term "1"))
   (rule "assignment" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "res_1"))
   (rule "assignment" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "loopUnwind" (formula "8") (term "1") (inst "#innerLabel=_label2") (inst "#outerLabel=_label3"))
   (rule "ifUnfold" (formula "8") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_8"))
   (rule "compound_inequality_comparison_1" (formula "8") (term "1") (inst "#v0=x_9"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_9"))
   (rule "assignmentModulo" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "translateJavaMod" (formula "8") (term "0,1,0,1"))
   (rule "equal_literals" (formula "8") (term "0,0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "inequality_comparison_simple" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "ifSplit" (formula "8"))
   (branch "if x_8 true"
       (builtin "One Step Simplification" (formula "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "notLeft" (formula "1"))
      (rule "jmod_axiom" (formula "8") (term "0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
      (rule "polySimp_sepNegMonomial" (formula "8"))
      (rule "polySimp_mulLiterals" (formula "8") (term "0"))
      (rule "elimGcdEq" (formula "8") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=jdiv(add(Z(7(#)), mul(quotient_1, Z(0(2(3(#)))))),
     Z(2(#)))") (inst "elimGcdRightDiv=add(Z(3(#)), mul(quotient_1, Z(0(6(1(#))))))"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "mul_literals" (formula "8") (term "0,1,0,1,0"))
      (rule "add_literals" (formula "8") (term "1,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,1,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,1,0"))
      (rule "polySimp_addComm1" (formula "8") (term "0,0,1,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,1,0"))
      (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,1,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,1,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,1,0"))
      (rule "add_zero_right" (formula "8") (term "0,1,0"))
      (rule "qeq_literals" (formula "8") (term "1,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
      (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0"))
      (rule "leq_literals" (formula "8") (term "0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
      (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0"))
      (rule "equal_literals" (formula "8") (term "0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "false_right" (formula "8"))
      (rule "ifElseUnfold" (formula "8") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_14"))
      (rule "compound_equality_comparison_1" (formula "8") (term "1") (inst "#v0=x_15"))
      (rule "variableDeclarationAssign" (formula "8") (term "1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_15"))
      (rule "assignmentModulo" (formula "8") (term "1"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "translateJavaMod" (formula "8") (term "0,1,0,1"))
      (rule "equal_literals" (formula "8") (term "0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "jdiv_axiom" (formula "4") (term "0"))
      (rule "eqSymm" (formula "4"))
      (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "eqSymm" (formula "4"))
      (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
      (rule "eqSymm" (formula "4"))
      (rule "div_axiom" (formula "1") (term "0") (inst "quotient=quotient_0"))
      (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
      (rule "qeq_literals" (formula "1") (term "0,1,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "equal_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_addComm1" (formula "3") (term "1"))
      (rule "add_literals" (formula "3") (term "0,1"))
      (rule "inEqSimp_commuteLeq" (formula "2"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
      (rule "applyEqRigid" (formula "11") (term "0,1,0,1,0,0,0") (ifseqformula "1"))
      (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "1"))
      (rule "applyEq" (formula "6") (term "0,1,1") (ifseqformula "1"))
      (rule "applyEqRigid" (formula "5") (term "0,1") (ifseqformula "1"))
      (rule "applyEqRigid" (formula "4") (term "1") (ifseqformula "1"))
      (rule "applyEqRigid" (formula "6") (term "1") (ifseqformula "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
      (rule "mul_literals" (formula "3") (term "0,1"))
      (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "4"))
      (rule "times_zero_1" (formula "7") (term "0,0"))
      (rule "add_zero_left" (formula "7") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "7"))
      (rule "mul_literals" (formula "7") (term "1"))
      (rule "inEqSimp_subsumption6" (formula "7") (ifseqformula "6"))
      (rule "times_zero_1" (formula "7") (term "1,1,0"))
      (rule "greater_literals" (formula "7") (term "0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "leq_literals" (formula "7") (term "0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "equality_comparison_simple" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "ifElseSplit" (formula "9"))
      (branch "if x_14 true"
          (builtin "One Step Simplification" (formula "1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "1"))
         (rule "compound_addition_2" (formula "9") (term "1") (inst "#v1=i_1") (inst "#v0=i"))
         (rule "variableDeclarationAssign" (formula "9") (term "1"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "i"))
         (rule "assignmentMultiplicationInt" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "translateJavaMulInt" (formula "9") (term "0,1,0"))
         (rule "times_zero_1" (formula "9") (term "0,1,0"))
         (rule "variableDeclarationAssign" (formula "9") (term "1"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "i_1"))
         (rule "remove_parentheses_right" (formula "9") (term "1"))
         (rule "assignmentModulo" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "translateJavaMod" (formula "9") (term "0,1,0,1"))
         (rule "equal_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "assignmentAdditionInt" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "translateJavaAddInt" (formula "9") (term "0,1,0"))
         (rule "add_zero_left" (formula "9") (term "0,1,0"))
         (rule "assignmentDivisionInt" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "translateJavaDivInt" (formula "9") (term "0,1,0,1"))
         (rule "equal_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "jdiv_axiom" (formula "9") (term "0,1,0"))
         (rule "eqSymm" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,0,2,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
         (rule "mul_literals" (formula "1") (term "0,0,0,2,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "7"))
         (rule "greater_literals" (formula "1") (term "0,0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
         (rule "leq_literals" (formula "1") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "eqSymm" (formula "1"))
         (rule "applyEqRigid" (formula "10") (term "0,1,0") (ifseqformula "1"))
         (rule "polyDiv_pullOut" (formula "10") (term "0,1,0") (inst "polyDivCoeff=mul(quotient_0, Z(0(6(1(#)))))"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,2,0,1,0"))
         (rule "equal_literals" (formula "10") (term "0,0,1,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,1,0"))
         (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,0,1,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0,0,1,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,0,1,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0,1,0"))
         (rule "div_literals" (formula "10") (term "0,0,1,0"))
         (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=mul(quotient_0, Z(0(6(1(#)))))"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,1"))
         (rule "equal_literals" (formula "1") (term "0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
         (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
         (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,1"))
         (rule "div_literals" (formula "1") (term "0,1"))
         (rule "blockEmpty" (formula "10") (term "1"))
         (rule "loopUnwind" (formula "10") (term "1") (inst "#outerLabel=_label11") (inst "#innerLabel=_label10"))
         (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=b"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "b"))
         (rule "compound_inequality_comparison_1" (formula "10") (term "1") (inst "#v0=i_2"))
         (rule "variableDeclarationAssign" (formula "10") (term "1"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "i_2"))
         (rule "assignmentModulo" (formula "10") (term "1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "translateJavaMod" (formula "10") (term "0,1,0,1"))
         (rule "equal_literals" (formula "10") (term "0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inequality_comparison_simple" (formula "10") (term "1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "ifSplit" (formula "10"))
         (branch "if y % 2 != 0 true"
             (builtin "One Step Simplification" (formula "1"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "notLeft" (formula "1"))
            (rule "jmod_axiom" (formula "10") (term "0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
            (rule "polySimp_sepNegMonomial" (formula "10"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0"))
            (rule "elimGcdEq" (formula "10") (inst "elimGcdRightDiv=add(Z(1(#)), mul(quotient_0, Z(0(8(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(3(#)), mul(quotient_0, Z(0(6(1(#)))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
            (rule "add_literals" (formula "10") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1"))
            (rule "add_literals" (formula "10") (term "0,0,0,0,1"))
            (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,1"))
            (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "10") (term "0,0,1"))
            (rule "equal_literals" (formula "10") (term "0,1"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,1,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0,0,1,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,1,0"))
            (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,1,0"))
            (rule "add_literals" (formula "10") (term "1,1,0,1,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "10") (term "0,1,0"))
            (rule "qeq_literals" (formula "10") (term "1,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
            (rule "add_literals" (formula "10") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "false_right" (formula "10"))
            (rule "ifElseUnfold" (formula "10") (term "1") (inst "#boolv=b_1"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "b_1"))
            (rule "compound_equality_comparison_1" (formula "10") (term "1") (inst "#v0=i_3"))
            (rule "variableDeclarationAssign" (formula "10") (term "1"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "i_3"))
            (rule "assignmentModulo" (formula "10") (term "1"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "translateJavaMod" (formula "10") (term "0,1,0,1"))
            (rule "equal_literals" (formula "10") (term "0,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "equality_comparison_simple" (formula "10") (term "1"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "ifElseSplit" (formula "10"))
            (branch "if res_1 % 2 == 0 true"
                (builtin "One Step Simplification" (formula "1"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "jmod_axiom" (formula "1") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
               (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "2"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "jmod_axiom" (formula "1") (term "0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
               (rule "jdiv_axiom_inline" (formula "1") (term "0,1,0"))
               (rule "qeq_literals" (formula "1") (term "0,0,1,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "div_literals" (formula "1") (term "0,1,0"))
               (rule "times_zero_2" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "equal_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if res_1 % 2 == 0 false"
                (builtin "One Step Simplification" (formula "1"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "notLeft" (formula "1"))
               (rule "jmod_axiom" (formula "10") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
               (rule "applyEq" (formula "10") (term "0,1,0,0") (ifseqformula "1"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
               (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
               (rule "add_literals" (formula "10") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "10") (term "1,0,0"))
               (rule "add_zero_right" (formula "10") (term "0,0"))
               (rule "jmod_axiom" (formula "10") (term "0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
               (rule "jdiv_axiom_inline" (formula "10") (term "0,1,0"))
               (rule "div_literals" (formula "10") (term "1,0,1,0"))
               (rule "qeq_literals" (formula "10") (term "0,0,1,0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "times_zero_2" (formula "10") (term "1,0"))
               (rule "add_zero_right" (formula "10") (term "0"))
               (rule "equal_literals" (formula "10"))
               (rule "false_right" (formula "10"))
               (rule "assignmentMultiplicationInt" (formula "10") (term "1"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "translateJavaMulInt" (formula "10") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,1,0"))
               (rule "blockEmpty" (formula "10") (term "1"))
               (rule "loopUnwind" (formula "10") (term "1") (inst "#outerLabel=_label13") (inst "#innerLabel=_label12"))
               (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=b_2"))
               (rule "variableDeclaration" (formula "10") (term "1") (newnames "b_2"))
               (rule "compound_inequality_comparison_1" (formula "10") (term "1") (inst "#v0=i_4"))
               (rule "variableDeclarationAssign" (formula "10") (term "1"))
               (rule "variableDeclaration" (formula "10") (term "1") (newnames "i_4"))
               (rule "assignmentModulo" (formula "10") (term "1"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "translateJavaMod" (formula "10") (term "0,1,0,1"))
               (rule "equal_literals" (formula "10") (term "0,0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "inequality_comparison_simple" (formula "10") (term "1"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "ifSplit" (formula "10"))
               (branch "if y % 2 != 0 true"
                   (builtin "One Step Simplification" (formula "1"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "notLeft" (formula "1"))
                  (rule "jmod_axiom" (formula "10") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                  (rule "polySimp_sepNegMonomial" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                  (rule "elimGcdEq" (formula "10") (inst "elimGcdRightDiv=add(Z(1(#)), mul(quotient_0, Z(0(8(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(3(#)), mul(quotient_0, Z(0(6(1(#)))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                  (rule "add_literals" (formula "10") (term "1,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,1,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,0,1,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,1,0"))
                  (rule "add_literals" (formula "10") (term "1,1,0,1,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0,1,0"))
                  (rule "add_zero_right" (formula "10") (term "0,1,0"))
                  (rule "qeq_literals" (formula "10") (term "1,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                  (rule "add_literals" (formula "10") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0"))
                  (rule "add_zero_right" (formula "10") (term "0,0"))
                  (rule "leq_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                  (rule "add_literals" (formula "10") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0"))
                  (rule "add_zero_right" (formula "10") (term "0,0"))
                  (rule "equal_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "false_right" (formula "10"))
                  (rule "ifElseUnfold" (formula "10") (term "1") (inst "#boolv=b_3"))
                  (rule "variableDeclaration" (formula "10") (term "1") (newnames "b_3"))
                  (rule "compound_equality_comparison_1" (formula "10") (term "1") (inst "#v0=i_5"))
                  (rule "variableDeclarationAssign" (formula "10") (term "1"))
                  (rule "variableDeclaration" (formula "10") (term "1") (newnames "i_5"))
                  (rule "assignmentModulo" (formula "10") (term "1"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "translateJavaMod" (formula "10") (term "0,1,0,1"))
                  (rule "equal_literals" (formula "10") (term "0,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "equality_comparison_simple" (formula "10") (term "1"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "ifElseSplit" (formula "10"))
                  (branch "if res_1 % 2 == 0 true"
                      (builtin "One Step Simplification" (formula "1"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "jmod_axiom" (formula "1") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                     (rule "applyEqRigid" (formula "1") (term "0,1,0,0") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "jmod_axiom" (formula "1") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                     (rule "jdiv_axiom_inline" (formula "1") (term "0,1,0"))
                     (rule "qeq_literals" (formula "1") (term "0,0,1,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "div_literals" (formula "1") (term "0,1,0"))
                     (rule "mul_literals" (formula "1") (term "1,0"))
                     (rule "add_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "elim_double_block_2" (formula "10") (term "1"))
                     (rule "compound_addition_2" (formula "10") (term "1") (inst "#v1=i_7") (inst "#v0=i_6"))
                     (rule "variableDeclarationAssign" (formula "10") (term "1"))
                     (rule "variableDeclaration" (formula "10") (term "1") (newnames "i_6"))
                     (rule "assignmentMultiplicationInt" (formula "10") (term "1"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "translateJavaMulInt" (formula "10") (term "0,1,0"))
                     (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0"))
                     (rule "variableDeclarationAssign" (formula "10") (term "1"))
                     (rule "variableDeclaration" (formula "10") (term "1") (newnames "i_7"))
                     (rule "remove_parentheses_right" (formula "10") (term "1"))
                     (rule "assignmentModulo" (formula "10") (term "1"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "translateJavaMod" (formula "10") (term "0,1,0,1"))
                     (rule "equal_literals" (formula "10") (term "0,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "assignmentAdditionInt" (formula "10") (term "1"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "translateJavaAddInt" (formula "10") (term "0,1,0"))
                     (rule "assignmentDivisionInt" (formula "10") (term "1"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "translateJavaDivInt" (formula "10") (term "0,1,0,1"))
                     (rule "equal_literals" (formula "10") (term "0,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "jdiv_axiom" (formula "10") (term "0,1,0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0,2,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,0,2,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "8"))
                     (rule "greater_literals" (formula "1") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                     (rule "leq_literals" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEq" (formula "11") (term "0,1,0") (ifseqformula "1"))
                     (rule "polyDiv_pullOut" (formula "11") (term "0,1,0") (inst "polyDivCoeff=mul(quotient_0, Z(0(8(#))))"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,2,0,1,0"))
                     (rule "equal_literals" (formula "11") (term "0,0,1,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,1,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0,0,1,0"))
                     (rule "add_literals" (formula "11") (term "1,1,0,0,0,1,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,0,1,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,0,1,0"))
                     (rule "div_literals" (formula "11") (term "0,0,1,0"))
                     (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=mul(quotient_0, Z(0(8(#))))"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,1"))
                     (rule "equal_literals" (formula "1") (term "0,1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
                     (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "div_literals" (formula "1") (term "0,1"))
                     (rule "blockEmpty" (formula "11") (term "1"))
                     (rule "loopUnwind" (formula "11") (term "1") (inst "#outerLabel=_label15") (inst "#innerLabel=_label14"))
                     (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=b_4"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_4"))
                     (rule "compound_inequality_comparison_1" (formula "11") (term "1") (inst "#v0=i_8"))
                     (rule "variableDeclarationAssign" (formula "11") (term "1"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "i_8"))
                     (rule "assignmentModulo" (formula "11") (term "1"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "translateJavaMod" (formula "11") (term "0,1,0,1"))
                     (rule "equal_literals" (formula "11") (term "0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "inequality_comparison_simple" (formula "11") (term "1"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "ifSplit" (formula "11"))
                     (branch "if y % 2 != 0 true"
                         (builtin "One Step Simplification" (formula "1"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "notLeft" (formula "1"))
                        (rule "jmod_axiom" (formula "11") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "elimGcdEq" (formula "11") (inst "elimGcdRightDiv=add(Z(0(#)), mul(quotient_0, Z(0(4(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(1(#)), mul(quotient_0, Z(0(8(#))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "add_zero_left" (formula "11") (term "1,1,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,1,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
                        (rule "add_zero_left" (formula "11") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                        (rule "add_zero_left" (formula "11") (term "1,1,0,0,0"))
                        (rule "add_literals" (formula "11") (term "1,0,0"))
                        (rule "add_zero_left" (formula "11") (term "1,1,0,1,0"))
                        (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,1"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0,1"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "11") (term "0,0,1"))
                        (rule "equal_literals" (formula "11") (term "0,1"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0,0"))
                        (rule "leq_literals" (formula "11") (term "0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0"))
                        (rule "qeq_literals" (formula "11") (term "0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "false_right" (formula "11"))
                        (rule "ifElseUnfold" (formula "11") (term "1") (inst "#boolv=b_5"))
                        (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_5"))
                        (rule "compound_equality_comparison_1" (formula "11") (term "1") (inst "#v0=i_9"))
                        (rule "variableDeclarationAssign" (formula "11") (term "1"))
                        (rule "variableDeclaration" (formula "11") (term "1") (newnames "i_9"))
                        (rule "assignmentModulo" (formula "11") (term "1"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "translateJavaMod" (formula "11") (term "0,1,0,1"))
                        (rule "equal_literals" (formula "11") (term "0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "equality_comparison_simple" (formula "11") (term "1"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "ifElseSplit" (formula "11"))
                        (branch "if res_1 % 2 == 0 true"
                            (builtin "One Step Simplification" (formula "1"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "jmod_axiom" (formula "1") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,0,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0"))
                           (rule "applyEq" (formula "1") (term "0,1,0,0,0") (ifseqformula "3"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0"))
                           (rule "jmod_axiom" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "applyEqRigid" (formula "1") (term "0,1,0,0") (ifseqformula "2"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "jmod_axiom" (formula "1") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                           (rule "jdiv_axiom_inline" (formula "1") (term "0,1,0"))
                           (rule "qeq_literals" (formula "1") (term "0,0,1,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "div_literals" (formula "1") (term "0,1,0"))
                           (rule "mul_literals" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "equal_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if res_1 % 2 == 0 false"
                            (builtin "One Step Simplification" (formula "1"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "notLeft" (formula "1"))
                           (rule "jmod_axiom" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "11") (term "0,0"))
                           (rule "applyEqRigid" (formula "11") (term "0,1,0,0,0") (ifseqformula "1"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,0,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0,0"))
                           (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,0"))
                           (rule "jmod_axiom" (formula "11") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,0"))
                           (rule "applyEq" (formula "11") (term "0,1,0,0") (ifseqformula "2"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                           (rule "add_literals" (formula "11") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0"))
                           (rule "jmod_axiom" (formula "11") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                           (rule "jdiv_axiom_inline" (formula "11") (term "0,1,0"))
                           (rule "mul_literals" (formula "11") (term "0,0,2,0,1,0"))
                           (rule "qeq_literals" (formula "11") (term "0,0,1,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "div_literals" (formula "11") (term "0,1,0"))
                           (rule "mul_literals" (formula "11") (term "1,0"))
                           (rule "add_literals" (formula "11") (term "0"))
                           (rule "equal_literals" (formula "11"))
                           (rule "false_right" (formula "11"))
                           (rule "assignmentMultiplicationInt" (formula "11") (term "1"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "translateJavaMulInt" (formula "11") (term "0,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,0"))
                           (rule "blockEmpty" (formula "11") (term "1"))
                           (rule "loopUnwind" (formula "11") (term "1") (inst "#outerLabel=_label17") (inst "#innerLabel=_label16"))
                           (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=b_6"))
                           (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_6"))
                           (rule "compound_inequality_comparison_1" (formula "11") (term "1") (inst "#v0=i_10"))
                           (rule "variableDeclarationAssign" (formula "11") (term "1"))
                           (rule "variableDeclaration" (formula "11") (term "1") (newnames "i_10"))
                           (rule "assignmentModulo" (formula "11") (term "1"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "translateJavaMod" (formula "11") (term "0,1,0,1"))
                           (rule "equal_literals" (formula "11") (term "0,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "inequality_comparison_simple" (formula "11") (term "1"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "ifSplit" (formula "11"))
                           (branch "if y % 2 != 0 true"
                               (builtin "One Step Simplification" (formula "1"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "notLeft" (formula "1"))
                              (rule "jmod_axiom" (formula "11") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "11"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                              (rule "elimGcdEq" (formula "11") (inst "elimGcdRightDiv=add(Z(0(#)), mul(quotient_0, Z(0(4(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(1(#)), mul(quotient_0, Z(0(8(#))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                              (rule "add_zero_left" (formula "11") (term "1,1,0,0,0"))
                              (rule "add_literals" (formula "11") (term "1,0,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,0,1,0"))
                              (rule "add_zero_left" (formula "11") (term "1,1,0,1,0"))
                              (rule "add_zero_left" (formula "11") (term "1,1,1"))
                              (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
                              (rule "add_zero_left" (formula "11") (term "1,1,0,0,1"))
                              (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0,0"))
                              (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "11") (term "0,0,0"))
                              (rule "leq_literals" (formula "11") (term "0,0"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                              (rule "add_literals" (formula "11") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "11") (term "1,0,0"))
                              (rule "add_zero_right" (formula "11") (term "0,0"))
                              (rule "qeq_literals" (formula "11") (term "0"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                              (rule "add_literals" (formula "11") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "11") (term "1,0,0"))
                              (rule "add_zero_right" (formula "11") (term "0,0"))
                              (rule "equal_literals" (formula "11") (term "0"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "false_right" (formula "11"))
                              (rule "ifElseUnfold" (formula "11") (term "1") (inst "#boolv=b_7"))
                              (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_7"))
                              (rule "compound_equality_comparison_1" (formula "11") (term "1") (inst "#v0=i_11"))
                              (rule "variableDeclarationAssign" (formula "11") (term "1"))
                              (rule "variableDeclaration" (formula "11") (term "1") (newnames "i_11"))
                              (rule "assignmentModulo" (formula "11") (term "1"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "translateJavaMod" (formula "11") (term "0,1,0,1"))
                              (rule "equal_literals" (formula "11") (term "0,0"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "equality_comparison_simple" (formula "11") (term "1"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "ifElseSplit" (formula "11"))
                              (branch "if res_1 % 2 == 0 true"
                                  (builtin "One Step Simplification" (formula "1"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "jmod_axiom" (formula "1") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0"))
                                 (rule "applyEqRigid" (formula "1") (term "0,1,0,0,0") (ifseqformula "3"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                 (rule "jmod_axiom" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                 (rule "applyEqRigid" (formula "1") (term "0,1,0,0") (ifseqformula "2"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "jmod_axiom" (formula "1") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                 (rule "jdiv_axiom_inline" (formula "1") (term "0,1,0"))
                                 (rule "div_literals" (formula "1") (term "1,0,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,2,0,1,0"))
                                 (rule "qeq_literals" (formula "1") (term "0,0,1,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1,0"))
                                 (rule "add_literals" (formula "1") (term "0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "compound_addition_2" (formula "11") (term "1") (inst "#v1=i_13") (inst "#v0=i_12"))
                                 (rule "variableDeclarationAssign" (formula "11") (term "1"))
                                 (rule "variableDeclaration" (formula "11") (term "1") (newnames "i_12"))
                                 (rule "assignmentMultiplicationInt" (formula "11") (term "1"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "translateJavaMulInt" (formula "11") (term "0,1,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,0"))
                                 (rule "variableDeclarationAssign" (formula "11") (term "1"))
                                 (rule "variableDeclaration" (formula "11") (term "1") (newnames "i_13"))
                                 (rule "remove_parentheses_right" (formula "11") (term "1"))
                                 (rule "assignmentModulo" (formula "11") (term "1"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "translateJavaMod" (formula "11") (term "0,1,0,1"))
                                 (rule "equal_literals" (formula "11") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "assignmentAdditionInt" (formula "11") (term "1"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "translateJavaAddInt" (formula "11") (term "0,1,0"))
                                 (rule "assignmentDivisionInt" (formula "11") (term "1"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "translateJavaDivInt" (formula "11") (term "0,1,0,1"))
                                 (rule "equal_literals" (formula "11") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "jdiv_axiom" (formula "11") (term "0,1,0"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,0,2,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,0,2,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "9"))
                                 (rule "greater_literals" (formula "1") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "applyEqRigid" (formula "12") (term "0,1,0") (ifseqformula "1"))
                                 (rule "polyDiv_pullOut" (formula "12") (term "0,1,0") (inst "polyDivCoeff=mul(quotient_0, Z(0(4(#))))"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,2,0,1,0"))
                                 (rule "equal_literals" (formula "12") (term "0,0,1,0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0,0,1,0"))
                                 (rule "add_literals" (formula "12") (term "1,1,0,0,0,1,0"))
                                 (rule "times_zero_1" (formula "12") (term "1,0,0,0,1,0"))
                                 (rule "add_zero_right" (formula "12") (term "0,0,0,1,0"))
                                 (rule "div_literals" (formula "12") (term "0,0,1,0"))
                                 (rule "add_zero_left" (formula "12") (term "0,1,0"))
                                 (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=mul(quotient_0, Z(0(4(#))))"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,1"))
                                 (rule "equal_literals" (formula "1") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
                                 (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                 (rule "div_literals" (formula "1") (term "0,1"))
                                 (rule "add_zero_left" (formula "1") (term "1"))
                                 (rule "blockEmpty" (formula "12") (term "1"))
                                 (rule "loopUnwind" (formula "12") (term "1") (inst "#outerLabel=_label19") (inst "#innerLabel=_label18"))
                                 (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=b_8"))
                                 (rule "variableDeclaration" (formula "12") (term "1") (newnames "b_8"))
                                 (rule "compound_inequality_comparison_1" (formula "12") (term "1") (inst "#v0=i_14"))
                                 (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                 (rule "variableDeclaration" (formula "12") (term "1") (newnames "i_14"))
                                 (rule "assignmentModulo" (formula "12") (term "1"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "translateJavaMod" (formula "12") (term "0,1,0,1"))
                                 (rule "equal_literals" (formula "12") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "inequality_comparison_simple" (formula "12") (term "1"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "ifSplit" (formula "12"))
                                 (branch "if y % 2 != 0 true"
                                     (builtin "One Step Simplification" (formula "1"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "jmod_axiom" (formula "12") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "12"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                    (rule "elimGcdEq" (formula "12") (inst "elimGcdRightDiv=mul(quotient_0, Z(0(2(#))))") (inst "elimGcdLeftDiv=jdiv(mul(quotient_0, Z(0(4(#)))), Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,1"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,1,0"))
                                    (rule "add_literals" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "12") (term "0,0,0"))
                                    (rule "add_literals" (formula "12") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "12") (term "0,0,0"))
                                    (rule "leq_literals" (formula "12") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "polySimp_mulAssoc" (formula "12") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,1"))
                                    (rule "polySimp_pullOutFactor0" (formula "12") (term "0,0,1"))
                                    (rule "add_literals" (formula "12") (term "1,0,0,1"))
                                    (rule "times_zero_1" (formula "12") (term "0,0,1"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "polySimp_mulAssoc" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "12") (term "0,0"))
                                    (rule "add_literals" (formula "12") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "12") (term "0,0"))
                                    (rule "qeq_literals" (formula "12") (term "0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "ifElseUnfold" (formula "13") (term "1") (inst "#boolv=b_9"))
                                    (rule "jdiv_axiom" (formula "12") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "10"))
                                    (rule "greater_literals" (formula "1") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                    (rule "leq_literals" (formula "1") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "applyEq" (formula "13") (term "0") (ifseqformula "1"))
                                    (rule "polyDiv_pullOut" (formula "13") (term "0") (inst "polyDivCoeff=mul(quotient_0, Z(0(2(#))))"))
                                    (rule "equal_literals" (formula "13") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "13") (term "0,0,0"))
                                    (rule "add_literals" (formula "13") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "13") (term "0,0,0"))
                                    (rule "div_literals" (formula "13") (term "0,0"))
                                    (rule "add_zero_left" (formula "13") (term "0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "closeTrue" (formula "13"))
                                 )
                                 (branch "if y % 2 != 0 false"
                                     (builtin "One Step Simplification" (formula "1"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "jmod_axiom" (formula "1") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=mul(quotient_0, Z(0(2(#))))") (inst "elimGcdLeftDiv=jdiv(mul(quotient_0, Z(0(4(#)))), Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                    (rule "add_literals" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,1"))
                                    (rule "add_literals" (formula "1") (term "1,0,0,1"))
                                    (rule "times_zero_1" (formula "1") (term "0,0,1"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_mulAssoc" (formula "1") (term "1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0,1,0"))
                                    (rule "add_literals" (formula "1") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "0,1,0"))
                                    (rule "qeq_literals" (formula "1") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "0,0"))
                                    (rule "leq_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "jdiv_axiom" (formula "1") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "applyEq" (formula "1") (term "1") (ifseqformula "2"))
                                    (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "11"))
                                    (rule "greater_literals" (formula "1") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                    (rule "leq_literals" (formula "1") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "polyDiv_pullOut" (formula "1") (term "0") (inst "polyDivCoeff=mul(quotient_0, Z(0(2(#))))"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
                                    (rule "equal_literals" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                                    (rule "polySimp_homoEq" (formula "1"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,1,0"))
                                    (rule "add_literals" (formula "1") (term "1,0,0,0,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "0,0,0,1,0"))
                                    (rule "div_literals" (formula "1") (term "0,0,1,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,0"))
                                    (rule "times_zero_1" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "blockEmpty" (formula "13") (term "1"))
                                    (rule "returnUnfold" (formula "13") (term "1") (inst "#v0=i_15"))
                                    (rule "variableDeclarationAssign" (formula "13") (term "1"))
                                    (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_15"))
                                    (rule "assignmentMultiplicationInt" (formula "13") (term "1"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "translateJavaMulInt" (formula "13") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "0,1,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,0"))
                                    (rule "methodCallReturn" (formula "13") (term "1"))
                                    (rule "assignment" (formula "13") (term "1"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "methodCallEmpty" (formula "13") (term "1"))
                                    (rule "tryEmpty" (formula "13") (term "1"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "emptyModality" (formula "13"))
                                    (rule "closeTrue" (formula "13"))
                                 )
                              )
                              (branch "if res_1 % 2 == 0 false"
                                  (builtin "One Step Simplification" (formula "1"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "jmod_axiom" (formula "11") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,0,0,0,0"))
                                 (rule "applyEq" (formula "11") (term "0,1,0,0,0") (ifseqformula "2"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "11") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0,0"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,0"))
                                 (rule "jmod_axiom" (formula "11") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,0"))
                                 (rule "applyEq" (formula "11") (term "0,1,0,0") (ifseqformula "1"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0"))
                                 (rule "jmod_axiom" (formula "11") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                                 (rule "jdiv_axiom_inline" (formula "11") (term "0,1,0"))
                                 (rule "mul_literals" (formula "11") (term "0,0,2,0,1,0"))
                                 (rule "qeq_literals" (formula "11") (term "0,0,1,0"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "div_literals" (formula "11") (term "0,1,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0"))
                                 (rule "add_literals" (formula "11") (term "0"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "closeTrue" (formula "11"))
                              )
                           )
                           (branch "if y % 2 != 0 false"
                               (builtin "One Step Simplification" (formula "1"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "jmod_axiom" (formula "1") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=add(Z(0(#)), mul(quotient_0, Z(0(4(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(1(#)), mul(quotient_0, Z(0(8(#))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "1,1,0,0,0"))
                              (rule "add_literals" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                              (rule "add_zero_left" (formula "1") (term "1,1,0,1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                              (rule "add_zero_left" (formula "1") (term "1,1,0,0,1"))
                              (rule "add_zero_left" (formula "1") (term "1,1,1"))
                              (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0"))
                              (rule "leq_literals" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "1") (term "0,0,1"))
                              (rule "equal_literals" (formula "1") (term "0,1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                     )
                     (branch "if y % 2 != 0 false"
                         (builtin "One Step Simplification" (formula "1"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "jmod_axiom" (formula "1") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=add(Z(0(#)), mul(quotient_0, Z(0(4(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(1(#)), mul(quotient_0, Z(0(8(#))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                        (rule "add_zero_left" (formula "1") (term "1,1,0,0,1"))
                        (rule "add_zero_left" (formula "1") (term "1,1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                        (rule "add_zero_left" (formula "1") (term "1,1,0,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "1,1,0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
                        (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "1") (term "0,0,1"))
                        (rule "equal_literals" (formula "1") (term "0,1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,1,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "1") (term "0,1,0"))
                        (rule "qeq_literals" (formula "1") (term "1,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "leq_literals" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "if res_1 % 2 == 0 false"
                      (builtin "One Step Simplification" (formula "1"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "notLeft" (formula "1"))
                     (rule "jmod_axiom" (formula "10") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,0,0,0"))
                     (rule "applyEqRigid" (formula "10") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                     (rule "add_literals" (formula "10") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0"))
                     (rule "jmod_axiom" (formula "10") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                     (rule "jdiv_axiom_inline" (formula "10") (term "0,1,0"))
                     (rule "mul_literals" (formula "10") (term "0,0,2,0,1,0"))
                     (rule "qeq_literals" (formula "10") (term "0,0,1,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "div_literals" (formula "10") (term "0,1,0"))
                     (rule "mul_literals" (formula "10") (term "1,0"))
                     (rule "add_literals" (formula "10") (term "0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "closeTrue" (formula "10"))
                  )
               )
               (branch "if y % 2 != 0 false"
                   (builtin "One Step Simplification" (formula "1"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "jmod_axiom" (formula "1") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                  (rule "polySimp_sepNegMonomial" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=add(Z(1(#)), mul(quotient_0, Z(0(8(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(3(#)), mul(quotient_0, Z(0(6(1(#)))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "leq_literals" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "equal_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "if y % 2 != 0 false"
             (builtin "One Step Simplification" (formula "1"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "jmod_axiom" (formula "1") (term "0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
            (rule "polySimp_sepNegMonomial" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=add(Z(1(#)), mul(quotient_0, Z(0(8(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(3(#)), mul(quotient_0, Z(0(6(1(#)))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
            (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
            (rule "add_literals" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,1"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "equal_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0"))
            (rule "leq_literals" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "if x_14 false"
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "if x_8 false"
       (builtin "One Step Simplification" (formula "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "jmod_axiom" (formula "1") (term "0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
      (rule "polySimp_sepNegMonomial" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "elimGcdEq" (formula "1") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=jdiv(add(Z(7(#)), mul(quotient_1, Z(0(2(3(#)))))),
     Z(2(#)))") (inst "elimGcdRightDiv=add(Z(3(#)), mul(quotient_1, Z(0(6(1(#))))))"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "add_literals" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,1,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,1,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,1,0"))
      (rule "add_literals" (formula "1") (term "0,1,0"))
      (rule "qeq_literals" (formula "1") (term "1,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "leq_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "equal_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "if x_3 false"
    (builtin "One Step Simplification" (formula "1"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "notLeft" (formula "1"))
   (rule "inEqSimp_geqRight" (formula "2"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "unaryMinusInt" (formula "3") (term "1"))
   (rule "translateJavaUnaryMinusInt" (formula "3") (term "0,0,1"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "polySimp_elimNeg" (formula "3") (term "0,1,0"))
   (rule "blockEmpty" (formula "3") (term "1"))
   (rule "assignmentDivisionInt" (formula "3") (term "1"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "translateJavaDivInt" (formula "3") (term "0,1,0,1"))
   (rule "equal_literals" (formula "3") (term "0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "jdiv_axiom" (formula "3") (term "0,1,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
   (rule "eqSymm" (formula "1"))
   (rule "polySimp_elimOne" (formula "1") (term "0,0,2,0"))
   (rule "inEqSimp_invertInEq1" (formula "1") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
   (rule "times_zero_2" (formula "1") (term "1,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
   (rule "inEqSimp_subsumption0" (formula "1") (term "0,0") (ifseqformula "2"))
   (rule "leq_literals" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "eqSymm" (formula "1"))
   (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "1"))
   (rule "div_axiom" (formula "1") (term "1") (inst "quotient=quotient_0"))
   (rule "equal_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1,1,1,1"))
   (rule "qeq_literals" (formula "1") (term "0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "polySimp_addComm1" (formula "3") (term "1"))
   (rule "add_literals" (formula "3") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "2"))
   (rule "inEqSimp_homoInEq1" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "inEqSimp_homoInEq1" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,0"))
   (rule "applyEq" (formula "7") (term "0,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "4") (term "1") (ifseqformula "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "polySimp_elimOne" (formula "3") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1"))
   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "5"))
   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
   (rule "mul_literals" (formula "3") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "add_literals" (formula "3") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "3"))
   (rule "mul_literals" (formula "3") (term "1"))
   (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcd=Z(0(0(0(2(#)))))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcdRightDiv=Z(0(#))"))
   (rule "leq_literals" (formula "3") (term "0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
   (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,0"))
   (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0"))
   (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
   (rule "add_literals" (formula "3") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
   (rule "add_literals" (formula "3") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "3") (term "1,0,0"))
   (rule "add_zero_right" (formula "3") (term "0,0"))
   (rule "leq_literals" (formula "3") (term "0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "returnUnfold" (formula "8") (term "1") (inst "#v0=x_1"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_4"))
   (rule "compound_addition_1" (formula "8") (term "1") (inst "#v=x_5"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_5"))
   (rule "assignmentMultiplicationInt" (formula "8") (term "1"))
   (rule "translateJavaMulInt" (formula "8") (term "0,0,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_mulComm0" (formula "8") (term "0,1,0"))
   (rule "assignmentAdditionInt" (formula "8") (term "1"))
   (rule "translateJavaAddInt" (formula "8") (term "0,0,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
   (rule "methodCallReturn" (formula "8") (term "1"))
   (rule "assignment" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallEmpty" (formula "8") (term "1"))
   (rule "blockEmpty" (formula "8") (term "1"))
   (rule "assignment" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "res"))
   (rule "assignment" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "loopUnwind" (formula "8") (term "1") (inst "#innerLabel=_label0") (inst "#outerLabel=_label1"))
   (rule "ifUnfold" (formula "8") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_10"))
   (rule "compound_inequality_comparison_1" (formula "8") (term "1") (inst "#v0=x_11"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_11"))
   (rule "assignmentModulo" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "translateJavaMod" (formula "8") (term "0,1,0,1"))
   (rule "equal_literals" (formula "8") (term "0,0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "inequality_comparison_simple" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "ifSplit" (formula "8"))
   (branch "if x_10 true"
       (builtin "One Step Simplification" (formula "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "notLeft" (formula "1"))
      (rule "jmod_axiom" (formula "8") (term "0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
      (rule "polySimp_sepNegMonomial" (formula "8"))
      (rule "polySimp_mulLiterals" (formula "8") (term "0"))
      (rule "elimGcdEq" (formula "8") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=jdiv(add(Z(7(#)), mul(quotient_0, Z(0(2(3(#)))))),
     Z(2(#)))") (inst "elimGcdRightDiv=add(Z(3(#)), mul(quotient_0, Z(0(6(1(#))))))"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "mul_literals" (formula "8") (term "0,1,0,1,0"))
      (rule "add_literals" (formula "8") (term "1,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,1,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,1,0"))
      (rule "polySimp_addComm1" (formula "8") (term "0,0,1,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,1,0"))
      (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,1,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,1,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,1,0"))
      (rule "add_zero_right" (formula "8") (term "0,1,0"))
      (rule "qeq_literals" (formula "8") (term "1,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,1"))
      (rule "polySimp_addComm1" (formula "8") (term "0,0,0,1"))
      (rule "add_literals" (formula "8") (term "0,0,0,0,1"))
      (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,1"))
      (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
      (rule "add_literals" (formula "8") (term "0,0,1"))
      (rule "equal_literals" (formula "8") (term "0,1"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
      (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0"))
      (rule "leq_literals" (formula "8") (term "0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "false_right" (formula "8"))
      (rule "ifElseUnfold" (formula "8") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_12"))
      (rule "compound_equality_comparison_1" (formula "8") (term "1") (inst "#v0=x_13"))
      (rule "variableDeclarationAssign" (formula "8") (term "1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_13"))
      (rule "assignmentModulo" (formula "8") (term "1"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "translateJavaMod" (formula "8") (term "0,1,0,1"))
      (rule "equal_literals" (formula "8") (term "0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "div_axiom" (formula "1") (term "0") (inst "quotient=quotient_1"))
      (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
      (rule "qeq_literals" (formula "1") (term "0,1,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "equal_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_addComm1" (formula "3") (term "1"))
      (rule "add_literals" (formula "3") (term "0,1"))
      (rule "inEqSimp_commuteLeq" (formula "2"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "inEqSimp_homoInEq1" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
      (rule "polySimp_elimOne" (formula "2") (term "1,0"))
      (rule "applyEq" (formula "4") (term "0") (ifseqformula "1"))
      (rule "eqSymm" (formula "4"))
      (rule "applyEqRigid" (formula "11") (term "0,1,0,1,0,0,0") (ifseqformula "4"))
      (rule "applyEq" (formula "7") (term "0,1,1") (ifseqformula "4"))
      (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "4"))
      (rule "applyEq" (formula "5") (term "0,1") (ifseqformula "4"))
      (rule "applyEq" (formula "8") (term "1") (ifseqformula "4"))
      (rule "inEqSimp_sepNegMonomial0" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1"))
      (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "7"))
      (rule "polySimp_rightDist" (formula "5") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
      (rule "mul_literals" (formula "5") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "5") (term "0"))
      (rule "add_literals" (formula "5") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "5"))
      (rule "mul_literals" (formula "5") (term "1"))
      (rule "inEqSimp_subsumption6" (formula "5") (ifseqformula "4"))
      (rule "times_zero_1" (formula "5") (term "1,1,0"))
      (rule "greater_literals" (formula "5") (term "0,0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "leq_literals" (formula "5") (term "0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "jdiv_axiom" (formula "6") (term "0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0,0,2,1"))
      (rule "eqSymm" (formula "6"))
      (rule "polySimp_elimOne" (formula "6") (term "0,0,2,0"))
      (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "6") (term "1") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "polySimp_homoEq" (formula "6") (term "1"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1"))
      (rule "polySimp_elimOne" (formula "6") (term "1,0,1"))
      (rule "polySimp_sepPosMonomial" (formula "6") (term "1"))
      (rule "inEqSimp_invertInEq1" (formula "6") (term "0"))
      (rule "times_zero_2" (formula "6") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "0,0"))
      (rule "inEqSimp_subsumption0" (formula "6") (term "0") (ifseqformula "8"))
      (rule "leq_literals" (formula "6") (term "0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "equality_comparison_simple" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "ifElseSplit" (formula "9"))
      (branch "if x_12 true"
          (builtin "One Step Simplification" (formula "1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "1"))
         (rule "compound_addition_2" (formula "9") (term "1") (inst "#v1=i_1") (inst "#v0=i"))
         (rule "variableDeclarationAssign" (formula "9") (term "1"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "i"))
         (rule "assignmentMultiplicationInt" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "translateJavaMulInt" (formula "9") (term "0,1,0"))
         (rule "times_zero_1" (formula "9") (term "0,1,0"))
         (rule "variableDeclarationAssign" (formula "9") (term "1"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "i_1"))
         (rule "remove_parentheses_right" (formula "9") (term "1"))
         (rule "assignmentModulo" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "translateJavaMod" (formula "9") (term "0,1,0,1"))
         (rule "equal_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "assignmentAdditionInt" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "translateJavaAddInt" (formula "9") (term "0,1,0"))
         (rule "add_zero_left" (formula "9") (term "0,1,0"))
         (rule "assignmentDivisionInt" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "translateJavaDivInt" (formula "9") (term "0,1,0,1"))
         (rule "equal_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "jdiv_axiom" (formula "9") (term "0,1,0"))
         (rule "eqSymm" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,0,2,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
         (rule "mul_literals" (formula "1") (term "0,0,0,2,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "5"))
         (rule "greater_literals" (formula "1") (term "0,0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
         (rule "leq_literals" (formula "1") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "eqSymm" (formula "1"))
         (rule "applyEqRigid" (formula "10") (term "0,1,0") (ifseqformula "1"))
         (rule "polyDiv_pullOut" (formula "10") (term "0,1,0") (inst "polyDivCoeff=mul(quotient_1, Z(0(6(1(#)))))"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,2,0,1,0"))
         (rule "equal_literals" (formula "10") (term "0,0,1,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,1,0"))
         (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,0,1,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0,0,1,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,0,1,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0,1,0"))
         (rule "div_literals" (formula "10") (term "0,0,1,0"))
         (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=mul(quotient_1, Z(0(6(1(#)))))"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,1"))
         (rule "equal_literals" (formula "1") (term "0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
         (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
         (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,1"))
         (rule "div_literals" (formula "1") (term "0,1"))
         (rule "blockEmpty" (formula "10") (term "1"))
         (rule "loopUnwind" (formula "10") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
         (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=b"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "b"))
         (rule "compound_inequality_comparison_1" (formula "10") (term "1") (inst "#v0=i_2"))
         (rule "variableDeclarationAssign" (formula "10") (term "1"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "i_2"))
         (rule "assignmentModulo" (formula "10") (term "1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "translateJavaMod" (formula "10") (term "0,1,0,1"))
         (rule "equal_literals" (formula "10") (term "0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inequality_comparison_simple" (formula "10") (term "1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "ifSplit" (formula "10"))
         (branch "if y % 2 != 0 true"
             (builtin "One Step Simplification" (formula "1"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "notLeft" (formula "1"))
            (rule "jmod_axiom" (formula "10") (term "0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
            (rule "polySimp_sepNegMonomial" (formula "10"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0"))
            (rule "elimGcdEq" (formula "10") (inst "elimGcdRightDiv=add(Z(1(#)), mul(quotient_1, Z(0(8(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(3(#)), mul(quotient_1, Z(0(6(1(#)))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
            (rule "add_literals" (formula "10") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1"))
            (rule "add_literals" (formula "10") (term "0,0,0,0,1"))
            (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,1"))
            (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "10") (term "0,0,1"))
            (rule "equal_literals" (formula "10") (term "0,1"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,1,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0,0,1,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,1,0"))
            (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,1,0"))
            (rule "add_literals" (formula "10") (term "1,1,0,1,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "10") (term "0,1,0"))
            (rule "qeq_literals" (formula "10") (term "1,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
            (rule "add_literals" (formula "10") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "false_right" (formula "10"))
            (rule "ifElseUnfold" (formula "10") (term "1") (inst "#boolv=b_1"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "b_1"))
            (rule "compound_equality_comparison_1" (formula "10") (term "1") (inst "#v0=i_3"))
            (rule "variableDeclarationAssign" (formula "10") (term "1"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "i_3"))
            (rule "assignmentModulo" (formula "10") (term "1"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "translateJavaMod" (formula "10") (term "0,1,0,1"))
            (rule "equal_literals" (formula "10") (term "0,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "equality_comparison_simple" (formula "10") (term "1"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "ifElseSplit" (formula "10"))
            (branch "if res % 2 == 0 true"
                (builtin "One Step Simplification" (formula "1"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "jmod_axiom" (formula "1") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
               (rule "applyEqRigid" (formula "1") (term "0,1,0,0") (ifseqformula "2"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "jmod_axiom" (formula "1") (term "0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
               (rule "jdiv_axiom_inline" (formula "1") (term "0,1,0"))
               (rule "qeq_literals" (formula "1") (term "0,0,1,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "div_literals" (formula "1") (term "0,1,0"))
               (rule "times_zero_2" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "equal_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if res % 2 == 0 false"
                (builtin "One Step Simplification" (formula "1"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "notLeft" (formula "1"))
               (rule "jmod_axiom" (formula "10") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
               (rule "applyEqRigid" (formula "10") (term "0,1,0,0") (ifseqformula "1"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
               (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
               (rule "add_literals" (formula "10") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "10") (term "1,0,0"))
               (rule "add_zero_right" (formula "10") (term "0,0"))
               (rule "jmod_axiom" (formula "10") (term "0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
               (rule "jdiv_axiom_inline" (formula "10") (term "0,1,0"))
               (rule "qeq_literals" (formula "10") (term "0,0,1,0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "div_literals" (formula "10") (term "0,1,0"))
               (rule "mul_literals" (formula "10") (term "1,0"))
               (rule "add_zero_right" (formula "10") (term "0"))
               (rule "equal_literals" (formula "10"))
               (rule "false_right" (formula "10"))
               (rule "assignmentMultiplicationInt" (formula "10") (term "1"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "translateJavaMulInt" (formula "10") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,1,0"))
               (rule "blockEmpty" (formula "10") (term "1"))
               (rule "loopUnwind" (formula "10") (term "1") (inst "#outerLabel=_label3") (inst "#innerLabel=_label2"))
               (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=b_2"))
               (rule "variableDeclaration" (formula "10") (term "1") (newnames "b_2"))
               (rule "compound_inequality_comparison_1" (formula "10") (term "1") (inst "#v0=i_4"))
               (rule "variableDeclarationAssign" (formula "10") (term "1"))
               (rule "variableDeclaration" (formula "10") (term "1") (newnames "i_4"))
               (rule "assignmentModulo" (formula "10") (term "1"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "translateJavaMod" (formula "10") (term "0,1,0,1"))
               (rule "equal_literals" (formula "10") (term "0,0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "inequality_comparison_simple" (formula "10") (term "1"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "ifSplit" (formula "10"))
               (branch "if y % 2 != 0 true"
                   (builtin "One Step Simplification" (formula "1"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "notLeft" (formula "1"))
                  (rule "jmod_axiom" (formula "10") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                  (rule "polySimp_sepNegMonomial" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                  (rule "elimGcdEq" (formula "10") (inst "elimGcdRightDiv=add(Z(1(#)), mul(quotient_1, Z(0(8(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(3(#)), mul(quotient_1, Z(0(6(1(#)))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                  (rule "add_literals" (formula "10") (term "1,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,1,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,0,1,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,1,0"))
                  (rule "add_literals" (formula "10") (term "1,1,0,1,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0,1,0"))
                  (rule "add_zero_right" (formula "10") (term "0,1,0"))
                  (rule "qeq_literals" (formula "10") (term "1,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                  (rule "add_literals" (formula "10") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0"))
                  (rule "add_zero_right" (formula "10") (term "0,0"))
                  (rule "leq_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                  (rule "add_literals" (formula "10") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0"))
                  (rule "add_zero_right" (formula "10") (term "0,0"))
                  (rule "equal_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "false_right" (formula "10"))
                  (rule "ifElseUnfold" (formula "10") (term "1") (inst "#boolv=b_3"))
                  (rule "variableDeclaration" (formula "10") (term "1") (newnames "b_3"))
                  (rule "compound_equality_comparison_1" (formula "10") (term "1") (inst "#v0=i_5"))
                  (rule "variableDeclarationAssign" (formula "10") (term "1"))
                  (rule "variableDeclaration" (formula "10") (term "1") (newnames "i_5"))
                  (rule "assignmentModulo" (formula "10") (term "1"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "translateJavaMod" (formula "10") (term "0,1,0,1"))
                  (rule "equal_literals" (formula "10") (term "0,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "equality_comparison_simple" (formula "10") (term "1"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "ifElseSplit" (formula "10"))
                  (branch "if res % 2 == 0 true"
                      (builtin "One Step Simplification" (formula "1"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "jmod_axiom" (formula "1") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                     (rule "applyEqRigid" (formula "1") (term "0,1,0,0") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "jmod_axiom" (formula "1") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                     (rule "jdiv_axiom_inline" (formula "1") (term "0,1,0"))
                     (rule "qeq_literals" (formula "1") (term "0,0,1,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "div_literals" (formula "1") (term "0,1,0"))
                     (rule "mul_literals" (formula "1") (term "1,0"))
                     (rule "add_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "compound_addition_2" (formula "10") (term "1") (inst "#v1=i_7") (inst "#v0=i_6"))
                     (rule "variableDeclarationAssign" (formula "10") (term "1"))
                     (rule "variableDeclaration" (formula "10") (term "1") (newnames "i_6"))
                     (rule "assignmentMultiplicationInt" (formula "10") (term "1"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "translateJavaMulInt" (formula "10") (term "0,1,0"))
                     (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0"))
                     (rule "variableDeclarationAssign" (formula "10") (term "1"))
                     (rule "variableDeclaration" (formula "10") (term "1") (newnames "i_7"))
                     (rule "remove_parentheses_right" (formula "10") (term "1"))
                     (rule "assignmentModulo" (formula "10") (term "1"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "translateJavaMod" (formula "10") (term "0,1,0,1"))
                     (rule "equal_literals" (formula "10") (term "0,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "assignmentAdditionInt" (formula "10") (term "1"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "translateJavaAddInt" (formula "10") (term "0,1,0"))
                     (rule "assignmentDivisionInt" (formula "10") (term "1"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "translateJavaDivInt" (formula "10") (term "0,1,0,1"))
                     (rule "equal_literals" (formula "10") (term "0,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "jdiv_axiom" (formula "10") (term "0,1,0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0,2,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,0,2,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "6"))
                     (rule "times_zero_1" (formula "1") (term "1,1,0,0,0"))
                     (rule "greater_literals" (formula "1") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "leq_literals" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEqRigid" (formula "11") (term "0,1,0") (ifseqformula "1"))
                     (rule "polyDiv_pullOut" (formula "11") (term "0,1,0") (inst "polyDivCoeff=mul(quotient_1, Z(0(8(#))))"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,2,0,1,0"))
                     (rule "equal_literals" (formula "11") (term "0,0,1,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,1,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0,0,1,0"))
                     (rule "add_literals" (formula "11") (term "1,1,0,0,0,1,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,0,1,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,0,1,0"))
                     (rule "div_literals" (formula "11") (term "0,0,1,0"))
                     (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=mul(quotient_1, Z(0(8(#))))"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,1"))
                     (rule "equal_literals" (formula "1") (term "0,1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
                     (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "div_literals" (formula "1") (term "0,1"))
                     (rule "blockEmpty" (formula "11") (term "1"))
                     (rule "loopUnwind" (formula "11") (term "1") (inst "#outerLabel=_label5") (inst "#innerLabel=_label4"))
                     (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=b_4"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_4"))
                     (rule "compound_inequality_comparison_1" (formula "11") (term "1") (inst "#v0=i_8"))
                     (rule "variableDeclarationAssign" (formula "11") (term "1"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "i_8"))
                     (rule "assignmentModulo" (formula "11") (term "1"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "translateJavaMod" (formula "11") (term "0,1,0,1"))
                     (rule "equal_literals" (formula "11") (term "0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "inequality_comparison_simple" (formula "11") (term "1"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "ifSplit" (formula "11"))
                     (branch "if y % 2 != 0 true"
                         (builtin "One Step Simplification" (formula "1"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "notLeft" (formula "1"))
                        (rule "jmod_axiom" (formula "11") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "elimGcdEq" (formula "11") (inst "elimGcdRightDiv=add(Z(0(#)), mul(quotient_1, Z(0(4(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(1(#)), mul(quotient_1, Z(0(8(#))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "add_zero_left" (formula "11") (term "1,1,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
                        (rule "add_zero_left" (formula "11") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                        (rule "add_zero_left" (formula "11") (term "1,1,0,0,0"))
                        (rule "add_literals" (formula "11") (term "1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,1,0"))
                        (rule "add_zero_left" (formula "11") (term "1,1,0,1,0"))
                        (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,1"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0,1"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "11") (term "0,0,1"))
                        (rule "equal_literals" (formula "11") (term "0,1"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0,0"))
                        (rule "leq_literals" (formula "11") (term "0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0"))
                        (rule "qeq_literals" (formula "11") (term "0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "false_right" (formula "11"))
                        (rule "ifElseUnfold" (formula "11") (term "1") (inst "#boolv=b_5"))
                        (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_5"))
                        (rule "compound_equality_comparison_1" (formula "11") (term "1") (inst "#v0=i_9"))
                        (rule "variableDeclarationAssign" (formula "11") (term "1"))
                        (rule "variableDeclaration" (formula "11") (term "1") (newnames "i_9"))
                        (rule "assignmentModulo" (formula "11") (term "1"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "translateJavaMod" (formula "11") (term "0,1,0,1"))
                        (rule "equal_literals" (formula "11") (term "0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "equality_comparison_simple" (formula "11") (term "1"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "ifElseSplit" (formula "11"))
                        (branch "if res % 2 == 0 true"
                            (builtin "One Step Simplification" (formula "1"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "jmod_axiom" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                           (rule "applyEqRigid" (formula "1") (term "0,1,0,0,0") (ifseqformula "2"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0"))
                           (rule "jmod_axiom" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "applyEqRigid" (formula "1") (term "0,1,0,0") (ifseqformula "3"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "jmod_axiom" (formula "1") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                           (rule "jdiv_axiom_inline" (formula "1") (term "0,1,0"))
                           (rule "qeq_literals" (formula "1") (term "0,0,1,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "div_literals" (formula "1") (term "0,1,0"))
                           (rule "mul_literals" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "equal_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if res % 2 == 0 false"
                            (builtin "One Step Simplification" (formula "1"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "notLeft" (formula "1"))
                           (rule "jmod_axiom" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "11") (term "0,0"))
                           (rule "applyEqRigid" (formula "11") (term "0,1,0,0,0") (ifseqformula "1"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,0,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0,0"))
                           (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,0"))
                           (rule "jmod_axiom" (formula "11") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,0"))
                           (rule "applyEq" (formula "11") (term "0,1,0,0") (ifseqformula "2"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                           (rule "add_literals" (formula "11") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0"))
                           (rule "jmod_axiom" (formula "11") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                           (rule "jdiv_axiom_inline" (formula "11") (term "0,1,0"))
                           (rule "qeq_literals" (formula "11") (term "0,0,1,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "div_literals" (formula "11") (term "0,1,0"))
                           (rule "mul_literals" (formula "11") (term "1,0"))
                           (rule "add_literals" (formula "11") (term "0"))
                           (rule "equal_literals" (formula "11"))
                           (rule "false_right" (formula "11"))
                           (rule "assignmentMultiplicationInt" (formula "11") (term "1"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "translateJavaMulInt" (formula "11") (term "0,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,0"))
                           (rule "blockEmpty" (formula "11") (term "1"))
                           (rule "loopUnwind" (formula "11") (term "1") (inst "#outerLabel=_label7") (inst "#innerLabel=_label6"))
                           (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=b_6"))
                           (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_6"))
                           (rule "compound_inequality_comparison_1" (formula "11") (term "1") (inst "#v0=i_10"))
                           (rule "variableDeclarationAssign" (formula "11") (term "1"))
                           (rule "variableDeclaration" (formula "11") (term "1") (newnames "i_10"))
                           (rule "assignmentModulo" (formula "11") (term "1"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "translateJavaMod" (formula "11") (term "0,1,0,1"))
                           (rule "equal_literals" (formula "11") (term "0,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "inequality_comparison_simple" (formula "11") (term "1"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "ifSplit" (formula "11"))
                           (branch "if y % 2 != 0 true"
                               (builtin "One Step Simplification" (formula "1"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "notLeft" (formula "1"))
                              (rule "jmod_axiom" (formula "11") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "11"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                              (rule "elimGcdEq" (formula "11") (inst "elimGcdRightDiv=add(Z(0(#)), mul(quotient_1, Z(0(4(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(1(#)), mul(quotient_1, Z(0(8(#))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "mul_literals" (formula "11") (term "0,1,0,1,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                              (rule "add_zero_left" (formula "11") (term "1,1,0,0,0"))
                              (rule "add_zero_left" (formula "11") (term "1,1,0,1,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
                              (rule "add_literals" (formula "11") (term "1,0,0"))
                              (rule "add_zero_left" (formula "11") (term "1,1,1"))
                              (rule "add_zero_left" (formula "11") (term "1,1,0,0,1"))
                              (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0,0"))
                              (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "11") (term "0,0,0"))
                              (rule "leq_literals" (formula "11") (term "0,0"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                              (rule "add_literals" (formula "11") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "11") (term "1,0,0"))
                              (rule "add_zero_right" (formula "11") (term "0,0"))
                              (rule "qeq_literals" (formula "11") (term "0"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                              (rule "add_literals" (formula "11") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "11") (term "1,0,0"))
                              (rule "add_zero_right" (formula "11") (term "0,0"))
                              (rule "equal_literals" (formula "11") (term "0"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "false_right" (formula "11"))
                              (rule "ifElseUnfold" (formula "11") (term "1") (inst "#boolv=b_7"))
                              (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_7"))
                              (rule "compound_equality_comparison_1" (formula "11") (term "1") (inst "#v0=i_11"))
                              (rule "variableDeclarationAssign" (formula "11") (term "1"))
                              (rule "variableDeclaration" (formula "11") (term "1") (newnames "i_11"))
                              (rule "assignmentModulo" (formula "11") (term "1"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "translateJavaMod" (formula "11") (term "0,1,0,1"))
                              (rule "equal_literals" (formula "11") (term "0,0"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "equality_comparison_simple" (formula "11") (term "1"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "ifElseSplit" (formula "11"))
                              (branch "if res % 2 == 0 true"
                                  (builtin "One Step Simplification" (formula "1"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "jmod_axiom" (formula "1") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0"))
                                 (rule "applyEqRigid" (formula "1") (term "0,1,0,0,0") (ifseqformula "3"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                 (rule "jmod_axiom" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                 (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "2"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "jmod_axiom" (formula "1") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                 (rule "jdiv_axiom_inline" (formula "1") (term "0,1,0"))
                                 (rule "div_literals" (formula "1") (term "1,0,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,2,0,1,0"))
                                 (rule "qeq_literals" (formula "1") (term "0,0,1,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1,0"))
                                 (rule "add_literals" (formula "1") (term "0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "elim_double_block_2" (formula "11") (term "1"))
                                 (rule "compound_addition_2" (formula "11") (term "1") (inst "#v1=i_13") (inst "#v0=i_12"))
                                 (rule "variableDeclarationAssign" (formula "11") (term "1"))
                                 (rule "variableDeclaration" (formula "11") (term "1") (newnames "i_12"))
                                 (rule "assignmentMultiplicationInt" (formula "11") (term "1"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "translateJavaMulInt" (formula "11") (term "0,1,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,0"))
                                 (rule "variableDeclarationAssign" (formula "11") (term "1"))
                                 (rule "variableDeclaration" (formula "11") (term "1") (newnames "i_13"))
                                 (rule "remove_parentheses_right" (formula "11") (term "1"))
                                 (rule "assignmentModulo" (formula "11") (term "1"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "translateJavaMod" (formula "11") (term "0,1,0,1"))
                                 (rule "equal_literals" (formula "11") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "assignmentAdditionInt" (formula "11") (term "1"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "translateJavaAddInt" (formula "11") (term "0,1,0"))
                                 (rule "assignmentDivisionInt" (formula "11") (term "1"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "translateJavaDivInt" (formula "11") (term "0,1,0,1"))
                                 (rule "equal_literals" (formula "11") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "jdiv_axiom" (formula "11") (term "0,1,0"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,0,2,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,0,2,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "7"))
                                 (rule "times_zero_1" (formula "1") (term "1,1,0,0,0"))
                                 (rule "greater_literals" (formula "1") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "leq_literals" (formula "1") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "applyEqRigid" (formula "12") (term "0,1,0") (ifseqformula "1"))
                                 (rule "polyDiv_pullOut" (formula "12") (term "0,1,0") (inst "polyDivCoeff=mul(quotient_1, Z(0(4(#))))"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,2,0,1,0"))
                                 (rule "equal_literals" (formula "12") (term "0,0,1,0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0,0,1,0"))
                                 (rule "add_literals" (formula "12") (term "1,1,0,0,0,1,0"))
                                 (rule "times_zero_1" (formula "12") (term "1,0,0,0,1,0"))
                                 (rule "add_zero_right" (formula "12") (term "0,0,0,1,0"))
                                 (rule "div_literals" (formula "12") (term "0,0,1,0"))
                                 (rule "add_zero_left" (formula "12") (term "0,1,0"))
                                 (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=mul(quotient_1, Z(0(4(#))))"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,1"))
                                 (rule "equal_literals" (formula "1") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
                                 (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                 (rule "div_literals" (formula "1") (term "0,1"))
                                 (rule "add_zero_left" (formula "1") (term "1"))
                                 (rule "blockEmpty" (formula "12") (term "1"))
                                 (rule "loopUnwind" (formula "12") (term "1") (inst "#outerLabel=_label9") (inst "#innerLabel=_label8"))
                                 (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=b_8"))
                                 (rule "variableDeclaration" (formula "12") (term "1") (newnames "b_8"))
                                 (rule "compound_inequality_comparison_1" (formula "12") (term "1") (inst "#v0=i_14"))
                                 (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                 (rule "variableDeclaration" (formula "12") (term "1") (newnames "i_14"))
                                 (rule "assignmentModulo" (formula "12") (term "1"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "translateJavaMod" (formula "12") (term "0,1,0,1"))
                                 (rule "equal_literals" (formula "12") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "inequality_comparison_simple" (formula "12") (term "1"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "ifSplit" (formula "12"))
                                 (branch "if y % 2 != 0 true"
                                     (builtin "One Step Simplification" (formula "1"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "jmod_axiom" (formula "12") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "12"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                    (rule "elimGcdEq" (formula "12") (inst "elimGcdRightDiv=mul(quotient_1, Z(0(2(#))))") (inst "elimGcdLeftDiv=jdiv(mul(quotient_1, Z(0(4(#)))), Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,1"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,1,0"))
                                    (rule "add_literals" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "12") (term "0,0,0"))
                                    (rule "add_literals" (formula "12") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "12") (term "0,0,0"))
                                    (rule "leq_literals" (formula "12") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "polySimp_mulAssoc" (formula "12") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,1"))
                                    (rule "polySimp_pullOutFactor0" (formula "12") (term "0,0,1"))
                                    (rule "add_literals" (formula "12") (term "1,0,0,1"))
                                    (rule "times_zero_1" (formula "12") (term "0,0,1"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "polySimp_mulAssoc" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "12") (term "0,0"))
                                    (rule "add_literals" (formula "12") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "12") (term "0,0"))
                                    (rule "qeq_literals" (formula "12") (term "0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "ifElseUnfold" (formula "13") (term "1") (inst "#boolv=b_9"))
                                    (rule "jdiv_axiom" (formula "12") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "8"))
                                    (rule "greater_literals" (formula "1") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                    (rule "leq_literals" (formula "1") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "applyEqRigid" (formula "13") (term "0") (ifseqformula "1"))
                                    (rule "polyDiv_pullOut" (formula "13") (term "0") (inst "polyDivCoeff=mul(quotient_1, Z(0(2(#))))"))
                                    (rule "equal_literals" (formula "13") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0"))
                                    (rule "polySimp_homoEq" (formula "13"))
                                    (rule "polySimp_pullOutFactor0" (formula "13") (term "0,0,0,1,0"))
                                    (rule "add_literals" (formula "13") (term "1,0,0,0,1,0"))
                                    (rule "times_zero_1" (formula "13") (term "0,0,0,1,0"))
                                    (rule "div_literals" (formula "13") (term "0,0,1,0"))
                                    (rule "add_zero_left" (formula "13") (term "0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "13") (term "0"))
                                    (rule "add_literals" (formula "13") (term "1,0"))
                                    (rule "times_zero_1" (formula "13") (term "0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "closeTrue" (formula "13"))
                                 )
                                 (branch "if y % 2 != 0 false"
                                     (builtin "One Step Simplification" (formula "1"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "jmod_axiom" (formula "1") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=mul(quotient_1, Z(0(2(#))))") (inst "elimGcdLeftDiv=jdiv(mul(quotient_1, Z(0(4(#)))), Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                    (rule "add_literals" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,1"))
                                    (rule "add_literals" (formula "1") (term "1,0,0,1"))
                                    (rule "times_zero_1" (formula "1") (term "0,0,1"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0"))
                                    (rule "add_literals" (formula "1") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "0,0,0"))
                                    (rule "leq_literals" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "0,0"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "jdiv_axiom" (formula "1") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "applyEq" (formula "1") (term "1") (ifseqformula "2"))
                                    (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "9"))
                                    (rule "times_zero_1" (formula "1") (term "1,1,0,0,0"))
                                    (rule "greater_literals" (formula "1") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "leq_literals" (formula "1") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "polyDiv_pullOut" (formula "1") (term "0") (inst "polyDivCoeff=mul(quotient_1, Z(0(2(#))))"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
                                    (rule "equal_literals" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                                    (rule "polySimp_homoEq" (formula "1"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,1,0"))
                                    (rule "add_literals" (formula "1") (term "1,0,0,0,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "0,0,0,1,0"))
                                    (rule "div_literals" (formula "1") (term "0,0,1,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,0"))
                                    (rule "times_zero_1" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "blockEmpty" (formula "13") (term "1"))
                                    (rule "returnUnfold" (formula "13") (term "1") (inst "#v0=i_15"))
                                    (rule "variableDeclarationAssign" (formula "13") (term "1"))
                                    (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_15"))
                                    (rule "assignmentMultiplicationInt" (formula "13") (term "1"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "translateJavaMulInt" (formula "13") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "0,1,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,0"))
                                    (rule "methodCallReturn" (formula "13") (term "1"))
                                    (rule "assignment" (formula "13") (term "1"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "methodCallEmpty" (formula "13") (term "1"))
                                    (rule "tryEmpty" (formula "13") (term "1"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "emptyModality" (formula "13"))
                                    (rule "closeTrue" (formula "13"))
                                 )
                              )
                              (branch "if res % 2 == 0 false"
                                  (builtin "One Step Simplification" (formula "1"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "jmod_axiom" (formula "11") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,0,0,0,0"))
                                 (rule "applyEqRigid" (formula "11") (term "0,1,0,0,0") (ifseqformula "2"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "11") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0,0"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,0"))
                                 (rule "jmod_axiom" (formula "11") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,0"))
                                 (rule "applyEq" (formula "11") (term "0,1,0,0") (ifseqformula "1"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0"))
                                 (rule "jmod_axiom" (formula "11") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                                 (rule "jdiv_axiom_inline" (formula "11") (term "0,1,0"))
                                 (rule "mul_literals" (formula "11") (term "0,0,2,0,1,0"))
                                 (rule "div_literals" (formula "11") (term "1,0,1,0"))
                                 (rule "qeq_literals" (formula "11") (term "0,0,1,0"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "mul_literals" (formula "11") (term "1,0"))
                                 (rule "add_literals" (formula "11") (term "0"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "closeTrue" (formula "11"))
                              )
                           )
                           (branch "if y % 2 != 0 false"
                               (builtin "One Step Simplification" (formula "1"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "jmod_axiom" (formula "1") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=add(Z(0(#)), mul(quotient_1, Z(0(4(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(1(#)), mul(quotient_1, Z(0(8(#))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "1,1,0,0,0"))
                              (rule "add_literals" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                              (rule "add_zero_left" (formula "1") (term "1,1,0,1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                              (rule "add_zero_left" (formula "1") (term "1,1,0,0,1"))
                              (rule "add_zero_left" (formula "1") (term "1,1,1"))
                              (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0"))
                              (rule "leq_literals" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "1") (term "0,0,1"))
                              (rule "equal_literals" (formula "1") (term "0,1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                     )
                     (branch "if y % 2 != 0 false"
                         (builtin "One Step Simplification" (formula "1"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "jmod_axiom" (formula "1") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=add(Z(0(#)), mul(quotient_1, Z(0(4(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(1(#)), mul(quotient_1, Z(0(8(#))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                        (rule "add_zero_left" (formula "1") (term "1,1,0,0,1"))
                        (rule "add_zero_left" (formula "1") (term "1,1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                        (rule "add_zero_left" (formula "1") (term "1,1,0,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "1,1,0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
                        (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "1") (term "0,0,1"))
                        (rule "equal_literals" (formula "1") (term "0,1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0"))
                        (rule "leq_literals" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "if res % 2 == 0 false"
                      (builtin "One Step Simplification" (formula "1"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "notLeft" (formula "1"))
                     (rule "jmod_axiom" (formula "10") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,0,0,0"))
                     (rule "applyEqRigid" (formula "10") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                     (rule "add_literals" (formula "10") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0"))
                     (rule "jmod_axiom" (formula "10") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                     (rule "jdiv_axiom_inline" (formula "10") (term "0,1,0"))
                     (rule "qeq_literals" (formula "10") (term "0,0,1,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "div_literals" (formula "10") (term "0,1,0"))
                     (rule "mul_literals" (formula "10") (term "1,0"))
                     (rule "add_literals" (formula "10") (term "0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "closeTrue" (formula "10"))
                  )
               )
               (branch "if y % 2 != 0 false"
                   (builtin "One Step Simplification" (formula "1"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "jmod_axiom" (formula "1") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                  (rule "polySimp_sepNegMonomial" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=add(Z(1(#)), mul(quotient_1, Z(0(8(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(3(#)), mul(quotient_1, Z(0(6(1(#)))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "leq_literals" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "equal_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "if y % 2 != 0 false"
             (builtin "One Step Simplification" (formula "1"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "jmod_axiom" (formula "1") (term "0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
            (rule "polySimp_sepNegMonomial" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=add(Z(1(#)), mul(quotient_1, Z(0(8(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(3(#)), mul(quotient_1, Z(0(6(1(#)))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
            (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
            (rule "add_literals" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,1"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "equal_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0"))
            (rule "leq_literals" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "if x_12 false"
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "if x_10 false"
       (builtin "One Step Simplification" (formula "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "jmod_axiom" (formula "1") (term "0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
      (rule "polySimp_sepNegMonomial" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "elimGcdEq" (formula "1") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=jdiv(add(Z(7(#)), mul(quotient_0, Z(0(2(3(#)))))),
     Z(2(#)))") (inst "elimGcdRightDiv=add(Z(3(#)), mul(quotient_0, Z(0(6(1(#))))))"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "add_literals" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
      (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,0"))
      (rule "leq_literals" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "qeq_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_literals" (formula "1") (term "0"))
      (rule "equal_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
)
}
