<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call VerifiedTest.loop(_x)&gt;" pathCondition="true" pathConditionChanged="false">
      <branchStatement name="if (_x&lt;0)" pathCondition="true" pathConditionChanged="false" blockOpened="true">
         <branchCondition name="lt(x,Z(0(#)))" pathCondition="lt(x,Z(0(#)))" pathConditionChanged="true" branchCondition="lt(x,Z(0(#)))" mergedBranchCondition="false" isBranchConditionComputed="true">
            <statement name="_x=-_x;" pathCondition="lt(x,Z(0(#)))" pathConditionChanged="false">
               <loopInvariant name="invariant: _x &gt;= 0;
variant: _x
mod: allLocs" pathCondition="lt(x,Z(0(#)))" pathConditionChanged="false" initiallyValid="true">
                  <branchCondition name="gt(_x_0,Z(0(#)))" pathCondition="and(geq(_x_0,Z(1(#))),leq(x,Z(neglit(1(#)))))" pathConditionChanged="true" branchCondition="gt(_x_0,Z(0(#)))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Body Preserves Invariant">
                     <loopCondition name="_x&gt;0" pathCondition="and(geq(_x_0,Z(1(#))),leq(x,Z(neglit(1(#)))))" pathConditionChanged="false" blockOpened="false">
                        <statement name="_x--;" pathCondition="and(geq(_x_0,Z(1(#))),leq(x,Z(neglit(1(#)))))" pathConditionChanged="false">
                           <termination name="&lt;loop body end&gt;" pathCondition="and(geq(_x_0,Z(1(#))),leq(x,Z(neglit(1(#)))))" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="true">
                           </termination>
                        </statement>
                     </loopCondition>
                  </branchCondition>
                  <branchCondition name="equals(_x_0,Z(0(#)))" pathCondition="and(equals(_x_0,Z(0(#))),leq(x,Z(neglit(1(#)))))" pathConditionChanged="true" branchCondition="equals(_x_0,Z(0(#)))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
                     <statement name="return _x;" pathCondition="and(equals(_x_0,Z(0(#))),leq(x,Z(neglit(1(#)))))" pathConditionChanged="false">
                        <methodReturn name="&lt;return of loop&gt;" signature="&lt;return of VerifiedTest.loop(_x)&gt;" pathCondition="and(equals(_x_0,Z(0(#))),leq(x,Z(neglit(1(#)))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="and(equals(_x_0,Z(0(#))),leq(x,Z(neglit(1(#)))))">
                           <termination name="&lt;end&gt;" pathCondition="and(equals(_x_0,Z(0(#))),leq(x,Z(neglit(1(#)))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                           </termination>
                        </methodReturn>
                     </statement>
                  </branchCondition>
               </loopInvariant>
               <completedBlockEntry path="/0/0" conditionString="lt(x,Z(0(#)))"/>
            </statement>
         </branchCondition>
         <branchCondition name="gt(x,Z(neglit(1(#))))" pathCondition="gt(x,Z(neglit(1(#))))" pathConditionChanged="true" branchCondition="gt(x,Z(neglit(1(#))))" mergedBranchCondition="false" isBranchConditionComputed="true">
            <loopInvariant name="invariant: _x &gt;= 0;
variant: _x
mod: allLocs" pathCondition="gt(x,Z(neglit(1(#))))" pathConditionChanged="false" initiallyValid="true">
               <branchCondition name="gt(_x_0,Z(0(#)))" pathCondition="and(geq(_x_0,Z(1(#))),geq(x,Z(0(#))))" pathConditionChanged="true" branchCondition="gt(_x_0,Z(0(#)))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Body Preserves Invariant">
                  <loopCondition name="_x&gt;0" pathCondition="and(geq(_x_0,Z(1(#))),geq(x,Z(0(#))))" pathConditionChanged="false" blockOpened="false">
                     <statement name="_x--;" pathCondition="and(geq(_x_0,Z(1(#))),geq(x,Z(0(#))))" pathConditionChanged="false">
                        <termination name="&lt;loop body end&gt;" pathCondition="and(geq(_x_0,Z(1(#))),geq(x,Z(0(#))))" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="true">
                        </termination>
                     </statement>
                  </loopCondition>
               </branchCondition>
               <branchCondition name="equals(_x_0,Z(0(#)))" pathCondition="and(equals(_x_0,Z(0(#))),geq(x,Z(0(#))))" pathConditionChanged="true" branchCondition="equals(_x_0,Z(0(#)))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
                  <statement name="return _x;" pathCondition="and(equals(_x_0,Z(0(#))),geq(x,Z(0(#))))" pathConditionChanged="false">
                     <methodReturn name="&lt;return of loop&gt;" signature="&lt;return of VerifiedTest.loop(_x)&gt;" pathCondition="and(equals(_x_0,Z(0(#))),geq(x,Z(0(#))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="and(equals(_x_0,Z(0(#))),geq(x,Z(0(#))))">
                        <termination name="&lt;end&gt;" pathCondition="and(equals(_x_0,Z(0(#))),geq(x,Z(0(#))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                        </termination>
                     </methodReturn>
                  </statement>
               </branchCondition>
            </loopInvariant>
            <completedBlockEntry path="/0/0" conditionString="true"/>
         </branchCondition>
         <blockCompletionEntry path="/0/0/0/0"/>
         <blockCompletionEntry path="/0/0/1"/>
      </branchStatement>
      <methodReturnEntry path="/0/0/0/0/0/1/0/0"/>
      <methodReturnEntry path="/0/0/1/0/1/0/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/0/1/0/0/0"/>
   <terminationEntry path="/0/0/1/0/0/0/0/0"/>
   <terminationEntry path="/0/0/1/0/1/0/0/0"/>
</start>
