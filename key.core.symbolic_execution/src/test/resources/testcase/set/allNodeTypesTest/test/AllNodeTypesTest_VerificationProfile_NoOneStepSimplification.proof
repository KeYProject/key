\profile "Java Profile for Symbolic Execution";

\settings {
"#Proof-Settings-Config-File
#Tue Jul 25 22:58:04 CEST 2023
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:on, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:noRestriction, modelFields-modelFields\\:showSatisfiability, moreSeqRules-moreSeqRules\\:off, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:allow, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[Labels]UseOriginLabels=true
[SMTSettings]SelectedTaclets=
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]maxGenericSorts=2
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_INSTANTIATE
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[Strategy]ActiveStrategy=JavaCardDLStrategy
[Strategy]MaximumNumberOfAutomaticApplications=10000
[Strategy]Timeout=-1
"
}

\javaSource ".";

\proofObligation {
	"addSymbolicExecutionLabel": true,
	"class": "de.uka.ilkd.key.proof.init.FunctionalOperationContractPO",
	"contract": "AllNodeTypesTest[AllNodeTypesTest::main(AllNodeTypesTest)].JML normal_behavior operation contract.0",
	"name": "AllNodeTypesTest[AllNodeTypesTest::main(AllNodeTypesTest)].JML normal_behavior operation contract.0",
 }

\proof {
(keyLog "0" (keyUser "Martin" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "1" (keyUser "marti" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "2" (keyUser "marti" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "3" (keyUser "marti" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "4" (keyUser "marti" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "5" (keyUser "marti" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "6" (keyUser "marti" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "7" (keyUser "bubel" ) (keyVersion "0ac6d7f2f89621db5bcd223c76470fdcc857ac4d"))

(autoModeTime "4929")

(branch "dummy ID"
(rule "elementOfAllLocs" (formula "1") (term "0,0,0,0,1,0,1,1") (newnames "heapAtPre,o,f"))
(rule "concrete_or_1" (formula "1") (term "0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,1,0,1,1"))
(rule "simplifyUpdate2" (formula "1") (term "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "assignment" (formula "4") (term "1"))
(rule "sequentialToParallel2" (formula "4"))
(rule "simplifyUpdate3" (formula "4") (term "1,0"))
(rule "all_unused" (formula "4") (term "0,1,0,1"))
(rule "all_unused" (formula "4") (term "1,0,1"))
(rule "concrete_and_3" (formula "4") (term "0,1"))
(rule "methodBodyExpand" (formula "4") (term "1") (newnames "heapBefore_main,savedHeapBefore_main,_objBefore_main"))
(rule "simplifyUpdate2" (formula "4") (term "1"))
(rule "assignment_write_attribute" (formula "4") (term "1"))
(branch "Normal Execution (_obj != null)"
   (rule "simplifyUpdate2" (formula "4"))
   (rule "sequentialToParallel2" (formula "5"))
   (rule "simplifyUpdate3" (formula "5") (term "1,0"))
   (rule "applyOnElementary" (formula "5") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "4"))
   (rule "simplifyUpdate1" (formula "4") (term "1"))
   (rule "applyOnPV" (formula "4") (term "0"))
   (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "4"))
   (rule "concrete_or_2" (formula "2"))
   (rule "applyOnRigidTerm" (formula "5") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "5") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "5") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "5") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "5") (term "3,0,1,0"))
   (rule "eval_order_access4" (formula "5") (term "1") (inst "#v0=a") (inst "#v1=x"))
   (rule "variableDeclarationAssign" (formula "5") (term "1"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "a"))
   (rule "assignment" (formula "5") (term "1"))
   (rule "sequentialToParallel2" (formula "5"))
   (rule "simplifyUpdate2" (formula "5"))
   (rule "simplifyUpdate3" (formula "5") (term "1,0"))
   (rule "applyOnElementary" (formula "5") (term "1,0"))
   (rule "applyOnPV" (formula "5") (term "0,1,0"))
   (rule "variableDeclarationAssign" (formula "5") (term "1"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "x"))
    (builtin "Use Operation Contract" (formula "5") (newnames "heapBefore_doubleValue,result_0,exc_0,heapAfter_doubleValue,anon_heap_doubleValue") (contract "AllNodeTypesTest[AllNodeTypesTest::doubleValue(int)].JML normal_behavior operation contract.0") (modality "diamond"))
   (branch "Post (doubleValue)"
      (rule "expandInInt" (formula "5") (term "1,0,1,1,1,1"))
      (rule "concrete_and_3" (formula "5") (term "0,1,1,1,1"))
      (rule "add_literals" (formula "5") (term "1,0,1,1,1,1,1"))
      (rule "simplifyUpdate2" (formula "5"))
      (rule "simplifyUpdate2" (formula "5") (term "1"))
      (rule "simplifyUpdate2" (formula "5") (term "1,1"))
      (rule "andLeft" (formula "5"))
      (rule "simplifyUpdate2" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "7"))
      (rule "sequentialToParallel2" (formula "9"))
      (rule "simplifyUpdate2" (formula "9"))
      (rule "simplifyUpdate3" (formula "9") (term "1,0"))
      (rule "applyOnRigidFormula" (formula "5"))
      (rule "simplifyUpdate1" (formula "5") (term "1"))
      (rule "applyOnRigidTerm" (formula "5") (term "0"))
      (rule "simplifyUpdate1" (formula "5") (term "2,0"))
      (rule "simplifyUpdate1" (formula "5") (term "1,0"))
      (rule "applyOnPV" (formula "5") (term "0,0"))
      (rule "assignment" (formula "9") (term "1"))
      (rule "sequentialToParallel2" (formula "9"))
      (rule "simplifyUpdate3" (formula "9") (term "1,0"))
      (rule "assignment_write_attribute" (formula "9") (term "1"))
      (branch "Normal Execution (a != null)"
         (rule "simplifyUpdate2" (formula "9"))
         (rule "sequentialToParallel2" (formula "10"))
         (rule "simplifyUpdate2" (formula "10"))
         (rule "simplifyUpdate3" (formula "10") (term "1,0"))
         (rule "applyOnElementary" (formula "10") (term "1,0"))
         (rule "applyOnRigidFormula" (formula "9"))
         (rule "simplifyUpdate1" (formula "9") (term "1"))
         (rule "applyOnPV" (formula "9") (term "0"))
         (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "9") (term "3,0,1,0"))
         (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0"))
         (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "9") (term "0,0,1,0"))
         (rule "applyOnPV" (formula "9") (term "3,0,1,0"))
         (rule "applyOnPV" (formula "9") (term "1,0,1,0"))
         (rule "applyOnPV" (formula "9") (term "0,0,1,0"))
         (rule "variableDeclarationAssign" (formula "9") (term "1"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "result"))
         (rule "assignment" (formula "9") (term "1"))
         (rule "sequentialToParallel2" (formula "9"))
         (rule "simplifyUpdate3" (formula "9") (term "1,0"))
         (rule "applyEq" (formula "9") (term "3,0,1,0,0") (ifseqformula "7"))
         (rule "for_to_while" (formula "9") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
         (rule "variableDeclarationAssign" (formula "9") (term "1"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "i"))
         (rule "assignment" (formula "9") (term "1"))
         (rule "sequentialToParallel2" (formula "9"))
         (rule "simplifyUpdate3" (formula "9") (term "1,0"))
         (rule "elim_double_block_3" (formula "9") (term "1"))
         (rule "loopUnwind" (formula "9") (term "1") (inst "#outerLabel=_label3") (inst "#innerLabel=_label2"))
         (rule "ifUnfold" (formula "9") (term "1") (inst "#boolv=b"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "b"))
         (rule "equality_comparison_simple" (formula "9") (term "1"))
         (rule "sequentialToParallel2" (formula "9"))
         (rule "simplifyUpdate3" (formula "9") (term "1,0"))
         (rule "applyOnElementary" (formula "9") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0"))
         (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
         (rule "applyOnRigidFormula" (formula "9") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1,0"))
         (rule "applyOnPV" (formula "9") (term "0,0,0,1,0"))
         (rule "eqClose" (formula "9") (term "0,0,1,0"))
         (rule "ifthenelse_true" (formula "9") (term "0,1,0"))
         (rule "ifSplit" (formula "9"))
         (branch "if b true"
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "10"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "boolean_equal" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "postincrement" (formula "9") (term "1"))
            (rule "compound_int_cast_expression" (formula "9") (term "1") (inst "#v=i_1"))
            (rule "variableDeclarationAssign" (formula "9") (term "1"))
            (rule "variableDeclaration" (formula "9") (term "1") (newnames "i_1"))
            (rule "remove_parentheses_right" (formula "9") (term "1"))
            (rule "assignmentAdditionInt" (formula "9") (term "1"))
            (rule "translateJavaAddInt" (formula "9") (term "0,0,1"))
            (rule "sequentialToParallel2" (formula "9"))
            (rule "simplifyUpdate3" (formula "9") (term "1,0"))
            (rule "applyOnElementary" (formula "9") (term "1,0"))
            (rule "polySimp_addComm0" (formula "9") (term "1,0,1,0"))
            (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
            (rule "applyOnPV" (formula "9") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "9") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "0,1,0"))
            (rule "widening_identity_cast_5" (formula "9") (term "1"))
            (rule "assignment" (formula "9") (term "1"))
            (rule "sequentialToParallel2" (formula "9"))
            (rule "simplifyUpdate2" (formula "9"))
            (rule "simplifyUpdate3" (formula "9") (term "1,0"))
            (rule "applyOnElementary" (formula "9") (term "1,0"))
            (rule "applyOnPV" (formula "9") (term "0,1,0"))
            (rule "blockEmpty" (formula "9") (term "1"))
            (rule "postincrement" (formula "9") (term "1"))
            (rule "compound_int_cast_expression" (formula "9") (term "1") (inst "#v=i_2"))
            (rule "variableDeclarationAssign" (formula "9") (term "1"))
            (rule "variableDeclaration" (formula "9") (term "1") (newnames "i_2"))
            (rule "remove_parentheses_right" (formula "9") (term "1"))
            (rule "assignmentAdditionInt" (formula "9") (term "1"))
            (rule "translateJavaAddInt" (formula "9") (term "0,0,1"))
            (rule "sequentialToParallel2" (formula "9"))
            (rule "simplifyUpdate3" (formula "9") (term "1,0"))
            (rule "applyOnElementary" (formula "9") (term "1,0"))
            (rule "polySimp_addComm0" (formula "9") (term "1,0,1,0"))
            (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
            (rule "applyOnPV" (formula "9") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "9") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "0,1,0"))
            (rule "widening_identity_cast_5" (formula "9") (term "1"))
            (rule "assignment" (formula "9") (term "1"))
            (rule "sequentialToParallel2" (formula "9"))
            (rule "simplifyUpdate2" (formula "9"))
            (rule "simplifyUpdate3" (formula "9") (term "1,0"))
            (rule "applyOnElementary" (formula "9") (term "1,0"))
            (rule "applyOnPV" (formula "9") (term "0,1,0"))
            (rule "blockEmpty" (formula "9") (term "1"))
            (rule "elim_double_block_3" (formula "9") (term "1"))
            (rule "loopUnwind" (formula "9") (term "1") (inst "#outerLabel=_label5") (inst "#innerLabel=_label4"))
            (rule "ifUnfold" (formula "9") (term "1") (inst "#boolv=b_1"))
            (rule "variableDeclaration" (formula "9") (term "1") (newnames "b_1"))
            (rule "equality_comparison_simple" (formula "9") (term "1"))
            (rule "sequentialToParallel2" (formula "9"))
            (rule "simplifyUpdate3" (formula "9") (term "1,0"))
            (rule "applyOnElementary" (formula "9") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "9") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "9") (term "0,0,0,1,0"))
            (rule "equal_literals" (formula "9") (term "0,0,1,0"))
            (rule "ifthenelse_false" (formula "9") (term "0,1,0"))
            (rule "ifSplit" (formula "9"))
            (branch "if b_1 true"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "10"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if b_1 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "10"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "8"))
               (rule "simplifyUpdate1" (formula "8") (term "1"))
               (rule "applyOnPV" (formula "8") (term "0"))
               (rule "boolean_not_equal_2" (formula "8"))
               (rule "false_right" (formula "8"))
               (rule "methodCallWithAssignmentWithinClass" (formula "9") (term "1") (inst "#v0=i_3"))
               (rule "variableDeclaration" (formula "9") (term "1") (newnames "i_3"))
               (rule "variableDeclarationAssign" (formula "9") (term "1"))
               (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_1"))
               (rule "assignment" (formula "9") (term "1"))
               (rule "sequentialToParallel2" (formula "9"))
               (rule "simplifyUpdate3" (formula "9") (term "1,0"))
               (rule "applyOnElementary" (formula "9") (term "1,0"))
               (rule "applyOnPV" (formula "9") (term "0,1,0"))
               (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_doubleValue_0,savedHeapBefore_doubleValue"))
               (rule "simplifyUpdate2" (formula "9") (term "1"))
               (rule "returnUnfold" (formula "9") (term "1") (inst "#v0=i_4"))
               (rule "variableDeclarationAssign" (formula "9") (term "1"))
               (rule "variableDeclaration" (formula "9") (term "1") (newnames "i_4"))
               (rule "assignmentAdditionInt" (formula "9") (term "1"))
               (rule "translateJavaAddInt" (formula "9") (term "0,0,1"))
               (rule "polySimp_pullOutFactor3" (formula "9") (term "0,0,1"))
               (rule "sequentialToParallel2" (formula "9"))
               (rule "simplifyUpdate2" (formula "9"))
               (rule "simplifyUpdate3" (formula "9") (term "1,0"))
               (rule "applyOnElementary" (formula "9") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
               (rule "applyOnPV" (formula "9") (term "0,0,1,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0"))
               (rule "methodCallReturn" (formula "9") (term "1"))
               (rule "assignment" (formula "9") (term "1"))
               (rule "sequentialToParallel2" (formula "9"))
               (rule "simplifyUpdate2" (formula "9"))
               (rule "simplifyUpdate3" (formula "9") (term "1,0"))
               (rule "applyOnElementary" (formula "9") (term "1,0"))
               (rule "applyOnPV" (formula "9") (term "0,1,0"))
               (rule "methodCallEmpty" (formula "9") (term "1"))
               (rule "blockEmpty" (formula "9") (term "1"))
               (rule "assignment" (formula "9") (term "1"))
               (rule "sequentialToParallel2" (formula "9"))
               (rule "simplifyUpdate2" (formula "9"))
               (rule "simplifyUpdate3" (formula "9") (term "1,0"))
               (rule "applyOnElementary" (formula "9") (term "1,0"))
               (rule "applyOnPV" (formula "9") (term "0,1,0"))
               (rule "for_to_while" (formula "9") (term "1") (inst "#outerLabel=_label7") (inst "#innerLabel=_label6"))
               (rule "variableDeclarationAssign" (formula "9") (term "1"))
               (rule "variableDeclaration" (formula "9") (term "1") (newnames "i_5"))
               (rule "assignment" (formula "9") (term "1"))
               (rule "sequentialToParallel2" (formula "9"))
               (rule "simplifyUpdate3" (formula "9") (term "1,0"))
               (rule "elim_double_block_3" (formula "9") (term "1"))
               (rule "loopUnwind" (formula "9") (term "1") (inst "#outerLabel=_label9") (inst "#innerLabel=_label8"))
               (rule "ifUnfold" (formula "9") (term "1") (inst "#boolv=b_2"))
               (rule "variableDeclaration" (formula "9") (term "1") (newnames "b_2"))
               (rule "equality_comparison_simple" (formula "9") (term "1"))
               (rule "sequentialToParallel2" (formula "9"))
               (rule "simplifyUpdate3" (formula "9") (term "1,0"))
               (rule "applyOnElementary" (formula "9") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
               (rule "applyOnRigidFormula" (formula "9") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1,0"))
               (rule "applyOnPV" (formula "9") (term "0,0,0,1,0"))
               (rule "eqClose" (formula "9") (term "0,0,1,0"))
               (rule "ifthenelse_true" (formula "9") (term "0,1,0"))
               (rule "ifSplit" (formula "9"))
               (branch "if b_2 true"
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "10"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "boolean_equal" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "postincrement" (formula "9") (term "1"))
                  (rule "compound_int_cast_expression" (formula "9") (term "1") (inst "#v=i_6"))
                  (rule "variableDeclarationAssign" (formula "9") (term "1"))
                  (rule "variableDeclaration" (formula "9") (term "1") (newnames "i_6"))
                  (rule "remove_parentheses_right" (formula "9") (term "1"))
                  (rule "assignmentAdditionInt" (formula "9") (term "1"))
                  (rule "translateJavaAddInt" (formula "9") (term "0,0,1"))
                  (rule "sequentialToParallel2" (formula "9"))
                  (rule "simplifyUpdate3" (formula "9") (term "1,0"))
                  (rule "applyOnElementary" (formula "9") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "9") (term "1,0,1,0"))
                  (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
                  (rule "applyOnPV" (formula "9") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "9") (term "0,0,1,0"))
                  (rule "add_literals" (formula "9") (term "0,1,0"))
                  (rule "widening_identity_cast_5" (formula "9") (term "1"))
                  (rule "assignment" (formula "9") (term "1"))
                  (rule "sequentialToParallel2" (formula "9"))
                  (rule "simplifyUpdate2" (formula "9"))
                  (rule "simplifyUpdate3" (formula "9") (term "1,0"))
                  (rule "applyOnElementary" (formula "9") (term "1,0"))
                  (rule "applyOnPV" (formula "9") (term "0,1,0"))
                  (rule "blockEmpty" (formula "9") (term "1"))
                  (rule "postincrement" (formula "9") (term "1"))
                  (rule "compound_int_cast_expression" (formula "9") (term "1") (inst "#v=i_7"))
                  (rule "variableDeclarationAssign" (formula "9") (term "1"))
                  (rule "variableDeclaration" (formula "9") (term "1") (newnames "i_7"))
                  (rule "remove_parentheses_right" (formula "9") (term "1"))
                  (rule "assignmentAdditionInt" (formula "9") (term "1"))
                  (rule "translateJavaAddInt" (formula "9") (term "0,0,1"))
                  (rule "sequentialToParallel2" (formula "9"))
                  (rule "simplifyUpdate3" (formula "9") (term "1,0"))
                  (rule "applyOnElementary" (formula "9") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "9") (term "1,0,1,0"))
                  (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
                  (rule "applyOnPV" (formula "9") (term "1,0,1,0"))
                  (rule "add_zero_right" (formula "9") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "9") (term "0,1,0"))
                  (rule "widening_identity_cast_5" (formula "9") (term "1"))
                  (rule "assignment" (formula "9") (term "1"))
                  (rule "sequentialToParallel2" (formula "9"))
                  (rule "simplifyUpdate2" (formula "9"))
                  (rule "simplifyUpdate3" (formula "9") (term "1,0"))
                  (rule "applyOnElementary" (formula "9") (term "1,0"))
                  (rule "applyOnPV" (formula "9") (term "0,1,0"))
                  (rule "blockEmpty" (formula "9") (term "1"))
                  (rule "elim_double_block_3" (formula "9") (term "1"))
                  (rule "loopUnwind" (formula "9") (term "1") (inst "#outerLabel=_label11") (inst "#innerLabel=_label10"))
                  (rule "ifUnfold" (formula "9") (term "1") (inst "#boolv=b_3"))
                  (rule "variableDeclaration" (formula "9") (term "1") (newnames "b_3"))
                  (rule "equality_comparison_simple" (formula "9") (term "1"))
                  (rule "sequentialToParallel2" (formula "9"))
                  (rule "simplifyUpdate3" (formula "9") (term "1,0"))
                  (rule "applyOnElementary" (formula "9") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "9") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1,0"))
                  (rule "applyOnPV" (formula "9") (term "0,0,0,1,0"))
                  (rule "equal_literals" (formula "9") (term "0,0,1,0"))
                  (rule "ifthenelse_false" (formula "9") (term "0,1,0"))
                  (rule "ifSplit" (formula "9"))
                  (branch "if b_3 true"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "10"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if b_3 false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "10"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "8"))
                     (rule "simplifyUpdate1" (formula "8") (term "1"))
                     (rule "applyOnPV" (formula "8") (term "0"))
                     (rule "boolean_not_equal_2" (formula "8"))
                     (rule "false_right" (formula "8"))
                     (rule "methodCallReturn" (formula "9") (term "1"))
                     (rule "assignment" (formula "9") (term "1"))
                     (rule "simplifyUpdate2" (formula "9") (term "1"))
                     (rule "simplifyUpdate2" (formula "9"))
                     (rule "methodCallEmpty" (formula "9") (term "1"))
                     (rule "tryEmpty" (formula "9") (term "1"))
                     (rule "simplifyUpdate2" (formula "9"))
                     (rule "emptyModality" (formula "9") (term "1"))
                     (rule "applyOnRigidFormula" (formula "9"))
                     (rule "simplifyUpdate1" (formula "9") (term "1"))
                     (rule "applyOnPV" (formula "9") (term "0"))
                     (rule "eqClose" (formula "9"))
                     (rule "closeTrue" (formula "9"))
                  )
               )
               (branch "if b_2 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "10"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "8"))
                  (rule "simplifyUpdate1" (formula "8") (term "1"))
                  (rule "applyOnPV" (formula "8") (term "0"))
                  (rule "boolean_equal" (formula "8"))
                  (rule "closeTrue" (formula "8"))
               )
            )
         )
         (branch "if b false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "10"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "8"))
            (rule "simplifyUpdate1" (formula "8") (term "1"))
            (rule "applyOnPV" (formula "8") (term "0"))
            (rule "boolean_equal" (formula "8"))
            (rule "closeTrue" (formula "8"))
         )
      )
      (branch "Null Reference (a = null)"
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "10"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "close" (formula "9") (ifseqformula "1"))
      )
   )
   (branch "Exceptional Post (doubleValue)"
      (rule "simplifyUpdate2" (formula "5"))
      (rule "add_literals" (formula "5") (term "1,0,1,1,1,1,1"))
      (rule "simplifyUpdate2" (formula "5") (term "1"))
      (rule "andLeft" (formula "5"))
      (rule "sequentialToParallel2" (formula "8"))
      (rule "simplifyUpdate2" (formula "8"))
      (rule "simplifyUpdate3" (formula "8") (term "1,0"))
      (rule "sequentialToParallel2" (formula "6"))
      (rule "simplifyUpdate2" (formula "6"))
      (rule "simplifyUpdate3" (formula "6") (term "0"))
      (rule "andLeft" (formula "6"))
      (rule "simplifyUpdate2" (formula "7"))
      (rule "andLeft" (formula "6"))
      (rule "simplifyUpdate2" (formula "6"))
      (rule "andLeft" (formula "8"))
      (rule "notLeft" (formula "6"))
      (rule "close" (formula "9") (ifseqformula "8"))
   )
   (branch "Pre (doubleValue)"
      (rule "expandInInt" (formula "5") (term "1,1,1,1"))
      (rule "concrete_and_3" (formula "5") (term "1,1,1"))
      (rule "qeq_literals" (formula "5") (term "0,1,1"))
      (rule "concrete_and_1" (formula "5") (term "1,1"))
      (rule "simplifyUpdate2" (formula "5"))
      (rule "simplifyUpdate2" (formula "5") (term "1"))
      (rule "applyOnRigidFormula" (formula "5"))
      (rule "applyOnPV" (formula "5") (term "0"))
      (rule "wellFormedStorePrimitive" (formula "5"))
      (rule "close" (formula "5") (ifseqformula "1"))
   )
)
(branch "Null Reference (_obj = null)"
   (rule "simplifyUpdate2" (formula "1"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "applyOnPV" (formula "1") (term "0"))
   (rule "simplifyUpdate1" (formula "1") (term "1"))
   (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "1"))
   (rule "concrete_or_1" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "1"))
   (rule "throwUnfold" (formula "4") (term "1") (inst "#v0=n"))
   (rule "variableDeclarationAssign" (formula "4") (term "1"))
   (rule "variableDeclaration" (formula "4") (term "1") (newnames "n"))
   (rule "instanceCreationAssignment" (formula "4") (term "1") (inst "#v0=n_1"))
   (rule "variableDeclarationAssign" (formula "4") (term "1"))
   (rule "variableDeclaration" (formula "4") (term "1") (newnames "n_1"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "4") (term "1") (inst "#v0=n_2"))
   (rule "variableDeclaration" (formula "4") (term "1") (newnames "n_2"))
   (rule "methodBodyExpand" (formula "4") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
   (rule "simplifyUpdate2" (formula "4") (term "1"))
   (rule "variableDeclaration" (formula "4") (term "1") (newnames "__NEW__"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "4") (term "1") (inst "#v0=n_3"))
   (rule "variableDeclaration" (formula "4") (term "1") (newnames "n_3"))
   (rule "allocateInstance" (formula "4"))
   (rule "false_to_not_true" (formula "1") (term "1,1,0,1"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "4"))
   (rule "concrete_impl_1" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "sequentialToParallel2" (formula "7"))
   (rule "simplifyUpdate3" (formula "7") (term "1,0"))
   (rule "blockEmpty" (formula "7") (term "1"))
   (rule "assignment" (formula "7") (term "1"))
   (rule "sequentialToParallel2" (formula "7"))
   (rule "simplifyUpdate3" (formula "7") (term "1,0"))
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
   (rule "simplifyUpdate2" (formula "7") (term "1"))
   (rule "assignment_write_attribute_this" (formula "7") (term "1"))
   (rule "sequentialToParallel2" (formula "7"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "simplifyUpdate3" (formula "7") (term "1,0"))
   (rule "applyOnElementary" (formula "7") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "7") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "3,0,1,0"))
   (rule "applyOnPV" (formula "7") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "7") (term "1,0,1,0"))
   (rule "methodCallWithinClass" (formula "7") (term "1"))
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
   (rule "simplifyUpdate2" (formula "7") (term "1"))
   (rule "methodCallSuper" (formula "7") (term "1"))
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
   (rule "simplifyUpdate2" (formula "7") (term "1"))
   (rule "methodCallSuper" (formula "7") (term "1"))
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
   (rule "simplifyUpdate2" (formula "7") (term "1"))
   (rule "methodCallSuper" (formula "7") (term "1"))
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
   (rule "simplifyUpdate2" (formula "7") (term "1"))
   (rule "methodCallSuper" (formula "7") (term "1"))
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
   (rule "simplifyUpdate2" (formula "7") (term "1"))
   (rule "methodCallEmpty" (formula "7") (term "1"))
   (rule "blockEmpty" (formula "7") (term "1"))
   (rule "assignment_write_attribute_this" (formula "7") (term "1"))
   (rule "sequentialToParallel2" (formula "7"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "simplifyUpdate3" (formula "7") (term "1,0"))
   (rule "applyOnElementary" (formula "7") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "7") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "3,0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "2,0,1,0"))
   (rule "applyOnPV" (formula "7") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "7") (term "1,0,1,0"))
   (rule "assignment_write_attribute_this" (formula "7") (term "1"))
   (rule "sequentialToParallel2" (formula "7"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "simplifyUpdate3" (formula "7") (term "1,0"))
   (rule "applyOnElementary" (formula "7") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "7") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "3,0,1,0"))
   (rule "applyOnPV" (formula "7") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "7") (term "1,0,1,0"))
   (rule "methodCallEmpty" (formula "7") (term "1"))
   (rule "methodCallEmpty" (formula "7") (term "1"))
   (rule "methodCallEmpty" (formula "7") (term "1"))
   (rule "methodCallEmpty" (formula "7") (term "1"))
   (rule "blockEmpty" (formula "7") (term "1"))
   (rule "methodCallReturnIgnoreResult" (formula "7") (term "1"))
   (rule "methodCallReturn" (formula "7") (term "1"))
   (rule "assignment" (formula "7") (term "1"))
   (rule "sequentialToParallel2" (formula "7"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "simplifyUpdate3" (formula "7") (term "1,0"))
   (rule "applyOnElementary" (formula "7") (term "1,0"))
   (rule "applyOnPV" (formula "7") (term "0,1,0"))
   (rule "methodCallEmpty" (formula "7") (term "1"))
   (rule "blockEmpty" (formula "7") (term "1"))
   (rule "assignment" (formula "7") (term "1"))
   (rule "sequentialToParallel2" (formula "7"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "simplifyUpdate3" (formula "7") (term "1,0"))
   (rule "applyOnElementary" (formula "7") (term "1,0"))
   (rule "applyOnPV" (formula "7") (term "0,1,0"))
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
   (rule "simplifyUpdate2" (formula "7") (term "1"))
   (rule "methodCallSuper" (formula "7") (term "1"))
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
   (rule "simplifyUpdate2" (formula "7") (term "1"))
   (rule "methodCallSuper" (formula "7") (term "1"))
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
   (rule "simplifyUpdate2" (formula "7") (term "1"))
   (rule "methodCallSuper" (formula "7") (term "1"))
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
   (rule "simplifyUpdate2" (formula "7") (term "1"))
   (rule "methodCallSuper" (formula "7") (term "1"))
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
   (rule "simplifyUpdate2" (formula "7") (term "1"))
   (rule "methodCallEmpty" (formula "7") (term "1"))
   (rule "blockEmpty" (formula "7") (term "1"))
   (rule "assignment_write_attribute_this" (formula "7") (term "1"))
   (rule "sequentialToParallel2" (formula "7"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "simplifyUpdate3" (formula "7") (term "1,0"))
   (rule "applyOnElementary" (formula "7") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "7") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "3,0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "2,0,1,0"))
   (rule "applyOnPV" (formula "7") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "7") (term "1,0,1,0"))
   (rule "dropEffectlessStores" (formula "7") (term "0,1,0"))
   (rule "assignment_write_attribute_this" (formula "7") (term "1"))
   (rule "sequentialToParallel2" (formula "7"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "simplifyUpdate3" (formula "7") (term "1,0"))
   (rule "applyOnElementary" (formula "7") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "7") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "3,0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "2,0,1,0"))
   (rule "applyOnPV" (formula "7") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "7") (term "1,0,1,0"))
   (rule "dropEffectlessStores" (formula "7") (term "0,1,0"))
   (rule "methodCallEmpty" (formula "7") (term "1"))
   (rule "methodCallEmpty" (formula "7") (term "1"))
   (rule "methodCallEmpty" (formula "7") (term "1"))
   (rule "methodCallEmpty" (formula "7") (term "1"))
   (rule "blockEmpty" (formula "7") (term "1"))
   (rule "assignment_write_attribute" (formula "7") (term "1"))
   (branch "Normal Execution (n_1 != null)"
      (rule "simplifyUpdate2" (formula "7"))
      (rule "sequentialToParallel2" (formula "8"))
      (rule "simplifyUpdate2" (formula "8"))
      (rule "simplifyUpdate3" (formula "8") (term "1,0"))
      (rule "applyOnElementary" (formula "8") (term "1,0"))
      (rule "applyOnRigidFormula" (formula "7"))
      (rule "simplifyUpdate1" (formula "7") (term "1"))
      (rule "applyOnPV" (formula "7") (term "0"))
      (rule "applyOnRigidTerm" (formula "7") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "7") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "7") (term "1,0,1,0"))
      (rule "simplifyUpdate1" (formula "7") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "7") (term "3,0,1,0"))
      (rule "applyOnPV" (formula "7") (term "0,0,1,0"))
      (rule "applyOnPV" (formula "7") (term "1,0,1,0"))
      (rule "dropEffectlessStores" (formula "7") (term "0,1,0"))
      (rule "assignment" (formula "7") (term "1"))
      (rule "sequentialToParallel2" (formula "7"))
      (rule "simplifyUpdate2" (formula "7"))
      (rule "simplifyUpdate3" (formula "7") (term "1,0"))
      (rule "applyOnElementary" (formula "7") (term "1,0"))
      (rule "applyOnPV" (formula "7") (term "0,1,0"))
      (rule "methodCallParamThrow" (formula "7") (term "1"))
      (rule "simplifyUpdate2" (formula "7"))
      (rule "tryCatchThrow" (formula "7") (term "1"))
      (rule "ifElseUnfold" (formula "7") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_11"))
      (rule "equality_comparison_simple" (formula "7") (term "1"))
      (rule "sequentialToParallel2" (formula "7"))
      (rule "simplifyUpdate3" (formula "7") (term "1,0"))
      (rule "applyOnElementary" (formula "7") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "7") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "7") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "7") (term "1,0,1,0"))
      (rule "applyOnRigidFormula" (formula "7") (term "0,0,1,0"))
      (rule "applyOnPV" (formula "7") (term "0,0,0,1,0"))
      (rule "simplifyUpdate1" (formula "7") (term "1,0,0,1,0"))
      (rule "replace_known_right" (formula "7") (term "0,0,1,0") (ifseqformula "6"))
      (rule "ifthenelse_false" (formula "7") (term "0,1,0"))
      (rule "ifElseSplit" (formula "7"))
      (branch "if x_11 true"
         (rule "simplifyUpdate2" (formula "8"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "boolean_not_equal_2" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x_11 false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "8"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "5"))
         (rule "applyOnPV" (formula "5") (term "0"))
         (rule "simplifyUpdate1" (formula "5") (term "1"))
         (rule "boolean_not_equal_2" (formula "5"))
         (rule "false_right" (formula "5"))
         (rule "ifElseSplit" (formula "7"))
         (branch "if n instanceof java.lang.Throwable true"
            (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
            (rule "ifthenelse_concrete4" (formula "1") (term "1"))
            (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
            (rule "concrete_or_4" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "5"))
            (rule "applyOnPV" (formula "5") (term "0"))
            (rule "simplifyUpdate1" (formula "5") (term "1"))
            (rule "variableDeclaration" (formula "7") (term "1") (newnames "e"))
            (rule "delete_unnecessary_cast" (formula "7") (term "1"))
            (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
            (rule "boolean_equal" (formula "1") (term "1,1"))
            (rule "concrete_or_3" (formula "1") (term "1"))
            (rule "true_left" (formula "1"))
            (rule "sequentialToParallel2" (formula "7"))
            (rule "simplifyUpdate2" (formula "7"))
            (rule "simplifyUpdate3" (formula "7") (term "1,0"))
            (rule "applyOnElementary" (formula "7") (term "1,0"))
            (rule "applyOnPV" (formula "7") (term "0,1,0"))
            (rule "assignment" (formula "7") (term "1"))
            (rule "simplifyUpdate2" (formula "7"))
            (rule "sequentialToParallel2" (formula "7"))
            (rule "simplifyUpdate2" (formula "7"))
            (rule "simplifyUpdate3" (formula "7") (term "0"))
            (rule "applyOnElementary" (formula "7") (term "0"))
            (rule "applyOnPV" (formula "7") (term "0,0"))
            (rule "emptyModality" (formula "7") (term "1"))
            (rule "applyOnRigidFormula" (formula "7"))
            (rule "applyOnPV" (formula "7") (term "0"))
            (rule "simplifyUpdate1" (formula "7") (term "1"))
             (opengoal " (  java.lang.NullPointerException::exactInstance(n_3)   = TRUE)<<origin(\"<none> (implicit)\",\"[ensures (implicit), assignable (implicit)]\")>>,  (obj = null)<<origin(\"<none> (implicit)\",\"[ensures (implicit), assignable (implicit)]\")>>,  wellFormed(heap)<<origin(\"requires (implicit)\", \"[]\")>>,  measuredByEmpty<<origin(\"requires (implicit)\", \"[]\")>> ==>  (  boolean::select(heap,                     n_3,                     java.lang.Object::<created>)   = TRUE)<<origin(\"<none> (implicit)\",\"[ensures (implicit), assignable (implicit)]\")>>,  (n_3 = null)<<origin(\"<none> (implicit)\",\"[ensures (implicit), assignable (implicit)]\")>>")
         )
         (branch "if n instanceof java.lang.Throwable false"
            (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
            (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
            (rule "concrete_or_4" (formula "1") (term "0,1"))
            (rule "double_not" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "close" (formula "7") (ifseqformula "1"))
         )
      )
   )
   (branch "Null Reference (n_1 = null)"
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "close" (formula "7") (ifseqformula "1"))
   )
)
)
}
