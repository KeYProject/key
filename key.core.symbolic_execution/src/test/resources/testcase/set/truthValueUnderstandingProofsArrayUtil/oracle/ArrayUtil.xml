<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call ArrayUtil.minIndex(_array)&gt;" pathCondition="true" pathConditionChanged="false">
      <branchStatement name="if (_array!=null)" pathCondition="true" pathConditionChanged="false" blockOpened="true">
         <branchCondition name="not(equals(array,null))" pathCondition="not(equals(array,null))" pathConditionChanged="true" branchCondition="not(equals(array,null))" mergedBranchCondition="false" isBranchConditionComputed="true">
            <branchStatement name="if (_array.length==0)" pathCondition="not(equals(array,null))" pathConditionChanged="false" blockOpened="true">
               <branchCondition name="true" pathCondition="not(equals(array,null))" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <branchCondition name="lt(length(array),Z(1(#)))" pathCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),leq(length(array),Z(0(#)))))" pathConditionChanged="true" branchCondition="lt(length(array),Z(1(#)))" mergedBranchCondition="false" isBranchConditionComputed="true">
                     <statement name="return -1;" pathCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),leq(length(array),Z(0(#)))))" pathConditionChanged="false">
                        <methodReturn name="&lt;return of minIndex&gt;" signature="&lt;return of ArrayUtil.minIndex(_array)&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),leq(length(array),Z(0(#)))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),leq(length(array),Z(0(#)))))">
                           <termination name="&lt;end&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),leq(length(array),Z(0(#)))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                           </termination>
                        </methodReturn>
                        <completedBlockEntry path="/0/0" conditionString="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),leq(length(array),Z(0(#)))))"/>
                        <completedBlockEntry path="/0/0/0/0" conditionString="lt(length(array),Z(1(#)))"/>
                     </statement>
                  </branchCondition>
                  <branchCondition name="not(equals(length(array),Z(0(#))))" pathCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),not(equals(length(array),Z(0(#))))))" pathConditionChanged="true" branchCondition="not(equals(length(array),Z(0(#))))" mergedBranchCondition="false" isBranchConditionComputed="true">
                     <branchStatement name="if (_array.length==1)" pathCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),not(equals(length(array),Z(0(#))))))" pathConditionChanged="false" blockOpened="true">
                        <branchCondition name="true" pathCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),not(equals(length(array),Z(0(#))))))" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                           <branchCondition name="equals(length(array),Z(1(#)))" pathCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),equals(length(array),Z(1(#)))))" pathConditionChanged="true" branchCondition="equals(length(array),Z(1(#)))" mergedBranchCondition="false" isBranchConditionComputed="true">
                              <statement name="return _array[0];" pathCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),equals(length(array),Z(1(#)))))" pathConditionChanged="false">
                                 <branchCondition name="true" pathCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),equals(length(array),Z(1(#)))))" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                                    <methodReturn name="&lt;return of minIndex&gt;" signature="&lt;return of ArrayUtil.minIndex(_array)&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),equals(length(array),Z(1(#)))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),equals(length(array),Z(1(#)))))">
                                       <termination name="&lt;end&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),equals(length(array),Z(1(#)))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="false">
                                       </termination>
                                    </methodReturn>
                                    <completedBlockEntry path="/0/0" conditionString="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),equals(length(array),Z(1(#)))))"/>
                                    <completedBlockEntry path="/0/0/0/0" conditionString="imp(geq(length(array),Z(0(#))),equals(length(array),Z(1(#))))"/>
                                    <completedBlockEntry path="/0/0/0/0/0/1/0" conditionString="imp(geq(length(array),Z(0(#))),equals(length(array),Z(1(#))))"/>
                                 </branchCondition>
                              </statement>
                           </branchCondition>
                           <branchCondition name="not(equals(length(array),Z(1(#))))" pathCondition="imp(geq(length(array),Z(0(#))),and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))))" pathConditionChanged="true" branchCondition="not(equals(length(array),Z(1(#))))" mergedBranchCondition="false" isBranchConditionComputed="true">
                              <statement name="int minIndex = 0;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))))" pathConditionChanged="false">
                                 <loopStatement name="for ( int i = 1; i&lt;_array.length; i++ )" pathCondition="imp(geq(length(array),Z(0(#))),and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))))" pathConditionChanged="false" blockOpened="true">
                                    <statement name="int i = 1;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))))" pathConditionChanged="false">
                                       <loopInvariant name="invariant: (  ((i &gt;= 1
 &amp; i &lt;= _array.length)&lt;&lt;SC&gt;&gt;
 &amp; ((minIndex &gt;= 0 &amp; minIndex &lt; i)&lt;&lt;SC&gt;&gt;))&lt;&lt;SC&gt;&gt;
 &amp; \forall int j;
     (   (j &gt;= 0 &amp; j &lt; i)&lt;&lt;SC&gt;&gt; &amp; inInt(j)
      -&gt; _array[minIndex] &lt;= _array[j]))&lt;&lt;SC&gt;&gt;;
variant: javaSubInt(_array.length, i)
mod: {}" pathCondition="imp(geq(length(array),Z(0(#))),and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))))" pathConditionChanged="false" initiallyValid="true">
                                          <branchCondition name="or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(gt(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))),or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(gt(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))))" pathConditionChanged="true" branchCondition="or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(gt(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Body Preserves Invariant">
                                             <branchCondition name="true" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))),or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(gt(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))))" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                                                <loopCondition name="i&lt;_array.length" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))),or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(gt(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))))" pathConditionChanged="false" blockOpened="false">
                                                   <branchCondition name="true" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))),or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(gt(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))))" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                                                      <branchCondition name="true" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))),or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(gt(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))))" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                                                         <branchStatement name="if (_array[i]&lt;_array[minIndex])" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))),or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(gt(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))))" pathConditionChanged="false" blockOpened="true">
                                                            <branchCondition name="gt(length(array),i_0)" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))),or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(gt(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))),gt(length(array),i_0)))" pathConditionChanged="true" branchCondition="gt(length(array),i_0)" mergedBranchCondition="false" isBranchConditionComputed="true">
                                                               <branchCondition name="gt(length(array),minIndex_0)" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))),or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(gt(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))),gt(length(array),i_0)),gt(length(array),minIndex_0)))" pathConditionChanged="true" branchCondition="gt(length(array),minIndex_0)" mergedBranchCondition="false" isBranchConditionComputed="true">
                                                                  <branchCondition name="gt(int::select(heap,array,arr(minIndex_0)),int::select(heap,array,arr(i_0)))" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(and(and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))),or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(gt(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))),gt(length(array),i_0)),gt(length(array),minIndex_0)),gt(int::select(heap,array,arr(minIndex_0)),int::select(heap,array,arr(i_0)))))" pathConditionChanged="true" branchCondition="gt(int::select(heap,array,arr(minIndex_0)),int::select(heap,array,arr(i_0)))" mergedBranchCondition="false" isBranchConditionComputed="true">
                                                                     <statement name="minIndex=1;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(and(and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))),or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(gt(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))),gt(length(array),i_0)),gt(length(array),minIndex_0)),gt(int::select(heap,array,arr(minIndex_0)),int::select(heap,array,arr(i_0)))))" pathConditionChanged="false">
                                                                        <statement name="i++;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(and(and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))),or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(gt(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))),gt(length(array),i_0)),gt(length(array),minIndex_0)),gt(int::select(heap,array,arr(minIndex_0)),int::select(heap,array,arr(i_0)))))" pathConditionChanged="false">
                                                                           <termination name="&lt;loop body end&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(and(and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))),or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(gt(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))),gt(length(array),i_0)),gt(length(array),minIndex_0)),gt(int::select(heap,array,arr(minIndex_0)),int::select(heap,array,arr(i_0)))))" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="false">
                                                                           </termination>
                                                                           <completedBlockEntry path="/0/0/0/0/0/1/0/0/1/0/0/0/0/0/0/0/0/0/0" conditionString="imp(geq(length(array),Z(0(#))),and(and(gt(length(array),i_0),gt(length(array),minIndex_0)),gt(int::select(heap,array,arr(minIndex_0)),int::select(heap,array,arr(i_0)))))"/>
                                                                        </statement>
                                                                     </statement>
                                                                  </branchCondition>
                                                                  <branchCondition name="leq(int::select(heap,array,arr(minIndex_0)),int::select(heap,array,arr(i_0)))" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(and(and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))),or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(gt(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))),gt(length(array),i_0)),gt(length(array),minIndex_0)),leq(int::select(heap,array,arr(minIndex_0)),int::select(heap,array,arr(i_0)))))" pathConditionChanged="true" branchCondition="leq(int::select(heap,array,arr(minIndex_0)),int::select(heap,array,arr(i_0)))" mergedBranchCondition="false" isBranchConditionComputed="true">
                                                                     <statement name="i++;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(and(and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))),or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(gt(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))),gt(length(array),i_0)),gt(length(array),minIndex_0)),leq(int::select(heap,array,arr(minIndex_0)),int::select(heap,array,arr(i_0)))))" pathConditionChanged="false">
                                                                        <termination name="&lt;loop body end&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(and(and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))),or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(gt(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))),gt(length(array),i_0)),gt(length(array),minIndex_0)),leq(int::select(heap,array,arr(minIndex_0)),int::select(heap,array,arr(i_0)))))" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="true">
                                                                        </termination>
                                                                        <completedBlockEntry path="/0/0/0/0/0/1/0/0/1/0/0/0/0/0/0/0/0/0/0" conditionString="imp(geq(length(array),Z(0(#))),and(and(gt(length(array),i_0),gt(length(array),minIndex_0)),leq(int::select(heap,array,arr(minIndex_0)),int::select(heap,array,arr(i_0)))))"/>
                                                                     </statement>
                                                                  </branchCondition>
                                                               </branchCondition>
                                                            </branchCondition>
                                                            <blockCompletionEntry path="/0/0/0/0/0/1/0/0/1/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0"/>
                                                            <blockCompletionEntry path="/0/0/0/0/0/1/0/0/1/0/0/0/0/0/0/0/0/0/0/0/0/1/0"/>
                                                         </branchStatement>
                                                      </branchCondition>
                                                   </branchCondition>
                                                </loopCondition>
                                             </branchCondition>
                                          </branchCondition>
                                          <branchCondition name="or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(leq(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))),or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(leq(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))))" pathConditionChanged="true" branchCondition="or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(leq(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
                                             <branchCondition name="true" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))),or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(leq(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))))" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                                                <statement name="return minIndex;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))),or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(leq(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))))" pathConditionChanged="false">
                                                   <methodReturn name="&lt;return of minIndex&gt;" signature="&lt;return of ArrayUtil.minIndex(_array)&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))),or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(leq(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="imp(geq(length(array),Z(0(#))),and(and(and(or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(leq(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0)))))),not(equals(length(array),Z(1(#))))),not(equals(length(array),Z(0(#))))),not(equals(array,null))))">
                                                      <termination name="&lt;end&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))),or(not(equals(int::select(heap,array,arr(minIndex_0)),arr_0)),and(leq(length(array),i_0),and(and(and(and(geq(i_0,Z(1(#))),geq(minIndex_0,Z(0(#)))),lt(minIndex_0,i_0)),geq(length(array),i_0)),all{j:int}(or(or(leq(j,Z(neglit(1(#)))),geq(j,i_0)),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),array,arr(j)),arr_0))))))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                                                      </termination>
                                                   </methodReturn>
                                                </statement>
                                             </branchCondition>
                                          </branchCondition>
                                       </loopInvariant>
                                       <completedBlockEntry path="/0/0" conditionString="imp(geq(length(array),Z(0(#))),and(and(not(equals(array,null)),not(equals(length(array),Z(0(#))))),not(equals(length(array),Z(1(#))))))"/>
                                       <completedBlockEntry path="/0/0/0/0" conditionString="imp(geq(length(array),Z(0(#))),and(not(equals(length(array),Z(0(#)))),not(equals(length(array),Z(1(#))))))"/>
                                       <completedBlockEntry path="/0/0/0/0/0/1/0" conditionString="not(equals(length(array),Z(1(#))))"/>
                                       <completedBlockEntry path="/0/0/0/0/0/1/0/0/1/0/0" conditionString="true"/>
                                    </statement>
                                    <blockCompletionEntry path="/0/0/0/0/0/1/0/0/1/0/0/0"/>
                                 </loopStatement>
                              </statement>
                           </branchCondition>
                        </branchCondition>
                        <blockCompletionEntry path="/0/0/0/0/0/1/0/0/1/0/0/0"/>
                        <blockCompletionEntry path="/0/0/0/0/0/1/0/0/0/0/0"/>
                     </branchStatement>
                  </branchCondition>
               </branchCondition>
               <blockCompletionEntry path="/0/0/0/0/0/0/0"/>
               <blockCompletionEntry path="/0/0/0/0/0/1/0/0/1/0/0/0"/>
               <blockCompletionEntry path="/0/0/0/0/0/1/0/0/0/0/0"/>
            </branchStatement>
         </branchCondition>
         <branchCondition name="equals(array,null)" pathCondition="equals(array,null)" pathConditionChanged="true" branchCondition="equals(array,null)" mergedBranchCondition="false" isBranchConditionComputed="true">
            <statement name="return -1;" pathCondition="equals(array,null)" pathConditionChanged="false">
               <methodReturn name="&lt;return of minIndex&gt;" signature="&lt;return of ArrayUtil.minIndex(_array)&gt;" pathCondition="equals(array,null)" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="equals(array,null)">
                  <termination name="&lt;end&gt;" pathCondition="equals(array,null)" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                  </termination>
               </methodReturn>
               <completedBlockEntry path="/0/0" conditionString="equals(array,null)"/>
            </statement>
         </branchCondition>
         <blockCompletionEntry path="/0/0/0/0/0/0/0"/>
         <blockCompletionEntry path="/0/0/0/0/0/1/0/0/1/0/0/0"/>
         <blockCompletionEntry path="/0/0/1/0"/>
         <blockCompletionEntry path="/0/0/0/0/0/1/0/0/0/0/0"/>
      </branchStatement>
      <methodReturnEntry path="/0/0/0/0/0/0/0/0"/>
      <methodReturnEntry path="/0/0/0/0/0/1/0/0/0/0/0/0"/>
      <methodReturnEntry path="/0/0/0/0/0/1/0/0/1/0/0/0/0/1/0/0/0"/>
      <methodReturnEntry path="/0/0/1/0/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/0/1/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/0/1/0/0/1/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/0/1/0/0/1/0/0/0/0/0/0/0/0/0/0/0/0/1/0/0"/>
   <terminationEntry path="/0/0/0/0/0/1/0/0/1/0/0/0/0/1/0/0/0/0"/>
   <terminationEntry path="/0/0/1/0/0/0"/>
</start>
