<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call WhileWithMethodCallAsCondition.size(array)&gt;" pathCondition="true" pathConditionChanged="false">
      <statement name="int result = 0;" pathCondition="true" pathConditionChanged="false">
         <callStackEntry path="/0"/>
         <statement name="int i = 0;" pathCondition="true" pathConditionChanged="false">
            <callStackEntry path="/0"/>
            <loopInvariant name="invariant: ((i &gt;= 0 &amp; i &lt;= array.length)&lt;&lt;SC&gt;&gt; &amp; result = i)&lt;&lt;SC&gt;&gt;;
variant: array.length - i
mod: false" pathCondition="true" pathConditionChanged="false" initiallyValid="true">
               <callStackEntry path="/0"/>
               <branchCondition name="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result)(result_0)),\[{
  method-frame (
    source=size(int[])@WhileWithMethodCallAsCondition
  ) {
    b = goOnNice(array, i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result,i)))))" pathCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result)(result_0)),\[{
  method-frame (
    source=size(int[])@WhileWithMethodCallAsCondition
  ) {
    b = goOnNice(array, i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result,i)))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result)(result_0)),\[{
  method-frame (
    source=size(int[])@WhileWithMethodCallAsCondition
  ) {
    b = goOnNice(array, i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result,i)))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Body Preserves Invariant">
                  <callStackEntry path="/0"/>
                  <loopCondition name="goOnNice(array, i);" pathCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result)(result_0)),\[{
  method-frame (
    source=size(int[])@WhileWithMethodCallAsCondition
  ) {
    b = goOnNice(array, i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result,i)))))" pathConditionChanged="false" blockOpened="false">
                     <callStackEntry path="/0"/>
                     <operationContract name="result_goOnNice_0 = goOnNice(array, i) catch(exc_2)
pre: i &lt; 0 | (!array = null &amp; i &gt;= 0)&lt;&lt;SC&gt;&gt;
post:   (   i &lt; 0
   -&gt;   !(exc_2 = null)&lt;&lt;impl&gt;&gt;
      &amp; java.lang.Exception::instance(exc_2) = TRUE)
&amp; (   (!array = null &amp; i &gt;= 0)&lt;&lt;SC&gt;&gt;
   -&gt;     result_goOnNice_0
        = \if (i &lt; array.length)
              \then (TRUE)
              \else (FALSE)
      &amp; (exc_2 = null)&lt;&lt;impl&gt;&gt;)
mod: allLocs
termination: diamond" pathCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result)(result_0)),\[{
  method-frame (
    source=size(int[])@WhileWithMethodCallAsCondition
  ) {
    b = goOnNice(array, i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result,i)))))" pathConditionChanged="false" resultTerm="result_goOnNice_0" exceptionTerm="exc_2" contractParameters="array, i" preconditionComplied="true" hasNotNullCheck="false" notNullCheckComplied="false">
                        <callStackEntry path="/0"/>
                        <statement name="result++;" pathCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result)(result_0)),\[{
  method-frame (
    source=size(int[])@WhileWithMethodCallAsCondition
  ) {
    b = goOnNice(array, i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result,i)))))" pathConditionChanged="false">
                           <callStackEntry path="/0"/>
                           <statement name="i++;" pathCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result)(result_0)),\[{
  method-frame (
    source=size(int[])@WhileWithMethodCallAsCondition
  ) {
    b = goOnNice(array, i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result,i)))))" pathConditionChanged="false">
                              <callStackEntry path="/0"/>
                              <termination name="&lt;loop body end&gt;" pathCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result)(result_0)),\[{
  method-frame (
    source=size(int[])@WhileWithMethodCallAsCondition
  ) {
    b = goOnNice(array, i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result,i)))))" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="false">
                              </termination>
                           </statement>
                        </statement>
                     </operationContract>
                  </loopCondition>
               </branchCondition>
               <branchCondition name="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result)(result_0)),\&lt;{
  method-frame (
    source=size(int[])@WhileWithMethodCallAsCondition
  ) {
    b = goOnNice(array, i);
  }
}\&gt; (and(not(equals(b,TRUE)),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result,i)))))" pathCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result)(result_0)),\&lt;{
  method-frame (
    source=size(int[])@WhileWithMethodCallAsCondition
  ) {
    b = goOnNice(array, i);
  }
}\&gt; (and(not(equals(b,TRUE)),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result,i)))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result)(result_0)),\&lt;{
  method-frame (
    source=size(int[])@WhileWithMethodCallAsCondition
  ) {
    b = goOnNice(array, i);
  }
}\&gt; (and(not(equals(b,TRUE)),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result,i)))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
                  <callStackEntry path="/0"/>
                  <statement name="return result;" pathCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result)(result_0)),\&lt;{
  method-frame (
    source=size(int[])@WhileWithMethodCallAsCondition
  ) {
    b = goOnNice(array, i);
  }
}\&gt; (and(not(equals(b,TRUE)),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result,i)))))" pathConditionChanged="false">
                     <callStackEntry path="/0"/>
                     <methodReturn name="&lt;return of size&gt;" signature="&lt;return of WhileWithMethodCallAsCondition.size(array)&gt;" pathCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result)(result_0)),\&lt;{
  method-frame (
    source=size(int[])@WhileWithMethodCallAsCondition
  ) {
    b = goOnNice(array, i);
  }
}\&gt; (and(not(equals(b,TRUE)),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result,i)))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result)(result_0)),\&lt;{
  method-frame (
    source=size(int[])@WhileWithMethodCallAsCondition
  ) {
    b = goOnNice(array, i);
  }
}\&gt; (and(not(equals(b,TRUE)),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result,i)))))">
                        <callStackEntry path="/0"/>
                        <termination name="&lt;end&gt;" pathCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result)(result_0)),\&lt;{
  method-frame (
    source=size(int[])@WhileWithMethodCallAsCondition
  ) {
    b = goOnNice(array, i);
  }
}\&gt; (and(not(equals(b,TRUE)),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result,i)))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                        </termination>
                     </methodReturn>
                  </statement>
               </branchCondition>
            </loopInvariant>
         </statement>
      </statement>
      <methodReturnEntry path="/0/0/0/0/1/0/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/1/0/0/0"/>
</start>
