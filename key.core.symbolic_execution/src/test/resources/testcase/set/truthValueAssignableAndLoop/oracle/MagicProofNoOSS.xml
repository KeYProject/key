<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call self.magic()&gt;" pathCondition="true" pathConditionChanged="false">
      <branchStatement name="if (this.x&lt;0)" pathCondition="true" pathConditionChanged="false" blockOpened="true">
         <branchCondition name="lt(int::select(heap,self,ExampleInstance::$x),Z(0(#)))" pathCondition="lt(int::select(heap,self,ExampleInstance::$x),Z(0(#)))" pathConditionChanged="true" branchCondition="lt(int::select(heap,self,ExampleInstance::$x),Z(0(#)))" mergedBranchCondition="false" isBranchConditionComputed="true">
            <statement name="throw new RuntimeException (&quot;x &lt; 0&quot;);" pathCondition="lt(int::select(heap,self,ExampleInstance::$x),Z(0(#)))" pathConditionChanged="false">
               <branchCondition name="true" pathCondition="lt(int::select(heap,self,ExampleInstance::$x),Z(0(#)))" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <exceptionalMethodReturn name="&lt;throw java.lang.RuntimeException&gt;" signature="&lt;exceptional return of &lt;call self.magic()&gt;&gt;" pathCondition="lt(int::select(heap,self,ExampleInstance::$x),Z(0(#)))" pathConditionChanged="false" methodReturnCondition="lt(int::select(heap,self,ExampleInstance::$x),Z(0(#)))">
                     <branchCondition name="true" pathCondition="lt(int::select(heap,self,ExampleInstance::$x),Z(0(#)))" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                        <branchCondition name="true" pathCondition="lt(int::select(heap,self,ExampleInstance::$x),Z(0(#)))" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                           <branchCondition name="true" pathCondition="lt(int::select(heap,self,ExampleInstance::$x),Z(0(#)))" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                              <termination name="&lt;uncaught java.lang.RuntimeException&gt;" pathCondition="lt(int::select(heap,self,ExampleInstance::$x),Z(0(#)))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="false">
                              </termination>
                              <completedBlockEntry path="/0/0" conditionString="lt(int::select(heap,self,ExampleInstance::$x),Z(0(#)))"/>
                           </branchCondition>
                        </branchCondition>
                     </branchCondition>
                  </exceptionalMethodReturn>
               </branchCondition>
            </statement>
         </branchCondition>
         <branchCondition name="gt(int::select(heap,self,ExampleInstance::$x),Z(neglit(1(#))))" pathCondition="gt(int::select(heap,self,ExampleInstance::$x),Z(neglit(1(#))))" pathConditionChanged="true" branchCondition="gt(int::select(heap,self,ExampleInstance::$x),Z(neglit(1(#))))" mergedBranchCondition="false" isBranchConditionComputed="true">
            <loopInvariant name="invariant: self.x &gt;= 0;
variant: self.x
mod: {(self, ExampleInstance::$x)}" pathCondition="gt(int::select(heap,self,ExampleInstance::$x),Z(neglit(1(#))))" pathConditionChanged="false" initiallyValid="true">
               <branchCondition name="or(gt(ExampleInstance_x_0,Z(0(#))),not(equals(int::select(anon_heap_LOOP,self,ExampleInstance::$x),ExampleInstance_x_0)))" pathCondition="imp(equals(int::select(anon_heap_LOOP,self,ExampleInstance::$x),ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;),and(geq(int::select(heap,self,ExampleInstance::$x),Z(0(#))),or(geq(ExampleInstance_x_0,Z(1(#))),not(equals(add(ExampleInstance_x_0,mul(ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))))))" pathConditionChanged="true" branchCondition="or(gt(ExampleInstance_x_0,Z(0(#))),not(equals(int::select(anon_heap_LOOP,self,ExampleInstance::$x),ExampleInstance_x_0)))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Body Preserves Invariant">
                  <loopCondition name="this.x&gt;0" pathCondition="imp(equals(int::select(anon_heap_LOOP,self,ExampleInstance::$x),ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;),and(geq(int::select(heap,self,ExampleInstance::$x),Z(0(#))),or(geq(ExampleInstance_x_0,Z(1(#))),not(equals(add(ExampleInstance_x_0,mul(ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))))))" pathConditionChanged="false" blockOpened="false">
                     <branchCondition name="true" pathCondition="imp(equals(int::select(anon_heap_LOOP,self,ExampleInstance::$x),ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;),and(geq(int::select(heap,self,ExampleInstance::$x),Z(0(#))),or(geq(ExampleInstance_x_0,Z(1(#))),not(equals(add(ExampleInstance_x_0,mul(ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))))))" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                        <statement name="this.x=decrease(this.x);" pathCondition="imp(equals(int::select(anon_heap_LOOP,self,ExampleInstance::$x),ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;),and(geq(int::select(heap,self,ExampleInstance::$x),Z(0(#))),or(geq(ExampleInstance_x_0,Z(1(#))),not(equals(add(ExampleInstance_x_0,mul(ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))))))" pathConditionChanged="false">
                           <operationContract name="result_0 = decrease(var) catch(exc_0)
pre: true
post: result_0 = javaSubInt(var, 2) &amp; exc_0 = null
mod: {}
termination: diamond" pathCondition="imp(equals(int::select(anon_heap_LOOP,self,ExampleInstance::$x),ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;),and(geq(int::select(heap,self,ExampleInstance::$x),Z(0(#))),or(geq(ExampleInstance_x_0,Z(1(#))),not(equals(add(ExampleInstance_x_0,mul(ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))))))" pathConditionChanged="false" resultTerm="result_0" exceptionTerm="exc_0" contractParameters="var" preconditionComplied="true" hasNotNullCheck="false" notNullCheckComplied="false">
                              <branchCondition name="equals(exc_0,null)" pathCondition="imp(equals(int::select(anon_heap_LOOP,self,ExampleInstance::$x),ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;),and(imp(equals(add(ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;,mul(ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#))),and(geq(int::select(heap,self,ExampleInstance::$x),Z(0(#))),or(geq(ExampleInstance_x_0,Z(1(#))),not(equals(add(ExampleInstance_x_0,mul(ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#))))))),equals(exc_0,null)))" pathConditionChanged="true" branchCondition="equals(exc_0,null)" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Post (decrease)">
                                 <termination name="&lt;loop body end&gt;" pathCondition="imp(equals(int::select(anon_heap_LOOP,self,ExampleInstance::$x),ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;),and(imp(equals(add(ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;,mul(ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#))),and(geq(int::select(heap,self,ExampleInstance::$x),Z(0(#))),or(geq(ExampleInstance_x_0,Z(1(#))),not(equals(add(ExampleInstance_x_0,mul(ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#))))))),equals(exc_0,null)))" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="false">
                                 </termination>
                              </branchCondition>
                           </operationContract>
                        </statement>
                     </branchCondition>
                  </loopCondition>
               </branchCondition>
               <branchCondition name="or(not(equals(int::select(anon_heap_LOOP,self,ExampleInstance::$x),ExampleInstance_x_0)),equals(ExampleInstance_x_0,Z(0(#))))" pathCondition="imp(equals(int::select(anon_heap_LOOP,self,ExampleInstance::$x),ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;),and(geq(int::select(heap,self,ExampleInstance::$x),Z(0(#))),or(equals(ExampleInstance_x_0,Z(0(#))),not(equals(add(ExampleInstance_x_0,mul(ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))))))" pathConditionChanged="true" branchCondition="or(not(equals(int::select(anon_heap_LOOP,self,ExampleInstance::$x),ExampleInstance_x_0)),equals(ExampleInstance_x_0,Z(0(#))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
                  <statement name="return this.x;" pathCondition="imp(equals(int::select(anon_heap_LOOP,self,ExampleInstance::$x),ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;),and(geq(int::select(heap,self,ExampleInstance::$x),Z(0(#))),or(equals(ExampleInstance_x_0,Z(0(#))),not(equals(add(ExampleInstance_x_0,mul(ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))))))" pathConditionChanged="false">
                     <methodReturn name="&lt;return of magic&gt;" signature="&lt;return of self.magic()&gt;" pathCondition="imp(equals(int::select(anon_heap_LOOP,self,ExampleInstance::$x),ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;),and(geq(int::select(heap,self,ExampleInstance::$x),Z(0(#))),or(equals(ExampleInstance_x_0,Z(0(#))),not(equals(add(ExampleInstance_x_0,mul(ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="imp(equals(int::select(anon_heap_LOOP,self,ExampleInstance::$x),ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;),and(geq(int::select(heap,self,ExampleInstance::$x),Z(0(#))),or(equals(ExampleInstance_x_0,Z(0(#))),not(equals(add(ExampleInstance_x_0,mul(ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))))))">
                        <termination name="&lt;end&gt;" pathCondition="imp(equals(int::select(anon_heap_LOOP,self,ExampleInstance::$x),ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;),and(geq(int::select(heap,self,ExampleInstance::$x),Z(0(#))),or(equals(ExampleInstance_x_0,Z(0(#))),not(equals(add(ExampleInstance_x_0,mul(ExampleInstance_x_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="false">
                        </termination>
                     </methodReturn>
                  </statement>
               </branchCondition>
            </loopInvariant>
            <completedBlockEntry path="/0/0" conditionString="true"/>
         </branchCondition>
         <blockCompletionEntry path="/0/0/0/0/0/0/0/0/0"/>
         <blockCompletionEntry path="/0/0/1"/>
      </branchStatement>
      <methodReturnEntry path="/0/0/0/0/0/0"/>
      <methodReturnEntry path="/0/0/1/0/1/0/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/1/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/1/0/1/0/0/0"/>
</start>
