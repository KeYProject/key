<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call UseOperationContractAllBranchesOpenTest.main(x,obj)&gt;" pathCondition="true" pathConditionChanged="false">
      <statement name="int magicNumber = obj.magic(x);" pathCondition="true" pathConditionChanged="false">
         <operationContract name="result_0 = obj.magic(x) catch(exc_0)
pre: (x &lt; -10 &amp; obj.&lt;inv&gt;&lt;&lt;impl&gt;&gt;)&lt;&lt;SC&gt;&gt;
| (x &gt;= 10
&amp; obj.&lt;inv&gt;&lt;&lt;impl&gt;&gt;)&lt;&lt;SC&gt;&gt;
post: (   (x &lt; -10 &amp; obj.&lt;inv&gt;@heapBefore_magic&lt;&lt;impl&gt;&gt;)&lt;&lt;SC&gt;&gt;
   -&gt;   !(exc_0 = null)&lt;&lt;impl&gt;&gt;
      &amp; (  ((     java.lang.Throwable::instance(exc_0)
                = TRUE
             -&gt; obj.&lt;inv&gt;)&lt;&lt;impl&gt;&gt;)
         &amp; java.lang.Exception::instance(exc_0) = TRUE))
&amp; (   (x &gt;= 10 &amp; obj.&lt;inv&gt;@heapBefore_magic&lt;&lt;impl&gt;&gt;)&lt;&lt;SC&gt;&gt;
   -&gt;   (result_0 = 42
      &amp; obj.&lt;inv&gt;&lt;&lt;impl&gt;&gt;)&lt;&lt;SC&gt;&gt;
      &amp; (exc_0 = null)&lt;&lt;impl&gt;&gt;)
mod: allLocs
termination: diamond" pathCondition="true" pathConditionChanged="false" resultTerm="result_0" exceptionTerm="exc_0" selfTerm="obj" contractParameters="x" preconditionComplied="false" hasNotNullCheck="true" notNullCheckComplied="false">
            <branchCondition name="and(and(and(equals(exc_0,null),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),geq(x,Z(0(1(#)))))" pathCondition="and(and(and(equals(exc_0,null),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),geq(x,Z(0(1(#)))))" pathConditionChanged="true" branchCondition="and(and(and(equals(exc_0,null),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),geq(x,Z(0(1(#)))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Post (magic)">
               <statement name="int magicNumberCopy = magicNumber;" pathCondition="and(and(and(equals(exc_0,null),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),geq(x,Z(0(1(#)))))" pathConditionChanged="false">
                  <statement name="return magicNumber+magicNumberCopy;" pathCondition="and(and(and(equals(exc_0,null),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),geq(x,Z(0(1(#)))))" pathConditionChanged="false">
                     <methodReturn name="&lt;return of main&gt;" signature="&lt;return of UseOperationContractAllBranchesOpenTest.main(x,obj)&gt;" pathCondition="and(and(and(equals(exc_0,null),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),geq(x,Z(0(1(#)))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="and(and(and(equals(exc_0,null),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),geq(x,Z(0(1(#)))))">
                        <termination name="&lt;end&gt;" pathCondition="and(and(and(equals(exc_0,null),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),geq(x,Z(0(1(#)))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                        </termination>
                     </methodReturn>
                  </statement>
               </statement>
            </branchCondition>
            <branchCondition name="and(and(and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),leq(x,Z(neglit(1(1(#))))))" pathCondition="and(and(and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),leq(x,Z(neglit(1(1(#))))))" pathConditionChanged="true" branchCondition="and(and(and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),leq(x,Z(neglit(1(1(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Exceptional Post (magic)">
               <branchCondition name="equals(java.lang.Exception::instance(exc_0),TRUE)" pathCondition="and(and(and(and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),equals(java.lang.Exception::instance(exc_0),TRUE)),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),leq(x,Z(neglit(1(1(#))))))" pathConditionChanged="true" branchCondition="equals(java.lang.Exception::instance(exc_0),TRUE)" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <statement name="return -1;" pathCondition="and(and(and(and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),equals(java.lang.Exception::instance(exc_0),TRUE)),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),leq(x,Z(neglit(1(1(#))))))" pathConditionChanged="false">
                     <methodReturn name="&lt;return of main&gt;" signature="&lt;return of UseOperationContractAllBranchesOpenTest.main(x,obj)&gt;" pathCondition="and(and(and(and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),equals(java.lang.Exception::instance(exc_0),TRUE)),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),leq(x,Z(neglit(1(1(#))))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="and(and(and(and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),equals(java.lang.Exception::instance(exc_0),TRUE)),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),leq(x,Z(neglit(1(1(#))))))">
                        <termination name="&lt;end&gt;" pathCondition="and(and(and(and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),equals(java.lang.Exception::instance(exc_0),TRUE)),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),leq(x,Z(neglit(1(1(#))))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                        </termination>
                     </methodReturn>
                  </statement>
               </branchCondition>
               <branchCondition name="not(equals(java.lang.Exception::instance(exc_0),TRUE))" pathCondition="and(and(and(and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),not(equals(java.lang.Exception::instance(exc_0),TRUE))),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),leq(x,Z(neglit(1(1(#))))))" pathConditionChanged="true" branchCondition="not(equals(java.lang.Exception::instance(exc_0),TRUE))" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <exceptionalMethodReturn name="&lt;throw java.lang.Throwable&gt;" signature="&lt;exceptional return of &lt;call UseOperationContractAllBranchesOpenTest.main(x,obj)&gt;&gt;" pathCondition="and(and(and(and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),not(equals(java.lang.Exception::instance(exc_0),TRUE))),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),leq(x,Z(neglit(1(1(#))))))" pathConditionChanged="false" methodReturnCondition="and(and(and(and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),not(equals(java.lang.Exception::instance(exc_0),TRUE))),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),leq(x,Z(neglit(1(1(#))))))">
                     <termination name="&lt;uncaught java.lang.Throwable&gt;" pathCondition="and(and(and(and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),not(equals(java.lang.Exception::instance(exc_0),TRUE))),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),leq(x,Z(neglit(1(1(#))))))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                     </termination>
                  </exceptionalMethodReturn>
               </branchCondition>
            </branchCondition>
         </operationContract>
      </statement>
      <methodReturnEntry path="/0/0/0/0/0/0/0"/>
      <methodReturnEntry path="/0/0/0/1/0/0/0"/>
      <methodReturnEntry path="/0/0/0/1/1/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/1/0/0/0/0"/>
   <terminationEntry path="/0/0/0/1/1/0/0"/>
</start>
