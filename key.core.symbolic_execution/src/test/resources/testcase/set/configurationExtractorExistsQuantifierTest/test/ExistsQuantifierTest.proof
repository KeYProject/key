\profile "Java Profile for Symbolic Execution";

\settings {
"#Proof-Settings-Config-File
#Fri Mar 18 11:12:58 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_INSTANTIATE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=methodExpansion-methodExpansion:noRestriction,assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=Symbolic Execution Strategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Fri Mar 18 11:12:58 CET 2016
name=ExistsQuantifierTest[ExistsQuantifierTest\\:\\:compute()].JML normal_behavior operation contract.0
addSymbolicExecutionLabel=true
contract=ExistsQuantifierTest[ExistsQuantifierTest\\:\\:compute()].JML normal_behavior operation contract.0
addUninterpretedPredicate=true
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "marti" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "133844838")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "self,exc,heapAtPre,SETAccumulate,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "Class_invariant_axiom_for_ExistsQuantifierTest" (formula "5") (inst "p=p") (inst "sk=sk_0") (ifseqformula "3"))
(branch "Use Axiom"
   (rule "exLeft" (formula "5") (inst "sk=p_0"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "notLeft" (formula "6"))
   (rule "eqSymm" (formula "6") (term "0"))
   (rule "eqSymm" (formula "6") (term "1"))
   (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "7"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "assignment" (formula "9"))
   (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_compute,savedHeapBefore_compute"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "methodCallEmpty" (formula "9") (term "1"))
   (rule "tryEmpty" (formula "9") (term "1"))
   (rule "emptyModality" (formula "9") (term "1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "Class_invariant_axiom_for_ExistsQuantifierTest" (formula "9") (term "0") (inst "p=p") (inst "sk=sk_1") (ifseqformula "3"))
   (branch "Use Axiom"
      (rule "nnf_imp2or" (formula "9") (term "1,0,0"))
      (rule "cut_direct" (formula "6") (term "1"))
      (branch "CUT: self = p_0 TRUE"
         (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "applyEq" (formula "9") (term "1,1,0,0,1,0,0") (ifseqformula "6"))
         (rule "applyEq" (formula "8") (term "0") (ifseqformula "6"))
         (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "6"))
         (rule "applyEq" (formula "7") (term "1,1,1,0,0") (ifseqformula "5"))
         (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "5"))
         (rule "cut_direct" (formula "7") (term "1"))
         (branch "CUT: SETAccumulate(heap, null) TRUE"
            (builtin "One Step Simplification" (formula "8"))
            (rule "nnf_ex2all" (formula "8"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "1,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0"))
            (rule "commute_or" (formula "1") (term "0,0"))
            (rule "commute_and" (formula "1") (term "1,0"))
            (rule "cnf_rightDist" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "commute_or" (formula "1") (term "0,0"))
            (rule "cnf_rightDist" (formula "1") (term "0"))
            (rule "distr_forallAnd" (formula "1"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "castDel" (formula "1") (term "1,0,0,1,0"))
            (rule "castDel" (formula "1") (term "0,0,0"))
            (rule "andLeft" (formula "1"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "9"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
            (rule "closeFalse" (formula "1"))
         )
         (branch "CUT: SETAccumulate(heap, null) FALSE"
            (builtin "One Step Simplification" (formula "8"))
            (rule "false_right" (formula "8"))
            (opengoal " ")
         )
      )
      (branch "CUT: self = p_0 FALSE"
         (builtin "One Step Simplification" (formula "6"))
         (rule "notLeft" (formula "6"))
         (rule "cut_direct" (formula "10") (term "1"))
         (branch "CUT: SETAccumulate(heap, null) TRUE"
            (builtin "One Step Simplification" (formula "11"))
            (rule "nnf_ex2all" (formula "11"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "1,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0"))
            (rule "commute_or" (formula "1") (term "0,0"))
            (rule "commute_and" (formula "1") (term "1,0"))
            (rule "cnf_rightDist" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "commute_or" (formula "1") (term "0,0"))
            (rule "cnf_rightDist" (formula "1") (term "0"))
            (rule "distr_forallAnd" (formula "1"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "castDel" (formula "1") (term "0,0,0"))
            (rule "castDel" (formula "1") (term "1,0,0,1,0"))
            (rule "andLeft" (formula "1"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "12"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
            (rule "closeFalse" (formula "1"))
         )
         (branch "CUT: SETAccumulate(heap, null) FALSE"
            (builtin "One Step Simplification" (formula "11"))
            (rule "false_right" (formula "11"))
            (opengoal " ")
         )
      )
   )
   (branch "Show Axiom Satisfiability"
      (builtin "One Step Simplification" (formula "9"))
      (rule "closeTrue" (formula "9"))
   )
)
(branch "Show Axiom Satisfiability"
   (builtin "One Step Simplification" (formula "6"))
   (rule "closeTrue" (formula "6"))
)
)

}
