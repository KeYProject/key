\profile "Java Profile for Symbolic Execution";

\settings {
"#Proof-Settings-Config-File
#Wed Mar 23 14:12:50 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_INSTANTIATE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=methodExpansion-methodExpansion:noRestriction,assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=Symbolic Execution Strategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Wed Mar 23 14:12:50 CET 2016
name=ImmutableList[ImmutableList\\:\\:down2()].JML normal_behavior operation contract.0
addSymbolicExecutionLabel=true
contract=ImmutableList[ImmutableList\\:\\:down2()].JML normal_behavior operation contract.0
addUninterpretedPredicate=true
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "marti" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "1" (keyUser "marti" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "2" (keyUser "marti" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "3" (keyUser "marti" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "644")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "self,result,exc,heapAtPre,SETAccumulate,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "0,0,0,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "Class_invariant_axiom_for_ImmutableList" (formula "5") (inst "sk=sk_0") (ifseqformula "3"))
(branch "Use Axiom"
   (rule "true_left" (formula "5"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "0") (ifseqformula "1"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "0") (ifseqformula "2"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "8"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "assignment" (formula "10") (term "1"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_down2,savedHeapBefore_down2"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "current"))
   (rule "assignment_read_attribute_this" (formula "10") (term "1"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "for_to_while" (formula "10") (term "1") (inst "#innerLabel=_label0") (inst "#outerLabel=_label1"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "i"))
   (rule "assignment" (formula "10") (term "1"))
   (builtin "One Step Simplification" (formula "10"))
   (builtin "Loop Invariant" (formula "10") (newnames "variant,b,heapBefore_LOOP,iBefore_LOOP,currentBefore_LOOP,i_0,current_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
   (branch "Invariant Initially Valid"
      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "3")) (ifInst ""  (formula "9")))
      (rule "leq_literals" (formula "10") (term "1,0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "qeq_literals" (formula "10") (term "0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "notRight" (formula "10"))
      (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "8") (term "1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "7") (term "0") (ifseqformula "1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0") (ifseqformula "2"))
      (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "2"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "7"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
      (opengoal " ")
   )
   (branch "Body Preserves Invariant"
      (builtin "One Step Simplification" (formula "12"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "impRight" (formula "12"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "notLeft" (formula "11"))
      (rule "andLeft" (formula "9"))
      (rule "notLeft" (formula "11"))
      (rule "eqSymm" (formula "17") (term "0,1,0,0,0,1,1,0,1"))
      (rule "eqSymm" (formula "17") (term "1,0,0,1,0,0,1,1,0,1"))
      (rule "eqSymm" (formula "13"))
      (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "12"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "boxToDiamond" (formula "1") (term "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "variableDeclarationAssign" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_2"))
      (rule "less_than_comparison_simple" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,1,0"))
      (rule "methodCallEmpty" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "emptyModality" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "notRight" (formula "11"))
      (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "1"))
      (rule "leq_literals" (formula "10") (term "0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "1"))
      (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "9"))
      (rule "qeq_literals" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "9"))
      (rule "leq_literals" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "applyEq" (formula "15") (term "0,1,1,1,0") (ifseqformula "8"))
      (rule "applyEq" (formula "15") (term "0,0,0,0,1,1,0") (ifseqformula "8"))
      (rule "variableDeclarationAssign" (formula "15") (term "1"))
      (rule "variableDeclaration" (formula "15") (term "1") (newnames "exc_1"))
      (rule "assignment" (formula "15") (term "1"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "variableDeclaration" (formula "15") (term "1") (newnames "thrownExc"))
      (rule "ifUnfold" (formula "15") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "15") (term "1") (newnames "x"))
      (rule "less_than_comparison_simple" (formula "15") (term "1"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "less_literals" (formula "15") (term "0,0,1,0"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "ifSplit" (formula "15"))
      (branch "if x true"
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "assignment_read_attribute" (formula "15") (term "1"))
         (branch "Normal Execution (current != null)"
            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "10")))
            (rule "false_right" (formula "15"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "pullOutSelect" (formula "15") (term "0,1,0") (inst "selectSK=ImmutableList_next_0"))
            (rule "simplifySelectOfAnon" (formula "1"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
            (rule "ifthenelse_negated" (formula "1") (term "0"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "2,0") (ifseqformula "8"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "2") (term "1,0") (ifseqformula "5"))
            (rule "blockEmpty" (formula "18") (term "1"))
            (rule "postincrement" (formula "18") (term "1"))
            (rule "compound_int_cast_expression" (formula "18") (term "1") (inst "#v=x"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_1"))
            (rule "remove_parentheses_right" (formula "18") (term "1"))
            (rule "assignmentAdditionInt" (formula "18") (term "1"))
            (rule "translateJavaAddInt" (formula "18") (term "0,0,1"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "add_literals" (formula "18") (term "0,1,0"))
            (rule "widening_identity_cast_5" (formula "18") (term "1"))
            (rule "assignment" (formula "18") (term "1"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "tryEmpty" (formula "18") (term "1"))
            (rule "methodCallEmpty" (formula "18") (term "1"))
            (rule "emptyModality" (formula "18") (term "1") (userinteraction))
            (builtin "One Step Simplification" (formula "18") (newnames "ResultPredicate,ResultPredicate"))
            (opengoal " ")
         )
         (branch "Null Reference (current = null)"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "if x false"
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Use Case"
      (builtin "One Step Simplification" (formula "8"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "notLeft" (formula "10"))
      (rule "notLeft" (formula "9"))
      (rule "andLeft" (formula "8"))
      (rule "eqSymm" (formula "12"))
      (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "11"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "b_1"))
      (rule "less_than_comparison_simple" (formula "16") (term "1"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1,0"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0,0,1,0"))
      (rule "add_literals" (formula "16") (term "0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,1,0"))
      (rule "mul_literals" (formula "16") (term "1,0,0,1,0"))
      (rule "methodCallEmpty" (formula "16") (term "1"))
      (rule "emptyModality" (formula "16") (term "1"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "impRight" (formula "16"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_leqRight" (formula "11"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "1"))
      (rule "leq_literals" (formula "9") (term "0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "9"))
      (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
      (rule "qeq_literals" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "1"))
      (rule "leq_literals" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "blockEmpty" (formula "15") (term "1"))
      (rule "methodCallReturn" (formula "15") (term "1"))
      (rule "assignment" (formula "15") (term "1"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "methodCallEmpty" (formula "15") (term "1"))
      (rule "tryEmpty" (formula "15") (term "1"))
      (rule "emptyModality" (formula "15") (term "1"))
      (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "11")) (ifInst ""  (formula "10")))
      (rule "eqSymm" (formula "15") (term "1,0,0,1"))
      (rule "Class_invariant_axiom_for_ImmutableList" (formula "15") (term "0,0") (inst "sk=sk_1") (ifseqformula "6"))
      (branch "Use Axiom"
         (builtin "One Step Simplification" (formula "15"))
         (rule "cut_direct" (formula "9") (term "0"))
         (branch "CUT: current_0.<created> = TRUE TRUE"
            (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "cut_direct" (formula "15") (term "0"))
            (branch "CUT: SETAccumulate(heap[anon({}, anon_heap_LOOP<<anonHeapFunction>>)], null)<<F(\"9.0\", \"10.0\")>> TRUE"
               (builtin "One Step Simplification" (formula "16"))
               (rule "allRight" (formula "16") (inst "sk=f_1"))
               (rule "allRight" (formula "16") (inst "sk=o_1"))
               (rule "orRight" (formula "16"))
               (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=f_1_0"))
               (rule "simplifySelectOfAnon" (formula "1"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
               (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "closeTrue" (formula "18"))
            )
            (branch "CUT: SETAccumulate(heap[anon({}, anon_heap_LOOP<<anonHeapFunction>>)], null)<<F(\"9.0\", \"10.0\")>> FALSE"
               (builtin "One Step Simplification" (formula "16"))
               (rule "false_right" (formula "16"))
               (opengoal " ")
            )
         )
         (branch "CUT: current_0.<created> = TRUE FALSE"
            (builtin "One Step Simplification" (formula "9"))
            (rule "cut_direct" (formula "16") (term "0"))
            (branch "CUT: SETAccumulate(heap[anon({}, anon_heap_LOOP<<anonHeapFunction>>)], null)<<F(\"9.0\", \"10.0\")>> TRUE"
               (builtin "One Step Simplification" (formula "17"))
               (rule "allRight" (formula "17") (inst "sk=f_0"))
               (rule "allRight" (formula "17") (inst "sk=o_0"))
               (rule "orRight" (formula "17"))
               (rule "pullOutSelect" (formula "18") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfAnon" (formula "1"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
               (rule "applyEqReverse" (formula "19") (term "0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "19"))
               (rule "closeTrue" (formula "19"))
            )
            (branch "CUT: SETAccumulate(heap[anon({}, anon_heap_LOOP<<anonHeapFunction>>)], null)<<F(\"9.0\", \"10.0\")>> FALSE"
               (builtin "One Step Simplification" (formula "17"))
               (rule "false_right" (formula "17"))
               (opengoal " ")
            )
         )
      )
      (branch "Show Axiom Satisfiability"
         (builtin "One Step Simplification" (formula "15"))
         (rule "closeTrue" (formula "15"))
      )
   )
)
(branch "Show Axiom Satisfiability"
   (builtin "One Step Simplification" (formula "6"))
   (rule "closeTrue" (formula "6"))
)
)

}
