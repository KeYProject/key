<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <variable name="heapAtPre" isArrayIndex="false">
      <value name="heapAtPre {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
      </value>
   </variable>
   <methodCall name="&lt;call self.magic(m)&gt;" pathCondition="true" pathConditionChanged="false">
      <constraint name="wellFormed(heap)"/>
      <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
      <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
      <constraint name="not(equals(self,null))"/>
      <variable name="exc" isArrayIndex="false">
         <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
         </value>
      </variable>
      <branchStatement name="if (m &gt; 10)" pathCondition="true" pathConditionChanged="false" blockOpened="true">
         <constraint name="wellFormed(heap)"/>
         <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
         <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
         <constraint name="not(equals(self,null))"/>
         <variable name="self" isArrayIndex="false">
            <value name="self {true}" typeString="MethodContract" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
               <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
               <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
               <constraint name="not(equals(self,null))"/>
               <variable name="h1" isArrayIndex="false">
                  <value name="h1 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h1)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="h2" isArrayIndex="false">
                  <value name="h2 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h2)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="l" isArrayIndex="false">
                  <value name="l {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$l)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
            </value>
         </variable>
         <variable name="m" isArrayIndex="false">
            <value name="m {true}" typeString="int" valueString="m" isValueAnObject="false" isValueUnknown="false" conditionString="true">
            </value>
         </variable>
         <variable name="exc" isArrayIndex="false">
            <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
            </value>
         </variable>
         <branchCondition name="gt(m,Z(0(1(#))))" pathCondition="gt(m,Z(0(1(#))))" pathConditionChanged="true" branchCondition="gt(m,Z(0(1(#))))" mergedBranchCondition="false" isBranchConditionComputed="true">
            <constraint name="update-application(parallel-upd(elem-update(exc)(null),elem-update(x)(if-then-else(gt(m,Z(0(1(#)))),TRUE,FALSE))),equals(x,TRUE))"/>
            <constraint name="wellFormed(heap)"/>
            <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
            <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
            <constraint name="not(equals(self,null))"/>
            <variable name="self" isArrayIndex="false">
               <value name="self {true}" typeString="MethodContract" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                  <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                  <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
                  <constraint name="not(equals(self,null))"/>
                  <variable name="h1" isArrayIndex="false">
                     <value name="h1 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h1)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="h2" isArrayIndex="false">
                     <value name="h2 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h2)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="l" isArrayIndex="false">
                     <value name="l {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$l)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
               </value>
            </variable>
            <variable name="m" isArrayIndex="false">
               <value name="m {true}" typeString="int" valueString="m" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  <constraint name="update-application(parallel-upd(elem-update(exc)(null),elem-update(x)(if-then-else(gt(m,Z(0(1(#)))),TRUE,FALSE))),equals(x,TRUE))"/>
               </value>
            </variable>
            <variable name="exc" isArrayIndex="false">
               <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <variable name="x" isArrayIndex="false">
               <value name="x {true}" typeString="boolean" valueString="TRUE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <statement name="this.l = mod(this.h1, this.h2);" pathCondition="gt(m,Z(0(1(#))))" pathConditionChanged="false">
               <constraint name="geq(m,Z(1(1(#))))"/>
               <constraint name="wellFormed(heap)"/>
               <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
               <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
               <constraint name="not(equals(self,null))"/>
               <variable name="self" isArrayIndex="false">
                  <value name="self {true}" typeString="MethodContract" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                     <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
                     <constraint name="not(equals(self,null))"/>
                     <variable name="h1" isArrayIndex="false">
                        <value name="h1 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h1)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="h2" isArrayIndex="false">
                        <value name="h2 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h2)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="l" isArrayIndex="false">
                        <value name="l {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$l)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                  </value>
               </variable>
               <variable name="m" isArrayIndex="false">
                  <value name="m {true}" typeString="int" valueString="m" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     <constraint name="geq(m,Z(1(1(#))))"/>
                  </value>
               </variable>
               <variable name="exc" isArrayIndex="false">
                  <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <operationContract name="result_mod = self.mod(var, var_1) catch(exc_0)
pre: ((var &gt;= 0 &amp; var_1 &gt;  0)&lt;&lt;SC&gt;&gt; &amp; self.&lt;inv&gt;&lt;&lt;impl&gt;&gt;)&lt;&lt;SC&gt;&gt;
post:   (\exists int k;
     ((inInt(k) &amp; var_1 * k + result_mod = var)&lt;&lt;SC&gt;&gt;)
&amp; self.&lt;inv&gt;&lt;&lt;impl&gt;&gt;)&lt;&lt;SC&gt;&gt;
&amp; (exc_0 = null)&lt;&lt;impl&gt;&gt;
mod: allLocs
termination: diamond" pathCondition="gt(m,Z(0(1(#))))" pathConditionChanged="false" resultTerm="result_mod" exceptionTerm="exc_0" selfTerm="self" contractParameters="var, var_1" preconditionComplied="false" hasNotNullCheck="false" notNullCheckComplied="false">
                  <constraint name="geq(m,Z(1(1(#))))"/>
                  <constraint name="wellFormed(heap)"/>
                  <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                  <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
                  <constraint name="not(equals(self,null))"/>
                  <variable name="self" isArrayIndex="false">
                     <value name="self {true}" typeString="MethodContract" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                        <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
                        <constraint name="not(equals(self,null))"/>
                        <variable name="h1" isArrayIndex="false">
                           <value name="h1 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h1)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="h2" isArrayIndex="false">
                           <value name="h2 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h2)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="l" isArrayIndex="false">
                           <value name="l {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$l)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="m" isArrayIndex="false">
                     <value name="m {true}" typeString="int" valueString="m" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        <constraint name="geq(m,Z(1(1(#))))"/>
                     </value>
                  </variable>
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="m_1" isArrayIndex="false">
                     <value name="m_1 {true}" typeString="MethodContract" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                        <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
                        <constraint name="not(equals(self,null))"/>
                        <variable name="h1" isArrayIndex="false">
                           <value name="h1 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h1)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="h2" isArrayIndex="false">
                           <value name="h2 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h2)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="l" isArrayIndex="false">
                           <value name="l {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$l)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="var" isArrayIndex="false">
                     <value name="var {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h1)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="var_1" isArrayIndex="false">
                     <value name="var_1 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h2)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <branchCondition name="equals(exc_0,null)" pathCondition="and(equals(exc_0,null),geq(m,Z(1(1(#)))))" pathConditionChanged="true" branchCondition="equals(exc_0,null)" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Post (mod)">
                     <constraint name="geq(m,Z(1(1(#))))"/>
                     <constraint name="wellFormed(heap)"/>
                     <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                     <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
                     <constraint name="wellFormed(anon_heap_mod&lt;&lt;anonHeapFunction&gt;&gt;)"/>
                     <constraint name="update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(m_1)(self)),elem-update(var)(int::select(heap,self,MethodContract::$h1))),elem-update(var_1)(int::select(heap,self,MethodContract::$h2))),update-application(elem-update(heapBefore_mod)(heap),and(equals(anon(heap,allLocs,anon_heap_mod&lt;&lt;anonHeapFunction&gt;&gt;),heapAfter_mod),update-application(elem-update(heap)(heapAfter_mod),and(and(equals(exc_0,null),inInt(result_mod)),and(and(exists{k:int}(and(inInt(k),equals(add(mul(var_1,k),result_mod),var))&lt;&lt;SC&gt;&gt;),java.lang.Object::&lt;inv&gt;(heap,self)&lt;&lt;impl&gt;&gt;)&lt;&lt;SC&gt;&gt;,equals(exc_0,null)&lt;&lt;impl&gt;&gt;))))))"/>
                     <constraint name="not(equals(self,null))"/>
                     <variable name="self" isArrayIndex="false">
                        <value name="self {true}" typeString="MethodContract" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                           <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
                           <constraint name="update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(m_1)(self)),elem-update(var)(int::select(heap,self,MethodContract::$h1))),elem-update(var_1)(int::select(heap,self,MethodContract::$h2))),update-application(elem-update(heapBefore_mod)(heap),and(equals(anon(heap,allLocs,anon_heap_mod&lt;&lt;anonHeapFunction&gt;&gt;),heapAfter_mod),update-application(elem-update(heap)(heapAfter_mod),and(and(equals(exc_0,null),inInt(result_mod)),and(and(exists{k:int}(and(inInt(k),equals(add(mul(var_1,k),result_mod),var))&lt;&lt;SC&gt;&gt;),java.lang.Object::&lt;inv&gt;(heap,self)&lt;&lt;impl&gt;&gt;)&lt;&lt;SC&gt;&gt;,equals(exc_0,null)&lt;&lt;impl&gt;&gt;))))))"/>
                           <constraint name="not(equals(self,null))"/>
                           <variable name="h1" isArrayIndex="false">
                              <value name="h1 {true}" typeString="int" valueString="int::select(anon_heap_mod&lt;&lt;anonHeapFunction&gt;&gt;,self,MethodContract::$h1)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="h2" isArrayIndex="false">
                              <value name="h2 {true}" typeString="int" valueString="int::select(anon_heap_mod&lt;&lt;anonHeapFunction&gt;&gt;,self,MethodContract::$h2)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="l" isArrayIndex="false">
                              <value name="l {true}" typeString="int" valueString="int::select(anon_heap_mod&lt;&lt;anonHeapFunction&gt;&gt;,self,MethodContract::$l)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="m" isArrayIndex="false">
                        <value name="m {true}" typeString="int" valueString="m" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           <constraint name="geq(m,Z(1(1(#))))"/>
                        </value>
                     </variable>
                     <variable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="m_1" isArrayIndex="false">
                        <value name="m_1 {true}" typeString="MethodContract" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                           <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
                           <constraint name="update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(m_1)(self)),elem-update(var)(int::select(heap,self,MethodContract::$h1))),elem-update(var_1)(int::select(heap,self,MethodContract::$h2))),update-application(elem-update(heapBefore_mod)(heap),and(equals(anon(heap,allLocs,anon_heap_mod&lt;&lt;anonHeapFunction&gt;&gt;),heapAfter_mod),update-application(elem-update(heap)(heapAfter_mod),and(and(equals(exc_0,null),inInt(result_mod)),and(and(exists{k:int}(and(inInt(k),equals(add(mul(var_1,k),result_mod),var))&lt;&lt;SC&gt;&gt;),java.lang.Object::&lt;inv&gt;(heap,self)&lt;&lt;impl&gt;&gt;)&lt;&lt;SC&gt;&gt;,equals(exc_0,null)&lt;&lt;impl&gt;&gt;))))))"/>
                           <constraint name="not(equals(self,null))"/>
                           <variable name="h1" isArrayIndex="false">
                              <value name="h1 {true}" typeString="int" valueString="int::select(anon_heap_mod&lt;&lt;anonHeapFunction&gt;&gt;,self,MethodContract::$h1)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="h2" isArrayIndex="false">
                              <value name="h2 {true}" typeString="int" valueString="int::select(anon_heap_mod&lt;&lt;anonHeapFunction&gt;&gt;,self,MethodContract::$h2)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="l" isArrayIndex="false">
                              <value name="l {true}" typeString="int" valueString="int::select(anon_heap_mod&lt;&lt;anonHeapFunction&gt;&gt;,self,MethodContract::$l)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="var" isArrayIndex="false">
                        <value name="var {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h1)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           <constraint name="update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(m_1)(self)),elem-update(var)(int::select(heap,self,MethodContract::$h1))),elem-update(var_1)(int::select(heap,self,MethodContract::$h2))),update-application(elem-update(heapBefore_mod)(heap),and(equals(anon(heap,allLocs,anon_heap_mod&lt;&lt;anonHeapFunction&gt;&gt;),heapAfter_mod),update-application(elem-update(heap)(heapAfter_mod),and(and(equals(exc_0,null),inInt(result_mod)),and(and(exists{k:int}(and(inInt(k),equals(add(mul(var_1,k),result_mod),var))&lt;&lt;SC&gt;&gt;),java.lang.Object::&lt;inv&gt;(heap,self)&lt;&lt;impl&gt;&gt;)&lt;&lt;SC&gt;&gt;,equals(exc_0,null)&lt;&lt;impl&gt;&gt;))))))"/>
                        </value>
                     </variable>
                     <variable name="var_1" isArrayIndex="false">
                        <value name="var_1 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h2)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           <constraint name="update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(m_1)(self)),elem-update(var)(int::select(heap,self,MethodContract::$h1))),elem-update(var_1)(int::select(heap,self,MethodContract::$h2))),update-application(elem-update(heapBefore_mod)(heap),and(equals(anon(heap,allLocs,anon_heap_mod&lt;&lt;anonHeapFunction&gt;&gt;),heapAfter_mod),update-application(elem-update(heap)(heapAfter_mod),and(and(equals(exc_0,null),inInt(result_mod)),and(and(exists{k:int}(and(inInt(k),equals(add(mul(var_1,k),result_mod),var))&lt;&lt;SC&gt;&gt;),java.lang.Object::&lt;inv&gt;(heap,self)&lt;&lt;impl&gt;&gt;)&lt;&lt;SC&gt;&gt;,equals(exc_0,null)&lt;&lt;impl&gt;&gt;))))))"/>
                        </value>
                     </variable>
                     <variable name="heapBefore_mod" isArrayIndex="false">
                        <value name="heapBefore_mod {true}" typeString="Heap" valueString="heapBefore_mod" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="heap" isArrayIndex="false">
                        <value name="heap {true}" typeString="Heap" valueString="heapAfter_mod" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <methodReturn name="&lt;return of magic&gt;" signature="&lt;return of self.magic(m)&gt;" pathCondition="and(equals(exc_0,null),geq(m,Z(1(1(#)))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="and(equals(exc_0,null),geq(m,Z(1(1(#)))))">
                        <constraint name="geq(m,Z(1(1(#))))"/>
                        <constraint name="wellFormed(heap)"/>
                        <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                        <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
                        <constraint name="wellFormed(anon_heap_mod&lt;&lt;anonHeapFunction&gt;&gt;)"/>
                        <constraint name="equals(anon(heap,allLocs,anon_heap_mod&lt;&lt;anonHeapFunction&gt;&gt;),heapAfter_mod)"/>
                        <constraint name="equals(exc_0,null)"/>
                        <constraint name="equals(mul(int::select(heap,self,MethodContract::$h2),k_0),add(mul(result_mod,Z(neglit(1(#)))),int::select(heap,self,MethodContract::$h1)))"/>
                        <constraint name="not(equals(self,null))"/>
                        <variable name="self" isArrayIndex="false">
                           <value name="self {true}" typeString="MethodContract" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                              <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
                              <constraint name="equals(mul(int::select(heap,self,MethodContract::$h2),k_0),add(mul(result_mod,Z(neglit(1(#)))),int::select(heap,self,MethodContract::$h1)))"/>
                              <constraint name="not(equals(self,null))"/>
                              <variable name="h1" isArrayIndex="false">
                                 <value name="h1 {true}" typeString="int" valueString="int::select(anon_heap_mod&lt;&lt;anonHeapFunction&gt;&gt;,self,MethodContract::$h1)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="h2" isArrayIndex="false">
                                 <value name="h2 {true}" typeString="int" valueString="int::select(anon_heap_mod&lt;&lt;anonHeapFunction&gt;&gt;,self,MethodContract::$h2)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="l" isArrayIndex="false">
                                 <value name="l {true}" typeString="int" valueString="result_mod" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    <constraint name="equals(mul(int::select(heap,self,MethodContract::$h2),k_0),add(mul(result_mod,Z(neglit(1(#)))),int::select(heap,self,MethodContract::$h1)))"/>
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="m" isArrayIndex="false">
                           <value name="m {true}" typeString="int" valueString="m" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              <constraint name="geq(m,Z(1(1(#))))"/>
                           </value>
                        </variable>
                        <variable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <termination name="&lt;end&gt;" pathCondition="and(equals(exc_0,null),geq(m,Z(1(1(#)))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                           <constraint name="geq(m,Z(1(1(#))))"/>
                           <constraint name="wellFormed(heap)"/>
                           <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                           <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
                           <constraint name="wellFormed(anon_heap_mod&lt;&lt;anonHeapFunction&gt;&gt;)"/>
                           <constraint name="equals(anon(heap,allLocs,anon_heap_mod&lt;&lt;anonHeapFunction&gt;&gt;),heapAfter_mod)"/>
                           <constraint name="equals(exc_0,null)"/>
                           <constraint name="equals(mul(int::select(heap,self,MethodContract::$h2),k_0),add(mul(result_mod,Z(neglit(1(#)))),int::select(heap,self,MethodContract::$h1)))"/>
                           <constraint name="not(equals(self,null))"/>
                           <variable name="exc" isArrayIndex="false">
                              <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                        </termination>
                        <callStateVariable name="self" isArrayIndex="false">
                           <value name="self {true}" typeString="MethodContract" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                              <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
                              <constraint name="equals(mul(int::select(heap,self,MethodContract::$h2),k_0),add(mul(result_mod,Z(neglit(1(#)))),int::select(heap,self,MethodContract::$h1)))"/>
                              <constraint name="not(equals(self,null))"/>
                              <variable name="h1" isArrayIndex="false">
                                 <value name="h1 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h1)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    <constraint name="equals(mul(int::select(heap,self,MethodContract::$h2),k_0),add(mul(result_mod,Z(neglit(1(#)))),int::select(heap,self,MethodContract::$h1)))"/>
                                 </value>
                              </variable>
                              <variable name="h2" isArrayIndex="false">
                                 <value name="h2 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h2)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    <constraint name="equals(mul(int::select(heap,self,MethodContract::$h2),k_0),add(mul(result_mod,Z(neglit(1(#)))),int::select(heap,self,MethodContract::$h1)))"/>
                                 </value>
                              </variable>
                              <variable name="l" isArrayIndex="false">
                                 <value name="l {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$l)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                        </callStateVariable>
                        <callStateVariable name="m" isArrayIndex="false">
                           <value name="m {true}" typeString="int" valueString="m" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              <constraint name="geq(m,Z(1(1(#))))"/>
                           </value>
                        </callStateVariable>
                        <callStateVariable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </callStateVariable>
                        <callStateVariable name="heapBefore_magic" isArrayIndex="false">
                           <value name="heapBefore_magic {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              <constraint name="wellFormed(heap)"/>
                              <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                              <constraint name="equals(anon(heap,allLocs,anon_heap_mod&lt;&lt;anonHeapFunction&gt;&gt;),heapAfter_mod)"/>
                              <constraint name="equals(mul(int::select(heap,self,MethodContract::$h2),k_0),add(mul(result_mod,Z(neglit(1(#)))),int::select(heap,self,MethodContract::$h1)))"/>
                           </value>
                        </callStateVariable>
                        <callStateVariable name="savedHeapBefore_magic" isArrayIndex="false">
                           <value name="savedHeapBefore_magic {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </callStateVariable>
                     </methodReturn>
                  </branchCondition>
               </operationContract>
               <completedBlockEntry path="/0/0" conditionString="gt(m,Z(0(1(#))))"/>
            </statement>
         </branchCondition>
         <branchCondition name="lt(m,Z(1(1(#))))" pathCondition="lt(m,Z(1(1(#))))" pathConditionChanged="true" branchCondition="lt(m,Z(1(1(#))))" mergedBranchCondition="false" isBranchConditionComputed="true">
            <constraint name="update-application(parallel-upd(elem-update(exc)(null),elem-update(x)(if-then-else(gt(m,Z(0(1(#)))),TRUE,FALSE))),equals(x,FALSE))"/>
            <constraint name="wellFormed(heap)"/>
            <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
            <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
            <constraint name="not(equals(self,null))"/>
            <variable name="self" isArrayIndex="false">
               <value name="self {true}" typeString="MethodContract" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                  <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                  <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
                  <constraint name="not(equals(self,null))"/>
                  <variable name="h1" isArrayIndex="false">
                     <value name="h1 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h1)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="h2" isArrayIndex="false">
                     <value name="h2 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h2)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="l" isArrayIndex="false">
                     <value name="l {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$l)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
               </value>
            </variable>
            <variable name="m" isArrayIndex="false">
               <value name="m {true}" typeString="int" valueString="m" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  <constraint name="update-application(parallel-upd(elem-update(exc)(null),elem-update(x)(if-then-else(gt(m,Z(0(1(#)))),TRUE,FALSE))),equals(x,FALSE))"/>
               </value>
            </variable>
            <variable name="exc" isArrayIndex="false">
               <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <variable name="x" isArrayIndex="false">
               <value name="x {true}" typeString="boolean" valueString="FALSE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <statement name="this.l = 6;" pathCondition="lt(m,Z(1(1(#))))" pathConditionChanged="false">
               <constraint name="leq(m,Z(0(1(#))))"/>
               <constraint name="wellFormed(heap)"/>
               <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
               <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
               <constraint name="not(equals(self,null))"/>
               <variable name="self" isArrayIndex="false">
                  <value name="self {true}" typeString="MethodContract" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                     <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
                     <constraint name="not(equals(self,null))"/>
                     <variable name="h1" isArrayIndex="false">
                        <value name="h1 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h1)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="h2" isArrayIndex="false">
                        <value name="h2 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h2)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="l" isArrayIndex="false">
                        <value name="l {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$l)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                  </value>
               </variable>
               <variable name="m" isArrayIndex="false">
                  <value name="m {true}" typeString="int" valueString="m" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     <constraint name="leq(m,Z(0(1(#))))"/>
                  </value>
               </variable>
               <variable name="exc" isArrayIndex="false">
                  <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <methodReturn name="&lt;return of magic&gt;" signature="&lt;return of self.magic(m)&gt;" pathCondition="lt(m,Z(1(1(#))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="lt(m,Z(1(1(#))))">
                  <constraint name="leq(m,Z(0(1(#))))"/>
                  <constraint name="wellFormed(heap)"/>
                  <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                  <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
                  <constraint name="not(equals(self,null))"/>
                  <variable name="self" isArrayIndex="false">
                     <value name="self {true}" typeString="MethodContract" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                        <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
                        <constraint name="not(equals(self,null))"/>
                        <variable name="h1" isArrayIndex="false">
                           <value name="h1 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h1)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="h2" isArrayIndex="false">
                           <value name="h2 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h2)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="l" isArrayIndex="false">
                           <value name="l {true}" typeString="int" valueString="Z(6(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="m" isArrayIndex="false">
                     <value name="m {true}" typeString="int" valueString="m" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        <constraint name="leq(m,Z(0(1(#))))"/>
                     </value>
                  </variable>
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <termination name="&lt;end&gt;" pathCondition="lt(m,Z(1(1(#))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                     <constraint name="leq(m,Z(0(1(#))))"/>
                     <constraint name="wellFormed(heap)"/>
                     <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                     <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
                     <constraint name="not(equals(self,null))"/>
                     <variable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                  </termination>
                  <callStateVariable name="self" isArrayIndex="false">
                     <value name="self {true}" typeString="MethodContract" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                        <constraint name="equals(MethodContract::exactInstance(self),TRUE)"/>
                        <constraint name="not(equals(self,null))"/>
                        <variable name="h1" isArrayIndex="false">
                           <value name="h1 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h1)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="h2" isArrayIndex="false">
                           <value name="h2 {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$h2)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="l" isArrayIndex="false">
                           <value name="l {true}" typeString="int" valueString="int::select(heap,self,MethodContract::$l)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                     </value>
                  </callStateVariable>
                  <callStateVariable name="m" isArrayIndex="false">
                     <value name="m {true}" typeString="int" valueString="m" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        <constraint name="leq(m,Z(0(1(#))))"/>
                     </value>
                  </callStateVariable>
                  <callStateVariable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </callStateVariable>
                  <callStateVariable name="heapBefore_magic" isArrayIndex="false">
                     <value name="heapBefore_magic {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        <constraint name="wellFormed(heap)"/>
                        <constraint name="equals(boolean::select(heap,self,java.lang.Object::&lt;created&gt;),TRUE)"/>
                     </value>
                  </callStateVariable>
                  <callStateVariable name="savedHeapBefore_magic" isArrayIndex="false">
                     <value name="savedHeapBefore_magic {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </callStateVariable>
               </methodReturn>
               <completedBlockEntry path="/0/0" conditionString="lt(m,Z(1(1(#))))"/>
            </statement>
         </branchCondition>
         <blockCompletionEntry path="/0/0/0/0"/>
         <blockCompletionEntry path="/0/0/1/0"/>
      </branchStatement>
      <methodReturnEntry path="/0/0/0/0/0/0/0"/>
      <methodReturnEntry path="/0/0/1/0/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/1/0/0/0"/>
</start>
