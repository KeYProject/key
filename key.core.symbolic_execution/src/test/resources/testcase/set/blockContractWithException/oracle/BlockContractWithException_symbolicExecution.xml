<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call BlockContractWithException.main(x)&gt;" pathCondition="true" pathConditionChanged="false">
      <statement name="return magic(x);" pathCondition="true" pathConditionChanged="false">
         <methodCall name="&lt;call BlockContractWithException.magic(x_3)&gt;" pathCondition="true" pathConditionChanged="false">
            <blockContract name="magic()) catch(exc_0)
pre measuredByEmpty &amp; x_3 = 2
post   !exc_0 = null
&amp; (   !exc_0 = null
   -&gt;   java.lang.NullPointerException::instance(exc_0)
      = TRUE)
mod {}termination diamond" pathCondition="true" pathConditionChanged="false" preconditionComplied="false">
               <branchCondition name="true" pathCondition="true" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Validity">
                  <branchStatement name="if (x_3 == 2)" pathCondition="true" pathConditionChanged="false" blockOpened="true">
                     <statement name="throw new NullPointerException();" pathCondition="true" pathConditionChanged="false">
                        <termination name="&lt;block contract uncaught java.lang.NullPointerException&gt;" pathCondition="true" pathConditionChanged="false" terminationKind="BLOCK_CONTRACT_EXCEPTIONAL" branchVerified="true">
                        </termination>
                        <completedBlockEntry path="/0/0/0/0/0/0" conditionString="true"/>
                     </statement>
                     <blockCompletionEntry path="/0/0/0/0/0/0/0"/>
                  </branchStatement>
               </branchCondition>
               <branchCondition name="update-application(parallel-upd(elem-update(exc)(null),elem-update(x_3)(x)),update-application(elem-update(heap_Before_BLOCK)(heap),update-application(elem-update(heap)(anon(heap,empty,anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;)),and(and(and(and(not(equals(exc_0,null)),imp(not(equals(exc_0,null)),equals(java.lang.NullPointerException::instance(exc_0),TRUE))),wellFormed(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;)),and(inInt(result_magic),or(equals(exc_0,null),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))&lt;&lt;SC&gt;&gt;)),or(equals(exc_0,null),not(equals(exc_0,null)))))))" pathCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(x_3)(x)),update-application(elem-update(heap_Before_BLOCK)(heap),update-application(elem-update(heap)(anon(heap,empty,anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;)),and(and(and(and(not(equals(exc_0,null)),imp(not(equals(exc_0,null)),equals(java.lang.NullPointerException::instance(exc_0),TRUE))),wellFormed(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;)),and(inInt(result_magic),or(equals(exc_0,null),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))&lt;&lt;SC&gt;&gt;)),or(equals(exc_0,null),not(equals(exc_0,null)))))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(x_3)(x)),update-application(elem-update(heap_Before_BLOCK)(heap),update-application(elem-update(heap)(anon(heap,empty,anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;)),and(and(and(and(not(equals(exc_0,null)),imp(not(equals(exc_0,null)),equals(java.lang.NullPointerException::instance(exc_0),TRUE))),wellFormed(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;)),and(inInt(result_magic),or(equals(exc_0,null),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))&lt;&lt;SC&gt;&gt;)),or(equals(exc_0,null),not(equals(exc_0,null)))))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Usage">
                  <exceptionalMethodReturn name="&lt;throw java.lang.Throwable&gt;" signature="&lt;exceptional return of &lt;call BlockContractWithException.magic(x_3)&gt;&gt;" pathCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(x_3)(x)),update-application(elem-update(heap_Before_BLOCK)(heap),update-application(elem-update(heap)(anon(heap,empty,anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;)),and(and(and(and(not(equals(exc_0,null)),imp(not(equals(exc_0,null)),equals(java.lang.NullPointerException::instance(exc_0),TRUE))),wellFormed(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;)),and(inInt(result_magic),or(equals(exc_0,null),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))&lt;&lt;SC&gt;&gt;)),or(equals(exc_0,null),not(equals(exc_0,null)))))))" pathConditionChanged="false" methodReturnCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(x_3)(x)),update-application(elem-update(heap_Before_BLOCK)(heap),update-application(elem-update(heap)(anon(heap,empty,anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;)),and(and(and(and(not(equals(exc_0,null)),imp(not(equals(exc_0,null)),equals(java.lang.NullPointerException::instance(exc_0),TRUE))),wellFormed(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;)),and(inInt(result_magic),or(equals(exc_0,null),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))&lt;&lt;SC&gt;&gt;)),or(equals(exc_0,null),not(equals(exc_0,null)))))))">
                     <exceptionalMethodReturn name="&lt;throw java.lang.Throwable&gt;" signature="&lt;exceptional return of &lt;call BlockContractWithException.main(x)&gt;&gt;" pathCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(x_3)(x)),update-application(elem-update(heap_Before_BLOCK)(heap),update-application(elem-update(heap)(anon(heap,empty,anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;)),and(and(and(and(not(equals(exc_0,null)),imp(not(equals(exc_0,null)),equals(java.lang.NullPointerException::instance(exc_0),TRUE))),wellFormed(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;)),and(inInt(result_magic),or(equals(exc_0,null),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))&lt;&lt;SC&gt;&gt;)),or(equals(exc_0,null),not(equals(exc_0,null)))))))" pathConditionChanged="false" methodReturnCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(x_3)(x)),update-application(elem-update(heap_Before_BLOCK)(heap),update-application(elem-update(heap)(anon(heap,empty,anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;)),and(and(and(and(not(equals(exc_0,null)),imp(not(equals(exc_0,null)),equals(java.lang.NullPointerException::instance(exc_0),TRUE))),wellFormed(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;)),and(inInt(result_magic),or(equals(exc_0,null),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))&lt;&lt;SC&gt;&gt;)),or(equals(exc_0,null),not(equals(exc_0,null)))))))">
                        <termination name="&lt;uncaught java.lang.Throwable&gt;" pathCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(x_3)(x)),update-application(elem-update(heap_Before_BLOCK)(heap),update-application(elem-update(heap)(anon(heap,empty,anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;)),and(and(and(and(not(equals(exc_0,null)),imp(not(equals(exc_0,null)),equals(java.lang.NullPointerException::instance(exc_0),TRUE))),wellFormed(anonOut_heap&lt;&lt;anonHeapFunction&gt;&gt;)),and(inInt(result_magic),or(equals(exc_0,null),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))&lt;&lt;SC&gt;&gt;)),or(equals(exc_0,null),not(equals(exc_0,null)))))))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                        </termination>
                     </exceptionalMethodReturn>
                  </exceptionalMethodReturn>
               </branchCondition>
            </blockContract>
            <methodReturnEntry path="/0/0/0/0/1/0"/>
         </methodCall>
      </statement>
      <methodReturnEntry path="/0/0/0/0/1/0/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/1/0/0/0"/>
</start>
