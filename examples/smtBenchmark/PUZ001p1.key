// This file is part of KeY - Integrated Deductive Software Design 
// Copyright (C) 2001 Universitaet Karlsruhe, Germany
//                    and Chalmers University of Technology, Sweden          
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
//

// File     : PUZ001+1 : TPTP v2.5.0. Released v2.0.0.
// Domain   : Puzzles
// Problem  : Dreadbury Mansion
// Version  : Especial.
//            Theorem formulation : Reduced > Complete.
// English  : Someone who lives in Dreadbury Mansion killed Aunt Agatha. 
//            Agatha, the butler, and Charles live in Dreadbury Mansion, 
//            and are the only people who live therein. A killer always 
//            hates his victim, and is never richer than his victim. 
//            Charles hates no one that Aunt Agatha hates. Agatha hates 
//            everyone except the butler. The butler hates everyone not 
//            richer than Aunt Agatha. The butler hates everyone Aunt 
//            Agatha hates. No one hates everyone. Agatha is not the 
//            butler. Therefore : Agatha killed herself.

\sorts {
  S;
}

\functions {
  S agatha;
  S butler;
  S charles;
}

\predicates {
  lives(S);
  hates(S, S);
  killed(S, S);
  richer(S, S);
  equal(S, S);
}


\problem {
(

    \forall S x1; equal(x1,x1)

&

    \forall S x2; 
    \forall S x3; 
      (equal(x2,x3) ->  
          equal(x3,x2))

&

    \forall S x4; 
    \forall S x5; 
    \forall S x6; 
      ((equal(x4,x5) &  
          equal(x5,x6)) ->  
          equal(x4,x6))

&

    \forall S x7; 
    \forall S x8; 
    \forall S x9; 
      ((equal(x7,x8) &  
          hates(x7,x9)) ->  
          hates(x8,x9))

&

    \forall S x0; 
    \forall S y1; 
    \forall S y2; 
      ((equal(x0,y1) &  
          hates(y2,x0)) ->  
          hates(y2,y1))

&

    \forall S y3; 
    \forall S y4; 
    \forall S y5; 
      ((equal(y3,y4) &  
          killed(y3,y5)) ->  
          killed(y4,y5))

&

    \forall S y6; 
    \forall S y7; 
    \forall S y8; 
      ((equal(y6,y7) &  
          killed(y8,y6)) ->  
          killed(y8,y7))

&

    \forall S y9; 
    \forall S y0; 
      ((equal(y9,y0) &  
          lives(y9)) ->  
          lives(y0))

&

    \forall S z1; 
    \forall S z2; 
    \forall S z3; 
      ((equal(z1,z2) &  
          richer(z1,z3)) ->  
          richer(z2,z3))

&

    \forall S z4; 
    \forall S z5; 
    \forall S z6; 
      ((equal(z4,z5) &  
          richer(z6,z4)) ->  
          richer(z6,z5))

&

    \exists S z7; 
      (lives(z7) &  
          killed(z7,agatha))

&

    lives(agatha)

&

    lives(butler)

&

    lives(charles)

&

    \forall S z8; 
      (lives(z8) ->  
          (equal(z8,agatha) |
              (equal(z8,butler) |
                  equal(z8,charles))))

&

    \forall S z9; 
    \forall S z0; 
      (killed(z9,z0) ->  
          hates(z9,z0))

&

    \forall S w1; 
    \forall S w2; 
      (killed(w1,w2) ->  
          !richer(w1,w2))

&

    \forall S w3; 
      (hates(agatha,w3) ->  
          !hates(charles,w3))

&

    \forall S w4; 
      (!equal(w4,butler) ->  
          hates(agatha,w4))

&

    \forall S w5; 
      (!richer(w5,agatha) ->  
          hates(butler,w5))

&

    \forall S w6; 
      (hates(agatha,w6) ->  
          hates(butler,w6))

&

    \forall S w7; 
    \exists S w8; !hates(w7,w8)

&

    !equal(agatha,butler)

) ->

    killed(agatha,agatha)

}
