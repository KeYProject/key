// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
// Input file for KeY standalone prover version 0.497
// Russian multiplication

\heuristicsDecl{
  bauer;
}

\sorts{
  int;
  numbers;
}

\schemaVariables{
//  \variables int k,a,nv,l,m,a0,b0,z0;
//  \formula b;
//  \term int i,j,m,n;
//  \program Variable #v, #v0, #v1, #slhs, #slhs0;
//  \program[list] Statement #slist;

  \variables int nv ;
  \formula b ;

}

\functions{
//  int succ(int);
//  int pred(int);
//  int mul(int, int);
}

\rules{
/*
   int_induction_strong {
                  \varcond(\notFreeIn(a, b) )
                  \add ( ==> {\subst k; Z(0(#))}(b) );
                  \add ( ==> \forall k; ((\forall a; ((lt(a, k) & geq(a, Z(0(#))) & lt(Z(0(#)),k)) ->
		    {\subst k; a}(b))) -> {\subst k; k}(b)));
                  \add ( \forall k; (geq(k,Z((0(#)))) -> (b)) ==>) };
*/

   int_induction_mul2 { 
		  \add ( ==> {\subst nv; Z(0(#))}(b) );
                  \add ( ==> \forall nv ; (b->{\subst nv; mul(nv, Z(2(#)))}b) );
                  \add ( ==> \forall nv ; (b->{\subst nv; 1+mul(nv, Z(2(#)))}b) );
                  \add ( \forall nv; (geq(nv,Z((0(#)))) -> b) ==>) };

/*
   mul_zero{
                  \find(mul(Z(0(#)),i))
                  \replacewith(Z(0(#)))
                  \heuristics(bauer)};
   mul2div2{
                  \find(div(mul(i,Z(2(#))), Z(2(#))))
		  \replacewith(i)
		  \heuristics(bauer)};
   mul2plus1div2{ 
   		  \assumes (lt(Z(neglit(1(#))),i) ==>)
                  \find(div(add(mul(i,Z(2(#))),Z(1(#))), Z(2(#))))
		  \replacewith(i)
		  \heuristics(bauer)};


   less_transitive_mul2 { \assumes (lt(Z(neglit(1(#))), j) ==>) 
                  \find(==> lt(Z(neglit(1(#))), mul(j,Z(2(#)))))
                  \closegoal \heuristics(bauer) };

   less_transitive_mul2_2 { \assumes (==>lt(Z(neglit(1(#))), j)) 
                  \find(lt(Z(neglit(1(#))), mul(j,Z(2(#))))==>)
                  \closegoal \heuristics(bauer)
		  \displayname "less_transitive_mul2" };

   less_transitive_mul2_3 {\assumes (==>lt(Z(neglit(1(#))), j)) 
                           \find(lt(Z(neglit(1(#))), add(mul(j,Z(2(#))),1))==>)
                  \closegoal \heuristics(bauer)
		  \displayname "less_transitive_mul2" };

   less_transitive_mul2_4{\find(lt(Z(neglit(1(#))), mul(j,Z(2(#)))) ==>)
   		  \add(lt(Z(neglit(1(#))), j)==>)
		  \heuristics(bauer)
		  \displayname "less_transitive_mul2" };
		  
   less_transitive_mul2_5{\find(lt(Z(neglit(1(#))), add(mul(j,Z(2(#))),Z(1(#)))) ==>)
   		  \add(lt(Z(neglit(1(#))), j)==>)
		  \heuristics(bauer)
		  \displayname "less_transitive_mul2" };

   less_transitive_minus1 { \assumes (lt(Z(neglit(1(#))), mul(j,Z(2(#)))) ==>)
                  \find(==> lt(Z(neglit(1(#))),j)) \closegoal \heuristics(bauer) };

   muleqzero{     \find( mul(i,Z(2(#)))= Z(0(#)))
		  \replacewith( i=Z(0(#)))
		  \heuristics(bauer)};

   unequal_sides{
                  \find(i=add(i,1))
		  \replacewith(false)
		  \heuristics(bauer)
		  \displayname "unequal_sides"
		  };
		  
   unequal_sides_1{
                  \find(add(mul(i,2),1)=0)
		  \replacewith(false)
		  \heuristics(bauer)
		  \displayname "unequal_sides"
		  };
		  
   mul_with_1a{
                  \find(mul(1,i))
		  \replacewith(i)
		  \heuristics(bauer)
		  \displayname "mul_with_1"
		  };
   
   mul_with_1b{
                  \find(mul(i,1))
		  \replacewith(i)
		  \heuristics(bauer)
		  \displayname "mul_with_1"
		  };
   mul_distr{
                  \find(mul(add(i,j),m))
		  \replacewith(add(mul(i,m),mul(j,m)))
		  \heuristics(bauer)
		  };
   lt_transitive1{
                  \assumes (lt(m,i) ==>)
                  \find( lt(i,j) ==>)
                  \add(lt(m,pred(j)) ==>)
		  \heuristics(bauer)};

   pred_to_minus_one{
                  \find( pred(i))
                  \replacewith(sub(i,Z(1(#))))
                  \heuristics(bauer)};

   succ_to_plus_one{
                  \find( succ(i))
		  \replacewith(add(i,Z(1(#))))
                  \heuristics(bauer)};

 elim_double_block1 { \find (\<{{ #slist }}\>b)
                     \replacewith (\<{ #slist }\>b)
		     \heuristics(bauer)
		     \displayname "elim_double_block" };
*/
}



\problem{
\forall int a0; \forall int b0; (gt(a0,Z(neglit(1(#)))) ->
 (\<{int a;int b;int z;}\>{a:=a0}{b:=b0}{z:=0}
 \<{while(a!=0){ if(a/2*2!=a){z=z+b;} a=a/2;b=b*2;}}\>z=mul(a0,b0)))
}

/*

  Hints:
   - switch on Arithmetic treatment "DefOps"

   - switch loop treatment to none

   - Induction hypothesis that I used (over a0):

a0 >= 0 ->
(
 \forall int b0; 
 \forall int z0;
 ({a:=a0 ||
   b:=b0 ||
   z_1:=z0}
   \<{
      while ( a!=0 ) {
        if (a/2*2!=a) {
          z_1=z_1+b;
        }
        a=a/2;
        b=b*2;
      }
     }\> z_1 = a0 * b0 + z0))


   - for Case 1-3 apply one loopUnwind for each branch's succedent

   - automatic quantifier instantiation seems to fail on this one

(works with KeY 1.2.121-beta (MU))
(works with KeY-1.3.631-beta=RC1.4) (MU))

*/
