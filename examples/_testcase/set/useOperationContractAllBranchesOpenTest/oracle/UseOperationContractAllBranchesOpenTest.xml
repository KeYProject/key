<?xml version="1.0" encoding="UTF-8"?>
<startNode name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="UseOperationContractAllBranchesOpenTest.main(x,obj);" pathCondition="true" pathConditionChanged="false">
      <statement name="int magicNumber = obj.magic(x);" pathCondition="true" pathConditionChanged="false">
         <useOperationContract name="result = self.magic(x) catch(exc)
pre: x &lt; javaUnaryMinusInt(10) &amp; self.&lt;inv&gt;
| x &gt;= 10
&amp; self.&lt;inv&gt;
post: (     x &lt; javaUnaryMinusInt(10)
      &amp; java.lang.Object::&lt;inv&gt;(heapAtPre, self)
   -&gt;   !exc = null
      &amp; (  (     java.lang.Exception::instance(exc)
               = TRUE
            -&gt; self.&lt;inv&gt;)
         &amp; java.lang.Exception::instance(exc) = TRUE))
&amp; (     x &gt;= 10
      &amp; java.lang.Object::&lt;inv&gt;(heapAtPre, self)
   -&gt; result = 42 &amp; self.&lt;inv&gt; &amp; exc = null)
mod: allLocs \cup allLocs
termination: diamond" pathCondition="true" pathConditionChanged="false" preconditionComplied="false" hasNotNullCheck="true" notNullCheckComplied="false">
            <branchCondition name="  x &gt;= 10
&amp; java.lang.Object::&lt;inv&gt;(heapBefore_magic, obj)" pathCondition="  x &gt;= 10
&amp; java.lang.Object::&lt;inv&gt;(heapBefore_magic, obj)" pathConditionChanged="true" branchCondition="  x &gt;= 10
&amp; java.lang.Object::&lt;inv&gt;(heapBefore_magic, obj)" mergedBranchCondition="false">
               <statement name="int magicNumberCopy = magicNumber;" pathCondition="  x &gt;= 10
&amp; java.lang.Object::&lt;inv&gt;(heapBefore_magic, obj)" pathConditionChanged="false">
                  <statement name="return magicNumber+magicNumberCopy;" pathCondition="  x &gt;= 10
&amp; java.lang.Object::&lt;inv&gt;(heapBefore_magic, obj)" pathConditionChanged="false">
                     <methodReturn name="&lt;return of UseOperationContractAllBranchesOpenTest.main(x,obj);&gt;" pathCondition="  x &gt;= 10
&amp; java.lang.Object::&lt;inv&gt;(heapBefore_magic, obj)" pathConditionChanged="false" nameIncludingReturnValue="&lt;return &apos;result_0 * 2&apos; as result of UseOperationContractAllBranchesOpenTest.main(x,obj);&gt;">
                        <termination name="&lt;end&gt;" pathCondition="  x &gt;= 10
&amp; java.lang.Object::&lt;inv&gt;(heapBefore_magic, obj)" pathConditionChanged="false" exceptionalTermination="false">
                        </termination>
                     </methodReturn>
                  </statement>
               </statement>
            </branchCondition>
            <branchCondition name="  x &lt; javaUnaryMinusInt(10)
&amp; java.lang.Object::&lt;inv&gt;(heapBefore_magic, obj)" pathCondition="  x &lt;= -11
&amp; java.lang.Object::&lt;inv&gt;(heapBefore_magic, obj)" pathConditionChanged="true" branchCondition="  x &lt; javaUnaryMinusInt(10)
&amp; java.lang.Object::&lt;inv&gt;(heapBefore_magic, obj)" mergedBranchCondition="false">
               <statement name="return -1;" pathCondition="  x &lt;= -11
&amp; java.lang.Object::&lt;inv&gt;(heapBefore_magic, obj)" pathConditionChanged="false">
                  <methodReturn name="&lt;return of UseOperationContractAllBranchesOpenTest.main(x,obj);&gt;" pathCondition="  x &lt;= -11
&amp; java.lang.Object::&lt;inv&gt;(heapBefore_magic, obj)" pathConditionChanged="false" nameIncludingReturnValue="&lt;return &apos;-1&apos; as result of UseOperationContractAllBranchesOpenTest.main(x,obj);&gt;">
                     <termination name="&lt;end&gt;" pathCondition="  x &lt;= -11
&amp; java.lang.Object::&lt;inv&gt;(heapBefore_magic, obj)" pathConditionChanged="false" exceptionalTermination="false">
                     </termination>
                  </methodReturn>
               </statement>
            </branchCondition>
         </useOperationContract>
      </statement>
   </methodCall>
</startNode>
