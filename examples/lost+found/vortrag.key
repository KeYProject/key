// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
\sorts {
	S;
}


\predicates {
	p(S);
}


\schemaVariables {
	\term S sv;
	\variables S a, b;
	\formula phi, post;
	\program Statement #s, #t, #u;
	\program Expression #e0, #e1;
	\program SimpleExpression #se;
	\program Variable #pv;
	\program Label #l;

	\program[list] Statement #slist;
	\program Expression #e;
}


\rules {
	A0 { \find ( \<{ #pv = 1 + 1 + 1; }\> phi ) \sameUpdateLevel
             \replacewith ( \<{ #pv = 3; }\> phi ) };

	A1 { \find ( \<{ if ( !#pv ) #s else #t }\> phi ) \sameUpdateLevel
             \replacewith ( \<{ if ( #pv ) #t else #s }\> phi ) };

	A1b { \find ( \<{ #u if ( !#pv ) #s else #t }\> phi ) \sameUpdateLevel
              \replacewith ( \<{ #u if ( #pv ) #t else #s }\> phi ) };

        A2 { \find ({#pv:=TRUE}\<{ if (#pv) #s else #t }\>phi) \sameUpdateLevel
             \replacewith (\<{ #s }\>phi) };

        A2b { \find ({#pv:=TRUE}\<{.. if (#pv) #s else #t ...}\>phi) \sameUpdateLevel
              \replacewith (\<{.. #s ...}\>phi) };

	A3 { \find ( \forall a; \forall b; phi ==> )
             \replacewith ( \forall b; \forall a; phi ==> ) };

 break_in_block_nolabel { \find(\<{.. { break; } ...}\>post) 
	\replacewith (\<{..  break;  ...}\>post) \heuristics(simplify_prog) };

 break_empty { \find(\<{ break; #slist }\>post) 
	\replacewith (false) \heuristics(simplify_prog) };

  throw_ignore_trail { \find (\<{ throw #e; #slist }\>post)
	\replacewith (false) \heuristics(simplify_prog) };

 throw_single_obsolete_label {
    \find (\<{ #l: throw #se; }\>(post))
    \replacewith(\<{ throw #se; }\>(post))
    \heuristics(simplify_prog)
  };

}


\problem {
	false
}
