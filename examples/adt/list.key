// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
// In this example, the abstract data type list is defined. The ADT has
// the constructors "nil" and "cons".  The proof obligations states that
// a function "rev" really has the intended behaviour, namely to revert a
// list. To succesfully finish the proof several lemmata have to be proven
// as subgoals (currently the lemmata have to be introduced by cuts):

// 1. all l1:List.all l2:List.( rev(app(l1,l2))=app(rev(l2),rev(l1)) )
// 2. all l:List.( app(l,nil)=l  )
// 3. all l1:List.all l2:List.all l3:List.( app(l1,app(l2,l3))=app(app(l1,l2),l3) )

// This example is taken from an introduction to Isabelle/HOL. You can
// find the relevant pages describing the proof in file isabelleTutorial.ps.gz.
// Take a look at it if you get stuck in the proof.


\heuristicsDecl {
	LIST;
}

\sorts {
	List;
	Element;
}

\predicates {

}

\functions{
	// constructors of ADT List
	List nil;
	List cons(List, Element);

	// append to lists
	List app(List, List);
	// revert a list
	List rev(List);
}

\schemaVariables {
    \term List list, list1;
    \term Element e;
    \variables List nv;
    \variables Element el;
    \formula b;
}


\rules {
	// axioms
	concat_base{\find (app(nil, list)) \replacewith (list) \heuristics (LIST)};
	concat_step{\find (app(cons(list1,e), list))
	            \replacewith (cons(app(list1,list),e))
		    \heuristics (LIST)};

	// definition of revert
	revert_base {\find (rev(nil)) \replacewith(nil) };
	revert_step {\find (rev(cons(list,e))) \replacewith (app(rev(list),cons(nil,e)))};

	// we need a rule for structural induction on lists
        // WATCHOUT: Woj: I modified this rule, only schema variables should be allowed here
	structuralInduction_on_lists { 	  
	        \varcond(\notFreeIn(el,b))
		\add ( ==> {\subst nv; nil}(b) );
		\add ( ==> \forall el; \forall nv; (b->{\subst nv; cons(nv,el)}b) );
		\add ( \forall nv; b ==>)};

}

\problem {
	\forall List l; rev(rev(l))=l
}

