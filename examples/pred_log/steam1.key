// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
// Input file for KeY standalone prover version 0.497
//
//  Schubert's Steamroller --- the taclet formalisation
//
//  Try to show that there is an animal which eats an animal which
//  eats a grain!
//
//  1. Activate heuristics `simplify'
//  2. Give nice names to your creatures
//  3. Activate `steam' to derive some useful facts
//  4. Use the animal_VEGGY_or_CARNY on the right animals to 
//     distinguish the cases ``eats every plant'' and
//     ``eats all smaller animals which eat a plant''
//     until you think you have a solution
//  5. Activate ``steam_solutions'' to generate SOLUTION(p,q,r) atoms,
//     meaning that animal p eats animal q which eats grain r.
//  6. Activate ``steam_close'' for the final satisfaction of closing goals
//     with solutions.
//
//  -OR-
//
//  Activate `simplify', `steam', `steam_solutions' and `steam_close',
//  give about 1000 heuristic steps to close automatically.

\heuristicsDecl {
	steam;
	steam_split;
	steam_solutions;
	steam_close;
}

\sorts {
	S;
}

\predicates {
	animal(S);
	grain(S);
	plant(S);
	likestoeat(S,S);
	wolf(S);
	fox(S);
	bird(S);
	caterpillar(S);
	snail(S);
	smallerThan(S,S);

	VEGGY(S);
	CARNY(S);

	SOLUTION(S,S,S);
}

\schemaVariables {
   \term S p,q,r;
   \variables S cfood, sfood;
}

\rules {

// Taxonomy

wolf_is_animal { \find(wolf(p)==>) \add(animal(p)==>) 
	\heuristics (steam) };
fox_is_animal { \find(fox(p)==>) \add(animal(p)==>) 
	\heuristics (steam) };
bird_is_animal { \find(bird(p)==>) \add(animal(p)==>) 
	\heuristics (steam) };
caterpillar_is_animal { \find(caterpillar(p)==>) \add(animal(p)==>) 
	\heuristics (steam) };
snail_is_animal { \find(snail(p)==>) \add(animal(p)==>) 
	\heuristics (steam) };
grain_is_plant { \find(grain(p)==>) \add(plant(p)==>) 
	\heuristics (steam) };

// Sizes

snail_smallerThan_than_bird { 
	\assumes(bird(q)==>) \find(snail(p)==>) 
	\add(smallerThan(p,q)==>) 
	\heuristics (steam) };
caterpillar_smallerThan_than_bird { 
	\assumes(bird(q)==>) \find(caterpillar(p)==>) 
	\add(smallerThan(p,q)==>) 
	\heuristics (steam) };
bird_smallerThan_than_fox { 
	\assumes(fox(q)==>) \find(bird(p)==>)
	\add(smallerThan(p,q)==>) 
	\heuristics (steam) };
fox_smallerThan_than_wolf { 
	\assumes(wolf(q)==>) \find(fox(p)==>)
	\add(smallerThan(p,q)==>) 
	\heuristics (steam) };

// Eating habits

wolf_dont_eat_fox { 
	\assumes(fox(q)==>) \find(wolf(p)==>)
	\add(!likestoeat(p,q)==>) 
	\heuristics (steam) };
wolf_dont_eat_grain { 
	\assumes(grain(q)==>) \find(wolf(p)==>)
	\add(!likestoeat(p,q)==>) 
	\heuristics (steam) };
bird_eat_caterpillar { 
	\assumes(caterpillar(q)==>) \find(bird(p)==>)
	\add(likestoeat(p,q)==>) 
	\heuristics (steam) };
bird_dont_eat_snail { 
	\assumes(snail(q)==>) \find(bird(p)==>)
	\add(!likestoeat(p,q)==>) 
	\heuristics (steam) };

caterpillar_eats_a_plant {
	\find(caterpillar(p)==>)
	\varcond(\notFreeIn(cfood, p))
	\add(\exists cfood; (plant(cfood) & likestoeat(p, cfood))==>)
	\heuristics (steam) };
snail_eats_a_plant {
	\find(snail(p)==>)
	\varcond(\notFreeIn(sfood, p))
	\add(\exists sfood; (plant(sfood) & likestoeat(p, sfood))==>)
	\heuristics (steam) };

// Vegetarians and Carnivores

animal_VEGGY_or_CARNY {
	\find(animal(p)==>)
	"Vegetarian": \add(VEGGY(p)==>);
	"Carnivorous": \add(CARNY(p)==>)
	\heuristics (steam_split) };

VEGGY_eats_plants {
	\assumes(plant(q)==>)	\find(VEGGY(p)==>)
	\add(likestoeat(p,q)==>)
	\heuristics (steam) };

carnie_eats_smallerThan_veggies {
	\assumes(smallerThan(q,p), animal(q), plant(r), likestoeat(q,r)==>) 
	\find(CARNY(p)==>)
	\add(likestoeat(p,q)==>) 
	\heuristics (steam) };

// Solutions

solution {
	\assumes(likestoeat(p,q),likestoeat(q,r),animal(p),animal(q)==>)
	\find(grain(r)==>)
	\add(SOLUTION(p,q,r)==>)
	\heuristics(steam_solutions) };

close_solved {
	\find(SOLUTION(p,q,r)) \closegoal
	\heuristics(steam_close) };

}

\problem {
     \exists S w; wolf(w)
   & \exists S f; fox(f)
   & \exists S b; bird(b)
   & \exists S c; caterpillar(c)
   & \exists S s; snail(s)
   & \exists S g; grain(g)
-> false

}

