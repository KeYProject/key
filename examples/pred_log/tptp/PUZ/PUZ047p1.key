// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//

// File     : PUZ047+1 : TPTP v2.5.0. Released v2.5.0.
// Domain   : Syntactic
// Problem  : Taking the wolf, goat, and cabbage across river
// Version  : Especial.
// English  : 



\sorts {
  S;
  Time;
}

\functions {
	S south;
	S north;
	Time start;
	Time go_alone(Time);
	Time take_wolf(Time);
	Time take_goat(Time);
	Time take_cabbage(Time);
}

\predicates {
  p(S,S,S,S,Time);
}


\problem {
     p(south, south, south, south, start)
   & \forall Time T; 
       (   p(south, north, south, north, T)
        -> p(north, north, south, north, go_alone(T)))
   & \forall Time T1; 
       (   p(north, north, south, north, T1)
        -> p(south, north, south, north, go_alone(T1)))
   & \forall Time T2; 
       (   p(south, south, north, south, T2)
        -> p(north, south, north, south, go_alone(T2)))
   & \forall Time T3; 
       (   p(north, south, north, south, T3)
        -> p(south, south, north, south, go_alone(T3)))
   & \forall Time T4; 
       (   p(south, south, south, north, T4)
        -> p(north, north, south, north, take_wolf(T4)))
   & \forall Time T5; 
       (   p(north, north, south, north, T5)
        -> p(south, south, south, north, take_wolf(T5)))
   & \forall Time T6; 
       (   p(south, south, north, south, T6)
        -> p(north, north, north, south, take_wolf(T6)))
   & \forall Time T7; 
       (   p(north, north, north, south, T7)
        -> p(south, south, north, south, take_wolf(T7)))
   & \forall S X;
       \forall S Y;
         \forall Time U; 
           (   p(south, X, south, Y, U)
            -> p(north, X, north, Y, take_goat(U)))
   & \forall S X1;
       \forall S Y1;
         \forall Time V; 
           (   p(north, X1, north, Y1, V)
            -> p(south, X1, south, Y1, take_goat(V)))
   & \forall Time T8; 
       (   p(south, north, south, south, T8)
        -> p(north,
             north,
             south,
             north,
             take_cabbage(T8)))
   & \forall Time T9; 
       (   p(north, north, south, north, T9)
        -> p(south,
             north,
             south,
             south,
             take_cabbage(T9)))
   & \forall Time U1; 
       (   p(south, south, north, south, U1)
        -> p(north,
             south,
             north,
             north,
             take_cabbage(U1)))
   & \forall Time V1; 
       (   p(north, south, north, north, V1)
        -> p(south,
             south,
             north,
             south,
             take_cabbage(V1)))
-> \exists Time Z; p(north, north, north, north, Z)

}

