\settings {
"#Proof-Settings-Config-File
#Wed May 10 00:40:39 CEST 2006
[General]SoundNotification=false
[View]FontIndex=5
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[General]SuggestiveVarNames=false
[View]ShowWholeTaclet=true
[General]ProofAssistant=false
[View]MaxTooltipLines=40
[SimultaneousUpdateSimplifier]EagerSimplification=true
[General]StupidMode=true
[Strategy]MaximumNumberOfAutomaticApplications=20000

[Choice]DefaultChoices=transactions-transactions\\:transactionsOn , dfaPolicy-dfaPolicy\\:on , programRules-programRules\\:Java , throughout-throughout\\:toutOn , transactionAbort-transactionAbort\\:abortOn , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , nullPointerPolicy-nullPointerPolicy\\:nullCheck
[OCLRef]Null=true
[OCLRef]ExcThrown=true
[Model]Source=1
[Choice]Choices=transactions-transactions\\:transactionsOn-transactions\\:transactionsOff , dfaPolicy-dfaPolicy\\:on-dfaPolicy\\:off , programRules-programRules\\:ODL-programRules\\:Java , throughout-throughout\\:toutOff-throughout\\:toutOn , initialisation-initialisation\\:disableStaticInitialisation-initialisation\\:enableStaticInitialisation , transactionAbort-transactionAbort\\:abortOff-transactionAbort\\:abortOn , intRules-intRules\\:arithmeticSemanticsCheckingOF-intRules\\:javaSemantics-intRules\\:arithmeticSemanticsIgnoringOF , nullPointerPolicy-nullPointerPolicy\\:noNullCheck-nullPointerPolicy\\:nullCheck
[OCLRef]Array=true
[DecisionProcedure]=SIMPLIFY
[General]OuterRenaming=false
[Strategy]ActiveStrategy=Simple JavaCardDL without expanding loops and method bodies
"
}



\javaSource "/export/home/i12pc6/richard/development/lps/system/proofExamples/java_dl/reverseArray";

\programVariables {
int _old10;
java.lang.Exception _exc71;
int[] _jmlresult41;
ReverseArray self_ReverseArray;
int[] _old9_p_a;
int[] p_a;
}

\functions {
int _old11(int);
}

\problem {
   LPS
-> \forall int[] p_a_lv; 
     {p_a:=p_a_lv}
       (     p_a.<created>@(java.lang.Object) = TRUE
           & !p_a = null
         | p_a = null
        -> \forall ReverseArray self_ReverseArray_lv; 
             {self_ReverseArray:=self_ReverseArray_lv}
               {_old9_p_a:=p_a}
                 (   \<{
                         int j;
                       }\> \forall int j_lv; 
                             {j:=j_lv}
                               (  _old11(j)
                                = _old9_p_a[  _old9_p_a.length
                                            - (j + 1)])
                  -> {_old10:=_old9_p_a.length}
                       (     !self_ReverseArray = null
                           &   self_ReverseArray.<created>@(java.lang.Object)
                             = TRUE
                           & (  !p_a = null
                              & p_a.length >= 0)
                        ->   \[{
                                 java.lang.Exception _exc71 =null;try {
                                   _jmlresult41=self_ReverseArray.reverse2(p_a)@ReverseArray;
                                 }  catch (java.lang.Exception e) {
                                   _exc71=e;
                                 }
                               }\] (  _exc71 = null
                                    & (  \<{
                                             int j;
                                           }\> \forall int j_10; 
                                                 {j:=j_10}
                                                   (        j
                                                         >= 0
                                                       &    j
                                                         <  _old10
                                                    ->   _jmlresult41[j]
                                                       = _old11(j))
                                       &   _jmlresult41.length
                                         = _old10))
                           & (   !true
                              -> \<{
                                     java.lang.Exception _exc71 =null;try {
                                       _jmlresult41=self_ReverseArray.reverse2(p_a)@ReverseArray;
                                     }  catch (java.lang.Exception e) {
                                       _exc71=e;
                                     }
                                   }\> true))))

}

\proof {
(keyLog "0" (keyUser "richard" ) (keyVersion "schlagerBubelLPS.3"))
(keyLog "1" (keyUser "richard" ) (keyVersion "schlagerBubelLPS.3"))

(branch "dummy ID"
(builtin "Update Simplification" (formula "1"))
(rule "concrete_not_1" (formula "1") (term "0,1,1,1,0,1,0,1"))
(rule "concrete_impl_2" (formula "1") (term "1,1,1,0,1,0,1"))
(rule "concrete_and_3" (formula "1") (term "1,1,0,1,0,1"))
(rule "imp_right" (formula "1"))
(rule "all_right" (formula "2") (inst "sk=p_a_lv_0_0"))
(rule "imp_right" (formula "2"))
(rule "all_right" (formula "3") (inst "sk=self_ReverseArray_lv_0_0"))
(rule "imp_right" (formula "3"))
(rule "imp_right" (formula "4"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "3"))
(rule "not_left" (formula "1"))
(rule "not_left" (formula "2"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,1,0,0,0,1,0,3"))
(rule "polySimp_homoEq" (formula "3") (term "1,0,0,1"))
(rule "polySimp_homoEq" (formula "8") (term "1,1,0,3"))
(rule "polySimp_elimSub" (formula "3") (term "1,0,0,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "0,0,0,1,0,1,0,0,0,1,0,3"))
(rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,1,0,0,1"))
(rule "polySimp_addComm0" (formula "8") (term "0,1,1,0,3"))
(rule "polySimp_addComm0" (formula "8") (term "0,0,1,0,1,0,0,0,1,0,3"))
(rule "polySimp_addComm0" (formula "3") (term "0,1,0,0,1"))
(rule "polySimp_addComm0" (formula "3") (term "1,1,1,1,0,1,0,0,1"))
(rule "polySimp_rightDist" (formula "3") (term "1,1,1,0,1,0,0,1"))
(rule "mul_literals" (formula "3") (term "0,1,1,1,0,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "3") (term "1,1,0,1,0,0,1"))
(rule "polySimp_addComm0" (formula "3") (term "0,1,1,0,1,0,0,1"))
(rule "replace_known_right" (formula "4") (term "1") (ifseqformula "6"))
(rule "concrete_or_4" (formula "4"))
(rule "and_left" (formula "4"))
(rule "not_left" (formula "5"))
(rule "polySimp_sepPosMonomial" (formula "8") (term "1,1,0,3"))
(rule "add_zero_right" (formula "8") (term "1,1,1,0,3"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,3"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,3"))
(rule "polySimp_elimOne" (formula "8") (term "0,1,1,0,3"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,1,0,0,0,1,0,3"))
(rule "add_zero_right" (formula "8") (term "1,1,0,1,0,0,0,1,0,3"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,0,0,0,1,0,3"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,0,0,0,1,0,3"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,0,0,0,1,0,3"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,1,0,0,0,1,0,3"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,0,0,0,1,0,3"))
(rule "polySimp_sepPosMonomial" (formula "3") (term "1,0,0,1"))
(rule "add_zero_right" (formula "3") (term "1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "3") (term "0,1,0,0,1"))
(rule "make_insert_eq_nonrigid" (formula "1"))
(rule "make_insert_eq_nonrigid" (formula "4"))
(rule "shift_paren_and" (formula "8") (term "0,3"))
(rule "eliminate_variable_declaration" (formula "3") (term "1"))
(rule "empty_modality" (formula "3") (term "1"))
(builtin "Update Simplification" (formula "3"))
(rule "eliminate_variable_declaration" (formula "8") (term "1,0,0,3"))
(rule "variable_declaration_allmodal" (formula "8") (term "3"))
(rule "empty_modality" (formula "8") (term "1,0,0,3"))
(rule "eliminate_variable_declaration" (formula "8") (term "3"))
(rule "assignment_normalassign" (formula "8") (term "3"))
(builtin "Update Simplification" (formula "8"))
(rule "method_body_expand" (formula "8") (term "4"))
(rule "variable_declaration_allmodal" (formula "8") (term "4"))
(rule "eliminate_variable_declaration" (formula "8") (term "4"))
(rule "array_creation" (formula "8") (term "4") (inst "#v0=var"))
(rule "eliminate_variable_declaration" (formula "8") (term "4"))
(rule "variable_declaration_allmodal" (formula "8") (term "4"))
(rule "eliminate_variable_declaration" (formula "8") (term "4"))
(rule "assignment_read_attribute" (formula "8") (term "4"))
(branch " Normal Execution (p_a != null)"
   (builtin "Update Simplification" (formula "9"))
   (builtin "Update Simplification" (formula "8"))
   (rule "if_eval" (formula "8") (term "5") (inst "#boolv=b"))
   (rule "eliminate_variable_declaration" (formula "8") (term "5"))
   (rule "less_than_comparison_new" (formula "8") (term "5"))
   (builtin "Update Simplification" (formula "8"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "0"))
   (rule "times_zero_1" (formula "8") (term "0,0,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0"))
   (rule "add_zero_right" (formula "8") (term "1,0"))
   (rule "mul_literals" (formula "8") (term "1,0"))
   (rule "if_enter_then" (formula "8") (term "5,1"))
   (rule "if_skip_then" (formula "8") (term "5,2"))
   (rule "ifthenelse_split_for" (formula "8"))
   (branch " p_a_lv_0_0.length <= -1 TRUE"
      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
      (rule "times_zero_1" (formula "3") (term "0,0"))
      (rule "add_zero_left" (formula "3") (term "0"))
      (rule "qeq_literals" (formula "3"))
      (rule "close_by_false" (formula "3"))
   )
   (branch " p_a_lv_0_0.length <= -1 FALSE"
      (rule "inEqSimp_leqRight" (formula "8"))
      (rule "mul_literals" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "assignment_normalassign" (formula "8") (term "5"))
      (builtin "Update Simplification" (formula "8"))
      (rule "static_method_call_static_with_assignment_via_typereference" (formula "8") (term "5") (inst "#v0=var_1"))
      (rule "eliminate_variable_declaration" (formula "8") (term "5"))
      (rule "variable_declaration_allmodal" (formula "8") (term "5"))
      (rule "eliminate_variable_declaration" (formula "8") (term "5"))
      (rule "assignment_normalassign" (formula "8") (term "5"))
      (builtin "Update Simplification" (formula "8"))
      (rule "method_body_expand" (formula "8") (term "5"))
      (rule "eliminate_variable_declaration" (formula "8") (term "5"))
      (rule "static_method_call_static_with_assignment_via_typereference" (formula "8") (term "5") (inst "#v0=var_2"))
      (rule "eliminate_variable_declaration" (formula "8") (term "5"))
      (rule "instance_allocation_contract" (formula "8") (term "5"))
      (builtin "Update Simplification" (formula "8"))
      (rule "polySimp_addComm0" (formula "8") (term "6"))
      (rule "empty_block" (formula "8") (term "9"))
      (rule "assignment_normalassign" (formula "8") (term "9"))
      (builtin "Update Simplification" (formula "8"))
      (rule "method_call" (formula "8") (term "9"))
      (branch " Normal Execution (newObject != null )"
         (builtin "Update Simplification" (formula "8"))
         (rule "repository_object_non_null" (formula "8"))
         (rule "false_right" (formula "8"))
         (rule "variable_declaration_allmodal" (formula "8") (term "9"))
         (rule "eliminate_variable_declaration" (formula "8") (term "9"))
         (rule "assignment_normalassign" (formula "8") (term "9"))
         (builtin "Update Simplification" (formula "8"))
         (rule "method_body_expand" (formula "8") (term "9"))
         (rule "assignment_normalassign" (formula "8") (term "9"))
         (builtin "Update Simplification" (formula "8"))
         (rule "assignment_normalassign" (formula "8") (term "11"))
         (builtin "Update Simplification" (formula "8"))
         (rule "assignment_normalassign" (formula "8") (term "13"))
         (builtin "Update Simplification" (formula "8"))
         (rule "method_call_within_class" (formula "8") (term "14"))
         (rule "method_body_expand" (formula "8") (term "14"))
         (rule "init_array_for_loop_" (formula "8") (term "14") (inst "iv=_var0"))
         (builtin "Update Simplification" (formula "8"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "1,14"))
         (rule "polySimp_mulComm0" (formula "8") (term "0,0,0,1,14"))
         (rule "polySimp_addComm0" (formula "8") (term "0,0,1,14"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,14"))
         (rule "add_zero_right" (formula "8") (term "1,1,14"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1,14"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1,14"))
         (rule "mul_literals" (formula "8") (term "0,1,1,14"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,14"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1,14"))
         (rule "method_call_empty" (formula "8") (term "18"))
         (rule "empty_block" (formula "8") (term "18"))
         (rule "assignment_normalassign" (formula "8") (term "18"))
         (builtin "Update Simplification" (formula "8"))
         (rule "method_call_return_ignore_result" (formula "8") (term "18"))
         (rule "empty_block" (formula "8") (term "18"))
         (rule "method_call_return_ignore_trail" (formula "8") (term "18"))
         (rule "assignment_normalassign" (formula "8") (term "18"))
         (builtin "Update Simplification" (formula "8"))
         (rule "method_call_empty" (formula "8") (term "18"))
         (rule "empty_block" (formula "8") (term "18"))
         (rule "assignment_normalassign" (formula "8") (term "18"))
         (builtin "Update Simplification" (formula "8"))
         (rule "empty_block" (formula "8") (term "18"))
         (rule "assignment_normalassign" (formula "8") (term "18"))
         (builtin "Update Simplification" (formula "8"))
         (rule "variable_declaration_allmodal" (formula "8") (term "18"))
         (rule "eliminate_variable_declaration" (formula "8") (term "18"))
         (rule "assignment_normalassign" (formula "8") (term "18"))
         (builtin "Update Simplification" (formula "8"))
         (rule "while_inv_box" (formula "8") (inst "#modifies={i,b[0..b.length - 1]}") (inst "#v1=b_1") (inst "inv=  \\<{
      int j;
    }\\> \\forall int j_11; 
          {j:=j_11}
            (   j >= 0 & j <  i
             -> b[j] = p_a[p_a.length - (j + 1)])
& (i >= 0 & i <= p_a.length)"))
         (branch " Invariant Initially Valid"
            (builtin "Update Simplification" (formula "8"))
            (rule "qeq_literals" (formula "8") (term "0,1"))
            (rule "concrete_and_1" (formula "8") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,1,0,0,16,0"))
            (rule "inEqSimp_homoInEq0" (formula "8") (term "1"))
            (rule "times_zero_2" (formula "8") (term "1,0,1"))
            (rule "add_zero_right" (formula "8") (term "0,1"))
            (rule "polySimp_homoEq" (formula "8") (term "1,1,0,0,16,0"))
            (rule "polySimp_elimSub" (formula "8") (term "1,0,0,1,1,0,0,16,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "0,0,0,1,0,1,0,0,16,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,1,0,0,16,0"))
            (rule "polySimp_addComm0" (formula "8") (term "0,0,1,0,1,0,0,16,0"))
            (rule "polySimp_addComm0" (formula "8") (term "0,1,1,0,0,16,0"))
            (rule "polySimp_addComm0" (formula "8") (term "1,1,1,1,0,1,1,0,0,16,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,1,1,0,1,1,0,0,16,0"))
            (rule "mul_literals" (formula "8") (term "0,1,1,1,0,1,1,0,0,16,0"))
            (rule "polySimp_addComm0" (formula "8") (term "1,1,0,1,1,0,0,16,0"))
            (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "2"))
            (rule "concrete_and_3" (formula "8"))
            (rule "polySimp_sepPosMonomial" (formula "8") (term "1,1,0,0,16"))
            (rule "add_zero_right" (formula "8") (term "1,1,1,0,0,16"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,16"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,16"))
            (rule "polySimp_elimOne" (formula "8") (term "0,1,1,0,0,16"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,1,0,0,16"))
            (rule "add_zero_right" (formula "8") (term "1,1,0,1,0,0,16"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,0,0,16"))
            (rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,0,0,16"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,0,0,16"))
            (rule "mul_literals" (formula "8") (term "0,1,1,0,1,0,0,16"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,0,0,16"))
            (rule "eliminate_variable_declaration" (formula "8") (term "16"))
            (rule "empty_modality" (formula "8") (term "16"))
            (builtin "Update Simplification" (formula "8"))
            (rule "add_zero_right" (formula "8") (term "1,1,0,0"))
            (rule "all_right" (formula "8") (inst "sk=j_11_0"))
            (rule "imp_right" (formula "8"))
            (rule "and_left" (formula "1"))
            (rule "inEqSimp_homoInEq0" (formula "10") (term "1,0,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "10") (term "1,0,1"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0,0,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0,1,0,1"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "0,1,0,1,0,0,0"))
            (rule "mul_literals" (formula "10") (term "0,0,1,0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,0,1,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,1,0,0,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0,0,1,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,1,0,0,0"))
            (rule "add_literals" (formula "10") (term "1,1,0,1,0,0,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,1,0,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,1,0,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,1,0,0,0"))
            (rule "add_zero_left" (formula "10") (term "0,1,0,0,0"))
            (rule "replace_known_left" (formula "10") (term "1,0,0,0") (ifseqformula "1"))
            (rule "concrete_and_3" (formula "10") (term "0,0,0"))
            (rule "replace_known_left" (formula "10") (term "0,0,1") (ifseqformula "1"))
            (rule "concrete_and_1" (formula "10") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
            (rule "add_zero_right" (formula "10") (term "1,0,0,0"))
            (rule "polySimp_homoEq" (formula "10"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "10") (term "0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,1,0"))
            (rule "add_zero_right" (formula "10") (term "1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,0,1,0"))
            (rule "polySimp_addComm0" (formula "10") (term "0"))
            (rule "polySimp_sepNegMonomial" (formula "10"))
            (rule "times_zero_2" (formula "10") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0"))
            (rule "add_zero_right" (formula "10") (term "1"))
            (rule "polySimp_elimOne" (formula "10") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
            (rule "times_zero_1" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "qeq_literals" (formula "1"))
            (rule "close_by_false" (formula "1"))
         )
         (branch " Body Preserves Invariant"
            (builtin "Update Simplification" (formula "8"))
            (rule "imp_right" (formula "8"))
            (rule "and_left" (formula "1"))
            (rule "imp_right" (formula "10"))
            (rule "and_left" (formula "3"))
            (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,1,0,0,20"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,1,0,0,0,1,1,0,23"))
            (rule "inEqSimp_homoInEq0" (formula "2") (term "0,16"))
            (rule "times_zero_2" (formula "2") (term "1,0,0,16"))
            (rule "add_zero_right" (formula "2") (term "0,0,16"))
            (rule "inEqSimp_homoInEq0" (formula "12") (term "1,1,1,1,0,23"))
            (rule "inEqSimp_homoInEq0" (formula "12") (term "0,19"))
            (rule "times_zero_2" (formula "12") (term "1,0,0,19"))
            (rule "add_zero_right" (formula "12") (term "0,0,19"))
            (rule "inEqSimp_homoInEq0" (formula "1") (term "0,16"))
            (rule "times_zero_2" (formula "1") (term "1,0,0,16"))
            (rule "add_zero_right" (formula "1") (term "0,0,16"))
            (rule "inEqSimp_homoInEq0" (formula "4"))
            (rule "polySimp_elimSub" (formula "2") (term "1,1,16"))
            (rule "mul_literals" (formula "2") (term "1,1,1,16"))
            (rule "polySimp_elimSub" (formula "12") (term "1,1,19"))
            (rule "mul_literals" (formula "12") (term "1,1,1,19"))
            (rule "polySimp_elimSub" (formula "1") (term "1,1,16"))
            (rule "mul_literals" (formula "1") (term "1,1,1,16"))
            (rule "polySimp_homoEq" (formula "2") (term "1,1,0,0,20"))
            (rule "polySimp_homoEq" (formula "12") (term "1,1,0,0,0,1,1,0,23"))
            (rule "polySimp_elimSub" (formula "2") (term "1,0,0,1,1,0,0,20"))
            (rule "polySimp_elimSub" (formula "12") (term "1,0,0,1,1,0,0,0,1,1,0,23"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,0,0,1,0,1,0,0,20"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0,0,1,0,1,0,0,0,1,1,0,23"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,1,0,0,20"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,1,0,0,0,1,1,0,23"))
            (rule "polySimp_addComm0" (formula "4") (term "0"))
            (rule "polySimp_addComm0" (formula "2") (term "1,1,16"))
            (builtin "Update Simplification" (formula "2"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,19"))
            (builtin "Update Simplification" (formula "12"))
            (rule "polySimp_addComm0" (formula "1") (term "1,1,16"))
            (builtin "Update Simplification" (formula "1"))
            (rule "polySimp_addComm0" (formula "2") (term "0,0,1,0,1,0,0,16"))
            (rule "polySimp_addComm0" (formula "2") (term "0,1,1,0,0,16"))
            (rule "polySimp_addComm0" (formula "12") (term "0,1,1,0,0,0,1,1,0,19"))
            (rule "polySimp_addComm0" (formula "12") (term "0,0,1,0,1,0,0,0,1,1,0,19"))
            (rule "polySimp_addComm0" (formula "12") (term "0,1,1,1,1,0,19"))
            (rule "polySimp_addComm0" (formula "2") (term "1,1,1,1,0,1,1,0,0,16"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,1,1,0,1,1,0,0,0,1,1,0,19"))
            (rule "polySimp_rightDist" (formula "2") (term "1,1,1,0,1,1,0,0,16"))
            (rule "mul_literals" (formula "2") (term "0,1,1,1,0,1,1,0,0,16"))
            (rule "polySimp_addComm0" (formula "2") (term "1,1,0,1,1,0,0,16"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,1,0,1,1,0,0,0,1,1,0,19"))
            (rule "mul_literals" (formula "12") (term "0,1,1,1,0,1,1,0,0,0,1,1,0,19"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,0,1,1,0,0,0,1,1,0,19"))
            (rule "inEqSimp_sepPosMonomial1" (formula "4"))
            (rule "add_zero_right" (formula "4") (term "1"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1"))
            (rule "polySimp_elimOne" (formula "4") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,1,0,0,16"))
            (rule "add_zero_right" (formula "2") (term "1,1,0,1,0,0,16"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,0,0,16"))
            (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,0,0,16"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,0,0,16"))
            (rule "mul_literals" (formula "2") (term "0,1,1,0,1,0,0,16"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,0,0,16"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,1,0,0,0,1,1,0,19"))
            (rule "add_zero_right" (formula "12") (term "1,1,0,1,0,0,0,1,1,0,19"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1,0,0,0,1,1,0,19"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1,0,0,0,1,1,0,19"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,1,0,0,0,1,1,0,19"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0,1,0,0,0,1,1,0,19"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,1,0,0,0,1,1,0,19"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,1,1,1,0,19"))
            (rule "add_zero_right" (formula "12") (term "1,1,1,1,1,0,19"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,1,1,0,19"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,1,1,0,19"))
            (rule "polySimp_sepPosMonomial" (formula "2") (term "1,1,0,0,16"))
            (rule "add_zero_right" (formula "2") (term "1,1,1,0,0,16"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,16"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,16"))
            (rule "polySimp_elimOne" (formula "2") (term "0,1,1,0,0,16"))
            (rule "polySimp_sepPosMonomial" (formula "12") (term "1,1,0,0,0,1,1,0,19"))
            (rule "add_zero_right" (formula "12") (term "1,1,1,0,0,0,1,1,0,19"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,1,1,0,19"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0,1,1,0,19"))
            (rule "polySimp_elimOne" (formula "12") (term "0,1,1,0,0,0,1,1,0,19"))
            (rule "shift_paren_and" (formula "12") (term "1,1,0,19"))
            (rule "throw_in_block_ignore_trail" (formula "12") (term "1,0,0,19"))
            (rule "variable_declaration_allmodal" (formula "1") (term "16"))
            (rule "eliminate_variable_declaration" (formula "2") (term "16"))
            (rule "eliminate_variable_declaration" (formula "1") (term "16"))
            (rule "method_call_throw_with_param_ignore_trail" (formula "12") (term "1,0,0,19"))
            (rule "empty_modality" (formula "2") (term "16"))
            (builtin "Update Simplification" (formula "2"))
            (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0,0,0,1,0"))
            (rule "polySimp_homoEq" (formula "2") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,1,0,0,0,1,0,1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "1,1,0,1,0,1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "1,2,0,1,0,1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0,0,1,0,1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "1,1,0,1,0,0,0,1,0,1,0"))
            (rule "polySimp_addComm0" (formula "2") (term "0,1,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,1,0,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,1,0,0,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,0,1,0,0,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "2") (term "0,1,0,1,0,0,0,0,0,1,0"))
            (rule "mul_literals" (formula "2") (term "0,0,1,0,1,0,0,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,1,0,0,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1,0,0,0,0,0,1,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0,0,0,0,1,0"))
            (rule "add_zero_left" (formula "2") (term "0,0,0,1,0,0,0,0,0,1,0"))
            (rule "polySimp_pullOutFactor1" (formula "2") (term "0,0,1,0,0,0,0,0,1,0"))
            (rule "add_literals" (formula "2") (term "1,0,0,1,0,0,0,0,0,1,0"))
            (rule "times_zero_1" (formula "2") (term "0,0,1,0,0,0,0,0,1,0"))
            (rule "add_zero_left" (formula "2") (term "0,1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2") (term "0,0,0,0,0,0,1,0"))
            (rule "times_zero_2" (formula "2") (term "1,1,0,0,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,0,0,0,0,1,0"))
            (rule "add_zero_right" (formula "2") (term "1,0,0,0,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "2") (term "0,0,0,0,0,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "2") (term "0,1,0"))
            (rule "polySimp_sepNegMonomial" (formula "2") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0"))
            (rule "times_zero_2" (formula "2") (term "1,1,1,0"))
            (rule "add_zero_right" (formula "2") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "2") (term "0,1,0"))
            (rule "eliminate_variable_declaration" (formula "12") (term "0,0,1,1,0,19"))
            (rule "compound_less_than_comparison_2" (formula "1") (term "16") (inst "#v0=i_1") (inst "#v1=i_2"))
            (rule "try_throw_single_ignore_trail" (formula "12") (term "1,0,0,19"))
            (rule "empty_modality" (formula "12") (term "0,0,1,1,0,19"))
            (rule "variable_declaration_allmodal" (formula "1") (term "16"))
            (rule "if_else_eval" (formula "12") (term "1,0,0,19") (inst "#boolv=b"))
            (rule "eliminate_variable_declaration" (formula "1") (term "16"))
            (rule "eliminate_variable_declaration" (formula "12") (term "1,0,0,19"))
            (rule "assignment_normalassign" (formula "1") (term "16"))
            (builtin "Update Simplification" (formula "1"))
            (rule "equality_comparison_new" (formula "12") (term "1,0,0,19"))
            (rule "if_else_enter_then" (formula "12") (term "2,1,0,0,19"))
            (rule "if_else_enter_else" (formula "12") (term "1,1,0,0,19"))
            (rule "ifthenelse_negated_for" (formula "12") (term "1,0,0,19"))
            (rule "variable_declaration_allmodal" (formula "1") (term "16"))
            (rule "variable_declaration_allmodal" (formula "12") (term "19"))
            (rule "eliminate_variable_declaration" (formula "1") (term "16"))
            (rule "assignment_normalassign" (formula "12") (term "1,1,0,0,19"))
            (rule "assignment_normalassign" (formula "12") (term "2,1,0,0,19"))
            (rule "assignment_read_attribute" (formula "1") (term "16"))
            (branch " Normal Execution (p_a != null)"
               (builtin "Update Simplification" (formula "1"))
               (builtin "Update Simplification" (formula "10"))
               (rule "if_else_split_imp_new" (formula "12") (term "1,2,1,0,0,19"))
               (rule "less_than_comparison_new" (formula "1") (term "16"))
               (builtin "Update Simplification" (formula "1"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
               (rule "times_zero_2" (formula "1") (term "1,1,0"))
               (rule "add_zero_right" (formula "1") (term "1,0"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0"))
               (rule "ifthenelse_split_for" (formula "1"))
               (branch " p_a_lv_0_0.length >= 1 + i_1 TRUE"
                  (rule "eliminate_variable_declaration" (formula "13") (term "1,1,2,1,0,0,19"))
                  (rule "assignment_normalassign" (formula "2") (term "14"))
                  (builtin "Update Simplification" (formula "2"))
                  (rule "eliminate_variable_declaration" (formula "13") (term "19"))
                  (rule "method_call_empty" (formula "2") (term "15"))
                  (builtin "Update Simplification" (formula "2"))
                  (rule "assignment_normalassign" (formula "13") (term "19"))
                  (builtin "Update Simplification" (formula "13"))
                  (rule "empty_modality" (formula "2") (term "14"))
                  (builtin "Update Simplification" (formula "2"))
                  (rule "boolean_equal" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "throw_in_block_ignore_trail" (formula "12") (term "2,1,2,1,0,0,20"))
                  (rule "assignment_normalassign" (formula "12") (term "1,1,2,1,0,0,20"))
                  (rule "throw_single_partial" (formula "12") (term "2,1,2,1,0,0,20"))
                  (rule "assignment_normalassign" (formula "12") (term "1,1,1,2,1,0,0,20"))
                  (rule "empty_modality" (formula "12") (term "1,1,1,1,2,1,0,0,20"))
                  (rule "eliminate_variable_declaration" (formula "12") (term "20"))
                  (rule "if_eval" (formula "12") (term "20") (inst "#boolv=b_1"))
                  (rule "eliminate_variable_declaration" (formula "12") (term "20"))
                  (rule "compound_less_than_comparison_2" (formula "12") (term "20") (inst "#v0=i_1") (inst "#v1=i_2"))
                  (rule "variable_declaration_allmodal" (formula "12") (term "20"))
                  (rule "eliminate_variable_declaration" (formula "12") (term "20"))
                  (rule "assignment_normalassign" (formula "12") (term "20"))
                  (builtin "Update Simplification" (formula "12"))
                  (rule "variable_declaration_allmodal" (formula "12") (term "21"))
                  (rule "eliminate_variable_declaration" (formula "12") (term "21"))
                  (rule "assignment_read_attribute" (formula "12") (term "21"))
                  (branch " Normal Execution (p_a != null)"
                     (builtin "Update Simplification" (formula "13"))
                     (builtin "Update Simplification" (formula "12"))
                     (rule "less_than_comparison_new" (formula "12") (term "22"))
                     (builtin "Update Simplification" (formula "12"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                     (rule "times_zero_2" (formula "12") (term "1,1,0"))
                     (rule "add_zero_right" (formula "12") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                     (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "1"))
                     (rule "ifthenelse_true_for" (formula "12"))
                     (rule "if_enter_then" (formula "12") (term "20"))
                     (rule "assignment_normalassign" (formula "12") (term "20"))
                     (builtin "Update Simplification" (formula "12"))
                     (rule "eval_order_array_access3" (formula "12") (term "20") (inst "#v0=var") (inst "#v2=i_1") (inst "#v1=i_2"))
                     (rule "variable_declaration_allmodal" (formula "12") (term "20"))
                     (rule "eliminate_variable_declaration" (formula "12") (term "20"))
                     (rule "assignment_normalassign" (formula "12") (term "20"))
                     (builtin "Update Simplification" (formula "12"))
                     (rule "variable_declaration_allmodal" (formula "12") (term "21"))
                     (rule "eliminate_variable_declaration" (formula "12") (term "21"))
                     (rule "assignment_normalassign" (formula "12") (term "21"))
                     (builtin "Update Simplification" (formula "12"))
                     (rule "if_eval" (formula "12") (term "22") (inst "#boolv=b_1"))
                     (rule "eliminate_variable_declaration" (formula "12") (term "22"))
                     (rule "compound_assignment_5" (formula "12") (term "22"))
                     (rule "if_else_eval" (formula "12") (term "22") (inst "#boolv=b_6"))
                     (rule "eliminate_variable_declaration" (formula "12") (term "22"))
                     (rule "compound_less_equal_than_comparison_1" (formula "12") (term "22") (inst "#v0=i_6"))
                     (rule "variable_declaration_allmodal" (formula "12") (term "22"))
                     (rule "eliminate_variable_declaration" (formula "12") (term "22"))
                     (rule "assignment_read_attribute" (formula "12") (term "22"))
                     (branch " Normal Execution (b != null)"
                        (builtin "Update Simplification" (formula "13"))
                        (builtin "Update Simplification" (formula "12"))
                        (rule "repository_object_non_null" (formula "12"))
                        (rule "false_right" (formula "12"))
                        (rule "less_equal_than_comparison_new" (formula "12") (term "23"))
                        (builtin "Update Simplification" (formula "12"))
                        (rule "if_else_enter_then" (formula "12") (term "22,1"))
                        (rule "if_else_enter_else" (formula "12") (term "22,2"))
                        (rule "ifthenelse_split_for" (formula "12"))
                        (branch " p_a_lv_0_0.length <= i_1 TRUE"
                           (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "1"))
                           (rule "apply_eq" (formula "1") (term "0") (ifseqformula "5"))
                           (rule "inEqSimp_homoInEq0" (formula "1"))
                           (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,0"))
                           (rule "times_zero_1" (formula "1") (term "0"))
                           (rule "qeq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "apply_eq" (formula "13") (term "1") (ifseqformula "4"))
                           (rule "apply_eq" (formula "7") (term "0") (ifseqformula "4"))
                           (rule "apply_eq" (formula "5") (term "0") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "5"))
                           (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                           (rule "add_literals" (formula "5") (term "1,0"))
                           (rule "times_zero_1" (formula "5") (term "0"))
                           (rule "leq_literals" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "apply_eq" (formula "11") (term "17") (ifseqformula "4"))
                           (rule "apply_eq" (formula "1") (term "0") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "close_by_false" (formula "1"))
                        )
                        (branch " p_a_lv_0_0.length <= i_1 FALSE"
                           (rule "inEqSimp_leqRight" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "add_zero_right" (formula "1") (term "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "assignment_normalassign" (formula "12") (term "22"))
                           (builtin "Update Simplification" (formula "12"))
                           (rule "less_than_comparison_new" (formula "12") (term "22"))
                           (builtin "Update Simplification" (formula "12"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "0"))
                           (rule "times_zero_1" (formula "12") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0"))
                           (rule "add_zero_right" (formula "12") (term "1,0"))
                           (rule "mul_literals" (formula "12") (term "1,0"))
                           (rule "if_skip_then_block" (formula "12") (term "22,2"))
                           (rule "if_enter_then_block" (formula "12") (term "22,1"))
                           (rule "ifthenelse_split_for" (formula "12"))
                           (branch " i_1 <= -1 TRUE"
                              (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                              (rule "times_zero_1" (formula "4") (term "0,0"))
                              (rule "add_zero_left" (formula "4") (term "0"))
                              (rule "qeq_literals" (formula "4"))
                              (rule "close_by_false" (formula "4"))
                           )
                           (branch " i_1 <= -1 FALSE"
                              (rule "inEqSimp_leqRight" (formula "12"))
                              (rule "mul_literals" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "assignment_normalassign" (formula "12") (term "22"))
                              (builtin "Update Simplification" (formula "12"))
                              (rule "empty_block" (formula "12") (term "22"))
                              (rule "variable_declaration_allmodal" (formula "12") (term "22"))
                              (rule "eliminate_variable_declaration" (formula "12") (term "22"))
                              (rule "eval_order_array_access5" (formula "12") (term "22") (inst "#ar1=var_4") (inst "#v1=i_8"))
                              (rule "variable_declaration_allmodal" (formula "12") (term "22"))
                              (rule "eliminate_variable_declaration" (formula "12") (term "22"))
                              (rule "assignment_normalassign" (formula "12") (term "22"))
                              (builtin "Update Simplification" (formula "12"))
                              (rule "variable_declaration_allmodal" (formula "12") (term "23"))
                              (rule "eliminate_variable_declaration" (formula "12") (term "23"))
                              (rule "compound_subtraction_2" (formula "12") (term "23") (inst "#v0=i_9") (inst "#v1=i_10"))
                              (rule "variable_declaration_allmodal" (formula "12") (term "23"))
                              (rule "eliminate_variable_declaration" (formula "12") (term "23"))
                              (rule "assignment_read_attribute" (formula "12") (term "23"))
                              (branch " Normal Execution (p_a != null)"
                                 (builtin "Update Simplification" (formula "13"))
                                 (builtin "Update Simplification" (formula "12"))
                                 (rule "variable_declaration_allmodal" (formula "12") (term "24"))
                                 (rule "eliminate_variable_declaration" (formula "12") (term "24"))
                                 (rule "remove_parentheses_right" (formula "12") (term "24"))
                                 (rule "assignment_addition" (formula "12") (term "24"))
                                 (builtin "Update Simplification" (formula "12"))
                                 (rule "polySimp_addComm0" (formula "12") (term "5"))
                                 (rule "assignment_subtraction" (formula "12") (term "25"))
                                 (builtin "Update Simplification" (formula "12"))
                                 (rule "polySimp_elimSub" (formula "12") (term "6"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,6"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,6"))
                                 (rule "mul_literals" (formula "12") (term "0,1,6"))
                                 (rule "polySimp_addComm0" (formula "12") (term "6"))
                                 (rule "assignment_array2" (formula "12") (term "24"))
                                 (branch " Normal Execution (var_4 != null)"
                                    (builtin "Update Simplification" (formula "13"))
                                    (builtin "Update Simplification" (formula "12"))
                                    (rule "or_right" (formula "12"))
                                    (rule "or_right" (formula "12"))
                                    (rule "inEqSimp_ltRight" (formula "13"))
                                    (rule "times_zero_1" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "13"))
                                    (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0,0,6"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0,0,6"))
                                    (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0"))
                                    (rule "polySimp_addLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0,0,6"))
                                    (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "0,1,0,1,0,0,6"))
                                    (rule "mul_literals" (formula "13") (term "0,0,1,0,1,0,0,6"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,1,0,0,6"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,0,1,0,1,0,0,6"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,6"))
                                    (rule "polySimp_addComm1" (formula "13") (term "0,0,1,0,0,6"))
                                    (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,1,0,0,6"))
                                    (rule "add_literals" (formula "13") (term "1,1,0,1,0,0,6"))
                                    (rule "times_zero_1" (formula "13") (term "1,0,1,0,0,6"))
                                    (rule "add_zero_right" (formula "13") (term "0,1,0,0,6"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,6"))
                                    (rule "add_literals" (formula "13") (term "0,0,1,0,0,6"))
                                    (rule "add_zero_left" (formula "13") (term "0,1,0,0,6"))
                                    (rule "replace_known_left" (formula "13") (term "0,0,0,6") (ifseqformula "1"))
                                    (rule "concrete_and_1" (formula "13") (term "0,0,6"))
                                    (rule "replace_known_left" (formula "13") (term "0,0,6") (ifseqformula "4"))
                                    (rule "concrete_and_1" (formula "13") (term "0,6"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "add_zero_right" (formula "1") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "ifthenelse_split" (formula "12") (term "6"))
                                    (branch " p_a_lv_0_0 = int[]::<get>(int[].<nextToCreate>) TRUE"
                                       (rule "replace_known_left" (formula "3") (term "1,0,0,1,0") (ifseqformula "1"))
                                       (rule "concrete_and_3" (formula "3") (term "0,0,1,0"))
                                       (rule "apply_eq" (formula "13") (term "7") (ifseqformula "1"))
                                       (rule "apply_eq" (formula "11") (term "0") (ifseqformula "1"))
                                       (rule "repository_object_non_null" (formula "11"))
                                       (rule "false_right" (formula "11"))
                                       (rule "apply_eq" (formula "12") (term "0,1") (ifseqformula "1"))
                                       (rule "apply_eq" (formula "2") (term "0,0") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "2"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "apply_eq" (formula "12") (term "0,18") (ifseqformula "1"))
                                       (builtin "Update Simplification" (formula "12"))
                                       (rule "apply_eq" (formula "7") (term "0,0") (ifseqformula "1"))
                                       (rule "apply_eq" (formula "5") (term "0,0") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "5"))
                                       (rule "polySimp_addComm0" (formula "5") (term "0"))
                                       (rule "apply_eq" (formula "9") (term "0,0") (ifseqformula "1"))
                                       (rule "apply_eq" (formula "8") (term "0,0,0") (ifseqformula "1"))
                                       (rule "apply_eq" (formula "12") (term "0,1,1,6") (ifseqformula "1"))
                                       (rule "polySimp_addComm1" (formula "12") (term "1,6"))
                                       (rule "apply_eq" (formula "12") (term "0,1,1,1,17") (ifseqformula "1"))
                                       (rule "apply_eq" (formula "3") (term "0,2,0,1,0") (ifseqformula "1"))
                                       (rule "apply_eq" (formula "8") (term "0,1,0,1,0,0") (ifseqformula "1"))
                                       (rule "apply_eq" (formula "3") (term "0,1,0,1,2,0,1,0") (ifseqformula "1"))
                                       (rule "apply_eq" (formula "3") (term "0,1,0,1,1,0,1,0") (ifseqformula "1"))
                                       (rule "apply_eq" (formula "3") (term "0,1,1,1,0,1,1,0") (ifseqformula "1"))
                                       (rule "apply_eq" (formula "3") (term "0,1,1,0,0,0,1,0") (ifseqformula "1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                       (rule "add_zero_right" (formula "2") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1"))
                                       (rule "mul_literals" (formula "2") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                       (rule "add_zero_right" (formula "5") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "1"))
                                       (rule "polySimp_elimOne" (formula "5") (term "1"))
                                       (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
                                       (rule "times_zero_1" (formula "4") (term "0,0"))
                                       (rule "add_zero_left" (formula "4") (term "0"))
                                       (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "2"))
                                       (rule "times_zero_1" (formula "4") (term "0,0"))
                                       (rule "add_zero_left" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                       (rule "add_zero_right" (formula "4") (term "1"))
                                       (rule "mul_literals" (formula "4") (term "1"))
                                       (rule "make_insert_eq_nonrigid" (formula "1"))
                                       (rule "make_insert_eq_nonrigid" (formula "10"))
                                       (rule "assignment_to_primitive_array_component" (formula "13") (term "21"))
                                       (branch " Normal Execution (var_3 != null)"
                                          (builtin "Update Simplification" (formula "14"))
                                          (builtin "Update Simplification" (formula "1"))
                                          (rule "repository_object_non_null" (formula "1") (term "0,0,0"))
                                          (rule "concrete_not_2" (formula "1") (term "0,0"))
                                          (rule "concrete_and_1" (formula "1") (term "0"))
                                          (rule "and_left" (formula "1"))
                                          (rule "inEqSimp_ltToLeq" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                                          (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "add_zero_right" (formula "1") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "postincrement" (formula "13") (term "21"))
                                          (rule "compound_int_cast_expression" (formula "13") (term "21") (inst "#v=i_1"))
                                          (rule "variable_declaration_allmodal" (formula "13") (term "21"))
                                          (rule "eliminate_variable_declaration" (formula "13") (term "21"))
                                          (rule "remove_parentheses_right" (formula "13") (term "21"))
                                          (rule "assignment_addition" (formula "13") (term "21"))
                                          (builtin "Update Simplification" (formula "13"))
                                          (rule "polySimp_addComm0" (formula "13") (term "5"))
                                          (rule "cast_4" (formula "13") (term "22"))
                                          (rule "assignment_normalassign" (formula "13") (term "22"))
                                          (builtin "Update Simplification" (formula "13"))
                                          (rule "try_empty" (formula "13") (term "21"))
                                          (rule "method_call_empty" (formula "13") (term "21"))
                                          (builtin "Update Simplification" (formula "13"))
                                          (rule "empty_modality" (formula "13") (term "20"))
                                          (builtin "Update Simplification" (formula "13"))
                                          (rule "boolean_not_equal_2" (formula "13") (term "0,0"))
                                          (rule "boolean_not_equal_2" (formula "13") (term "0,0,1"))
                                          (rule "concrete_impl_2" (formula "13") (term "0"))
                                          (rule "concrete_not_2" (formula "13") (term "0,1"))
                                          (rule "concrete_and_1" (formula "13"))
                                          (rule "concrete_impl_1" (formula "13"))
                                          (rule "inEqSimp_homoInEq0" (formula "13") (term "1,0,2,0,1,0,0,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "13") (term "1"))
                                          (rule "polySimp_homoEq" (formula "13") (term "0,0,1,0,0,0"))
                                          (rule "polySimp_homoEq" (formula "13") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0,2,0,1,0,1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "13") (term "0,1"))
                                          (rule "polySimp_addComm1" (formula "13") (term "0,0,0,2,0,1,0,1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "13") (term "1,1,2,0,1,0,1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "13") (term "1,2,2,0,1,0,1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "13") (term "1,1,0,0,0,1,0,1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "13") (term "1,1,0,1,0,2,0,1,0,1,0,0,0"))
                                          (rule "polySimp_addComm0" (formula "13") (term "0,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0,2,0,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,0,2,0,0,0,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,0,1,0,2,0,0,0,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "0,1,0,1,0,2,0,0,0,1,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "0,0,1,0,1,0,2,0,0,0,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,0,0,0,1,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "0,0,1,0,0,0,0,0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "1,1,0,0,0,0"))
                                          (rule "add_literals" (formula "13") (term "0,1,1,0,0,0,0"))
                                          (rule "add_zero_left" (formula "13") (term "1,1,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,2,0,0,0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,1,0,0,0"))
                                          (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,0,0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,2,0,0,0,1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,0,2,0,0,0,1,0,0,0"))
                                          (rule "add_literals" (formula "13") (term "0,0,0,0,1,0,2,0,0,0,1,0,0,0"))
                                          (rule "add_zero_left" (formula "13") (term "0,0,0,1,0,2,0,0,0,1,0,0,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "13") (term "0,0,1,0,2,0,0,0,1,0,0,0"))
                                          (rule "add_literals" (formula "13") (term "1,0,0,1,0,2,0,0,0,1,0,0,0"))
                                          (rule "times_zero_1" (formula "13") (term "0,0,1,0,2,0,0,0,1,0,0,0"))
                                          (rule "add_zero_left" (formula "13") (term "0,1,0,2,0,0,0,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0"))
                                          (rule "add_zero_right" (formula "13") (term "1,1,0"))
                                          (rule "mul_literals" (formula "13") (term "1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1"))
                                          (rule "add_zero_right" (formula "13") (term "1,1"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,1"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,1"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1"))
                                          (rule "mul_literals" (formula "13") (term "0,1,1"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,1"))
                                          (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "2"))
                                          (rule "concrete_and_3" (formula "13"))
                                          (rule "polySimp_sepPosMonomial" (formula "13") (term "0,0,0,0,1,0,0"))
                                          (rule "add_zero_right" (formula "13") (term "1,0,0,0,0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "13") (term "0,0,1,0,0,0,0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,0,1,0,0,0,0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0,0,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "13") (term "0,0,2,0,0,0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,2,0,0,0,1,0,0"))
                                          (rule "times_zero_2" (formula "13") (term "1,1,0,0,2,0,0,0,1,0,0"))
                                          (rule "add_zero_right" (formula "13") (term "1,0,0,2,0,0,0,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "0,0,0,2,0,0,0,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "13") (term "0,1,0,0"))
                                          (rule "polySimp_sepNegMonomial" (formula "13") (term "1,0,0"))
                                          (rule "times_zero_2" (formula "13") (term "1,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0"))
                                          (rule "add_zero_right" (formula "13") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0"))
                                          (rule "and_right" (formula "13"))
                                          (branch " Case 1"
                                             (rule "all_right" (formula "13") (inst "sk=j_11_2"))
                                             (rule "imp_right" (formula "13"))
                                             (rule "and_left" (formula "1"))
                                             (rule "replace_known_left" (formula "15") (term "0,0,2,1") (ifseqformula "1"))
                                             (rule "concrete_and_1" (formula "15") (term "0,2,1"))
                                             (rule "replace_known_left" (formula "15") (term "1,0,2,0") (ifseqformula "1"))
                                             (rule "concrete_and_3" (formula "15") (term "0,2,0"))
                                             (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                                             (rule "times_zero_1" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "ifthenelse_split" (formula "15") (term "1"))
                                             (branch " j_11_2 = i_1 TRUE"
                                                (rule "apply_eq_rigid" (formula "2") (term "0") (ifseqformula "1"))
                                                (rule "apply_eq" (formula "2") (term "0") (ifseqformula "1"))
                                                (rule "inEqSimp_homoInEq0" (formula "2"))
                                                (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                                                (rule "add_literals" (formula "2") (term "1,0"))
                                                (rule "times_zero_1" (formula "2") (term "0"))
                                                (rule "qeq_literals" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "apply_eq" (formula "14") (term "0,0,0") (ifseqformula "1"))
                                                (rule "polySimp_homoEq" (formula "14") (term "0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0,0"))
                                                (rule "add_literals" (formula "14") (term "1,1,0,0,0"))
                                                (rule "apply_eq_rigid" (formula "14") (term "0,0,2,0") (ifseqformula "1"))
                                                (rule "replace_known_left" (formula "14") (term "0,2,0") (ifseqformula "3"))
                                                (rule "ifthenelse_true" (formula "14") (term "2,0"))
                                                (rule "apply_eq_rigid" (formula "14") (term "0,1,1,2,0") (ifseqformula "1"))
                                                (rule "polySimp_sepNegMonomial" (formula "14") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
                                                (rule "times_zero_2" (formula "14") (term "1,1,0,0"))
                                                (rule "add_zero_right" (formula "14") (term "1,0,0"))
                                                (rule "make_insert_eq_nonrigid" (formula "1"))
                                                (rule "make_insert_eq" (formula "1"))
                                                (rule "ifthenelse_same_branches" (formula "14") (term "0"))
                                                (rule "close_eq" (formula "14"))
                                                (rule "close_by_true" (formula "14"))
                                             )
                                             (branch " j_11_2 = i_1 FALSE"
                                                (rule "ifthenelse_split" (formula "16") (term "0"))
                                                (branch "   j_11_2
=   -1
  + int[]::<get>(int[].<nextToCreate>).length
  + i_1 * -1 TRUE"
                                                   (rule "polySimp_homoEq" (formula "17"))
                                                   (rule "polySimp_addComm0" (formula "17") (term "0"))
                                                   (rule "apply_eq" (formula "2") (term "0") (ifseqformula "1"))
                                                   (rule "apply_eq" (formula "3") (term "0") (ifseqformula "1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "1,1,0"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "0,1,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor3b" (formula "3") (term "0"))
                                                   (rule "apply_eq" (formula "16") (term "0") (ifseqformula "1"))
                                                   (rule "polySimp_homoEq" (formula "16"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
                                                   (rule "polySimp_elimOne" (formula "16") (term "1,1,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "0,1,0"))
                                                   (rule "mul_literals" (formula "16") (term "0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "16") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor3b" (formula "16") (term "0"))
                                                   (rule "apply_eq" (formula "17") (term "1,2,1,0") (ifseqformula "1"))
                                                   (rule "apply_eq" (formula "17") (term "0,0,1,0") (ifseqformula "1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "17") (term "0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "17") (term "0,1,0,0,1,0"))
                                                   (rule "mul_literals" (formula "17") (term "0,0,1,0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0"))
                                                   (rule "polySimp_addComm1" (formula "17") (term "0,0,0,0,1,0"))
                                                   (rule "add_literals" (formula "17") (term "0,0,0,0,0,1,0"))
                                                   (rule "add_zero_left" (formula "17") (term "0,0,0,0,1,0"))
                                                   (rule "polySimp_pullOutFactor1" (formula "17") (term "0,0,0,1,0"))
                                                   (rule "add_literals" (formula "17") (term "1,0,0,0,1,0"))
                                                   (rule "times_zero_1" (formula "17") (term "0,0,0,1,0"))
                                                   (rule "add_zero_left" (formula "17") (term "0,0,1,0"))
                                                   (rule "replace_known_left" (formula "17") (term "0,1,0") (ifseqformula "8"))
                                                   (rule "ifthenelse_true" (formula "17") (term "1,0"))
                                                   (rule "apply_eq" (formula "17") (term "1,1,0") (ifseqformula "1"))
                                                   (rule "polySimp_pullOutFactor2" (formula "17") (term "0"))
                                                   (rule "add_literals" (formula "17") (term "1,0"))
                                                   (rule "times_zero_1" (formula "17") (term "0"))
                                                   (rule "close_eq" (formula "17"))
                                                   (rule "close_by_true" (formula "17"))
                                                )
                                                (branch "   j_11_2
=   -1
  + int[]::<get>(int[].<nextToCreate>).length
  + i_1 * -1 FALSE"
                                                   (rule "ifthenelse_split" (formula "17") (term "1"))
                                                   (branch "    j_11_2
<= -1
 + int[]::<get>(int[].<nextToCreate>).length TRUE"
                                                      (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "1"))
                                                      (rule "ifthenelse_true" (formula "18") (term "0"))
                                                      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                                                      (rule "times_zero_1" (formula "2") (term "0,0"))
                                                      (rule "add_zero_left" (formula "2") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                      (rule "add_zero_right" (formula "2") (term "1"))
                                                      (rule "mul_literals" (formula "2") (term "1"))
                                                      (rule "system_invariant_for_created_2a" (formula "13") (ifseqformula "4") (ifseqformula "14"))
                                                      (rule "and_left" (formula "13"))
                                                      (rule "inEqSimp_ltToLeq" (formula "14"))
                                                      (rule "polySimp_mulComm0" (formula "14") (term "0,0,0"))
                                                      (rule "polySimp_addComm0" (formula "14") (term "0,0"))
                                                      (rule "polySimp_pullOutFactor2b" (formula "14") (term "0"))
                                                      (rule "add_literals" (formula "14") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "14") (term "1,0"))
                                                      (rule "add_zero_right" (formula "14") (term "0"))
                                                      (rule "leq_literals" (formula "14"))
                                                      (rule "close_by_false" (formula "14"))
                                                   )
                                                   (branch "    j_11_2
<= -1
 + int[]::<get>(int[].<nextToCreate>).length FALSE"
                                                      (rule "inEqSimp_leqRight" (formula "17"))
                                                      (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
                                                      (rule "mul_literals" (formula "1") (term "0,0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                      (rule "add_zero_right" (formula "1") (term "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "3"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                      (rule "add_zero_right" (formula "1") (term "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                      (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "10"))
                                                      (rule "apply_eq" (formula "10") (term "0") (ifseqformula "1"))
                                                      (rule "apply_eq" (formula "17") (term "1") (ifseqformula "1"))
                                                      (rule "apply_eq" (formula "5") (term "1") (ifseqformula "1"))
                                                      (rule "apply_eq" (formula "10") (term "0") (ifseqformula "1"))
                                                      (rule "inEqSimp_homoInEq0" (formula "10"))
                                                      (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
                                                      (rule "add_literals" (formula "10") (term "1,0"))
                                                      (rule "times_zero_1" (formula "10") (term "0"))
                                                      (rule "qeq_literals" (formula "10"))
                                                      (rule "true_left" (formula "10"))
                                                      (rule "apply_eq" (formula "2") (term "0") (ifseqformula "1"))
                                                      (rule "inEqSimp_homoInEq1" (formula "2"))
                                                      (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                                                      (rule "add_literals" (formula "2") (term "1,0"))
                                                      (rule "times_zero_1" (formula "2") (term "0"))
                                                      (rule "leq_literals" (formula "2"))
                                                      (rule "true_left" (formula "2"))
                                                      (rule "apply_eq" (formula "6") (term "0") (ifseqformula "1"))
                                                      (rule "inEqSimp_homoInEq0" (formula "6"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                                                      (rule "add_literals" (formula "6") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "6") (term "1,0"))
                                                      (rule "add_zero_right" (formula "6") (term "0"))
                                                      (rule "qeq_literals" (formula "6"))
                                                      (rule "close_by_false" (formula "6"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch " Case 2"
                                             (rule "inEqSimp_geqRight" (formula "13"))
                                             (rule "mul_literals" (formula "1") (term "0,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "add_zero_right" (formula "1") (term "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
                                             (rule "times_zero_1" (formula "6") (term "0,0"))
                                             (rule "add_zero_left" (formula "6") (term "0"))
                                             (rule "qeq_literals" (formula "6"))
                                             (rule "close_by_false" (formula "6"))
                                          )
                                       )
                                       (branch " Null Reference (var_3 = null)"
                                          (builtin "Update Simplification" (formula "14"))
                                          (builtin "Update Simplification" (formula "1"))
                                          (rule "repository_object_non_null" (formula "1"))
                                          (rule "close_by_false" (formula "1"))
                                       )
                                       (branch " Index Out of Bounds (var_3 != null, but i_5 Out of Bounds!)"
                                          (builtin "Update Simplification" (formula "14"))
                                          (builtin "Update Simplification" (formula "1"))
                                          (rule "repository_object_non_null" (formula "1") (term "0,0"))
                                          (rule "concrete_not_2" (formula "1") (term "0"))
                                          (rule "concrete_and_1" (formula "1"))
                                          (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                          (rule "times_zero_1" (formula "1") (term "0,0,0,1"))
                                          (rule "add_zero_left" (formula "1") (term "0,0,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                          (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                          (rule "add_zero_right" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0"))
                                          (rule "add_zero_right" (formula "1") (term "1,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,0"))
                                          (rule "or_left" (formula "1"))
                                          (branch " i_1 >= int[]::<get>(int[].<nextToCreate>).length"
                                             (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "7"))
                                             (rule "apply_eq" (formula "8") (term "0") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq0" (formula "8"))
                                             (rule "polySimp_pullOutFactor1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "1,0"))
                                             (rule "times_zero_1" (formula "8") (term "0"))
                                             (rule "qeq_literals" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "apply_eq" (formula "2") (term "0") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "2"))
                                             (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                                             (rule "add_literals" (formula "2") (term "1,0"))
                                             (rule "times_zero_1" (formula "2") (term "0"))
                                             (rule "leq_literals" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (rule "apply_eq" (formula "3") (term "0") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq0" (formula "3"))
                                             (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                             (rule "add_literals" (formula "3") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "3") (term "1,0"))
                                             (rule "add_zero_right" (formula "3") (term "0"))
                                             (rule "qeq_literals" (formula "3"))
                                             (rule "close_by_false" (formula "3"))
                                          )
                                          (branch " i_1 <= -1"
                                             (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
                                             (rule "times_zero_1" (formula "6") (term "0,0"))
                                             (rule "add_zero_left" (formula "6") (term "0"))
                                             (rule "qeq_literals" (formula "6"))
                                             (rule "close_by_false" (formula "6"))
                                          )
                                       )
                                    )
                                    (branch " p_a_lv_0_0 = int[]::<get>(int[].<nextToCreate>) FALSE"
                                       (rule "replace_known_right" (formula "2") (term "1,0,0,1,0") (ifseqformula "12"))
                                       (rule "concrete_and_4" (formula "2") (term "0,0,1,0"))
                                       (rule "ifthenelse_false" (formula "2") (term "0,1,0"))
                                       (rule "polySimp_homoEq" (formula "2") (term "1,0"))
                                       (rule "polySimp_addComm0" (formula "2") (term "0,1,0"))
                                       (rule "polySimp_sepPosMonomial" (formula "2") (term "1,0"))
                                       (rule "add_zero_right" (formula "2") (term "1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,1,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0,1,0"))
                                       (rule "assignment_to_primitive_array_component" (formula "13") (term "23"))
                                       (branch " Normal Execution (var_3 != null)"
                                          (builtin "Update Simplification" (formula "14"))
                                          (builtin "Update Simplification" (formula "1"))
                                          (rule "repository_object_non_null" (formula "1") (term "0,0,0"))
                                          (rule "concrete_not_2" (formula "1") (term "0,0"))
                                          (rule "concrete_and_1" (formula "1") (term "0"))
                                          (rule "and_left" (formula "1"))
                                          (rule "inEqSimp_ltToLeq" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                                          (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "times_zero_2" (formula "1") (term "1,1"))
                                          (rule "add_zero_right" (formula "1") (term "1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "postincrement" (formula "13") (term "23"))
                                          (rule "compound_int_cast_expression" (formula "13") (term "23") (inst "#v=i_1"))
                                          (rule "variable_declaration_allmodal" (formula "13") (term "23"))
                                          (rule "eliminate_variable_declaration" (formula "13") (term "23"))
                                          (rule "remove_parentheses_right" (formula "13") (term "23"))
                                          (rule "assignment_addition" (formula "13") (term "23"))
                                          (builtin "Update Simplification" (formula "13"))
                                          (rule "polySimp_addComm0" (formula "13") (term "5"))
                                          (rule "cast_4" (formula "13") (term "24"))
                                          (rule "assignment_normalassign" (formula "13") (term "24"))
                                          (builtin "Update Simplification" (formula "13"))
                                          (rule "try_empty" (formula "13") (term "23"))
                                          (rule "method_call_empty" (formula "13") (term "23"))
                                          (builtin "Update Simplification" (formula "13"))
                                          (rule "empty_modality" (formula "13") (term "22"))
                                          (builtin "Update Simplification" (formula "13"))
                                          (rule "boolean_not_equal_2" (formula "13") (term "0,0"))
                                          (rule "boolean_not_equal_2" (formula "13") (term "0,0,1"))
                                          (rule "concrete_impl_2" (formula "13") (term "0"))
                                          (rule "concrete_not_2" (formula "13") (term "0,1"))
                                          (rule "concrete_and_1" (formula "13"))
                                          (rule "concrete_impl_1" (formula "13"))
                                          (rule "inEqSimp_homoInEq0" (formula "13") (term "1,0,0,2,0,1,0,0,0"))
                                          (rule "polySimp_homoEq" (formula "13") (term "1,0,0,1,0,0,0"))
                                          (rule "polySimp_homoEq" (formula "13") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0,0,1,0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0,0,2,0,1,0,1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0,2,0,1,0,1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "13") (term "1,1,2,0,1,0,1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "13") (term "1,2,2,0,1,0,1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "13") (term "1,1,0,1,0,0,1,0,1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "13") (term "1,1,0,1,0,0,2,0,1,0,1,0,0,0"))
                                          (rule "polySimp_addComm0" (formula "13") (term "0,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0,0,2,0,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,0,0,2,0,0,0,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,0,1,0,0,2,0,0,0,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0,0,0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,0,0,0,0,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,0,1,0,0,0,0,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "0,1,0,1,0,0,2,0,0,0,1,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "0,0,1,0,1,0,0,2,0,0,0,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "0,1,0,1,0,0,0,0,1,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "0,0,1,0,1,0,0,0,0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "1,1,0,0,0,0"))
                                          (rule "add_literals" (formula "13") (term "0,1,1,0,0,0,0"))
                                          (rule "add_zero_left" (formula "13") (term "1,1,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,2,0,0,0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,0,0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,2,0,0,0,1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,0,0,2,0,0,0,1,0,0,0"))
                                          (rule "add_literals" (formula "13") (term "0,0,0,0,1,0,0,2,0,0,0,1,0,0,0"))
                                          (rule "add_zero_left" (formula "13") (term "0,0,0,1,0,0,2,0,0,0,1,0,0,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "13") (term "0,0,1,0,0,2,0,0,0,1,0,0,0"))
                                          (rule "add_literals" (formula "13") (term "1,0,0,1,0,0,2,0,0,0,1,0,0,0"))
                                          (rule "times_zero_1" (formula "13") (term "0,0,1,0,0,2,0,0,0,1,0,0,0"))
                                          (rule "add_zero_left" (formula "13") (term "0,1,0,0,2,0,0,0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,1,0,0,0"))
                                          (rule "polySimp_addComm0" (formula "13") (term "0,0,0,1,0,0,0,0,1,0,0,0"))
                                          (rule "replace_known_right" (formula "13") (term "1,0,2,0,0,0,1,0,0,0") (ifseqformula "12"))
                                          (rule "concrete_and_4" (formula "13") (term "0,2,0,0,0,1,0,0,0"))
                                          (rule "ifthenelse_false" (formula "13") (term "2,0,0,0,1,0,0,0"))
                                          (rule "replace_known_right" (formula "13") (term "0,0,0,0,0,1,0,0,0") (ifseqformula "12"))
                                          (rule "concrete_and_2" (formula "13") (term "0,0,0,0,1,0,0,0"))
                                          (rule "ifthenelse_false" (formula "13") (term "0,0,0,1,0,0,0"))
                                          (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "1"))
                                          (rule "concrete_and_3" (formula "13"))
                                          (rule "polySimp_sepPosMonomial" (formula "13") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "13") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1"))
                                          (rule "add_zero_right" (formula "13") (term "1,1"))
                                          (rule "mul_literals" (formula "13") (term "1,1"))
                                          (rule "and_right" (formula "13"))
                                          (branch " Case 1"
                                             (rule "all_right" (formula "13") (inst "sk=j_11_1"))
                                             (rule "imp_right" (formula "13"))
                                             (rule "and_left" (formula "1"))
                                             (rule "inEqSimp_homoInEq0" (formula "15") (term "1,0,2,0"))
                                             (rule "polySimp_addComm1" (formula "15") (term "1,1"))
                                             (rule "polySimp_addComm1" (formula "15") (term "0,1,0,2,0"))
                                             (rule "replace_known_left" (formula "15") (term "0,0,2,0") (ifseqformula "1"))
                                             (rule "concrete_and_1" (formula "15") (term "0,2,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,2,0"))
                                             (rule "add_zero_right" (formula "15") (term "1,0,2,0"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,0,2,0"))
                                             (rule "polySimp_rightDist" (formula "15") (term "1,0,2,0"))
                                             (rule "mul_literals" (formula "15") (term "0,1,0,2,0"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,2,0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "1,1,0,2,0"))
                                             (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                                             (rule "times_zero_1" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "ifthenelse_split" (formula "15") (term "2,0"))
                                             (branch " p_a_lv_0_0.length >= 1 + j_11_1 TRUE"
                                                (rule "ifthenelse_split" (formula "16") (term "0"))
                                                (branch " j_11_1 = i_1 TRUE"
                                                   (rule "polySimp_homoEq" (formula "17"))
                                                   (rule "polySimp_addComm0" (formula "17") (term "0"))
                                                   (rule "apply_eq_rigid" (formula "3") (term "0") (ifseqformula "1"))
                                                   (rule "apply_eq_rigid" (formula "3") (term "0") (ifseqformula "1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "3"))
                                                   (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                                   (rule "add_literals" (formula "3") (term "1,0"))
                                                   (rule "times_zero_1" (formula "3") (term "0"))
                                                   (rule "qeq_literals" (formula "3"))
                                                   (rule "true_left" (formula "3"))
                                                   (rule "apply_eq_rigid" (formula "2") (term "1,1") (ifseqformula "1"))
                                                   (rule "apply_eq_rigid" (formula "14") (term "0,1,0,1,1,0") (ifseqformula "1"))
                                                   (rule "polySimp_pullOutFactor2" (formula "14") (term "0"))
                                                   (rule "add_literals" (formula "14") (term "1,0"))
                                                   (rule "times_zero_1" (formula "14") (term "0"))
                                                   (rule "close_eq" (formula "14"))
                                                   (rule "close_by_true" (formula "14"))
                                                )
                                                (branch " j_11_1 = i_1 FALSE"
                                                   (rule "polySimp_homoEq" (formula "17"))
                                                   (rule "polySimp_addComm0" (formula "17") (term "0"))
                                                   (rule "polySimp_sepPosMonomial" (formula "17"))
                                                   (rule "add_zero_right" (formula "17") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "17") (term "1"))
                                                   (rule "polySimp_elimOne" (formula "17") (term "1"))
                                                   (rule "polySimp_elimOne" (formula "17") (term "0"))
                                                   (rule "inst_all" (formula "17") (term "1,1") (ifseqformula "5"))
                                                   (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
                                                   (rule "concrete_and_1" (formula "1") (term "0"))
                                                   (rule "imp_left" (formula "1"))
                                                   (branch " Case 1"
                                                      (builtin "Decision Procedure Simplify")
                                                   )
                                                   (branch " Case 2"
                                                      (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
                                                      (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "3"))
                                                      (rule "concrete_and_1" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
                                                      (rule "add_zero_right" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                                      (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "2"))
                                                      (rule "ifthenelse_true" (formula "1") (term "0"))
                                                      (rule "polySimp_homoEq" (formula "1"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm0" (formula "1") (term "0"))
                                                      (rule "polySimp_sepPosMonomial" (formula "1"))
                                                      (rule "add_zero_right" (formula "1") (term "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                      (rule "close_goal" (formula "18") (ifseqformula "1"))
                                                   )
                                                )
                                             )
                                             (branch " p_a_lv_0_0.length >= 1 + j_11_1 FALSE"
                                                (rule "inEqSimp_geqRight" (formula "15"))
                                                (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
                                                (rule "mul_literals" (formula "1") (term "0,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "add_zero_right" (formula "1") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "1"))
                                                (rule "polySimp_mulComm0" (formula "7") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                                (rule "add_zero_right" (formula "7") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "7") (term "1"))
                                                (rule "polySimp_elimOne" (formula "7") (term "1"))
                                                (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "3"))
                                                (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "7"))
                                                (rule "ifthenelse_true" (formula "18") (term "0"))
                                                (rule "polySimp_homoEq" (formula "18"))
                                                (rule "polySimp_addComm0" (formula "18") (term "0"))
                                                (rule "apply_eq_rigid" (formula "3") (term "0") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq0" (formula "3"))
                                                (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                                (rule "add_literals" (formula "3") (term "1,0"))
                                                (rule "times_zero_1" (formula "3") (term "0"))
                                                (rule "qeq_literals" (formula "3"))
                                                (rule "true_left" (formula "3"))
                                                (rule "apply_eq_rigid" (formula "1") (term "1") (ifseqformula "6"))
                                                (rule "apply_eq_rigid" (formula "2") (term "0") (ifseqformula "6"))
                                                (rule "apply_eq" (formula "6") (term "0") (ifseqformula "5"))
                                                (rule "inEqSimp_homoInEq1" (formula "6"))
                                                (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                                                (rule "add_literals" (formula "6") (term "1,0"))
                                                (rule "times_zero_1" (formula "6") (term "0"))
                                                (rule "leq_literals" (formula "6"))
                                                (rule "true_left" (formula "6"))
                                                (rule "apply_eq_rigid" (formula "15") (term "0,1,0,1,1,0") (ifseqformula "5"))
                                                (rule "polySimp_pullOutFactor2" (formula "15") (term "0"))
                                                (rule "add_literals" (formula "15") (term "1,0"))
                                                (rule "times_zero_1" (formula "15") (term "0"))
                                                (rule "close_eq" (formula "15"))
                                                (rule "close_by_true" (formula "15"))
                                             )
                                          )
                                          (branch " Case 2"
                                             (rule "inEqSimp_geqRight" (formula "13"))
                                             (rule "mul_literals" (formula "1") (term "0,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "add_zero_right" (formula "1") (term "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                                             (rule "times_zero_1" (formula "4") (term "0,0"))
                                             (rule "add_zero_left" (formula "4") (term "0"))
                                             (rule "qeq_literals" (formula "4"))
                                             (rule "close_by_false" (formula "4"))
                                          )
                                       )
                                       (branch " Null Reference (var_3 = null)"
                                          (builtin "Update Simplification" (formula "14"))
                                          (builtin "Update Simplification" (formula "1"))
                                          (rule "repository_object_non_null" (formula "1"))
                                          (rule "close_by_false" (formula "1"))
                                       )
                                       (branch " Index Out of Bounds (var_3 != null, but i_5 Out of Bounds!)"
                                          (builtin "Update Simplification" (formula "14"))
                                          (builtin "Update Simplification" (formula "1"))
                                          (rule "repository_object_non_null" (formula "1") (term "0,0"))
                                          (rule "concrete_not_2" (formula "1") (term "0"))
                                          (rule "concrete_and_1" (formula "1"))
                                          (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                          (rule "times_zero_1" (formula "1") (term "0,0,0,1"))
                                          (rule "add_zero_left" (formula "1") (term "0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                          (rule "add_zero_right" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "1,1"))
                                          (rule "or_left" (formula "1"))
                                          (branch " p_a_lv_0_0.length <= i_1"
                                             (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "1"))
                                             (rule "apply_eq" (formula "15") (term "1") (ifseqformula "5"))
                                             (rule "apply_eq" (formula "6") (term "0") (ifseqformula "5"))
                                             (rule "inEqSimp_homoInEq1" (formula "6"))
                                             (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                                             (rule "add_literals" (formula "6") (term "1,0"))
                                             (rule "times_zero_1" (formula "6") (term "0"))
                                             (rule "leq_literals" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "apply_eq" (formula "1") (term "0") (ifseqformula "5"))
                                             (rule "inEqSimp_homoInEq0" (formula "1"))
                                             (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                             (rule "add_literals" (formula "1") (term "1,0"))
                                             (rule "times_zero_1" (formula "1") (term "0"))
                                             (rule "qeq_literals" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "apply_eq" (formula "6") (term "0") (ifseqformula "4"))
                                             (rule "apply_eq" (formula "12") (term "15") (ifseqformula "4"))
                                             (rule "apply_eq" (formula "1") (term "0") (ifseqformula "4"))
                                             (rule "inEqSimp_homoInEq1" (formula "1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                             (rule "add_literals" (formula "1") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "1") (term "1,0"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "leq_literals" (formula "1"))
                                             (rule "close_by_false" (formula "1"))
                                          )
                                          (branch " i_1 <= -1"
                                             (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                                             (rule "times_zero_1" (formula "4") (term "0,0"))
                                             (rule "add_zero_left" (formula "4") (term "0"))
                                             (rule "qeq_literals" (formula "4"))
                                             (rule "close_by_false" (formula "4"))
                                          )
                                       )
                                    )
                                 )
                                 (branch " Null Reference (var_4 = null)"
                                    (builtin "Update Simplification" (formula "13"))
                                    (builtin "Update Simplification" (formula "1"))
                                    (rule "close_goal" (formula "11") (ifseqformula "1"))
                                 )
                                 (branch " Index Out of Bounds (var_4 != null, but i_8 Out of Bounds!)"
                                    (builtin "Update Simplification" (formula "13"))
                                    (builtin "Update Simplification" (formula "1"))
                                    (rule "and_left" (formula "1"))
                                    (rule "not_left" (formula "1"))
                                    (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                    (rule "times_zero_1" (formula "1") (term "0,0,0,1"))
                                    (rule "add_zero_left" (formula "1") (term "0,0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,1"))
                                    (rule "add_zero_left" (formula "1") (term "0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0"))
                                    (rule "times_zero_2" (formula "1") (term "1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
                                    (rule "add_zero_right" (formula "1") (term "1,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                    (rule "add_zero_right" (formula "1") (term "1,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "or_left" (formula "1"))
                                    (branch " i_1 <= -1"
                                       (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                                       (rule "times_zero_1" (formula "4") (term "0,0"))
                                       (rule "add_zero_left" (formula "4") (term "0"))
                                       (rule "qeq_literals" (formula "4"))
                                       (rule "close_by_false" (formula "4"))
                                    )
                                    (branch " p_a_lv_0_0.length <= i_1"
                                       (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "1"))
                                       (rule "apply_eq" (formula "14") (term "17") (ifseqformula "5"))
                                       (rule "apply_eq" (formula "8") (term "0") (ifseqformula "5"))
                                       (rule "apply_eq" (formula "2") (term "0") (ifseqformula "5"))
                                       (rule "inEqSimp_homoInEq1" (formula "2"))
                                       (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0"))
                                       (rule "add_zero_right" (formula "2") (term "0"))
                                       (rule "leq_literals" (formula "2"))
                                       (rule "close_by_false" (formula "2"))
                                    )
                                 )
                              )
                              (branch " Null Reference (p_a = null)"
                                 (builtin "Update Simplification" (formula "1"))
                                 (rule "close_goal" (formula "11") (ifseqformula "1"))
                              )
                           )
                        )
                     )
                     (branch " Null Reference (b = null)"
                        (builtin "Update Simplification" (formula "1"))
                        (rule "repository_object_non_null" (formula "1"))
                        (rule "close_by_false" (formula "1"))
                     )
                  )
                  (branch " Null Reference (p_a = null)"
                     (builtin "Update Simplification" (formula "1"))
                     (rule "close_goal" (formula "11") (ifseqformula "1"))
                  )
               )
               (branch " p_a_lv_0_0.length >= 1 + i_1 FALSE"
                  (rule "inEqSimp_geqRight" (formula "10"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "add_zero_right" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1"))
                  (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "1"))
                  (rule "apply_eq" (formula "14") (term "14") (ifseqformula "5"))
                  (rule "apply_eq" (formula "14") (term "1") (ifseqformula "5"))
                  (rule "apply_eq" (formula "1") (term "0") (ifseqformula "5"))
                  (rule "inEqSimp_homoInEq0" (formula "1"))
                  (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,0"))
                  (rule "times_zero_1" (formula "1") (term "0"))
                  (rule "qeq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "apply_eq" (formula "5") (term "0") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "5"))
                  (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                  (rule "add_literals" (formula "5") (term "1,0"))
                  (rule "times_zero_1" (formula "5") (term "0"))
                  (rule "leq_literals" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "apply_eq" (formula "1") (term "9") (ifseqformula "4"))
                  (rule "apply_eq" (formula "6") (term "0") (ifseqformula "4"))
                  (rule "apply_eq" (formula "11") (term "1,1,1,15") (ifseqformula "4"))
                  (rule "apply_eq" (formula "1") (term "1,1,1,10") (ifseqformula "4"))
                  (rule "apply_eq" (formula "6") (term "1,0,1,0,0") (ifseqformula "4"))
                  (rule "apply_eq" (formula "2") (term "1,1,1,0,1,1,0") (ifseqformula "4"))
                  (rule "apply_eq" (formula "2") (term "1,0,1,2,0,1,0") (ifseqformula "4"))
                  (rule "apply_eq" (formula "2") (term "1,0,1,1,0,1,0") (ifseqformula "4"))
                  (rule "apply_eq" (formula "2") (term "1,1,0,0,0,0,1,0") (ifseqformula "4"))
                  (rule "make_insert_eq_nonrigid" (formula "4"))
                  (rule "eliminate_variable_declaration" (formula "11") (term "1,1,2,1,0,0,19"))
                  (rule "assignment_normalassign" (formula "1") (term "14"))
                  (builtin "Update Simplification" (formula "1"))
                  (rule "assignment_normalassign" (formula "11") (term "1,1,2,1,0,0,19"))
                  (rule "throw_in_block_ignore_trail" (formula "11") (term "2,1,2,1,0,0,19"))
                  (rule "method_call_empty" (formula "1") (term "15"))
                  (builtin "Update Simplification" (formula "1"))
                  (rule "assignment_normalassign" (formula "11") (term "1,1,1,2,1,0,0,19"))
                  (rule "throw_single_partial" (formula "11") (term "2,1,2,1,0,0,19"))
                  (rule "empty_modality" (formula "1") (term "14"))
                  (builtin "Update Simplification" (formula "1"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "close_by_false" (formula "1"))
               )
            )
            (branch " Null Reference (p_a = null)"
               (builtin "Update Simplification" (formula "2"))
               (builtin "Update Simplification" (formula "1"))
               (rule "close_goal" (formula "11") (ifseqformula "1"))
            )
         )
         (branch " Use Case"
            (builtin "Update Simplification" (formula "8"))
            (rule "false_to_not_true" (formula "8") (term "0,0,23,1"))
            (rule "imp_right" (formula "8"))
            (rule "and_left" (formula "1"))
            (rule "and_left" (formula "2"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,1,0,0,20"))
            (rule "inEqSimp_homoInEq0" (formula "11") (term "0,19"))
            (rule "times_zero_2" (formula "11") (term "1,0,0,19"))
            (rule "add_zero_right" (formula "11") (term "0,0,19"))
            (rule "inEqSimp_homoInEq0" (formula "1") (term "0,16"))
            (rule "times_zero_2" (formula "1") (term "1,0,0,16"))
            (rule "add_zero_right" (formula "1") (term "0,0,16"))
            (rule "inEqSimp_homoInEq0" (formula "3"))
            (rule "polySimp_elimSub" (formula "11") (term "1,1,19"))
            (rule "mul_literals" (formula "11") (term "1,1,1,19"))
            (rule "polySimp_elimSub" (formula "1") (term "1,1,16"))
            (rule "mul_literals" (formula "1") (term "1,1,1,16"))
            (rule "polySimp_homoEq" (formula "1") (term "1,1,0,0,20"))
            (rule "polySimp_elimSub" (formula "1") (term "1,0,0,1,1,0,0,20"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,1,0,1,0,0,20"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,1,0,0,20"))
            (rule "polySimp_addComm0" (formula "3") (term "0"))
            (rule "polySimp_addComm0" (formula "11") (term "1,1,19"))
            (builtin "Update Simplification" (formula "11"))
            (rule "polySimp_addComm0" (formula "1") (term "1,1,16"))
            (builtin "Update Simplification" (formula "1"))
            (rule "polySimp_addComm0" (formula "1") (term "0,1,1,0,0,16"))
            (rule "polySimp_addComm0" (formula "1") (term "0,0,1,0,1,0,0,16"))
            (rule "polySimp_addComm0" (formula "1") (term "1,1,1,1,0,1,1,0,0,16"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1,1,0,1,1,0,0,16"))
            (rule "mul_literals" (formula "1") (term "0,1,1,1,0,1,1,0,0,16"))
            (rule "polySimp_addComm0" (formula "1") (term "1,1,0,1,1,0,0,16"))
            (rule "inEqSimp_sepPosMonomial1" (formula "3"))
            (rule "add_zero_right" (formula "3") (term "1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1"))
            (rule "polySimp_elimOne" (formula "3") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,1,0,0,16"))
            (rule "add_zero_right" (formula "1") (term "1,1,0,1,0,0,16"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,1,0,0,16"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1,0,1,0,0,16"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,1,0,0,16"))
            (rule "mul_literals" (formula "1") (term "0,1,1,0,1,0,0,16"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,1,0,0,16"))
            (rule "polySimp_sepPosMonomial" (formula "1") (term "1,1,0,0,16"))
            (rule "add_zero_right" (formula "1") (term "1,1,1,0,0,16"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,16"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,16"))
            (rule "polySimp_elimOne" (formula "1") (term "0,1,1,0,0,16"))
            (rule "method_call_return_ignore_trail" (formula "11") (term "1,0,19"))
            (rule "eliminate_variable_declaration" (formula "1") (term "16"))
            (rule "assignment_normalassign" (formula "11") (term "1,0,19"))
            (rule "empty_modality" (formula "1") (term "16"))
            (builtin "Update Simplification" (formula "1"))
            (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0,0,0,1,0"))
            (rule "polySimp_homoEq" (formula "1") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0,0,0,1,0,1,0"))
            (rule "polySimp_addComm1" (formula "1") (term "1,2,0,1,0,1,0"))
            (rule "polySimp_addComm1" (formula "1") (term "1,1,0,1,0,1,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0,0,1,0,1,0"))
            (rule "polySimp_addComm1" (formula "1") (term "1,1,0,1,0,0,0,1,0,1,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,0,0,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0,1,0,0,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1,0,1,0,0,0,0,0,1,0"))
            (rule "mul_literals" (formula "1") (term "0,0,1,0,1,0,0,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,0,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0"))
            (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,1,0,0,0,0,0,1,0"))
            (rule "add_literals" (formula "1") (term "1,0,0,1,0,0,0,0,0,1,0"))
            (rule "times_zero_1" (formula "1") (term "0,0,1,0,0,0,0,0,1,0"))
            (rule "add_zero_left" (formula "1") (term "0,1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0,0,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,0,0,0,0,1,0"))
            (rule "times_zero_2" (formula "1") (term "1,1,0,0,0,0,0,0,1,0"))
            (rule "add_zero_right" (formula "1") (term "1,0,0,0,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,0,0,0,0,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0,1,0"))
            (rule "polySimp_sepNegMonomial" (formula "1") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
            (rule "times_zero_2" (formula "1") (term "1,1,1,0"))
            (rule "add_zero_right" (formula "1") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
            (rule "variable_declaration_allmodal" (formula "11") (term "19"))
            (rule "method_call_empty" (formula "11") (term "1,1,0,19"))
            (rule "try_empty" (formula "11") (term "1,1,0,19"))
            (rule "empty_modality" (formula "11") (term "1,1,0,19"))
            (rule "eliminate_variable_declaration" (formula "11") (term "19"))
            (rule "compound_less_than_comparison_2" (formula "11") (term "19") (inst "#v0=i_1") (inst "#v1=i_2"))
            (rule "variable_declaration_allmodal" (formula "11") (term "19"))
            (rule "eliminate_variable_declaration" (formula "11") (term "19"))
            (rule "assignment_normalassign" (formula "11") (term "19"))
            (builtin "Update Simplification" (formula "11"))
            (rule "variable_declaration_allmodal" (formula "11") (term "19"))
            (rule "eliminate_variable_declaration" (formula "11") (term "19"))
            (rule "assignment_read_attribute" (formula "11") (term "19"))
            (branch " Normal Execution (p_a != null)"
               (builtin "Update Simplification" (formula "12"))
               (builtin "Update Simplification" (formula "11"))
               (rule "less_than_comparison_new" (formula "11") (term "19"))
               (builtin "Update Simplification" (formula "11"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
               (rule "polySimp_mulComm0" (formula "11") (term "0,0,0,0"))
               (rule "polySimp_addComm0" (formula "11") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "11") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
               (rule "times_zero_2" (formula "11") (term "1,1,0"))
               (rule "add_zero_right" (formula "11") (term "1,0"))
               (rule "polySimp_elimOne" (formula "11") (term "0,0"))
               (rule "ifthenelse_split_for" (formula "11"))
               (branch " p_a_lv_0_0.length >= 1 + i_0 TRUE"
                  (rule "assignment_normalassign" (formula "12") (term "17"))
                  (builtin "Update Simplification" (formula "12"))
                  (rule "method_call_empty" (formula "12") (term "18"))
                  (builtin "Update Simplification" (formula "12"))
                  (rule "empty_modality" (formula "12") (term "17"))
                  (builtin "Update Simplification" (formula "12"))
                  (rule "boolean_equal" (formula "12") (term "0,0"))
                  (rule "close_eq" (formula "12") (term "0,0,1"))
                  (rule "close_eq" (formula "12") (term "1,1"))
                  (rule "concrete_not_1" (formula "12") (term "0"))
                  (rule "concrete_and_1" (formula "12") (term "0,1"))
                  (rule "concrete_impl_2" (formula "12"))
                  (rule "close_by_true" (formula "12"))
               )
               (branch " p_a_lv_0_0.length >= 1 + i_0 FALSE"
                  (rule "inEqSimp_geqRight" (formula "11"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "add_zero_right" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1"))
                  (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
                  (rule "apply_eq" (formula "13") (term "1") (ifseqformula "4"))
                  (rule "apply_eq" (formula "5") (term "0") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "5"))
                  (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                  (rule "add_literals" (formula "5") (term "1,0"))
                  (rule "times_zero_1" (formula "5") (term "0"))
                  (rule "leq_literals" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "apply_eq" (formula "12") (term "12") (ifseqformula "4"))
                  (rule "apply_eq" (formula "6") (term "0") (ifseqformula "4"))
                  (rule "apply_eq" (formula "1") (term "0") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq0" (formula "1"))
                  (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,0"))
                  (rule "times_zero_1" (formula "1") (term "0"))
                  (rule "qeq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "apply_eq" (formula "10") (term "1,1,1,13") (ifseqformula "3"))
                  (rule "apply_eq" (formula "5") (term "1,0,1,0,0") (ifseqformula "3"))
                  (rule "apply_eq" (formula "1") (term "1,0,1,2,0,1,0") (ifseqformula "3"))
                  (rule "apply_eq" (formula "1") (term "1,1,1,0,1,1,0") (ifseqformula "3"))
                  (rule "apply_eq" (formula "1") (term "1,0,1,1,0,1,0") (ifseqformula "3"))
                  (rule "apply_eq" (formula "1") (term "1,1,0,0,0,0,1,0") (ifseqformula "3"))
                  (rule "make_insert_eq_nonrigid" (formula "3"))
                  (rule "assignment_normalassign" (formula "10") (term "17"))
                  (builtin "Update Simplification" (formula "10"))
                  (rule "method_call_empty" (formula "10") (term "18"))
                  (builtin "Update Simplification" (formula "10"))
                  (rule "empty_modality" (formula "10") (term "17"))
                  (builtin "Update Simplification" (formula "10"))
                  (rule "boolean_not_equal_2" (formula "10") (term "0,0"))
                  (rule "close_eq" (formula "10") (term "0,0,1"))
                  (rule "close_eq" (formula "10") (term "1,1"))
                  (rule "concrete_not_2" (formula "10") (term "0"))
                  (rule "concrete_and_1" (formula "10") (term "0,1"))
                  (rule "concrete_impl_1" (formula "10"))
                  (rule "concrete_and_3" (formula "10"))
                  (rule "all_right" (formula "10") (inst "sk=j_10_2_0"))
                  (rule "imp_right" (formula "10"))
                  (rule "and_left" (formula "1"))
                  (rule "replace_known_left" (formula "12") (term "1,0,0") (ifseqformula "2"))
                  (rule "concrete_and_3" (formula "12") (term "0,0"))
                  (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "1"))
                  (rule "ifthenelse_true" (formula "12") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                  (rule "times_zero_1" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "add_zero_right" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inst_all" (formula "13") (term "1,0") (ifseqformula "4"))
                  (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
                  (rule "concrete_and_1" (formula "1") (term "0"))
                  (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "4"))
                  (rule "concrete_impl_1" (formula "1"))
                  (rule "replace_known_left" (formula "1") (term "1,0,1") (ifseqformula "4"))
                  (rule "concrete_and_3" (formula "1") (term "0,1"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "4"))
                  (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "3"))
                  (rule "concrete_and_1" (formula "1") (term "0,0"))
                  (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "3"))
                  (rule "ifthenelse_true" (formula "1") (term "1"))
                  (rule "make_insert_eq_nonrigid" (formula "1"))
                  (rule "ifthenelse_split" (formula "1") (term "0"))
                  (branch " p_a_lv_0_0 = int[]::<get>(int[].<nextToCreate>) TRUE"
                     (rule "make_insert_eq_nonrigid" (formula "1"))
                     (rule "make_insert_eq_nonrigid" (formula "2"))
                     (rule "replace_known_left" (formula "6") (term "1,0,0,1,0") (ifseqformula "1"))
                     (rule "concrete_and_3" (formula "6") (term "0,0,1,0"))
                     (rule "apply_eq" (formula "13") (term "0") (ifseqformula "1"))
                     (rule "repository_object_non_null" (formula "13"))
                     (rule "false_right" (formula "13"))
                     (rule "apply_eq" (formula "8") (term "0,0") (ifseqformula "1"))
                     (rule "polySimp_homoEq" (formula "8"))
                     (rule "polySimp_addComm0" (formula "8") (term "0"))
                     (rule "apply_eq" (formula "11") (term "0,0") (ifseqformula "1"))
                     (rule "apply_eq" (formula "10") (term "0,0,0") (ifseqformula "1"))
                     (rule "apply_eq" (formula "6") (term "0,2,0,1,0") (ifseqformula "1"))
                     (rule "polySimp_sepPosMonomial" (formula "8"))
                     (rule "add_zero_right" (formula "8") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1"))
                     (rule "polySimp_elimOne" (formula "8") (term "1"))
                     (rule "polySimp_elimOne" (formula "8") (term "0"))
                     (rule "apply_eq" (formula "3") (term "0") (ifseqformula "8"))
                     (rule "apply_eq" (formula "7") (term "0") (ifseqformula "8"))
                     (rule "apply_eq" (formula "5") (term "1,1") (ifseqformula "8"))
                     (rule "apply_eq" (formula "2") (term "1,0,1,0") (ifseqformula "8"))
                     (rule "apply_eq" (formula "10") (term "1,0,1,0,0") (ifseqformula "8"))
                     (rule "apply_eq" (formula "6") (term "1,1,1,0,0") (ifseqformula "8"))
                     (rule "apply_eq" (formula "6") (term "1,0,1,2,0,1,0") (ifseqformula "8"))
                     (rule "apply_eq" (formula "6") (term "1,1,0,0,0,1,0") (ifseqformula "8"))
                     (rule "polySimp_homoEq" (formula "6") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "6") (term "0,1,0"))
                     (rule "apply_eq" (formula "6") (term "1,1,1,0,1,0,1,0") (ifseqformula "8"))
                     (rule "polySimp_addComm0" (formula "6") (term "0,1,0"))
                     (rule "apply_eq" (formula "6") (term "1,0,1,1,0,1,0,1,0") (ifseqformula "8"))
                     (rule "polySimp_sepNegMonomial" (formula "6") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "0,1,0"))
                     (rule "times_zero_2" (formula "6") (term "1,1,1,0"))
                     (rule "add_zero_right" (formula "6") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "6") (term "0,1,0"))
                     (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
                     (rule "times_zero_1" (formula "4") (term "0,0"))
                     (rule "add_zero_left" (formula "4") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "add_zero_right" (formula "4") (term "1"))
                     (rule "mul_literals" (formula "4") (term "1"))
                     (rule "make_insert_eq_nonrigid" (formula "11"))
                     (rule "make_insert_eq_nonrigid" (formula "8"))
                     (rule "make_insert_eq_nonrigid" (formula "2"))
                     (rule "make_insert_eq_nonrigid" (formula "1"))
                     (rule "make_insert_eq_nonrigid" (formula "2"))
                     (rule "make_insert_eq_nonrigid" (formula "11"))
                     (rule "make_insert_eq_nonrigid" (formula "9"))
                     (rule "make_insert_eq_nonrigid" (formula "8"))
                     (rule "commute_eq" (formula "1"))
                     (rule "apply_eq" (formula "11") (term "0,0") (ifseqformula "1"))
                     (rule "system_invariant_for_created_2a_sym" (formula "11") (ifseqformula "1") (ifseqformula "12"))
                     (rule "and_left" (formula "11"))
                     (rule "inEqSimp_ltToLeq" (formula "12"))
                     (rule "polySimp_mulComm0" (formula "12") (term "0,0,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "12") (term "0"))
                     (rule "add_literals" (formula "12") (term "1,1,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0"))
                     (rule "add_zero_right" (formula "12") (term "0"))
                     (rule "leq_literals" (formula "12"))
                     (rule "close_by_false" (formula "12"))
                  )
                  (branch " p_a_lv_0_0 = int[]::<get>(int[].<nextToCreate>) FALSE"
                     (rule "make_insert_eq_nonrigid" (formula "1"))
                     (builtin "Decision Procedure Simplify")
                  )
               )
            )
            (branch " Null Reference (p_a = null)"
               (builtin "Update Simplification" (formula "12"))
               (builtin "Update Simplification" (formula "1"))
               (rule "close_goal" (formula "10") (ifseqformula "1"))
            )
         )
      )
      (branch " Null Reference (newObject = null)"
         (builtin "Update Simplification" (formula "9"))
         (builtin "Update Simplification" (formula "1"))
         (rule "repository_object_non_null" (formula "1"))
         (rule "close_by_false" (formula "1"))
      )
   )
)
(branch " Null Reference (p_a = null)"
   (builtin "Update Simplification" (formula "1"))
   (rule "close_goal" (formula "7") (ifseqformula "1"))
)
)

}
