\settings {
"#Proof-Settings-Config-File
#Wed May 10 18:03:57 CEST 2006
[General]SoundNotification=false
[View]FontIndex=5
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[General]SuggestiveVarNames=false
[View]ShowWholeTaclet=true
[General]ProofAssistant=false
[View]MaxTooltipLines=40
[SimultaneousUpdateSimplifier]EagerSimplification=true
[General]StupidMode=true
[Strategy]MaximumNumberOfAutomaticApplications=20000

[Choice]DefaultChoices=transactions-transactions\:transactionsOn , dfaPolicy-dfaPolicy\:on , programRules-programRules\:Java , throughout-throughout\:toutOn , transactionAbort-transactionAbort\:abortOn , initialisation-initialisation\:disableStaticInitialisation , intRules-intRules\:arithmeticSemanticsIgnoringOF , nullPointerPolicy-nullPointerPolicy\:nullCheck
[OCLRef]Null=true
[OCLRef]ExcThrown=true
[Model]Source=1
[Choice]Choices=transactions-transactions\:transactionsOff-transactions\:transactionsOn , dfaPolicy-dfaPolicy\:on-dfaPolicy\:off , programRules-programRules\:ODL-programRules\:Java , throughout-throughout\:toutOff-throughout\:toutOn , initialisation-initialisation\:disableStaticInitialisation-initialisation\:enableStaticInitialisation , transactionAbort-transactionAbort\:abortOff-transactionAbort\:abortOn , intRules-intRules\:arithmeticSemanticsCheckingOF-intRules\:javaSemantics-intRules\:arithmeticSemanticsIgnoringOF , nullPointerPolicy-nullPointerPolicy\:noNullCheck-nullPointerPolicy\:nullCheck
[OCLRef]Array=true
[DecisionProcedure]=SIMPLIFY
[General]OuterRenaming=false
[Strategy]ActiveStrategy=Simple JavaCardDL without expanding loops and method bodies
"
}

\javaSource "aroth_java";
\problem {
   LPS
-> \<{
       Object a =new Object ();
       Object b =new Object ();
       Object c =new Object ();
     }\> LPS

}

\proof {
(keyLog "0" (keyUser "richard" ) (keyVersion "schlagerBubelLPS.5"))

(branch "dummy ID"
(rule "imp_right" (formula "1"))
(rule "variable_declaration_allmodal" (formula "2"))
(rule "eliminate_variable_declaration" (formula "2"))
(rule "object_creation_assignment" (formula "2") (inst "#v0=object"))
(rule "variable_declaration_allmodal" (formula "2"))
(rule "eliminate_variable_declaration" (formula "2"))
(rule "static_method_call_static_with_assignment_via_typereference" (formula "2") (inst "#v0=object_1"))
(rule "eliminate_variable_declaration" (formula "2"))
(rule "method_body_expand" (formula "2"))
(rule "eliminate_variable_declaration" (formula "2"))
(rule "static_method_call_static_with_assignment_via_typereference" (formula "2") (inst "#v0=object_2"))
(rule "eliminate_variable_declaration" (formula "2"))
(rule "instance_allocation_contract" (formula "2"))
(builtin "Update Simplification" (formula "2"))
(rule "polySimp_addComm0" (formula "2") (term "1"))
(rule "empty_block" (formula "2") (term "4"))
(rule "assignment_normalassign" (formula "2") (term "4"))
(builtin "Update Simplification" (formula "2"))
(rule "method_call" (formula "2") (term "5"))
(branch " Normal Execution (__NEW__ != null )"
   (builtin "Update Simplification" (formula "2"))
   (rule "repository_object_non_null" (formula "2"))
   (rule "false_right" (formula "2"))
   (rule "method_body_expand" (formula "2") (term "5"))
   (rule "assignment_normalassign" (formula "2") (term "5"))
   (builtin "Update Simplification" (formula "2"))
   (rule "assignment_normalassign" (formula "2") (term "7"))
   (builtin "Update Simplification" (formula "2"))
   (rule "method_call_within_class" (formula "2") (term "9"))
   (rule "method_body_expand" (formula "2") (term "9"))
   (rule "method_call_empty" (formula "2") (term "9"))
   (rule "empty_block" (formula "2") (term "9"))
   (rule "method_call_return_ignore_result" (formula "2") (term "9"))
   (rule "empty_block" (formula "2") (term "9"))
   (rule "method_call_return_ignore_trail" (formula "2") (term "9"))
   (rule "assignment_normalassign" (formula "2") (term "9"))
   (builtin "Update Simplification" (formula "2"))
   (rule "method_call_empty" (formula "2") (term "10"))
   (rule "empty_block" (formula "2") (term "10"))
   (rule "assignment_normalassign" (formula "2") (term "10"))
   (builtin "Update Simplification" (formula "2"))
   (rule "method_body_expand" (formula "2") (term "11"))
   (rule "method_call_empty" (formula "2") (term "11"))
   (rule "empty_block" (formula "2") (term "11"))
   (rule "assignment_write_attribute" (formula "2") (term "11"))
   (branch " Normal Execution (object != null)"
      (builtin "Update Simplification" (formula "3"))
      (builtin "Update Simplification" (formula "2"))
      (rule "repository_object_non_null" (formula "2"))
      (rule "false_right" (formula "2"))
      (rule "assignment_normalassign" (formula "2") (term "11"))
      (builtin "Update Simplification" (formula "2"))
      (rule "variable_declaration_allmodal" (formula "2") (term "12"))
      (rule "eliminate_variable_declaration" (formula "2") (term "12"))
      (rule "object_creation_assignment" (formula "2") (term "12") (inst "#v0=object"))
      (rule "variable_declaration_allmodal" (formula "2") (term "12"))
      (rule "eliminate_variable_declaration" (formula "2") (term "12"))
      (rule "static_method_call_static_with_assignment_via_typereference" (formula "2") (term "12") (inst "#v0=object_4"))
      (rule "eliminate_variable_declaration" (formula "2") (term "12"))
      (rule "method_body_expand" (formula "2") (term "12"))
      (rule "eliminate_variable_declaration" (formula "2") (term "12"))
      (rule "static_method_call_static_with_assignment_via_typereference" (formula "2") (term "12") (inst "#v0=object_5"))
      (rule "eliminate_variable_declaration" (formula "2") (term "12"))
      (rule "instance_allocation_contract" (formula "2") (term "12"))
      (builtin "Update Simplification" (formula "2"))
      (rule "polySimp_addComm1" (formula "2") (term "6"))
      (rule "add_literals" (formula "2") (term "0,6"))
      (rule "empty_block" (formula "2") (term "15"))
      (rule "assignment_normalassign" (formula "2") (term "15"))
      (builtin "Update Simplification" (formula "2"))
      (rule "method_call" (formula "2") (term "16"))
      (branch " Normal Execution (__NEW___1 != null )"
         (builtin "Update Simplification" (formula "2"))
         (rule "repository_object_non_null" (formula "2"))
         (rule "false_right" (formula "2"))
         (rule "method_body_expand" (formula "2") (term "16"))
         (rule "assignment_normalassign" (formula "2") (term "16"))
         (builtin "Update Simplification" (formula "2"))
         (rule "assignment_normalassign" (formula "2") (term "18"))
         (builtin "Update Simplification" (formula "2"))
         (rule "method_call_within_class" (formula "2") (term "20"))
         (rule "method_body_expand" (formula "2") (term "20"))
         (rule "method_call_empty" (formula "2") (term "20"))
         (rule "empty_block" (formula "2") (term "20"))
         (rule "method_call_return_ignore_result" (formula "2") (term "20"))
         (rule "empty_block" (formula "2") (term "20"))
         (rule "method_call_return_ignore_trail" (formula "2") (term "20"))
         (rule "assignment_normalassign" (formula "2") (term "20"))
         (builtin "Update Simplification" (formula "2"))
         (rule "method_call_empty" (formula "2") (term "21"))
         (rule "empty_block" (formula "2") (term "21"))
         (rule "assignment_normalassign" (formula "2") (term "21"))
         (builtin "Update Simplification" (formula "2"))
         (rule "method_body_expand" (formula "2") (term "22"))
         (rule "method_call_empty" (formula "2") (term "22"))
         (rule "empty_block" (formula "2") (term "22"))
         (rule "assignment_write_attribute" (formula "2") (term "22"))
         (branch " Normal Execution (object_3 != null)"
            (builtin "Update Simplification" (formula "3"))
            (builtin "Update Simplification" (formula "2"))
            (rule "repository_object_non_null" (formula "2"))
            (rule "false_right" (formula "2"))
            (rule "assignment_normalassign" (formula "2") (term "22"))
            (builtin "Update Simplification" (formula "2"))
            (rule "variable_declaration_allmodal" (formula "2") (term "23"))
            (rule "eliminate_variable_declaration" (formula "2") (term "23"))
            (rule "object_creation_assignment" (formula "2") (term "23") (inst "#v0=object"))
            (rule "variable_declaration_allmodal" (formula "2") (term "23"))
            (rule "eliminate_variable_declaration" (formula "2") (term "23"))
            (rule "static_method_call_static_with_assignment_via_typereference" (formula "2") (term "23") (inst "#v0=object_7"))
            (rule "eliminate_variable_declaration" (formula "2") (term "23"))
            (rule "method_body_expand" (formula "2") (term "23"))
            (rule "eliminate_variable_declaration" (formula "2") (term "23"))
            (rule "static_method_call_static_with_assignment_via_typereference" (formula "2") (term "23") (inst "#v0=object_8"))
            (rule "eliminate_variable_declaration" (formula "2") (term "23"))
            (rule "instance_allocation_contract" (formula "2") (term "23"))
            (builtin "Update Simplification" (formula "2"))
            (rule "polySimp_addComm1" (formula "2") (term "11"))
            (rule "add_literals" (formula "2") (term "0,11"))
            (rule "empty_block" (formula "2") (term "26"))
            (rule "assignment_normalassign" (formula "2") (term "26"))
            (builtin "Update Simplification" (formula "2"))
            (rule "method_call" (formula "2") (term "27"))
            (branch " Normal Execution (__NEW___2 != null )"
               (builtin "Update Simplification" (formula "2"))
               (rule "repository_object_non_null" (formula "2"))
               (rule "false_right" (formula "2"))
               (rule "method_body_expand" (formula "2") (term "27"))
               (rule "assignment_normalassign" (formula "2") (term "27"))
               (builtin "Update Simplification" (formula "2"))
               (rule "assignment_normalassign" (formula "2") (term "29"))
               (builtin "Update Simplification" (formula "2"))
               (rule "method_call_within_class" (formula "2") (term "31"))
               (rule "method_body_expand" (formula "2") (term "31"))
               (rule "method_call_empty" (formula "2") (term "31"))
               (rule "empty_block" (formula "2") (term "31"))
               (rule "method_call_return_ignore_result" (formula "2") (term "31"))
               (rule "empty_block" (formula "2") (term "31"))
               (rule "method_call_return_ignore_trail" (formula "2") (term "31"))
               (rule "assignment_normalassign" (formula "2") (term "31"))
               (builtin "Update Simplification" (formula "2"))
               (rule "method_call_empty" (formula "2") (term "32"))
               (rule "empty_block" (formula "2") (term "32"))
               (rule "assignment_normalassign" (formula "2") (term "32"))
               (builtin "Update Simplification" (formula "2"))
               (rule "method_body_expand" (formula "2") (term "33"))
               (rule "method_call_empty" (formula "2") (term "33"))
               (rule "empty_block" (formula "2") (term "33"))
               (rule "assignment_write_attribute" (formula "2") (term "33"))
               (branch " Normal Execution (object_6 != null)"
                  (builtin "Update Simplification" (formula "3"))
                  (builtin "Update Simplification" (formula "2"))
                  (rule "repository_object_non_null" (formula "2"))
                  (rule "false_right" (formula "2"))
                  (rule "assignment_normalassign" (formula "2") (term "33"))
                  (builtin "Update Simplification" (formula "2"))
                  (rule "empty_modality" (formula "2") (term "34"))
                  (rule "lps_axiom_succ" (formula "2"))
                  (builtin "Update Simplification" (formula "2"))
                  (rule "hide_right" (formula "3"))
                  (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0,0,1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "2") (term "0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0"))
                  (rule "add_zero_right" (formula "2") (term "1,1,0"))
                  (rule "mul_literals" (formula "2") (term "1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "2") (term "1,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0,0,0"))
                  (rule "all_unused" (formula "2") (term "1"))
                  (rule "concrete_and_3" (formula "2"))
                  (rule "and_right" (formula "2"))
                  (branch " Case 1"
                     (rule "all_right" (formula "2") (inst "sk=o_0"))
                     (rule "commute_eq" (formula "2") (term "1,0,1"))
                     (rule "equiv_right" (formula "2"))
                     (branch " Case 1"
                        (rule "and_left" (formula "1"))
                        (rule "make_insert_eq_nonrigid" (formula "2"))
                        (rule "make_insert_eq" (formula "2"))
                        (rule "make_insert_eq_nonrigid" (formula "1"))
                        (rule "ifthenelse_split" (formula "1") (term "2,2,0"))
                        (branch "   o_0
= java.lang.Object::<get>(java.lang.Object.<nextToCreate>) TRUE"
                           (rule "apply_eq" (formula "3") (term "0,0") (ifseqformula "1"))
                           (rule "exact_instance_definition_known" (formula "3") (term "0"))
                           (rule "boolean_equal" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "apply_eq" (formula "4") (term "1,1,0") (ifseqformula "1"))
                           (rule "same_object_base" (formula "4") (term "1,0"))
                           (rule "apply_eq" (formula "2") (term "0,0,0") (ifseqformula "1"))
                           (rule "same_object_base" (formula "2") (term "0,0"))
                           (rule "polySimp_homoEq" (formula "2") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
                           (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,0"))
                           (rule "equal_literals" (formula "2") (term "0,0"))
                           (rule "ifthenelse_false" (formula "2") (term "0"))
                           (rule "apply_eq" (formula "2") (term "0,0,0") (ifseqformula "1"))
                           (rule "same_object_base" (formula "2") (term "0,0"))
                           (rule "polySimp_homoEq" (formula "2") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
                           (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,0"))
                           (rule "equal_literals" (formula "2") (term "0,0"))
                           (rule "ifthenelse_false" (formula "2") (term "0"))
                           (rule "boolean_equal" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "make_insert_eq_nonrigid" (formula "1"))
                           (rule "inst_ex" (formula "3") (term "1,1,0") (ifseqformula "3"))
                           (rule "close_eq" (formula "3") (term "1"))
                           (rule "concrete_and_3" (formula "3"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,1"))
                           (rule "add_literals" (formula "3") (term "1,1,0,1"))
                           (rule "times_zero_1" (formula "3") (term "1,0,1"))
                           (rule "add_zero_right" (formula "3") (term "0,1"))
                           (rule "qeq_literals" (formula "3") (term "1"))
                           (rule "concrete_and_3" (formula "3"))
                           (rule "inEqSimp_geqRight" (formula "3"))
                           (rule "times_zero_1" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "add_zero_right" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "nextToCreate_non_negative" (formula "1") (term "0") (ifseqformula "3"))
                           (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                           (rule "times_zero_1" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "qeq_literals" (formula "1"))
                           (rule "close_by_false" (formula "1"))
                        )
                        (branch "   o_0
= java.lang.Object::<get>(java.lang.Object.<nextToCreate>) FALSE"
                           (rule "make_insert_eq_nonrigid" (formula "1"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch "   o_0
= java.lang.Object::<get>(  2
                          + java.lang.Object.<nextToCreate>) TRUE"
                              (rule "boolean_equal" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "apply_eq" (formula "4") (term "0") (ifseqformula "1"))
                              (rule "same_object_base" (formula "4"))
                              (rule "polySimp_homoEq" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                              (rule "mul_literals" (formula "4") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0"))
                              (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                              (rule "add_literals" (formula "4") (term "1,1,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0"))
                              (rule "add_zero_right" (formula "4") (term "0"))
                              (rule "equal_literals" (formula "4"))
                              (rule "false_right" (formula "4"))
                              (rule "apply_eq" (formula "2") (term "0,0") (ifseqformula "1"))
                              (rule "exact_instance_definition_known" (formula "2") (term "0"))
                              (rule "boolean_equal" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "apply_eq" (formula "3") (term "1,1,0") (ifseqformula "1"))
                              (rule "same_object_base" (formula "3") (term "1,0"))
                              (rule "make_insert_eq_nonrigid" (formula "1"))
                              (rule "inst_ex" (formula "3") (term "1,1,0") (ifseqformula "3"))
                              (rule "close_eq" (formula "3") (term "1"))
                              (rule "concrete_and_3" (formula "3"))
                              (rule "inEqSimp_homoInEq0" (formula "3") (term "1"))
                              (rule "polySimp_pullOutFactor1" (formula "3") (term "0,1"))
                              (rule "add_literals" (formula "3") (term "1,0,1"))
                              (rule "times_zero_1" (formula "3") (term "0,1"))
                              (rule "qeq_literals" (formula "3") (term "1"))
                              (rule "concrete_and_3" (formula "3"))
                              (rule "inEqSimp_geqRight" (formula "3"))
                              (rule "times_zero_1" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "add_zero_right" (formula "1") (term "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "nextToCreate_non_negative" (formula "1") (term "0") (ifseqformula "3"))
                              (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                              (rule "times_zero_1" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "qeq_literals" (formula "1"))
                              (rule "close_by_false" (formula "1"))
                           )
                           (branch "   o_0
= java.lang.Object::<get>(  2
                          + java.lang.Object.<nextToCreate>) FALSE"
                              (rule "make_insert_eq_nonrigid" (formula "1"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch "   o_0
= java.lang.Object::<get>(  1
                          + java.lang.Object.<nextToCreate>) TRUE"
                                 (rule "boolean_equal" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "apply_eq" (formula "5") (term "0") (ifseqformula "1"))
                                 (rule "same_object_base" (formula "5"))
                                 (rule "polySimp_homoEq" (formula "5"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                 (rule "polySimp_addComm0" (formula "5") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0"))
                                 (rule "add_zero_right" (formula "5") (term "0"))
                                 (rule "equal_literals" (formula "5"))
                                 (rule "false_right" (formula "5"))
                                 (rule "apply_eq" (formula "4") (term "0") (ifseqformula "1"))
                                 (rule "same_object_base" (formula "4"))
                                 (rule "polySimp_homoEq" (formula "4"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                                 (rule "add_literals" (formula "4") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "4") (term "1,0"))
                                 (rule "add_zero_right" (formula "4") (term "0"))
                                 (rule "equal_literals" (formula "4"))
                                 (rule "false_right" (formula "4"))
                                 (rule "apply_eq" (formula "2") (term "0,0") (ifseqformula "1"))
                                 (rule "exact_instance_definition_known" (formula "2") (term "0"))
                                 (rule "boolean_equal" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "apply_eq" (formula "3") (term "1,1,0") (ifseqformula "1"))
                                 (rule "same_object_base" (formula "3") (term "1,0"))
                                 (rule "make_insert_eq_nonrigid" (formula "1"))
                                 (rule "inst_ex" (formula "3") (term "1,1,0") (ifseqformula "3"))
                                 (rule "close_eq" (formula "3") (term "1"))
                                 (rule "concrete_and_3" (formula "3"))
                                 (rule "inEqSimp_homoInEq0" (formula "3") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,1"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,0,1"))
                                 (rule "mul_literals" (formula "3") (term "0,1,0,1"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0,0,1"))
                                 (rule "add_literals" (formula "3") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,1"))
                                 (rule "add_literals" (formula "3") (term "1,1,0,1"))
                                 (rule "times_zero_1" (formula "3") (term "1,0,1"))
                                 (rule "add_zero_right" (formula "3") (term "0,1"))
                                 (rule "qeq_literals" (formula "3") (term "1"))
                                 (rule "concrete_and_3" (formula "3"))
                                 (rule "inEqSimp_geqRight" (formula "3"))
                                 (rule "times_zero_1" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "add_zero_right" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "nextToCreate_non_negative" (formula "1") (term "0") (ifseqformula "3"))
                                 (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                                 (rule "times_zero_1" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "qeq_literals" (formula "1"))
                                 (rule "close_by_false" (formula "1"))
                              )
                              (branch "   o_0
= java.lang.Object::<get>(  1
                          + java.lang.Object.<nextToCreate>) FALSE"
                                 (rule "make_insert_eq_nonrigid" (formula "1"))
                                 (opengoal "   LPS -> \\<{        Object a =new Object ();        Object b =new Object ();        Object c =new Object ();      }\\> LPS ")
                              )
                           )
                        )
                     )
                     (branch " Case 2"
                        (rule "ex_left" (formula "1") (inst "sk=iv_0"))
                        (rule "and_left" (formula "1"))
                        (rule "and_left" (formula "1"))
                        (rule "commute_eq" (formula "3"))
                        (rule "apply_eq_rigid" (formula "5") (term "0,0,1") (ifseqformula "3"))
                        (rule "exact_instance_definition_known" (formula "5") (term "0,1"))
                        (rule "boolean_equal" (formula "5") (term "1"))
                        (rule "concrete_and_3" (formula "5"))
                        (rule "apply_eq_rigid" (formula "5") (term "0,0,0") (ifseqformula "3"))
                        (rule "same_object_base" (formula "5") (term "0,0"))
                        (rule "apply_eq" (formula "5") (term "0,0,2,0") (ifseqformula "3"))
                        (rule "same_object_base" (formula "5") (term "0,2,0"))
                        (rule "apply_eq_rigid" (formula "5") (term "0,0,2,2,0") (ifseqformula "3"))
                        (rule "same_object_base" (formula "5") (term "0,2,2,0"))
                        (rule "apply_eq" (formula "5") (term "0,2,2,2,0") (ifseqformula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                        (rule "times_zero_1" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "add_zero_right" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "make_insert_eq_nonrigid" (formula "4"))
                        (rule "make_insert_eq" (formula "4"))
                        (rule "ifthenelse_split" (formula "6") (term "2,2,0"))
                        (branch " iv_0 = java.lang.Object.<nextToCreate> TRUE"
                           (rule "apply_eq" (formula "4") (term "0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "1,1,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0"))
                           (rule "add_zero_right" (formula "4") (term "0"))
                           (rule "qeq_literals" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "apply_eq" (formula "3") (term "0") (ifseqformula "1"))
                           (rule "apply_eq" (formula "4") (term "0,1") (ifseqformula "1"))
                           (rule "apply_eq" (formula "6") (term "0,0,0") (ifseqformula "1"))
                           (rule "polySimp_homoEq" (formula "6") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0"))
                           (rule "add_literals" (formula "6") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "6") (term "0,0,0"))
                           (rule "equal_literals" (formula "6") (term "0,0"))
                           (rule "ifthenelse_false" (formula "6") (term "0"))
                           (rule "apply_eq" (formula "6") (term "0,0,0") (ifseqformula "1"))
                           (rule "polySimp_homoEq" (formula "6") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0"))
                           (rule "add_literals" (formula "6") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "6") (term "0,0,0"))
                           (rule "equal_literals" (formula "6") (term "0,0"))
                           (rule "ifthenelse_false" (formula "6") (term "0"))
                           (rule "boolean_equal" (formula "6"))
                           (rule "close_by_true" (formula "6"))
                        )
                        (branch " iv_0 = java.lang.Object.<nextToCreate> FALSE"
                           (rule "ifthenelse_split" (formula "7") (term "2,0"))
                           (branch " iv_0 = 1 + java.lang.Object.<nextToCreate> TRUE"
                              (rule "apply_eq" (formula "3") (term "0") (ifseqformula "1"))
                              (rule "apply_eq" (formula "4") (term "0") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq0" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                              (rule "mul_literals" (formula "4") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                              (rule "add_literals" (formula "4") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                              (rule "add_literals" (formula "4") (term "1,1,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0"))
                              (rule "add_zero_right" (formula "4") (term "0"))
                              (rule "qeq_literals" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "apply_eq" (formula "6") (term "0") (ifseqformula "1"))
                              (rule "polySimp_homoEq" (formula "6"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0"))
                              (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                              (rule "add_literals" (formula "6") (term "1,1,0"))
                              (rule "times_zero_1" (formula "6") (term "1,0"))
                              (rule "add_zero_right" (formula "6") (term "0"))
                              (rule "equal_literals" (formula "6"))
                              (rule "false_right" (formula "6"))
                              (rule "apply_eq" (formula "4") (term "0,1") (ifseqformula "1"))
                              (rule "apply_eq" (formula "6") (term "0,0,0") (ifseqformula "1"))
                              (rule "polySimp_homoEq" (formula "6") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "6") (term "0,0,0,0"))
                              (rule "add_literals" (formula "6") (term "0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0"))
                              (rule "add_literals" (formula "6") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "6") (term "0,0,0"))
                              (rule "equal_literals" (formula "6") (term "0,0"))
                              (rule "ifthenelse_false" (formula "6") (term "0"))
                              (rule "boolean_equal" (formula "6"))
                              (rule "close_by_true" (formula "6"))
                           )
                           (branch " iv_0 = 1 + java.lang.Object.<nextToCreate> FALSE"
                              (rule "ifthenelse_split" (formula "8") (term "0"))
                              (branch " iv_0 = 2 + java.lang.Object.<nextToCreate> TRUE"
                                 (rule "boolean_equal" (formula "9"))
                                 (rule "close_by_true" (formula "9"))
                              )
                              (branch " iv_0 = 2 + java.lang.Object.<nextToCreate> FALSE"
                                 (opengoal "   LPS -> \\<{        Object a =new Object ();        Object b =new Object ();        Object c =new Object ();      }\\> LPS ")
                              )
                           )
                        )
                     )
                  )
                  (branch " Case 2"
                     (rule "inEqSimp_geqRight" (formula "2"))
                     (rule "mul_literals" (formula "1") (term "0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "add_zero_right" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (opengoal "   LPS -> \\<{        Object a =new Object ();        Object b =new Object ();        Object c =new Object ();      }\\> LPS ")
                  )
               )
               (branch " Null Reference (object_6 = null)"
                  (builtin "Update Simplification" (formula "1"))
                  (rule "repository_object_non_null" (formula "1"))
                  (rule "close_by_false" (formula "1"))
               )
            )
            (branch " Null Reference (__NEW___2 = null)"
               (builtin "Update Simplification" (formula "1"))
               (rule "repository_object_non_null" (formula "1"))
               (rule "close_by_false" (formula "1"))
            )
         )
         (branch " Null Reference (object_3 = null)"
            (builtin "Update Simplification" (formula "1"))
            (rule "repository_object_non_null" (formula "1"))
            (rule "close_by_false" (formula "1"))
         )
      )
      (branch " Null Reference (__NEW___1 = null)"
         (builtin "Update Simplification" (formula "1"))
         (rule "repository_object_non_null" (formula "1"))
         (rule "close_by_false" (formula "1"))
      )
   )
   (branch " Null Reference (object = null)"
      (builtin "Update Simplification" (formula "1"))
      (rule "repository_object_non_null" (formula "1"))
      (rule "close_by_false" (formula "1"))
   )
)
(branch " Null Reference (__NEW__ = null)"
   (builtin "Update Simplification" (formula "1"))
   (rule "repository_object_non_null" (formula "1"))
   (rule "close_by_false" (formula "1"))
)
)

}
