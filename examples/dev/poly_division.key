// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.


\schemaVariables {
	\term int polyDivNum, polyDivDenom, polyDivCoeff;
  \term int elimGcdLeft, elimGcdRight, elimGcd;
}

\rules {
  polySimp_divPullOut {
    \find ( polyDivNum / polyDivDenom )
    \replacewith ( \if   (polyDivDenom = 0)
                   \then (polyDivNum / 0)
                   \else (( polyDivNum + polyDivCoeff * polyDivDenom )
                          / polyDivDenom - polyDivCoeff) )
  };

  polySimp_zeroDiv {
    \find ( 0 / polyDivDenom )
    \replacewith ( \if   (polyDivDenom = 0)
                   \then (0 / 0)
                   \else (0))
  };


  XelimGcdEq {
	\find ( elimGcdLeft = elimGcdRight )
	\replacewith ( \if   (elimGcd >= 1
                              & elimGcdLeft % elimGcd = 0
                              & elimGcdRight % elimGcd <= (-1) + elimGcd)
		       \then (elimGcdRight % elimGcd = 0
                              & div(elimGcdLeft, elimGcd)=div(elimGcdRight, elimGcd))
		       \else (elimGcdLeft=elimGcdRight) )
//        \heuristics (polySimp_pullOutGcd)
  };

  XelimGcdLeq {
	\find ( elimGcdLeft <= elimGcdRight )
	\replacewith ( \if (elimGcd >= 1
	                    & elimGcdLeft % elimGcd = 0
                            & elimGcdRight % elimGcd <= (-1) + elimGcd)
                       \then (div(elimGcdLeft, elimGcd) <= div(elimGcdRight, elimGcd))
                       \else (elimGcdLeft <= elimGcdRight) )
//        \heuristics (inEqSimp_pullOutGcd)
  };

  XelimGcdGeq {
	\find ( elimGcdLeft >= elimGcdRight )
	\replacewith ( \if (elimGcd >= 1
	                    & elimGcdLeft % elimGcd = 0
                            & elimGcdRight % elimGcd <= (-1) + elimGcd)
                       \then (div(elimGcdLeft, elimGcd) >=
                              1 + div((-1) + elimGcdRight, elimGcd))
                       \else (elimGcdLeft >= elimGcdRight) )
//        \heuristics (inEqSimp_pullOutGcd)
  };

  XelimGcdLeq_antec {
	\find ( elimGcdLeft <= elimGcdRight ==> )
	\replacewith ( elimGcd <= 0 |
                       div(elimGcdLeft, elimGcd) <= div(elimGcdRight, elimGcd)
                       ==> )
//        \heuristics (inEqSimp_pullOutGcd, inEqSimp_pullOutGcd_antec)
  };

  XelimGcdGeq_antec {
	\find ( elimGcdLeft >= elimGcdRight ==> )
	\replacewith ( elimGcd <= 0 |
                       div((-1) + elimGcdLeft, elimGcd) >=
                       div((-1) + elimGcdRight, elimGcd)
                       ==> )
//        \heuristics (inEqSimp_pullOutGcd, inEqSimp_pullOutGcd_antec)
  };

}
