// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
// Input file for KeY standalone prover version 0.497
\predicates {
  A; B;
}

\schemaVariables {
/*
  \formula b, b0,post;
  \program Statement #p1, #s0, #s1; 
  \program Expression #e1, #e; 
  \program LeftHandSide #slhs1, #slhs2; 
  \program SimpleExpression #se;
	\program Type #t;
	\program Variable #v0, #v;
	\program VariableInitializer #vi;
	\program JavaBooleanExpression #boolv;
*/
}

\rules {

//  while_right {
//		find (<{.. while(#e1) {#p1} ...}>b)
//	        replacewith (<{.. #unwind-loop (while(#e1) {#p1});  ...}>b) }; 
//
//  preincrement { find (<{.. #slhs1 = ++#slhs2; ...}>post) 
//			     replacewith (<{.. #slhs2 = #slhs2+1; #slhs1 = #slhs2; ...}>post)  };
//
//  assignment{ find (<{.. #slhs1 = #se; ...}>post) replacewith ({#slhs1:= #se}<{.. ... }>post)	};
//
//
//  empty_diamond { find (<{}>b) replacewith(b) };
//  empty_block { find (<{..{ }...}>b) replacewith(<{.. ...}>b) };
//
//  variable_declaration{ find (<{.. #t #v0 = #vi; ...}>post) 
//		replacewith (<{.. #t #v0; #v0 = #vi; ...}>post)	};
//
//  eliminate_variable_declaration { find (<{.. #t #v0; ...}>post) 
//		replacewith (<{..  ...}>post)	};
//
//  empty_block_following_statement { find (<{..{ } ...}>b) replacewith(<{.. ...}>b) };
//
//
//
//  if_else_eval { find (<{.. if(#e) {#s0} else{#s1} ...}>post) 
//  replacewith (<{.. boolean #boolv; #boolv = #e; if(#boolv) {#s0} else{#s1} 
//        ...}>post ) };
//
//  if_eval {  find (<{.. if(#e) {#s0} ...}>post) varcond (#boolv new)
//  replacewith (<{.. boolean #boolv; #boolv = #e; if(#boolv) {#s0} 
//        ...}>post ) };
//
//  if_else_split  { find (<{.. if(#se) {#s0} else{#s1} ...}>post)  
//       replacewith (<{.. #s0 ...}>post) add (#se = TRUE ==>);
//       replacewith (<{.. #s1 ...}>post) add (#se = FALSE ==>) };
//
//  if_split  { find (<{.. if(#se) {#s0}  ...}>post)  
//       replacewith ((#se=TRUE -> <{.. #s0 ...}>post) & (#se=FALSE -> <{.. ...}>post))};
//
// if_true_else   { if(#se = TRUE ==>)
//	find (<{.. if (#se) {#s0} else{#s1} ...}>post)        
//       replacewith (<{.. #s0 ...}>post)};
//       
// if_false_else   { if (#se = FALSE ==>)
//       find (<{.. if (#se) {#s0} else{#s1} ...}>post) 
//       replacewith (<{.. #s1 ...}>post) };
//
// if_true   { if ( #se = TRUE ==>)
//	find (<{.. if (#se) {#s0} ...}>post)        
//       replacewith (<{.. #s0 ...}>post)  };
//
// if_true_1   { 
//	find (<{.. if (#se) {#s0} ...}>post)        
//       replacewith (<{.. #s0 ...}>post) add ( ==> #se = TRUE);  add (#se = TRUE ==>)};
//
//       
}


// < {{}  } > true
//< { boo=true; } > true
// < {int k; k=3; } > true
//< { int i=4; int j; j=2; i = ++j; i=3;  } > j=i
//< { int j; int i=7; i = ++j; while (i < j) { j = (++i) + (++j); } } > true
//<{int i=0; if (i<1) {i=2;}}>i=2(#)
// < { {{{{{{}}}}}} } > true

\problem {
//< { {l3:{{l2:{l1:{{}}}}}int i = 0;} } > true
}
