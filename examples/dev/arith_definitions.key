// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.




\schemaVariables{

  \term int i,i0,i1,i2,i3,i4,j,j0,j1;
  \term[rigid] int ir, i0r;
  \term int intNotAdd, intNotMul, intNotAddMulZ, intNotZ;
  \term numbers numNotNegLit, numNotNegLit2;
  \variables int k, j2, c, nv ;


  \term numbers iz, jz ;
  \formula b, post, inv;

}





\rules {

  //reviewed 02/15/2005, St.S.
  mod_2_is_0_or_1 { \add ((mod(i,2)=0 | mod (i,2)=1) ==>) };

  //reviewed 04/15/2004, St.S.
  mod_fold_minus { \find (sub(mod(i0,i),mod(i1,i))) \replacewith (mod(sub(i0,i1),i)) };
  //reviewed 04/15/2004, St.S.
  mod_fold_plus  { \find ( add(mod(i0,i),mod(i1,i))) \replacewith (mod( add(i0,i1),i)) };
  //reviewed 04/15/2004, St.S.
  times2mod_left  {\find (mul(i1,i0)=i) \replacewith (mod(i,i1)=0)};
  //reviewed 04/15/2004, St.S.
  times2mod_right {\find (mul(i1,i0)=i) \replacewith (mod(i,i0)=0)};

  //reviewed 04/15/2004, St.S.
  mod_rewr { \find ( mod(i,i0) = 0 ) 
             \varcond (\notFreeIn(k, i, i0)) 
             \replacewith ( \exists k; (mul(k, i0)=i) ) };

  //reviewed 04/15/2004, St.S.
  div_same  { \assumes (!i0 = 0 ==>) \find (div(i0, i0)) \sameUpdateLevel \replacewith(1) 
	\heuristics(simplify_int)};

  //reviewed 04/15/2004, St.S.
  division_by_1  { 
	\find (div(i0,1)) \replacewith (i0) \heuristics(simplify_int)};

  //reviewed 04/15/2004, St.S.
  division_by_minus_1  { 
	\find (div(i0,-1)) \replacewith (neg(i0)) 	\heuristics(simplify_int) };

  jdiv_to_div_1 {\find (jdiv(i0,i1)) \sameUpdateLevel \replacewith (neg(div(neg(i0),i1))); \add (==>leq(i0,0)) \displayname "jdiv_to_div"};
  jdiv_to_div_2 {\find (jdiv(i0,i1)) \sameUpdateLevel \replacewith (neg(div(i0,neg(i1)))); \add (==>leq(i1,0)) \displayname "jdiv_to_div"};
  jdiv_to_div_3 {\find (jdiv(i0,i1)) \sameUpdateLevel \replacewith (div(i0,i1)); \add (==>leq(i0,0)&lt(i1,0)) \displayname "jdiv_to_div"};
  jdiv_to_div_4 {\find (jdiv(i0,i1)) \sameUpdateLevel \replacewith (div(i0,i1)); \add (==>geq(i0,0)&gt(i1,0)) \displayname "jdiv_to_div"};

  jmod_to_mod_1 {\find (jmod(i0,i1)) \sameUpdateLevel \replacewith (mod(i0,i1)); \add (==>geq(i0,0) & gt(i1,0)) \displayname "jmod_to_mod"};
  jmod_to_mod_2 {\find (jmod(i0,i1)) \sameUpdateLevel \replacewith (mod(i0,neg(i1))); \add (==>geq(i0,0) & lt(i1,0)) \displayname "jmod_to_mod"};
  jmod_to_mod_3 {\find (jmod(i0,i1)) \sameUpdateLevel \replacewith (neg(mod(neg(i0),i1))); \add (==>lt(i0,0) & gt(i1,0)) \displayname "jmod_to_mod"};
  jmod_to_mod_4 {\find (jmod(i0,i1)) \sameUpdateLevel \replacewith (neg(mod(neg(i0),neg(i1)))); \add (==>lt(i0,0) & lt(i1,0)) \displayname "jmod_to_mod"};

  div_distribute_minus_1 { \find (jdiv(i0,i1)) \sameUpdateLevel \replacewith (jdiv(neg(i0),neg(i1))); \add (i1 = 0 ==>) \displayname "jdiv_distribute_minus"};
  div_distribute_minus_2 { \find (jdiv(i0,i1)) \sameUpdateLevel \replacewith (neg(jdiv(neg(i0),i1))); \add (i1 = 0 ==>) \displayname "jdiv_distribute_minus"};
  div_distribute_minus_3 { \find (jdiv(i0,i1)) \sameUpdateLevel \replacewith (neg(jdiv(i0,neg(i1)))); \add (i1 = 0 ==>) \displayname "jdiv_distribute_minus"};

  // add axioms for division
  jdiv_axiom_both_nonnegative { \find (jdiv(i0,i1)) \sameUpdateLevel
                    \varcond (\notFreeIn(k, i0, i1))
		    \add (geq(i0,0) & gt(i1,0) -> (\exists k; (k=jdiv(i0,i1) & (k=0 <-> lt(i0,i1))
                                               & ( gt(k,0) <-> geq(i0,i1))
                                               & ((leq(0,sub(i0,mul(i1,k))) & lt(sub(i0,mul(i1,k)),i1))))) ==>)
                  };

 jdiv_axiom { \find (jdiv(i0,i1))  \sameUpdateLevel
                    \varcond (\notFreeIn(k, i0, i1))
	\add ( i1!=0->
               (geq(i0,0) & gt(i1,0) |
               leq(i0,0) & lt(i1,0))
                   & (\exists k; (k=jdiv(i0,i1) 
                   & ( geq(k,0))
                   & (geq(i0,mul(i1,k)))
                   & lt(sub(i0,mul(i1,k)),i1))) ==>);
	\add (i1!=0->
               (geq(i0,0) & lt(i1,0))
                   & (\exists k; (k=jdiv(i0,i1) 
                   & ( leq(k,0))
                   & (geq(i0,mul(i1,k)))
                   & lt(sub(i0,mul(i1,k)),neg(i1)))) ==>);
	\add (i1!=0->
               (leq(i0,0) & gt(i1,0))
                   & (\exists k; (k=jdiv(i0,i1) 
                   & ( leq(k,0))
                   & (geq(mul(i1,k),i0))
                   & gt(sub(i0,mul(i1,k)),neg(i1)))) ==>)
                  };

  jmod_axiom { \find (jmod(i0,i1)) \sameUpdateLevel
                    \varcond (\notFreeIn(k, i0, i1))
		    \add (!i1=0 -> (\exists k; (jmod(i0,i1)=sub(i0,mul(k,i1)) & k=jdiv(i0,i1))) ==>)
                  };

  mod_axiom { \find (mod(i0,i1)) \sameUpdateLevel
                    \varcond (\notFreeIn(k, i0, i1))
		    \add (!i1=0 -> (\exists k; (mod(i0,i1)=sub(i0,mul(k,i1)) & k=div(i0,i1))) ==>)
                  };

  jdiv_result_pos   {\find (==>lt(0, jdiv(i0,i1))) \add (==> lt(i0,0)&lt(i1,0)&leq(i0,i1) | gt(i0,0)&gt(i1,0)&geq(i0,i1))};

  jdiv_result_neg   {\find (==>gt(0, jdiv(i0,i1))) \add (==> lt(i0,0)&gt(i1,0)&geq(neg(i0),i1) | gt(i0,0)&lt(i1,0)&geq(i0,neg(i1)))};

  jdiv_result_leq_divident   {\find (jdiv(i0,i1)) \sameUpdateLevel \add (geq(i0,0) & !(i1=0) -> leq(jdiv(i0,i1),i0) ==>)};
  jdiv_result_geq_divident   {\find (jdiv(i0,i1)) \sameUpdateLevel \add (leq(i0,0) & !(i1=0) -> geq(jdiv(i0,i1),i0) ==>)};

  jdiv_result_zero  {\find (jdiv(i0,i1)=0) \add ((i0=0 & !(i1=0)) | 
                                          (gt(i0,0) & gt(i1,0) ->lt(i0,i1)) &
                                          (gt(i0,0) & lt(i1,0) ->lt(i0,neg(i1))) &
                                          (lt(i0,0) & lt(i1,0) ->lt(neg(i0),neg(i1))) &
                                          (lt(i0,0) & gt(i1,0) ->lt(neg(i0),i1))  ==>) };

  div_mul_cancel_1  { 
	\find (div(mul(i0,i1),i1)) \sameUpdateLevel \replacewith (i0); \add (i1 = 0 ==>) \heuristics(simplify_int) \displayname "div_mul_cancel"};
  div_mul_cancel_2  { 
	\find (jdiv(mul(i0,i1),i1)) \sameUpdateLevel  \replacewith (i0); \add (i1 = 0 ==>) \heuristics(simplify_int) \displayname "jdiv_mul_cancel"};

  mul_jdiv_both_pos {\find (mul(jdiv(i0,i1),i1)) \sameUpdateLevel \add (geq(i0,0) & gt(i1,0) -> leq(mul(jdiv(i0,i1),i1),i0)& geq(mul(jdiv(i0,i1),i1),0)==>) };
  mul_jdiv_both_neg {\find (mul(jdiv(i0,i1),i1)) \sameUpdateLevel \add (leq(i0,0) & lt(i1,0) -> geq(mul(jdiv(i0,i1),i1),i0)& leq(mul(jdiv(i0,i1),i1),0)==>) };
  mul_jdiv_neg_pos {\find (mul(jdiv(i0,i1),i1)) \sameUpdateLevel \add (leq(i0,0) & gt(i1,0) -> geq(mul(jdiv(i0,i1),i1),i0) & leq(mul(jdiv(i0,i1),i1),0)==>) };
  mul_jdiv_pos_neg {\find (mul(jdiv(i0,i1),i1)) \sameUpdateLevel \add (geq(i0,0) & lt(i1,0) -> leq(mul(jdiv(i0,i1),i1),i0) & geq(mul(jdiv(i0,i1),i1),0)==>) };

  mul_div {\find (mul(div(i0,i1),i1)) \sameUpdateLevel \add (!i1=0 -> leq(mul(div(i0,i1),i1),i0) ==>) };


  //reviewed 04/15/2004, St.S.
  mod_same  { \assumes (!i0 = 0 ==>) \find (mod(i0, i0)) \sameUpdateLevel \replacewith(0) 
	\heuristics(simplify_int)};

  //reviewed 04/15/2004, St.S.
  mod_not_necessary {
	\find (mod(i0,i)) \sameUpdateLevel
	\replacewith (i0);
	\add (==> lt(i0,i) & leq(0,i0)) 
  };

  //reviewed 04/15/2004, St.S.
  mod_lt_mod {
	\find (mod(mod(i0,i),j)) \sameUpdateLevel
	\replacewith (mod(i0,i)) ;
        \add (==> leq(i,j) & lt(0,i)) 
  };

  //reviewed 04/15/2004, St.S.
  mod_gt_mod_and_multiple {
	\find (mod(mod(i0,i),j))  \sameUpdateLevel
	\replacewith (mod(i0,j)) ;
        \add (==> (mod(i,j)=0) & lt(0,i)) 
  };

  //reviewed 04/15/2004, St.S.
  mod_mod_eq {
	\find (mod(mod(i0,i1),i1)) 
	\replacewith (mod(i0,i1))
	\heuristics(simplify_int)
  };
 
  //reviewed 04/15/2004, St.S.
  mod_plus {\find ( lt(add(mod(i,j),i0), j)) 
            \replacewith (add(mod(i,j),i0) = mod(add(i,i0), j)) };

  //reviewed 04/15/2004, St.S.
  mod_sum_1 {
	\find (mod(add(mod(i0,j), mod(i1,j)), j))
	\replacewith(mod(add(i0,i1), j))
	\displayname "mod_sum_reduce"
  };

  //reviewed 04/15/2004, St.S.
  mod_sum_2 {
	\find (mod(add(i0,i1), j))
	\replacewith(mod(add(mod(i0,j), mod(i1,j)), j))
	\displayname "mod_sum_expand"
  };

  //reviewed 04/15/2004, St.S.
  mod_sum_3 {
	\find (mod(add(mod(i0,j), mod(i1,j)), j))
	\replacewith(mod(add(i0, mod(i1,j)), j))
	\displayname "mod_sum_reduce_left"
  };

  //reviewed 04/15/2004, St.S.
  mod_sum_4 {
	\find (mod(add(mod(i0,j), mod(i1,j)), j))
	\replacewith(mod(add(mod(i0,j), i1), j))
	\displayname "mod_sum_reduce_right"
  };

  //reviewed 04/15/2004, St.S.
  mod_sum_5 {
	\find (mod(add(mod(i0,j), i1), j))
	\replacewith(mod(add(i0, i1), j))
	\displayname "mod_sum_reduce_left"
  };

  //reviewed 04/15/2004, St.S.
  mod_sum_6 {
	\find (mod(add(i0, mod(i1,j)), j))
	\replacewith(mod(add(i0, i1), j))
	\displayname "mod_sum_reduce_right"
  };
	
  //reviewed 04/15/2004, St.S.
  mod_negative_1 {
	\find (mod(i0, neg(i1)))
	\replacewith(neg(mod(neg(i0), i1)))
	\displayname "mod_negative_right"
  };
  
  //reviewed 04/15/2004, St.S.
  mod_negative_3 {
	\find (mod(neg(i0), neg(i1)))
	\replacewith(neg(mod(i0, i1)))
	\displayname "mod_negative_both"
  };

  //reviewed 04/15/2004, St.S.
  mod_one {
	\find (mod(i0,1))
	\replacewith(0)
  };

  //reviewed 04/15/2004, St.S.
  mod_minus_one {
	\find (mod(i0,-1))
	\replacewith(0)
  };

  //reviewed 12/02/2004, St.S.
  mod_remainder {
	\find (mod(i0,i1))
	\add ( (geq(i0,0) & gt(i1,0) -> (lt(mod(i0,i1),i1)) &  geq(mod(i0,i1),0)) ==>)
  };

 jdiv_axiom2 { \find (jdiv(i0,i1))  \sameUpdateLevel
                    \varcond (\notFreeIn(k, i0, i1))
              \add (!i1=0 ->
                    (\exists k; (k=jdiv(i0,i1) &
                     ((i0>=0 & i1>=1 |
                       i0<=0 & i1<=-1) -> (k>=0
                                           & i0>=mul(i1,k)
                                           & i0-mul(i1,k)<i1)) &
                     ((i0<0 & i1>=1) -> (k<=0
                                         & mul(i1,k)>=i0
                                         & mul(i1,k)-i0<i1)) &
                     ((i0>0 & i1<=-1) -> (k<=0
                                          & i0>=mul(i1,k)
                                          & mul(i1,k)-i0>i1))
                     )) ==> ) };


  div_axiom2 { \find (div(i0,i1)) \sameUpdateLevel
                    \varcond (\notFreeIn(k, i0, i1))
		    \add (!i1=0 ->
                          (\exists k; (k=div(i0,i1) & 
                           (gt(i1,0) -> (leq(0,sub(i0,mul(k,i1))) & lt(sub(i0,mul(k,i1)),i1))  ) &
                           (lt(i1,0) -> (leq(0,sub(i0,mul(k,i1))) & lt(sub(i0,mul(k,i1)),neg(i1)))) )) ==> )
                  };

}
