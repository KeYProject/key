// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.


\sorts {
	S;
	SList;
}


\predicates {
	p(S);
}

\functions {
	SList nil;
	SList cons ( S, SList );
	SList append ( SList, SList );
	int listLength ( SList );
}

\schemaVariables {
	\variables S a, b;

	\term S sv;
	\formula phi;
	\program Statement #s, #t;

	\term S el0, el1;
	\term SList list0, list1, list2;
	\variables SList listVar0;
}


\rules {
	testTaclet0 { \find ( listLength ( append ( list0, list1 ) ) ) \sameUpdateLevel
                      \replacewith ( + ( listLength ( list0 ), listLength ( list1 ) ) ) };
	testTaclet1 { \find ( \<{ int j = 0; #s }\> ( p ( sv ) | phi ) ) \sameUpdateLevel
                      \replacewith ( phi | p ( sv ) ) };

	cons_left { \find ( append ( cons ( el0, list0 ), list1 ) )
                    \replacewith ( cons ( el0, append ( list0, list1 ) ) ) };
	nil_left  { \find ( append ( nil, list0 ) )
                    \replacewith ( list0 ) };
	list_induction { \varcond ( \notFreeIn(a, phi) )
                         \add ( ==> {\subst listVar0; nil}phi );
                         \add ( ==> \forall listVar0; \forall a; ( phi -> {\subst listVar0; cons ( a, listVar0 )}phi ) );
                         \add ( \forall listVar0; phi ==> ) };

        nil_right { \find ( append ( list0, nil ) )
                    \replacewith ( list0 ) };
	append_assoc { \find ( append ( append ( list0, list1 ), list2 ) )
                       \replacewith ( append ( list0, append ( list1, list2 ) ) ) };


	nil_listLength  { \find ( listLength ( nil ) ) \replacewith ( 0 ) };
	cons_listLength { \find ( listLength ( cons ( el0, list0 ) ) ) \replacewith ( succ ( listLength ( list0 ) ) ) };
}


\problem {
false

}

\proof {
(log "0" (user "daniels" ) (keyVersion "danielsRunAllTests.10"))
(branch "dummy ID"
(rule "false_right" (formula "1"))
(opengoal "false ")
)

}
