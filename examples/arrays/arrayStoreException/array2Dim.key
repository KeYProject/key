// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
/**
@provable not
@see <a href="http://java.sun.com/docs/books/jls/third_edition/html/arrays.html#10.10">ArrayStoreException (JLS 3rd, 10.10)</a>

A proof attempt of the example below will get stuck with two goals left
open. The reason is that it cannot be assured that the object stored in
<tt>a[0][0]</tt> is assignment compatible to the component type of array <tt>a[1]</tt>
and <tt>a[2]</tt>. In fact it must not be the case as e.g. <tt>a[0][0]</tt> may be of type
<tt>CSub3</tt> and <tt>a[1], a[2]</tt> may be arrays of component type <tt>CSub12</tt>
which is not assignment compatible to <tt>CSub3</tt>.

In such cases Java throws an <tt>ArrayStoreException</tt> which is not caught
by the program in this example and therefore termination cannot be proven.

*/

\javaSource "./classes";

\programVariables {
   ISuper[][] a;
}

\problem { 
 (!(a=null) & a.length=10 & !(a[0]=null | a[1]=null | a[2]=null) & 
              a[0].length = 4 & a[1].length = 4 & a[2].length = 4) ->  
 \<{ for (int j = 0; j<3; j++) { 
       for (int i = 0; i<3; i++) { 
         a[i][j] = a[0][0]; 
       } 
     } 
   }\>true
}
