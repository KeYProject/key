/*
  @provable automatic

    Access on a static field triggers the initialisation of the
    class where the field is declared not.
     In the case below this means class A is initialized as 
    static field ATTR_A1 is declared in A, but class B remains 
    uninitialized.
*/

\classpath "classpath";
\javaSource "java/";

\withOptions initialisation:enableStaticInitialisation;

\problem {
     (inReachableState &
      java.lang.Object.<classInitialized> = TRUE &
      A.<classInitialized> = FALSE &
      A.<classPrepared>    = FALSE &
      A.<classInitializationInProgress> = FALSE &
      A.<classErroneous>                = FALSE &

      B.<classInitialized> = FALSE &
      B.<classPrepared>    = FALSE &
      B.<classInitializationInProgress> = FALSE &
      B.<classErroneous> = FALSE)
    ->
     \<{ B.ATTR_A1 = 1; }\>(A.<classInitialized> = TRUE &
                            B.<classInitialized> = FALSE)
    
}
