\sorts {
	\generic Integer, Integer1, Integer2 \oneof{CHAR, SCHAR, UCHAR, SSHRT, USHRT, SINT, UINT, SLONG, ULONG, SLLONG, ULLONG};

	\generic Generic, Generic1, Generic2;
}

\schemaVariables {
	\term int schemaInt, schemaInt1, schemaInt2;

	\term Integer schemaInteger;
	\term Integer1 schemaInteger1;
	\term Integer2 schemaInteger2;
	\term Object schemaObj, schemaObj1, schemaObj2;
	\term Array schemaArr, schemaArr1, schemaArr2;

	\term %{$Node} schemaNode;

	\skolemTerm boolean dummy;

	\skolemTerm boolean skolemBoolean;

	// Generic
	\skolemTerm Value tempValue;
	\skolemTerm Array tempArray;

	\skolemTerm int variantPrev;

	\skolemTerm Value skolemValue;
	\skolemTerm Object skolemObject;

	\variables Generic schemaVarGeneric;

	\variables Object schemaVarObj, schemaVarObj1, schemaVarObj2;
	\variables int schemaVarInt, schemaVarInt1, schemaVarInt2, schemaVarInt3, schemaVarInt4, schemaVarInt5;

	\modalOperator {diamond, box} #allmodal;
	\formula formula;

	\formula invariant;
	\term int variant;

	\program Variable #tvar, #tvar1, #tvar2;

	\program ClangValueType #vtype;
	\program ClangIntegerType #itype;
	\program ClangPointerType #ptype;
	\program ClangScalarType #stype;
	\program ClangObjectType #otype;

	\program ClangMember #member;

	\program ClangIntegerLiteral #ilit;

	\program ClangVariable #var, #var1, #var2, #var3;
	\program ClangValueVariable #vvar, #vvar1, #vvar2, #vvar3;
	\program ClangObjectVariable #ovar, #ovar1, #ovar2, #ovar3;
	\program ClangIntegerVariable #ivar, #ivar1, #ivar2, #ivar3;
	\program ClangPointerVariable #pvar, #pvar1, #pvar2, #pvar3;

	\program ClangValueSimpleExpression #vsexp, #vsexp1, #vsexp2, #vsexp3;
	\program ClangIntegerSimpleExpression #isexp, #isexp1, #isexp2, #isexp3;
	\program ClangPointerSimpleExpression #psexp, #psexp1, #psexp2, #psexp3;

	\program ClangExpression #exp, #exp1, #exp2;
	\program ClangObjectExpression #oexp, #oexp1, #oexp2;
	\program ClangValueExpression #vexp, #vexp1, #vexp2;
	\program ClangIntegerExpression #iexp, #iexp1, #iexp2;
	\program ClangPointerExpression #pexp, #pexp1, #pexp2;
	\program ClangComplexExpression #cexp, #cexp1, #cexp2;
	\program ClangValueComplexExpression #vcexp, #vcexp1, #vcexp2;
	\program ClangObjectComplexExpression #ocexp, #ocexp1, #ocexp2;

	\program ClangValueNonAssignmentExpression #vnaexp;
	\program ClangObjectNonAssignmentExpression #onaexp;

	\program ClangStatement #stmnt, #stmnt1, #stmnt2;

	\program ClangNonEmptyCompoundStatement #NonEmptyCompoundStatement;
	\program ClangBlockFrameVarDecl #BlockFrameVarDecl;
	\program ClangUnwindingBlockFrame #UnwindingBlockFrame;
	\program ClangEmptyBlockFrame #EmptyBlockFrame;
}

\rules {
	typingRule_Node_SINT_Obj {
		\find ( objBlock(schemaNode) = objBlock(%{SINT@::<lookup>}(schemaInt)))
		\replacewith (false)
		\heuristics(simplify)
	};
	typingRule_Node_SINT_Obj_array {
		\find ( objBlock(schemaNode) = objBlock(%{SINT@[]::<lookup>}(schemaInt1, schemaInt2)))
		\replacewith (false)
		\heuristics(simplify)
	};
}
