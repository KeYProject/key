// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
\javaSource "mylist/";


\schemaVariables {
   \program Statement #pi;
}

\programVariables {
    java.lang.Object o;
}


\predicates {
   \nonRigid protect[head@(MyList); | next@(MyNode); | pos@(MyIterator);];
}


\rules {
    universes {
	\assumes(protect[head@(MyList); | next@(MyNode); | pos@(MyIterator);] ==>)    	
	\find(==> \[ {.. #pi ...} \] protect[head@(MyList); | next@(MyNode); | pos@(MyIterator);])
   	\replacewith (==> #Universes(\[ {.. #pi ...} \] protect[head@(MyList); | next@(MyNode); | pos@(MyIterator);]))
    };
}



//The first four disjuncts are provable with the above rule. 

//The last two are not: The fifth one because violate() violates encapsulation, 
//and the last one because the proof obligation uses a local variable.

\problem {
    protect[head@(MyList); | next@(MyNode); | pos@(MyIterator);] 
    -> 
    (
    \[{Ano.list.prepend(Ano.p);}\] protect[head@(MyList); | next@(MyNode); | pos@(MyIterator);]
    |
    \[{Ano.r = Ano.list.iterator();}\] protect[head@(MyList); | next@(MyNode); | pos@(MyIterator);]
    |
    \[{Ano.b = Ano.iterator.hasNext();}\] protect[head@(MyList); | next@(MyNode); | pos@(MyIterator);]
    |
    \[{Ano.r = Ano.iterator.next();}\] protect[head@(MyList); | next@(MyNode); | pos@(MyIterator);]
    |
    \[{Ano.r = Ano.iterator.violate();}\] protect[head@(MyList); | next@(MyNode); | pos@(MyIterator);]
    |  
    \[{Ano.list.prepend(o);}\] protect[head@(MyList); | next@(MyNode); | pos@(MyIterator);]
    )
}
