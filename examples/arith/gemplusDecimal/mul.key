// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.


\javaSource "src/";

/*
	d.intPart < (i + 1) * (iP + 1) &
	d.intPart >= -1 &


  first loop:
  modifies:
	{ d.intPart, d.decPart, i }
  invariant:
	0 <= i & i <= e &
	d.intPart * Decimal.PRECISION + d.decPart =
	(iP * Decimal.PRECISION + dP) * i &
	inShort(d.intPart) &
	-Decimal.PRECISION < d.decPart & d.decPart < Decimal.PRECISION
  decreases:
	e - i
*/

\contracts {
	addSpecDia {
		\programVariables {
			short ep; short fp;
			Decimal dec;
		}
		dec != null
		&
		0 <= dec.intPart & dec.intPart <= Decimal.MAX_DECIMAL_NUMBER &
		0 <= dec.decPart & dec.decPart < Decimal.PRECISION
		&
                0 <= fp & fp < Decimal.PRECISION &
                0 <= ep & ep < Decimal.MAX_DECIMAL_NUMBER &
		ep + dec.intPart + 1 <= Decimal.MAX_DECIMAL_NUMBER
		->
		\<{ dec.add(ep, fp)@Decimal; }\>
		(
		0 <= dec.intPart & dec.intPart <= Decimal.MAX_DECIMAL_NUMBER &
		0 <= dec.decPart & dec.decPart < Decimal.PRECISION
		&
		\if (Decimal::decPart@pre(dec) + fp >= Decimal.PRECISION)
		\then (dec.intPart = Decimal::intPart@pre(dec) + ep + 1 &
		       dec.decPart = Decimal::decPart@pre(dec) + fp - Decimal.PRECISION)
		\else (dec.intPart = Decimal::intPart@pre(dec) + ep &
		       dec.decPart = Decimal::decPart@pre(dec) + fp)
		)
		\modifies { dec.intPart, dec.decPart }
	};
	addSpecBox {
		\programVariables {
			short ep; short fp;
			Decimal dec;
		}
		dec != null
		&
		0 <= dec.intPart & dec.intPart <= Decimal.MAX_DECIMAL_NUMBER &
		0 <= dec.decPart & dec.decPart < Decimal.PRECISION
		&
                0 <= fp & fp < Decimal.PRECISION &
                0 <= ep & ep < Decimal.MAX_DECIMAL_NUMBER &
		ep + dec.intPart + 1 <= Decimal.MAX_DECIMAL_NUMBER
		->
		\[{ dec.add(ep, fp)@Decimal; }\]
		(
		0 <= dec.intPart & dec.intPart <= Decimal.MAX_DECIMAL_NUMBER &
		0 <= dec.decPart & dec.decPart < Decimal.PRECISION
		&
		\if (Decimal::decPart@pre(dec) + fp >= Decimal.PRECISION)
		\then (dec.intPart = Decimal::intPart@pre(dec) + ep + 1 &
		       dec.decPart = Decimal::decPart@pre(dec) + fp - Decimal.PRECISION)
		\else (dec.intPart = Decimal::intPart@pre(dec) + ep &
		       dec.decPart = Decimal::decPart@pre(dec) + fp)
		)
		\modifies { dec.intPart, dec.decPart }
	};


	/*
		First loop:

		modifies:
		{dec.intPart, dec.decPart, i}

		invariant:
		dec.intPart >= 0
		& dec.intPart <= Decimal.MAX_DECIMAL_NUMBER
		& dec.decPart >= 0
		& dec.decPart < Decimal.PRECISION
		& dec.intPart * Decimal.PRECISION + dec.decPart =
			i * (intBackup * Decimal.PRECISION + decBackup)
		& dec.intPart <= i * (intBackup + 1)
		& i >= 0
		& i <= ep

		decreases:
		ep - i
	*/


	/*
		Second loop:

		modifies:
		{dec.intPart, dec.decPart, j}

		invariant:
		dec.intPart >= 0
		& dec.intPart <= Decimal.MAX_DECIMAL_NUMBER
		& dec.decPart >= 0
		& dec.decPart < Decimal.PRECISION
		& dec.intPart * Decimal.PRECISION + dec.decPart =
                    ep * (intBackup * Decimal.PRECISION + decBackup) + j * fp
		& dec.intPart <= ep * (intBackup + 1) + j
		& j >= 0
		& j <= intBackup

		decreases:
		intBackup - j
	*/

	mulSpecDia {
		\programVariables {
			short ep; short fp;
			Decimal dec;
		}
		dec != null
		&
		0 <= dec.intPart & dec.intPart <= Decimal.MAX_DECIMAL_NUMBER &
		0 <= dec.decPart & dec.decPart < Decimal.PRECISION
		&
                0 <= fp & fp < Decimal.PRECISION &
                0 <= ep & ep <= Decimal.MAX_DECIMAL_NUMBER
		&
		(ep + 1) * (dec.intPart + 1) < Decimal.MAX_DECIMAL_NUMBER
		->
		\<{ dec.mul2(ep, fp)@Decimal; }\>
		(
		0 <= dec.intPart & dec.intPart <= Decimal.MAX_DECIMAL_NUMBER &
		0 <= dec.decPart & dec.decPart < Decimal.PRECISION
		&
		dec.intPart * Decimal.PRECISION + dec.decPart =
                   ep * Decimal::intPart@pre(dec) * Decimal.PRECISION 
                   + 
                   Decimal::intPart@pre(dec) * fp
                   +  
                   ep * Decimal::decPart@pre(dec)
                   +
                   (fp * Decimal::decPart@pre(dec)) / 1000
		)
		\modifies { dec.intPart, dec.decPart }
	};
}


\chooseContract
