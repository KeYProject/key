\settings {
"#Proof-Settings-Config-File
#Thu Jan 17 15:13:46 CET 2008
[General]SoundNotification=true
[DecisionProcedure]SmtBenchmarkArchiving=false
[View]FontIndex=2
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[General]SuggestiveVarNames=false
[View]ShowWholeTaclet=false
[General]ProofAssistant=true
[View]MaxTooltipLines=40
[General]DnDDirectionSensitive=true
[SimultaneousUpdateSimplifier]EagerSimplification=true
[General]StupidMode=true
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=7000
[Libraries]Default=acc.key-false, stringRules.key-false, deprecatedRules.key-false
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_NONE
[Choice]DefaultChoices=transactions-transactions\:transactionsOn , programRules-programRules\:Java , initialisation-initialisation\:disableStaticInitialisation , throughout-throughout\:toutOn , transactionAbort-transactionAbort\:abortOn , intRules-intRules\:arithmeticSemanticsIgnoringOF , assertions-assertions\:on , nullPointerPolicy-nullPointerPolicy\:nullCheck
[DecisionProcedure]SmtZipProblemDir=false
[DecisionProcedureForTest]=Cogent
[Model]Source=1
[Choice]Choices=transactions-transactions\:transactionsOff-transactions\:transactionsOn , programRules-programRules\:ODL-programRules\:Java , throughout-throughout\:toutOff-throughout\:toutOn , initialisation-initialisation\:disableStaticInitialisation-initialisation\:enableStaticInitialisation , transactionAbort-transactionAbort\:abortOff-transactionAbort\:abortOn , intRules-intRules\:arithmeticSemanticsCheckingOF-intRules\:javaSemantics-intRules\:arithmeticSemanticsIgnoringOF , assertions-assertions\:safe-assertions\:off-assertions\:on , nullPointerPolicy-nullPointerPolicy\:noNullCheck-nullPointerPolicy\:nullCheck
[DecisionProcedure]SmtUseQuantifiers=true
[View]HideIntermediateProofsteps=false
[DecisionProcedure]=SIMPLIFY
[General]OuterRenaming=false
[Strategy]ActiveStrategy=HoareStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\functions {
   int i0;
}

\programVariables {
  int i, j0;
}

// invariant: executionTime = 2*i + 1 & i <= i0 & i>=0 & i0>=0 & j0=i0  

\problem {
(
executionTime = 0 & i = 0 & i0 >= 0 & i0 = j0

) ->
(
\diamond_trc{
              while ( i<j0 ) {
                i=i+1;
              }
            }\endmodality executionTime = 2 * i0 + 1

)
}

\proof {
(keyLog "0" (keyUser "bubel" ) (keyVersion "c5ac53939a97098268512bbe382cd889a8db0f35"))

(branch "dummy ID"
(builtin "Loop Invariant" (formula "2") (inst "executionTime = 2 * i
& i <= i0
& i >= 0
& i0 >= 0
& j0 = i0")(inst "i0 - i") (inst "oldDecreaseValue0"))
(branch " Invariant Initially Valid"
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "5") (term "1,0"))
   (rule "replace_known_left" (formula "5") (term "1,0") (ifseqformula "4"))
   (rule "concrete_and_3" (formula "5") (term "0"))
   (rule "replace_known_left" (formula "5") (term "1,0") (ifseqformula "3"))
   (rule "concrete_and_3" (formula "5") (term "0"))
   (rule "polySimp_elimSub" (formula "5") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
   (rule "polySimp_addComm0" (formula "5") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0"))
   (rule "applyEq" (formula "5") (term "0,1,0") (ifseqformula "2"))
   (rule "qeq_literals" (formula "5") (term "1,0"))
   (rule "concrete_and_3" (formula "5") (term "0"))
   (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
   (rule "applyEq" (formula "5") (term "1,0,1") (ifseqformula "4"))
   (rule "applyEq" (formula "5") (term "0,1,0") (ifseqformula "4"))
   (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "2"))
   (rule "replace_known_left" (formula "5") (term "1,0") (ifseqformula "3"))
   (rule "concrete_and_3" (formula "5") (term "0"))
   (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "1"))
   (rule "eqSymm" (formula "5") (term "0"))
   (rule "applyEq" (formula "5") (term "0,0,0,1") (ifseqformula "2"))
   (rule "times_zero_2" (formula "5") (term "0,0,1"))
   (rule "add_zero_left" (formula "5") (term "0,1"))
   (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "3"))
   (rule "concrete_and_3" (formula "5"))
   (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "2"))
   (rule "times_zero_2" (formula "5") (term "0"))
   (rule "eqClose" (formula "5"))
   (rule "closeTrue" (formula "5"))
)
(branch " Preserves Invariant"
   (rule "assignmentExecutionTime" (formula "3") (userinteraction))
   (rule "exit" (formula "3") (userinteraction))
   (builtin "Update Simplification" (formula "3"))
   (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0,0,0"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "castDelInt" (formula "8") (term "1,1,0,0,0,0,0"))
   (rule "castDelInt" (formula "8") (term "0,1,0,0,0,0"))
   (rule "castDelInt" (formula "8") (term "0,1,0,0,0"))
   (rule "castDelInt" (formula "8") (term "1,0,1,1"))
   (rule "castDelInt" (formula "8") (term "1,0,0,1"))
   (rule "eqSymm" (formula "1"))
   (rule "eqSymm" (formula "8") (term "1,0"))
   (rule "eqSymm" (formula "6"))
   (rule "translateJavaAddInt" (formula "8") (term "1,1,0,0,0,0,0"))
   (rule "translateJavaAddInt" (formula "8") (term "0,1,0,0,0,0"))
   (rule "translateJavaAddInt" (formula "8") (term "0,1,0,0,0"))
   (rule "translateJavaAddInt" (formula "8") (term "1,0,1,1"))
   (rule "translateJavaAddInt" (formula "8") (term "1,0,0,1"))
   (rule "replace_known_left" (formula "8") (term "1,0") (ifseqformula "6"))
   (rule "concrete_and_3" (formula "8") (term "0"))
   (rule "replace_known_left" (formula "8") (term "1,0") (ifseqformula "5"))
   (rule "concrete_and_3" (formula "8") (term "0"))
   (rule "polySimp_elimSub" (formula "1") (term "0"))
   (rule "eqSymm" (formula "1"))
   (rule "polySimp_elimSub" (formula "8") (term "0,1,1"))
   (rule "polySimp_elimSub" (formula "8") (term "0,0,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "1"))
   (rule "inEqSimp_ltToLeq" (formula "7"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,1,1"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1"))
   (rule "polySimp_addComm0" (formula "8") (term "1,1,0,0,0"))
   (rule "polySimp_addComm0" (formula "8") (term "0,1,0,0"))
   (rule "polySimp_addComm0" (formula "8") (term "0,0,0,0"))
   (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
   (rule "polySimp_addComm0" (formula "1") (term "1"))
   (rule "inEqSimp_commuteLeq" (formula "3"))
   (rule "polySimp_addComm0" (formula "8") (term "1,1,0,1,1"))
   (rule "polySimp_addComm1" (formula "7") (term "0"))
   (rule "polySimp_addComm0" (formula "8") (term "1,1,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
   (rule "polySimp_homoEq" (formula "8") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,1,1"))
   (rule "mul_literals" (formula "8") (term "0,1,0,1,1"))
   (rule "polySimp_addComm0" (formula "8") (term "0,1,1"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1"))
   (rule "polySimp_addComm0" (formula "8") (term "1,0,0,1"))
   (rule "polySimp_addComm1" (formula "8") (term "0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0"))
   (rule "polySimp_addComm1" (formula "8") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,1"))
   (rule "add_literals" (formula "8") (term "0,0,0,0,0,1"))
   (rule "add_zero_left" (formula "8") (term "0,0,0,0,1"))
   (rule "applyEq" (formula "8") (term "0,1,0,0,0,0") (ifseqformula "2"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0"))
   (rule "polySimp_pullOutFactor0" (formula "8") (term "0,0,0,0"))
   (rule "add_literals" (formula "8") (term "1,0,0,0,0"))
   (rule "times_zero_1" (formula "8") (term "0,0,0,0"))
   (rule "eqClose" (formula "8") (term "0,0,0"))
   (rule "concrete_and_1" (formula "8") (term "0,0"))
   (rule "applyEq" (formula "8") (term "0,1,0,0,1") (ifseqformula "1"))
   (rule "polySimp_pullOutFactor1" (formula "8") (term "0,0,1"))
   (rule "add_literals" (formula "8") (term "1,0,0,1"))
   (rule "times_zero_1" (formula "8") (term "0,0,1"))
   (rule "leq_literals" (formula "8") (term "0,1"))
   (rule "concrete_and_1" (formula "8") (term "1"))
   (rule "applyEq" (formula "3") (term "0") (ifseqformula "6"))
   (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
   (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "6"))
   (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "6"))
   (rule "applyEq" (formula "8") (term "1,0,1") (ifseqformula "6"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0"))
   (rule "mul_literals" (formula "8") (term "1,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "7"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0"))
   (rule "polySimp_elimOne" (formula "7") (term "0"))
   (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "7"))
   (rule "concrete_and_1" (formula "8") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1"))
   (rule "mul_literals" (formula "8") (term "0,1,1"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1"))
   (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "7"))
   (rule "concrete_and_3" (formula "8"))
   (rule "inEqSimp_geqRight" (formula "8"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "8"))
   (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
   (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
   (rule "add_literals" (formula "4") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "4") (term "1,0,0"))
   (rule "add_zero_right" (formula "4") (term "0,0"))
   (rule "qeq_literals" (formula "4") (term "0"))
   (rule "concrete_or_1" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
   (rule "qeq_literals" (formula "1") (term "0"))
   (rule "concrete_and_2" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch " Use Invariant"
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,1"))
   (rule "polySimp_homoEq" (formula "2") (term "0,1"))
   (rule "polySimp_addComm0" (formula "2") (term "0"))
   (rule "polySimp_addComm0" (formula "2") (term "0,0,0,1"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0,1"))
   (rule "polySimp_sepPosMonomial" (formula "2") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,1"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,1"))
   (rule "mul_literals" (formula "2") (term "0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,1"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,0,1"))
   (rule "exit" (formula "2") (userinteraction))
   (builtin "Update Simplification" (formula "2"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "3"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "5"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "inEqSimp_ltRight" (formula "6"))
   (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
   (rule "polySimp_addComm0" (formula "1") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "3"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "add_zero_left" (formula "7") (term "1"))
   (rule "applyEq" (formula "3") (term "0") (ifseqformula "6"))
   (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "6"))
   (rule "eqSymm" (formula "7"))
   (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
   (rule "applyEq" (formula "7") (term "0") (ifseqformula "2"))
   (rule "eqSymm" (formula "7"))
   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "elimGcdEq" (formula "7") (inst "elimGcdRightDiv=i") (inst "elimGcdLeftDiv=j0") (inst "elimGcd=2"))
   (rule "eqClose" (formula "7") (term "0,0,0"))
   (rule "concrete_and_1" (formula "7") (term "0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0,1,0"))
   (rule "add_literals" (formula "7") (term "1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,1,0"))
   (rule "polySimp_pullOutFactor0" (formula "7") (term "0,1,0"))
   (rule "add_literals" (formula "7") (term "1,0,1,0"))
   (rule "times_zero_1" (formula "7") (term "0,1,0"))
   (rule "qeq_literals" (formula "7") (term "1,0"))
   (rule "concrete_and_3" (formula "7") (term "0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
   (rule "polySimp_pullOutFactor0" (formula "7") (term "0,0"))
   (rule "add_literals" (formula "7") (term "1,0,0"))
   (rule "times_zero_1" (formula "7") (term "0,0"))
   (rule "leq_literals" (formula "7") (term "0"))
   (rule "ifthenelse_true_for" (formula "7"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
   (rule "polySimp_pullOutFactor0" (formula "7") (term "0,0"))
   (rule "add_literals" (formula "7") (term "1,0,0"))
   (rule "times_zero_1" (formula "7") (term "0,0"))
   (rule "eqClose" (formula "7") (term "0"))
   (rule "concrete_and_1" (formula "7"))
   (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "7"))
   (rule "inEqSimp_contradEq7" (formula "7") (ifseqformula "3"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
   (rule "add_literals" (formula "7") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0"))
   (rule "leq_literals" (formula "7") (term "0"))
   (rule "concrete_and_2" (formula "7"))
   (rule "false_right" (formula "7"))
   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
   (rule "andLeft" (formula "1"))
   (rule "inEqSimp_homoInEq1" (formula "1"))
   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "1,1,0"))
   (rule "times_zero_1" (formula "1") (term "1,0"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "leq_literals" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
)

}
