\settings {
"#Proof-Settings-Config-File
#Mon Apr 11 17:32:09 CEST 2005
[General]SoundNotification=false
[View]FontIndex=0
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[General]SuggestiveVarNames=false
[General]ProofAssistant=false
[View]ShowWholeTaclet=false
[View]MaxTooltipLines=40
[General]StupidMode=true
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_NORMAL
[Choice]DefaultChoices=transactionsPolicy-transactionsPolicy\:abortTransaction , programRules-programRules\:Java , initialisation-initialisation\:disableStaticInitialisation , intRules-intRules\:arithmeticSemanticsIgnoringOF , nullPointerPolicy-nullPointerPolicy\:nullCheck
[OCLRef]Null=true
[OCLRef]ExcThrown=true
[Model]Source=1
[Choice]Choices=programRules-programRules\:ODL-programRules\:Java , transactionsPolicy-transactionsPolicy\:abortTransaction-transactionsPolicy\:noAbortTransaction , initialisation-initialisation\:disableStaticInitialisation-initialisation\:enableStaticInitialisation , intRules-intRules\:arithmeticSemanticsCheckingOF-intRules\:javaSemantics-intRules\:arithmeticSemanticsIgnoringOF , nullPointerPolicy-nullPointerPolicy\:noNullCheck-nullPointerPolicy\:nullCheck
[OCLRef]Array=true
[DecisionProcedure]=SIMPLIFY
[General]OuterRenaming=true
[Strategy]ActiveStrategy=JavaCardDLStrategy
"
}

/**
@provable automatic
@statistic nodes 329
@statistic branches 10
@author Sebastian Wirkert (doc)

Proof example showing how the context in wich a method is called, 
affects the method invoked.
To understand this example, one must understand, how java evaluates the 
method to call. First of course, for a method to be called, it has to be 
visible in the context calling it. The private int m(int i) does not 
fulfill this prerequisite in the first two expressions:<br>

<ol>
<li><tt>c=A.callMviaB ();</tt></li>
<li><tt>b=B.callM ();</tt></li>
</ol>
Therefore the compiler will call the public int m(long i).
<br>
Things are different in case of 
<ol><li><tt>a=A.callM ();</tt></li> </ol>
The compiler now gets to choose between
<ol><li><tt> public  byte m(long i) { return 2; }</tt></li>
    <li><tt> private int m(int i) { return 1; }</tt></li>
</ol>
since<br>
<tt>
  static int callM() {<br>
     A a = new A();<br>
     return a.m(1);<br>
  }
</tt><br>
calls <tt>m</tt> with an integer value (1L would be a long value), the
compiler chooses the <tt>private int m(int i) { return 1; }</tt>
to be executed.
Note, that the compiler doesn't care for the type of the return value, 
its decicion is solely based on the type of the parameters.
*/

\javaSource "testcontext_java/";

\problem {
\<{
   int a,b,c;
   c=A.callMviaB ();
   b=B.callM ();
   a=A.callM ();
 }\> (a = 1 & b = 2 & c = 2)

}


