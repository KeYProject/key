\settings {
"#Proof-Settings-Config-File
#Mon Apr 11 17:32:09 CEST 2005
[General]SoundNotification=false
[View]FontIndex=0
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[General]SuggestiveVarNames=false
[General]ProofAssistant=false
[View]ShowWholeTaclet=false
[View]MaxTooltipLines=40
[General]StupidMode=true
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_NORMAL
[Choice]DefaultChoices=transactionsPolicy-transactionsPolicy\:abortTransaction , programRules-programRules\:Java , initialisation-initialisation\:disableStaticInitialisation , intRules-intRules\:arithmeticSemanticsIgnoringOF , nullPointerPolicy-nullPointerPolicy\:nullCheck
[OCLRef]Null=true
[OCLRef]ExcThrown=true
[Model]Source=1
[Choice]Choices=programRules-programRules\:ODL-programRules\:Java , transactionsPolicy-transactionsPolicy\:abortTransaction-transactionsPolicy\:noAbortTransaction , initialisation-initialisation\:disableStaticInitialisation-initialisation\:enableStaticInitialisation , intRules-intRules\:arithmeticSemanticsCheckingOF-intRules\:javaSemantics-intRules\:arithmeticSemanticsIgnoringOF , nullPointerPolicy-nullPointerPolicy\:noNullCheck-nullPointerPolicy\:nullCheck
[OCLRef]Array=true
[DecisionProcedure]=SIMPLIFY
[General]OuterRenaming=true
[Strategy]ActiveStrategy=JavaCardDLStrategy
"
}

/**
@provable automatic
@statistic nodes 94
@statistic branches 4
@author Sebastian Wirkert (doc)

Example showing how the invocation of methods work.
The class <tt>ConcreteDerived</tt> overrides the method <tt>m</tt> in class <tt>AbstractBase</
tt>. Although the reference to object <tt>o</tt> is of type 
<tt>AbstractBase</tt>, the actual object is of type <tt>ConcreteDerived</tt>.
When calling
   <tt>int j =o.m ();</tt>
The method <tt>m</tt> of class <tt>ConcreteDerived</tt> is called, since it overrides the method <tt>m</tt> from class <tt>AbstractBase</tt>. There is no way 
to access method <tt>m</tt> from class <tt>AbstractBase</tt> for an instance of <tt>ConcreteDerived</tt> from outside the body of <tt>ConcreteDerived</tt>.
Note that fields behave in a different way. They are not overridden, but hidden.
*/

\javaSource "methodcall_java/";

\problem {
\<{
   AbstractBase o =new ConcreteDerived ();
   int j =o.m ();
 }\> j = 2

}

