\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:off",
        "Strings" : "Strings:on",
        "assertions" : "assertions:safe",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:treatAsAxiom",
        "moreSeqRules" : "moreSeqRules:off",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:ban",
        "sequences" : "sequences:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 10000,
        "Timeout" : -1,
        "options" : { 
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_SCOPE_INV_TACLET",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_NONE",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_OFF",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_DEFAULT",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\javaSource "src";

\proofObligation "#Proof Obligation Settings
#Sat Feb 03 02:28:55 CET 2024
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
contract=BinarySearch[BinarySearch\\:\\:search([I,int)].JML normal_behavior operation contract.0
name=BinarySearch[BinarySearch\\:\\:search([I,int)].JML normal_behavior operation contract.0
";

\proof {
(keyLog "0" (keyUser "weigl" ) (keyVersion "25a0200947cf18c631dbe2f27075adf3a6ba728b"))

(autoModeTime "11089")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "eqSymm" (formula "6") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "5"))
 (builtin "One Step Simplification" (formula "2"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0"))
(rule "assignment" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "commute_and" (formula "4") (term "0,0,0,0"))
(rule "commute_and_2" (formula "4") (term "0,0,0"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_search,savedHeapBefore_search,_aBefore_search,_vBefore_search"))
 (builtin "One Step Simplification" (formula "6"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "l"))
(rule "assignment" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "r"))
(rule "compound_subtraction_1" (formula "6") (term "1") (inst "#v=i"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "i"))
(rule "assignment_read_length" (formula "6"))
(branch "Normal Execution (_a != null)"
    (builtin "One Step Simplification" (formula "6"))
   (rule "assignmentSubtractionInt" (formula "6") (term "1"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "translateJavaSubInt" (formula "6") (term "0,1,0"))
   (rule "polySimp_elimSub" (formula "6") (term "0,1,0"))
   (rule "mul_literals" (formula "6") (term "1,0,1,0"))
   (rule "polySimp_addComm0" (formula "6") (term "0,1,0"))
   (rule "ifUnfold" (formula "6") (term "1") (inst "#boolv=b"))
   (rule "variableDeclaration" (formula "6") (term "1") (newnames "b"))
   (rule "compound_equality_comparison_1" (formula "6") (term "1") (inst "#v0=i_1"))
   (rule "variableDeclarationAssign" (formula "6") (term "1"))
   (rule "variableDeclaration" (formula "6") (term "1") (newnames "i_1"))
   (rule "assignment_read_length" (formula "6"))
   (branch "Normal Execution (_a.length == 0 != null)"
       (builtin "One Step Simplification" (formula "6"))
      (rule "equality_comparison_simple" (formula "6") (term "1"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "ifSplit" (formula "6"))
      (branch "if _a.length == 0 true"
          (builtin "One Step Simplification" (formula "7"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "methodCallReturn" (formula "7") (term "1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "assignment" (formula "7") (term "1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "methodCallEmpty" (formula "7") (term "1"))
         (rule "tryEmpty" (formula "7") (term "1"))
         (rule "emptyModality" (formula "7") (term "1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "5") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,0"))
         (rule "applyEq" (formula "5") (term "0,1,0,0,1,0,0,0,0") (ifseqformula "1"))
         (rule "times_zero_2" (formula "5") (term "1,0,0,1,0,0,0,0"))
         (rule "add_zero_right" (formula "5") (term "0,0,1,0,0,0,0"))
         (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0,0") (ifseqformula "1"))
         (rule "times_zero_2" (formula "7") (term "1,0,0,1,0,0,0"))
         (rule "add_zero_right" (formula "7") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "5") (term "1,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,0"))
         (rule "mul_literals" (formula "7") (term "1,1,0,0,0"))
         (rule "nnf_imp2or" (formula "5") (term "0,0"))
         (rule "nnf_notAnd" (formula "5") (term "0,0,0"))
         (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0,0"))
         (rule "add_zero_right" (formula "5") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,0"))
         (rule "mul_literals" (formula "5") (term "1,1,0,0,0"))
         (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "5") (term "1,0,0,1,0,0,0,0"))
         (rule "add_literals" (formula "5") (term "0,0,1,0,0,0,0"))
         (rule "add_zero_left" (formula "5") (term "0,1,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "5") (term "0,0,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "5") (term "0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0,0,0"))
         (rule "commute_or_2" (formula "5") (term "0,0,0"))
         (rule "commute_or" (formula "5") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "5") (term "0,0,0"))
         (rule "ifthenelse_split_for" (formula "7"))
         (branch "exists int x; (((x >= 0 & x <= -1)<<SC>> & a[x] = v)<<SC>>) TRUE"
            (rule "exLeft" (formula "1") (inst "sk=x_0"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
         (branch "exists int x; (((x >= 0 & x <= -1)<<SC>> & a[x] = v)<<SC>>) FALSE"
            (rule "closeTrue" (formula "8"))
         )
      )
      (branch "if _a.length == 0 false"
          (builtin "One Step Simplification" (formula "7"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "ifUnfold" (formula "7") (term "1") (inst "#boolv=b_1"))
         (rule "variableDeclaration" (formula "7") (term "1") (newnames "b_1"))
         (rule "compound_equality_comparison_1" (formula "7") (term "1") (inst "#v0=i_2"))
         (rule "variableDeclarationAssign" (formula "7") (term "1"))
         (rule "variableDeclaration" (formula "7") (term "1") (newnames "i_2"))
         (rule "assignment_read_length" (formula "7"))
         (branch "Normal Execution (_a.length == 0 != null)"
             (builtin "One Step Simplification" (formula "7"))
            (rule "equality_comparison_simple" (formula "7") (term "1"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "ifSplit" (formula "7"))
            (branch "if _a.length == 1 true"
                (builtin "One Step Simplification" (formula "8"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "returnUnfold" (formula "8") (term "1") (inst "#v0=i_3"))
               (rule "variableDeclarationAssign" (formula "8") (term "1"))
               (rule "variableDeclaration" (formula "8") (term "1") (newnames "i_3"))
               (rule "condition_not_simple" (formula "8") (term "1") (inst "#v0=b_2"))
               (rule "variableDeclarationAssign" (formula "8") (term "1"))
               (rule "variableDeclaration" (formula "8") (term "1") (newnames "b_2"))
               (rule "compound_equality_comparison_1" (formula "8") (term "1") (inst "#v0=i_4"))
               (rule "variableDeclarationAssign" (formula "8") (term "1"))
               (rule "variableDeclaration" (formula "8") (term "1") (newnames "i_4"))
               (rule "assignment_array2" (formula "8"))
               (branch "Normal Execution (_a.length == 0 != null)"
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "equality_comparison_simple" (formula "8") (term "1"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "condition_simple" (formula "8") (term "1"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "methodCallReturn" (formula "8") (term "1"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "assignment" (formula "8") (term "1"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "methodCallEmpty" (formula "8") (term "1"))
                  (rule "tryEmpty" (formula "8") (term "1"))
                  (rule "emptyModality" (formula "8") (term "1"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "equal_literals" (formula "8") (term "1,2"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,0"))
                  (rule "applyEq" (formula "6") (term "0") (ifseqformula "1"))
                  (rule "equal_literals" (formula "6"))
                  (rule "false_right" (formula "6"))
                  (rule "applyEq" (formula "5") (term "0,1,0,0,1,0,0,0,0") (ifseqformula "1"))
                  (rule "mul_literals" (formula "5") (term "1,0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "5") (term "0,0,1,0,0,0,0"))
                  (rule "add_zero_left" (formula "5") (term "0,1,0,0,0,0"))
                  (rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0,0") (ifseqformula "1"))
                  (rule "mul_literals" (formula "7") (term "1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "7") (term "0,0,1,0,0,0"))
                  (rule "add_zero_left" (formula "7") (term "0,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0,0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "5") (term "0,0"))
                  (rule "nnf_notAnd" (formula "5") (term "0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0,0"))
                  (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "5") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "5") (term "1,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0,0"))
                  (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0,0,0"))
                  (rule "add_zero_right" (formula "5") (term "0,0,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "5") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "5") (term "0,0,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "5") (term "0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0,0,0"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0"))
                  (rule "commute_or" (formula "5") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0"))
                  (rule "ifthenelse_split" (formula "7") (term "0,2,0,1"))
                  (branch "a[0] = v TRUE"
                     (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "1"))
                     (rule "replace_known_left" (formula "8") (term "0,2") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "nnf_ex2all" (formula "8"))
                     (rule "nnf_notAnd" (formula "1") (term "0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                     (rule "inEqSimp_or_antiSymm0" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "1,0,1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_or" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "a[0] = v FALSE"
                     (rule "replace_known_right" (formula "8") (term "0,2") (ifseqformula "7"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "ifthenelse_split_for" (formula "8"))
                     (branch "exists int x; (((x >= 0 & x <= 0)<<SC>> & a[x] = v)<<SC>>) TRUE"
                        (rule "exLeft" (formula "1") (inst "sk=x_0"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                        (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                        (rule "leq_literals" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "applyEqRigid" (formula "2") (term "0,2,0") (ifseqformula "1"))
                        (rule "close" (formula "9") (ifseqformula "2"))
                     )
                     (branch "exists int x; (((x >= 0 & x <= 0)<<SC>> & a[x] = v)<<SC>>) FALSE"
                        (rule "closeTrue" (formula "9"))
                     )
                  )
               )
               (branch "Null Reference (_a.length == 0 = null)"
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Index Out of Bounds (_a.length == 0 != null, but 0 Out of Bounds!)"
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "false_right" (formula "9"))
                  (rule "less_literals" (formula "1") (term "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,0,0"))
                  (rule "applyEq" (formula "7") (term "0") (ifseqformula "2"))
                  (rule "equal_literals" (formula "7"))
                  (rule "false_right" (formula "7"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "if _a.length == 1 false"
                (builtin "One Step Simplification" (formula "8"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "loopScopeInvDia" (formula "8") (term "1") (newnames "l_0,r_0,o,f") (inst "#variant=a_1") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "#x=b_2") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_heap_LOOP=anon_heap_LOOP_0"))
               (branch "Invariant Initially Valid"
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "leq_literals" (formula "8") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1"))
                  (rule "polySimp_addComm1" (formula "8") (term "0,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0,1"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0,0,0,1"))
                  (rule "add_zero_left" (formula "8") (term "0,0,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "8") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor2" (formula "8") (term "0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "1,0,1,0,0"))
                  (rule "times_zero_1" (formula "8") (term "0,1,0,0"))
                  (rule "leq_literals" (formula "8") (term "1,0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0,1,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1"))
                  (rule "polySimp_addComm1" (formula "8") (term "0,1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "8") (term "0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0"))
                  (rule "mul_literals" (formula "8") (term "1,1,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "8") (term "0,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "4") (term "0,0"))
                  (rule "nnf_imp2or" (formula "8") (term "0,1"))
                  (rule "nnf_imp2or" (formula "8") (term "0,1,0"))
                  (rule "nnf_notAnd" (formula "4") (term "0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "4") (term "1,0,0,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "4") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "4") (term "1,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "8") (term "0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,1,0,0,0,0"))
                  (rule "add_zero_left" (formula "4") (term "0,0,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "4") (term "0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "8") (term "0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0,1"))
                  (rule "add_literals" (formula "8") (term "0,0,1,0,0,1"))
                  (rule "add_zero_left" (formula "8") (term "0,1,0,0,1"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_geqRight" (formula "8"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "6"))
                  (rule "add_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_contradEq3" (formula "6") (ifseqformula "1"))
                  (rule "add_zero_left" (formula "6") (term "0,0"))
                  (rule "mul_literals" (formula "6") (term "0,0"))
                  (rule "qeq_literals" (formula "6") (term "0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "false_right" (formula "6"))
                  (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "6"))
                  (rule "add_zero_right" (formula "1") (term "1"))
                  (rule "inEqSimp_contradEq3" (formula "6") (ifseqformula "1"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0"))
                  (rule "add_zero_right" (formula "6") (term "0,0"))
                  (rule "qeq_literals" (formula "6") (term "0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "false_right" (formula "6"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0"))
                  (rule "commute_or" (formula "5") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0"))
                  (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Invariant Preserved and Used"
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "eqSymm" (formula "9") (term "1,0,0,1,0,1,1,0,1,1,0,1"))
                  (rule "polySimp_elimSub" (formula "9") (term "0,1,1,1,0,1,1,0,1"))
                  (rule "polySimp_elimSub" (formula "9") (term "0,1,0,1,0,1"))
                  (rule "polySimp_addComm0" (formula "9") (term "0,1,1,1,0,1,1,0,1"))
                  (rule "polySimp_addComm0" (formula "9") (term "0,1,0,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0,0,1,1,0,1,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,0,0,1,1,0,1,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0,0,1"))
                  (rule "variableDeclaration" (formula "9") (term "1") (newnames "h"))
                  (rule "variableDeclaration" (formula "9") (term "1") (newnames "h_1"))
                  (rule "variableDeclaration" (formula "9") (term "1") (newnames "h_2"))
                  (rule "variableDeclaration" (formula "9") (term "1") (newnames "a_1"))
                  (rule "variableDeclaration" (formula "9") (term "1,1,0,1") (newnames "b_2"))
                  (rule "emptyModality" (formula "9") (term "1"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "impRight" (formula "9"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_and" (formula "4") (term "0,0"))
                  (rule "ifElseUnfold" (formula "14") (term "1") (inst "#boolv=b_3"))
                  (rule "variableDeclaration" (formula "14") (term "1") (newnames "b_3"))
                  (rule "compound_greater_than_comparison_2" (formula "14") (term "1") (inst "#v1=i_4") (inst "#v0=i_3"))
                  (rule "variableDeclarationAssign" (formula "14") (term "1"))
                  (rule "variableDeclaration" (formula "14") (term "1") (newnames "i_3"))
                  (rule "assignment" (formula "14") (term "1"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "variableDeclarationAssign" (formula "14") (term "1"))
                  (rule "variableDeclaration" (formula "14") (term "1") (newnames "i_4"))
                  (rule "assignmentAdditionInt" (formula "14") (term "1"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "translateJavaAddInt" (formula "14") (term "0,1,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "0,1,0"))
                  (rule "greater_than_comparison_simple" (formula "14") (term "1"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "arrayLengthNotNegative" (formula "10") (term "1,1,0,0,0,0"))
                  (rule "arrayLengthIsAnInt" (formula "11") (term "1,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "ifElseSplit" (formula "15"))
                  (branch "if r > l + 1 true"
                      (builtin "One Step Simplification" (formula "1"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "variableDeclarationAssign" (formula "16") (term "1"))
                     (rule "variableDeclaration" (formula "16") (term "1") (newnames "mid"))
                     (rule "compound_division_1" (formula "16") (term "1") (inst "#v=i_5"))
                     (rule "variableDeclarationAssign" (formula "16") (term "1"))
                     (rule "variableDeclaration" (formula "16") (term "1") (newnames "i_5"))
                     (rule "remove_parentheses_right" (formula "16") (term "1"))
                     (rule "assignmentAdditionInt" (formula "16") (term "1"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
                     (rule "assignmentDivisionInt" (formula "16"))
                     (branch "Case 1"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "translateJavaDivInt" (formula "16") (term "0,1,0"))
                        (rule "ifElseUnfold" (formula "16") (term "1") (inst "#boolv=b_4"))
                        (rule "variableDeclaration" (formula "16") (term "1") (newnames "b_4"))
                        (rule "compound_equality_comparison_1" (formula "16") (term "1") (inst "#v0=i_6"))
                        (rule "variableDeclarationAssign" (formula "16") (term "1"))
                        (rule "variableDeclaration" (formula "16") (term "1") (newnames "i_6"))
                        (rule "assignment_array2" (formula "16"))
                        (branch "Normal Execution (_a.length == 0 != null)"
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "pullOutSelect" (formula "16") (term "0,1,0") (inst "selectSK=arr_0"))
                           (rule "simplifySelectOfAnon" (formula "1"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "10")))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000110100_1" (formula "16") (term "0,1,0"))
                           (rule "equality_comparison_simple" (formula "16") (term "1"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "ifElseSplit" (formula "16"))
                           (branch "if _a[mid] == _v true"
                               (builtin "One Step Simplification" (formula "17"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "blockReturn" (formula "17") (term "1"))
                              (rule "blockReturn" (formula "17") (term "1"))
                              (rule "lsReturnNonVoid" (formula "17") (term "1"))
                              (rule "assignment" (formula "17") (term "1"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "methodCallReturn" (formula "17") (term "1"))
                              (rule "assignment" (formula "17") (term "1"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "methodCallEmpty" (formula "17") (term "1"))
                              (rule "tryEmpty" (formula "17") (term "1"))
                              (rule "emptyModality" (formula "17") (term "1"))
                               (opengoal " (  int::select(heap,                 a,                 arr(jdiv(add(l_0, r_0), Z(2(#)))))   = v)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>,  gt(r_0, add(Z(1(#)), l_0))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>,  geq(l_0, Z(0(#)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  lt(l_0, r_0)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  lt(r_0, length(a))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  (\\forall int x;     (   lt(x, l_0) & geq(x, Z(0(#)))      -> lt(int::select(anon(heap,                             empty,                             anon_heap_LOOP_0<<anonHeapFunction>>),                        a,                        arr(x)),            v)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  (\\forall int x;     (   lt(r_0, x) & lt(x, length(a))      -> lt(v,            int::select(anon(heap,                             empty,                             anon_heap_LOOP_0<<anonHeapFunction>>),                        a,                        arr(x)))))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  wellFormed(anon_heap_LOOP_0)<<anonHeapFunction,                                origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  wellFormed(heap)<<origin(\"requires (implicit)\", \"[]\")>>,  (  boolean::select(heap,                     a,                     java.lang.Object::<created>)   = TRUE)<<origin(\"requires (implicit)\", \"[]\")>>,  measuredByEmpty<<origin(\"requires (implicit)\", \"[]\")>>,  geq(length(a), Z(0(#))),  (\\forall int x;     \\forall int y;       (   lt(x, y) & lt(y, length(a)) & geq(x, Z(0(#)))        -> geq(int::select(heap, a, arr(y)),               int::select(heap, a, arr(x)))))<<origin(\"requires @ file BinarySearch.java @ line 4\",\"[]\")>> ==>  (length(a) = Z(1(#)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  (length(a) = Z(0(#)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  (a = null)<<origin(\"requires @ file BinarySearch.java @ line 4\",\"[requires @ file BinarySearch.java @ line 4]\")>>,  ({heapAtPre:=heap    || _a:=a    || _v:=v    || exc:=null    || (h:=heap    || (l:=l_0    || r:=r_0)    || heap:=anon(heap,                  empty,                  anon_heap_LOOP_0<<anonHeapFunction>>)    || a_1:=add(mul(l_0, Z(neglit(1(#)))), r_0))    || b_2:=TRUE    || result_search:=jdiv(add(l_0, r_0), Z(2(#)))}     ((  ((   b_2<<loopScopeIndex>> = TRUE           -> (  (\\if (\\exists int x;                         ((  (geq(x, Z(0(#)))                           & lt(x, length(a)))<<SC>>                           &   int::select(heap,                                           a,                                           arr(x))                             = v)<<SC>>))                      \\then (  int::select(heap,                                           a,                                           arr(result_search))                             = v)                      \\else (  result_search                             = Z(neglit(1(#))))<<origin(\"ensures @ file BinarySearch.java @ line 5\",\"[]\")>>               & (  exc<<origin(\"ensures (implicit)\",\"[]\")>>                  = null)<<impl,                           origin(\"ensures (implicit)\",\"[ensures (implicit)]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit)]\")>>               & (\\forall Field f;                    (\\forall java.lang.Object o;                       ((  (  (!(o = null)<<origin(\"assignable (implicit)\",\"[]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>                            & (!(  boolean::select(heapAtPre,                                                   o,                                                   java.lang.Object::<created>)                                 = TRUE)<<origin(\"assignable (implicit)\",\"[]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>                         | (  any::select(heapAtPre,                                          o,                                          f)                            = any::select(heap, o, f))<<origin(\"assignable (implicit)\",\"[]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>))<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>)       & ((   !b_2<<loopScopeIndex>> = TRUE           -> (  (((((geq(l, Z(0(#)))               & lt(l, r))<<SC>>               & lt(r, length(_a)))<<SC>>               & \\forall int x;                   (   (geq(x, Z(0(#))) & lt(x, l))<<SC>>                    -> lt(int::select(heap, _a, arr(x)),                          _v)))<<SC>>               & \\forall int x;                   (   (lt(r, x) & lt(x, length(_a)))<<SC>>                    -> lt(_v,                          int::select(heap, _a, arr(x)))))<<SC,                                                            origin(\"loop_invariant @ file BinarySearch.java @ line 14\",\"[]\")>>               & \\forall Field f;                   \\forall java.lang.Object o;                     (    !o = null                        & !  boolean::select(h,                                             o,                                             java.lang.Object::<created>)                           = TRUE                      |   any::select(h, o, f)                        = any::select(heap, o, f)))<<origin(\"<none> (implicit)\",\"[loop_invariant @ file BinarySearch.java @ line 14]\")>>               & prec(add(mul(l, Z(neglit(1(#)))), r),                      a_1))<<origin(\"<none> (implicit)\",\"[loop_invariant @ file BinarySearch.java @ line 14]\")>>)<<origin(\"<none> (implicit)\",\"[loop_invariant @ file BinarySearch.java @ line 14]\")>>))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>")
                           )
                           (branch "if _a[mid] == _v false"
                               (builtin "One Step Simplification" (formula "17"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "elim_double_block_2" (formula "17") (term "1"))
                              (rule "ifElseUnfold" (formula "17") (term "1") (inst "#boolv=b_5"))
                              (rule "variableDeclaration" (formula "17") (term "1") (newnames "b_5"))
                              (rule "compound_greater_than_comparison_1" (formula "17") (term "1") (inst "#v0=i_7"))
                              (rule "variableDeclarationAssign" (formula "17") (term "1"))
                              (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_7"))
                              (rule "assignment_array2" (formula "17"))
                              (branch "Normal Execution (_a.length == 0 != null)"
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "replaceKnownSelect_taclet000110100_0" (formula "17") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet000110100_1" (formula "17") (term "0,1,0"))
                                 (rule "greater_than_comparison_simple" (formula "17") (term "1"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "ifElseSplit" (formula "17"))
                                 (branch "if _a[mid] > _v true"
                                     (builtin "One Step Simplification" (formula "18"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "assignment" (formula "18") (term "1"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "blockEmpty" (formula "18") (term "1"))
                                    (rule "lsContinue" (formula "18") (term "1"))
                                     (opengoal " gt(int::select(heap,                 a,                 arr(jdiv(add(l_0, r_0), Z(2(#))))),     v)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>,  gt(r_0, add(Z(1(#)), l_0))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>,  geq(l_0, Z(0(#)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  lt(l_0, r_0)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  lt(r_0, length(a))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  (\\forall int x;     (   lt(x, l_0) & geq(x, Z(0(#)))      -> lt(int::select(anon(heap,                             empty,                             anon_heap_LOOP_0<<anonHeapFunction>>),                        a,                        arr(x)),            v)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  (\\forall int x;     (   lt(r_0, x) & lt(x, length(a))      -> lt(v,            int::select(anon(heap,                             empty,                             anon_heap_LOOP_0<<anonHeapFunction>>),                        a,                        arr(x)))))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  wellFormed(anon_heap_LOOP_0)<<anonHeapFunction,                                origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  wellFormed(heap)<<origin(\"requires (implicit)\", \"[]\")>>,  (  boolean::select(heap,                     a,                     java.lang.Object::<created>)   = TRUE)<<origin(\"requires (implicit)\", \"[]\")>>,  measuredByEmpty<<origin(\"requires (implicit)\", \"[]\")>>,  geq(length(a), Z(0(#))),  (\\forall int x;     \\forall int y;       (   lt(x, y) & lt(y, length(a)) & geq(x, Z(0(#)))        -> geq(int::select(heap, a, arr(y)),               int::select(heap, a, arr(x)))))<<origin(\"requires @ file BinarySearch.java @ line 4\",\"[]\")>> ==>  (  int::select(heap,                 a,                 arr(jdiv(add(l_0, r_0), Z(2(#)))))   = v)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>,  (length(a) = Z(1(#)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  (length(a) = Z(0(#)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  (a = null)<<origin(\"requires @ file BinarySearch.java @ line 4\",\"[requires @ file BinarySearch.java @ line 4]\")>>,  ({heapAtPre:=heap    || _a:=a    || _v:=v    || exc:=null    || (h:=heap    || l:=l_0    || heap:=anon(heap,                  empty,                  anon_heap_LOOP_0<<anonHeapFunction>>)    || a_1:=add(mul(l_0, Z(neglit(1(#)))), r_0))    || r:=jdiv(add(l_0, r_0), Z(2(#)))}     ({b_2:=FALSE}        ((  ((   b_2<<loopScopeIndex>> = TRUE              -> (  (\\if (\\exists int x;                            ((  (geq(x, Z(0(#)))                              & lt(x, length(a)))<<SC>>                              &   int::select(heap,                                              a,                                              arr(x))                                = v)<<SC>>))                         \\then (  int::select(heap,                                              a,                                              arr(result_search))                                = v)                         \\else (  result_search                                = Z(neglit(1(#))))<<origin(\"ensures @ file BinarySearch.java @ line 5\",\"[]\")>>                  & (  exc<<origin(\"ensures (implicit)\",\"[]\")>>                     = null)<<impl,                              origin(\"ensures (implicit)\",\"[ensures (implicit)]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit)]\")>>                  & (\\forall Field f;                       (\\forall java.lang.Object o;                          ((  (  (!(o = null)<<origin(\"assignable (implicit)\",\"[]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>                               & (!(  boolean::select(heapAtPre,                                                      o,                                                      java.lang.Object::<created>)                                    = TRUE)<<origin(\"assignable (implicit)\",\"[]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>                            | (  any::select(heapAtPre,                                             o,                                             f)                               = any::select(heap, o, f))<<origin(\"assignable (implicit)\",\"[]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>))<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>)          & ((   !b_2<<loopScopeIndex>> = TRUE              -> (  (((((geq(l, Z(0(#)))                  & lt(l, r))<<SC>>                  & lt(r, length(_a)))<<SC>>                  & \\forall int x;                      (   (geq(x, Z(0(#))) & lt(x, l))<<SC>>                       -> lt(int::select(heap,                                         _a,                                         arr(x)),                             _v)))<<SC>>                  & \\forall int x;                      (   (lt(r, x) & lt(x, length(_a)))<<SC>>                       -> lt(_v,                             int::select(heap,                                         _a,                                         arr(x)))))<<SC,                                                     origin(\"loop_invariant @ file BinarySearch.java @ line 14\",\"[]\")>>                  & \\forall Field f;                      \\forall java.lang.Object o;                        (    !o = null                           & !  boolean::select(h,                                                o,                                                java.lang.Object::<created>)                              = TRUE                         |   any::select(h, o, f)                           = any::select(heap, o, f)))<<origin(\"<none> (implicit)\",\"[loop_invariant @ file BinarySearch.java @ line 14]\")>>                  & prec(add(mul(l, Z(neglit(1(#)))), r),                         a_1))<<origin(\"<none> (implicit)\",\"[loop_invariant @ file BinarySearch.java @ line 14]\")>>)<<origin(\"<none> (implicit)\",\"[loop_invariant @ file BinarySearch.java @ line 14]\")>>))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>")
                                 )
                                 (branch "if _a[mid] > _v false"
                                     (builtin "One Step Simplification" (formula "18"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "assignment" (formula "18") (term "1"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "blockEmpty" (formula "18") (term "1"))
                                    (rule "lsContinue" (formula "18") (term "1"))
                                     (opengoal " gt(r_0, add(Z(1(#)), l_0))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>,  geq(l_0, Z(0(#)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  lt(l_0, r_0)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  lt(r_0, length(a))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  (\\forall int x;     (   lt(x, l_0) & geq(x, Z(0(#)))      -> lt(int::select(anon(heap,                             empty,                             anon_heap_LOOP_0<<anonHeapFunction>>),                        a,                        arr(x)),            v)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  (\\forall int x;     (   lt(r_0, x) & lt(x, length(a))      -> lt(v,            int::select(anon(heap,                             empty,                             anon_heap_LOOP_0<<anonHeapFunction>>),                        a,                        arr(x)))))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  wellFormed(anon_heap_LOOP_0)<<anonHeapFunction,                                origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  wellFormed(heap)<<origin(\"requires (implicit)\", \"[]\")>>,  (  boolean::select(heap,                     a,                     java.lang.Object::<created>)   = TRUE)<<origin(\"requires (implicit)\", \"[]\")>>,  measuredByEmpty<<origin(\"requires (implicit)\", \"[]\")>>,  geq(length(a), Z(0(#))),  (\\forall int x;     \\forall int y;       (   lt(x, y) & lt(y, length(a)) & geq(x, Z(0(#)))        -> geq(int::select(heap, a, arr(y)),               int::select(heap, a, arr(x)))))<<origin(\"requires @ file BinarySearch.java @ line 4\",\"[]\")>> ==>  gt(int::select(heap,                 a,                 arr(jdiv(add(l_0, r_0), Z(2(#))))),     v)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>,  (  int::select(heap,                 a,                 arr(jdiv(add(l_0, r_0), Z(2(#)))))   = v)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>,  (length(a) = Z(1(#)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  (length(a) = Z(0(#)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  (a = null)<<origin(\"requires @ file BinarySearch.java @ line 4\",\"[requires @ file BinarySearch.java @ line 4]\")>>,  ({heapAtPre:=heap    || _a:=a    || _v:=v    || exc:=null    || (h:=heap    || r:=r_0    || heap:=anon(heap,                  empty,                  anon_heap_LOOP_0<<anonHeapFunction>>)    || a_1:=add(mul(l_0, Z(neglit(1(#)))), r_0))    || l:=jdiv(add(l_0, r_0), Z(2(#)))}     ({b_2:=FALSE}        ((  ((   b_2<<loopScopeIndex>> = TRUE              -> (  (\\if (\\exists int x;                            ((  (geq(x, Z(0(#)))                              & lt(x, length(a)))<<SC>>                              &   int::select(heap,                                              a,                                              arr(x))                                = v)<<SC>>))                         \\then (  int::select(heap,                                              a,                                              arr(result_search))                                = v)                         \\else (  result_search                                = Z(neglit(1(#))))<<origin(\"ensures @ file BinarySearch.java @ line 5\",\"[]\")>>                  & (  exc<<origin(\"ensures (implicit)\",\"[]\")>>                     = null)<<impl,                              origin(\"ensures (implicit)\",\"[ensures (implicit)]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit)]\")>>                  & (\\forall Field f;                       (\\forall java.lang.Object o;                          ((  (  (!(o = null)<<origin(\"assignable (implicit)\",\"[]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>                               & (!(  boolean::select(heapAtPre,                                                      o,                                                      java.lang.Object::<created>)                                    = TRUE)<<origin(\"assignable (implicit)\",\"[]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>                            | (  any::select(heapAtPre,                                             o,                                             f)                               = any::select(heap, o, f))<<origin(\"assignable (implicit)\",\"[]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>))<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>)<<origin(\"assignable (implicit)\",\"[assignable (implicit)]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>)          & ((   !b_2<<loopScopeIndex>> = TRUE              -> (  (((((geq(l, Z(0(#)))                  & lt(l, r))<<SC>>                  & lt(r, length(_a)))<<SC>>                  & \\forall int x;                      (   (geq(x, Z(0(#))) & lt(x, l))<<SC>>                       -> lt(int::select(heap,                                         _a,                                         arr(x)),                             _v)))<<SC>>                  & \\forall int x;                      (   (lt(r, x) & lt(x, length(_a)))<<SC>>                       -> lt(_v,                             int::select(heap,                                         _a,                                         arr(x)))))<<SC,                                                     origin(\"loop_invariant @ file BinarySearch.java @ line 14\",\"[]\")>>                  & \\forall Field f;                      \\forall java.lang.Object o;                        (    !o = null                           & !  boolean::select(h,                                                o,                                                java.lang.Object::<created>)                              = TRUE                         |   any::select(h, o, f)                           = any::select(heap, o, f)))<<origin(\"<none> (implicit)\",\"[loop_invariant @ file BinarySearch.java @ line 14]\")>>                  & prec(add(mul(l, Z(neglit(1(#)))), r),                         a_1))<<origin(\"<none> (implicit)\",\"[loop_invariant @ file BinarySearch.java @ line 14]\")>>)<<origin(\"<none> (implicit)\",\"[loop_invariant @ file BinarySearch.java @ line 14]\")>>))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>")
                                 )
                              )
                              (branch "Null Reference (_a.length == 0 = null)"
                                 (rule "false_right" (formula "18"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "Index Out of Bounds (_a.length == 0 != null, but _a.length == 0 Out of Bounds!)"
                                  (opengoal " ({heapAtPre:=heap    || _a:=a    || _v:=v    || exc:=null    || (h:=heap    || (l:=l_0    || r:=r_0)    || heap:=anon(heap,                  empty,                  anon_heap_LOOP_0<<anonHeapFunction>>)    || a_1:=add(mul(l_0, Z(neglit(1(#)))), r_0))    || mid:=jdiv(add(l_0, r_0), Z(2(#)))}     ((  (!(  _a<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>            = null)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>       & ((  leq(length(_a<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>),                 mid<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>           | lt(mid<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>,                Z(0(#)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>,  gt(r_0, add(Z(1(#)), l_0))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>,  geq(l_0, Z(0(#)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  lt(l_0, r_0)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  lt(r_0, length(a))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  (\\forall int x;     (   lt(x, l_0) & geq(x, Z(0(#)))      -> lt(int::select(anon(heap,                             empty,                             anon_heap_LOOP_0<<anonHeapFunction>>),                        a,                        arr(x)),            v)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  (\\forall int x;     (   lt(r_0, x) & lt(x, length(a))      -> lt(v,            int::select(anon(heap,                             empty,                             anon_heap_LOOP_0<<anonHeapFunction>>),                        a,                        arr(x)))))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  wellFormed(anon_heap_LOOP_0)<<anonHeapFunction,                                origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  wellFormed(heap)<<origin(\"requires (implicit)\", \"[]\")>>,  (  boolean::select(heap,                     a,                     java.lang.Object::<created>)   = TRUE)<<origin(\"requires (implicit)\", \"[]\")>>,  measuredByEmpty<<origin(\"requires (implicit)\", \"[]\")>>,  geq(length(a), Z(0(#))),  (\\forall int x;     \\forall int y;       (   lt(x, y) & lt(y, length(a)) & geq(x, Z(0(#)))        -> geq(int::select(heap, a, arr(y)),               int::select(heap, a, arr(x)))))<<origin(\"requires @ file BinarySearch.java @ line 4\",\"[]\")>> ==>  (  int::select(heap,                 a,                 arr(jdiv(add(l_0, r_0), Z(2(#)))))   = v)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>,  (length(a) = Z(1(#)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  (length(a) = Z(0(#)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  (a = null)<<origin(\"requires @ file BinarySearch.java @ line 4\",\"[requires @ file BinarySearch.java @ line 4]\")>>,  ({heapAtPre:=heap    || _a:=a    || _v:=v    || exc:=null    || (h:=heap    || (l:=l_0    || r:=r_0)    || heap:=anon(heap,                  empty,                  anon_heap_LOOP_0<<anonHeapFunction>>)    || a_1:=add(mul(l_0, Z(neglit(1(#)))), r_0))    || mid:=jdiv(add(l_0, r_0), Z(2(#)))}     false<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>")
                              )
                           )
                        )
                        (branch "Null Reference (_a.length == 0 = null)"
                           (rule "false_right" (formula "17"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "Index Out of Bounds (_a.length == 0 != null, but _a.length == 0 Out of Bounds!)"
                            (opengoal " ({heapAtPre:=heap    || _a:=a    || _v:=v    || exc:=null    || (h:=heap    || (l:=l_0    || r:=r_0)    || heap:=anon(heap,                  empty,                  anon_heap_LOOP_0<<anonHeapFunction>>)    || a_1:=add(mul(l_0, Z(neglit(1(#)))), r_0))    || mid:=jdiv(add(l_0, r_0), Z(2(#)))}     ((  (!(  _a<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>            = null)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>       & ((  leq(length(_a<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>),                 mid<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>           | lt(mid<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>,                Z(0(#)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>,  gt(r_0, add(Z(1(#)), l_0))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>,  geq(l_0, Z(0(#)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  lt(l_0, r_0)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  lt(r_0, length(a))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  (\\forall int x;     (   lt(x, l_0) & geq(x, Z(0(#)))      -> lt(int::select(anon(heap,                             empty,                             anon_heap_LOOP_0<<anonHeapFunction>>),                        a,                        arr(x)),            v)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  (\\forall int x;     (   lt(r_0, x) & lt(x, length(a))      -> lt(v,            int::select(anon(heap,                             empty,                             anon_heap_LOOP_0<<anonHeapFunction>>),                        a,                        arr(x)))))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  wellFormed(anon_heap_LOOP_0)<<anonHeapFunction,                                origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  wellFormed(heap)<<origin(\"requires (implicit)\", \"[]\")>>,  (  boolean::select(heap,                     a,                     java.lang.Object::<created>)   = TRUE)<<origin(\"requires (implicit)\", \"[]\")>>,  measuredByEmpty<<origin(\"requires (implicit)\", \"[]\")>>,  geq(length(a), Z(0(#))),  (\\forall int x;     \\forall int y;       (   lt(x, y) & lt(y, length(a)) & geq(x, Z(0(#)))        -> geq(int::select(heap, a, arr(y)),               int::select(heap, a, arr(x)))))<<origin(\"requires @ file BinarySearch.java @ line 4\",\"[]\")>> ==>  (length(a) = Z(1(#)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  (length(a) = Z(0(#)))<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit)]\")>>,  (a = null)<<origin(\"requires @ file BinarySearch.java @ line 4\",\"[requires @ file BinarySearch.java @ line 4]\")>>,  ({heapAtPre:=heap    || _a:=a    || _v:=v    || exc:=null    || (h:=heap    || (l:=l_0    || r:=r_0)    || heap:=anon(heap,                  empty,                  anon_heap_LOOP_0<<anonHeapFunction>>)    || a_1:=add(mul(l_0, Z(neglit(1(#)))), r_0))    || mid:=jdiv(add(l_0, r_0), Z(2(#)))}     false<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>)<<origin(\"<none> (implicit)\",\"[ensures @ file BinarySearch.java @ line 5, ensures (implicit), assignable (implicit), loop_invariant @ file BinarySearch.java @ line 14]\")>>")
                        )
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "equal_literals" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "closeTrue" (formula "16"))
                     )
                  )
                  (branch "if r > l + 1 false"
                      (builtin "One Step Simplification" (formula "16"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "elim_double_block_2" (formula "16") (term "1"))
                     (rule "blockBreak" (formula "16") (term "1"))
                     (rule "lsBreak" (formula "16") (term "1"))
                     (rule "assignment" (formula "16") (term "1"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "ifUnfold" (formula "16") (term "1") (inst "#boolv=b_4"))
                     (rule "variableDeclaration" (formula "16") (term "1") (newnames "b_4"))
                     (rule "compound_equality_comparison_1" (formula "16") (term "1") (inst "#v0=i_5"))
                     (rule "variableDeclarationAssign" (formula "16") (term "1"))
                     (rule "variableDeclaration" (formula "16") (term "1") (newnames "i_5"))
                     (rule "assignment_array2" (formula "16"))
                     (branch "Normal Execution (_a.length == 0 != null)"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "pullOutSelect" (formula "16") (term "0,1,0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "9")))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet01110100_1" (formula "16") (term "0,1,0"))
                        (rule "equality_comparison_simple" (formula "16") (term "1"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "ifSplit" (formula "16"))
                        (branch "if _a[l] == _v true"
                            (builtin "One Step Simplification" (formula "1"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "methodCallReturn" (formula "17") (term "1"))
                           (rule "assignment" (formula "17") (term "1"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "methodCallEmpty" (formula "17") (term "1"))
                           (rule "tryEmpty" (formula "17") (term "1"))
                           (rule "emptyModality" (formula "17") (term "1"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "replaceKnownSelect_taclet01110100_0" (formula "17") (term "0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet01110100_1" (formula "17") (term "0,1,0"))
                           (rule "eqSymm" (formula "17") (term "1,0,0,1"))
                           (rule "replace_known_left" (formula "17") (term "1,0") (ifseqformula "1"))
                           (rule "inEqSimp_gtRight" (formula "13"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                           (rule "polySimp_elimOne" (formula "5") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,0,0"))
                           (rule "inEqSimp_contradEq7" (formula "17") (term "2,0") (ifseqformula "3"))
                           (rule "add_zero_left" (formula "17") (term "0,0,2,0"))
                           (rule "mul_literals" (formula "17") (term "0,0,2,0"))
                           (rule "leq_literals" (formula "17") (term "0,2,0"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "inEqSimp_strengthen1" (formula "12") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "12") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "15") (ifseqformula "12"))
                           (rule "times_zero_1" (formula "15") (term "1,0,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0"))
                           (rule "leq_literals" (formula "15") (term "0"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "false_right" (formula "15"))
                           (rule "inEqSimp_strengthen1" (formula "12") (ifseqformula "14"))
                           (rule "add_literals" (formula "12") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "14") (ifseqformula "12"))
                           (rule "mul_literals" (formula "14") (term "1,0,0"))
                           (rule "add_literals" (formula "14") (term "0,0"))
                           (rule "leq_literals" (formula "14") (term "0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "false_right" (formula "14"))
                           (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "6") (term "1,1") (ifseqformula "4"))
                           (rule "polySimp_addAssoc" (formula "6") (term "1"))
                           (rule "add_literals" (formula "6") (term "0,1"))
                           (rule "applyEq" (formula "8") (term "1,1,0,0,0") (ifseqformula "4"))
                           (rule "polySimp_addAssoc" (formula "8") (term "1,0,0,0"))
                           (rule "add_literals" (formula "8") (term "0,1,0,0,0"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq0" (formula "1"))
                           (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,0"))
                           (rule "times_zero_1" (formula "1") (term "0"))
                           (rule "qeq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "4"))
                           (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "1,0"))
                           (rule "times_zero_1" (formula "4") (term "0"))
                           (rule "leq_literals" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "nnf_imp2or" (formula "5") (term "0"))
                           (rule "nnf_imp2or" (formula "12") (term "0,0"))
                           (rule "nnf_imp2or" (formula "6") (term "0"))
                           (rule "nnf_notAnd" (formula "5") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "5") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0"))
                           (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "5") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                           (rule "mul_literals" (formula "5") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "6") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "6") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0"))
                           (rule "andRight" (formula "14"))
                           (branch "Case 1"
                              (rule "nnf_ex2all" (formula "14"))
                              (rule "nnf_notAnd" (formula "1") (term "0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                              (rule "commute_or" (formula "6") (term "0,0"))
                              (rule "commute_or_2" (formula "13") (term "0,0,0"))
                              (rule "commute_or" (formula "13") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "13") (term "0,0,0"))
                              (rule "allLeft" (formula "1") (inst "t=l_0"))
                              (rule "replaceKnownSelect_taclet01110100_0" (formula "1") (term "0,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet01110100_1" (formula "1") (term "0,0,1"))
                              (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                              (rule "andLeft" (formula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "1"))
                              (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,1,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "leq_literals" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "14") (inst "sk=f_0"))
                              (rule "allRight" (formula "14") (inst "sk=o_0"))
                              (rule "orRight" (formula "14"))
                              (rule "pullOutSelect" (formula "15") (term "0") (inst "selectSK=f_0_0"))
                              (rule "simplifySelectOfAnon" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                              (rule "applyEqReverse" (formula "16") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "closeTrue" (formula "16"))
                           )
                        )
                        (branch "if _a[l] == _v false"
                            (builtin "One Step Simplification" (formula "1"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "notLeft" (formula "1"))
                           (rule "ifUnfold" (formula "17") (term "1") (inst "#boolv=b_5"))
                           (rule "variableDeclaration" (formula "17") (term "1") (newnames "b_5"))
                           (rule "compound_equality_comparison_1" (formula "17") (term "1") (inst "#v0=i_6"))
                           (rule "variableDeclarationAssign" (formula "17") (term "1"))
                           (rule "variableDeclaration" (formula "17") (term "1") (newnames "i_6"))
                           (rule "assignment_array2" (formula "17"))
                           (branch "Normal Execution (_a.length == 0 != null)"
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "pullOutSelect" (formula "17") (term "0,1,0") (inst "selectSK=arr_1"))
                              (rule "simplifySelectOfAnon" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")) (ifInst ""  (formula "9")))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0101110100_3" (formula "17") (term "0,1,0"))
                              (rule "equality_comparison_simple" (formula "17") (term "1"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "ifSplit" (formula "17"))
                              (branch "if _a[r] == _v true"
                                  (builtin "One Step Simplification" (formula "1"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "methodCallReturn" (formula "18") (term "1"))
                                 (rule "assignment" (formula "18") (term "1"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "methodCallEmpty" (formula "18") (term "1"))
                                 (rule "tryEmpty" (formula "18") (term "1"))
                                 (rule "emptyModality" (formula "18") (term "1"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "replaceKnownSelect_taclet0101110100_2" (formula "18") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0101110100_3" (formula "18") (term "0,1,0"))
                                 (rule "eqSymm" (formula "18") (term "1,0,0,1"))
                                 (rule "replace_known_left" (formula "18") (term "1,0") (ifseqformula "1"))
                                 (rule "inEqSimp_gtRight" (formula "14"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "5"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "7") (term "0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "4"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,1,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0,0"))
                                 (rule "inEqSimp_strengthen1" (formula "12") (ifseqformula "16"))
                                 (rule "add_zero_right" (formula "12") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "16") (ifseqformula "12"))
                                 (rule "times_zero_1" (formula "16") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "16") (term "0,0"))
                                 (rule "leq_literals" (formula "16") (term "0"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "false_right" (formula "16"))
                                 (rule "inEqSimp_strengthen1" (formula "12") (ifseqformula "15"))
                                 (rule "add_literals" (formula "12") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "15") (ifseqformula "12"))
                                 (rule "mul_literals" (formula "15") (term "1,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0"))
                                 (rule "leq_literals" (formula "15") (term "0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "false_right" (formula "15"))
                                 (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "8") (term "1,1,0,0,0") (ifseqformula "4"))
                                 (rule "polySimp_addAssoc" (formula "8") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "8") (term "0,1,0,0,0"))
                                 (rule "applyEq" (formula "2") (term "0,2,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "5"))
                                 (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                                 (rule "add_literals" (formula "5") (term "1,0"))
                                 (rule "times_zero_1" (formula "5") (term "0"))
                                 (rule "leq_literals" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq0" (formula "1"))
                                 (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,0"))
                                 (rule "times_zero_1" (formula "1") (term "0"))
                                 (rule "qeq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEqRigid" (formula "15") (term "0,2,0") (ifseqformula "3"))
                                 (rule "polySimp_homoEq" (formula "15") (term "2,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,2,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,0,2,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,0,2,0"))
                                 (rule "polySimp_addAssoc" (formula "15") (term "0,2,0"))
                                 (rule "add_literals" (formula "15") (term "0,0,2,0"))
                                 (rule "applyEq" (formula "4") (term "1,1") (ifseqformula "3"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "1"))
                                 (rule "add_literals" (formula "4") (term "0,1"))
                                 (rule "polySimp_sepNegMonomial" (formula "15") (term "2,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "0,2,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "0,2,0"))
                                 (rule "inEqSimp_contradEq7" (formula "15") (term "2,0") (ifseqformula "2"))
                                 (rule "add_zero_left" (formula "15") (term "0,0,2,0"))
                                 (rule "mul_literals" (formula "15") (term "0,0,2,0"))
                                 (rule "leq_literals" (formula "15") (term "0,2,0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "nnf_imp2or" (formula "5") (term "0"))
                                 (rule "nnf_imp2or" (formula "12") (term "0,0"))
                                 (rule "nnf_imp2or" (formula "6") (term "0"))
                                 (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                                 (rule "mul_literals" (formula "5") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "6") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "6") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0"))
                                 (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0"))
                                 (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0"))
                                 (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "commute_or" (formula "5") (term "0,0"))
                                 (rule "andRight" (formula "15"))
                                 (branch "Case 1"
                                    (rule "nnf_ex2all" (formula "15"))
                                    (rule "nnf_notAnd" (formula "1") (term "0"))
                                    (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                    (rule "commute_or_2" (formula "13") (term "0,0,0"))
                                    (rule "commute_or" (formula "13") (term "0,0,0,0"))
                                    (rule "commute_or_2" (formula "13") (term "0,0,0"))
                                    (rule "allLeft" (formula "1") (inst "t=l_0"))
                                    (rule "replaceKnownSelect_taclet01110100_0" (formula "1") (term "0,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet01110100_1" (formula "1") (term "0,0,1"))
                                    (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "15"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "allLeft" (formula "13") (inst "t=l_0"))
                                    (rule "inEqSimp_contradInEq1" (formula "13") (term "0,0,0,0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "13") (term "0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "commute_or" (formula "13") (term "0,0"))
                                    (rule "allLeft" (formula "1") (inst "t=add(Z(1(#)), l_0)"))
                                    (rule "inEqSimp_commuteGeq" (formula "1") (term "1,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "1") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                    (rule "leq_literals" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "pullOutSelect" (formula "15") (term "0") (inst "selectSK=arr_2"))
                                    (rule "simplifySelectOfAnon" (formula "1"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "11")))
                                    (rule "applyEqReverse" (formula "16") (term "0") (ifseqformula "1"))
                                    (rule "close" (formula "16") (ifseqformula "3"))
                                 )
                                 (branch "Case 2"
                                    (rule "allRight" (formula "15") (inst "sk=f_0"))
                                    (rule "allRight" (formula "15") (inst "sk=o_0"))
                                    (rule "orRight" (formula "15"))
                                    (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=f_0_0"))
                                    (rule "simplifySelectOfAnon" (formula "1"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                                    (rule "applyEqReverse" (formula "17") (term "0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "closeTrue" (formula "17"))
                                 )
                              )
                              (branch "if _a[r] == _v false"
                                  (builtin "One Step Simplification" (formula "1"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "methodCallReturn" (formula "18") (term "1"))
                                 (rule "assignment" (formula "18") (term "1"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "methodCallEmpty" (formula "18") (term "1"))
                                 (rule "tryEmpty" (formula "18") (term "1"))
                                 (rule "emptyModality" (formula "18") (term "1"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "eqSymm" (formula "18") (term "1,0,0,1"))
                                 (rule "inEqSimp_gtRight" (formula "14"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "3"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "4"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "12") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "0,1,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0,0"))
                                 (rule "inEqSimp_strengthen1" (formula "11") (ifseqformula "16"))
                                 (rule "add_zero_right" (formula "11") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "16") (ifseqformula "11"))
                                 (rule "times_zero_1" (formula "16") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "16") (term "0,0"))
                                 (rule "leq_literals" (formula "16") (term "0"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "false_right" (formula "16"))
                                 (rule "inEqSimp_strengthen1" (formula "11") (ifseqformula "15"))
                                 (rule "add_literals" (formula "11") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "15") (ifseqformula "11"))
                                 (rule "mul_literals" (formula "15") (term "1,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0"))
                                 (rule "leq_literals" (formula "15") (term "0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "false_right" (formula "15"))
                                 (rule "pullOutSelect" (formula "16") (term "0,1,0") (inst "selectSK=arr_2"))
                                 (rule "simplifySelectOfAnon" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "10")))
                                 (rule "applyEqReverse" (formula "17") (term "0,1,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq0" (formula "1"))
                                 (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,0"))
                                 (rule "times_zero_1" (formula "1") (term "0"))
                                 (rule "qeq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEqRigid" (formula "13") (term "0,2,0") (ifseqformula "2"))
                                 (rule "applyEqRigid" (formula "4") (term "1,1") (ifseqformula "2"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "1"))
                                 (rule "add_literals" (formula "4") (term "0,1"))
                                 (rule "applyEqRigid" (formula "6") (term "1,1,0,0,0") (ifseqformula "2"))
                                 (rule "polySimp_addAssoc" (formula "6") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "6") (term "0,1,0,0,0"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "3"))
                                 (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "1,0"))
                                 (rule "times_zero_1" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "nnf_imp2or" (formula "4") (term "0"))
                                 (rule "nnf_imp2or" (formula "11") (term "0,0"))
                                 (rule "nnf_imp2or" (formula "5") (term "0"))
                                 (rule "nnf_notAnd" (formula "4") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "4") (term "1,0,0"))
                                 (rule "mul_literals" (formula "4") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "4") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                                 (rule "mul_literals" (formula "4") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "4") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "commute_or" (formula "4") (term "0,0"))
                                 (rule "commute_or_2" (formula "11") (term "0,0,0"))
                                 (rule "commute_or" (formula "11") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "11") (term "0,0,0"))
                                 (rule "ifthenelse_split_for" (formula "15") (term "0"))
                                 (branch "exists int x; ( (x >= 0 & x <= -1 + a.length)<<SC>> & a[x]@heap[anon({}, anon_heap_LOOP_0<<anonHeapFunction>>)] = v) TRUE"
                                    (rule "exLeft" (formula "1") (inst "sk=x_0"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "2"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                    (rule "mul_literals" (formula "2") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_3"))
                                    (rule "simplifySelectOfAnon" (formula "3"))
                                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "18")) (ifInst ""  (formula "12")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "allLeft" (formula "14") (inst "t=l_0"))
                                    (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0,0,0") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "14") (term "0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "commute_or" (formula "14") (term "0,0"))
                                    (rule "allLeft" (formula "14") (inst "t=add(Z(1(#)), l_0)"))
                                    (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                                    (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0"))
                                    (rule "add_literals" (formula "14") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "14") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "14") (term "0,0,0"))
                                    (rule "qeq_literals" (formula "14") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq1" (formula "14") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "14") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0"))
                                    (rule "add_literals" (formula "14") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "14") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "14") (term "0,0,0"))
                                    (rule "leq_literals" (formula "14") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "cut_direct" (formula "20") (term "0"))
                                    (branch "CUT: a[-1] = v TRUE"
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "allRight" (formula "21") (inst "sk=f_0"))
                                       (rule "allRight" (formula "21") (inst "sk=o_0"))
                                       (rule "orRight" (formula "21"))
                                       (rule "pullOutSelect" (formula "22") (term "0") (inst "selectSK=f_0_0"))
                                       (rule "simplifySelectOfAnon" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                                       (rule "applyEqReverse" (formula "23") (term "0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "23"))
                                       (rule "closeTrue" (formula "23"))
                                    )
                                    (branch "CUT: a[-1] = v FALSE"
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "false_right" (formula "21"))
                                       (rule "allLeft" (formula "16") (inst "t=x_0"))
                                       (rule "applyEq" (formula "16") (term "1,1,0") (ifseqformula "3"))
                                       (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0,0,0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "16") (term "0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "commute_or" (formula "16") (term "0,0"))
                                       (rule "allLeft" (formula "17") (inst "t=add(Z(1(#)), l_0)"))
                                       (rule "inEqSimp_homoInEq0" (formula "17") (term "0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "17") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "17") (term "0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0,0,0") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "17") (term "0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "commute_or" (formula "17") (term "0,0"))
                                       (rule "allLeft" (formula "7") (inst "t=x_0"))
                                       (rule "replaceKnownSelect_taclet010101110100_6" (formula "7") (term "0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet010101110100_7" (formula "7") (term "0,1"))
                                       (rule "applyEq" (formula "7") (term "0,1") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq0" (formula "7") (term "1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1"))
                                       (rule "add_literals" (formula "7") (term "1,1,0,1"))
                                       (rule "times_zero_1" (formula "7") (term "1,0,1"))
                                       (rule "add_zero_right" (formula "7") (term "0,1"))
                                       (rule "qeq_literals" (formula "7") (term "1"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "7") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "allLeft" (formula "9") (inst "t=x_0"))
                                       (rule "replaceKnownSelect_taclet010101110100_6" (formula "9") (term "0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet010101110100_7" (formula "9") (term "0,1"))
                                       (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0"))
                                       (rule "applyEq" (formula "9") (term "0,1") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "9") (term "1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,1"))
                                       (rule "add_literals" (formula "9") (term "1,1,0,1"))
                                       (rule "times_zero_1" (formula "9") (term "1,0,1"))
                                       (rule "add_zero_right" (formula "9") (term "0,1"))
                                       (rule "leq_literals" (formula "9") (term "1"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
                                       (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "9") (term "0,0,1"))
                                       (rule "leq_literals" (formula "9") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "9"))
                                       (rule "mul_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "5"))
                                       (rule "leq_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "allLeft" (formula "17") (inst "t=x_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
                                       (rule "applyEq" (formula "17") (term "0,1") (ifseqformula "3"))
                                       (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "17") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "17") (term "1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "17") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "17") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "cut_direct" (formula "17") (term "0"))
                                       (branch "CUT: x_0 <= l_0 TRUE"
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "true_left" (formula "18"))
                                          (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "17"))
                                          (rule "inEqSimp_homoInEq0" (formula "9") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0"))
                                          (rule "add_literals" (formula "9") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "9") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "9") (term "0,0"))
                                          (rule "qeq_literals" (formula "9") (term "0"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "16"))
                                          (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "7"))
                                          (rule "applyEq" (formula "17") (term "0") (ifseqformula "7"))
                                          (rule "inEqSimp_homoInEq0" (formula "17"))
                                          (rule "polySimp_pullOutFactor1" (formula "17") (term "0"))
                                          (rule "add_literals" (formula "17") (term "1,0"))
                                          (rule "times_zero_1" (formula "17") (term "0"))
                                          (rule "qeq_literals" (formula "17"))
                                          (rule "true_left" (formula "17"))
                                          (rule "applyEq" (formula "3") (term "0,2,0") (ifseqformula "7"))
                                          (rule "close" (formula "22") (ifseqformula "3"))
                                       )
                                       (branch "CUT: x_0 <= l_0 FALSE"
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "inEqSimp_leqRight" (formula "22"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_strengthen0" (formula "18") (ifseqformula "24"))
                                          (rule "inEqSimp_contradEq3" (formula "24") (ifseqformula "18"))
                                          (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0"))
                                          (rule "add_literals" (formula "24") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "24") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "24") (term "0,0"))
                                          (rule "qeq_literals" (formula "24") (term "0"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "false_right" (formula "24"))
                                          (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
                                          (rule "add_literals" (formula "8") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "8") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "8") (term "0,0"))
                                          (rule "qeq_literals" (formula "8") (term "0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "9"))
                                          (rule "applyEqRigid" (formula "20") (term "1,0,0,0") (ifseqformula "1"))
                                          (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                                          (rule "add_literals" (formula "2") (term "1,0"))
                                          (rule "times_zero_1" (formula "2") (term "0"))
                                          (rule "leq_literals" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                                          (rule "applyEqRigid" (formula "4") (term "0,2,0") (ifseqformula "1"))
                                          (rule "close" (formula "22") (ifseqformula "4"))
                                       )
                                    )
                                 )
                                 (branch "exists int x; ( (x >= 0 & x <= -1 + a.length)<<SC>> & a[x]@heap[anon({}, anon_heap_LOOP_0<<anonHeapFunction>>)] = v) FALSE"
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "allRight" (formula "16") (inst "sk=f_0"))
                                    (rule "allRight" (formula "16") (inst "sk=o_0"))
                                    (rule "orRight" (formula "16"))
                                    (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=f_0_0"))
                                    (rule "simplifySelectOfAnon" (formula "1"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                                    (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "closeTrue" (formula "18"))
                                 )
                              )
                           )
                           (branch "Null Reference (_a.length == 0 = null)"
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Index Out of Bounds (_a.length == 0 != null, but _a.length == 0 Out of Bounds!)"
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                              (rule "false_right" (formula "18"))
                              (rule "inEqSimp_gtRight" (formula "14"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "7") (term "0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "5"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "5") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2") (term "1"))
                              (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "2") (term "0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "0,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                              (rule "polySimp_elimOne" (formula "5") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1"))
                              (rule "mul_literals" (formula "2") (term "1,1"))
                              (rule "inEqSimp_strengthen1" (formula "12") (ifseqformula "16"))
                              (rule "add_zero_right" (formula "12") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "16") (ifseqformula "12"))
                              (rule "times_zero_1" (formula "16") (term "1,0,0"))
                              (rule "add_zero_right" (formula "16") (term "0,0"))
                              (rule "leq_literals" (formula "16") (term "0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "false_right" (formula "16"))
                              (rule "inEqSimp_strengthen1" (formula "12") (ifseqformula "15"))
                              (rule "add_literals" (formula "12") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "15") (ifseqformula "12"))
                              (rule "mul_literals" (formula "15") (term "1,0,0"))
                              (rule "add_literals" (formula "15") (term "0,0"))
                              (rule "leq_literals" (formula "15") (term "0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "false_right" (formula "15"))
                              (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "5"))
                              (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
                              (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "2") (term "0,0,0"))
                              (rule "leq_literals" (formula "2") (term "0,0"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "4"))
                              (rule "inEqSimp_homoInEq0" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                              (rule "mul_literals" (formula "2") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "2") (term "0"))
                              (rule "add_literals" (formula "2") (term "0,0"))
                              (rule "applyEqRigid" (formula "6") (term "1,1") (ifseqformula "4"))
                              (rule "polySimp_addAssoc" (formula "6") (term "1"))
                              (rule "add_literals" (formula "6") (term "0,1"))
                              (rule "applyEq" (formula "8") (term "1,1,0,0,0") (ifseqformula "4"))
                              (rule "polySimp_addAssoc" (formula "8") (term "1,0,0,0"))
                              (rule "add_literals" (formula "8") (term "0,1,0,0,0"))
                              (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "4"))
                              (rule "inEqSimp_homoInEq1" (formula "5"))
                              (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                              (rule "add_literals" (formula "5") (term "1,0"))
                              (rule "times_zero_1" (formula "5") (term "0"))
                              (rule "leq_literals" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "4"))
                              (rule "inEqSimp_homoInEq0" (formula "1"))
                              (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,0"))
                              (rule "times_zero_1" (formula "1") (term "0"))
                              (rule "qeq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                     )
                     (branch "Null Reference (_a.length == 0 = null)"
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "Index Out of Bounds (_a.length == 0 != null, but _a.length == 0 Out of Bounds!)"
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "false_right" (formula "17"))
                        (rule "inEqSimp_gtRight" (formula "13"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "1"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "2") (term "0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                        (rule "polySimp_elimOne" (formula "5") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1"))
                        (rule "mul_literals" (formula "2") (term "1,1"))
                        (rule "inEqSimp_strengthen1" (formula "12") (ifseqformula "15"))
                        (rule "add_zero_right" (formula "12") (term "1"))
                        (rule "inEqSimp_contradEq7" (formula "15") (ifseqformula "12"))
                        (rule "times_zero_1" (formula "15") (term "1,0,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0"))
                        (rule "leq_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "false_right" (formula "15"))
                        (rule "inEqSimp_strengthen1" (formula "12") (ifseqformula "14"))
                        (rule "add_literals" (formula "12") (term "1"))
                        (rule "inEqSimp_contradEq7" (formula "14") (ifseqformula "12"))
                        (rule "mul_literals" (formula "14") (term "1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0"))
                        (rule "leq_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "false_right" (formula "14"))
                        (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "2") (term "0,1"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "1"))
                        (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,0"))
                        (rule "times_zero_1" (formula "1") (term "0"))
                        (rule "qeq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "5") (term "1,1") (ifseqformula "3"))
                        (rule "polySimp_addAssoc" (formula "5") (term "1"))
                        (rule "add_literals" (formula "5") (term "0,1"))
                        (rule "applyEq" (formula "7") (term "1,1,0,0,0") (ifseqformula "3"))
                        (rule "polySimp_addAssoc" (formula "7") (term "1,0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,1,0,0,0"))
                        (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                        (rule "add_literals" (formula "4") (term "1,0"))
                        (rule "times_zero_1" (formula "4") (term "0"))
                        (rule "leq_literals" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
                        (rule "andLeft" (formula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                        (rule "add_literals" (formula "4") (term "1,1,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0"))
                        (rule "add_zero_right" (formula "4") (term "0"))
                        (rule "leq_literals" (formula "4"))
                        (rule "closeFalse" (formula "4"))
                     )
                  )
               )
            )
         )
         (branch "Null Reference (_a.length == 0 = null)"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Null Reference (_a.length == 0 = null)"
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Null Reference (_a = null)"
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
   (rule "closeFalse" (formula "1"))
)
)
}
