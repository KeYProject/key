// This is a test driver generated by KeY "2.12.4-dev (internal: 6d5e497b06b396f904acb0b079959464c8b09108)" (www.key-project.org).
// "TestGeneric0.java"
// @author Christoph Gladisch
// @author Mihai Herda
//
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

class TestGeneric0 {
  @Test
  void testcode_0() {
    // ArrayUtils[ArrayUtils::arrCopy([I,[I)].JML normal_behavior operation contract.0
    // Test preamble: creating objects and intializing test data
    ArrayUtils _o1 = new ArrayUtils();
    ArrayUtils _pre_o1 = new ArrayUtils();
    int[] _o2 = new int[0];
    int[] _pre_o2 = new int[0];
    int[] _o3 = new int[1];
    int[] _pre_o3 = new int[1];
    // Generated in generateTestCases#600
    int[] a = (int[]) _o3;
    // Generated in generateTestCases#606
    int[] _prea = (int[]) _pre_o3;
    // Generated in generateTestCases#600
    int[] b = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _preb = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    boolean measuredByEmpty = (boolean) true;
    // Generated in generateTestCases#606
    boolean _premeasuredByEmpty = (boolean) true;
    // Generated in generateTestCases#600
    ArrayUtils self = (ArrayUtils) _o1;
    // Generated in generateTestCases#606
    ArrayUtils _preself = (ArrayUtils) _pre_o1;
    _o3[0] = 2;
    _pre_o3[0] = 2;
    // Generated in createOldMap()
    HashMap<Object, Object> old = new HashMap<Object, Object>();
    old.put(_pre_o1, _o1);
    old.put(_pre_o3, _o3);
    old.put(_pre_o2, _o2);
    Set<Boolean> allBools = new HashSet<Boolean>();
    allBools.add(true);
    allBools.add(false);
    Set<Integer> allInts = new HashSet<Integer>();
    allInts.add(-4);
    allInts.add(-3);
    allInts.add(-2);
    allInts.add(-1);
    allInts.add(0);
    allInts.add(1);
    allInts.add(2);
    allInts.add(3);
    Set<Object> allObjects = new HashSet<Object>();
    allObjects.add(_o1);
    allObjects.add(_o2);
    allObjects.add(_o3);
    // Other variables
    // Generated in getRemainingConstants
    java.lang.Throwable exc = null;
    java.lang.Throwable _preexc = null;
    // Calling the method under test   
        
        int[] _a = a;   
        int[] _b = b;
        {
          exc = null;
          try {
            self.arrCopy(_a, _b);
          } catch (java.lang.Throwable e) {
            exc = e;
          }
        };
    // Calling the test oracle
    Assertions.assertTrue(testOracle(a, _prea, self, _preself, b, _preb, exc, _preexc, allBools, allInts, allObjects, old));
  }

  @Test
  void testcode_1() {
    // ArrayUtils[ArrayUtils::arrCopy([I,[I)].JML normal_behavior operation contract.0
    // Test preamble: creating objects and intializing test data
    ArrayUtils _o1 = new ArrayUtils();
    ArrayUtils _pre_o1 = new ArrayUtils();
    int[] _o2 = new int[2];
    int[] _pre_o2 = new int[2];
    int[] _o4 = new int[0];
    int[] _pre_o4 = new int[0];
    // Generated in generateTestCases#600
    int[] a = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _prea = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    int[] b = (int[]) _o4;
    // Generated in generateTestCases#606
    int[] _preb = (int[]) _pre_o4;
    // Generated in generateTestCases#600
    boolean measuredByEmpty = (boolean) true;
    // Generated in generateTestCases#606
    boolean _premeasuredByEmpty = (boolean) true;
    // Generated in generateTestCases#600
    ArrayUtils self = (ArrayUtils) _o1;
    // Generated in generateTestCases#606
    ArrayUtils _preself = (ArrayUtils) _pre_o1;
    _o2[0] = 0;
    _pre_o2[0] = 0;
    _o2[1] = 0;
    _pre_o2[1] = 0;
    // Generated in createOldMap()
    HashMap<Object, Object> old = new HashMap<Object, Object>();
    old.put(_pre_o1, _o1);
    old.put(_pre_o2, _o2);
    old.put(_pre_o4, _o4);
    Set<Boolean> allBools = new HashSet<Boolean>();
    allBools.add(true);
    allBools.add(false);
    Set<Integer> allInts = new HashSet<Integer>();
    allInts.add(-4);
    allInts.add(-3);
    allInts.add(-2);
    allInts.add(-1);
    allInts.add(0);
    allInts.add(1);
    allInts.add(2);
    allInts.add(3);
    Set<Object> allObjects = new HashSet<Object>();
    allObjects.add(_o1);
    allObjects.add(_o2);
    allObjects.add(_o4);
    // Other variables
    // Generated in getRemainingConstants
    java.lang.Throwable exc = null;
    java.lang.Throwable _preexc = null;
    // Calling the method under test   
        
        int[] _a = a;   
        int[] _b = b;
        {
          exc = null;
          try {
            self.arrCopy(_a, _b);
          } catch (java.lang.Throwable e) {
            exc = e;
          }
        };
    // Calling the test oracle
    Assertions.assertTrue(testOracle(a, _prea, self, _preself, b, _preb, exc, _preexc, allBools, allInts, allObjects, old));
  }

  @Test
  void testcode_2() {
    // ArrayUtils[ArrayUtils::arrCopy([I,[I)].JML normal_behavior operation contract.0
    // Test preamble: creating objects and intializing test data
    ArrayUtils _o1 = new ArrayUtils();
    ArrayUtils _pre_o1 = new ArrayUtils();
    int[] _o2 = new int[0];
    int[] _pre_o2 = new int[0];
    int[] _o4 = new int[3];
    int[] _pre_o4 = new int[3];
    // Generated in generateTestCases#600
    int[] a = (int[]) _o4;
    // Generated in generateTestCases#606
    int[] _prea = (int[]) _pre_o4;
    // Generated in generateTestCases#600
    int[] b = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _preb = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    boolean measuredByEmpty = (boolean) true;
    // Generated in generateTestCases#606
    boolean _premeasuredByEmpty = (boolean) true;
    // Generated in generateTestCases#600
    ArrayUtils self = (ArrayUtils) _o1;
    // Generated in generateTestCases#606
    ArrayUtils _preself = (ArrayUtils) _pre_o1;
    _o4[0] = 0;
    _pre_o4[0] = 0;
    _o4[1] = 0;
    _pre_o4[1] = 0;
    _o4[2] = 0;
    _pre_o4[2] = 0;
    // Generated in createOldMap()
    HashMap<Object, Object> old = new HashMap<Object, Object>();
    old.put(_pre_o1, _o1);
    old.put(_pre_o2, _o2);
    old.put(_pre_o4, _o4);
    Set<Boolean> allBools = new HashSet<Boolean>();
    allBools.add(true);
    allBools.add(false);
    Set<Integer> allInts = new HashSet<Integer>();
    allInts.add(-4);
    allInts.add(-3);
    allInts.add(-2);
    allInts.add(-1);
    allInts.add(0);
    allInts.add(1);
    allInts.add(2);
    allInts.add(3);
    Set<Object> allObjects = new HashSet<Object>();
    allObjects.add(_o1);
    allObjects.add(_o2);
    allObjects.add(_o4);
    // Other variables
    // Generated in getRemainingConstants
    java.lang.Throwable exc = null;
    java.lang.Throwable _preexc = null;
    // Calling the method under test   
        
        int[] _a = a;   
        int[] _b = b;
        {
          exc = null;
          try {
            self.arrCopy(_a, _b);
          } catch (java.lang.Throwable e) {
            exc = e;
          }
        };
    // Calling the test oracle
    Assertions.assertTrue(testOracle(a, _prea, self, _preself, b, _preb, exc, _preexc, allBools, allInts, allObjects, old));
  }

  @Test
  void testcode_3() {
    // ArrayUtils[ArrayUtils::arrCopy([I,[I)].JML normal_behavior operation contract.0
    // Test preamble: creating objects and intializing test data
    ArrayUtils _o1 = new ArrayUtils();
    ArrayUtils _pre_o1 = new ArrayUtils();
    int[] _o2 = new int[3];
    int[] _pre_o2 = new int[3];
    // Generated in generateTestCases#600
    int[] a = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _prea = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    int[] b = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _preb = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    boolean measuredByEmpty = (boolean) true;
    // Generated in generateTestCases#606
    boolean _premeasuredByEmpty = (boolean) true;
    // Generated in generateTestCases#600
    ArrayUtils self = (ArrayUtils) _o1;
    // Generated in generateTestCases#606
    ArrayUtils _preself = (ArrayUtils) _pre_o1;
    _o2[0] = 0;
    _pre_o2[0] = 0;
    _o2[1] = 0;
    _pre_o2[1] = 0;
    _o2[2] = 0;
    _pre_o2[2] = 0;
    // Generated in createOldMap()
    HashMap<Object, Object> old = new HashMap<Object, Object>();
    old.put(_pre_o1, _o1);
    old.put(_pre_o2, _o2);
    Set<Boolean> allBools = new HashSet<Boolean>();
    allBools.add(true);
    allBools.add(false);
    Set<Integer> allInts = new HashSet<Integer>();
    allInts.add(-4);
    allInts.add(-3);
    allInts.add(-2);
    allInts.add(-1);
    allInts.add(0);
    allInts.add(1);
    allInts.add(2);
    allInts.add(3);
    Set<Object> allObjects = new HashSet<Object>();
    allObjects.add(_o1);
    allObjects.add(_o2);
    // Other variables
    // Generated in getRemainingConstants
    java.lang.Throwable exc = null;
    java.lang.Throwable _preexc = null;
    // Calling the method under test   
        
        int[] _a = a;   
        int[] _b = b;
        {
          exc = null;
          try {
            self.arrCopy(_a, _b);
          } catch (java.lang.Throwable e) {
            exc = e;
          }
        };
    // Calling the test oracle
    Assertions.assertTrue(testOracle(a, _prea, self, _preself, b, _preb, exc, _preexc, allBools, allInts, allObjects, old));
  }

  @Test
  void testcode_4() {
    // ArrayUtils[ArrayUtils::arrCopy([I,[I)].JML normal_behavior operation contract.0
    // Test preamble: creating objects and intializing test data
    ArrayUtils _o1 = new ArrayUtils();
    ArrayUtils _pre_o1 = new ArrayUtils();
    int[] _o2 = new int[3];
    int[] _pre_o2 = new int[3];
    // Generated in generateTestCases#600
    int[] a = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _prea = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    int[] b = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _preb = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    boolean measuredByEmpty = (boolean) true;
    // Generated in generateTestCases#606
    boolean _premeasuredByEmpty = (boolean) true;
    // Generated in generateTestCases#600
    ArrayUtils self = (ArrayUtils) _o1;
    // Generated in generateTestCases#606
    ArrayUtils _preself = (ArrayUtils) _pre_o1;
    _o2[0] = 2;
    _pre_o2[0] = 2;
    _o2[1] = 2;
    _pre_o2[1] = 2;
    _o2[2] = 2;
    _pre_o2[2] = 2;
    // Generated in createOldMap()
    HashMap<Object, Object> old = new HashMap<Object, Object>();
    old.put(_pre_o1, _o1);
    old.put(_pre_o2, _o2);
    Set<Boolean> allBools = new HashSet<Boolean>();
    allBools.add(true);
    allBools.add(false);
    Set<Integer> allInts = new HashSet<Integer>();
    allInts.add(-4);
    allInts.add(-3);
    allInts.add(-2);
    allInts.add(-1);
    allInts.add(0);
    allInts.add(1);
    allInts.add(2);
    allInts.add(3);
    Set<Object> allObjects = new HashSet<Object>();
    allObjects.add(_o1);
    allObjects.add(_o2);
    // Other variables
    // Generated in getRemainingConstants
    java.lang.Throwable exc = null;
    java.lang.Throwable _preexc = null;
    // Calling the method under test   
        
        int[] _a = a;   
        int[] _b = b;
        {
          exc = null;
          try {
            self.arrCopy(_a, _b);
          } catch (java.lang.Throwable e) {
            exc = e;
          }
        };
    // Calling the test oracle
    Assertions.assertTrue(testOracle(a, _prea, self, _preself, b, _preb, exc, _preexc, allBools, allInts, allObjects, old));
  }

  @Test
  void testcode_5() {
    // ArrayUtils[ArrayUtils::arrCopy([I,[I)].JML normal_behavior operation contract.0
    // Test preamble: creating objects and intializing test data
    ArrayUtils _o1 = new ArrayUtils();
    ArrayUtils _pre_o1 = new ArrayUtils();
    int[] _o2 = new int[0];
    int[] _pre_o2 = new int[0];
    int[] _o4 = new int[0];
    int[] _pre_o4 = new int[0];
    // Generated in generateTestCases#600
    int[] a = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _prea = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    int[] b = (int[]) _o4;
    // Generated in generateTestCases#606
    int[] _preb = (int[]) _pre_o4;
    // Generated in generateTestCases#600
    boolean measuredByEmpty = (boolean) true;
    // Generated in generateTestCases#606
    boolean _premeasuredByEmpty = (boolean) true;
    // Generated in generateTestCases#600
    ArrayUtils self = (ArrayUtils) _o1;
    // Generated in generateTestCases#606
    ArrayUtils _preself = (ArrayUtils) _pre_o1;
    // Generated in createOldMap()
    HashMap<Object, Object> old = new HashMap<Object, Object>();
    old.put(_pre_o1, _o1);
    old.put(_pre_o2, _o2);
    old.put(_pre_o4, _o4);
    Set<Boolean> allBools = new HashSet<Boolean>();
    allBools.add(true);
    allBools.add(false);
    Set<Integer> allInts = new HashSet<Integer>();
    allInts.add(-4);
    allInts.add(-3);
    allInts.add(-2);
    allInts.add(-1);
    allInts.add(0);
    allInts.add(1);
    allInts.add(2);
    allInts.add(3);
    Set<Object> allObjects = new HashSet<Object>();
    allObjects.add(_o1);
    allObjects.add(_o2);
    allObjects.add(_o4);
    // Other variables
    // Generated in getRemainingConstants
    java.lang.Throwable exc = null;
    java.lang.Throwable _preexc = null;
    // Calling the method under test   
        
        int[] _a = a;   
        int[] _b = b;
        {
          exc = null;
          try {
            self.arrCopy(_a, _b);
          } catch (java.lang.Throwable e) {
            exc = e;
          }
        };
    // Calling the test oracle
    Assertions.assertTrue(testOracle(a, _prea, self, _preself, b, _preb, exc, _preexc, allBools, allInts, allObjects, old));
  }

  @Test
  void testcode_6() {
    // ArrayUtils[ArrayUtils::arrCopy([I,[I)].JML normal_behavior operation contract.0
    // Test preamble: creating objects and intializing test data
    ArrayUtils _o1 = new ArrayUtils();
    ArrayUtils _pre_o1 = new ArrayUtils();
    int[] _o2 = new int[0];
    int[] _pre_o2 = new int[0];
    int[] _o4 = new int[0];
    int[] _pre_o4 = new int[0];
    // Generated in generateTestCases#600
    int[] a = (int[]) _o4;
    // Generated in generateTestCases#606
    int[] _prea = (int[]) _pre_o4;
    // Generated in generateTestCases#600
    int[] b = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _preb = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    boolean measuredByEmpty = (boolean) true;
    // Generated in generateTestCases#606
    boolean _premeasuredByEmpty = (boolean) true;
    // Generated in generateTestCases#600
    ArrayUtils self = (ArrayUtils) _o1;
    // Generated in generateTestCases#606
    ArrayUtils _preself = (ArrayUtils) _pre_o1;
    // Generated in createOldMap()
    HashMap<Object, Object> old = new HashMap<Object, Object>();
    old.put(_pre_o1, _o1);
    old.put(_pre_o2, _o2);
    old.put(_pre_o4, _o4);
    Set<Boolean> allBools = new HashSet<Boolean>();
    allBools.add(true);
    allBools.add(false);
    Set<Integer> allInts = new HashSet<Integer>();
    allInts.add(-4);
    allInts.add(-3);
    allInts.add(-2);
    allInts.add(-1);
    allInts.add(0);
    allInts.add(1);
    allInts.add(2);
    allInts.add(3);
    Set<Object> allObjects = new HashSet<Object>();
    allObjects.add(_o1);
    allObjects.add(_o2);
    allObjects.add(_o4);
    // Other variables
    // Generated in getRemainingConstants
    java.lang.Throwable exc = null;
    java.lang.Throwable _preexc = null;
    // Calling the method under test   
        
        int[] _a = a;   
        int[] _b = b;
        {
          exc = null;
          try {
            self.arrCopy(_a, _b);
          } catch (java.lang.Throwable e) {
            exc = e;
          }
        };
    // Calling the test oracle
    Assertions.assertTrue(testOracle(a, _prea, self, _preself, b, _preb, exc, _preexc, allBools, allInts, allObjects, old));
  }

  @Test
  void testcode_7() {
    // ArrayUtils[ArrayUtils::arrCopy([I,[I)].JML normal_behavior operation contract.0
    // Test preamble: creating objects and intializing test data
    ArrayUtils _o1 = new ArrayUtils();
    ArrayUtils _pre_o1 = new ArrayUtils();
    int[] _o2 = new int[0];
    int[] _pre_o2 = new int[0];
    // Generated in generateTestCases#600
    int[] a = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _prea = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    int[] b = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _preb = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    boolean measuredByEmpty = (boolean) true;
    // Generated in generateTestCases#606
    boolean _premeasuredByEmpty = (boolean) true;
    // Generated in generateTestCases#600
    ArrayUtils self = (ArrayUtils) _o1;
    // Generated in generateTestCases#606
    ArrayUtils _preself = (ArrayUtils) _pre_o1;
    // Generated in createOldMap()
    HashMap<Object, Object> old = new HashMap<Object, Object>();
    old.put(_pre_o1, _o1);
    old.put(_pre_o2, _o2);
    Set<Boolean> allBools = new HashSet<Boolean>();
    allBools.add(true);
    allBools.add(false);
    Set<Integer> allInts = new HashSet<Integer>();
    allInts.add(-4);
    allInts.add(-3);
    allInts.add(-2);
    allInts.add(-1);
    allInts.add(0);
    allInts.add(1);
    allInts.add(2);
    allInts.add(3);
    Set<Object> allObjects = new HashSet<Object>();
    allObjects.add(_o1);
    allObjects.add(_o2);
    // Other variables
    // Generated in getRemainingConstants
    java.lang.Throwable exc = null;
    java.lang.Throwable _preexc = null;
    // Calling the method under test   
        
        int[] _a = a;   
        int[] _b = b;
        {
          exc = null;
          try {
            self.arrCopy(_a, _b);
          } catch (java.lang.Throwable e) {
            exc = e;
          }
        };
    // Calling the test oracle
    Assertions.assertTrue(testOracle(a, _prea, self, _preself, b, _preb, exc, _preexc, allBools, allInts, allObjects, old));
  }

  @Test
  void testcode_8() {
    // ArrayUtils[ArrayUtils::arrCopy([I,[I)].JML normal_behavior operation contract.0
    // Test preamble: creating objects and intializing test data
    ArrayUtils _o1 = new ArrayUtils();
    ArrayUtils _pre_o1 = new ArrayUtils();
    int[] _o2 = new int[0];
    int[] _pre_o2 = new int[0];
    // Generated in generateTestCases#600
    int[] a = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _prea = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    int[] b = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _preb = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    boolean measuredByEmpty = (boolean) true;
    // Generated in generateTestCases#606
    boolean _premeasuredByEmpty = (boolean) true;
    // Generated in generateTestCases#600
    ArrayUtils self = (ArrayUtils) _o1;
    // Generated in generateTestCases#606
    ArrayUtils _preself = (ArrayUtils) _pre_o1;
    // Generated in createOldMap()
    HashMap<Object, Object> old = new HashMap<Object, Object>();
    old.put(_pre_o1, _o1);
    old.put(_pre_o2, _o2);
    Set<Boolean> allBools = new HashSet<Boolean>();
    allBools.add(true);
    allBools.add(false);
    Set<Integer> allInts = new HashSet<Integer>();
    allInts.add(-4);
    allInts.add(-3);
    allInts.add(-2);
    allInts.add(-1);
    allInts.add(0);
    allInts.add(1);
    allInts.add(2);
    allInts.add(3);
    Set<Object> allObjects = new HashSet<Object>();
    allObjects.add(_o1);
    allObjects.add(_o2);
    // Other variables
    // Generated in getRemainingConstants
    java.lang.Throwable exc = null;
    java.lang.Throwable _preexc = null;
    // Calling the method under test   
        
        int[] _a = a;   
        int[] _b = b;
        {
          exc = null;
          try {
            self.arrCopy(_a, _b);
          } catch (java.lang.Throwable e) {
            exc = e;
          }
        };
    // Calling the test oracle
    Assertions.assertTrue(testOracle(a, _prea, self, _preself, b, _preb, exc, _preexc, allBools, allInts, allObjects, old));
  }

  @Test
  void testcode_9() {
    // ArrayUtils[ArrayUtils::arrCopy([I,[I)].JML normal_behavior operation contract.0
    // Test preamble: creating objects and intializing test data
    ArrayUtils _o1 = new ArrayUtils();
    ArrayUtils _pre_o1 = new ArrayUtils();
    int[] _o2 = new int[0];
    int[] _pre_o2 = new int[0];
    // Generated in generateTestCases#600
    int[] a = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _prea = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    int[] b = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _preb = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    boolean measuredByEmpty = (boolean) true;
    // Generated in generateTestCases#606
    boolean _premeasuredByEmpty = (boolean) true;
    // Generated in generateTestCases#600
    ArrayUtils self = (ArrayUtils) _o1;
    // Generated in generateTestCases#606
    ArrayUtils _preself = (ArrayUtils) _pre_o1;
    // Generated in createOldMap()
    HashMap<Object, Object> old = new HashMap<Object, Object>();
    old.put(_pre_o1, _o1);
    old.put(_pre_o2, _o2);
    Set<Boolean> allBools = new HashSet<Boolean>();
    allBools.add(true);
    allBools.add(false);
    Set<Integer> allInts = new HashSet<Integer>();
    allInts.add(-4);
    allInts.add(-3);
    allInts.add(-2);
    allInts.add(-1);
    allInts.add(0);
    allInts.add(1);
    allInts.add(2);
    allInts.add(3);
    Set<Object> allObjects = new HashSet<Object>();
    allObjects.add(_o1);
    allObjects.add(_o2);
    // Other variables
    // Generated in getRemainingConstants
    java.lang.Throwable exc = null;
    java.lang.Throwable _preexc = null;
    // Calling the method under test   
        
        int[] _a = a;   
        int[] _b = b;
        {
          exc = null;
          try {
            self.arrCopy(_a, _b);
          } catch (java.lang.Throwable e) {
            exc = e;
          }
        };
    // Calling the test oracle
    Assertions.assertTrue(testOracle(a, _prea, self, _preself, b, _preb, exc, _preexc, allBools, allInts, allObjects, old));
  }

  @Test
  void testcode_10() {
    // ArrayUtils[ArrayUtils::arrCopy([I,[I)].JML normal_behavior operation contract.0
    // Test preamble: creating objects and intializing test data
    ArrayUtils _o1 = new ArrayUtils();
    ArrayUtils _pre_o1 = new ArrayUtils();
    int[] _o2 = new int[0];
    int[] _pre_o2 = new int[0];
    int[] _o4 = new int[0];
    int[] _pre_o4 = new int[0];
    // Generated in generateTestCases#600
    int[] a = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _prea = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    int[] b = (int[]) _o4;
    // Generated in generateTestCases#606
    int[] _preb = (int[]) _pre_o4;
    // Generated in generateTestCases#600
    boolean measuredByEmpty = (boolean) true;
    // Generated in generateTestCases#606
    boolean _premeasuredByEmpty = (boolean) true;
    // Generated in generateTestCases#600
    ArrayUtils self = (ArrayUtils) _o1;
    // Generated in generateTestCases#606
    ArrayUtils _preself = (ArrayUtils) _pre_o1;
    // Generated in createOldMap()
    HashMap<Object, Object> old = new HashMap<Object, Object>();
    old.put(_pre_o1, _o1);
    old.put(_pre_o2, _o2);
    old.put(_pre_o4, _o4);
    Set<Boolean> allBools = new HashSet<Boolean>();
    allBools.add(true);
    allBools.add(false);
    Set<Integer> allInts = new HashSet<Integer>();
    allInts.add(-4);
    allInts.add(-3);
    allInts.add(-2);
    allInts.add(-1);
    allInts.add(0);
    allInts.add(1);
    allInts.add(2);
    allInts.add(3);
    Set<Object> allObjects = new HashSet<Object>();
    allObjects.add(_o1);
    allObjects.add(_o2);
    allObjects.add(_o4);
    // Other variables
    // Generated in getRemainingConstants
    java.lang.Throwable exc = null;
    java.lang.Throwable _preexc = null;
    // Calling the method under test   
        
        int[] _a = a;   
        int[] _b = b;
        {
          exc = null;
          try {
            self.arrCopy(_a, _b);
          } catch (java.lang.Throwable e) {
            exc = e;
          }
        };
    // Calling the test oracle
    Assertions.assertTrue(testOracle(a, _prea, self, _preself, b, _preb, exc, _preexc, allBools, allInts, allObjects, old));
  }

  @Test
  void testcode_11() {
    // ArrayUtils[ArrayUtils::arrCopy([I,[I)].JML normal_behavior operation contract.0
    // Test preamble: creating objects and intializing test data
    ArrayUtils _o1 = new ArrayUtils();
    ArrayUtils _pre_o1 = new ArrayUtils();
    int[] _o2 = new int[0];
    int[] _pre_o2 = new int[0];
    int[] _o4 = new int[0];
    int[] _pre_o4 = new int[0];
    // Generated in generateTestCases#600
    int[] a = (int[]) _o4;
    // Generated in generateTestCases#606
    int[] _prea = (int[]) _pre_o4;
    // Generated in generateTestCases#600
    int[] b = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _preb = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    boolean measuredByEmpty = (boolean) true;
    // Generated in generateTestCases#606
    boolean _premeasuredByEmpty = (boolean) true;
    // Generated in generateTestCases#600
    ArrayUtils self = (ArrayUtils) _o1;
    // Generated in generateTestCases#606
    ArrayUtils _preself = (ArrayUtils) _pre_o1;
    // Generated in createOldMap()
    HashMap<Object, Object> old = new HashMap<Object, Object>();
    old.put(_pre_o1, _o1);
    old.put(_pre_o2, _o2);
    old.put(_pre_o4, _o4);
    Set<Boolean> allBools = new HashSet<Boolean>();
    allBools.add(true);
    allBools.add(false);
    Set<Integer> allInts = new HashSet<Integer>();
    allInts.add(-4);
    allInts.add(-3);
    allInts.add(-2);
    allInts.add(-1);
    allInts.add(0);
    allInts.add(1);
    allInts.add(2);
    allInts.add(3);
    Set<Object> allObjects = new HashSet<Object>();
    allObjects.add(_o1);
    allObjects.add(_o2);
    allObjects.add(_o4);
    // Other variables
    // Generated in getRemainingConstants
    java.lang.Throwable exc = null;
    java.lang.Throwable _preexc = null;
    // Calling the method under test   
        
        int[] _a = a;   
        int[] _b = b;
        {
          exc = null;
          try {
            self.arrCopy(_a, _b);
          } catch (java.lang.Throwable e) {
            exc = e;
          }
        };
    // Calling the test oracle
    Assertions.assertTrue(testOracle(a, _prea, self, _preself, b, _preb, exc, _preexc, allBools, allInts, allObjects, old));
  }

  @Test
  void testcode_12() {
    // ArrayUtils[ArrayUtils::arrCopy([I,[I)].JML normal_behavior operation contract.0
    // Test preamble: creating objects and intializing test data
    ArrayUtils _o1 = new ArrayUtils();
    ArrayUtils _pre_o1 = new ArrayUtils();
    int[] _o2 = new int[0];
    int[] _pre_o2 = new int[0];
    // Generated in generateTestCases#600
    int[] a = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _prea = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    int[] b = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _preb = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    boolean measuredByEmpty = (boolean) true;
    // Generated in generateTestCases#606
    boolean _premeasuredByEmpty = (boolean) true;
    // Generated in generateTestCases#600
    ArrayUtils self = (ArrayUtils) _o1;
    // Generated in generateTestCases#606
    ArrayUtils _preself = (ArrayUtils) _pre_o1;
    // Generated in createOldMap()
    HashMap<Object, Object> old = new HashMap<Object, Object>();
    old.put(_pre_o1, _o1);
    old.put(_pre_o2, _o2);
    Set<Boolean> allBools = new HashSet<Boolean>();
    allBools.add(true);
    allBools.add(false);
    Set<Integer> allInts = new HashSet<Integer>();
    allInts.add(-4);
    allInts.add(-3);
    allInts.add(-2);
    allInts.add(-1);
    allInts.add(0);
    allInts.add(1);
    allInts.add(2);
    allInts.add(3);
    Set<Object> allObjects = new HashSet<Object>();
    allObjects.add(_o1);
    allObjects.add(_o2);
    // Other variables
    // Generated in getRemainingConstants
    java.lang.Throwable exc = null;
    java.lang.Throwable _preexc = null;
    // Calling the method under test   
        
        int[] _a = a;   
        int[] _b = b;
        {
          exc = null;
          try {
            self.arrCopy(_a, _b);
          } catch (java.lang.Throwable e) {
            exc = e;
          }
        };
    // Calling the test oracle
    Assertions.assertTrue(testOracle(a, _prea, self, _preself, b, _preb, exc, _preexc, allBools, allInts, allObjects, old));
  }

  @Test
  void testcode_13() {
    // ArrayUtils[ArrayUtils::arrCopy([I,[I)].JML normal_behavior operation contract.0
    // Test preamble: creating objects and intializing test data
    ArrayUtils _o1 = new ArrayUtils();
    ArrayUtils _pre_o1 = new ArrayUtils();
    int[] _o2 = new int[0];
    int[] _pre_o2 = new int[0];
    int[] _o4 = new int[1];
    int[] _pre_o4 = new int[1];
    // Generated in generateTestCases#600
    int[] a = (int[]) _o4;
    // Generated in generateTestCases#606
    int[] _prea = (int[]) _pre_o4;
    // Generated in generateTestCases#600
    int[] b = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _preb = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    boolean measuredByEmpty = (boolean) true;
    // Generated in generateTestCases#606
    boolean _premeasuredByEmpty = (boolean) true;
    // Generated in generateTestCases#600
    ArrayUtils self = (ArrayUtils) _o1;
    // Generated in generateTestCases#606
    ArrayUtils _preself = (ArrayUtils) _pre_o1;
    _o4[0] = 2;
    _pre_o4[0] = 2;
    // Generated in createOldMap()
    HashMap<Object, Object> old = new HashMap<Object, Object>();
    old.put(_pre_o1, _o1);
    old.put(_pre_o2, _o2);
    old.put(_pre_o4, _o4);
    Set<Boolean> allBools = new HashSet<Boolean>();
    allBools.add(true);
    allBools.add(false);
    Set<Integer> allInts = new HashSet<Integer>();
    allInts.add(-4);
    allInts.add(-3);
    allInts.add(-2);
    allInts.add(-1);
    allInts.add(0);
    allInts.add(1);
    allInts.add(2);
    allInts.add(3);
    Set<Object> allObjects = new HashSet<Object>();
    allObjects.add(_o1);
    allObjects.add(_o2);
    allObjects.add(_o4);
    // Other variables
    // Generated in getRemainingConstants
    java.lang.Throwable exc = null;
    java.lang.Throwable _preexc = null;
    // Calling the method under test   
        
        int[] _a = a;   
        int[] _b = b;
        {
          exc = null;
          try {
            self.arrCopy(_a, _b);
          } catch (java.lang.Throwable e) {
            exc = e;
          }
        };
    // Calling the test oracle
    Assertions.assertTrue(testOracle(a, _prea, self, _preself, b, _preb, exc, _preexc, allBools, allInts, allObjects, old));
  }

  @Test
  void testcode_14() {
    // ArrayUtils[ArrayUtils::arrCopy([I,[I)].JML normal_behavior operation contract.0
    // Test preamble: creating objects and intializing test data
    ArrayUtils _o1 = new ArrayUtils();
    ArrayUtils _pre_o1 = new ArrayUtils();
    int[] _o2 = new int[2];
    int[] _pre_o2 = new int[2];
    int[] _o4 = new int[0];
    int[] _pre_o4 = new int[0];
    // Generated in generateTestCases#600
    int[] a = (int[]) _o2;
    // Generated in generateTestCases#606
    int[] _prea = (int[]) _pre_o2;
    // Generated in generateTestCases#600
    int[] b = (int[]) _o4;
    // Generated in generateTestCases#606
    int[] _preb = (int[]) _pre_o4;
    // Generated in generateTestCases#600
    boolean measuredByEmpty = (boolean) true;
    // Generated in generateTestCases#606
    boolean _premeasuredByEmpty = (boolean) true;
    // Generated in generateTestCases#600
    ArrayUtils self = (ArrayUtils) _o1;
    // Generated in generateTestCases#606
    ArrayUtils _preself = (ArrayUtils) _pre_o1;
    _o2[0] = 0;
    _pre_o2[0] = 0;
    _o2[1] = 0;
    _pre_o2[1] = 0;
    // Generated in createOldMap()
    HashMap<Object, Object> old = new HashMap<Object, Object>();
    old.put(_pre_o1, _o1);
    old.put(_pre_o2, _o2);
    old.put(_pre_o4, _o4);
    Set<Boolean> allBools = new HashSet<Boolean>();
    allBools.add(true);
    allBools.add(false);
    Set<Integer> allInts = new HashSet<Integer>();
    allInts.add(-4);
    allInts.add(-3);
    allInts.add(-2);
    allInts.add(-1);
    allInts.add(0);
    allInts.add(1);
    allInts.add(2);
    allInts.add(3);
    Set<Object> allObjects = new HashSet<Object>();
    allObjects.add(_o1);
    allObjects.add(_o2);
    allObjects.add(_o4);
    // Other variables
    // Generated in getRemainingConstants
    java.lang.Throwable exc = null;
    java.lang.Throwable _preexc = null;
    // Calling the method under test   
        
        int[] _a = a;   
        int[] _b = b;
        {
          exc = null;
          try {
            self.arrCopy(_a, _b);
          } catch (java.lang.Throwable e) {
            exc = e;
          }
        };
    // Calling the test oracle
    Assertions.assertTrue(testOracle(a, _prea, self, _preself, b, _preb, exc, _preexc, allBools, allInts, allObjects, old));
  }

  public static final void main(String[] args) {
  }

  boolean testOracle(int[] a, int[] _prea, ArrayUtils self, ArrayUtils _preself, int[] b,
      int[] _preb, java.lang.Throwable exc, java.lang.Throwable _preexc, Set<Boolean> allBools,
      Set<Integer> allInts, Set<java.lang.Object> allObjects, Map<Object, Object> old) {
    return ((sub1(a, _prea, self, _preself, b, _preb, exc, _preexc, allBools, allInts, allObjects, old) && inv_javalangObject(self, a, _prea, self, _preself, b, _preb, exc, _preexc, allBools, allInts, allObjects, old)) && (exc == null));
  }

  boolean sub1(int[] a, int[] _prea, ArrayUtils self, ArrayUtils _preself, int[] b, int[] _preb,
      java.lang.Throwable exc, java.lang.Throwable _preexc, Set<Boolean> allBools,
      Set<Integer> allInts, Set<java.lang.Object> allObjects, Map<Object, Object> old) {
    for(int i : allInts) {
      if(!(!((0 <= i) && (i < a.length)) || (a[i] == b[i]))) {
        return false;
      }
    }
    return true;
  }

  boolean inv_javalangObject(java.lang.Object o, int[] a, int[] _prea, ArrayUtils self,
      ArrayUtils _preself, int[] b, int[] _preb, java.lang.Throwable exc,
      java.lang.Throwable _preexc, Set<Boolean> allBools, Set<Integer> allInts,
      Set<java.lang.Object> allObjects, Map<Object, Object> old) {
    return true;
  }
}
