package de.uka.ilkd.key.smt;

import org.junit.Test;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;

import static org.junit.Assert.*;

/**
 * Contains tests for parsing Z3/SMT proofs.
 *
 * @author Wolfram Pfeifer
 */
public class SMTProofParsingTest {
    /**
     * Tests parsing with a small proof.
     */
    @Test
    public void testProofParsing() {
        URL proof1 = SMTProofParsing.class.getResource("simple.smt2");

        try (InputStream is = proof1.openStream()) {
            assertNotNull(SMTProofParsing.parse(is));
        } catch (IOException e) {
            e.printStackTrace();
            fail();
        }
    }

    /**
     * Tests parsing with another small proof. The proof contains quantifier instantiation
     * information in SMT annotation format:
     * (! (term) :qid term)
     */
    @Test
    public void testAnnotationParsing() {
        URL proof2 = SMTProofParsing.class.getResource("annotation_test.smt2");

        try (InputStream is = proof2.openStream()) {
            assertNotNull(SMTProofParsing.parse(is));
        } catch (IOException e) {
            e.printStackTrace();
            fail();
        }
    }

    /**
     * Tests parsing with a large proofs (contains most features of Z3 proof terms).
     * The proof results from Z3 running with an input generated by the new SMT translation of KeY.
     */
    @Test
    public void testProofParsingLarge() {
        URL large = SMTProofParsing.class.getResource("large.smt2");

        try (InputStream is = large.openStream()) {
            assertNotNull(SMTProofParsing.parse(is));
        } catch (IOException e) {
            e.printStackTrace();
            fail();
        }
    }
}