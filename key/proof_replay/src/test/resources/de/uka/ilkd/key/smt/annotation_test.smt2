((declare-fun x!0 () Int)
(proof
(let (($x51 (>= x!0 0)))
(let (($x52 (not $x51)))
(let (($x46 (exists ((x Int) )(! (and (not (<= x 0)) (not (>= x 0))) :qid k!9))
))
(let (($x31 (exists ((x Int) )(! (and (> x 0) (< x 0)) :qid k!9))
))
(let (($x44 (= (and (> ?0 0) (< ?0 0)) (and (not (<= ?0 0)) (not (>= ?0 0))))))
(let ((@x45 (monotonicity (rewrite (= (> ?0 0) (not (<= ?0 0)))) (rewrite (= (< ?0 0) (not (>= ?0 0)))) $x44)))
(let ((@x56 (mp~ (mp (asserted $x31) (quant-intro @x45 (= $x31 $x46)) $x46) (sk (~ $x46 (and (not (<= x!0 0)) $x52))) (and (not (<= x!0 0)) $x52))))
(let ((@x60 (and-elim @x56 $x52)))
(let (($x34 (<= x!0 0)))
(let (($x50 (not $x34)))
(let ((@x59 (and-elim @x56 $x50)))
(unit-resolution ((_ th-lemma arith farkas 1 1) (or $x51 $x34)) @x59 @x60 false))))))))))))))
