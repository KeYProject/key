\profile "Java Profile for Symbolic Execution";

\settings {
"#Proof-Settings-Config-File
#Fri Feb 20 14:12:10 CET 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_INSTANTIATE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=1000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=methodExpansion-methodExpansion:noRestriction,Strings-Strings\\:on , reach-reach\\:on , JavaCard-JavaCard\\:off , assertions-assertions\\:on , bigint-bigint\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , modelFields-modelFields\\:showSatisfiability , initialisation-initialisation\\:disableStaticInitialisation , sequences-sequences\\:on , runtimeExceptions-runtimeExceptions\\:allow , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=Symbolic Execution Strategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Fri Feb 20 14:12:10 CET 2015
name=ArrayIndexAsVariableFieldTest[ArrayIndexAsVariableFieldTest\\:\\:main([LArrayIndexAsVariableFieldTest,ArrayIndexAsVariableFieldTest.Index)].JML normal_behavior operation contract.0
addSymbolicExecutionLabel=true
contract=ArrayIndexAsVariableFieldTest[ArrayIndexAsVariableFieldTest\\:\\:main([LArrayIndexAsVariableFieldTest,ArrayIndexAsVariableFieldTest.Index)].JML normal_behavior operation contract.0
addUninterpretedPredicate=true
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Martin" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "2823")

(branch "dummy ID"
(rule "translateJavaSubInt" (formula "1") (term "1,0,1,1,1,0") (newnames "heapAtPre"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "9"))
(rule "eqSymm" (formula "10") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "9"))
(builtin "One Step Simplification" (formula "3"))
(rule "polySimp_elimSub" (formula "7") (term "1"))
(rule "mul_literals" (formula "7") (term "1,1"))
(rule "polySimp_addComm0" (formula "7") (term "1"))
(rule "inEqSimp_ltToLeq" (formula "7"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,0,0"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0"))
(rule "add_literals" (formula "7") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7"))
(rule "polySimp_mulComm0" (formula "7") (term "1"))
(rule "polySimp_rightDist" (formula "7") (term "1"))
(rule "mul_literals" (formula "7") (term "0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
(rule "polySimp_elimOne" (formula "7") (term "1,1"))
(rule "elementOfSetMinus" (formula "10") (term "0,0,0,0,1,0,1"))
(builtin "One Step Simplification" (formula "10"))
(rule "nonNull" (formula "8") (inst "i=i"))
(rule "greater_literals" (formula "8") (term "0,1"))
(builtin "One Step Simplification" (formula "8"))
(rule "sub_literals" (formula "8") (term "2,1,0,1"))
(builtin "One Step Simplification" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "9"))
(builtin "One Step Simplification" (formula "2"))
(rule "narrowSelectArrayType" (formula "8") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "9"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
(rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "7"))
(rule "times_zero_1" (formula "6") (term "0,0"))
(rule "add_zero_left" (formula "6") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "6"))
(rule "mul_literals" (formula "6") (term "1"))
(rule "nnf_imp2or" (formula "9") (term "0"))
(rule "nnf_notAnd" (formula "9") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
(rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
(rule "mul_literals" (formula "9") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
(rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
(rule "arrayLengthIsAnInt" (formula "8") (term "1,1"))
(builtin "One Step Simplification" (formula "8"))
(rule "true_left" (formula "8"))
(rule "arrayLengthNotNegative" (formula "8") (term "1,1"))
(rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
(rule "leq_literals" (formula "8") (term "0"))
(builtin "One Step Simplification" (formula "8"))
(rule "true_left" (formula "8"))
(rule "assignment" (formula "12") (term "1"))
(builtin "One Step Simplification" (formula "12"))
(rule "methodBodyExpand" (formula "12") (term "1") (newnames "heapBefore_main,savedHeapBefore_main"))
(builtin "One Step Simplification" (formula "12"))
(rule "eval_order_access1" (formula "12") (term "1") (inst "#v0=a"))
(rule "variableDeclarationAssign" (formula "12") (term "1"))
(rule "variableDeclaration" (formula "12") (term "1") (newnames "a"))
(rule "eval_order_array_access5" (formula "12") (term "1") (inst "#v1=x") (inst "#ar1=a_arr"))
(rule "variableDeclarationAssign" (formula "12") (term "1"))
(rule "variableDeclaration" (formula "12") (term "1") (newnames "a_arr"))
(rule "assignment" (formula "12") (term "1"))
(builtin "One Step Simplification" (formula "12"))
(rule "variableDeclarationAssign" (formula "12") (term "1"))
(rule "variableDeclaration" (formula "12") (term "1") (newnames "x"))
(rule "assignment_read_attribute" (formula "12") (term "1"))
(branch "Normal Execution (_index_0 != null)"
   (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "11")))
   (rule "false_right" (formula "12"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "assignment_array2" (formula "12") (term "1"))
   (branch "Normal Execution (a_arr != null)"
      (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "10")))
      (builtin "One Step Simplification" (formula "13"))
      (rule "orRight" (formula "12"))
      (rule "inEqSimp_leqRight" (formula "12"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_ltRight" (formula "13"))
      (rule "times_zero_1" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "9"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0,1,0") (ifseqformula "1"))
      (rule "allLeft" (formula "10") (inst "t=int::select(heap,
            index_0,
            ArrayIndexAsVariableFieldTest.Index::$value)"))
      (rule "inEqSimp_contradInEq0" (formula "10") (term "1,0") (ifseqformula "9"))
      (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0"))
      (rule "polySimp_addComm0" (formula "10") (term "0,0,0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0"))
      (rule "add_literals" (formula "10") (term "1,1,0,0,1,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,1,0"))
      (rule "add_literals" (formula "10") (term "0,0,1,0"))
      (rule "leq_literals" (formula "10") (term "0,1,0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "8"))
      (rule "qeq_literals" (formula "10") (term "0,0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "notLeft" (formula "10"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "11"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "assignment_write_attribute" (formula "14") (term "1"))
      (branch "Normal Execution (a != null)"
         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "11")))
         (rule "false_right" (formula "14"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "eval_order_access1" (formula "14") (term "1") (inst "#v0=a"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "a_1"))
         (rule "eval_order_array_access5" (formula "14") (term "1") (inst "#v1=x") (inst "#ar1=a_arr"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "a_arr_1"))
         (rule "assignment" (formula "14") (term "1"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_1"))
         (rule "compound_addition_1" (formula "14") (term "1") (inst "#v=x_2"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_2"))
         (rule "assignment_read_attribute" (formula "14") (term "1"))
         (branch "Normal Execution (_index_0 != null)"
            (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")))
            (rule "false_right" (formula "14"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "dismissNonSelectedField" (formula "14") (term "0,1,0"))
            (rule "assignmentAdditionInt" (formula "14") (term "1"))
            (rule "translateJavaAddInt" (formula "14") (term "0,0,1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "polySimp_addComm0" (formula "14") (term "0,1,0"))
            (rule "assignment_array2" (formula "14") (term "1"))
            (branch "Normal Execution (a_arr_1 != null)"
               (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "12")))
               (builtin "One Step Simplification" (formula "15"))
               (rule "orRight" (formula "14"))
               (rule "dismissNonSelectedField" (formula "16") (term "0,1,0"))
               (rule "inEqSimp_ltRight" (formula "15"))
               (rule "mul_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "15"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "11"))
               (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "qeq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "9"))
               (rule "leq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "0,1,0") (ifseqformula "2"))
               (rule "allLeft" (formula "11") (inst "t=add(Z(1(#)),
    int::select(heap,
                index_0,
                ArrayIndexAsVariableFieldTest.Index::$value))"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "11") (term "0,0,1,0"))
               (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "11") (term "0,1,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "9"))
               (rule "qeq_literals" (formula "11") (term "0,0,0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_contradInEq0" (formula "11") (term "0") (ifseqformula "10"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "11") (term "0,0,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0"))
               (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0"))
               (rule "leq_literals" (formula "11") (term "0,0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "notLeft" (formula "11"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "12"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "assignment_write_attribute" (formula "16") (term "1"))
               (branch "Normal Execution (a_1 != null)"
                  (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "12")))
                  (rule "false_right" (formula "16"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "variableDeclarationAssign" (formula "16") (term "1"))
                  (rule "variableDeclaration" (formula "16") (term "1") (newnames "result_1"))
                  (rule "compound_addition_2" (formula "16") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
                  (rule "variableDeclarationAssign" (formula "16") (term "1"))
                  (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_3"))
                  (rule "eval_order_access2" (formula "16") (term "1") (inst "#v0=a"))
                  (rule "variableDeclarationAssign" (formula "16") (term "1"))
                  (rule "variableDeclaration" (formula "16") (term "1") (newnames "a_2"))
                  (rule "eval_order_array_access5" (formula "16") (term "1") (inst "#v1=x_4") (inst "#ar1=a_arr"))
                  (rule "variableDeclarationAssign" (formula "16") (term "1"))
                  (rule "variableDeclaration" (formula "16") (term "1") (newnames "a_arr_2"))
                  (rule "assignment" (formula "16") (term "1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "variableDeclarationAssign" (formula "16") (term "1"))
                  (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_4"))
                  (rule "assignment_read_attribute" (formula "16") (term "1"))
                  (branch "Normal Execution (_index_0 != null)"
                     (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
                     (rule "false_right" (formula "16"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "dismissNonSelectedField" (formula "16") (term "0,1,0"))
                     (rule "dismissNonSelectedField" (formula "16") (term "0,1,0"))
                     (rule "assignment_array2" (formula "16") (term "1"))
                     (branch "Normal Execution (a_arr_2 != null)"
                        (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "14")))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "orRight" (formula "16"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,0"))
                        (rule "inEqSimp_ltRight" (formula "17"))
                        (rule "times_zero_1" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "16"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "11"))
                        (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "assignment_read_attribute" (formula "16") (term "1"))
                        (branch "Normal Execution (a_2 != null)"
                           (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "13")))
                           (rule "false_right" (formula "16"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "pullOutSelect" (formula "16") (term "0,1,0") (inst "selectSK=ArrayIndexAsVariableFieldTest_value_0"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "castDel" (formula "1") (term "1,0"))
                           (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=ArrayIndexAsVariableFieldTest_value_1"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "castDel" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "variableDeclarationAssign" (formula "17") (term "1"))
                           (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_5"))
                           (rule "eval_order_access2" (formula "17") (term "1") (inst "#v0=a"))
                           (rule "variableDeclarationAssign" (formula "17") (term "1"))
                           (rule "variableDeclaration" (formula "17") (term "1") (newnames "a_3"))
                           (rule "eval_order_array_access5" (formula "17") (term "1") (inst "#v1=x_6") (inst "#ar1=a_arr"))
                           (rule "variableDeclarationAssign" (formula "17") (term "1"))
                           (rule "variableDeclaration" (formula "17") (term "1") (newnames "a_arr_3"))
                           (rule "assignment" (formula "17") (term "1"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "variableDeclarationAssign" (formula "17") (term "1"))
                           (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_6"))
                           (rule "compound_addition_1" (formula "17") (term "1") (inst "#v=x_7"))
                           (rule "variableDeclarationAssign" (formula "17") (term "1"))
                           (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_7"))
                           (rule "assignment_read_attribute" (formula "17") (term "1"))
                           (branch "Normal Execution (_index_0 != null)"
                              (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")))
                              (rule "false_right" (formula "17"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "dismissNonSelectedField" (formula "17") (term "0,1,0"))
                              (rule "dismissNonSelectedField" (formula "17") (term "0,1,0"))
                              (rule "assignmentAdditionInt" (formula "17") (term "1"))
                              (rule "translateJavaAddInt" (formula "17") (term "0,0,1"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "polySimp_addComm0" (formula "17") (term "0,1,0"))
                              (rule "assignment_array2" (formula "17") (term "1"))
                              (branch "Normal Execution (a_arr_3 != null)"
                                 (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "15")))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "orRight" (formula "17"))
                                 (rule "dismissNonSelectedField" (formula "19") (term "0,1,0"))
                                 (rule "dismissNonSelectedField" (formula "19") (term "0,1,0"))
                                 (rule "inEqSimp_leqRight" (formula "17"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_ltRight" (formula "18"))
                                 (rule "times_zero_1" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "12"))
                                 (rule "leq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "12"))
                                 (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "assignment_read_attribute" (formula "17") (term "1"))
                                 (branch "Normal Execution (a_3 != null)"
                                    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "13")))
                                    (rule "false_right" (formula "17"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "pullOutSelect" (formula "17") (term "0,1,0") (inst "selectSK=ArrayIndexAsVariableFieldTest_value_2"))
                                    (rule "simplifySelectOfStore" (formula "1"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "castDel" (formula "1") (term "0"))
                                    (rule "applyEqReverse" (formula "18") (term "0,1,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "assignmentAdditionInt" (formula "17") (term "1"))
                                    (rule "translateJavaAddInt" (formula "17") (term "0,0,1"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "polySimp_addComm0" (formula "17") (term "0,1,0"))
                                    (rule "methodCallReturn" (formula "17") (term "1"))
                                    (rule "assignment" (formula "17") (term "1"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "methodCallEmpty" (formula "17") (term "1"))
                                    (rule "tryEmpty" (formula "17") (term "1"))
                                    (rule "emptyModality" (formula "17") (term "1"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ArrayIndexAsVariableFieldTest::select(heap, array, arr(add(Z(1(#)), int::select(heap, index_0, ArrayIndexAsVariableFieldTest.Index::$value)))) = ArrayIndexAsVariableFieldTest::select(heap, array, arr(int::select(heap, index_0, ArrayIndexAsVariableFieldTest.Index::$value))) TRUE"
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "12") (term "0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "15"))
                                       (opengoal " ")
                                    )
                                    (branch " ArrayIndexAsVariableFieldTest::select(heap, array, arr(add(Z(1(#)), int::select(heap, index_0, ArrayIndexAsVariableFieldTest.Index::$value)))) = ArrayIndexAsVariableFieldTest::select(heap, array, arr(int::select(heap, index_0, ArrayIndexAsVariableFieldTest.Index::$value))) FALSE"
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (opengoal " ")
                                    )
                                 )
                                 (branch "Null Reference (a_3 = null)"
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                              (branch "Null Reference (a_arr_3 = null)"
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "Index Out of Bounds (a_arr_3 != null, but x_6 Out of Bounds!)"
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                                 (rule "add_literals" (formula "1") (term "0,0,1"))
                                 (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (term "0") (ifseqformula "12"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "11"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch "Null Reference (_index_0 = null)"
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                        (branch "Null Reference (a_2 = null)"
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "Null Reference (a_arr_2 = null)"
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "Index Out of Bounds (a_arr_2 != null, but x_4 Out of Bounds!)"
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "1") (term "0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "1") (term "0,1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "1"))
                        (rule "andLeft" (formula "11"))
                        (rule "inEqSimp_homoInEq1" (formula "11"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0"))
                        (rule "polySimp_addComm0" (formula "11") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "1,1,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0"))
                        (rule "add_zero_right" (formula "11") (term "0"))
                        (rule "leq_literals" (formula "11"))
                        (rule "closeFalse" (formula "11"))
                     )
                  )
                  (branch "Null Reference (_index_0 = null)"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "Null Reference (a_1 = null)"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Null Reference (a_arr_1 = null)"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Index Out of Bounds (a_arr_1 != null, but x_1 Out of Bounds!)"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
               (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
               (rule "add_literals" (formula "1") (term "0,0,1"))
               (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
               (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "9"))
               (rule "qeq_literals" (formula "1") (term "0,1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "1"))
               (rule "andLeft" (formula "10"))
               (rule "inEqSimp_homoInEq1" (formula "10"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0"))
               (rule "polySimp_addComm1" (formula "10") (term "0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
               (rule "add_literals" (formula "10") (term "1,1,0"))
               (rule "times_zero_1" (formula "10") (term "1,0"))
               (rule "add_zero_right" (formula "10") (term "0"))
               (rule "leq_literals" (formula "10"))
               (rule "closeFalse" (formula "10"))
            )
         )
         (branch "Null Reference (_index_0 = null)"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (a = null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (a_arr = null)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Index Out of Bounds (a_arr != null, but x Out of Bounds!)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
      (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "1") (term "0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "1,1"))
      (rule "inEqSimp_contradInEq0" (formula "1") (term "0") (ifseqformula "9"))
      (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,0"))
      (rule "leq_literals" (formula "1") (term "0,0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "1"))
      (rule "qeq_literals" (formula "8") (term "0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "closeFalse" (formula "8"))
   )
)
(branch "Null Reference (_index_0 = null)"
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
   (rule "closeFalse" (formula "1"))
)
)

}
