\profile "Java Profile for Symbolic Execution";

\settings {
"#Proof-Settings-Config-File
#Mon Jul 18 11:03:43 CEST 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=\\#begboolean_equal_2\\#end,\\#begboolean_not_equal_1\\#end,\\#begboolean_not_equal_2\\#end,\\#begtrue_to_not_false\\#end,\\#begfalse_to_not_true\\#end,\\#begboolean_true_commute\\#end,\\#begboolean_false_commute\\#end,\\#begapply_eq_boolean\\#end,\\#begapply_eq_boolean_2\\#end,\\#begapply_eq_boolean_rigid\\#end,\\#begapply_eq_boolean_rigid_2\\#end,\\#begexpand_inByte\\#end,\\#begexpand_inChar\\#end,\\#begexpand_inShort\\#end,\\#begexpand_inInt\\#end,\\#begexpand_inLong\\#end,\\#begreplace_byte_MAX\\#end,\\#begreplace_byte_MIN\\#end,\\#begreplace_char_MAX\\#end,\\#begreplace_char_MIN\\#end,\\#begreplace_short_MAX\\#end,\\#begreplace_short_MIN\\#end,\\#begreplace_int_MAX\\#end,\\#begreplace_int_MIN\\#end,\\#begreplace_long_MAX\\#end,\\#begreplace_long_MIN\\#end,\\#begreplace_byte_RANGE\\#end,\\#begreplace_byte_HALFRANGE\\#end,\\#begreplace_short_RANGE\\#end,\\#begreplace_short_HALFRANGE\\#end,\\#begreplace_char_RANGE\\#end,\\#begreplace_int_RANGE\\#end,\\#begreplace_int_HALFRANGE\\#end,\\#begreplace_long_RANGE\\#end,\\#begreplace_long_HALFRANGE\\#end,\\#begtranslateJavaUnaryMinusInt\\#end,\\#begtranslateJavaUnaryMinusLong\\#end,\\#begtranslateJavaBitwiseNegation\\#end,\\#begtranslateJavaAddInt\\#end,\\#begtranslateJavaAddLong\\#end,\\#begtranslateJavaSubInt\\#end,\\#begtranslateJavaSubLong\\#end,\\#begtranslateJavaMulInt\\#end,\\#begtranslateJavaMulLong\\#end,\\#begtranslateJavaMod\\#end,\\#begtranslateJavaDivInt\\#end,\\#begtranslateJavaDivLong\\#end,\\#begtranslateJavaCastByte\\#end,\\#begtranslateJavaCastShort\\#end,\\#begtranslateJavaCastInt\\#end,\\#begtranslateJavaCastLong\\#end,\\#begtranslateJavaCastChar\\#end,\\#begtranslateJavaShiftRightInt\\#end,\\#begtranslateJavaShiftRightLong\\#end,\\#begtranslateJavaShiftLeftInt\\#end,\\#begtranslateJavaShiftLeftLong\\#end,\\#begtranslateJavaUnsignedShiftRightInt\\#end,\\#begtranslateJavaUnsignedShiftRightLong\\#end,\\#begtranslateJavaBitwiseOrInt\\#end,\\#begtranslateJavaBitwiseOrLong\\#end,\\#begtranslateJavaBitwiseAndInt\\#end,\\#begtranslateJavaBitwiseAndLong\\#end,\\#begtranslateJavaBitwiseXOrInt\\#end,\\#begtranslateJavaBitwiseXOrLong\\#end,\\#begelementOfEmpty\\#end,\\#begelementOfAllLocs\\#end,\\#begelementOfSingleton\\#end,\\#begelementOfUnion\\#end,\\#begelementOfIntersect\\#end,\\#begelementOfSetMinus\\#end,\\#begelementOfAllFields\\#end,\\#begelementOfAllObjects\\#end,\\#begelementOfArrayRange\\#end,\\#begelementOfFreshLocs\\#end,\\#begequalityToElementOf\\#end,\\#begsubsetToElementOf\\#end,\\#begdisjointToElementOf\\#end,\\#begcreatedInHeapToElementOf\\#end,\\#begelementOfEmptyEQ\\#end,\\#begelementOfAllLocsEQ\\#end,\\#begelementOfSingletonEQ\\#end,\\#begelementOfUnionEQ\\#end,\\#begelementOfIntersectEQ\\#end,\\#begelementOfSetMinusEQ\\#end,\\#begelementOfAllFieldsEQ\\#end,\\#begelementOfAllObjectsEQ\\#end,\\#begelementOfArrayRangeEQ\\#end,\\#begelementOfFreshLocsEQ\\#end,\\#begunionWithEmpty1\\#end,\\#begunionWithEmpty2\\#end,\\#begunionWithAllLocs1\\#end,\\#begunionWithAllLocs2\\#end,\\#begintersectWithEmpty1\\#end,\\#begintersectWithEmpty2\\#end,\\#begintersectWithAllLocs1\\#end,\\#begintersectWithAllLocs2\\#end,\\#begsetMinusWithEmpty1\\#end,\\#begsetMinusWithEmpty2\\#end,\\#begsetMinusWithAllLocs\\#end,\\#begsubsetWithEmpty\\#end,\\#begsubsetWithAllLocs\\#end,\\#begdisjointWithEmpty1\\#end,\\#begdisjointWithEmpty2\\#end,\\#begcreatedInHeapWithEmpty\\#end,\\#begcreatedInHeapWithSingleton\\#end,\\#begcreatedInHeapWithUnion\\#end,\\#begcreatedInHeapWithSetMinusFreshLocs\\#end,\\#begcreatedInHeapWithAllFields\\#end,\\#begcreatedInHeapWithArrayRange\\#end,\\#begreferencedObjectIsCreatedRight\\#end,\\#begreferencedObjectIsCreatedRightEQ\\#end,\\#begunionWithItself\\#end,\\#begintersectWithItself\\#end,\\#begsetMinusItself\\#end,\\#begsubsetOfItself\\#end,\\#begselectOfStore\\#end,\\#begselectOfCreate\\#end,\\#begselectOfAnon\\#end,\\#begselectOfMemset\\#end,\\#begonlyCreatedObjectsAreReferenced\\#end,\\#begonlyCreatedObjectsAreInLocSets\\#end,\\#begonlyCreatedObjectsAreInLocSetsEQ\\#end,\\#begarrayLengthNotNegative\\#end,\\#begwellFormedStoreObject\\#end,\\#begwellFormedStoreLocSet\\#end,\\#begwellFormedStorePrimitive\\#end,\\#begwellFormedCreate\\#end,\\#begwellFormedAnon\\#end,\\#begwellFormedMemsetObject\\#end,\\#begwellFormedMemsetLocSet\\#end,\\#begwellFormedMemsetPrimitive\\#end,\\#begselectOfStoreEQ\\#end,\\#begselectOfCreateEQ\\#end,\\#begselectOfAnonEQ\\#end,\\#begselectOfMemsetEQ\\#end,\\#begmemsetEmpty\\#end,\\#begselectCreatedOfAnonEQ\\#end,\\#begwellFormedStoreObjectEQ\\#end,\\#begwellFormedStoreLocSetEQ\\#end,\\#begwellFormedStorePrimitiveEQ\\#end,\\#begwellFormedAnonEQ\\#end,\\#begwellFormedMemsetObjectEQ\\#end,\\#begwellFormedMemsetPrimitiveEQ\\#end
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_INSTANTIATE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=500
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=methodExpansion-methodExpansion:noRestriction,assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=Symbolic Execution Strategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Mon Jul 18 11:03:43 CEST 2016
name=AllNodeTypesTest[AllNodeTypesTest\\:\\:main(AllNodeTypesTest)].JML normal_behavior operation contract.0
addSymbolicExecutionLabel=true
contract=AllNodeTypesTest[AllNodeTypesTest\\:\\:main(AllNodeTypesTest)].JML normal_behavior operation contract.0
addUninterpretedPredicate=true
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Martin" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "1" (keyUser "marti" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "1361")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "obj,result,exc,heapAtPre,SETAccumulate,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "assignment" (formula "4") (term "1"))
(builtin "One Step Simplification" (formula "4"))
(rule "methodBodyExpand" (formula "4") (term "1") (newnames "heapBefore_main,savedHeapBefore_main,_objBefore_main"))
(builtin "One Step Simplification" (formula "4"))
(rule "assignment_write_attribute" (formula "4") (term "1"))
(branch "Normal Execution (_obj != null)"
   (builtin "One Step Simplification" (formula "4"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "4"))
   (builtin "One Step Simplification" (formula "2"))
   (builtin "Use Operation Contract" (formula "5") (newnames "heapBefore_doubleValue,result_0,exc_1,heapAfter_doubleValue,anon_heap_doubleValue") (contract "AllNodeTypesTest[AllNodeTypesTest::doubleValue(int)].JML normal_behavior operation contract.0"))
   (branch "Post (doubleValue)"
      (builtin "One Step Simplification" (formula "5"))
      (rule "translateJavaAddInt" (formula "5") (term "1,0,1,1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "add_literals" (formula "5") (term "1,0,1,1"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "7"))
      (rule "assignment_write_attribute" (formula "9") (term "1"))
      (branch "Normal Execution (_obj != null)"
         (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "8")))
         (rule "false_right" (formula "9"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "applyEq" (formula "9") (term "3,0,1,0") (ifseqformula "7"))
         (rule "variableDeclarationAssign" (formula "9") (term "1"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "result_1"))
         (rule "assignment" (formula "9") (term "1"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "for_to_while" (formula "9") (term "1") (inst "#innerLabel=_label2") (inst "#outerLabel=_label3"))
         (rule "variableDeclarationAssign" (formula "9") (term "1"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "i"))
         (rule "assignment" (formula "9") (term "1"))
         (builtin "One Step Simplification" (formula "9"))
         (builtin "Loop Invariant" (formula "9") (newnames "variant,b,heapBefore_LOOP,iBefore_LOOP,result_1Before_LOOP,i_0,result_1_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
         (branch "Invariant Initially Valid"
            (builtin "One Step Simplification" (formula "9"))
            (rule "wellFormedStorePrimitive" (formula "9") (term "1"))
            (rule "wellFormedAnonEQ" (formula "9") (term "1") (ifseqformula "5"))
            (rule "wellFormedStorePrimitive" (formula "9") (term "0,1"))
            (rule "qeq_literals" (formula "9") (term "0,0"))
            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "1")) (ifInst ""  (formula "4")))
            (rule "leq_literals" (formula "9"))
            (rule "closeTrue" (formula "9"))
         )
         (branch "Body Preserves Invariant"
            (builtin "One Step Simplification" (formula "9"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "translateJavaSubInt" (formula "11") (term "0,1,1,1,0,1"))
            (rule "translateJavaSubInt" (formula "11") (term "0,1,0,1,1,0,1,1"))
            (rule "andLeft" (formula "9"))
            (rule "impRight" (formula "12"))
            (rule "eqSymm" (formula "13") (term "0,0,1,0,0,1,1,0,1"))
            (rule "polySimp_elimSub" (formula "13") (term "0,1,1,1,0"))
            (rule "polySimp_elimSub" (formula "13") (term "0,1,0,1,1,0,1"))
            (rule "boxToDiamond" (formula "1") (term "1"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "variableDeclarationAssign" (formula "11") (term "1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_2"))
            (rule "equality_comparison_simple" (formula "11") (term "1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "methodCallEmpty" (formula "11") (term "1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "emptyModality" (formula "11") (term "1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "notRight" (formula "11"))
            (rule "applyEqRigid" (formula "13") (term "0,1,0,1,1,1,0") (ifseqformula "1"))
            (rule "times_zero_2" (formula "13") (term "1,0,1,1,1,0"))
            (rule "add_zero_right" (formula "13") (term "0,1,1,1,0"))
            (rule "applyEqRigid" (formula "13") (term "0,0,0,1,1,0") (ifseqformula "1"))
            (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "1"))
            (rule "leq_literals" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "variableDeclarationAssign" (formula "11") (term "1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "exc_2"))
            (rule "assignment" (formula "11") (term "1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "thrownExc"))
            (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_1"))
            (rule "equality_comparison_simple" (formula "11") (term "1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "ifSplit" (formula "11"))
            (branch "if x_1 true"
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "postincrement" (formula "11") (term "1"))
               (rule "compound_int_cast_expression" (formula "11") (term "1") (inst "#v=x"))
               (rule "variableDeclarationAssign" (formula "11") (term "1"))
               (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_4"))
               (rule "remove_parentheses_right" (formula "11") (term "1"))
               (rule "assignmentAdditionInt" (formula "11") (term "1"))
               (rule "translateJavaAddInt" (formula "11") (term "0,0,1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "polySimp_addComm0" (formula "11") (term "0,1,0"))
               (rule "widening_identity_cast_5" (formula "11") (term "1"))
               (rule "assignment" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "blockEmpty" (formula "11") (term "1"))
               (rule "postincrement" (formula "11") (term "1"))
               (rule "compound_int_cast_expression" (formula "11") (term "1") (inst "#v=x"))
               (rule "variableDeclarationAssign" (formula "11") (term "1"))
               (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_5"))
               (rule "remove_parentheses_right" (formula "11") (term "1"))
               (rule "assignmentAdditionInt" (formula "11") (term "1"))
               (rule "translateJavaAddInt" (formula "11") (term "0,0,1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "add_zero_left" (formula "11") (term "0,1,0"))
               (rule "widening_identity_cast_5" (formula "11") (term "1"))
               (rule "assignment" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "tryEmpty" (formula "11") (term "1"))
               (rule "methodCallEmpty" (formula "11") (term "1"))
               (rule "emptyModality" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "mul_literals" (formula "11") (term "1,0,1,0"))
               (rule "qeq_literals" (formula "11") (term "0,0,0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "add_literals" (formula "11") (term "0,1,0"))
               (rule "leq_literals" (formula "11") (term "0,0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "precOfInt" (formula "11") (term "0"))
               (rule "leq_literals" (formula "11") (term "0,0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "less_literals" (formula "11") (term "0"))
               (builtin "One Step Simplification" (formula "11"))
               (opengoal " ")
            )
            (branch "if x_1 false"
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Use Case"
            (builtin "One Step Simplification" (formula "9"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "andLeft" (formula "9"))
            (rule "variableDeclarationAssign" (formula "12") (term "1"))
            (rule "variableDeclaration" (formula "12") (term "1") (newnames "b_1"))
            (rule "equality_comparison_simple" (formula "12") (term "1"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "methodCallEmpty" (formula "12") (term "1"))
            (rule "emptyModality" (formula "12") (term "1"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "impRight" (formula "12"))
            (rule "notLeft" (formula "1"))
            (rule "inEqSimp_strengthen1" (formula "9") (ifseqformula "11"))
            (rule "add_zero_right" (formula "9") (term "1"))
            (rule "inEqSimp_contradEq7" (formula "11") (ifseqformula "9"))
            (rule "times_zero_1" (formula "11") (term "1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0"))
            (rule "leq_literals" (formula "11") (term "0"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "false_right" (formula "11"))
            (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "10"))
            (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
            (rule "qeq_literals" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "9"))
            (rule "leq_literals" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "blockEmpty" (formula "11") (term "1"))
            (rule "methodCallWithAssignmentWithinClass" (formula "11") (term "1") (inst "#v0=x"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_2"))
            (rule "variableDeclarationAssign" (formula "11") (term "1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_3"))
            (rule "assignment" (formula "11") (term "1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_doubleValue_0,savedHeapBefore_doubleValue"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "returnUnfold" (formula "11") (term "1") (inst "#v0=x_4"))
            (rule "variableDeclarationAssign" (formula "11") (term "1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_6"))
            (rule "assignmentAdditionInt" (formula "11") (term "1"))
            (rule "translateJavaAddInt" (formula "11") (term "0,0,1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "polySimp_pullOutFactor3" (formula "11") (term "0,1,0"))
            (rule "methodCallReturn" (formula "11") (term "1"))
            (rule "assignment" (formula "11") (term "1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "methodCallEmpty" (formula "11") (term "1"))
            (rule "blockEmpty" (formula "11") (term "1"))
            (rule "assignment" (formula "11") (term "1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "for_to_while" (formula "11") (term "1") (inst "#innerLabel=_label4") (inst "#outerLabel=_label5"))
            (rule "variableDeclarationAssign" (formula "11") (term "1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "i_1"))
            (rule "assignment" (formula "11") (term "1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "loopUnwind" (formula "11") (term "1") (inst "#innerLabel=_label6") (inst "#outerLabel=_label7"))
            (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_7"))
            (rule "equality_comparison_simple" (formula "11") (term "1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "ifSplit" (formula "11"))
            (branch "if x_7 true"
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "postincrement" (formula "11") (term "1"))
               (rule "compound_int_cast_expression" (formula "11") (term "1") (inst "#v=x"))
               (rule "variableDeclarationAssign" (formula "11") (term "1"))
               (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_8"))
               (rule "remove_parentheses_right" (formula "11") (term "1"))
               (rule "assignmentAdditionInt" (formula "11") (term "1"))
               (rule "translateJavaAddInt" (formula "11") (term "0,0,1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "polySimp_addComm0" (formula "11") (term "0,1,0"))
               (rule "widening_identity_cast_5" (formula "11") (term "1"))
               (rule "assignment" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "blockEmpty" (formula "11") (term "1"))
               (rule "postincrement" (formula "11") (term "1"))
               (rule "compound_int_cast_expression" (formula "11") (term "1") (inst "#v=x"))
               (rule "variableDeclarationAssign" (formula "11") (term "1"))
               (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_9"))
               (rule "remove_parentheses_right" (formula "11") (term "1"))
               (rule "assignmentAdditionInt" (formula "11") (term "1"))
               (rule "translateJavaAddInt" (formula "11") (term "0,0,1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "add_zero_left" (formula "11") (term "0,1,0"))
               (rule "widening_identity_cast_5" (formula "11") (term "1"))
               (rule "assignment" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "blockEmpty" (formula "11") (term "1"))
               (rule "loopUnwind" (formula "11") (term "1") (inst "#innerLabel=_label8") (inst "#outerLabel=_label9"))
               (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_10"))
               (rule "equality_comparison_simple" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "equal_literals" (formula "11") (term "0,0,1,0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "ifSplit" (formula "11"))
               (branch "if x_10 true"
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_10 false"
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "blockEmpty" (formula "11") (term "1"))
                  (rule "methodCallReturn" (formula "11") (term "1"))
                  (rule "assignment" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "methodCallEmpty" (formula "11") (term "1"))
                  (rule "tryEmpty" (formula "11") (term "1"))
                  (rule "emptyModality" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (opengoal " ")
               )
            )
            (branch "if x_7 false"
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Null Reference (_obj = null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Exceptional Post (doubleValue)"
      (builtin "One Step Simplification" (formula "5"))
      (rule "translateJavaAddInt" (formula "5") (term "1,0,1,1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "add_literals" (formula "5") (term "1,0,1,1"))
      (rule "andLeft" (formula "5"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "6") (term "1,0") (ifseqformula "5"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "6"))
      (rule "notLeft" (formula "6"))
      (rule "close" (formula "9") (ifseqformula "8"))
   )
   (branch "Pre (doubleValue)"
      (builtin "One Step Simplification" (formula "5"))
      (rule "wellFormedStorePrimitive" (formula "5") (term "1"))
      (rule "qeq_literals" (formula "5") (term "0"))
      (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "1")))
      (rule "closeTrue" (formula "5"))
   )
)
(branch "Null Reference (_obj = null)"
   (builtin "One Step Simplification" (formula "1"))
   (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "1"))
   (rule "throwUnfold" (formula "4") (term "1") (inst "#v0=n"))
   (rule "variableDeclarationAssign" (formula "4") (term "1"))
   (rule "variableDeclaration" (formula "4") (term "1") (newnames "n"))
   (builtin "Use Operation Contract" (formula "4") (newnames "heapBefore_NullPointerException,self,exc_0,heapAfter_NullPointerException,anon_heap_NullPointerException") (contract "java.lang.NullPointerException[java.lang.NullPointerException::NullPointerException()].JML normal_behavior operation contract.0"))
   (branch "Post (NullPointerException)"
      (builtin "One Step Simplification" (formula "5"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "andLeft" (formula "5"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "6") (term "1,1,0,1,0") (ifseqformula "5"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "7"))
      (rule "notLeft" (formula "6"))
      (rule "notLeft" (formula "6"))
      (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "12"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "pullOutSelect" (formula "9") (term "0") (inst "selectSK=java_lang_Throwable_cause_0"))
      (rule "simplifySelectOfAnonEQ" (formula "9") (ifseqformula "5"))
      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "14")) (ifInst ""  (formula "13")))
      (rule "applyEqReverse" (formula "10") (term "0") (ifseqformula "9"))
      (rule "hideAuxiliaryEq" (formula "9"))
      (rule "pullOutSelect" (formula "8") (term "0") (inst "selectSK=java_lang_Throwable_message_0"))
      (rule "simplifySelectOfAnonEQ" (formula "8") (ifseqformula "5"))
      (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "14")) (ifInst ""  (formula "13")))
      (rule "applyEqReverse" (formula "9") (term "0") (ifseqformula "8"))
      (rule "hideAuxiliaryEq" (formula "8"))
      (rule "commuteUnion" (formula "5") (term "1,0"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "0") (ifseqformula "4"))
      (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "9"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0") (ifseqformula "4"))
      (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "10"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "assignment" (formula "14") (term "1"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "methodCallParamThrow" (formula "14") (term "1"))
      (rule "tryCatchThrow" (formula "14") (term "1"))
      (rule "ifElseUnfold" (formula "14") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x"))
      (rule "equality_comparison_simple" (formula "14") (term "1"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "replace_known_right" (formula "14") (term "0,0,1,0") (ifseqformula "13"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "ifElseSplit" (formula "14"))
      (branch "if x true"
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x false"
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "ifElseSplit" (formula "14"))
         (branch "if n instanceof java.lang.Throwable true"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
            (rule "true_left" (formula "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "e"))
            (rule "delete_unnecessary_cast" (formula "14") (term "1") (newnames "heapBefore_doubleValue_1,ResultPredicate,ResultPredicate"))
            (branch "Normal Execution (n instanceof java.lang.Throwable)"
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "assignment" (formula "14") (term "1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "emptyModality" (formula "14") (term "1"))
               (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")))
               (rule "false_right" (formula "14"))
               (opengoal " ")
            )
            (branch "ClassCastException (!(n instanceof java.lang.Throwable))"
               (builtin "One Step Simplification" (formula "14"))
               (rule "closeTrue" (formula "14"))
            )
         )
         (branch "if n instanceof java.lang.Throwable false"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Exceptional Post (NullPointerException)"
      (builtin "One Step Simplification" (formula "5"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "andLeft" (formula "5"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "6") (term "1,0,0") (ifseqformula "5"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "6") (term "1,1,0,1,0") (ifseqformula "5"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "6"))
      (rule "close" (formula "12") (ifseqformula "11"))
   )
   (branch "Pre (NullPointerException)"
      (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "2")))
      (rule "closeTrue" (formula "4"))
   )
)
)

}
