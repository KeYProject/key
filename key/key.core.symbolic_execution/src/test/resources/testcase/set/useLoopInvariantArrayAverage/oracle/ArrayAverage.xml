<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call ArrayAverage.average(array)&gt;" pathCondition="true" pathConditionChanged="false">
      <statement name="int sum = sum(array);" pathCondition="true" pathConditionChanged="false">
         <callStackEntry path="/0"/>
         <methodCall name="&lt;call ArrayAverage.sum(array_1)&gt;" pathCondition="true" pathConditionChanged="false">
            <callStackEntry path="/0"/>
            <branchStatement name="if (array_1==null)" pathCondition="true" pathConditionChanged="false" blockOpened="true">
               <callStackEntry path="/0/0/0"/>
               <callStackEntry path="/0"/>
               <branchCondition name="equals(array,null)" pathCondition="equals(array,null)" pathConditionChanged="true" branchCondition="equals(array,null)" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <callStackEntry path="/0/0/0"/>
                  <callStackEntry path="/0"/>
                  <statement name="throw new Exception ();" pathCondition="equals(array,null)" pathConditionChanged="false">
                     <callStackEntry path="/0/0/0"/>
                     <callStackEntry path="/0"/>
                     <exceptionalMethodReturn name="&lt;throw java.lang.Exception&gt;" signature="&lt;exceptional return of &lt;call ArrayAverage.sum(array_1)&gt;&gt;" pathCondition="equals(array,null)" pathConditionChanged="false" methodReturnCondition="equals(array,null)">
                        <callStackEntry path="/0/0/0"/>
                        <callStackEntry path="/0"/>
                        <exceptionalMethodReturn name="&lt;throw java.lang.Exception&gt;" signature="&lt;exceptional return of &lt;call ArrayAverage.average(array)&gt;&gt;" pathCondition="equals(array,null)" pathConditionChanged="false" methodReturnCondition="equals(array,null)">
                           <callStackEntry path="/0"/>
                           <termination name="&lt;uncaught java.lang.Exception&gt;" pathCondition="equals(array,null)" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                           </termination>
                        </exceptionalMethodReturn>
                        <completedBlockEntry path="/0/0/0/0" conditionString="equals(array,null)"/>
                     </exceptionalMethodReturn>
                  </statement>
               </branchCondition>
               <branchCondition name="not(equals(array,null))" pathCondition="not(equals(array,null))" pathConditionChanged="true" branchCondition="not(equals(array,null))" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <callStackEntry path="/0/0/0"/>
                  <callStackEntry path="/0"/>
                  <statement name="int sum = 0;" pathCondition="not(equals(array,null))" pathConditionChanged="false">
                     <callStackEntry path="/0/0/0"/>
                     <callStackEntry path="/0"/>
                     <loopStatement name="for ( int i = 0; i&lt;array_1.length; i++ )" pathCondition="not(equals(array,null))" pathConditionChanged="false" blockOpened="true">
                        <callStackEntry path="/0/0/0"/>
                        <callStackEntry path="/0"/>
                        <statement name="int i = 0;" pathCondition="not(equals(array,null))" pathConditionChanged="false">
                           <callStackEntry path="/0/0/0"/>
                           <callStackEntry path="/0"/>
                           <loopInvariant name="invariant: (  (i &gt;= 0
 &amp; i &lt;= array_1.length)&lt;&lt;SC&gt;&gt;
 &amp; sum_2 = javaCastInt(bsum{int j;}(0, i, array_1[j])))&lt;&lt;SC&gt;&gt;;
variant: javaSubInt(array_1.length, i)
mod: false" pathCondition="not(equals(array,null))" pathConditionChanged="false" initiallyValid="true">
                              <callStackEntry path="/0/0/0"/>
                              <callStackEntry path="/0"/>
                              <branchCondition name="or(lt(length(array),Z(0(#))),and(and(geq(i_0,Z(0(#))),gt(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),geq(i_0,Z(0(#)))),gt(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="true" branchCondition="or(lt(length(array),Z(0(#))),and(and(geq(i_0,Z(0(#))),gt(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Body Preserves Invariant">
                                 <callStackEntry path="/0/0/0"/>
                                 <callStackEntry path="/0"/>
                                 <loopCondition name="i&lt;array_1.length" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),geq(i_0,Z(0(#)))),gt(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="false" blockOpened="false">
                                    <callStackEntry path="/0/0/0"/>
                                    <statement name="sum_2+=array_1[i];" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),geq(i_0,Z(0(#)))),gt(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="false">
                                       <callStackEntry path="/0/0/0"/>
                                       <statement name="i++;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),geq(i_0,Z(0(#)))),gt(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="false">
                                          <callStackEntry path="/0/0/0"/>
                                          <termination name="&lt;loop body end&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),geq(i_0,Z(0(#)))),gt(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="true">
                                          </termination>
                                       </statement>
                                    </statement>
                                 </loopCondition>
                              </branchCondition>
                              <branchCondition name="or(lt(length(array),Z(0(#))),and(and(geq(i_0,Z(0(#))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),geq(i_0,Z(0(#)))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="true" branchCondition="or(lt(length(array),Z(0(#))),and(and(geq(i_0,Z(0(#))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
                                 <callStackEntry path="/0/0/0"/>
                                 <callStackEntry path="/0"/>
                                 <statement name="return sum_2;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),geq(i_0,Z(0(#)))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="false">
                                    <callStackEntry path="/0/0/0"/>
                                    <callStackEntry path="/0"/>
                                    <methodReturn name="&lt;return of sum&gt;" signature="&lt;return of ArrayAverage.sum(array_1)&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),geq(i_0,Z(0(#)))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="false" nameIncludingReturnValue="&lt;return sum_2_0 as result of sum&gt;" signatureIncludingReturnValue="&lt;return sum_2_0 as result of ArrayAverage.sum(array_1)&gt;" isReturnValueComputed="true" methodReturnCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),geq(i_0,Z(0(#)))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))">
                                       <methodReturnValue name="sum_2_0" returnValueString="sum_2_0" hasCondition="false">
                                       </methodReturnValue>
                                       <callStackEntry path="/0/0/0"/>
                                       <callStackEntry path="/0"/>
                                       <statement name="return sum_1/array.length;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),geq(i_0,Z(0(#)))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="false">
                                          <callStackEntry path="/0"/>
                                          <branchCondition name="equals(i_0,Z(0(#)))" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),equals(i_0,Z(0(#)))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="true" branchCondition="equals(i_0,Z(0(#)))" mergedBranchCondition="false" isBranchConditionComputed="true">
                                             <exceptionalMethodReturn name="&lt;throw java.lang.ArithmeticException&gt;" signature="&lt;exceptional return of &lt;call ArrayAverage.average(array)&gt;&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),equals(i_0,Z(0(#)))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="false" methodReturnCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),equals(i_0,Z(0(#)))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))">
                                                <callStackEntry path="/0"/>
                                                <termination name="&lt;uncaught java.lang.ArithmeticException&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),equals(i_0,Z(0(#)))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                                                </termination>
                                             </exceptionalMethodReturn>
                                          </branchCondition>
                                          <branchCondition name="not(equals(i_0,Z(0(#))))" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),geq(i_0,Z(1(#)))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="true" branchCondition="not(equals(i_0,Z(0(#))))" mergedBranchCondition="false" isBranchConditionComputed="true">
                                             <methodReturn name="&lt;return of average&gt;" signature="&lt;return of ArrayAverage.average(array)&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),geq(i_0,Z(1(#)))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="false" nameIncludingReturnValue="&lt;return 
	quotient_0 {gt(sum_2_0,Z(neglit(1(#))))}, 
	mul(quotient_1,Z(neglit(1(#)))) {lt(sum_2_0,Z(0(#)))}
as result of average&gt;" signatureIncludingReturnValue="&lt;return 
	quotient_0 {gt(sum_2_0,Z(neglit(1(#))))}, 
	mul(quotient_1,Z(neglit(1(#)))) {lt(sum_2_0,Z(0(#)))}
as result of ArrayAverage.average(array)&gt;" isReturnValueComputed="true" methodReturnCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),geq(i_0,Z(1(#)))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))">
                                                <methodReturnValue name="quotient_0 {gt(sum_2_0,Z(neglit(1(#))))}" returnValueString="quotient_0" hasCondition="true" conditionString="gt(sum_2_0,Z(neglit(1(#))))">
                                                </methodReturnValue>
                                                <methodReturnValue name="mul(quotient_1,Z(neglit(1(#)))) {lt(sum_2_0,Z(0(#)))}" returnValueString="mul(quotient_1,Z(neglit(1(#))))" hasCondition="true" conditionString="lt(sum_2_0,Z(0(#)))">
                                                </methodReturnValue>
                                                <callStackEntry path="/0"/>
                                                <termination name="&lt;end&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(and(and(not(equals(array,null)),geq(i_0,Z(1(#)))),equals(length(array),i_0)),equals(bsum{j:int}(Z(0(#)),i_0,int::select(heap,array,arr(j))),sum_2_0)))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                                                </termination>
                                             </methodReturn>
                                          </branchCondition>
                                       </statement>
                                    </methodReturn>
                                 </statement>
                              </branchCondition>
                           </loopInvariant>
                           <completedBlockEntry path="/0/0/0/0" conditionString="not(equals(array,null))"/>
                           <completedBlockEntry path="/0/0/0/0/1/0/0" conditionString="true"/>
                        </statement>
                        <blockCompletionEntry path="/0/0/0/0/1/0/0/0"/>
                     </loopStatement>
                  </statement>
               </branchCondition>
               <blockCompletionEntry path="/0/0/0/0/0/0/0"/>
               <blockCompletionEntry path="/0/0/0/0/1/0/0/0"/>
            </branchStatement>
            <methodReturnEntry path="/0/0/0/0/0/0/0"/>
            <methodReturnEntry path="/0/0/0/0/1/0/0/0/0/1/0/0"/>
         </methodCall>
      </statement>
      <methodReturnEntry path="/0/0/0/0/0/0/0/0"/>
      <methodReturnEntry path="/0/0/0/0/1/0/0/0/0/1/0/0/0/0/0"/>
      <methodReturnEntry path="/0/0/0/0/1/0/0/0/0/1/0/0/0/1/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/1/0/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/1/0/0/0/0/1/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/1/0/0/0/0/1/0/0/0/1/0/0"/>
</start>
