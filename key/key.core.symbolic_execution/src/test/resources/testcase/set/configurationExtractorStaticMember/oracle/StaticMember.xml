<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call self.compute(k)&gt;" pathCondition="true" pathConditionChanged="false">
      <branchStatement name="if (this.h*2&gt;k)" pathCondition="true" pathConditionChanged="false" blockOpened="true">
         <branchCondition name="gt(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k)" pathCondition="gt(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k)" pathConditionChanged="true" branchCondition="gt(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k)" mergedBranchCondition="false" isBranchConditionComputed="true">
            <statement name="this.l=r.nl.m+r.x;" pathCondition="gt(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k)" pathConditionChanged="false">
               <branchCondition name="not(equals(Refer::select(heap,null,StaticMember::$r),null))" pathCondition="and(not(equals(Refer::select(heap,null,StaticMember::$r),null)),gt(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k))" pathConditionChanged="true" branchCondition="not(equals(Refer::select(heap,null,StaticMember::$r),null))" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <statement name="s=this.h;" pathCondition="and(not(equals(Refer::select(heap,null,StaticMember::$r),null)),gt(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k))" pathConditionChanged="false">
                     <statement name="r.nl.m=1;" pathCondition="and(not(equals(Refer::select(heap,null,StaticMember::$r),null)),gt(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k))" pathConditionChanged="false">
                        <methodReturn name="&lt;return of compute&gt;" signature="&lt;return of self.compute(k)&gt;" pathCondition="and(not(equals(Refer::select(heap,null,StaticMember::$r),null)),gt(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="and(not(equals(Refer::select(heap,null,StaticMember::$r),null)),gt(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k))">
                           <termination name="&lt;end&gt;" pathCondition="and(not(equals(Refer::select(heap,null,StaticMember::$r),null)),gt(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                           </termination>
                        </methodReturn>
                     </statement>
                     <completedBlockEntry path="/0/0" conditionString="and(not(equals(Refer::select(heap,null,StaticMember::$r),null)),gt(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k))"/>
                  </statement>
               </branchCondition>
               <branchCondition name="equals(Refer::select(heap,null,StaticMember::$r),null)" pathCondition="and(equals(Refer::select(heap,null,StaticMember::$r),null),gt(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k))" pathConditionChanged="true" branchCondition="equals(Refer::select(heap,null,StaticMember::$r),null)" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <exceptionalMethodReturn name="&lt;throw java.lang.NullPointerException&gt;" signature="&lt;exceptional return of &lt;call self.compute(k)&gt;&gt;" pathCondition="and(equals(Refer::select(heap,null,StaticMember::$r),null),gt(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k))" pathConditionChanged="false" methodReturnCondition="and(equals(Refer::select(heap,null,StaticMember::$r),null),gt(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k))">
                     <termination name="&lt;uncaught java.lang.NullPointerException&gt;" pathCondition="and(equals(Refer::select(heap,null,StaticMember::$r),null),gt(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                     </termination>
                     <completedBlockEntry path="/0/0" conditionString="and(equals(Refer::select(heap,null,StaticMember::$r),null),gt(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k))"/>
                  </exceptionalMethodReturn>
               </branchCondition>
            </statement>
         </branchCondition>
         <branchCondition name="leq(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k)" pathCondition="leq(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k)" pathConditionChanged="true" branchCondition="leq(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k)" mergedBranchCondition="false" isBranchConditionComputed="true">
            <statement name="this.l=s;" pathCondition="leq(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k)" pathConditionChanged="false">
               <statement name="s=this.h+1;" pathCondition="leq(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k)" pathConditionChanged="false">
                  <statement name="r.nl.m=1;" pathCondition="leq(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k)" pathConditionChanged="false">
                     <branchCondition name="not(equals(Refer::select(heap,null,StaticMember::$r),null))" pathCondition="and(not(equals(Refer::select(heap,null,StaticMember::$r),null)),leq(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k))" pathConditionChanged="true" branchCondition="not(equals(Refer::select(heap,null,StaticMember::$r),null))" mergedBranchCondition="false" isBranchConditionComputed="true">
                        <methodReturn name="&lt;return of compute&gt;" signature="&lt;return of self.compute(k)&gt;" pathCondition="and(not(equals(Refer::select(heap,null,StaticMember::$r),null)),leq(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="and(not(equals(Refer::select(heap,null,StaticMember::$r),null)),leq(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k))">
                           <termination name="&lt;end&gt;" pathCondition="and(not(equals(Refer::select(heap,null,StaticMember::$r),null)),leq(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                           </termination>
                        </methodReturn>
                     </branchCondition>
                     <branchCondition name="equals(Refer::select(heap,null,StaticMember::$r),null)" pathCondition="and(equals(Refer::select(heap,null,StaticMember::$r),null),leq(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k))" pathConditionChanged="true" branchCondition="equals(Refer::select(heap,null,StaticMember::$r),null)" mergedBranchCondition="false" isBranchConditionComputed="true">
                        <exceptionalMethodReturn name="&lt;throw java.lang.NullPointerException&gt;" signature="&lt;exceptional return of &lt;call self.compute(k)&gt;&gt;" pathCondition="and(equals(Refer::select(heap,null,StaticMember::$r),null),leq(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k))" pathConditionChanged="false" methodReturnCondition="and(equals(Refer::select(heap,null,StaticMember::$r),null),leq(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k))">
                           <termination name="&lt;uncaught java.lang.NullPointerException&gt;" pathCondition="and(equals(Refer::select(heap,null,StaticMember::$r),null),leq(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                           </termination>
                        </exceptionalMethodReturn>
                     </branchCondition>
                  </statement>
                  <completedBlockEntry path="/0/0" conditionString="leq(mul(int::select(heap,self,StaticMember::$h),Z(2(#))),k)"/>
               </statement>
            </statement>
         </branchCondition>
         <blockCompletionEntry path="/0/0/0/0/0/0"/>
         <blockCompletionEntry path="/0/0/0/0/1/0"/>
         <blockCompletionEntry path="/0/0/1/0/0"/>
      </branchStatement>
      <methodReturnEntry path="/0/0/0/0/0/0/0/0"/>
      <methodReturnEntry path="/0/0/0/0/1/0"/>
      <methodReturnEntry path="/0/0/1/0/0/0/0/0"/>
      <methodReturnEntry path="/0/0/1/0/0/0/1/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/1/0/0"/>
   <terminationEntry path="/0/0/1/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/1/0/0/0/1/0/0"/>
</start>
