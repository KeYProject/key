\profile "Java Profile for Symbolic Execution";

\settings {
"#Proof-Settings-Config-File
#Wed Jun 25 11:46:39 CEST 2014
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_INSTANTIATE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=methodExpansion-methodExpansion:noRestriction,Strings-Strings\\:on , reach-reach\\:on , JavaCard-JavaCard\\:off , assertions-assertions\\:on , bigint-bigint\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , modelFields-modelFields\\:showSatisfiability , initialisation-initialisation\\:disableStaticInitialisation , sequences-sequences\\:on , runtimeExceptions-runtimeExceptions\\:allow , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=Symbolic Execution Strategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Wed Jun 25 11:46:39 CEST 2014
name=compute(int)
addSymbolicExecutionLabel=true
addUninterpretedPredicate=true
class=de.uka.ilkd.key.symbolic_execution.po.ProgramMethodPO
method=Magic42\\#compute(int)
";

\proof {
(keyLog "0" (keyUser "Martin" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "3444")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "assignment" (formula "2"))
(rule "methodBodyExpand" (formula "2") (term "1") (newnames "heapBefore_compute,savedHeapBefore_compute"))
(builtin "One Step Simplification" (formula "2"))
(rule "variableDeclarationAssign" (formula "2") (term "1"))
(rule "variableDeclaration" (formula "2") (term "1") (newnames "y"))
(rule "methodCallWithAssignmentWithinClass" (formula "2") (term "1") (inst "#v0=x"))
(rule "variableDeclaration" (formula "2") (term "1") (newnames "x"))
(rule "variableDeclarationAssign" (formula "2") (term "1"))
(rule "variableDeclaration" (formula "2") (term "1") (newnames "x_1"))
(rule "assignment" (formula "2") (term "1"))
(builtin "One Step Simplification" (formula "2"))
(rule "methodBodyExpand" (formula "2") (term "1") (newnames "heapBefore_computeHelp,savedHeapBefore_computeHelp"))
(builtin "One Step Simplification" (formula "2"))
(rule "variableDeclarationAssign" (formula "2") (term "1"))
(rule "variableDeclaration" (formula "2") (term "1") (newnames "y_1"))
(rule "compound_division_1" (formula "2") (term "1") (inst "#v=x_2"))
(rule "variableDeclarationAssign" (formula "2") (term "1"))
(rule "variableDeclaration" (formula "2") (term "1") (newnames "x_2"))
(rule "remove_parentheses_right" (formula "2") (term "1"))
(rule "condition" (formula "2") (term "1"))
(rule "ifElseUnfold" (formula "2") (term "1") (inst "#boolv=x_3"))
(rule "variableDeclaration" (formula "2") (term "1") (newnames "x_3"))
(rule "greater_equal_than_comparison_simple" (formula "2") (term "1"))
(builtin "One Step Simplification" (formula "2"))
(rule "ifElseSplit" (formula "2"))
(branch "if x_3 true"
   (builtin "One Step Simplification" (formula "1"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "assignment" (formula "3") (term "1"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "blockEmpty" (formula "3") (term "1"))
   (rule "assignmentDivisionInt" (formula "3") (term "1"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "translateJavaDivInt" (formula "3") (term "0,1,0,1"))
   (rule "equal_literals" (formula "3") (term "0,0"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "jdiv_axiom" (formula "3") (term "0,1,0"))
   (rule "eqSymm" (formula "1"))
   (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "2"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "eqSymm" (formula "1"))
   (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "1"))
   (rule "div_axiom" (formula "1") (term "1") (inst "quotient=quotient_1"))
   (rule "equal_literals" (formula "1") (term "0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1,1,1,1"))
   (rule "qeq_literals" (formula "1") (term "0,1"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "polySimp_addComm1" (formula "3") (term "1"))
   (rule "add_literals" (formula "3") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "2"))
   (rule "inEqSimp_homoInEq1" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "applyEq" (formula "7") (term "0,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "4") (term "1") (ifseqformula "1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1"))
   (rule "polySimp_rightDist" (formula "3") (term "1"))
   (rule "mul_literals" (formula "3") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
   (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "3"))
   (rule "times_zero_1" (formula "5") (term "0,0"))
   (rule "add_zero_left" (formula "5") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "5"))
   (rule "mul_literals" (formula "5") (term "1"))
   (rule "elimGcdGeq_antec" (formula "5") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(0(0(0(2(#)))))"))
   (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0"))
   (rule "leq_literals" (formula "5") (term "0,0"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "5") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
   (rule "add_literals" (formula "5") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "5") (term "1,0,0"))
   (rule "add_zero_right" (formula "5") (term "0,0"))
   (rule "leq_literals" (formula "5") (term "0"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "returnUnfold" (formula "8") (term "1") (inst "#v0=x_1"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_6"))
   (rule "compound_addition_1" (formula "8") (term "1") (inst "#v=x_7"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_7"))
   (rule "assignmentMultiplicationInt" (formula "8") (term "1"))
   (rule "translateJavaMulInt" (formula "8") (term "0,0,1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_mulComm0" (formula "8") (term "0,1,0"))
   (rule "assignmentAdditionInt" (formula "8") (term "1"))
   (rule "translateJavaAddInt" (formula "8") (term "0,0,1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
   (rule "methodCallReturn" (formula "8") (term "1"))
   (rule "assignment" (formula "8") (term "1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallEmpty" (formula "8") (term "1"))
   (rule "blockEmpty" (formula "8") (term "1"))
   (rule "assignment" (formula "8") (term "1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "res_1"))
   (rule "assignment" (formula "8") (term "1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "loopUnwind" (formula "8") (term "1") (inst "#outerLabel=_label3") (inst "#innerLabel=_label2"))
   (rule "ifUnfold" (formula "8") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_8"))
   (rule "compound_inequality_comparison_1" (formula "8") (term "1") (inst "#v0=x_9"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_9"))
   (rule "assignmentModulo" (formula "8") (term "1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "translateJavaMod" (formula "8") (term "0,1,0,1"))
   (rule "equal_literals" (formula "8") (term "0,0"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "inequality_comparison_simple" (formula "8") (term "1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "ifSplit" (formula "8"))
   (branch "if x_8 true"
      (builtin "One Step Simplification" (formula "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "notLeft" (formula "1"))
      (rule "jmod_axiom" (formula "8") (term "0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
      (rule "polySimp_sepNegMonomial" (formula "8"))
      (rule "polySimp_mulLiterals" (formula "8") (term "0"))
      (rule "elimGcdEq" (formula "8") (inst "elimGcdRightDiv=add(Z(3(#)), mul(quotient_1, Z(0(6(1(#))))))") (inst "elimGcdLeftDiv=jdiv(add(Z(7(#)), mul(quotient_1, Z(0(2(3(#)))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "mul_literals" (formula "8") (term "0,1,0,1,0"))
      (rule "add_literals" (formula "8") (term "1,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,1,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,1,0"))
      (rule "polySimp_addComm1" (formula "8") (term "0,0,1,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,1,0"))
      (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,1,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,1,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,1,0"))
      (rule "add_zero_right" (formula "8") (term "0,1,0"))
      (rule "qeq_literals" (formula "8") (term "1,0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
      (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0"))
      (rule "leq_literals" (formula "8") (term "0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
      (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0"))
      (rule "equal_literals" (formula "8") (term "0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "false_right" (formula "8"))
      (rule "ifElseUnfold" (formula "8") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_14"))
      (rule "compound_equality_comparison_1" (formula "8") (term "1") (inst "#v0=x_15"))
      (rule "variableDeclarationAssign" (formula "8") (term "1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_15"))
      (rule "assignmentModulo" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "translateJavaMod" (formula "8") (term "0,1,0,1"))
      (rule "equal_literals" (formula "8") (term "0,0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "jmod_axiom" (formula "8") (term "0,1,0"))
      (rule "add_zero_left" (formula "8") (term "0,1,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0"))
      (rule "jdiv_axiom_inline" (formula "8") (term "0,0,1,0"))
      (rule "div_literals" (formula "8") (term "1,0,0,1,0"))
      (rule "qeq_literals" (formula "8") (term "0,0,0,1,0"))
      (rule "times_zero_2" (formula "8") (term "0,0,2,0,0,1,0"))
      (rule "div_literals" (formula "8") (term "0,2,0,0,1,0"))
      (rule "times_zero_2" (formula "8") (term "2,0,0,1,0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "mul_literals" (formula "8") (term "0,1,0"))
      (rule "equality_comparison_simple" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "ifElseSplit" (formula "8"))
      (branch "if x_14 true"
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "compound_addition_2" (formula "8") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
         (rule "variableDeclarationAssign" (formula "8") (term "1"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_16"))
         (rule "assignmentMultiplicationInt" (formula "8") (term "1"))
         (rule "translateJavaMulInt" (formula "8") (term "0,0,1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "mul_literals" (formula "8") (term "0,1,0"))
         (rule "variableDeclarationAssign" (formula "8") (term "1"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_17"))
         (rule "remove_parentheses_right" (formula "8") (term "1"))
         (rule "assignmentModulo" (formula "8") (term "1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "translateJavaMod" (formula "8") (term "0,1,0,1"))
         (rule "equal_literals" (formula "8") (term "0,0"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "assignmentAdditionInt" (formula "8") (term "1"))
         (rule "translateJavaAddInt" (formula "8") (term "0,0,1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "add_zero_left" (formula "8") (term "0,1,0"))
         (rule "assignmentDivisionInt" (formula "8") (term "1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "translateJavaDivInt" (formula "8") (term "0,1,0,1"))
         (rule "equal_literals" (formula "8") (term "0,0"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "jdiv_axiom" (formula "8") (term "0,1,0"))
         (rule "eqSymm" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,0,2,0"))
         (rule "mul_literals" (formula "1") (term "0,0,0,2,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "6"))
         (rule "times_zero_1" (formula "1") (term "1,1,0,0,0"))
         (rule "greater_literals" (formula "1") (term "0,0,0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "leq_literals" (formula "1") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "eqSymm" (formula "1"))
         (rule "applyEqRigid" (formula "9") (term "0,1,0") (ifseqformula "1"))
         (rule "polyDiv_pullOut" (formula "9") (term "0,1,0") (inst "polyDivCoeff=mul(quotient_1, Z(0(6(1(#)))))"))
         (rule "equal_literals" (formula "9") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,2,0,1,0"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,1,0"))
         (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0,0,1,0"))
         (rule "add_literals" (formula "9") (term "1,1,0,0,0,1,0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,0,1,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,0,1,0"))
         (rule "div_literals" (formula "9") (term "0,0,1,0"))
         (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=mul(quotient_1, Z(0(6(1(#)))))"))
         (rule "equal_literals" (formula "1") (term "0,1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
         (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
         (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,1"))
         (rule "div_literals" (formula "1") (term "0,1"))
         (rule "blockEmpty" (formula "9") (term "1"))
         (rule "loopUnwind" (formula "9") (term "1") (inst "#outerLabel=_label7") (inst "#innerLabel=_label6"))
         (rule "ifUnfold" (formula "9") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_20"))
         (rule "compound_inequality_comparison_1" (formula "9") (term "1") (inst "#v0=x_21"))
         (rule "variableDeclarationAssign" (formula "9") (term "1"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_21"))
         (rule "assignmentModulo" (formula "9") (term "1"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "translateJavaMod" (formula "9") (term "0,1,0,1"))
         (rule "equal_literals" (formula "9") (term "0,0"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "inequality_comparison_simple" (formula "9") (term "1"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "ifSplit" (formula "9"))
         (branch "if x_20 true"
            (builtin "One Step Simplification" (formula "1"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "notLeft" (formula "1"))
            (rule "jmod_axiom" (formula "9") (term "0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
            (rule "polySimp_sepNegMonomial" (formula "9"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0"))
            (rule "elimGcdEq" (formula "9") (inst "elimGcdRightDiv=add(Z(1(#)), mul(quotient_1, Z(0(8(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(3(#)), mul(quotient_1, Z(0(6(1(#)))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "mul_literals" (formula "9") (term "0,1,0,1,0"))
            (rule "add_literals" (formula "9") (term "1,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,1,0"))
            (rule "polySimp_addComm1" (formula "9") (term "0,0,1,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,1,0"))
            (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,1,0"))
            (rule "add_literals" (formula "9") (term "1,1,0,1,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "9") (term "0,1,0"))
            (rule "qeq_literals" (formula "9") (term "1,0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
            (rule "polySimp_addComm1" (formula "9") (term "0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
            (rule "add_literals" (formula "9") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0"))
            (rule "leq_literals" (formula "9") (term "0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
            (rule "polySimp_addComm1" (formula "9") (term "0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
            (rule "add_literals" (formula "9") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0"))
            (rule "equal_literals" (formula "9") (term "0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "false_right" (formula "9"))
            (rule "ifElseUnfold" (formula "9") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_26"))
            (rule "compound_equality_comparison_1" (formula "9") (term "1") (inst "#v0=x_27"))
            (rule "variableDeclarationAssign" (formula "9") (term "1"))
            (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_27"))
            (rule "assignmentModulo" (formula "9") (term "1"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "translateJavaMod" (formula "9") (term "0,1,0,1"))
            (rule "equal_literals" (formula "9") (term "0,0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "equality_comparison_simple" (formula "9") (term "1"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "ifElseSplit" (formula "9"))
            (branch "if x_26 true"
               (builtin "One Step Simplification" (formula "1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "jmod_axiom" (formula "1") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
               (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "2"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "jmod_axiom" (formula "1") (term "0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
               (rule "jdiv_axiom_inline" (formula "1") (term "0,1,0"))
               (rule "mul_literals" (formula "1") (term "0,0,2,0,1,0"))
               (rule "div_literals" (formula "1") (term "1,0,1,0"))
               (rule "qeq_literals" (formula "1") (term "0,0,1,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "times_zero_2" (formula "1") (term "1,0"))
               (rule "add_literals" (formula "1") (term "0"))
               (rule "equal_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_26 false"
               (builtin "One Step Simplification" (formula "1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "notLeft" (formula "1"))
               (rule "jmod_axiom" (formula "9") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
               (rule "applyEqRigid" (formula "9") (term "0,1,0,0") (ifseqformula "1"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
               (rule "polySimp_addComm1" (formula "9") (term "0,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
               (rule "add_literals" (formula "9") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "9") (term "1,0,0"))
               (rule "add_zero_right" (formula "9") (term "0,0"))
               (rule "jmod_axiom" (formula "9") (term "0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
               (rule "jdiv_axiom_inline" (formula "9") (term "0,1,0"))
               (rule "qeq_literals" (formula "9") (term "0,0,1,0"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "div_literals" (formula "9") (term "0,1,0"))
               (rule "times_zero_2" (formula "9") (term "1,0"))
               (rule "add_zero_right" (formula "9") (term "0"))
               (rule "equal_literals" (formula "9"))
               (rule "false_right" (formula "9"))
               (rule "assignmentMultiplicationInt" (formula "9") (term "1"))
               (rule "translateJavaMulInt" (formula "9") (term "0,0,1"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
               (rule "blockEmpty" (formula "9") (term "1"))
               (rule "loopUnwind" (formula "9") (term "1") (inst "#outerLabel=_label11") (inst "#innerLabel=_label10"))
               (rule "ifUnfold" (formula "9") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_30"))
               (rule "compound_inequality_comparison_1" (formula "9") (term "1") (inst "#v0=x_31"))
               (rule "variableDeclarationAssign" (formula "9") (term "1"))
               (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_31"))
               (rule "assignmentModulo" (formula "9") (term "1"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "translateJavaMod" (formula "9") (term "0,1,0,1"))
               (rule "equal_literals" (formula "9") (term "0,0"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "inequality_comparison_simple" (formula "9") (term "1"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "ifSplit" (formula "9"))
               (branch "if x_30 true"
                  (builtin "One Step Simplification" (formula "1"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "notLeft" (formula "1"))
                  (rule "jmod_axiom" (formula "9") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
                  (rule "polySimp_sepNegMonomial" (formula "9"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                  (rule "elimGcdEq" (formula "9") (inst "elimGcdRightDiv=add(Z(1(#)), mul(quotient_1, Z(0(8(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(3(#)), mul(quotient_1, Z(0(6(1(#)))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,1,0"))
                  (rule "add_literals" (formula "9") (term "1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1"))
                  (rule "add_literals" (formula "9") (term "0,0,0,0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0,1"))
                  (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "9") (term "0,0,1"))
                  (rule "equal_literals" (formula "9") (term "0,1"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0,0"))
                  (rule "add_literals" (formula "9") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0,0"))
                  (rule "leq_literals" (formula "9") (term "0,0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                  (rule "add_literals" (formula "9") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0"))
                  (rule "qeq_literals" (formula "9") (term "0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "false_right" (formula "9"))
                  (rule "ifElseUnfold" (formula "9") (term "1") (inst "#boolv=x"))
                  (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_36"))
                  (rule "compound_equality_comparison_1" (formula "9") (term "1") (inst "#v0=x_37"))
                  (rule "variableDeclarationAssign" (formula "9") (term "1"))
                  (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_37"))
                  (rule "assignmentModulo" (formula "9") (term "1"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "translateJavaMod" (formula "9") (term "0,1,0,1"))
                  (rule "equal_literals" (formula "9") (term "0,0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "equality_comparison_simple" (formula "9") (term "1"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "ifElseSplit" (formula "9"))
                  (branch "if x_36 true"
                     (builtin "One Step Simplification" (formula "1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "jmod_axiom" (formula "1") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,0,0"))
                     (rule "applyEqRigid" (formula "1") (term "0,1,0,0") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "jmod_axiom" (formula "1") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                     (rule "jdiv_axiom_inline" (formula "1") (term "0,1,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,2,0,1,0"))
                     (rule "div_literals" (formula "1") (term "1,0,1,0"))
                     (rule "qeq_literals" (formula "1") (term "0,0,1,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1,0"))
                     (rule "add_literals" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "compound_addition_2" (formula "9") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
                     (rule "variableDeclarationAssign" (formula "9") (term "1"))
                     (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_38"))
                     (rule "assignmentMultiplicationInt" (formula "9") (term "1"))
                     (rule "translateJavaMulInt" (formula "9") (term "0,0,1"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0"))
                     (rule "variableDeclarationAssign" (formula "9") (term "1"))
                     (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_39"))
                     (rule "remove_parentheses_right" (formula "9") (term "1"))
                     (rule "assignmentModulo" (formula "9") (term "1"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "translateJavaMod" (formula "9") (term "0,1,0,1"))
                     (rule "equal_literals" (formula "9") (term "0,0"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "assignmentAdditionInt" (formula "9") (term "1"))
                     (rule "translateJavaAddInt" (formula "9") (term "0,0,1"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "assignmentDivisionInt" (formula "9") (term "1"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "translateJavaDivInt" (formula "9") (term "0,1,0,1"))
                     (rule "equal_literals" (formula "9") (term "0,0"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "jdiv_axiom" (formula "9") (term "0,1,0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0,2,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,0,2,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "7"))
                     (rule "times_zero_1" (formula "1") (term "1,1,0,0,0"))
                     (rule "greater_literals" (formula "1") (term "0,0,0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "leq_literals" (formula "1") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEqRigid" (formula "10") (term "0,1,0") (ifseqformula "1"))
                     (rule "polyDiv_pullOut" (formula "10") (term "0,1,0") (inst "polyDivCoeff=mul(quotient_1, Z(0(8(#))))"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,2,0,1,0"))
                     (rule "equal_literals" (formula "10") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,2,0,1,0"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,0,1,0"))
                     (rule "add_literals" (formula "10") (term "1,1,0,0,0,1,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0,0,1,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0,0,1,0"))
                     (rule "div_literals" (formula "10") (term "0,0,1,0"))
                     (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=mul(quotient_1, Z(0(8(#))))"))
                     (rule "equal_literals" (formula "1") (term "0,1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
                     (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "div_literals" (formula "1") (term "0,1"))
                     (rule "blockEmpty" (formula "10") (term "1"))
                     (rule "loopUnwind" (formula "10") (term "1") (inst "#outerLabel=_label15") (inst "#innerLabel=_label14"))
                     (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_42"))
                     (rule "compound_inequality_comparison_1" (formula "10") (term "1") (inst "#v0=x_43"))
                     (rule "variableDeclarationAssign" (formula "10") (term "1"))
                     (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_43"))
                     (rule "assignmentModulo" (formula "10") (term "1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "translateJavaMod" (formula "10") (term "0,1,0,1"))
                     (rule "equal_literals" (formula "10") (term "0,0"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "inequality_comparison_simple" (formula "10") (term "1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "ifSplit" (formula "10"))
                     (branch "if x_42 true"
                        (builtin "One Step Simplification" (formula "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "notLeft" (formula "1"))
                        (rule "jmod_axiom" (formula "10") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "elimGcdEq" (formula "10") (inst "elimGcdRightDiv=add(Z(0(#)), mul(quotient_1, Z(0(4(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(1(#)), mul(quotient_1, Z(0(8(#))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "add_zero_left" (formula "10") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                        (rule "add_zero_left" (formula "10") (term "1,1,0,1,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
                        (rule "add_zero_left" (formula "10") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
                        (rule "add_literals" (formula "10") (term "1,0,0"))
                        (rule "add_zero_left" (formula "10") (term "1,1,1"))
                        (rule "polySimp_mulAssoc" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0,0"))
                        (rule "leq_literals" (formula "10") (term "0,0"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "polySimp_mulAssoc" (formula "10") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,1"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,1"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "10") (term "0,0,1"))
                        (rule "equal_literals" (formula "10") (term "0,1"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "polySimp_mulAssoc" (formula "10") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0"))
                        (rule "qeq_literals" (formula "10") (term "0"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "false_right" (formula "10"))
                        (rule "ifElseUnfold" (formula "10") (term "1") (inst "#boolv=x"))
                        (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_46"))
                        (rule "compound_equality_comparison_1" (formula "10") (term "1") (inst "#v0=x_47"))
                        (rule "variableDeclarationAssign" (formula "10") (term "1"))
                        (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_47"))
                        (rule "assignmentModulo" (formula "10") (term "1"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "translateJavaMod" (formula "10") (term "0,1,0,1"))
                        (rule "equal_literals" (formula "10") (term "0,0"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "equality_comparison_simple" (formula "10") (term "1"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "ifElseSplit" (formula "10"))
                        (branch "if x_46 true"
                           (builtin "One Step Simplification" (formula "1"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "jmod_axiom" (formula "1") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,0,0,0"))
                           (rule "applyEq" (formula "1") (term "0,1,0,0,0") (ifseqformula "3"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0"))
                           (rule "jmod_axiom" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "applyEqRigid" (formula "1") (term "0,1,0,0") (ifseqformula "2"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "jmod_axiom" (formula "1") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                           (rule "jdiv_axiom_inline" (formula "1") (term "0,1,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,2,0,1,0"))
                           (rule "div_literals" (formula "1") (term "1,0,1,0"))
                           (rule "qeq_literals" (formula "1") (term "0,0,1,0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "equal_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if x_46 false"
                           (builtin "One Step Simplification" (formula "1"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "notLeft" (formula "1"))
                           (rule "jmod_axiom" (formula "10") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,0,0,0,0"))
                           (rule "applyEqRigid" (formula "10") (term "0,1,0,0,0") (ifseqformula "2"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,0"))
                           (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0"))
                           (rule "jmod_axiom" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,0"))
                           (rule "applyEq" (formula "10") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                           (rule "add_literals" (formula "10") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0"))
                           (rule "jmod_axiom" (formula "10") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                           (rule "jdiv_axiom_inline" (formula "10") (term "0,1,0"))
                           (rule "mul_literals" (formula "10") (term "0,0,2,0,1,0"))
                           (rule "div_literals" (formula "10") (term "1,0,1,0"))
                           (rule "qeq_literals" (formula "10") (term "0,0,1,0"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "mul_literals" (formula "10") (term "1,0"))
                           (rule "add_literals" (formula "10") (term "0"))
                           (rule "equal_literals" (formula "10"))
                           (rule "false_right" (formula "10"))
                           (rule "assignmentMultiplicationInt" (formula "10") (term "1"))
                           (rule "translateJavaMulInt" (formula "10") (term "0,0,1"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "polySimp_rightDist" (formula "10") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,0"))
                           (rule "blockEmpty" (formula "10") (term "1"))
                           (rule "loopUnwind" (formula "10") (term "1") (inst "#outerLabel=_label19") (inst "#innerLabel=_label18"))
                           (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=x"))
                           (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_50"))
                           (rule "compound_inequality_comparison_1" (formula "10") (term "1") (inst "#v0=x_51"))
                           (rule "variableDeclarationAssign" (formula "10") (term "1"))
                           (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_51"))
                           (rule "assignmentModulo" (formula "10") (term "1"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "translateJavaMod" (formula "10") (term "0,1,0,1"))
                           (rule "equal_literals" (formula "10") (term "0,0"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "inequality_comparison_simple" (formula "10") (term "1"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "ifSplit" (formula "10"))
                           (branch "if x_50 true"
                              (builtin "One Step Simplification" (formula "1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "notLeft" (formula "1"))
                              (rule "jmod_axiom" (formula "10") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "10"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                              (rule "elimGcdEq" (formula "10") (inst "elimGcdRightDiv=add(Z(0(#)), mul(quotient_1, Z(0(4(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(1(#)), mul(quotient_1, Z(0(8(#))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "add_zero_left" (formula "10") (term "1,1,1"))
                              (rule "add_zero_left" (formula "10") (term "1,1,0,1,0"))
                              (rule "add_literals" (formula "10") (term "1,0,0"))
                              (rule "add_zero_left" (formula "10") (term "1,1,0,0,1"))
                              (rule "add_zero_left" (formula "10") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "10") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,0"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "10") (term "0,0,0"))
                              (rule "leq_literals" (formula "10") (term "0,0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "polySimp_mulAssoc" (formula "10") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "equal_literals" (formula "10") (term "0,1"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "polySimp_mulAssoc" (formula "10") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0"))
                              (rule "add_zero_right" (formula "10") (term "0,0"))
                              (rule "qeq_literals" (formula "10") (term "0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "false_right" (formula "10"))
                              (rule "ifElseUnfold" (formula "10") (term "1") (inst "#boolv=x"))
                              (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_56"))
                              (rule "compound_equality_comparison_1" (formula "10") (term "1") (inst "#v0=x_57"))
                              (rule "variableDeclarationAssign" (formula "10") (term "1"))
                              (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_57"))
                              (rule "assignmentModulo" (formula "10") (term "1"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "translateJavaMod" (formula "10") (term "0,1,0,1"))
                              (rule "equal_literals" (formula "10") (term "0,0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "equality_comparison_simple" (formula "10") (term "1"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "ifElseSplit" (formula "10"))
                              (branch "if x_56 true"
                                 (builtin "One Step Simplification" (formula "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "jmod_axiom" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                 (rule "applyEq" (formula "1") (term "0,1,0,0,0") (ifseqformula "2"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                 (rule "jmod_axiom" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                 (rule "applyEqRigid" (formula "1") (term "0,1,0,0") (ifseqformula "3"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "jmod_axiom" (formula "1") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                 (rule "jdiv_axiom_inline" (formula "1") (term "0,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,2,0,1,0"))
                                 (rule "div_literals" (formula "1") (term "1,0,1,0"))
                                 (rule "qeq_literals" (formula "1") (term "0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1,0"))
                                 (rule "add_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "compound_addition_2" (formula "10") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
                                 (rule "variableDeclarationAssign" (formula "10") (term "1"))
                                 (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_58"))
                                 (rule "assignmentMultiplicationInt" (formula "10") (term "1"))
                                 (rule "translateJavaMulInt" (formula "10") (term "0,0,1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "polySimp_rightDist" (formula "10") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,0"))
                                 (rule "variableDeclarationAssign" (formula "10") (term "1"))
                                 (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_59"))
                                 (rule "remove_parentheses_right" (formula "10") (term "1"))
                                 (rule "assignmentModulo" (formula "10") (term "1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "translateJavaMod" (formula "10") (term "0,1,0,1"))
                                 (rule "equal_literals" (formula "10") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "assignmentAdditionInt" (formula "10") (term "1"))
                                 (rule "translateJavaAddInt" (formula "10") (term "0,0,1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "assignmentDivisionInt" (formula "10") (term "1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "translateJavaDivInt" (formula "10") (term "0,1,0,1"))
                                 (rule "equal_literals" (formula "10") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "jdiv_axiom" (formula "10") (term "0,1,0"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,0,2,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,0,2,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "8"))
                                 (rule "times_zero_1" (formula "1") (term "1,1,0,0,0"))
                                 (rule "greater_literals" (formula "1") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "leq_literals" (formula "1") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "applyEq" (formula "11") (term "0,1,0") (ifseqformula "1"))
                                 (rule "polyDiv_pullOut" (formula "11") (term "0,1,0") (inst "polyDivCoeff=mul(quotient_1, Z(0(4(#))))"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,2,0,1,0"))
                                 (rule "equal_literals" (formula "11") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,2,0,1,0"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0,0,1,0"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0,0,1,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,0,1,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,0,1,0"))
                                 (rule "div_literals" (formula "11") (term "0,0,1,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,1,0"))
                                 (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=mul(quotient_1, Z(0(4(#))))"))
                                 (rule "equal_literals" (formula "1") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
                                 (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                 (rule "div_literals" (formula "1") (term "0,1"))
                                 (rule "add_zero_left" (formula "1") (term "1"))
                                 (rule "blockEmpty" (formula "11") (term "1"))
                                 (rule "loopUnwind" (formula "11") (term "1") (inst "#outerLabel=_label23") (inst "#innerLabel=_label22"))
                                 (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x"))
                                 (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_62"))
                                 (rule "compound_inequality_comparison_1" (formula "11") (term "1") (inst "#v0=x_63"))
                                 (rule "variableDeclarationAssign" (formula "11") (term "1"))
                                 (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_63"))
                                 (rule "assignmentModulo" (formula "11") (term "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "translateJavaMod" (formula "11") (term "0,1,0,1"))
                                 (rule "equal_literals" (formula "11") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "inequality_comparison_simple" (formula "11") (term "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "ifSplit" (formula "11"))
                                 (branch "if x_62 true"
                                    (builtin "One Step Simplification" (formula "1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "jmod_axiom" (formula "11") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "11"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                    (rule "elimGcdEq" (formula "11") (inst "elimGcdRightDiv=mul(quotient_1, Z(0(2(#))))") (inst "elimGcdLeftDiv=jdiv(mul(quotient_1, Z(0(4(#)))), Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,1,0"))
                                    (rule "add_literals" (formula "11") (term "1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
                                    (rule "polySimp_mulAssoc" (formula "11") (term "1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "11") (term "0,1,0"))
                                    (rule "add_literals" (formula "11") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "11") (term "0,1,0"))
                                    (rule "qeq_literals" (formula "11") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "11") (term "0,0"))
                                    (rule "add_literals" (formula "11") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "11") (term "0,0"))
                                    (rule "leq_literals" (formula "11") (term "0"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "11") (term "0,0"))
                                    (rule "add_literals" (formula "11") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "11") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "jdiv_axiom" (formula "11") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "9"))
                                    (rule "times_zero_1" (formula "1") (term "1,1,0,0,0"))
                                    (rule "greater_literals" (formula "1") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "leq_literals" (formula "1") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "1"))
                                    (rule "polyDiv_pullOut" (formula "12") (term "0") (inst "polyDivCoeff=mul(quotient_1, Z(0(2(#))))"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,2,0"))
                                    (rule "equal_literals" (formula "12") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_homoEq" (formula "12"))
                                    (rule "polySimp_pullOutFactor0" (formula "12") (term "0,0,0,1,0"))
                                    (rule "add_literals" (formula "12") (term "1,0,0,0,1,0"))
                                    (rule "times_zero_1" (formula "12") (term "0,0,0,1,0"))
                                    (rule "div_literals" (formula "12") (term "0,0,1,0"))
                                    (rule "add_zero_left" (formula "12") (term "0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "12") (term "0"))
                                    (rule "add_literals" (formula "12") (term "1,0"))
                                    (rule "times_zero_1" (formula "12") (term "0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "closeTrue" (formula "12"))
                                 )
                                 (branch "if x_62 false"
                                    (builtin "One Step Simplification" (formula "1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "jmod_axiom" (formula "1") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=mul(quotient_1, Z(0(2(#))))") (inst "elimGcdLeftDiv=jdiv(mul(quotient_1, Z(0(4(#)))), Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "add_literals" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                                    (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0"))
                                    (rule "add_literals" (formula "1") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "0,0,0"))
                                    (rule "leq_literals" (formula "1") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,1"))
                                    (rule "add_literals" (formula "1") (term "1,0,0,1"))
                                    (rule "times_zero_1" (formula "1") (term "0,0,1"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "0,0"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "jdiv_axiom" (formula "1") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "applyEq" (formula "1") (term "1") (ifseqformula "2"))
                                    (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "10"))
                                    (rule "times_zero_1" (formula "1") (term "1,1,0,0,0"))
                                    (rule "greater_literals" (formula "1") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "leq_literals" (formula "1") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "polyDiv_pullOut" (formula "1") (term "0") (inst "polyDivCoeff=mul(quotient_1, Z(0(2(#))))"))
                                    (rule "equal_literals" (formula "1") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                                    (rule "polySimp_homoEq" (formula "1"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,1,0"))
                                    (rule "add_literals" (formula "1") (term "1,0,0,0,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "0,0,0,1,0"))
                                    (rule "div_literals" (formula "1") (term "0,0,1,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,0"))
                                    (rule "times_zero_1" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "blockEmpty" (formula "12") (term "1"))
                                    (rule "returnUnfold" (formula "12") (term "1") (inst "#v0=x"))
                                    (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                    (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_65"))
                                    (rule "assignmentMultiplicationInt" (formula "12") (term "1"))
                                    (rule "translateJavaMulInt" (formula "12") (term "0,0,1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "0,1,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,0"))
                                    (rule "methodCallReturn" (formula "12") (term "1"))
                                    (rule "assignment" (formula "12") (term "1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "methodCallEmpty" (formula "12") (term "1"))
                                    (rule "tryEmpty" (formula "12") (term "1"))
                                    (rule "emptyModality" (formula "12") (term "1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (opengoal " ")
                                 )
                              )
                              (branch "if x_56 false"
                                 (builtin "One Step Simplification" (formula "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "jmod_axiom" (formula "10") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "10") (term "0,0"))
                                 (rule "applyEq" (formula "10") (term "0,1,0,0,0") (ifseqformula "1"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,0"))
                                 (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0"))
                                 (rule "jmod_axiom" (formula "10") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0,0"))
                                 (rule "applyEqRigid" (formula "10") (term "0,1,0,0") (ifseqformula "2"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                                 (rule "add_literals" (formula "10") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "10") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "10") (term "0,0"))
                                 (rule "jmod_axiom" (formula "10") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                                 (rule "jdiv_axiom_inline" (formula "10") (term "0,1,0"))
                                 (rule "mul_literals" (formula "10") (term "0,0,2,0,1,0"))
                                 (rule "div_literals" (formula "10") (term "1,0,1,0"))
                                 (rule "qeq_literals" (formula "10") (term "0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "mul_literals" (formula "10") (term "1,0"))
                                 (rule "add_literals" (formula "10") (term "0"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "closeTrue" (formula "10"))
                              )
                           )
                           (branch "if x_50 false"
                              (builtin "One Step Simplification" (formula "1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "jmod_axiom" (formula "1") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=add(Z(0(#)), mul(quotient_1, Z(0(4(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(1(#)), mul(quotient_1, Z(0(8(#))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "add_zero_left" (formula "1") (term "1,1,1"))
                              (rule "add_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_left" (formula "1") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                              (rule "add_zero_left" (formula "1") (term "1,1,0,1,0"))
                              (rule "add_zero_left" (formula "1") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "1") (term "0,0,1"))
                              (rule "equal_literals" (formula "1") (term "0,1"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "polySimp_mulAssoc" (formula "1") (term "1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,1,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,1,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,1,0"))
                              (rule "add_literals" (formula "1") (term "0,1,0"))
                              (rule "qeq_literals" (formula "1") (term "1,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "leq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                     )
                     (branch "if x_42 false"
                        (builtin "One Step Simplification" (formula "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "jmod_axiom" (formula "1") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=add(Z(0(#)), mul(quotient_1, Z(0(4(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(1(#)), mul(quotient_1, Z(0(8(#))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "add_zero_left" (formula "1") (term "1,1,0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "1,1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,0,0"))
                        (rule "add_zero_left" (formula "1") (term "1,1,0,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                        (rule "add_zero_left" (formula "1") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0"))
                        (rule "leq_literals" (formula "1") (term "0,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
                        (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "1") (term "0,0,1"))
                        (rule "equal_literals" (formula "1") (term "0,1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "if x_36 false"
                     (builtin "One Step Simplification" (formula "1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "notLeft" (formula "1"))
                     (rule "jmod_axiom" (formula "9") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "0,0,0"))
                     (rule "mul_literals" (formula "9") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
                     (rule "applyEqRigid" (formula "9") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "9") (term "0,0,0"))
                     (rule "add_literals" (formula "9") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                     (rule "add_literals" (formula "9") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0"))
                     (rule "jmod_axiom" (formula "9") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
                     (rule "jdiv_axiom_inline" (formula "9") (term "0,1,0"))
                     (rule "mul_literals" (formula "9") (term "0,0,2,0,1,0"))
                     (rule "div_literals" (formula "9") (term "1,0,1,0"))
                     (rule "qeq_literals" (formula "9") (term "0,0,1,0"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "mul_literals" (formula "9") (term "1,0"))
                     (rule "add_literals" (formula "9") (term "0"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "closeTrue" (formula "9"))
                  )
               )
               (branch "if x_30 false"
                  (builtin "One Step Simplification" (formula "1"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "jmod_axiom" (formula "1") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                  (rule "polySimp_sepNegMonomial" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=add(Z(1(#)), mul(quotient_1, Z(0(8(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(3(#)), mul(quotient_1, Z(0(6(1(#)))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                  (rule "add_literals" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0,1"))
                  (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "equal_literals" (formula "1") (term "0,1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,1,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,1,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,1,0"))
                  (rule "add_zero_right" (formula "1") (term "0,1,0"))
                  (rule "qeq_literals" (formula "1") (term "1,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "leq_literals" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "if x_20 false"
            (builtin "One Step Simplification" (formula "1"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "jmod_axiom" (formula "1") (term "0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
            (rule "polySimp_sepNegMonomial" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=add(Z(1(#)), mul(quotient_1, Z(0(8(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(3(#)), mul(quotient_1, Z(0(6(1(#)))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "add_literals" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0"))
            (rule "leq_literals" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "qeq_literals" (formula "1") (term "0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "add_literals" (formula "1") (term "0"))
            (rule "equal_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "if x_14 false"
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "if x_8 false"
      (builtin "One Step Simplification" (formula "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "jmod_axiom" (formula "1") (term "0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
      (rule "polySimp_sepNegMonomial" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=add(Z(3(#)), mul(quotient_1, Z(0(6(1(#))))))") (inst "elimGcdLeftDiv=jdiv(add(Z(7(#)), mul(quotient_1, Z(0(2(3(#)))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "add_literals" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,1,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,1,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,1,0"))
      (rule "add_literals" (formula "1") (term "0,1,0"))
      (rule "qeq_literals" (formula "1") (term "1,0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "leq_literals" (formula "1") (term "0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "equal_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "if x_3 false"
   (builtin "One Step Simplification" (formula "1"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "notLeft" (formula "1"))
   (rule "inEqSimp_geqRight" (formula "2"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "unaryMinusInt" (formula "3") (term "1"))
   (rule "translateJavaUnaryMinusInt" (formula "3") (term "0,0,1"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "polySimp_elimNeg" (formula "3") (term "0,1,0"))
   (rule "blockEmpty" (formula "3") (term "1"))
   (rule "assignmentDivisionInt" (formula "3") (term "1"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "translateJavaDivInt" (formula "3") (term "0,1,0,1"))
   (rule "equal_literals" (formula "3") (term "0,0"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "jdiv_axiom" (formula "3") (term "0,1,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
   (rule "eqSymm" (formula "1"))
   (rule "polySimp_elimOne" (formula "1") (term "0,0,2,0"))
   (rule "inEqSimp_invertInEq1" (formula "1") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
   (rule "times_zero_2" (formula "1") (term "1,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
   (rule "inEqSimp_subsumption0" (formula "1") (term "0,0") (ifseqformula "2"))
   (rule "leq_literals" (formula "1") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "eqSymm" (formula "1"))
   (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "1"))
   (rule "div_axiom" (formula "1") (term "1") (inst "quotient=quotient_0"))
   (rule "equal_literals" (formula "1") (term "0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1,1,1,1"))
   (rule "qeq_literals" (formula "1") (term "0,1"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "polySimp_addComm1" (formula "3") (term "1"))
   (rule "add_literals" (formula "3") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "2"))
   (rule "inEqSimp_homoInEq1" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "inEqSimp_homoInEq1" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,0"))
   (rule "applyEq" (formula "7") (term "0,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "4") (term "1") (ifseqformula "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "polySimp_elimOne" (formula "3") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1"))
   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "5"))
   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
   (rule "mul_literals" (formula "3") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "add_literals" (formula "3") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "3"))
   (rule "mul_literals" (formula "3") (term "1"))
   (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(0(0(0(2(#)))))"))
   (rule "leq_literals" (formula "3") (term "0,0"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
   (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,0"))
   (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0"))
   (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
   (rule "add_literals" (formula "3") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
   (rule "add_literals" (formula "3") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "3") (term "1,0,0"))
   (rule "add_zero_right" (formula "3") (term "0,0"))
   (rule "leq_literals" (formula "3") (term "0"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "returnUnfold" (formula "8") (term "1") (inst "#v0=x_1"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_4"))
   (rule "compound_addition_1" (formula "8") (term "1") (inst "#v=x_5"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_5"))
   (rule "assignmentMultiplicationInt" (formula "8") (term "1"))
   (rule "translateJavaMulInt" (formula "8") (term "0,0,1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_mulComm0" (formula "8") (term "0,1,0"))
   (rule "assignmentAdditionInt" (formula "8") (term "1"))
   (rule "translateJavaAddInt" (formula "8") (term "0,0,1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
   (rule "methodCallReturn" (formula "8") (term "1"))
   (rule "assignment" (formula "8") (term "1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallEmpty" (formula "8") (term "1"))
   (rule "blockEmpty" (formula "8") (term "1"))
   (rule "assignment" (formula "8") (term "1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "res"))
   (rule "assignment" (formula "8") (term "1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "loopUnwind" (formula "8") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
   (rule "ifUnfold" (formula "8") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_10"))
   (rule "compound_inequality_comparison_1" (formula "8") (term "1") (inst "#v0=x_11"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_11"))
   (rule "assignmentModulo" (formula "8") (term "1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "translateJavaMod" (formula "8") (term "0,1,0,1"))
   (rule "equal_literals" (formula "8") (term "0,0"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "inequality_comparison_simple" (formula "8") (term "1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "ifSplit" (formula "8"))
   (branch "if x_10 true"
      (builtin "One Step Simplification" (formula "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "notLeft" (formula "1"))
      (rule "jmod_axiom" (formula "8") (term "0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
      (rule "polySimp_sepNegMonomial" (formula "8"))
      (rule "polySimp_mulLiterals" (formula "8") (term "0"))
      (rule "elimGcdEq" (formula "8") (inst "elimGcdRightDiv=add(Z(3(#)), mul(quotient_0, Z(0(6(1(#))))))") (inst "elimGcdLeftDiv=jdiv(add(Z(7(#)), mul(quotient_0, Z(0(2(3(#)))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "mul_literals" (formula "8") (term "0,1,0,1,0"))
      (rule "add_literals" (formula "8") (term "1,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,1,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,1,0"))
      (rule "polySimp_addComm1" (formula "8") (term "0,0,1,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,1,0"))
      (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,1,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,1,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,1,0"))
      (rule "add_zero_right" (formula "8") (term "0,1,0"))
      (rule "qeq_literals" (formula "8") (term "1,0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,1"))
      (rule "polySimp_addComm1" (formula "8") (term "0,0,0,1"))
      (rule "add_literals" (formula "8") (term "0,0,0,0,1"))
      (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0,1"))
      (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
      (rule "add_literals" (formula "8") (term "0,0,1"))
      (rule "equal_literals" (formula "8") (term "0,1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
      (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0"))
      (rule "leq_literals" (formula "8") (term "0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "false_right" (formula "8"))
      (rule "ifElseUnfold" (formula "8") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_12"))
      (rule "compound_equality_comparison_1" (formula "8") (term "1") (inst "#v0=x_13"))
      (rule "variableDeclarationAssign" (formula "8") (term "1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_13"))
      (rule "assignmentModulo" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "translateJavaMod" (formula "8") (term "0,1,0,1"))
      (rule "equal_literals" (formula "8") (term "0,0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "jmod_axiom" (formula "8") (term "0,1,0"))
      (rule "add_zero_left" (formula "8") (term "0,1,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0"))
      (rule "jdiv_axiom_inline" (formula "8") (term "0,0,1,0"))
      (rule "div_literals" (formula "8") (term "1,0,0,1,0"))
      (rule "qeq_literals" (formula "8") (term "0,0,0,1,0"))
      (rule "times_zero_2" (formula "8") (term "0,0,2,0,0,1,0"))
      (rule "div_literals" (formula "8") (term "0,2,0,0,1,0"))
      (rule "times_zero_2" (formula "8") (term "2,0,0,1,0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "mul_literals" (formula "8") (term "0,1,0"))
      (rule "equality_comparison_simple" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "ifElseSplit" (formula "8"))
      (branch "if x_12 true"
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "compound_addition_2" (formula "8") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
         (rule "variableDeclarationAssign" (formula "8") (term "1"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_18"))
         (rule "assignmentMultiplicationInt" (formula "8") (term "1"))
         (rule "translateJavaMulInt" (formula "8") (term "0,0,1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "mul_literals" (formula "8") (term "0,1,0"))
         (rule "variableDeclarationAssign" (formula "8") (term "1"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_19"))
         (rule "remove_parentheses_right" (formula "8") (term "1"))
         (rule "assignmentModulo" (formula "8") (term "1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "translateJavaMod" (formula "8") (term "0,1,0,1"))
         (rule "equal_literals" (formula "8") (term "0,0"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "assignmentAdditionInt" (formula "8") (term "1"))
         (rule "translateJavaAddInt" (formula "8") (term "0,0,1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "add_zero_left" (formula "8") (term "0,1,0"))
         (rule "assignmentDivisionInt" (formula "8") (term "1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "translateJavaDivInt" (formula "8") (term "0,1,0,1"))
         (rule "equal_literals" (formula "8") (term "0,0"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "jdiv_axiom" (formula "8") (term "0,1,0"))
         (rule "eqSymm" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,0,2,0"))
         (rule "mul_literals" (formula "1") (term "0,0,0,2,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "4"))
         (rule "greater_literals" (formula "1") (term "0,0,0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
         (rule "leq_literals" (formula "1") (term "0,0,0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "eqSymm" (formula "1"))
         (rule "applyEq" (formula "9") (term "0,1,0") (ifseqformula "1"))
         (rule "polyDiv_pullOut" (formula "9") (term "0,1,0") (inst "polyDivCoeff=mul(quotient_0, Z(0(6(1(#)))))"))
         (rule "equal_literals" (formula "9") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,2,0,1,0"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,1,0"))
         (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0,0,1,0"))
         (rule "add_literals" (formula "9") (term "1,1,0,0,0,1,0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,0,1,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,0,1,0"))
         (rule "div_literals" (formula "9") (term "0,0,1,0"))
         (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=mul(quotient_0, Z(0(6(1(#)))))"))
         (rule "equal_literals" (formula "1") (term "0,1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
         (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
         (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,1"))
         (rule "div_literals" (formula "1") (term "0,1"))
         (rule "blockEmpty" (formula "9") (term "1"))
         (rule "loopUnwind" (formula "9") (term "1") (inst "#outerLabel=_label5") (inst "#innerLabel=_label4"))
         (rule "ifUnfold" (formula "9") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_22"))
         (rule "compound_inequality_comparison_1" (formula "9") (term "1") (inst "#v0=x_23"))
         (rule "variableDeclarationAssign" (formula "9") (term "1"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_23"))
         (rule "assignmentModulo" (formula "9") (term "1"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "translateJavaMod" (formula "9") (term "0,1,0,1"))
         (rule "equal_literals" (formula "9") (term "0,0"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "inequality_comparison_simple" (formula "9") (term "1"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "ifSplit" (formula "9"))
         (branch "if x_22 true"
            (builtin "One Step Simplification" (formula "1"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "notLeft" (formula "1"))
            (rule "jmod_axiom" (formula "9") (term "0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
            (rule "polySimp_sepNegMonomial" (formula "9"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0"))
            (rule "elimGcdEq" (formula "9") (inst "elimGcdRightDiv=add(Z(1(#)), mul(quotient_0, Z(0(8(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(3(#)), mul(quotient_0, Z(0(6(1(#)))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "mul_literals" (formula "9") (term "0,1,0,1,0"))
            (rule "add_literals" (formula "9") (term "1,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,1,0"))
            (rule "polySimp_addComm1" (formula "9") (term "0,0,1,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,1,0"))
            (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,1,0"))
            (rule "add_literals" (formula "9") (term "1,1,0,1,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "9") (term "0,1,0"))
            (rule "qeq_literals" (formula "9") (term "1,0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
            (rule "polySimp_addComm1" (formula "9") (term "0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
            (rule "add_literals" (formula "9") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0"))
            (rule "leq_literals" (formula "9") (term "0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
            (rule "polySimp_addComm1" (formula "9") (term "0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
            (rule "add_literals" (formula "9") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0"))
            (rule "equal_literals" (formula "9") (term "0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "false_right" (formula "9"))
            (rule "ifElseUnfold" (formula "9") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_24"))
            (rule "compound_equality_comparison_1" (formula "9") (term "1") (inst "#v0=x_25"))
            (rule "variableDeclarationAssign" (formula "9") (term "1"))
            (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_25"))
            (rule "assignmentModulo" (formula "9") (term "1"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "translateJavaMod" (formula "9") (term "0,1,0,1"))
            (rule "equal_literals" (formula "9") (term "0,0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "equality_comparison_simple" (formula "9") (term "1"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "ifElseSplit" (formula "9"))
            (branch "if x_24 true"
               (builtin "One Step Simplification" (formula "1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "jmod_axiom" (formula "1") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
               (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "2"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "jmod_axiom" (formula "1") (term "0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
               (rule "jdiv_axiom_inline" (formula "1") (term "0,1,0"))
               (rule "mul_literals" (formula "1") (term "0,0,2,0,1,0"))
               (rule "div_literals" (formula "1") (term "1,0,1,0"))
               (rule "qeq_literals" (formula "1") (term "0,0,1,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "times_zero_2" (formula "1") (term "1,0"))
               (rule "add_literals" (formula "1") (term "0"))
               (rule "equal_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_24 false"
               (builtin "One Step Simplification" (formula "1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "notLeft" (formula "1"))
               (rule "jmod_axiom" (formula "9") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
               (rule "applyEq" (formula "9") (term "0,1,0,0") (ifseqformula "1"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
               (rule "polySimp_addComm1" (formula "9") (term "0,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
               (rule "add_literals" (formula "9") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "9") (term "1,0,0"))
               (rule "add_zero_right" (formula "9") (term "0,0"))
               (rule "jmod_axiom" (formula "9") (term "0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
               (rule "jdiv_axiom_inline" (formula "9") (term "0,1,0"))
               (rule "qeq_literals" (formula "9") (term "0,0,1,0"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "div_literals" (formula "9") (term "0,1,0"))
               (rule "times_zero_2" (formula "9") (term "1,0"))
               (rule "add_zero_right" (formula "9") (term "0"))
               (rule "equal_literals" (formula "9"))
               (rule "false_right" (formula "9"))
               (rule "assignmentMultiplicationInt" (formula "9") (term "1"))
               (rule "translateJavaMulInt" (formula "9") (term "0,0,1"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
               (rule "blockEmpty" (formula "9") (term "1"))
               (rule "loopUnwind" (formula "9") (term "1") (inst "#outerLabel=_label9") (inst "#innerLabel=_label8"))
               (rule "ifUnfold" (formula "9") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_28"))
               (rule "compound_inequality_comparison_1" (formula "9") (term "1") (inst "#v0=x_29"))
               (rule "variableDeclarationAssign" (formula "9") (term "1"))
               (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_29"))
               (rule "assignmentModulo" (formula "9") (term "1"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "translateJavaMod" (formula "9") (term "0,1,0,1"))
               (rule "equal_literals" (formula "9") (term "0,0"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "inequality_comparison_simple" (formula "9") (term "1"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "ifSplit" (formula "9"))
               (branch "if x_28 true"
                  (builtin "One Step Simplification" (formula "1"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "notLeft" (formula "1"))
                  (rule "jmod_axiom" (formula "9") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
                  (rule "polySimp_sepNegMonomial" (formula "9"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                  (rule "elimGcdEq" (formula "9") (inst "elimGcdRightDiv=add(Z(1(#)), mul(quotient_0, Z(0(8(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(3(#)), mul(quotient_0, Z(0(6(1(#)))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,1,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
                  (rule "add_literals" (formula "9") (term "1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,1,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,1,0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0,0,1,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,1,0"))
                  (rule "add_literals" (formula "9") (term "1,1,0,1,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,1,0"))
                  (rule "add_zero_right" (formula "9") (term "0,1,0"))
                  (rule "qeq_literals" (formula "9") (term "1,0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                  (rule "add_literals" (formula "9") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0"))
                  (rule "leq_literals" (formula "9") (term "0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                  (rule "add_literals" (formula "9") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0"))
                  (rule "equal_literals" (formula "9") (term "0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "false_right" (formula "9"))
                  (rule "ifElseUnfold" (formula "9") (term "1") (inst "#boolv=x"))
                  (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_32"))
                  (rule "compound_equality_comparison_1" (formula "9") (term "1") (inst "#v0=x_33"))
                  (rule "variableDeclarationAssign" (formula "9") (term "1"))
                  (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_33"))
                  (rule "assignmentModulo" (formula "9") (term "1"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "translateJavaMod" (formula "9") (term "0,1,0,1"))
                  (rule "equal_literals" (formula "9") (term "0,0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "equality_comparison_simple" (formula "9") (term "1"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "ifElseSplit" (formula "9"))
                  (branch "if x_32 true"
                     (builtin "One Step Simplification" (formula "1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "jmod_axiom" (formula "1") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,0,0"))
                     (rule "applyEqRigid" (formula "1") (term "0,1,0,0") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "jmod_axiom" (formula "1") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                     (rule "jdiv_axiom_inline" (formula "1") (term "0,1,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,2,0,1,0"))
                     (rule "div_literals" (formula "1") (term "1,0,1,0"))
                     (rule "qeq_literals" (formula "1") (term "0,0,1,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1,0"))
                     (rule "add_literals" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "compound_addition_2" (formula "9") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
                     (rule "variableDeclarationAssign" (formula "9") (term "1"))
                     (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_34"))
                     (rule "assignmentMultiplicationInt" (formula "9") (term "1"))
                     (rule "translateJavaMulInt" (formula "9") (term "0,0,1"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0"))
                     (rule "variableDeclarationAssign" (formula "9") (term "1"))
                     (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_35"))
                     (rule "remove_parentheses_right" (formula "9") (term "1"))
                     (rule "assignmentModulo" (formula "9") (term "1"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "translateJavaMod" (formula "9") (term "0,1,0,1"))
                     (rule "equal_literals" (formula "9") (term "0,0"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "assignmentAdditionInt" (formula "9") (term "1"))
                     (rule "translateJavaAddInt" (formula "9") (term "0,0,1"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "assignmentDivisionInt" (formula "9") (term "1"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "translateJavaDivInt" (formula "9") (term "0,1,0,1"))
                     (rule "equal_literals" (formula "9") (term "0,0"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "jdiv_axiom" (formula "9") (term "0,1,0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0,2,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,0,2,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "5"))
                     (rule "greater_literals" (formula "1") (term "0,0,0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                     (rule "leq_literals" (formula "1") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEqRigid" (formula "10") (term "0,1,0") (ifseqformula "1"))
                     (rule "polyDiv_pullOut" (formula "10") (term "0,1,0") (inst "polyDivCoeff=mul(quotient_0, Z(0(8(#))))"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,2,0,1,0"))
                     (rule "equal_literals" (formula "10") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,2,0,1,0"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,0,1,0"))
                     (rule "add_literals" (formula "10") (term "1,1,0,0,0,1,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0,0,1,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0,0,1,0"))
                     (rule "div_literals" (formula "10") (term "0,0,1,0"))
                     (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=mul(quotient_0, Z(0(8(#))))"))
                     (rule "equal_literals" (formula "1") (term "0,1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
                     (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "div_literals" (formula "1") (term "0,1"))
                     (rule "blockEmpty" (formula "10") (term "1"))
                     (rule "loopUnwind" (formula "10") (term "1") (inst "#outerLabel=_label13") (inst "#innerLabel=_label12"))
                     (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_40"))
                     (rule "compound_inequality_comparison_1" (formula "10") (term "1") (inst "#v0=x_41"))
                     (rule "variableDeclarationAssign" (formula "10") (term "1"))
                     (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_41"))
                     (rule "assignmentModulo" (formula "10") (term "1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "translateJavaMod" (formula "10") (term "0,1,0,1"))
                     (rule "equal_literals" (formula "10") (term "0,0"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "inequality_comparison_simple" (formula "10") (term "1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "ifSplit" (formula "10"))
                     (branch "if x_40 true"
                        (builtin "One Step Simplification" (formula "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "notLeft" (formula "1"))
                        (rule "jmod_axiom" (formula "10") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "elimGcdEq" (formula "10") (inst "elimGcdRightDiv=add(Z(0(#)), mul(quotient_0, Z(0(4(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(1(#)), mul(quotient_0, Z(0(8(#))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "add_zero_left" (formula "10") (term "1,1,0,0,1"))
                        (rule "add_zero_left" (formula "10") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
                        (rule "add_zero_left" (formula "10") (term "1,1,0,1,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                        (rule "add_literals" (formula "10") (term "1,0,0"))
                        (rule "add_zero_left" (formula "10") (term "1,1,1"))
                        (rule "polySimp_mulAssoc" (formula "10") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,1"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,1"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                        (rule "add_literals" (formula "10") (term "0,0,1"))
                        (rule "equal_literals" (formula "10") (term "0,1"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "polySimp_mulAssoc" (formula "10") (term "1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,1,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,1,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "10") (term "0,1,0"))
                        (rule "qeq_literals" (formula "10") (term "1,0"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "polySimp_mulAssoc" (formula "10") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0"))
                        (rule "leq_literals" (formula "10") (term "0"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "false_right" (formula "10"))
                        (rule "ifElseUnfold" (formula "10") (term "1") (inst "#boolv=x"))
                        (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_44"))
                        (rule "compound_equality_comparison_1" (formula "10") (term "1") (inst "#v0=x_45"))
                        (rule "variableDeclarationAssign" (formula "10") (term "1"))
                        (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_45"))
                        (rule "assignmentModulo" (formula "10") (term "1"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "translateJavaMod" (formula "10") (term "0,1,0,1"))
                        (rule "equal_literals" (formula "10") (term "0,0"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "equality_comparison_simple" (formula "10") (term "1"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "ifElseSplit" (formula "10"))
                        (branch "if x_44 true"
                           (builtin "One Step Simplification" (formula "1"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "jmod_axiom" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                           (rule "applyEqRigid" (formula "1") (term "0,1,0,0,0") (ifseqformula "2"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0"))
                           (rule "jmod_axiom" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "applyEqRigid" (formula "1") (term "0,1,0,0") (ifseqformula "3"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "jmod_axiom" (formula "1") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                           (rule "jdiv_axiom_inline" (formula "1") (term "0,1,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,2,0,1,0"))
                           (rule "div_literals" (formula "1") (term "1,0,1,0"))
                           (rule "qeq_literals" (formula "1") (term "0,0,1,0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "equal_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if x_44 false"
                           (builtin "One Step Simplification" (formula "1"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "notLeft" (formula "1"))
                           (rule "jmod_axiom" (formula "10") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "0,0,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0"))
                           (rule "applyEqRigid" (formula "10") (term "0,1,0,0,0") (ifseqformula "2"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,0"))
                           (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0,0"))
                           (rule "jmod_axiom" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,0"))
                           (rule "applyEqRigid" (formula "10") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                           (rule "add_literals" (formula "10") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0"))
                           (rule "jmod_axiom" (formula "10") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                           (rule "jdiv_axiom_inline" (formula "10") (term "0,1,0"))
                           (rule "qeq_literals" (formula "10") (term "0,0,1,0"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "div_literals" (formula "10") (term "0,1,0"))
                           (rule "mul_literals" (formula "10") (term "1,0"))
                           (rule "add_literals" (formula "10") (term "0"))
                           (rule "equal_literals" (formula "10"))
                           (rule "false_right" (formula "10"))
                           (rule "assignmentMultiplicationInt" (formula "10") (term "1"))
                           (rule "translateJavaMulInt" (formula "10") (term "0,0,1"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "polySimp_rightDist" (formula "10") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,0"))
                           (rule "blockEmpty" (formula "10") (term "1"))
                           (rule "loopUnwind" (formula "10") (term "1") (inst "#outerLabel=_label17") (inst "#innerLabel=_label16"))
                           (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=x"))
                           (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_48"))
                           (rule "compound_inequality_comparison_1" (formula "10") (term "1") (inst "#v0=x_49"))
                           (rule "variableDeclarationAssign" (formula "10") (term "1"))
                           (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_49"))
                           (rule "assignmentModulo" (formula "10") (term "1"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "translateJavaMod" (formula "10") (term "0,1,0,1"))
                           (rule "equal_literals" (formula "10") (term "0,0"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "inequality_comparison_simple" (formula "10") (term "1"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "ifSplit" (formula "10"))
                           (branch "if x_48 true"
                              (builtin "One Step Simplification" (formula "1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "notLeft" (formula "1"))
                              (rule "jmod_axiom" (formula "10") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "10"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                              (rule "elimGcdEq" (formula "10") (inst "elimGcdRightDiv=add(Z(0(#)), mul(quotient_0, Z(0(4(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(1(#)), mul(quotient_0, Z(0(8(#))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "add_zero_left" (formula "10") (term "1,1,1"))
                              (rule "add_zero_left" (formula "10") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
                              (rule "add_zero_left" (formula "10") (term "1,1,0,1,0"))
                              (rule "add_literals" (formula "10") (term "1,0,0"))
                              (rule "add_zero_left" (formula "10") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                              (rule "polySimp_mulAssoc" (formula "10") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "equal_literals" (formula "10") (term "0,1"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "polySimp_mulAssoc" (formula "10") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,0"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "10") (term "0,0,0"))
                              (rule "leq_literals" (formula "10") (term "0,0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "polySimp_mulAssoc" (formula "10") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0"))
                              (rule "add_literals" (formula "10") (term "0,0"))
                              (rule "qeq_literals" (formula "10") (term "0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "false_right" (formula "10"))
                              (rule "ifElseUnfold" (formula "10") (term "1") (inst "#boolv=x"))
                              (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_52"))
                              (rule "compound_equality_comparison_1" (formula "10") (term "1") (inst "#v0=x_53"))
                              (rule "variableDeclarationAssign" (formula "10") (term "1"))
                              (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_53"))
                              (rule "assignmentModulo" (formula "10") (term "1"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "translateJavaMod" (formula "10") (term "0,1,0,1"))
                              (rule "equal_literals" (formula "10") (term "0,0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "equality_comparison_simple" (formula "10") (term "1"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "ifElseSplit" (formula "10"))
                              (branch "if x_52 true"
                                 (builtin "One Step Simplification" (formula "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "jmod_axiom" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                 (rule "applyEqRigid" (formula "1") (term "0,1,0,0,0") (ifseqformula "2"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                 (rule "jmod_axiom" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                 (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "3"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "jmod_axiom" (formula "1") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                 (rule "jdiv_axiom_inline" (formula "1") (term "0,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,2,0,1,0"))
                                 (rule "div_literals" (formula "1") (term "1,0,1,0"))
                                 (rule "qeq_literals" (formula "1") (term "0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1,0"))
                                 (rule "add_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "compound_addition_2" (formula "10") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
                                 (rule "variableDeclarationAssign" (formula "10") (term "1"))
                                 (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_54"))
                                 (rule "assignmentMultiplicationInt" (formula "10") (term "1"))
                                 (rule "translateJavaMulInt" (formula "10") (term "0,0,1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "polySimp_rightDist" (formula "10") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,0"))
                                 (rule "variableDeclarationAssign" (formula "10") (term "1"))
                                 (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_55"))
                                 (rule "remove_parentheses_right" (formula "10") (term "1"))
                                 (rule "assignmentModulo" (formula "10") (term "1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "translateJavaMod" (formula "10") (term "0,1,0,1"))
                                 (rule "equal_literals" (formula "10") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "assignmentAdditionInt" (formula "10") (term "1"))
                                 (rule "translateJavaAddInt" (formula "10") (term "0,0,1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "assignmentDivisionInt" (formula "10") (term "1"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "translateJavaDivInt" (formula "10") (term "0,1,0,1"))
                                 (rule "equal_literals" (formula "10") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "jdiv_axiom" (formula "10") (term "0,1,0"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0,2,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,0,2,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,0,2,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "6"))
                                 (rule "greater_literals" (formula "1") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "applyEqRigid" (formula "11") (term "0,1,0") (ifseqformula "1"))
                                 (rule "polyDiv_pullOut" (formula "11") (term "0,1,0") (inst "polyDivCoeff=mul(quotient_0, Z(0(4(#))))"))
                                 (rule "equal_literals" (formula "11") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,2,0,1,0"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0,0,1,0"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0,0,1,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,0,1,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,0,1,0"))
                                 (rule "div_literals" (formula "11") (term "0,0,1,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,1,0"))
                                 (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=mul(quotient_0, Z(0(4(#))))"))
                                 (rule "equal_literals" (formula "1") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
                                 (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                 (rule "div_literals" (formula "1") (term "0,1"))
                                 (rule "add_zero_left" (formula "1") (term "1"))
                                 (rule "blockEmpty" (formula "11") (term "1"))
                                 (rule "loopUnwind" (formula "11") (term "1") (inst "#outerLabel=_label21") (inst "#innerLabel=_label20"))
                                 (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x"))
                                 (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_60"))
                                 (rule "compound_inequality_comparison_1" (formula "11") (term "1") (inst "#v0=x_61"))
                                 (rule "variableDeclarationAssign" (formula "11") (term "1"))
                                 (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_61"))
                                 (rule "assignmentModulo" (formula "11") (term "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "translateJavaMod" (formula "11") (term "0,1,0,1"))
                                 (rule "equal_literals" (formula "11") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "inequality_comparison_simple" (formula "11") (term "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "ifSplit" (formula "11"))
                                 (branch "if x_60 true"
                                    (builtin "One Step Simplification" (formula "1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "jmod_axiom" (formula "11") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "11"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                    (rule "elimGcdEq" (formula "11") (inst "elimGcdRightDiv=mul(quotient_0, Z(0(2(#))))") (inst "elimGcdLeftDiv=jdiv(mul(quotient_0, Z(0(4(#)))), Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,1,0"))
                                    (rule "add_literals" (formula "11") (term "1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
                                    (rule "polySimp_mulAssoc" (formula "11") (term "1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "11") (term "0,1,0"))
                                    (rule "add_literals" (formula "11") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "11") (term "0,1,0"))
                                    (rule "qeq_literals" (formula "11") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "11") (term "0,0"))
                                    (rule "add_literals" (formula "11") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "11") (term "0,0"))
                                    (rule "leq_literals" (formula "11") (term "0"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "polySimp_mulAssoc" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "11") (term "0,0"))
                                    (rule "add_literals" (formula "11") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "11") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "jdiv_axiom" (formula "11") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "7"))
                                    (rule "greater_literals" (formula "1") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                    (rule "leq_literals" (formula "1") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "applyEq" (formula "12") (term "0") (ifseqformula "1"))
                                    (rule "polyDiv_pullOut" (formula "12") (term "0") (inst "polyDivCoeff=mul(quotient_0, Z(0(2(#))))"))
                                    (rule "equal_literals" (formula "12") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "12") (term "0,0,0"))
                                    (rule "add_literals" (formula "12") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "12") (term "0,0,0"))
                                    (rule "div_literals" (formula "12") (term "0,0"))
                                    (rule "add_zero_left" (formula "12") (term "0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "closeTrue" (formula "12"))
                                 )
                                 (branch "if x_60 false"
                                    (builtin "One Step Simplification" (formula "1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "jmod_axiom" (formula "1") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=mul(quotient_0, Z(0(2(#))))") (inst "elimGcdLeftDiv=jdiv(mul(quotient_0, Z(0(4(#)))), Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "add_literals" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                                    (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0"))
                                    (rule "add_literals" (formula "1") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "0,0,0"))
                                    (rule "leq_literals" (formula "1") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "0,0"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "polySimp_mulAssoc" (formula "1") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,0"))
                                    (rule "times_zero_1" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "jdiv_axiom" (formula "1") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "2"))
                                    (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "8"))
                                    (rule "greater_literals" (formula "1") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                    (rule "leq_literals" (formula "1") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "polyDiv_pullOut" (formula "1") (term "0") (inst "polyDivCoeff=mul(quotient_0, Z(0(2(#))))"))
                                    (rule "equal_literals" (formula "1") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                                    (rule "polySimp_homoEq" (formula "1"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,1,0"))
                                    (rule "add_literals" (formula "1") (term "1,0,0,0,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "0,0,0,1,0"))
                                    (rule "div_literals" (formula "1") (term "0,0,1,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,0"))
                                    (rule "times_zero_1" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "blockEmpty" (formula "12") (term "1"))
                                    (rule "returnUnfold" (formula "12") (term "1") (inst "#v0=x"))
                                    (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                    (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_64"))
                                    (rule "assignmentMultiplicationInt" (formula "12") (term "1"))
                                    (rule "translateJavaMulInt" (formula "12") (term "0,0,1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "0,1,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,0"))
                                    (rule "methodCallReturn" (formula "12") (term "1"))
                                    (rule "assignment" (formula "12") (term "1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "methodCallEmpty" (formula "12") (term "1"))
                                    (rule "tryEmpty" (formula "12") (term "1"))
                                    (rule "emptyModality" (formula "12") (term "1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (opengoal " ")
                                 )
                              )
                              (branch "if x_52 false"
                                 (builtin "One Step Simplification" (formula "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "jmod_axiom" (formula "10") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,0,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "10") (term "0,0"))
                                 (rule "applyEq" (formula "10") (term "0,1,0,0,0") (ifseqformula "1"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,0"))
                                 (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0"))
                                 (rule "jmod_axiom" (formula "10") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0,0"))
                                 (rule "applyEq" (formula "10") (term "0,1,0,0") (ifseqformula "2"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                                 (rule "add_literals" (formula "10") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "10") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "10") (term "0,0"))
                                 (rule "jmod_axiom" (formula "10") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                                 (rule "jdiv_axiom_inline" (formula "10") (term "0,1,0"))
                                 (rule "qeq_literals" (formula "10") (term "0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "div_literals" (formula "10") (term "0,1,0"))
                                 (rule "mul_literals" (formula "10") (term "1,0"))
                                 (rule "add_literals" (formula "10") (term "0"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "closeTrue" (formula "10"))
                              )
                           )
                           (branch "if x_48 false"
                              (builtin "One Step Simplification" (formula "1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "jmod_axiom" (formula "1") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=add(Z(0(#)), mul(quotient_0, Z(0(4(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(1(#)), mul(quotient_0, Z(0(8(#))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "add_zero_left" (formula "1") (term "1,1,0,1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                              (rule "add_zero_left" (formula "1") (term "1,1,1"))
                              (rule "add_zero_left" (formula "1") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                              (rule "add_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_left" (formula "1") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                              (rule "polySimp_mulAssoc" (formula "1") (term "1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,1,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,1,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "1") (term "0,1,0"))
                              (rule "qeq_literals" (formula "1") (term "1,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "leq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "polySimp_mulAssoc" (formula "1") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,1,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0"))
                              (rule "add_literals" (formula "1") (term "0"))
                              (rule "equal_literals" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                     )
                     (branch "if x_40 false"
                        (builtin "One Step Simplification" (formula "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "jmod_axiom" (formula "1") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=add(Z(0(#)), mul(quotient_0, Z(0(4(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(1(#)), mul(quotient_0, Z(0(8(#))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "add_literals" (formula "1") (term "1,0,0"))
                        (rule "add_zero_left" (formula "1") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "1,1,0,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                        (rule "add_zero_left" (formula "1") (term "1,1,1"))
                        (rule "add_zero_left" (formula "1") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0"))
                        (rule "leq_literals" (formula "1") (term "0,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_mulAssoc" (formula "1") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_literals" (formula "1") (term "0"))
                        (rule "equal_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "if x_32 false"
                     (builtin "One Step Simplification" (formula "1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "notLeft" (formula "1"))
                     (rule "jmod_axiom" (formula "9") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "9") (term "0,0,0,0"))
                     (rule "applyEqRigid" (formula "9") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "9") (term "0,0,0"))
                     (rule "add_literals" (formula "9") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                     (rule "add_literals" (formula "9") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0"))
                     (rule "add_literals" (formula "9") (term "0,0"))
                     (rule "jmod_axiom" (formula "9") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
                     (rule "jdiv_axiom_inline" (formula "9") (term "0,1,0"))
                     (rule "qeq_literals" (formula "9") (term "0,0,1,0"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "div_literals" (formula "9") (term "0,1,0"))
                     (rule "mul_literals" (formula "9") (term "1,0"))
                     (rule "add_literals" (formula "9") (term "0"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "closeTrue" (formula "9"))
                  )
               )
               (branch "if x_28 false"
                  (builtin "One Step Simplification" (formula "1"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "jmod_axiom" (formula "1") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                  (rule "polySimp_sepNegMonomial" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=add(Z(1(#)), mul(quotient_0, Z(0(8(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(3(#)), mul(quotient_0, Z(0(6(1(#)))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                  (rule "add_literals" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,1,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,1,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,1,0"))
                  (rule "add_zero_right" (formula "1") (term "0,1,0"))
                  (rule "qeq_literals" (formula "1") (term "1,0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "leq_literals" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_literals" (formula "1") (term "0"))
                  (rule "equal_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "if x_22 false"
            (builtin "One Step Simplification" (formula "1"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "jmod_axiom" (formula "1") (term "0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
            (rule "polySimp_sepNegMonomial" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=add(Z(1(#)), mul(quotient_0, Z(0(8(#)))))") (inst "elimGcdLeftDiv=jdiv(add(Z(3(#)), mul(quotient_0, Z(0(6(1(#)))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "add_literals" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,1"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,1"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "equal_literals" (formula "1") (term "0,1"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0"))
            (rule "leq_literals" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "qeq_literals" (formula "1") (term "0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "if x_12 false"
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "if x_10 false"
      (builtin "One Step Simplification" (formula "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "jmod_axiom" (formula "1") (term "0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
      (rule "polySimp_sepNegMonomial" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "elimGcdEq" (formula "1") (inst "elimGcdRightDiv=add(Z(3(#)), mul(quotient_0, Z(0(6(1(#))))))") (inst "elimGcdLeftDiv=jdiv(add(Z(7(#)), mul(quotient_0, Z(0(2(3(#)))))),
     Z(2(#)))") (inst "elimGcd=Z(2(#))"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "add_literals" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
      (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,0"))
      (rule "leq_literals" (formula "1") (term "0,0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_literals" (formula "1") (term "0"))
      (rule "equal_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
)

}
