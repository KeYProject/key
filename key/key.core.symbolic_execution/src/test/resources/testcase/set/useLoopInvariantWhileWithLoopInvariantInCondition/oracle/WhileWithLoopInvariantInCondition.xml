<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call WhileWithLoopInvariantInCondition.size(array)&gt;" pathCondition="true" pathConditionChanged="false">
      <statement name="int result = 0;" pathCondition="true" pathConditionChanged="false">
         <callStackEntry path="/0"/>
         <statement name="int i = 0;" pathCondition="true" pathConditionChanged="false">
            <callStackEntry path="/0"/>
            <loopInvariant name="invariant: ((i &gt;= 0 &amp; i &lt;= array.length)&lt;&lt;SC&gt;&gt; &amp; result_1 = i)&lt;&lt;SC&gt;&gt;;
variant: javaSubInt(array.length, i)
mod: false" pathCondition="true" pathConditionChanged="false" initiallyValid="true">
               <callStackEntry path="/0"/>
               <branchCondition name="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithLoopInvariantInCondition): {
    b=goOnNice(array,i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result_1,i)))))" pathCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithLoopInvariantInCondition): {
    b=goOnNice(array,i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result_1,i)))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithLoopInvariantInCondition): {
    b=goOnNice(array,i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result_1,i)))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Body Preserves Invariant">
                  <callStackEntry path="/0"/>
                  <branchCondition name="equals(i_1_0,Z(neglit(1(#))))" pathCondition="not(or(not(equals(i_1_0,Z(neglit(1(#))))),not(imp(equals(i_1_0,Z(neglit(1(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithLoopInvariantInCondition): {
    b=goOnNice(array,i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result_1,i)))))))))" pathConditionChanged="true" branchCondition="equals(i_1_0,Z(neglit(1(#))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
                     <loopCondition name="goOnNice(array,i);" pathCondition="not(or(not(equals(i_1_0,Z(neglit(1(#))))),not(imp(equals(i_1_0,Z(neglit(1(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithLoopInvariantInCondition): {
    b=goOnNice(array,i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result_1,i)))))))))" pathConditionChanged="false" blockOpened="false">
                        <callStackEntry path="/0"/>
                        <methodCall name="&lt;call WhileWithLoopInvariantInCondition.goOnNice(array_2,i_2)&gt;" pathCondition="not(or(not(equals(i_1_0,Z(neglit(1(#))))),not(imp(equals(i_1_0,Z(neglit(1(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithLoopInvariantInCondition): {
    b=goOnNice(array,i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result_1,i)))))))))" pathConditionChanged="false">
                           <callStackEntry path="/0"/>
                           <loopInvariant name="invariant: i_2 = -1;
variant: i_2
mod: false" pathCondition="not(or(not(equals(i_1_0,Z(neglit(1(#))))),not(imp(equals(i_1_0,Z(neglit(1(#)))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithLoopInvariantInCondition): {
    b=goOnNice(array,i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result_1,i)))))))))" pathConditionChanged="false" initiallyValid="false">
                              <callStackEntry path="/0/0/0/0/0/0/0/0"/>
                              <callStackEntry path="/0"/>
                              <branchCondition name="equals(i_2_0,Z(neglit(1(#))))" pathCondition="not(or(or(not(equals(i_1_0,Z(neglit(1(#))))),not(imp(equals(i_1_0,Z(neglit(1(#)))),equals(i_2_0,Z(neglit(1(#))))))),not(imp(and(equals(i_2_0,Z(neglit(1(#)))),equals(i_1_0,Z(neglit(1(#))))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithLoopInvariantInCondition): {
    b=goOnNice(array,i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result_1,i)))))))))" pathConditionChanged="true" branchCondition="equals(i_2_0,Z(neglit(1(#))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
                                 <callStackEntry path="/0/0/0/0/0/0/0/0"/>
                                 <callStackEntry path="/0"/>
                                 <statement name="return true;" pathCondition="not(or(or(not(equals(i_1_0,Z(neglit(1(#))))),not(imp(equals(i_1_0,Z(neglit(1(#)))),equals(i_2_0,Z(neglit(1(#))))))),not(imp(and(equals(i_2_0,Z(neglit(1(#)))),equals(i_1_0,Z(neglit(1(#))))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithLoopInvariantInCondition): {
    b=goOnNice(array,i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result_1,i)))))))))" pathConditionChanged="false">
                                    <callStackEntry path="/0/0/0/0/0/0/0/0"/>
                                    <callStackEntry path="/0"/>
                                    <methodReturn name="&lt;return of goOnNice&gt;" signature="&lt;return of WhileWithLoopInvariantInCondition.goOnNice(array_2,i_2)&gt;" pathCondition="not(or(or(not(equals(i_1_0,Z(neglit(1(#))))),not(imp(equals(i_1_0,Z(neglit(1(#)))),equals(i_2_0,Z(neglit(1(#))))))),not(imp(and(equals(i_2_0,Z(neglit(1(#)))),equals(i_1_0,Z(neglit(1(#))))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithLoopInvariantInCondition): {
    b=goOnNice(array,i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result_1,i)))))))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="equals(i_2_0,Z(neglit(1(#))))">
                                       <callStackEntry path="/0/0/0/0/0/0/0/0"/>
                                       <callStackEntry path="/0"/>
                                       <statement name="result_1++;" pathCondition="not(or(or(not(equals(i_1_0,Z(neglit(1(#))))),not(imp(equals(i_1_0,Z(neglit(1(#)))),equals(i_2_0,Z(neglit(1(#))))))),not(imp(and(equals(i_2_0,Z(neglit(1(#)))),equals(i_1_0,Z(neglit(1(#))))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithLoopInvariantInCondition): {
    b=goOnNice(array,i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result_1,i)))))))))" pathConditionChanged="false">
                                          <callStackEntry path="/0"/>
                                          <statement name="i++;" pathCondition="not(or(or(not(equals(i_1_0,Z(neglit(1(#))))),not(imp(equals(i_1_0,Z(neglit(1(#)))),equals(i_2_0,Z(neglit(1(#))))))),not(imp(and(equals(i_2_0,Z(neglit(1(#)))),equals(i_1_0,Z(neglit(1(#))))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithLoopInvariantInCondition): {
    b=goOnNice(array,i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result_1,i)))))))))" pathConditionChanged="false">
                                             <callStackEntry path="/0"/>
                                             <termination name="&lt;loop body end&gt;" pathCondition="not(or(or(not(equals(i_1_0,Z(neglit(1(#))))),not(imp(equals(i_1_0,Z(neglit(1(#)))),equals(i_2_0,Z(neglit(1(#))))))),not(imp(and(equals(i_2_0,Z(neglit(1(#)))),equals(i_1_0,Z(neglit(1(#))))),update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\[{method-frame(source=size(int[])@WhileWithLoopInvariantInCondition): {
    b=goOnNice(array,i);
  }
}\] (and(equals(b,TRUE),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result_1,i)))))))))" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="false">
                                             </termination>
                                          </statement>
                                       </statement>
                                    </methodReturn>
                                 </statement>
                              </branchCondition>
                           </loopInvariant>
                           <methodReturnEntry path="/0/0/0/0/0/0/0/0/0/0/0/0"/>
                        </methodCall>
                     </loopCondition>
                  </branchCondition>
               </branchCondition>
               <branchCondition name="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\&lt;{method-frame(source=size(int[])@WhileWithLoopInvariantInCondition): {
    b=goOnNice(array,i);
  }
}\&gt; (and(not(equals(b,TRUE)),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result_1,i)))))" pathCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\&lt;{method-frame(source=size(int[])@WhileWithLoopInvariantInCondition): {
    b=goOnNice(array,i);
  }
}\&gt; (and(not(equals(b,TRUE)),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result_1,i)))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\&lt;{method-frame(source=size(int[])@WhileWithLoopInvariantInCondition): {
    b=goOnNice(array,i);
  }
}\&gt; (and(not(equals(b,TRUE)),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result_1,i)))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
                  <callStackEntry path="/0"/>
                  <statement name="return result_1;" pathCondition="update-application(parallel-upd(elem-update(i)(i_0),elem-update(result_1)(result_1_0)),\&lt;{method-frame(source=size(int[])@WhileWithLoopInvariantInCondition): {
    b=goOnNice(array,i);
  }
}\&gt; (and(not(equals(b,TRUE)),and(and(geq(i,Z(0(#))),geq(length(array),i))&lt;&lt;SC&gt;&gt;,equals(result_1,i)))))" pathConditionChanged="false">
                     <callStackEntry path="/0"/>
                  </statement>
               </branchCondition>
            </loopInvariant>
         </statement>
      </statement>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0"/>
</start>
