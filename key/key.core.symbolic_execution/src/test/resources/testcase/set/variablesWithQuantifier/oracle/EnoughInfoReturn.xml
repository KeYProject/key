<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <variable name="self" isArrayIndex="false">
      <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
         <variable name="passwords" isArrayIndex="false">
            <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
            </value>
         </variable>
      </value>
   </variable>
   <variable name="exc" isArrayIndex="false">
      <value name="exc {true}" typeString="java.lang.Throwable" valueString="exc" isValueAnObject="false" isValueUnknown="false" conditionString="true">
      </value>
   </variable>
   <methodCall name="&lt;call self.passwordChecker()&gt;" pathCondition="true" pathConditionChanged="false">
      <variable name="self" isArrayIndex="false">
         <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
            <variable name="passwords" isArrayIndex="false">
               <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
         </value>
      </variable>
      <variable name="exc" isArrayIndex="false">
         <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
         </value>
      </variable>
      <statement name="int i = 0;" pathCondition="true" pathConditionChanged="false">
         <variable name="self" isArrayIndex="false">
            <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
               <variable name="passwords" isArrayIndex="false">
                  <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
            </value>
         </variable>
         <variable name="exc" isArrayIndex="false">
            <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
            </value>
         </variable>
         <loopInvariant name="invariant: i &gt;= 0
&amp; \forall int j_5;
    (   (j_5 &lt; i &amp; 0 &lt;= j_5)&lt;&lt;SC&gt;&gt; &amp; inInt(j_5)
     -&gt; self.passwords[j_5] &gt;= 0);
variant: javaSubInt(self.passwords.length, i)
mod: {}" pathCondition="true" pathConditionChanged="false" initiallyValid="true">
            <variable name="self" isArrayIndex="false">
               <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                  <variable name="passwords" isArrayIndex="false">
                     <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
               </value>
            </variable>
            <variable name="exc" isArrayIndex="false">
               <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <variable name="i" isArrayIndex="false">
               <value name="i {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <branchCondition name="and(and(or(or(or(lt(i_0,Z(0(#))),lt(length(EnoughInfoReturn_passwords_0),Z(0(#)))),gt(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),or(or(or(or(not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(i_0)),int::select(heap,EnoughInfoReturn_passwords_0,arr(i_0))),arr_0)),lt(length(EnoughInfoReturn_passwords_0),Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),and(geq(arr_0,Z(0(#))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),EnoughInfoReturn_passwords_0,arr(j_5)),Z(0(#))))))))),or(or(or(or(gt(i_0,Z(neglit(1(#)))),lt(length(EnoughInfoReturn_passwords_0),Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),equals(EnoughInfoReturn_passwords_0,null)))" pathCondition="imp(and(geq(length(EnoughInfoReturn_passwords_0),Z(0(#))),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(i_0)),arr_0&lt;&lt;selectSK&gt;&gt;)),and(and(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),leq(i_0,Z(neglit(1(#))))),gt(length(EnoughInfoReturn_passwords_0),i_0)),or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_0&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(i_0))),arr_0))),and(geq(arr_0,Z(0(#))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),EnoughInfoReturn_passwords_0,arr(j_5)),Z(0(#))))))))),or(or(or(equals(EnoughInfoReturn_passwords_0,null),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),geq(i_0,Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0))))" pathConditionChanged="true" branchCondition="and(and(or(or(or(lt(i_0,Z(0(#))),lt(length(EnoughInfoReturn_passwords_0),Z(0(#)))),gt(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),or(or(or(or(not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(i_0)),int::select(heap,EnoughInfoReturn_passwords_0,arr(i_0))),arr_0)),lt(length(EnoughInfoReturn_passwords_0),Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),and(geq(arr_0,Z(0(#))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),EnoughInfoReturn_passwords_0,arr(j_5)),Z(0(#))))))))),or(or(or(or(gt(i_0,Z(neglit(1(#)))),lt(length(EnoughInfoReturn_passwords_0),Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),equals(EnoughInfoReturn_passwords_0,null)))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Body Preserves Invariant">
               <variable name="self" isArrayIndex="false">
                  <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     <variable name="passwords" isArrayIndex="false">
                        <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           <variable name="length" isArrayIndex="false">
                              <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                        </value>
                     </variable>
                  </value>
               </variable>
               <variable name="i" isArrayIndex="false">
                  <value name="i {true}" typeString="int" valueString="i" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="b" isArrayIndex="false">
                  <value name="b {true}" typeString="boolean" valueString="b" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="exc#3" isArrayIndex="false">
                  <value name="exc#3 {true}" typeString="boolean" valueString="exc#3" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="exc" isArrayIndex="false">
                  <value name="exc {true}" typeString="java.lang.Throwable" valueString="exc" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="variant" isArrayIndex="false">
                  <value name="variant {true}" typeString="any" valueString="variant" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="iBefore_LOOP" isArrayIndex="false">
                  <value name="iBefore_LOOP {true}" typeString="int" valueString="iBefore_LOOP" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <loopCondition name="i&lt;this.passwords.length&amp;&amp;this.passwords[i]&gt;=0" pathCondition="imp(and(geq(length(EnoughInfoReturn_passwords_0),Z(0(#))),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(i_0)),arr_0&lt;&lt;selectSK&gt;&gt;)),and(and(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),leq(i_0,Z(neglit(1(#))))),gt(length(EnoughInfoReturn_passwords_0),i_0)),or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_0&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(i_0))),arr_0))),and(geq(arr_0,Z(0(#))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),EnoughInfoReturn_passwords_0,arr(j_5)),Z(0(#))))))))),or(or(or(equals(EnoughInfoReturn_passwords_0,null),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),geq(i_0,Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0))))" pathConditionChanged="false" blockOpened="false">
                  <variable name="self" isArrayIndex="false">
                     <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="passwords" isArrayIndex="false">
                           <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                                 <value name="[i_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="exc_1" isArrayIndex="false">
                     <value name="exc_1 {true}" typeString="boolean" valueString="FALSE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="i" isArrayIndex="false">
                     <value name="i {true}" typeString="int" valueString="i_0" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="variant" isArrayIndex="false">
                     <value name="variant {true}" typeString="int" valueString="add(mul(i_0,Z(neglit(1(#)))),length(int[]::select(heap,self,EnoughInfoReturn::$passwords)))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <statement name="i+=1;" pathCondition="imp(and(geq(length(EnoughInfoReturn_passwords_0),Z(0(#))),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(i_0)),arr_0&lt;&lt;selectSK&gt;&gt;)),and(and(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),leq(i_0,Z(neglit(1(#))))),gt(length(EnoughInfoReturn_passwords_0),i_0)),or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_0&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(i_0))),arr_0))),and(geq(arr_0,Z(0(#))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),EnoughInfoReturn_passwords_0,arr(j_5)),Z(0(#))))))))),or(or(or(equals(EnoughInfoReturn_passwords_0,null),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),geq(i_0,Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0))))" pathConditionChanged="false">
                     <variable name="self" isArrayIndex="false">
                        <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           <variable name="passwords" isArrayIndex="false">
                              <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                                 <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                                    <value name="[i_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="exc_1" isArrayIndex="false">
                        <value name="exc_1 {true}" typeString="boolean" valueString="FALSE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="i" isArrayIndex="false">
                        <value name="i {true}" typeString="int" valueString="i_0" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="variant" isArrayIndex="false">
                        <value name="variant {true}" typeString="int" valueString="add(mul(i_0,Z(neglit(1(#)))),length(int[]::select(heap,self,EnoughInfoReturn::$passwords)))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <termination name="&lt;loop body end&gt;" pathCondition="imp(and(geq(length(EnoughInfoReturn_passwords_0),Z(0(#))),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(i_0)),arr_0&lt;&lt;selectSK&gt;&gt;)),and(and(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),leq(i_0,Z(neglit(1(#))))),gt(length(EnoughInfoReturn_passwords_0),i_0)),or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_0&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(i_0))),arr_0))),and(geq(arr_0,Z(0(#))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),EnoughInfoReturn_passwords_0,arr(j_5)),Z(0(#))))))))),or(or(or(equals(EnoughInfoReturn_passwords_0,null),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),geq(i_0,Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0))))" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="true">
                        <variable name="self" isArrayIndex="false">
                           <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="passwords" isArrayIndex="false">
                                 <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                                       <value name="[i_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="exc_1" isArrayIndex="false">
                           <value name="exc_1 {true}" typeString="boolean" valueString="FALSE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="i" isArrayIndex="false">
                           <value name="i {true}" typeString="int" valueString="add(Z(1(#)),i_0)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="variant" isArrayIndex="false">
                           <value name="variant {true}" typeString="int" valueString="add(mul(i_0,Z(neglit(1(#)))),length(int[]::select(heap,self,EnoughInfoReturn::$passwords)))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                     </termination>
                  </statement>
               </loopCondition>
            </branchCondition>
            <branchCondition name="and(and(or(or(or(or(or(or(or(geq(j_5_0,i_0),lt(i_0,Z(1(#)))),lt(j_5_0,Z(0(#)))),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(j_5_0)),int::select(heap,EnoughInfoReturn_passwords_0,arr(j_5_0))),arr_0))),gt(arr_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),lt(length(EnoughInfoReturn_passwords_0),Z(0(#)))),gt(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),or(or(or(or(not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(i_0)),int::select(heap,EnoughInfoReturn_passwords_0,arr(i_0))),arr_0)),lt(length(EnoughInfoReturn_passwords_0),Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),and(leq(arr_0,Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),EnoughInfoReturn_passwords_0,arr(j_5)),Z(0(#))))))))),or(or(or(or(gt(i_0,Z(neglit(1(#)))),lt(length(EnoughInfoReturn_passwords_0),Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),equals(EnoughInfoReturn_passwords_0,null)))" pathCondition="imp(and(and(geq(length(EnoughInfoReturn_passwords_0),Z(0(#))),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(i_0)),arr_1&lt;&lt;selectSK&gt;&gt;)),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(j_5_0)),arr_0&lt;&lt;selectSK&gt;&gt;)),and(and(or(or(or(or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),geq(arr_0&lt;&lt;selectSK&gt;&gt;,Z(0(#)))),leq(i_0,Z(0(#)))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),gt(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_0&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(j_5_0))),arr_0))),or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_1&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(i_0))),arr_0))),and(leq(arr_0,Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),EnoughInfoReturn_passwords_0,arr(j_5)),Z(0(#))))))))),or(or(or(equals(EnoughInfoReturn_passwords_0,null),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),geq(i_0,Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0))))" pathConditionChanged="true" branchCondition="and(and(or(or(or(or(or(or(or(geq(j_5_0,i_0),lt(i_0,Z(1(#)))),lt(j_5_0,Z(0(#)))),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(j_5_0)),int::select(heap,EnoughInfoReturn_passwords_0,arr(j_5_0))),arr_0))),gt(arr_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),lt(length(EnoughInfoReturn_passwords_0),Z(0(#)))),gt(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),or(or(or(or(not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(i_0)),int::select(heap,EnoughInfoReturn_passwords_0,arr(i_0))),arr_0)),lt(length(EnoughInfoReturn_passwords_0),Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),and(leq(arr_0,Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),EnoughInfoReturn_passwords_0,arr(j_5)),Z(0(#))))))))),or(or(or(or(gt(i_0,Z(neglit(1(#)))),lt(length(EnoughInfoReturn_passwords_0),Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),equals(EnoughInfoReturn_passwords_0,null)))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
               <variable name="self" isArrayIndex="false">
                  <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     <variable name="passwords" isArrayIndex="false">
                        <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                  </value>
               </variable>
               <variable name="i" isArrayIndex="false">
                  <value name="i {true}" typeString="int" valueString="i" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="b" isArrayIndex="false">
                  <value name="b {true}" typeString="boolean" valueString="b" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="exc" isArrayIndex="false">
                  <value name="exc {true}" typeString="java.lang.Throwable" valueString="exc" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <branchCondition name="leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)" pathCondition="imp(and(and(and(geq(length(EnoughInfoReturn_passwords_0),Z(0(#))),geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(j_5_0)),arr_1&lt;&lt;selectSK&gt;&gt;)),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(i_0)),arr_0&lt;&lt;selectSK&gt;&gt;)),and(imp(and(equals(arr_1&lt;&lt;selectSK&gt;&gt;,arr_0&lt;&lt;selectSK&gt;&gt;),equals(arr_1&lt;&lt;selectSK&gt;&gt;,arr_0&lt;&lt;selectSK&gt;&gt;)),and(and(or(or(or(or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),geq(arr_0&lt;&lt;selectSK&gt;&gt;,Z(0(#)))),leq(i_0,Z(0(#)))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),gt(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_0&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(j_5_0))),arr_0))),or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_1&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(i_0))),arr_0))),and(leq(arr_0,Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),EnoughInfoReturn_passwords_0,arr(j_5)),Z(0(#))))))))),or(or(or(equals(EnoughInfoReturn_passwords_0,null),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),geq(i_0,Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)))" pathConditionChanged="true" branchCondition="leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <variable name="self" isArrayIndex="false">
                     <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="passwords" isArrayIndex="false">
                           <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="x" isArrayIndex="false">
                     <value name="x {true}" typeString="boolean" valueString="x" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="b_1" isArrayIndex="false">
                     <value name="b_1 {true}" typeString="boolean" valueString="b_1" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="java.lang.Throwable" valueString="exc" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="i" isArrayIndex="false">
                     <value name="i {true}" typeString="int" valueString="i" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <statement name="this.found=i&lt;this.passwords.length;" pathCondition="imp(and(and(and(geq(length(EnoughInfoReturn_passwords_0),Z(0(#))),geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(j_5_0)),arr_1&lt;&lt;selectSK&gt;&gt;)),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(i_0)),arr_0&lt;&lt;selectSK&gt;&gt;)),and(imp(and(equals(arr_1&lt;&lt;selectSK&gt;&gt;,arr_0&lt;&lt;selectSK&gt;&gt;),equals(arr_1&lt;&lt;selectSK&gt;&gt;,arr_0&lt;&lt;selectSK&gt;&gt;)),and(and(or(or(or(or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),geq(arr_0&lt;&lt;selectSK&gt;&gt;,Z(0(#)))),leq(i_0,Z(0(#)))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),gt(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_0&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(j_5_0))),arr_0))),or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_1&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(i_0))),arr_0))),and(leq(arr_0,Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),EnoughInfoReturn_passwords_0,arr(j_5)),Z(0(#))))))))),or(or(or(equals(EnoughInfoReturn_passwords_0,null),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),geq(i_0,Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)))" pathConditionChanged="false">
                     <variable name="self" isArrayIndex="false">
                        <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           <variable name="passwords" isArrayIndex="false">
                              <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="i" isArrayIndex="false">
                        <value name="i {true}" typeString="int" valueString="i_0" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <methodReturn name="&lt;return of passwordChecker&gt;" signature="&lt;return of self.passwordChecker()&gt;" pathCondition="imp(and(and(and(geq(length(EnoughInfoReturn_passwords_0),Z(0(#))),geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(j_5_0)),arr_1&lt;&lt;selectSK&gt;&gt;)),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(i_0)),arr_0&lt;&lt;selectSK&gt;&gt;)),and(imp(and(equals(arr_1&lt;&lt;selectSK&gt;&gt;,arr_0&lt;&lt;selectSK&gt;&gt;),equals(arr_1&lt;&lt;selectSK&gt;&gt;,arr_0&lt;&lt;selectSK&gt;&gt;)),and(and(or(or(or(or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),geq(arr_0&lt;&lt;selectSK&gt;&gt;,Z(0(#)))),leq(i_0,Z(0(#)))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),gt(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_0&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(j_5_0))),arr_0))),or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_1&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(i_0))),arr_0))),and(leq(arr_0,Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),EnoughInfoReturn_passwords_0,arr(j_5)),Z(0(#))))))))),or(or(or(equals(EnoughInfoReturn_passwords_0,null),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),geq(i_0,Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="imp(and(and(and(geq(length(EnoughInfoReturn_passwords_0),Z(0(#))),geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(i_0)),arr_1&lt;&lt;selectSK&gt;&gt;)),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(j_5_0)),arr_0&lt;&lt;selectSK&gt;&gt;)),and(leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0),and(and(or(or(or(or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),geq(arr_0&lt;&lt;selectSK&gt;&gt;,Z(0(#)))),leq(i_0,Z(0(#)))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),gt(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_0&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(j_5_0))),arr_0))),or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_1&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(i_0))),arr_0))),and(leq(arr_0,Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),EnoughInfoReturn_passwords_0,arr(j_5)),Z(0(#))))))))),or(or(or(equals(EnoughInfoReturn_passwords_0,null),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),geq(i_0,Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0)))))">
                        <variable name="self" isArrayIndex="false">
                           <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="passwords" isArrayIndex="false">
                                 <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                              <variable name="found" isArrayIndex="false">
                                 <value name="found {true}" typeString="boolean" valueString="FALSE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <termination name="&lt;end&gt;" pathCondition="imp(and(and(and(geq(length(EnoughInfoReturn_passwords_0),Z(0(#))),geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(j_5_0)),arr_1&lt;&lt;selectSK&gt;&gt;)),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(i_0)),arr_0&lt;&lt;selectSK&gt;&gt;)),and(imp(and(equals(arr_1&lt;&lt;selectSK&gt;&gt;,arr_0&lt;&lt;selectSK&gt;&gt;),equals(arr_1&lt;&lt;selectSK&gt;&gt;,arr_0&lt;&lt;selectSK&gt;&gt;)),and(and(or(or(or(or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),geq(arr_0&lt;&lt;selectSK&gt;&gt;,Z(0(#)))),leq(i_0,Z(0(#)))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),gt(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_0&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(j_5_0))),arr_0))),or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_1&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(i_0))),arr_0))),and(leq(arr_0,Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),EnoughInfoReturn_passwords_0,arr(j_5)),Z(0(#))))))))),or(or(or(equals(EnoughInfoReturn_passwords_0,null),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),geq(i_0,Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0)))),leq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                           <variable name="self" isArrayIndex="false">
                              <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="passwords" isArrayIndex="false">
                                    <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                       <variable name="length" isArrayIndex="false">
                                          <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                    </value>
                                 </variable>
                                 <variable name="found" isArrayIndex="false">
                                    <value name="found {true}" typeString="boolean" valueString="FALSE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="exc" isArrayIndex="false">
                              <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                        </termination>
                        <callStateVariable name="self" isArrayIndex="false">
                           <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="passwords" isArrayIndex="false">
                                 <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                           </value>
                        </callStateVariable>
                        <callStateVariable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="java.lang.Throwable" valueString="exc" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </callStateVariable>
                     </methodReturn>
                  </statement>
               </branchCondition>
               <branchCondition name="gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)" pathCondition="imp(and(and(and(geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#))),geq(length(EnoughInfoReturn_passwords_0),Z(0(#)))),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(i_0)),arr_1&lt;&lt;selectSK&gt;&gt;)),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(j_5_0)),arr_0&lt;&lt;selectSK&gt;&gt;)),and(imp(and(equals(add(arr_0&lt;&lt;selectSK&gt;&gt;,mul(arr_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#))),equals(add(arr_1&lt;&lt;selectSK&gt;&gt;,mul(arr_1&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(and(or(or(or(or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),geq(arr_0&lt;&lt;selectSK&gt;&gt;,Z(0(#)))),leq(i_0,Z(0(#)))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),gt(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_0&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(j_5_0))),arr_0))),or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_1&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(i_0))),arr_0))),and(leq(arr_0,Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),EnoughInfoReturn_passwords_0,arr(j_5)),Z(0(#))))))))),or(or(or(equals(EnoughInfoReturn_passwords_0,null),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),geq(i_0,Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)))" pathConditionChanged="true" branchCondition="gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <variable name="self" isArrayIndex="false">
                     <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="passwords" isArrayIndex="false">
                           <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="x" isArrayIndex="false">
                     <value name="x {true}" typeString="boolean" valueString="x" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="b_1" isArrayIndex="false">
                     <value name="b_1 {true}" typeString="boolean" valueString="b_1" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="java.lang.Throwable" valueString="exc" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="i" isArrayIndex="false">
                     <value name="i {true}" typeString="int" valueString="i" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <statement name="this.found=i&lt;this.passwords.length;" pathCondition="imp(and(and(and(geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#))),geq(length(EnoughInfoReturn_passwords_0),Z(0(#)))),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(i_0)),arr_1&lt;&lt;selectSK&gt;&gt;)),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(j_5_0)),arr_0&lt;&lt;selectSK&gt;&gt;)),and(imp(and(equals(add(arr_0&lt;&lt;selectSK&gt;&gt;,mul(arr_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#))),equals(add(arr_1&lt;&lt;selectSK&gt;&gt;,mul(arr_1&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(and(or(or(or(or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),geq(arr_0&lt;&lt;selectSK&gt;&gt;,Z(0(#)))),leq(i_0,Z(0(#)))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),gt(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_0&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(j_5_0))),arr_0))),or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_1&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(i_0))),arr_0))),and(leq(arr_0,Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),EnoughInfoReturn_passwords_0,arr(j_5)),Z(0(#))))))))),or(or(or(equals(EnoughInfoReturn_passwords_0,null),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),geq(i_0,Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)))" pathConditionChanged="false">
                     <variable name="self" isArrayIndex="false">
                        <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           <variable name="passwords" isArrayIndex="false">
                              <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                                 <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                                    <value name="[i_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="i" isArrayIndex="false">
                        <value name="i {true}" typeString="int" valueString="i_0" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <methodReturn name="&lt;return of passwordChecker&gt;" signature="&lt;return of self.passwordChecker()&gt;" pathCondition="imp(and(and(and(geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#))),geq(length(EnoughInfoReturn_passwords_0),Z(0(#)))),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(i_0)),arr_1&lt;&lt;selectSK&gt;&gt;)),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(j_5_0)),arr_0&lt;&lt;selectSK&gt;&gt;)),and(imp(and(equals(add(arr_0&lt;&lt;selectSK&gt;&gt;,mul(arr_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#))),equals(add(arr_1&lt;&lt;selectSK&gt;&gt;,mul(arr_1&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(and(or(or(or(or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),geq(arr_0&lt;&lt;selectSK&gt;&gt;,Z(0(#)))),leq(i_0,Z(0(#)))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),gt(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_0&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(j_5_0))),arr_0))),or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_1&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(i_0))),arr_0))),and(leq(arr_0,Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),EnoughInfoReturn_passwords_0,arr(j_5)),Z(0(#))))))))),or(or(or(equals(EnoughInfoReturn_passwords_0,null),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),geq(i_0,Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="imp(and(and(and(geq(length(EnoughInfoReturn_passwords_0),Z(0(#))),geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#)))),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(j_5_0)),arr_1&lt;&lt;selectSK&gt;&gt;)),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(i_0)),arr_0&lt;&lt;selectSK&gt;&gt;)),and(gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0),and(and(or(or(or(or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),geq(arr_0&lt;&lt;selectSK&gt;&gt;,Z(0(#)))),leq(i_0,Z(0(#)))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),gt(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_1&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(j_5_0))),arr_0))),or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_0&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(i_0))),arr_0))),and(leq(arr_0,Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),EnoughInfoReturn_passwords_0,arr(j_5)),Z(0(#))))))))),or(or(or(equals(EnoughInfoReturn_passwords_0,null),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),geq(i_0,Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0)))))">
                        <variable name="self" isArrayIndex="false">
                           <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="passwords" isArrayIndex="false">
                                 <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                                       <value name="[i_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                              <variable name="found" isArrayIndex="false">
                                 <value name="found {true}" typeString="boolean" valueString="TRUE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <termination name="&lt;end&gt;" pathCondition="imp(and(and(and(geq(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),Z(0(#))),geq(length(EnoughInfoReturn_passwords_0),Z(0(#)))),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(i_0)),arr_1&lt;&lt;selectSK&gt;&gt;)),equals(int::select(anon_heap_LOOP,EnoughInfoReturn_passwords_0,arr(j_5_0)),arr_0&lt;&lt;selectSK&gt;&gt;)),and(imp(and(equals(add(arr_0&lt;&lt;selectSK&gt;&gt;,mul(arr_0&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#))),equals(add(arr_1&lt;&lt;selectSK&gt;&gt;,mul(arr_1&lt;&lt;selectSK&gt;&gt;,Z(neglit(1(#))))),Z(0(#)))),and(and(or(or(or(or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),geq(arr_0&lt;&lt;selectSK&gt;&gt;,Z(0(#)))),leq(i_0,Z(0(#)))),leq(j_5_0,Z(neglit(1(#))))),geq(j_5_0,i_0)),gt(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_0&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(j_5_0))),arr_0))),or(or(or(not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0)),leq(length(EnoughInfoReturn_passwords_0),i_0)),not(equals(if-then-else(and(not(equals(EnoughInfoReturn_passwords_0,null)),not(equals(boolean::select(heap,EnoughInfoReturn_passwords_0,java.lang.Object::&lt;created&gt;),TRUE))),arr_1&lt;&lt;selectSK&gt;&gt;,int::select(heap,EnoughInfoReturn_passwords_0,arr(i_0))),arr_0))),and(leq(arr_0,Z(neglit(1(#)))),and(geq(i_0,Z(0(#))),all{j_5:int}(or(or(geq(j_5,i_0),leq(j_5,Z(neglit(1(#))))),geq(int::select(anon(heap,empty,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),EnoughInfoReturn_passwords_0,arr(j_5)),Z(0(#))))))))),or(or(or(equals(EnoughInfoReturn_passwords_0,null),not(equals(int[]::select(heap,self,EnoughInfoReturn::$passwords),EnoughInfoReturn_passwords_0))),geq(i_0,Z(0(#)))),leq(length(EnoughInfoReturn_passwords_0),i_0)))),gt(length(int[]::select(heap,self,EnoughInfoReturn::$passwords)),i_0)))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                           <variable name="self" isArrayIndex="false">
                              <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="passwords" isArrayIndex="false">
                                    <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                       <variable name="length" isArrayIndex="false">
                                          <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                       <variable name="[i_0]" arrayIndex="i_0" isArrayIndex="true">
                                          <value name="[i_0] {true}" typeString="int" valueString="int::select(heap,int[]::select(heap,self,EnoughInfoReturn::$passwords),arr(i_0))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                    </value>
                                 </variable>
                                 <variable name="found" isArrayIndex="false">
                                    <value name="found {true}" typeString="boolean" valueString="TRUE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="exc" isArrayIndex="false">
                              <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                        </termination>
                        <callStateVariable name="self" isArrayIndex="false">
                           <value name="self {true}" typeString="EnoughInfoReturn" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="passwords" isArrayIndex="false">
                                 <value name="passwords {true}" typeString="int[]" valueString="int[]::select(heap,self,EnoughInfoReturn::$passwords)" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {true}" typeString="int" valueString="length(int[]::select(heap,self,EnoughInfoReturn::$passwords))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                           </value>
                        </callStateVariable>
                        <callStateVariable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="java.lang.Throwable" valueString="exc" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </callStateVariable>
                     </methodReturn>
                  </statement>
               </branchCondition>
            </branchCondition>
         </loopInvariant>
      </statement>
      <methodReturnEntry path="/0/0/0/1/0/0/0"/>
      <methodReturnEntry path="/0/0/0/1/1/0/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/1/0/0/0/0"/>
   <terminationEntry path="/0/0/0/1/1/0/0/0"/>
</start>
