<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call self.setAllToOne()&gt;" pathCondition="true" pathConditionChanged="false">
      <statement name="int i = 0;" pathCondition="true" pathConditionChanged="false">
         <loopInvariant name="invariant: (  (i &gt;= 0
 &amp; i &lt;= self.a.length)&lt;&lt;SC&gt;&gt;
 &amp; \forall int x;
     (   (x &gt;= 0 &amp; x &lt; i)&lt;&lt;SC&gt;&gt; &amp; inInt(x)
      -&gt; self.a[x] = 1))&lt;&lt;SC&gt;&gt;;
mod: allLocs" pathCondition="true" pathConditionChanged="false" initiallyValid="true">
            <branchCondition name="and(or(or(lt(length(LoopInvArrayExample_a_0),Z(0(#))),not(equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),LoopInvArrayExample_a_0))),and(gt(length(LoopInvArrayExample_a_0),i_0),and(and(geq(i_0,Z(0(#))),geq(length(LoopInvArrayExample_a_0),i_0)),all{x:int}(or(or(leq(x,Z(neglit(1(#)))),geq(x,i_0)),equals(int::select(anon(heap,allLocs,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),LoopInvArrayExample_a_0,arr(x)),Z(1(#)))))))),or(not(equals(LoopInvArrayExample_a_0,null)),not(equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),null))))" pathCondition="imp(and(geq(length(LoopInvArrayExample_a_0),Z(0(#))),equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;)),and(or(not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0)),and(gt(length(LoopInvArrayExample_a_0),i_0),and(and(geq(i_0,Z(0(#))),geq(length(LoopInvArrayExample_a_0),i_0)),all{x:int}(or(or(leq(x,Z(neglit(1(#)))),geq(x,i_0)),equals(int::select(anon(heap,allLocs,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),LoopInvArrayExample_a_0,arr(x)),Z(1(#)))))))),or(not(equals(LoopInvArrayExample_a_0,null)),not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null)))))" pathConditionChanged="true" branchCondition="and(or(or(lt(length(LoopInvArrayExample_a_0),Z(0(#))),not(equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),LoopInvArrayExample_a_0))),and(gt(length(LoopInvArrayExample_a_0),i_0),and(and(geq(i_0,Z(0(#))),geq(length(LoopInvArrayExample_a_0),i_0)),all{x:int}(or(or(leq(x,Z(neglit(1(#)))),geq(x,i_0)),equals(int::select(anon(heap,allLocs,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),LoopInvArrayExample_a_0,arr(x)),Z(1(#)))))))),or(not(equals(LoopInvArrayExample_a_0,null)),not(equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),null))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Body Preserves Invariant">
               <branchCondition name="not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,LoopInvArrayExample::$a),null))" pathCondition="imp(and(geq(length(LoopInvArrayExample_a_0),Z(0(#))),equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;)),and(imp(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;),and(or(not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0)),and(gt(length(LoopInvArrayExample_a_0),i_0),and(and(geq(i_0,Z(0(#))),geq(length(LoopInvArrayExample_a_0),i_0)),all{x:int}(or(or(leq(x,Z(neglit(1(#)))),geq(x,i_0)),equals(int::select(anon(heap,allLocs,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),LoopInvArrayExample_a_0,arr(x)),Z(1(#)))))))),or(not(equals(LoopInvArrayExample_a_0,null)),not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null))))),not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null))))" pathConditionChanged="true" branchCondition="not(equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,LoopInvArrayExample::$a),null))" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <loopCondition name="i&lt;this.a.length" pathCondition="imp(and(geq(length(LoopInvArrayExample_a_0),Z(0(#))),equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;)),and(imp(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;),and(or(not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0)),and(gt(length(LoopInvArrayExample_a_0),i_0),and(and(geq(i_0,Z(0(#))),geq(length(LoopInvArrayExample_a_0),i_0)),all{x:int}(or(or(leq(x,Z(neglit(1(#)))),geq(x,i_0)),equals(int::select(anon(heap,allLocs,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),LoopInvArrayExample_a_0,arr(x)),Z(1(#)))))))),or(not(equals(LoopInvArrayExample_a_0,null)),not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null))))),not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null))))" pathConditionChanged="false" blockOpened="false">
                     <statement name="this.a[i]=1;" pathCondition="imp(and(geq(length(LoopInvArrayExample_a_0),Z(0(#))),equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;)),and(imp(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;),and(or(not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0)),and(gt(length(LoopInvArrayExample_a_0),i_0),and(and(geq(i_0,Z(0(#))),geq(length(LoopInvArrayExample_a_0),i_0)),all{x:int}(or(or(leq(x,Z(neglit(1(#)))),geq(x,i_0)),equals(int::select(anon(heap,allLocs,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),LoopInvArrayExample_a_0,arr(x)),Z(1(#)))))))),or(not(equals(LoopInvArrayExample_a_0,null)),not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null))))),not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null))))" pathConditionChanged="false">
                        <statement name="i++;" pathCondition="imp(and(geq(length(LoopInvArrayExample_a_0),Z(0(#))),equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;)),and(imp(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;),and(or(not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0)),and(gt(length(LoopInvArrayExample_a_0),i_0),and(and(geq(i_0,Z(0(#))),geq(length(LoopInvArrayExample_a_0),i_0)),all{x:int}(or(or(leq(x,Z(neglit(1(#)))),geq(x,i_0)),equals(int::select(anon(heap,allLocs,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),LoopInvArrayExample_a_0,arr(x)),Z(1(#)))))))),or(not(equals(LoopInvArrayExample_a_0,null)),not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null))))),not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null))))" pathConditionChanged="false">
                           <termination name="&lt;loop body end&gt;" pathCondition="imp(and(geq(length(LoopInvArrayExample_a_0),Z(0(#))),equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;)),and(imp(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;),and(or(not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0)),and(gt(length(LoopInvArrayExample_a_0),i_0),and(and(geq(i_0,Z(0(#))),geq(length(LoopInvArrayExample_a_0),i_0)),all{x:int}(or(or(leq(x,Z(neglit(1(#)))),geq(x,i_0)),equals(int::select(anon(heap,allLocs,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),LoopInvArrayExample_a_0,arr(x)),Z(1(#)))))))),or(not(equals(LoopInvArrayExample_a_0,null)),not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null))))),not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null))))" pathConditionChanged="false" terminationKind="LOOP_BODY" branchVerified="true">
                           </termination>
                        </statement>
                     </statement>
                  </loopCondition>
               </branchCondition>
               <branchCondition name="equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,LoopInvArrayExample::$a),null)" pathCondition="imp(and(geq(length(LoopInvArrayExample_a_0),Z(0(#))),equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;)),and(imp(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;),and(or(not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0)),and(gt(length(LoopInvArrayExample_a_0),i_0),and(and(geq(i_0,Z(0(#))),geq(length(LoopInvArrayExample_a_0),i_0)),all{x:int}(or(or(leq(x,Z(neglit(1(#)))),geq(x,i_0)),equals(int::select(anon(heap,allLocs,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),LoopInvArrayExample_a_0,arr(x)),Z(1(#)))))))),or(not(equals(LoopInvArrayExample_a_0,null)),not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null))))),equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null)))" pathConditionChanged="true" branchCondition="equals(int[]::select(anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;,self,LoopInvArrayExample::$a),null)" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <loopCondition name="i&lt;this.a.length" pathCondition="imp(and(geq(length(LoopInvArrayExample_a_0),Z(0(#))),equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;)),and(imp(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;),and(or(not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0)),and(gt(length(LoopInvArrayExample_a_0),i_0),and(and(geq(i_0,Z(0(#))),geq(length(LoopInvArrayExample_a_0),i_0)),all{x:int}(or(or(leq(x,Z(neglit(1(#)))),geq(x,i_0)),equals(int::select(anon(heap,allLocs,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),LoopInvArrayExample_a_0,arr(x)),Z(1(#)))))))),or(not(equals(LoopInvArrayExample_a_0,null)),not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null))))),equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null)))" pathConditionChanged="false" blockOpened="false">
                     <exceptionalMethodReturn name="&lt;throw java.lang.Throwable&gt;" signature="&lt;exceptional return of &lt;call self.setAllToOne()&gt;&gt;" pathCondition="imp(and(geq(length(LoopInvArrayExample_a_0),Z(0(#))),equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;)),and(imp(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;),and(or(not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0)),and(gt(length(LoopInvArrayExample_a_0),i_0),and(and(geq(i_0,Z(0(#))),geq(length(LoopInvArrayExample_a_0),i_0)),all{x:int}(or(or(leq(x,Z(neglit(1(#)))),geq(x,i_0)),equals(int::select(anon(heap,allLocs,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),LoopInvArrayExample_a_0,arr(x)),Z(1(#)))))))),or(not(equals(LoopInvArrayExample_a_0,null)),not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null))))),equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null)))" pathConditionChanged="false" methodReturnCondition="imp(and(geq(length(LoopInvArrayExample_a_0),Z(0(#))),equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;)),and(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null),and(or(not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0)),and(gt(length(LoopInvArrayExample_a_0),i_0),and(and(geq(i_0,Z(0(#))),geq(length(LoopInvArrayExample_a_0),i_0)),all{x:int}(or(or(leq(x,Z(neglit(1(#)))),geq(x,i_0)),equals(int::select(anon(heap,allLocs,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),LoopInvArrayExample_a_0,arr(x)),Z(1(#)))))))),or(not(equals(LoopInvArrayExample_a_0,null)),not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null))))))">
                        <termination name="&lt;uncaught java.lang.NullPointerException&gt;" pathCondition="imp(and(geq(length(LoopInvArrayExample_a_0),Z(0(#))),equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;)),and(imp(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;),and(or(not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0)),and(gt(length(LoopInvArrayExample_a_0),i_0),and(and(geq(i_0,Z(0(#))),geq(length(LoopInvArrayExample_a_0),i_0)),all{x:int}(or(or(leq(x,Z(neglit(1(#)))),geq(x,i_0)),equals(int::select(anon(heap,allLocs,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),LoopInvArrayExample_a_0,arr(x)),Z(1(#)))))))),or(not(equals(LoopInvArrayExample_a_0,null)),not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null))))),equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null)))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="false">
                        </termination>
                     </exceptionalMethodReturn>
                  </loopCondition>
               </branchCondition>
            </branchCondition>
            <branchCondition name="and(or(or(lt(length(LoopInvArrayExample_a_0),Z(0(#))),not(equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),LoopInvArrayExample_a_0))),and(leq(length(LoopInvArrayExample_a_0),i_0),and(and(geq(i_0,Z(0(#))),geq(length(LoopInvArrayExample_a_0),i_0)),all{x:int}(or(or(leq(x,Z(neglit(1(#)))),geq(x,i_0)),equals(int::select(anon(heap,allLocs,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),LoopInvArrayExample_a_0,arr(x)),Z(1(#)))))))),or(not(equals(LoopInvArrayExample_a_0,null)),not(equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),null))))" pathCondition="imp(and(geq(length(LoopInvArrayExample_a_0),Z(0(#))),equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;)),and(or(not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0)),and(leq(length(LoopInvArrayExample_a_0),i_0),and(and(geq(i_0,Z(0(#))),geq(length(LoopInvArrayExample_a_0),i_0)),all{x:int}(or(or(leq(x,Z(neglit(1(#)))),geq(x,i_0)),equals(int::select(anon(heap,allLocs,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),LoopInvArrayExample_a_0,arr(x)),Z(1(#)))))))),or(not(equals(LoopInvArrayExample_a_0,null)),not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null)))))" pathConditionChanged="true" branchCondition="and(or(or(lt(length(LoopInvArrayExample_a_0),Z(0(#))),not(equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),LoopInvArrayExample_a_0))),and(leq(length(LoopInvArrayExample_a_0),i_0),and(and(geq(i_0,Z(0(#))),geq(length(LoopInvArrayExample_a_0),i_0)),all{x:int}(or(or(leq(x,Z(neglit(1(#)))),geq(x,i_0)),equals(int::select(anon(heap,allLocs,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),LoopInvArrayExample_a_0,arr(x)),Z(1(#)))))))),or(not(equals(LoopInvArrayExample_a_0,null)),not(equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),null))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Use Case">
               <methodReturn name="&lt;return of setAllToOne&gt;" signature="&lt;return of self.setAllToOne()&gt;" pathCondition="imp(and(geq(length(LoopInvArrayExample_a_0),Z(0(#))),equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;)),and(or(not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0)),and(leq(length(LoopInvArrayExample_a_0),i_0),and(and(geq(i_0,Z(0(#))),geq(length(LoopInvArrayExample_a_0),i_0)),all{x:int}(or(or(leq(x,Z(neglit(1(#)))),geq(x,i_0)),equals(int::select(anon(heap,allLocs,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),LoopInvArrayExample_a_0,arr(x)),Z(1(#)))))))),or(not(equals(LoopInvArrayExample_a_0,null)),not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null)))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="imp(and(geq(length(LoopInvArrayExample_a_0),Z(0(#))),equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;)),and(or(not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0)),and(leq(length(LoopInvArrayExample_a_0),i_0),and(and(geq(i_0,Z(0(#))),geq(length(LoopInvArrayExample_a_0),i_0)),all{x:int}(or(or(leq(x,Z(neglit(1(#)))),geq(x,i_0)),equals(int::select(anon(heap,allLocs,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),LoopInvArrayExample_a_0,arr(x)),Z(1(#)))))))),or(not(equals(LoopInvArrayExample_a_0,null)),not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null)))))">
                  <termination name="&lt;end&gt;" pathCondition="imp(and(geq(length(LoopInvArrayExample_a_0),Z(0(#))),equals(int[]::select(anon_heap_LOOP,self,LoopInvArrayExample::$a),LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;)),and(or(not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,LoopInvArrayExample_a_0)),and(leq(length(LoopInvArrayExample_a_0),i_0),and(and(geq(i_0,Z(0(#))),geq(length(LoopInvArrayExample_a_0),i_0)),all{x:int}(or(or(leq(x,Z(neglit(1(#)))),geq(x,i_0)),equals(int::select(anon(heap,allLocs,anon_heap_LOOP&lt;&lt;anonHeapFunction&gt;&gt;),LoopInvArrayExample_a_0,arr(x)),Z(1(#)))))))),or(not(equals(LoopInvArrayExample_a_0,null)),not(equals(LoopInvArrayExample_a_0&lt;&lt;selectSK&gt;&gt;,null)))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                  </termination>
               </methodReturn>
            </branchCondition>
         </loopInvariant>
      </statement>
      <methodReturnEntry path="/0/0/0/0/1/0/0"/>
      <methodReturnEntry path="/0/0/0/1/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/1/0/0/0"/>
   <terminationEntry path="/0/0/0/1/0/0"/>
</start>
