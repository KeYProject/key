<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call BlockContractWithExceptionPostconditionNotVerified.main(_x)&gt;" pathCondition="true" pathConditionChanged="false">
      <statement name="return magic(_x);" pathCondition="true" pathConditionChanged="false">
         <callStackEntry path="/0"/>
         <methodCall name="&lt;call BlockContractWithExceptionPostconditionNotVerified.magic(x_3)&gt;" pathCondition="true" pathConditionChanged="false">
            <callStackEntry path="/0"/>
            <blockContract name="magic()) catch(exc_0)
pre measuredByEmpty &amp; x_3 = 2
post !exc_0 = null
&amp; (   !exc_0 = null
   -&gt;   java.lang.NullPointerException::instance(exc_0)
      = TRUE)
mod {}termination diamond" pathCondition="true" pathConditionChanged="false" preconditionComplied="true">
               <callStackEntry path="/0/0/0"/>
               <callStackEntry path="/0"/>
               <branchCondition name="true" pathCondition="true" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Validity">
                  <callStackEntry path="/0/0/0"/>
                  <callStackEntry path="/0"/>
                  <branchStatement name="if (x_3==2)" pathCondition="true" pathConditionChanged="false" blockOpened="true">
                     <callStackEntry path="/0/0/0"/>
                     <branchCondition name="true" pathCondition="true" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                        <callStackEntry path="/0/0/0"/>
                        <statement name="throw new RuntimeException ();" pathCondition="true" pathConditionChanged="false">
                           <callStackEntry path="/0/0/0"/>
                           <branchCondition name="true" pathCondition="true" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                              <callStackEntry path="/0/0/0"/>
                              <branchCondition name="true" pathCondition="true" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                                 <callStackEntry path="/0/0/0"/>
                                 <branchCondition name="true" pathCondition="true" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                                    <callStackEntry path="/0/0/0"/>
                                    <termination name="&lt;block contract uncaught java.lang.RuntimeException&gt;" pathCondition="true" pathConditionChanged="false" terminationKind="BLOCK_CONTRACT_EXCEPTIONAL" branchVerified="false">
                                    </termination>
                                    <completedBlockEntry path="/0/0/0/0/0/0" conditionString="true"/>
                                 </branchCondition>
                              </branchCondition>
                           </branchCondition>
                        </statement>
                     </branchCondition>
                     <blockCompletionEntry path="/0/0/0/0/0/0/0/0/0/0/0"/>
                  </branchStatement>
               </branchCondition>
               <branchCondition name="and(and(and(not(equals(exc_0,null)),imp(not(equals(exc_0,null)),equals(java.lang.NullPointerException::instance(exc_0),TRUE))),wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;)),or(or(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE)))" pathCondition="imp(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),and(and(and(not(equals(exc_0,null)),imp(not(equals(exc_0,null)),equals(java.lang.NullPointerException::instance(exc_0),TRUE))),wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;)),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" pathConditionChanged="true" branchCondition="and(and(and(not(equals(exc_0,null)),imp(not(equals(exc_0,null)),equals(java.lang.NullPointerException::instance(exc_0),TRUE))),wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;)),or(or(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE)))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Usage">
                  <callStackEntry path="/0/0/0"/>
                  <callStackEntry path="/0"/>
                  <branchCondition name="true" pathCondition="imp(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),and(and(and(not(equals(exc_0,null)),imp(not(equals(exc_0,null)),equals(java.lang.NullPointerException::instance(exc_0),TRUE))),wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;)),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                     <callStackEntry path="/0/0/0"/>
                     <callStackEntry path="/0"/>
                     <exceptionalMethodReturn name="&lt;throw java.lang.Throwable&gt;" signature="&lt;exceptional return of &lt;call BlockContractWithExceptionPostconditionNotVerified.magic(x_3)&gt;&gt;" pathCondition="imp(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),and(and(and(not(equals(exc_0,null)),imp(not(equals(exc_0,null)),equals(java.lang.NullPointerException::instance(exc_0),TRUE))),wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;)),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" pathConditionChanged="false" methodReturnCondition="imp(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),and(and(and(not(equals(exc_0,null)),imp(not(equals(exc_0,null)),equals(java.lang.NullPointerException::instance(exc_0),TRUE))),wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;)),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))">
                        <callStackEntry path="/0/0/0"/>
                        <callStackEntry path="/0"/>
                        <exceptionalMethodReturn name="&lt;throw java.lang.Throwable&gt;" signature="&lt;exceptional return of &lt;call BlockContractWithExceptionPostconditionNotVerified.main(_x)&gt;&gt;" pathCondition="imp(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),and(and(and(not(equals(exc_0,null)),imp(not(equals(exc_0,null)),equals(java.lang.NullPointerException::instance(exc_0),TRUE))),wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;)),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" pathConditionChanged="false" methodReturnCondition="imp(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),and(and(and(not(equals(exc_0,null)),imp(not(equals(exc_0,null)),equals(java.lang.NullPointerException::instance(exc_0),TRUE))),wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;)),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))">
                           <callStackEntry path="/0"/>
                           <branchCondition name="true" pathCondition="imp(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),and(and(and(not(equals(exc_0,null)),imp(not(equals(exc_0,null)),equals(java.lang.NullPointerException::instance(exc_0),TRUE))),wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;)),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                              <branchCondition name="true" pathCondition="imp(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),and(and(and(not(equals(exc_0,null)),imp(not(equals(exc_0,null)),equals(java.lang.NullPointerException::instance(exc_0),TRUE))),wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;)),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" pathConditionChanged="true" branchCondition="true" mergedBranchCondition="false" isBranchConditionComputed="true">
                                 <termination name="&lt;uncaught java.lang.Throwable&gt;" pathCondition="imp(equals(boolean::select(anon_heap,exc_0,java.lang.Object::&lt;created&gt;),java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;),and(and(and(not(equals(exc_0,null)),imp(not(equals(exc_0,null)),equals(java.lang.NullPointerException::instance(exc_0),TRUE))),wellFormed(anon_heap&lt;&lt;anonHeapFunction&gt;&gt;)),or(or(equals(java_lang_Object_created__0&lt;&lt;selectSK&gt;&gt;,TRUE),equals(exc_0,null)),equals(boolean::select(heap,exc_0,java.lang.Object::&lt;created&gt;),TRUE))))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                                 </termination>
                              </branchCondition>
                           </branchCondition>
                        </exceptionalMethodReturn>
                     </exceptionalMethodReturn>
                  </branchCondition>
               </branchCondition>
            </blockContract>
            <methodReturnEntry path="/0/0/0/0/1/0/0"/>
         </methodCall>
      </statement>
      <methodReturnEntry path="/0/0/0/0/1/0/0/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/1/0/0/0/0/0/0"/>
</start>
