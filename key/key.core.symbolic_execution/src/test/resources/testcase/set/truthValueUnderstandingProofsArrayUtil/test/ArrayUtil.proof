\profile "Java Profile for Symbolic Execution";

\settings {
"#Proof-Settings-Config-File
#Fri Mar 23 14:47:12 CET 2018
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=\\#begboolean_equal_2\\#end,\\#begboolean_not_equal_1\\#end,\\#begboolean_not_equal_2\\#end,\\#begtrue_to_not_false\\#end,\\#begfalse_to_not_true\\#end,\\#begboolean_true_commute\\#end,\\#begboolean_false_commute\\#end,\\#begapply_eq_boolean\\#end,\\#begapply_eq_boolean_2\\#end,\\#begapply_eq_boolean_rigid\\#end,\\#begapply_eq_boolean_rigid_2\\#end,\\#begexpand_inByte\\#end,\\#begexpand_inChar\\#end,\\#begexpand_inShort\\#end,\\#begexpand_inInt\\#end,\\#begexpand_inLong\\#end,\\#begreplace_byte_MAX\\#end,\\#begreplace_byte_MIN\\#end,\\#begreplace_char_MAX\\#end,\\#begreplace_char_MIN\\#end,\\#begreplace_short_MAX\\#end,\\#begreplace_short_MIN\\#end,\\#begreplace_int_MAX\\#end,\\#begreplace_int_MIN\\#end,\\#begreplace_long_MAX\\#end,\\#begreplace_long_MIN\\#end,\\#begreplace_byte_RANGE\\#end,\\#begreplace_byte_HALFRANGE\\#end,\\#begreplace_short_RANGE\\#end,\\#begreplace_short_HALFRANGE\\#end,\\#begreplace_char_RANGE\\#end,\\#begreplace_int_RANGE\\#end,\\#begreplace_int_HALFRANGE\\#end,\\#begreplace_long_RANGE\\#end,\\#begreplace_long_HALFRANGE\\#end,\\#begtranslateJavaUnaryMinusInt\\#end,\\#begtranslateJavaUnaryMinusLong\\#end,\\#begtranslateJavaBitwiseNegation\\#end,\\#begtranslateJavaAddInt\\#end,\\#begtranslateJavaAddLong\\#end,\\#begtranslateJavaSubInt\\#end,\\#begtranslateJavaSubLong\\#end,\\#begtranslateJavaMulInt\\#end,\\#begtranslateJavaMulLong\\#end,\\#begtranslateJavaMod\\#end,\\#begtranslateJavaDivInt\\#end,\\#begtranslateJavaDivLong\\#end,\\#begtranslateJavaCastByte\\#end,\\#begtranslateJavaCastShort\\#end,\\#begtranslateJavaCastInt\\#end,\\#begtranslateJavaCastLong\\#end,\\#begtranslateJavaCastChar\\#end,\\#begtranslateJavaShiftRightInt\\#end,\\#begtranslateJavaShiftRightLong\\#end,\\#begtranslateJavaShiftLeftInt\\#end,\\#begtranslateJavaShiftLeftLong\\#end,\\#begtranslateJavaUnsignedShiftRightInt\\#end,\\#begtranslateJavaUnsignedShiftRightLong\\#end,\\#begtranslateJavaBitwiseOrInt\\#end,\\#begtranslateJavaBitwiseOrLong\\#end,\\#begtranslateJavaBitwiseAndInt\\#end,\\#begtranslateJavaBitwiseAndLong\\#end,\\#begtranslateJavaBitwiseXOrInt\\#end,\\#begtranslateJavaBitwiseXOrLong\\#end,\\#begelementOfEmpty\\#end,\\#begelementOfAllLocs\\#end,\\#begelementOfSingleton\\#end,\\#begelementOfUnion\\#end,\\#begelementOfIntersect\\#end,\\#begelementOfSetMinus\\#end,\\#begelementOfAllFields\\#end,\\#begelementOfAllObjects\\#end,\\#begelementOfArrayRange\\#end,\\#begelementOfFreshLocs\\#end,\\#begequalityToElementOf\\#end,\\#begsubsetToElementOf\\#end,\\#begdisjointToElementOf\\#end,\\#begcreatedInHeapToElementOf\\#end,\\#begelementOfEmptyEQ\\#end,\\#begelementOfAllLocsEQ\\#end,\\#begelementOfSingletonEQ\\#end,\\#begelementOfUnionEQ\\#end,\\#begelementOfIntersectEQ\\#end,\\#begelementOfSetMinusEQ\\#end,\\#begelementOfAllFieldsEQ\\#end,\\#begelementOfAllObjectsEQ\\#end,\\#begelementOfArrayRangeEQ\\#end,\\#begelementOfFreshLocsEQ\\#end,\\#begunionWithEmpty1\\#end,\\#begunionWithEmpty2\\#end,\\#begunionWithAllLocs1\\#end,\\#begunionWithAllLocs2\\#end,\\#begintersectWithEmpty1\\#end,\\#begintersectWithEmpty2\\#end,\\#begintersectWithAllLocs1\\#end,\\#begintersectWithAllLocs2\\#end,\\#begsetMinusWithEmpty1\\#end,\\#begsetMinusWithEmpty2\\#end,\\#begsetMinusWithAllLocs\\#end,\\#begsubsetWithEmpty\\#end,\\#begsubsetWithAllLocs\\#end,\\#begdisjointWithEmpty1\\#end,\\#begdisjointWithEmpty2\\#end,\\#begcreatedInHeapWithEmpty\\#end,\\#begcreatedInHeapWithSingleton\\#end,\\#begcreatedInHeapWithUnion\\#end,\\#begcreatedInHeapWithSetMinusFreshLocs\\#end,\\#begcreatedInHeapWithAllFields\\#end,\\#begcreatedInHeapWithArrayRange\\#end,\\#begreferencedObjectIsCreatedRight\\#end,\\#begreferencedObjectIsCreatedRightEQ\\#end,\\#begunionWithItself\\#end,\\#begintersectWithItself\\#end,\\#begsetMinusItself\\#end,\\#begsubsetOfItself\\#end,\\#begselectOfStore\\#end,\\#begselectOfCreate\\#end,\\#begselectOfAnon\\#end,\\#begselectOfMemset\\#end,\\#begonlyCreatedObjectsAreReferenced\\#end,\\#begonlyCreatedObjectsAreInLocSets\\#end,\\#begonlyCreatedObjectsAreInLocSetsEQ\\#end,\\#begarrayLengthNotNegative\\#end,\\#begwellFormedStoreObject\\#end,\\#begwellFormedStoreLocSet\\#end,\\#begwellFormedStorePrimitive\\#end,\\#begwellFormedCreate\\#end,\\#begwellFormedAnon\\#end,\\#begwellFormedMemsetObject\\#end,\\#begwellFormedMemsetLocSet\\#end,\\#begwellFormedMemsetPrimitive\\#end,\\#begselectOfStoreEQ\\#end,\\#begselectOfCreateEQ\\#end,\\#begselectOfAnonEQ\\#end,\\#begselectOfMemsetEQ\\#end,\\#begmemsetEmpty\\#end,\\#begselectCreatedOfAnonEQ\\#end,\\#begwellFormedStoreObjectEQ\\#end,\\#begwellFormedStoreLocSetEQ\\#end,\\#begwellFormedStorePrimitiveEQ\\#end,\\#begwellFormedAnonEQ\\#end,\\#begwellFormedMemsetObjectEQ\\#end,\\#begwellFormedMemsetPrimitiveEQ\\#end
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_INSTANTIATE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=methodExpansion-methodExpansion:noRestriction,assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Fri Mar 23 14:47:12 CET 2018
name=ArrayUtil[ArrayUtil\\:\\:minIndex([I)].JML normal_behavior operation contract.0
addSymbolicExecutionLabel=true
contract=ArrayUtil[ArrayUtil\\:\\:minIndex([I)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "bubel" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "1" (keyUser "bubel" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "2" (keyUser "bubel" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "3436")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "array,result,exc,heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "4") (term "1,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,1,1,0,0,0,1"))
(rule "assignment" (formula "4") (term "1"))
(builtin "One Step Simplification" (formula "4"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "0,1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,1,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "4") (term "0,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "4") (term "0,0,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "4") (term "0,0,0,1,1,0,0,0,1"))
(rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0,1,1,0,0,0,1"))
(rule "add_zero_right" (formula "4") (term "0,0,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "1,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "4") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0,1,1,0,0,0,1"))
(rule "add_literals" (formula "4") (term "0,0,0,1,0,0,1,1,0,0,0,1"))
(rule "add_zero_left" (formula "4") (term "0,0,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "methodBodyExpand" (formula "4") (term "1") (newnames "heapBefore_minIndex,savedHeapBefore_minIndex,_arrayBefore_minIndex"))
(builtin "One Step Simplification" (formula "4"))
(rule "ifElseUnfold" (formula "4") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "4") (term "1") (newnames "x"))
(rule "inequality_comparison_simple" (formula "4") (term "1"))
(builtin "One Step Simplification" (formula "4"))
(rule "ifElseSplit" (formula "4"))
(branch "if x true"
   (builtin "One Step Simplification" (formula "5"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "4"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "ifElseUnfold" (formula "5") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "x_1"))
   (rule "compound_equality_comparison_1" (formula "5") (term "1") (inst "#v0=x_2"))
   (rule "variableDeclarationAssign" (formula "5") (term "1"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "x_2"))
   (rule "assignment_read_length" (formula "5") (term "1"))
   (branch "Normal Execution (_array != null)"
      (builtin "One Step Simplification" (formula "6"))
      (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "4")))
      (rule "false_right" (formula "5"))
      (rule "equality_comparison_simple" (formula "5") (term "1"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "ifElseSplit" (formula "5"))
      (branch "if x_1 true"
         (builtin "One Step Simplification" (formula "6"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "blockReturn" (formula "6") (term "1"))
         (rule "methodCallReturn" (formula "6") (term "1"))
         (rule "assignment" (formula "6") (term "1"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "methodCallEmpty" (formula "6") (term "1"))
         (rule "tryEmpty" (formula "6") (term "1"))
         (rule "emptyModality" (formula "6") (term "1"))
         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")) (ifInst ""  (formula "1")) (ifInst ""  (formula "5")))
         (rule "impRight" (formula "6"))
         (rule "allRight" (formula "7") (inst "sk=i_0"))
         (rule "orRight" (formula "7"))
         (rule "orRight" (formula "7"))
         (rule "inEqSimp_geqRight" (formula "9"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_leqRight" (formula "8"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_geqRight" (formula "9"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "5"))
         (rule "times_zero_2" (formula "1") (term "1,0"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
         (rule "qeq_literals" (formula "4"))
         (rule "closeFalse" (formula "4"))
      )
      (branch "if x_1 false"
         (builtin "One Step Simplification" (formula "6"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "ifElseUnfold" (formula "6") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "6") (term "1") (newnames "x_3"))
         (rule "compound_equality_comparison_1" (formula "6") (term "1") (inst "#v0=x_4"))
         (rule "variableDeclarationAssign" (formula "6") (term "1"))
         (rule "variableDeclaration" (formula "6") (term "1") (newnames "x_4"))
         (rule "assignment_read_length" (formula "6") (term "1"))
         (branch "Normal Execution (_array != null)"
            (builtin "One Step Simplification" (formula "7"))
            (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")))
            (rule "false_right" (formula "6"))
            (rule "equality_comparison_simple" (formula "6") (term "1"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "ifElseSplit" (formula "6"))
            (branch "if x_3 true"
               (builtin "One Step Simplification" (formula "7"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
               (rule "equal_literals" (formula "5"))
               (rule "false_right" (formula "5"))
               (rule "returnUnfold" (formula "6") (term "1") (inst "#v0=x"))
               (rule "variableDeclarationAssign" (formula "6") (term "1"))
               (rule "variableDeclaration" (formula "6") (term "1") (newnames "x_5"))
               (rule "assignment_array2" (formula "6") (term "1"))
               (branch "Normal Execution (_array != null)"
                  (builtin "One Step Simplification" (formula "7"))
                  (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")))
                  (rule "less_literals" (formula "6") (term "1"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "inEqSimp_leqRight" (formula "6"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                  (rule "add_literals" (formula "1") (term "0"))
                  (rule "qeq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "methodCallReturn" (formula "6") (term "1"))
                  (rule "assignment" (formula "6") (term "1"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "methodCallEmpty" (formula "6") (term "1"))
                  (rule "tryEmpty" (formula "6") (term "1"))
                  (rule "emptyModality" (formula "6") (term "1"))
                  (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")) (ifInst ""  (formula "5")))
                  (rule "applyEq" (formula "6") (term "0,0,1") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "6") (term "0,1"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "applyEq" (formula "6") (term "0,0,0") (ifseqformula "1"))
                  (rule "equal_literals" (formula "6") (term "0,0"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "allRight" (formula "6") (inst "sk=i_0"))
                  (rule "orRight" (formula "6"))
                  (rule "orRight" (formula "6"))
                  (rule "inEqSimp_geqRight" (formula "8"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "7"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "8"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "4"))
                  (rule "mul_literals" (formula "1") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "1"))
                  (rule "applyEq" (formula "4") (term "0,2,1,1") (ifseqformula "2"))
                  (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "2"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "arrayLengthIsAnInt" (formula "3") (term "0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "arrayLengthNotNegative" (formula "3") (term "0"))
                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (opengoal " ")
               )
               (branch "Null Reference (_array = null)"
                  (builtin "One Step Simplification" (formula "7"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Index Out of Bounds (_array != null, but 0 Out of Bounds!)"
                  (builtin "One Step Simplification" (formula "7"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "less_literals" (formula "1") (term "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "if x_3 false"
               (builtin "One Step Simplification" (formula "7"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "variableDeclarationAssign" (formula "7") (term "1"))
               (rule "variableDeclaration" (formula "7") (term "1") (newnames "minIndex"))
               (rule "assignment" (formula "7") (term "1"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "for_to_while" (formula "7") (term "1") (inst "#innerLabel=_label4") (inst "#outerLabel=_label5"))
               (rule "variableDeclarationAssign" (formula "7") (term "1"))
               (rule "variableDeclaration" (formula "7") (term "1") (newnames "i"))
               (rule "assignment" (formula "7") (term "1"))
               (builtin "One Step Simplification" (formula "7"))
               (builtin "Loop Invariant" (formula "7") (newnames "variant,b,heapBefore_LOOP,iBefore_LOOP,minIndexBefore_LOOP,i_0,minIndex_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
               (branch "Invariant Initially Valid"
                  (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")))
                  (rule "qeq_literals" (formula "7") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "qeq_literals" (formula "7") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "less_literals" (formula "7") (term "1,0"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "7") (term "1,0,0,1,0,0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1,0,0,1"))
                  (rule "add_zero_left" (formula "7") (term "0,1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "7") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,1"))
                  (rule "nnf_imp2or" (formula "7") (term "0,1"))
                  (rule "nnf_notAnd" (formula "7") (term "0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1"))
                  (rule "mul_literals" (formula "7") (term "1,0,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,1"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "7") (term "1,1,0,0,1"))
                  (rule "inEqSimp_or_antiSymm0" (formula "7") (term "0,0,1"))
                  (rule "add_literals" (formula "7") (term "1,0,1,0,0,1"))
                  (rule "add_literals" (formula "7") (term "0,0,0,0,1"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                  (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "6"))
                  (rule "add_zero_right" (formula "1") (term "1"))
                  (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "allRight" (formula "8") (inst "sk=j_0"))
                  (rule "orRight" (formula "8"))
                  (rule "notRight" (formula "8"))
                  (rule "inEqSimp_geqRight" (formula "9"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "applyEqRigid" (formula "1") (term "0,2,1,0") (ifseqformula "2"))
                  (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Body Preserves Invariant"
                  (builtin "One Step Simplification" (formula "9"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "translateJavaSubInt" (formula "9") (term "0,1,1,1,0,1"))
                  (rule "translateJavaSubInt" (formula "9") (term "0,1,1,1,0,1,1"))
                  (rule "andLeft" (formula "5"))
                  (rule "impRight" (formula "10"))
                  (rule "andLeft" (formula "6"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "6"))
                  (rule "eqSymm" (formula "14") (term "1,0,0,1,0,1,1,0,1"))
                  (rule "polySimp_elimSub" (formula "14") (term "0,1,1,1,0,1"))
                  (rule "polySimp_elimSub" (formula "14") (term "0,1,1,1,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "0,1,1,1,0,1"))
                  (rule "polySimp_addComm0" (formula "14") (term "0,1,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "1,1,0,0,0,1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0,0,0,1,1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0,0,1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0,0,1,1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "9"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,0,0,1,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,0,0,1,1,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "7"))
                  (rule "variableDeclarationAssign" (formula "1") (term "1"))
                  (rule "variableDeclarationAssign" (formula "14") (term "1"))
                  (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_1"))
                  (rule "variableDeclaration" (formula "14") (term "1") (newnames "exc_1"))
                  (rule "assignment" (formula "14") (term "1"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "variableDeclaration" (formula "14") (term "1") (newnames "thrownExc"))
                  (rule "blockThrow" (formula "14") (term "1,0,0,1"))
                  (rule "blockThrow" (formula "14") (term "1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1"))
                  (rule "polySimp_rightDist" (formula "9") (term "1"))
                  (rule "mul_literals" (formula "9") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0,0,1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0,0,1,1,0,1"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0,0,1,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0,0,1,1,0,1"))
                  (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0,0,1,1,0,1"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0,0,1,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,1,0,0,0,1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,1,1,0,0,0,1,1,0,1"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,1,1,0,0,0,1,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,1,0,0,0,1,1,0,1"))
                  (rule "mul_literals" (formula "14") (term "0,1,1,1,0,0,0,1,1,0,1"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1,1,1,0,0,0,1,1,0,1"))
                  (rule "pullOutSelect" (formula "10") (term "1,1,0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnon" (formula "10"))
                  (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")) (ifInst ""  (formula "3")))
                  (rule "applyEqReverse" (formula "11") (term "1,1,0") (ifseqformula "10"))
                  (rule "hideAuxiliaryEq" (formula "10"))
                  (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "9"))
                  (rule "times_zero_1" (formula "8") (term "0,0"))
                  (rule "add_zero_left" (formula "8") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                  (rule "mul_literals" (formula "8") (term "1"))
                  (rule "boxToDiamond" (formula "1") (term "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "nnf_imp2or" (formula "9") (term "0"))
                  (rule "nnf_notAnd" (formula "9") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "14") (term "0,1,0,0,1,1,0,1"))
                  (rule "nnf_notAnd" (formula "14") (term "0,0,1,0,0,1,1,0,1"))
                  (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0,0,1,1,0,1"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,1,0,0,1,1,0,1"))
                  (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,1,0,0,1,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0,0,1,1,0,1"))
                  (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,0,1,1,0,1"))
                  (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,0,0,1,1,0,1"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0,0,1,1,0,1"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0,0,1,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0,0,1,1,0,1"))
                  (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0,0,1,1,0,1"))
                  (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,0,0,1,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,0,0,1,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0,0,1,1,0,1"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,0,0,1,1,0,1"))
                  (rule "compound_less_than_comparison_2" (formula "10") (term "1") (inst "#v0=x") (inst "#v1=x_1"))
                  (rule "variableDeclarationAssign" (formula "10") (term "1"))
                  (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_5"))
                  (rule "assignment" (formula "10") (term "1"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "variableDeclarationAssign" (formula "10") (term "1"))
                  (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_6"))
                  (rule "assignment_read_length" (formula "10") (term "1"))
                  (branch "Normal Execution (_array != null)"
                     (builtin "One Step Simplification" (formula "11"))
                     (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")))
                     (rule "false_right" (formula "10"))
                     (rule "less_than_comparison_simple" (formula "10") (term "1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0"))
                     (rule "methodCallEmpty" (formula "10") (term "1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "emptyModality" (formula "10") (term "1"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "notRight" (formula "10"))
                     (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                     (rule "add_literals" (formula "7") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "7") (term "1,0,0"))
                     (rule "add_zero_right" (formula "7") (term "0,0"))
                     (rule "qeq_literals" (formula "7") (term "0"))
                     (builtin "One Step Simplification" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "arrayLengthIsAnInt" (formula "11") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                     (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "12"))
                     (rule "add_zero_right" (formula "1") (term "1"))
                     (rule "inEqSimp_contradEq7" (formula "12") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0"))
                     (rule "leq_literals" (formula "12") (term "0"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "false_right" (formula "12"))
                     (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "11"))
                     (rule "add_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_contradEq7" (formula "11") (ifseqformula "1"))
                     (rule "mul_literals" (formula "11") (term "1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0"))
                     (rule "leq_literals" (formula "11") (term "0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "false_right" (formula "11"))
                     (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_7"))
                     (rule "compound_less_than_comparison_2" (formula "12") (term "1") (inst "#v0=x_8") (inst "#v1=x_9"))
                     (rule "variableDeclarationAssign" (formula "12") (term "1"))
                     (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_8"))
                     (rule "assignment" (formula "12") (term "1"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "variableDeclarationAssign" (formula "12") (term "1"))
                     (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_9"))
                     (rule "assignment_read_length" (formula "12") (term "1"))
                     (branch "Normal Execution (_array != null)"
                        (builtin "One Step Simplification" (formula "13"))
                        (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "11")))
                        (rule "false_right" (formula "12"))
                        (rule "less_than_comparison_simple" (formula "12") (term "1"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,0"))
                        (rule "replace_known_left" (formula "12") (term "0,0,1,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "allLeft" (formula "10") (inst "t=minIndex_0"))
                        (rule "replaceKnownSelect_taclet110100_0" (formula "10") (term "0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet110100_1" (formula "10") (term "0,1"))
                        (rule "inEqSimp_homoInEq1" (formula "10") (term "1"))
                        (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1"))
                        (rule "add_literals" (formula "10") (term "1,0,1"))
                        (rule "times_zero_1" (formula "10") (term "0,1"))
                        (rule "leq_literals" (formula "10") (term "1"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "ifSplit" (formula "12"))
                        (branch "if x_7 true"
                           (builtin "One Step Simplification" (formula "13"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "ifElseUnfold" (formula "12") (term "1") (inst "#boolv=x"))
                           (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_10"))
                           (rule "compound_less_than_comparison_2" (formula "12") (term "1") (inst "#v0=x_11") (inst "#v1=x_12"))
                           (rule "variableDeclarationAssign" (formula "12") (term "1"))
                           (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_11"))
                           (rule "assignment_array2" (formula "12") (term "1"))
                           (branch "Normal Execution (_array != null)"
                              (builtin "One Step Simplification" (formula "13"))
                              (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "11")))
                              (rule "orRight" (formula "12"))
                              (rule "inEqSimp_ltRight" (formula "13"))
                              (rule "times_zero_1" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "13"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "pullOutSelect" (formula "14") (term "0,1,0") (inst "selectSK=arr_1"))
                              (rule "simplifySelectOfAnon" (formula "1"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "7")))
                              (rule "applyEqReverse" (formula "15") (term "0,1,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "variableDeclarationAssign" (formula "14") (term "1"))
                              (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_12"))
                              (rule "assignment_array2" (formula "14") (term "1"))
                              (branch "Normal Execution (_array != null)"
                                 (builtin "One Step Simplification" (formula "15"))
                                 (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")))
                                 (rule "replaceKnownSelect_taclet110100_0" (formula "15") (term "0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet110100_1" (formula "15") (term "0,1,0"))
                                 (rule "orRight" (formula "14"))
                                 (rule "inEqSimp_ltRight" (formula "15"))
                                 (rule "times_zero_1" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_leqRight" (formula "14"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                 (rule "mul_literals" (formula "2") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "9"))
                                 (rule "leq_literals" (formula "2") (term "0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "less_than_comparison_simple" (formula "13") (term "1"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,0"))
                                 (rule "ifElseSplit" (formula "13"))
                                 (branch "if x_10 true"
                                    (builtin "One Step Simplification" (formula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "assignment" (formula "14") (term "1"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "blockEmpty" (formula "14") (term "1"))
                                    (rule "postincrement" (formula "14") (term "1"))
                                    (rule "compound_int_cast_expression" (formula "14") (term "1") (inst "#v=x"))
                                    (rule "variableDeclarationAssign" (formula "14") (term "1"))
                                    (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_13"))
                                    (rule "remove_parentheses_right" (formula "14") (term "1"))
                                    (rule "assignmentAdditionInt" (formula "14") (term "1"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "translateJavaAddInt" (formula "14") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "14") (term "0,1,0"))
                                    (rule "widening_identity_cast_5" (formula "14") (term "1"))
                                    (rule "assignment" (formula "14") (term "1"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "tryEmpty" (formula "14") (term "1"))
                                    (rule "methodCallEmpty" (formula "14") (term "1"))
                                    (rule "emptyModality" (formula "14") (term "1"))
                                    (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "4")))
                                    (rule "qeq_literals" (formula "14") (term "0,1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "eqSymm" (formula "14") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "0,0,1"))
                                    (rule "polySimp_rightDist" (formula "14") (term "0,0,1"))
                                    (rule "mul_literals" (formula "14") (term "0,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "1,1,0,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,1,1,0,0,0"))
                                    (rule "add_zero_left" (formula "14") (term "1,1,0,0,0"))
                                    (rule "precOfInt" (formula "14") (term "1"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,1"))
                                    (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,1,1"))
                                    (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,1,1"))
                                    (rule "polySimp_addComm1" (formula "14") (term "0,0,1,1"))
                                    (rule "polySimp_pullOutFactor2b" (formula "14") (term "0,1,1"))
                                    (rule "add_literals" (formula "14") (term "1,1,0,1,1"))
                                    (rule "times_zero_1" (formula "14") (term "1,0,1,1"))
                                    (rule "add_zero_right" (formula "14") (term "0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,1,1"))
                                    (rule "polySimp_addComm1" (formula "14") (term "0,0,1,1"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,1,1"))
                                    (rule "add_zero_left" (formula "14") (term "0,0,1,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,1"))
                                    (rule "add_literals" (formula "14") (term "1,0,1,1"))
                                    (rule "times_zero_1" (formula "14") (term "0,1,1"))
                                    (rule "leq_literals" (formula "14") (term "1,1"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,0"))
                                    (rule "replace_known_left" (formula "14") (term "1,0,0,0") (ifseqformula "9"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_homoInEq1" (formula "14") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "14") (term "0,0,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "14") (term "1"))
                                    (rule "times_zero_2" (formula "14") (term "1,0,1"))
                                    (rule "add_zero_right" (formula "14") (term "0,1"))
                                    (rule "inEqSimp_invertInEq0" (formula "14") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,0"))
                                    (rule "times_zero_2" (formula "14") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,1"))
                                    (rule "mul_literals" (formula "14") (term "0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,1,1"))
                                    (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_subsumption1" (formula "14") (term "0,0") (ifseqformula "9"))
                                    (rule "leq_literals" (formula "14") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "pullOutSelect" (formula "14") (term "1,1,0,0") (inst "selectSK=arr_2"))
                                    (rule "simplifySelectOfAnon" (formula "1"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")) (ifInst ""  (formula "7")))
                                    (rule "applyEqReverse" (formula "15") (term "1,1,0,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "andRight" (formula "14"))
                                    (branch
                                       (rule "allRight" (formula "14") (inst "sk=j_0"))
                                       (rule "orRight" (formula "14"))
                                       (rule "orRight" (formula "14"))
                                       (rule "inEqSimp_geqRight" (formula "16"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_leqRight" (formula "15"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_geqRight" (formula "16"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1"))
                                       (rule "mul_literals" (formula "3") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_3"))
                                       (rule "simplifySelectOfAnon" (formula "3"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "17")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                                       (rule "times_zero_1" (formula "2") (term "0,0"))
                                       (rule "add_zero_left" (formula "2") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "13"))
                                       (rule "leq_literals" (formula "2") (term "0"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "allLeft" (formula "15") (inst "t=Z(1(#))"))
                                       (rule "replaceKnownSelect_taclet000000110100_4" (formula "15") (term "0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet000000110100_5" (formula "15") (term "0,1"))
                                       (rule "leq_literals" (formula "15") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "15"))
                                       (rule "inEqSimp_commuteGeq" (formula "15") (term "0"))
                                       (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                       (rule "cut_direct" (formula "15") (term "0"))
                                       (branch "CUT: i_0 <= 1 TRUE"
                                          (builtin "One Step Simplification" (formula "16"))
                                          (rule "true_left" (formula "16"))
                                          (rule "inEqSimp_antiSymm" (formula "12") (ifseqformula "15"))
                                          (rule "applyEqRigid" (formula "17") (term "1,1,0,0") (ifseqformula "12"))
                                          (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "12"))
                                          (rule "applyEqRigid" (formula "4") (term "0,2,1,1") (ifseqformula "12"))
                                          (rule "applyEqRigid" (formula "15") (term "1,1") (ifseqformula "12"))
                                          (rule "add_literals" (formula "15") (term "1"))
                                          (rule "applyEqRigid" (formula "16") (term "0") (ifseqformula "12"))
                                          (rule "leq_literals" (formula "16"))
                                          (rule "true_left" (formula "16"))
                                          (rule "applyEqRigid" (formula "13") (term "0") (ifseqformula "12"))
                                          (rule "qeq_literals" (formula "13"))
                                          (rule "true_left" (formula "13"))
                                          (rule "applyEqRigid" (formula "7") (term "1,1") (ifseqformula "12"))
                                          (rule "add_literals" (formula "7") (term "1"))
                                          (rule "inEqSimp_antiSymm" (formula "12") (ifseqformula "13"))
                                          (rule "applyEqRigid" (formula "15") (term "0,2,1,1,0") (ifseqformula "12"))
                                          (rule "applyEq" (formula "4") (term "0,2,0") (ifseqformula "12"))
                                          (rule "inEqSimp_homoInEq1" (formula "4"))
                                          (rule "polySimp_addComm1" (formula "4") (term "0"))
                                          (rule "applyEq" (formula "14") (term "0") (ifseqformula "12"))
                                          (rule "leq_literals" (formula "14"))
                                          (rule "true_left" (formula "14"))
                                          (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
                                          (rule "qeq_literals" (formula "13"))
                                          (rule "true_left" (formula "13"))
                                          (rule "applyEqRigid" (formula "5") (term "1,1") (ifseqformula "12"))
                                          (rule "add_zero_right" (formula "5") (term "1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                          (rule "polySimp_rightDist" (formula "4") (term "1"))
                                          (rule "mul_literals" (formula "4") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                                          (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "5") (term "0"))
                                          (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "inEqSimp_or_antiSymm0" (formula "12") (term "0,0"))
                                          (rule "add_literals" (formula "12") (term "0,0,0,0"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "add_literals" (formula "12") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "12") (term "0"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "pullOutSelect" (formula "12") (term "0") (inst "selectSK=arr_4"))
                                          (rule "simplifySelectOfAnon" (formula "12"))
                                          (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")) (ifInst ""  (formula "7")))
                                          (rule "applyEqReverse" (formula "13") (term "0") (ifseqformula "12"))
                                          (rule "hideAuxiliaryEq" (formula "12"))
                                          (rule "inEqSimp_homoInEq1" (formula "12"))
                                          (rule "polySimp_pullOutFactor1" (formula "12") (term "0"))
                                          (rule "add_literals" (formula "12") (term "1,0"))
                                          (rule "times_zero_1" (formula "12") (term "0"))
                                          (rule "leq_literals" (formula "12"))
                                          (rule "true_left" (formula "12"))
                                          (opengoal " ")
                                       )
                                       (branch "CUT: i_0 <= 1 FALSE"
                                          (builtin "One Step Simplification" (formula "15"))
                                          (rule "inEqSimp_leqRight" (formula "17"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "1"))
                                          (rule "leq_literals" (formula "13") (term "0"))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (rule "true_left" (formula "13"))
                                          (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "15"))
                                          (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                                          (rule "mul_literals" (formula "5") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "5") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                                          (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                          (rule "polySimp_elimOne" (formula "5") (term "0"))
                                          (rule "allLeft" (formula "17") (inst "t=j_0"))
                                          (rule "replaceKnownSelect_taclet0000000110100_6" (formula "17") (term "0,1"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet0000000110100_7" (formula "17") (term "0,1"))
                                          (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "17") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "17"))
                                          (rule "cut_direct" (formula "17") (term "0"))
                                          (branch "CUT: j_0 >= i_0 TRUE"
                                             (builtin "One Step Simplification" (formula "18"))
                                             (rule "true_left" (formula "18"))
                                             (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "2"))
                                             (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                                             (rule "inEqSimp_homoInEq1" (formula "18"))
                                             (rule "polySimp_pullOutFactor1" (formula "18") (term "0"))
                                             (rule "add_literals" (formula "18") (term "1,0"))
                                             (rule "times_zero_1" (formula "18") (term "0"))
                                             (rule "leq_literals" (formula "18"))
                                             (rule "true_left" (formula "18"))
                                             (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "17"))
                                             (rule "inEqSimp_homoInEq0" (formula "2"))
                                             (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                                             (rule "add_literals" (formula "2") (term "1,0"))
                                             (rule "times_zero_1" (formula "2") (term "0"))
                                             (rule "qeq_literals" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (rule "applyEq" (formula "2") (term "0") (ifseqformula "16"))
                                             (rule "applyEq" (formula "3") (term "0,2,0") (ifseqformula "16"))
                                             (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                                             (rule "leq_literals" (formula "2") (term "0"))
                                             (builtin "One Step Simplification" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (opengoal " ")
                                          )
                                          (branch "CUT: j_0 >= i_0 FALSE"
                                             (builtin "One Step Simplification" (formula "17"))
                                             (rule "inEqSimp_geqRight" (formula "19"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                             (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                                             (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "3") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
                                             (rule "add_literals" (formula "3") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "3") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "3") (term "0,0"))
                                             (rule "qeq_literals" (formula "3") (term "0"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "true_left" (formula "3"))
                                             (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                                             (rule "times_zero_1" (formula "3") (term "0,0"))
                                             (rule "add_zero_left" (formula "3") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                             (rule "mul_literals" (formula "3") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "2"))
                                             (rule "leq_literals" (formula "3") (term "0"))
                                             (builtin "One Step Simplification" (formula "3"))
                                             (rule "true_left" (formula "3"))
                                             (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "17"))
                                             (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                             (rule "mul_literals" (formula "6") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                             (rule "polySimp_mulComm0" (formula "6") (term "1"))
                                             (rule "polySimp_rightDist" (formula "6") (term "1"))
                                             (rule "mul_literals" (formula "6") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                                             (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                             (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                             (rule "mul_literals" (formula "6") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "6") (term "0"))
                                             (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                                             (rule "add_literals" (formula "6") (term "0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                             (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                             (rule "polySimp_elimOne" (formula "6") (term "0"))
                                             (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "6"))
                                             (rule "inEqSimp_homoInEq0" (formula "5") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
                                             (rule "mul_literals" (formula "5") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
                                             (rule "add_literals" (formula "5") (term "0,0,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0"))
                                             (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "5") (term "0,0"))
                                             (rule "qeq_literals" (formula "5") (term "0"))
                                             (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (opengoal " ")
                                          )
                                       )
                                    )
                                    (branch
                                       (rule "allRight" (formula "14") (inst "sk=f_0"))
                                       (rule "allRight" (formula "14") (inst "sk=o_0"))
                                       (rule "orRight" (formula "14"))
                                       (rule "pullOutSelect" (formula "15") (term "0") (inst "selectSK=f_0_0"))
                                       (rule "simplifySelectOfAnon" (formula "1"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                                       (rule "applyEqReverse" (formula "16") (term "0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "closeTrue" (formula "16"))
                                    )
                                 )
                                 (branch "if x_10 false"
                                    (builtin "One Step Simplification" (formula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "inEqSimp_geqRight" (formula "12"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "blockEmpty" (formula "14") (term "1"))
                                    (rule "blockEmpty" (formula "14") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                    (rule "postincrement" (formula "14") (term "1"))
                                    (rule "compound_int_cast_expression" (formula "14") (term "1") (inst "#v=x"))
                                    (rule "variableDeclarationAssign" (formula "14") (term "1"))
                                    (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_13"))
                                    (rule "remove_parentheses_right" (formula "14") (term "1"))
                                    (rule "assignmentAdditionInt" (formula "14") (term "1"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "translateJavaAddInt" (formula "14") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "14") (term "0,1,0"))
                                    (rule "widening_identity_cast_5" (formula "14") (term "1"))
                                    (rule "assignment" (formula "14") (term "1"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "tryEmpty" (formula "14") (term "1"))
                                    (rule "methodCallEmpty" (formula "14") (term "1"))
                                    (rule "emptyModality" (formula "14") (term "1"))
                                    (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "4")) (ifInst ""  (formula "10")))
                                    (rule "replaceKnownSelect_taclet110100_0" (formula "14") (term "1,1,0,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet110100_1" (formula "14") (term "1,1,0,1,0,0"))
                                    (rule "eqSymm" (formula "14") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "0,0,1"))
                                    (rule "polySimp_rightDist" (formula "14") (term "0,0,1"))
                                    (rule "mul_literals" (formula "14") (term "0,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "1,1,0,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,1,1,0,0,0"))
                                    (rule "add_zero_left" (formula "14") (term "1,1,0,0,0"))
                                    (rule "precOfInt" (formula "14") (term "1"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,1"))
                                    (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,1,1"))
                                    (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,1,1"))
                                    (rule "polySimp_addComm1" (formula "14") (term "0,0,1,1"))
                                    (rule "polySimp_pullOutFactor2b" (formula "14") (term "0,1,1"))
                                    (rule "add_literals" (formula "14") (term "1,1,0,1,1"))
                                    (rule "times_zero_1" (formula "14") (term "1,0,1,1"))
                                    (rule "add_zero_right" (formula "14") (term "0,1,1"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,1,1"))
                                    (rule "polySimp_addComm1" (formula "14") (term "0,0,1,1"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,1,1"))
                                    (rule "add_zero_left" (formula "14") (term "0,0,1,1"))
                                    (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,1"))
                                    (rule "add_literals" (formula "14") (term "1,0,1,1"))
                                    (rule "times_zero_1" (formula "14") (term "0,1,1"))
                                    (rule "leq_literals" (formula "14") (term "1,1"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_homoInEq1" (formula "14") (term "0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "14") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "14") (term "1"))
                                    (rule "times_zero_2" (formula "14") (term "1,0,1"))
                                    (rule "add_zero_right" (formula "14") (term "0,1"))
                                    (rule "inEqSimp_invertInEq0" (formula "14") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,0,0"))
                                    (rule "times_zero_2" (formula "14") (term "1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,1"))
                                    (rule "mul_literals" (formula "14") (term "0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,1,1"))
                                    (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "4"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_subsumption1" (formula "14") (term "0,0,0") (ifseqformula "9"))
                                    (rule "leq_literals" (formula "14") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "inEqSimp_subsumption0" (formula "14") (term "0,0") (ifseqformula "11"))
                                    (rule "inEqSimp_homoInEq0" (formula "14") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "14") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "14") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "14") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "andRight" (formula "14"))
                                    (branch
                                       (rule "allRight" (formula "14") (inst "sk=j_0"))
                                       (rule "orRight" (formula "14"))
                                       (rule "orRight" (formula "14"))
                                       (rule "inEqSimp_geqRight" (formula "16"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_leqRight" (formula "15"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_geqRight" (formula "16"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1"))
                                       (rule "mul_literals" (formula "3") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                                       (rule "simplifySelectOfAnon" (formula "3"))
                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "17")) (ifInst ""  (formula "10")))
                                       (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "inEqSimp_homoInEq0" (formula "3"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1"))
                                       (rule "mul_literals" (formula "3") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                       (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                                       (rule "times_zero_1" (formula "2") (term "0,0"))
                                       (rule "add_zero_left" (formula "2") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "13"))
                                       (rule "leq_literals" (formula "2") (term "0"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                                       (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                       (rule "mul_literals" (formula "3") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0"))
                                       (rule "allLeft" (formula "16") (inst "t=j_0"))
                                       (rule "replaceKnownSelect_taclet0100000110100_4" (formula "16") (term "0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100000110100_5" (formula "16") (term "0,1"))
                                       (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                                       (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "16") (term "0,0,1"))
                                       (rule "leq_literals" (formula "16") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "16") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "1"))
                                       (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "16"))
                                       (rule "applyEqRigid" (formula "3") (term "0,2,0") (ifseqformula "16"))
                                       (rule "inEqSimp_homoInEq0" (formula "3"))
                                       (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                       (rule "add_literals" (formula "3") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0"))
                                       (rule "add_zero_right" (formula "3") (term "0"))
                                       (rule "qeq_literals" (formula "3"))
                                       (rule "closeFalse" (formula "3"))
                                    )
                                    (branch
                                       (rule "allRight" (formula "14") (inst "sk=f_0"))
                                       (rule "allRight" (formula "14") (inst "sk=o_0"))
                                       (rule "orRight" (formula "14"))
                                       (rule "pullOutSelect" (formula "15") (term "0") (inst "selectSK=f_0_0"))
                                       (rule "simplifySelectOfAnon" (formula "1"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                                       (rule "applyEqReverse" (formula "16") (term "0") (ifseqformula "1"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "closeTrue" (formula "16"))
                                    )
                                 )
                              )
                              (branch "Null Reference (_array = null)"
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "Index Out of Bounds (_array != null, but minIndex Out of Bounds!)"
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
                                 (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                 (rule "blockThrow" (formula "15") (term "1"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1"))
                                 (rule "mul_literals" (formula "2") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "9"))
                                 (rule "leq_literals" (formula "2") (term "0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "9"))
                                 (rule "qeq_literals" (formula "1") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                                 (rule "mul_literals" (formula "2") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "mul_literals" (formula "2") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "2"))
                                 (rule "leq_literals" (formula "10") (term "0"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "true_left" (formula "10"))
                                 (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                                 (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                                 (rule "mul_literals" (formula "4") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1"))
                                 (rule "mul_literals" (formula "4") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "4"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "inEqSimp_homoInEq1" (formula "11"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0"))
                                 (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                 (rule "add_literals" (formula "11") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0"))
                                 (rule "add_zero_right" (formula "11") (term "0"))
                                 (rule "leq_literals" (formula "11"))
                                 (rule "closeFalse" (formula "11"))
                              )
                           )
                           (branch "Null Reference (_array = null)"
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Index Out of Bounds (_array != null, but i Out of Bounds!)"
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "1") (term "0,0,1"))
                              (rule "blockThrow" (formula "13") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                              (rule "mul_literals" (formula "1") (term "1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0"))
                              (rule "leq_literals" (formula "1") (term "0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                        (branch "if x_7 false"
                           (builtin "One Step Simplification" (formula "13"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "Null Reference (_array = null)"
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "Null Reference (_array = null)"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "Use Case"
                  (builtin "One Step Simplification" (formula "9"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "6"))
                  (rule "andLeft" (formula "5"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "8"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "6"))
                  (rule "variableDeclarationAssign" (formula "13") (term "1"))
                  (rule "variableDeclaration" (formula "13") (term "1") (newnames "b_1"))
                  (rule "blockEmpty" (formula "13") (term "1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1"))
                  (rule "polySimp_rightDist" (formula "8") (term "1"))
                  (rule "mul_literals" (formula "8") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                  (rule "pullOutSelect" (formula "9") (term "1,1,0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnon" (formula "9"))
                  (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "13")) (ifInst ""  (formula "2")))
                  (rule "applyEqReverse" (formula "10") (term "1,1,0") (ifseqformula "9"))
                  (rule "hideAuxiliaryEq" (formula "9"))
                  (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "8"))
                  (rule "times_zero_1" (formula "7") (term "0,0"))
                  (rule "add_zero_left" (formula "7") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                  (rule "mul_literals" (formula "7") (term "1"))
                  (rule "nnf_imp2or" (formula "9") (term "0"))
                  (rule "nnf_notAnd" (formula "9") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                  (rule "compound_less_than_comparison_2" (formula "13") (term "1") (inst "#v0=x") (inst "#v1=x_1"))
                  (rule "variableDeclarationAssign" (formula "13") (term "1"))
                  (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_5"))
                  (rule "assignment" (formula "13") (term "1"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "variableDeclarationAssign" (formula "13") (term "1"))
                  (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_6"))
                  (rule "assignment_read_length" (formula "13") (term "1"))
                  (branch "Normal Execution (_array != null)"
                     (builtin "One Step Simplification" (formula "14"))
                     (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "12")))
                     (rule "false_right" (formula "13"))
                     (rule "less_than_comparison_simple" (formula "13") (term "1"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,0"))
                     (rule "methodCallEmpty" (formula "13") (term "1"))
                     (rule "emptyModality" (formula "13") (term "1"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "impRight" (formula "13"))
                     (rule "notLeft" (formula "1"))
                     (rule "inEqSimp_geqRight" (formula "10"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "1"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "7"))
                     (rule "inEqSimp_homoInEq0" (formula "1"))
                     (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,0"))
                     (rule "times_zero_1" (formula "1") (term "0"))
                     (rule "qeq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "11") (term "0") (ifseqformula "6"))
                     (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq1" (formula "7"))
                     (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                     (rule "add_literals" (formula "7") (term "1,0"))
                     (rule "times_zero_1" (formula "7") (term "0"))
                     (rule "leq_literals" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "applyEq" (formula "11") (term "0") (ifseqformula "6"))
                     (rule "inEqSimp_contradEq7" (formula "11") (ifseqformula "5"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0"))
                     (rule "leq_literals" (formula "11") (term "0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "false_right" (formula "11"))
                     (rule "inEqSimp_strengthen1" (formula "5") (ifseqformula "10"))
                     (rule "add_literals" (formula "5") (term "1"))
                     (rule "inEqSimp_contradEq7" (formula "10") (ifseqformula "5"))
                     (rule "mul_literals" (formula "10") (term "1,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0"))
                     (rule "leq_literals" (formula "10") (term "0"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "false_right" (formula "10"))
                     (rule "methodCallReturn" (formula "11") (term "1"))
                     (rule "assignment" (formula "11") (term "1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "methodCallEmpty" (formula "11") (term "1"))
                     (rule "tryEmpty" (formula "11") (term "1"))
                     (rule "emptyModality" (formula "11") (term "1"))
                     (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
                     (rule "replaceKnownSelect_taclet210100_0" (formula "11") (term "1,1,0,1,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet210100_1" (formula "11") (term "1,1,0,1,1,0"))
                     (rule "eqSymm" (formula "11") (term "1,0,0,1"))
                     (rule "applyEq" (formula "11") (term "1,1,0,0,1,1,0") (ifseqformula "6"))
                     (rule "replace_known_left" (formula "11") (term "1,1,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "6"))
                     (rule "inEqSimp_contradEq7" (formula "11") (term "1,0") (ifseqformula "7"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,1,0"))
                     (rule "add_zero_left" (formula "11") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "11") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_contradEq7" (formula "11") (term "0,0") (ifseqformula "5"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
                     (rule "leq_literals" (formula "11") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "allRight" (formula "11") (inst "sk=f_0"))
                     (rule "allRight" (formula "11") (inst "sk=o_0"))
                     (rule "orRight" (formula "11"))
                     (rule "pullOutSelect" (formula "12") (term "0") (inst "selectSK=f_0_0"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
                     (rule "applyEqReverse" (formula "13") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "closeTrue" (formula "13"))
                  )
                  (branch "Null Reference (_array = null)"
                     (builtin "One Step Simplification" (formula "14"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
         )
         (branch "Null Reference (_array = null)"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Null Reference (_array = null)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "if x false"
   (builtin "One Step Simplification" (formula "5"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "blockReturn" (formula "4") (term "1"))
   (rule "methodCallReturn" (formula "4") (term "1"))
   (rule "assignment" (formula "4") (term "1"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "methodCallEmpty" (formula "4") (term "1"))
   (rule "tryEmpty" (formula "4") (term "1"))
   (rule "emptyModality" (formula "4") (term "1"))
   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
   (rule "closeTrue" (formula "4"))
)
)

}
