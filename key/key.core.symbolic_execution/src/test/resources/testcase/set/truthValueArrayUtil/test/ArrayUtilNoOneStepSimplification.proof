\profile "Java Profile for Symbolic Execution";

\settings {
"#Proof-Settings-Config-File
#Fri Jan 16 12:06:05 CET 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_INSTANTIATE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=1000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=methodExpansion-methodExpansion:noRestriction,Strings-Strings\\:on , reach-reach\\:on , JavaCard-JavaCard\\:off , assertions-assertions\\:on , bigint-bigint\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , modelFields-modelFields\\:showSatisfiability , initialisation-initialisation\\:disableStaticInitialisation , sequences-sequences\\:on , runtimeExceptions-runtimeExceptions\\:allow , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=Symbolic Execution Strategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Fri Jan 16 12:06:05 CET 2015
name=ArrayUtil[ArrayUtil\\:\\:indexOf([Ljava.lang.Object,ArrayUtil.Filter)].JML normal_behavior operation contract.0
addSymbolicExecutionLabel=true
contract=ArrayUtil[ArrayUtil\\:\\:indexOf([Ljava.lang.Object,ArrayUtil.Filter)].JML normal_behavior operation contract.0
addUninterpretedPredicate=true
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Martin" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "2389")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heapAtPre"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "2"))
(rule "eqSymm" (formula "8") (term "0,0,1,0,1"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "7"))
(rule "concrete_or_2" (formula "3"))
(rule "nonNull" (formula "6") (inst "i=i"))
(rule "greater_literals" (formula "6") (term "0,1"))
(rule "concrete_impl_1" (formula "6") (term "1"))
(rule "sub_literals" (formula "6") (term "2,1,0,1"))
(rule "nonNullZero" (formula "6") (term "1,0,1"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "6"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "7"))
(rule "concrete_or_2" (formula "2"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
(rule "nnf_imp2or" (formula "6") (term "0"))
(rule "nnf_notAnd" (formula "6") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
(rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
(rule "mul_literals" (formula "6") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
(rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
(rule "arrayLengthIsAnInt" (formula "6") (term "1,1,0,0"))
(rule "inInt" (formula "6"))
(rule "true_left" (formula "6"))
(rule "arrayLengthNotNegative" (formula "6") (term "1,1,0,0"))
(rule "assignment" (formula "10") (term "1"))
(rule "sequentialToParallel2" (formula "10"))
(rule "simplifyUpdate3" (formula "10") (term "1,0"))
(rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_indexOf,savedHeapBefore_indexOf,_arrayBefore_indexOf,_filterBefore_indexOf"))
(rule "simplifyUpdate2" (formula "10") (term "1"))
(rule "variableDeclarationAssign" (formula "10") (term "1"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "index_1"))
(rule "unaryMinusInt" (formula "10") (term "1"))
(rule "translateJavaUnaryMinusInt" (formula "10") (term "0,0,1"))
(rule "neg_literal" (formula "10") (term "0,0,1"))
(rule "sequentialToParallel2" (formula "10"))
(rule "simplifyUpdate3" (formula "10") (term "1,0"))
(rule "variableDeclarationAssign" (formula "10") (term "1"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "i"))
(rule "assignment" (formula "10") (term "1"))
(rule "sequentialToParallel2" (formula "10"))
(rule "simplifyUpdate3" (formula "10") (term "1,0"))
(builtin "Loop Invariant" (formula "10") (newnames "variant,b,heapBefore_LOOP,iBefore_LOOP,index_1Before_LOOP,i_0,index_1_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
(branch "Invariant Initially Valid"
   (rule "simplifyUpdate2" (formula "10"))
   (rule "applyOnRigidFormula" (formula "10"))
   (rule "simplifyUpdate2" (formula "10") (term "1"))
   (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "1"))
   (rule "concrete_and_3" (formula "10"))
   (rule "applyOnRigidFormula" (formula "10"))
   (rule "simplifyUpdate2" (formula "10") (term "0"))
   (rule "applyOnRigidFormula" (formula "10") (term "1"))
   (rule "simplifyUpdate1" (formula "10") (term "1,1"))
   (rule "simplifyUpdate1" (formula "10") (term "0,1"))
   (rule "applyOnPV" (formula "10") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "10") (term "0"))
   (rule "simplifyUpdate1" (formula "10") (term "1,0"))
   (rule "applyOnPV" (formula "10") (term "0,0"))
   (rule "qeq_literals" (formula "10") (term "0"))
   (rule "concrete_and_1" (formula "10"))
   (rule "applyOnRigidTerm" (formula "10") (term "1"))
   (rule "applyOnPV" (formula "10") (term "0,1"))
   (rule "inEqSimp_leqRight" (formula "10"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
   (rule "qeq_literals" (formula "1") (term "0"))
   (rule "concrete_and_2" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "Body Preserves Invariant"
   (rule "inInt" (formula "9") (term "0,1,1,1"))
   (rule "concrete_and_1" (formula "9") (term "1,1,1"))
   (rule "inInt" (formula "9") (term "1,1,1"))
   (rule "concrete_and_3" (formula "9") (term "1,1"))
   (rule "translateJavaSubInt" (formula "12") (term "0,1,0,1,1,0,1,1,1,1,1"))
   (rule "translateJavaSubInt" (formula "12") (term "0,0,1,1,1"))
   (rule "simplifyUpdate2" (formula "9"))
   (rule "simplifyUpdate2" (formula "12") (term "1"))
   (rule "simplifyUpdate2" (formula "9") (term "1"))
   (rule "eqSymm" (formula "12") (term "0,0,1,0,0,1,1,0,1,1,1,1,1"))
   (rule "polySimp_elimSub" (formula "12") (term "0,0,1,1,1"))
   (rule "polySimp_elimSub" (formula "12") (term "0,1,0,1,1,0,1,1,1,1,1"))
   (rule "sequentialToParallel2" (formula "9"))
   (rule "simplifyUpdate2" (formula "9"))
   (rule "simplifyUpdate3" (formula "9") (term "1,0"))
   (rule "andLeft" (formula "9"))
   (rule "simplifyUpdate2" (formula "9"))
   (rule "sequentialToParallel2" (formula "13") (term "1"))
   (rule "simplifyUpdate3" (formula "13") (term "1,0,1"))
   (rule "sequentialToParallel2" (formula "13"))
   (rule "simplifyUpdate2" (formula "13"))
   (rule "simplifyUpdate3" (formula "13") (term "1,0"))
   (rule "sequentialToParallel2" (formula "13"))
   (rule "simplifyUpdate3" (formula "13") (term "1,0"))
   (rule "impRight" (formula "13"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "applyOnSkip" (formula "1") (term "1,0"))
   (rule "parallelWithSkip2" (formula "1") (term "0"))
   (rule "applyOnElementary" (formula "14") (term "1,0"))
   (rule "polySimp_addComm0" (formula "14") (term "0,1,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "14") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "11"))
   (rule "simplifyUpdate1" (formula "11") (term "1"))
   (rule "simplifyUpdate1" (formula "11") (term "0"))
   (rule "applyOnPV" (formula "11") (term "0"))
   (rule "applyOnRigidFormula" (formula "10"))
   (rule "applyOnPV" (formula "10") (term "0"))
   (rule "simplifyUpdate1" (formula "10") (term "1"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0"))
   (rule "polySimp_addComm0" (formula "14") (term "0,1,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "1"))
   (rule "applyOnPV" (formula "11") (term "0,1"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,0,1,0"))
   (rule "applyOnPV" (formula "14") (term "0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,0,1,0"))
   (rule "polySimp_addComm0" (formula "14") (term "0,1,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,0,1,0"))
   (rule "applyOnPV" (formula "14") (term "0,1,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "11"))
   (rule "boxToDiamond" (formula "1") (term "1"))
   (rule "notLeft" (formula "1"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_2"))
   (rule "compound_assignment_3_nonsimple" (formula "11") (term "1"))
   (rule "ifElseUnfold" (formula "11") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_4"))
   (rule "compound_assignment_2" (formula "11") (term "1") (inst "#v=x_5"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_5"))
   (rule "less_than_comparison_simple" (formula "11") (term "1"))
   (rule "sequentialToParallel2" (formula "11"))
   (rule "simplifyUpdate2" (formula "11"))
   (rule "simplifyUpdate3" (formula "11") (term "1,0"))
   (rule "applyOnElementary" (formula "11") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "11") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "11") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,1,0"))
   (rule "compound_assignment_1_new" (formula "11") (term "1"))
   (rule "sequentialToParallel2" (formula "11"))
   (rule "simplifyUpdate2" (formula "11"))
   (rule "simplifyUpdate3" (formula "11") (term "1,0"))
   (rule "ifElseSplit" (formula "11"))
   (branch "if x_4 true"
      (rule "simplifyUpdate2" (formula "1"))
      (rule "simplifyUpdate2" (formula "12"))
      (rule "simplifyUpdate3" (formula "12") (term "0"))
      (rule "applySkip2" (formula "12"))
      (rule "applyOnElementary" (formula "1") (term "0"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "applyOnRigidTerm" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "2,0"))
      (rule "ifthenelse_concrete4" (formula "1"))
      (rule "simplifyUpdate1" (formula "1") (term "0,1"))
      (rule "boolean_not_equal_2" (formula "1") (term "1"))
      (rule "concrete_or_4" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "11"))
      (rule "simplifyUpdate1" (formula "11") (term "1"))
      (rule "applyOnPV" (formula "11") (term "0"))
      (rule "ifthenelse_concrete3" (formula "11"))
      (rule "boolean_not_equal_2" (formula "11") (term "1"))
      (rule "concrete_or_4" (formula "11"))
      (rule "inEqSimp_leqRight" (formula "11"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "assignment" (formula "12"))
      (rule "methodCallEmpty" (formula "12") (term "1"))
      (rule "emptyModality" (formula "12") (term "1"))
      (rule "notRight" (formula "12"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "boolean_not_equal_2" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "if x_4 false"
      (rule "false_to_not_true" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "12"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "simplifyUpdate3" (formula "12") (term "1,0"))
      (rule "parallelWithSkip2" (formula "12") (term "0"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnElementary" (formula "11") (term "0"))
      (rule "applyOnRigidFormula" (formula "11"))
      (rule "applyOnPV" (formula "11") (term "0"))
      (rule "simplifyUpdate1" (formula "11") (term "1"))
      (rule "applyOnRigidTerm" (formula "11") (term "0"))
      (rule "simplifyUpdate1" (formula "11") (term "1,0"))
      (rule "simplifyUpdate1" (formula "11") (term "2,0"))
      (rule "ifthenelse_concrete4" (formula "11"))
      (rule "boolean_not_equal_2" (formula "11") (term "1"))
      (rule "concrete_or_4" (formula "11"))
      (rule "notRight" (formula "11"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "ifthenelse_concrete3" (formula "1"))
      (rule "boolean_not_equal_2" (formula "1") (term "1"))
      (rule "concrete_or_4" (formula "1"))
      (rule "compound_less_than_comparison_2" (formula "12") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_6"))
      (rule "assignment" (formula "12") (term "1"))
      (rule "sequentialToParallel2" (formula "12"))
      (rule "simplifyUpdate2" (formula "12"))
      (rule "simplifyUpdate3" (formula "12") (term "1,0"))
      (rule "applyOnElementary" (formula "12") (term "1,0"))
      (rule "applyOnPV" (formula "12") (term "0,1,0"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_7"))
      (rule "assignment_read_length" (formula "12") (term "1"))
      (branch "Normal Execution (_array != null)"
         (rule "simplifyUpdate2" (formula "12"))
         (rule "sequentialToParallel2" (formula "13"))
         (rule "simplifyUpdate2" (formula "13"))
         (rule "simplifyUpdate3" (formula "13") (term "1,0"))
         (rule "applyOnElementary" (formula "13") (term "1,0"))
         (rule "applyOnRigidFormula" (formula "12"))
         (rule "simplifyUpdate1" (formula "12") (term "1"))
         (rule "applyOnPV" (formula "12") (term "0"))
         (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
         (rule "applyOnPV" (formula "12") (term "0,0,1,0"))
         (rule "less_than_comparison_simple" (formula "12") (term "1"))
         (rule "sequentialToParallel2" (formula "12"))
         (rule "simplifyUpdate2" (formula "12"))
         (rule "applyOnElementary" (formula "12") (term "0"))
         (rule "applyOnRigidTerm" (formula "12") (term "0,0"))
         (rule "simplifyUpdate1" (formula "12") (term "2,0,0"))
         (rule "simplifyUpdate1" (formula "12") (term "1,0,0"))
         (rule "applyOnRigidFormula" (formula "12") (term "0,0,0"))
         (rule "simplifyUpdate1" (formula "12") (term "1,0,0,0"))
         (rule "simplifyUpdate1" (formula "12") (term "0,0,0,0"))
         (rule "applyOnPV" (formula "12") (term "1,0,0,0"))
         (rule "applyOnPV" (formula "12") (term "0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "0,0,0,0"))
         (rule "methodCallEmpty" (formula "12") (term "1"))
         (rule "emptyModality" (formula "12") (term "1"))
         (rule "notRight" (formula "12"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "ifthenelse_concrete3" (formula "1"))
         (rule "boolean_not_equal_2" (formula "1") (term "1"))
         (rule "concrete_or_4" (formula "1"))
         (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
         (rule "add_literals" (formula "12") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0"))
         (rule "qeq_literals" (formula "12") (term "0"))
         (rule "concrete_or_1" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "exc_1"))
         (rule "assignment" (formula "14") (term "1"))
         (rule "sequentialToParallel2" (formula "14"))
         (rule "simplifyUpdate3" (formula "14") (term "1,0"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "thrownExc"))
         (rule "ifUnfold" (formula "14") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_8"))
         (rule "compound_assignment_3_nonsimple" (formula "14") (term "1"))
         (rule "ifElseUnfold" (formula "14") (term "1") (inst "#boolv=x_9"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_9"))
         (rule "compound_assignment_2" (formula "14") (term "1") (inst "#v=x_10"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_10"))
         (rule "less_than_comparison_simple" (formula "14") (term "1"))
         (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,1"))
         (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,1"))
         (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1"))
         (rule "mul_literals" (formula "14") (term "1,0,0,0,1"))
         (rule "sequentialToParallel2" (formula "14"))
         (rule "simplifyUpdate3" (formula "14") (term "1,0"))
         (rule "applyOnElementary" (formula "14") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "14") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0"))
         (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,0"))
         (rule "applyOnPV" (formula "14") (term "0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "14") (term "1,0,0,1,0"))
         (rule "replace_known_left" (formula "14") (term "0,0,1,0") (ifseqformula "2"))
         (rule "ifthenelse_true" (formula "14") (term "0,1,0"))
         (rule "compound_assignment_1_new" (formula "14") (term "1"))
         (rule "sequentialToParallel2" (formula "14"))
         (rule "simplifyUpdate3" (formula "14") (term "1,0"))
         (rule "applyOnElementary" (formula "14") (term "1,0"))
         (rule "simplifyUpdate2" (formula "14"))
         (rule "ifElseSplit" (formula "14"))
         (branch "if x_9 true"
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "15"))
            (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
            (rule "simplifyUpdate1" (formula "1") (term "1,0,0"))
            (rule "simplifyUpdate1" (formula "1") (term "2,0,0"))
            (rule "applyOnRigidFormula" (formula "1") (term "0,0,0"))
            (rule "applyOnPV" (formula "1") (term "0,0,0,0"))
            (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
            (rule "boolean_equal" (formula "1") (term "0,0,0"))
            (rule "ifthenelse_true" (formula "1") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "boolean_not_equal_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_9 false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "15"))
            (rule "applyOnRigidFormula" (formula "12"))
            (rule "simplifyUpdate1" (formula "12") (term "1"))
            (rule "applyOnPV" (formula "12") (term "0"))
            (rule "applyOnRigidTerm" (formula "12") (term "0"))
            (rule "simplifyUpdate1" (formula "12") (term "2,0"))
            (rule "ifthenelse_concrete4" (formula "12"))
            (rule "simplifyUpdate1" (formula "12") (term "0,1"))
            (rule "boolean_not_equal_2" (formula "12") (term "1"))
            (rule "concrete_or_4" (formula "12"))
            (rule "notRight" (formula "12"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "boolean_equal" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "compound_less_than_comparison_2" (formula "14") (term "1") (inst "#v1=x_10") (inst "#v0=x_9"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_11"))
            (rule "assignment" (formula "14") (term "1"))
            (rule "sequentialToParallel2" (formula "14"))
            (rule "simplifyUpdate3" (formula "14") (term "1,0"))
            (rule "applyOnElementary" (formula "14") (term "1,0"))
            (rule "applyOnPV" (formula "14") (term "0,1,0"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_12"))
            (rule "assignment_read_length" (formula "14") (term "1"))
            (branch "Normal Execution (_array != null)"
               (rule "simplifyUpdate2" (formula "14"))
               (rule "applyOnRigidFormula" (formula "14"))
               (rule "applyOnPV" (formula "14") (term "0"))
               (rule "simplifyUpdate1" (formula "14") (term "1"))
               (rule "sequentialToParallel2" (formula "14"))
               (rule "simplifyUpdate3" (formula "14") (term "1,0"))
               (rule "applyOnElementary" (formula "14") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "14") (term "0,1,0"))
               (rule "applyOnPV" (formula "14") (term "0,0,1,0"))
               (rule "less_than_comparison_simple" (formula "14") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1"))
               (rule "polySimp_addComm1" (formula "14") (term "0,0,0,0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,0,1"))
               (rule "polySimp_elimOne" (formula "14") (term "0,0,0,0,1"))
               (rule "sequentialToParallel2" (formula "14"))
               (rule "simplifyUpdate3" (formula "14") (term "1,0"))
               (rule "applyOnElementary" (formula "14") (term "1,0"))
               (rule "simplifyUpdate2" (formula "14"))
               (rule "applyOnRigidTerm" (formula "14") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0"))
               (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "14") (term "1,0,0,1,0"))
               (rule "simplifyUpdate1" (formula "14") (term "0,0,0,1,0"))
               (rule "applyOnPV" (formula "14") (term "0,0,0,1,0"))
               (rule "applyOnRigidTerm" (formula "14") (term "1,0,0,1,0"))
               (rule "simplifyUpdate1" (formula "14") (term "0,1,0,0,1,0"))
               (rule "applyOnPV" (formula "14") (term "1,1,0,0,1,0"))
               (rule "replace_known_left" (formula "14") (term "0,0,1,0") (ifseqformula "1"))
               (rule "ifthenelse_true" (formula "14") (term "0,1,0"))
               (rule "blockEmpty" (formula "14") (term "1"))
               (rule "ifSplit" (formula "14"))
               (branch "if x_8 true"
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "15"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "boolean_equal" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "ifElseUnfold" (formula "14") (term "1") (inst "#boolv=x"))
                  (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_13"))
                  (rule "methodCallWithAssignmentUnfoldArguments" (formula "14") (term "1"))
                  (rule "variableDeclarationAssign" (formula "14") (term "1"))
                  (rule "variableDeclaration" (formula "14") (term "1") (newnames "var"))
                  (rule "assignment" (formula "14") (term "1"))
                  (rule "sequentialToParallel2" (formula "14"))
                  (rule "simplifyUpdate3" (formula "14") (term "1,0"))
                  (rule "applyOnElementary" (formula "14") (term "1,0"))
                  (rule "applyOnPV" (formula "14") (term "0,1,0"))
                  (rule "variableDeclarationAssign" (formula "14") (term "1"))
                  (rule "variableDeclaration" (formula "14") (term "1") (newnames "var_1"))
                  (rule "assignment_array2" (formula "14") (term "1"))
                  (branch "Normal Execution (_array != null)"
                     (rule "simplifyUpdate2" (formula "14"))
                     (rule "orRight" (formula "14"))
                     (rule "simplifyUpdate2" (formula "15"))
                     (rule "orRight" (formula "14"))
                     (rule "simplifyUpdate2" (formula "14"))
                     (rule "applyOnRigidFormula" (formula "16"))
                     (rule "applyOnPV" (formula "16") (term "0"))
                     (rule "simplifyUpdate1" (formula "16") (term "1"))
                     (rule "applyOnRigidFormula" (formula "15"))
                     (rule "simplifyUpdate1" (formula "15") (term "0"))
                     (rule "simplifyUpdate1" (formula "15") (term "1"))
                     (rule "applyOnPV" (formula "15") (term "1"))
                     (rule "applyOnRigidFormula" (formula "14"))
                     (rule "applyOnPV" (formula "14") (term "0"))
                     (rule "simplifyUpdate1" (formula "14") (term "1"))
                     (rule "applyOnRigidTerm" (formula "14") (term "0"))
                     (rule "applyOnPV" (formula "14") (term "0,0"))
                     (rule "inEqSimp_ltRight" (formula "15"))
                     (rule "times_zero_1" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "14"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "sequentialToParallel2" (formula "14"))
                     (rule "simplifyUpdate3" (formula "14") (term "1,0"))
                     (rule "applyOnElementary" (formula "14") (term "1,0"))
                     (rule "applyOnRigidTerm" (formula "14") (term "0,1,0"))
                     (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0"))
                     (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0"))
                     (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0"))
                     (rule "applyOnPV" (formula "14") (term "1,0,1,0"))
                     (rule "applyOnRigidTerm" (formula "14") (term "2,0,1,0"))
                     (rule "applyOnPV" (formula "14") (term "0,2,0,1,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "0,1,0") (ifseqformula "3"))
                     (rule "allLeft" (formula "10") (inst "t=i_0"))
                     (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "10") (term "1,0") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0"))
                     (rule "add_literals" (formula "10") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0,1,0"))
                     (rule "add_literals" (formula "10") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "10") (term "0,1,0"))
                     (rule "concrete_and_2" (formula "10") (term "1,0"))
                     (rule "concrete_or_4" (formula "10") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "13"))
                     (rule "qeq_literals" (formula "10") (term "0,0"))
                     (rule "concrete_and_2" (formula "10") (term "0"))
                     (rule "concrete_or_2" (formula "10"))
                     (rule "notLeft" (formula "10"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "13"))
                     (rule "concrete_or_2" (formula "1"))
                     (builtin "Use Operation Contract" (formula "16") (newnames "heapBefore_accept,result_0,exc_0") (contract "ArrayUtil.Filter[ArrayUtil.Filter::accept(java.lang.Object)].JML normal_behavior operation contract.0"))
                     (branch "Post (accept)"
                        (rule "simplifyUpdate2" (formula "13"))
                        (rule "simplifyUpdate2" (formula "13") (term "1"))
                        (rule "andLeft" (formula "13"))
                        (rule "simplifyUpdate2" (formula "13"))
                        (rule "andLeft" (formula "14"))
                        (rule "simplifyUpdate2" (formula "15"))
                        (rule "simplifyUpdate2" (formula "18"))
                        (rule "applyOnRigidFormula" (formula "14"))
                        (rule "simplifyUpdate1" (formula "14") (term "0"))
                        (rule "applyOnPV" (formula "14") (term "1"))
                        (rule "assignment" (formula "17") (term "1"))
                        (rule "sequentialToParallel2" (formula "17"))
                        (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                        (rule "blockEmpty" (formula "17") (term "1"))
                        (rule "ifElseSplit" (formula "17"))
                        (branch "if x_13 true"
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "18"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "assignment" (formula "18") (term "1"))
                           (rule "simplifyUpdate2" (formula "18"))
                           (rule "simplifyUpdate2" (formula "18") (term "1"))
                           (rule "tryEmpty" (formula "18") (term "1"))
                           (rule "methodCallEmpty" (formula "18") (term "1"))
                           (rule "emptyModality" (formula "18") (term "1"))
                           (rule "applyOnRigidFormula" (formula "18"))
                           (rule "simplifyUpdate2" (formula "18") (term "0"))
                           (rule "simplifyUpdate2" (formula "18") (term "1"))
                           (rule "applyOnRigidFormula" (formula "18") (term "0"))
                           (rule "simplifyUpdate2" (formula "18") (term "0,0"))
                           (rule "simplifyUpdate2" (formula "18") (term "1,0"))
                           (rule "applyOnRigidFormula" (formula "18") (term "1"))
                           (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "18") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "18") (term "0,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "1,0,0"))
                           (rule "applyOnPV" (formula "18") (term "0,0,0"))
                           (rule "boolean_not_equal_2" (formula "18") (term "0,0"))
                           (rule "concrete_impl_2" (formula "18") (term "0"))
                           (rule "concrete_and_1" (formula "18"))
                           (rule "impRight" (formula "18"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "19"))
                           (rule "simplifyUpdate2" (formula "19") (term "0"))
                           (rule "simplifyUpdate2" (formula "19") (term "1"))
                           (rule "applyOnRigidFormula" (formula "15"))
                           (rule "applyOnPV" (formula "15") (term "0"))
                           (rule "simplifyUpdate1" (formula "15") (term "1"))
                           (rule "boolean_not_equal_2" (formula "15"))
                           (rule "false_right" (formula "15"))
                           (rule "applyOnRigidFormula" (formula "18") (term "0"))
                           (rule "simplifyUpdate2" (formula "18") (term "0,0"))
                           (rule "simplifyUpdate2" (formula "18") (term "1,0"))
                           (rule "applyOnRigidFormula" (formula "18") (term "1"))
                           (rule "simplifyUpdate1" (formula "18") (term "0,1"))
                           (rule "simplifyUpdate1" (formula "18") (term "1,1"))
                           (rule "simplifyUpdate1" (formula "18") (term "2,1"))
                           (rule "simplifyUpdate1" (formula "18") (term "3,1"))
                           (rule "applyOnPV" (formula "18") (term "1,1"))
                           (rule "applyOnPV" (formula "18") (term "2,1"))
                           (rule "applyOnPV" (formula "18") (term "3,1"))
                           (rule "applyOnRigidFormula" (formula "18") (term "0,0"))
                           (rule "simplifyUpdate2" (formula "18") (term "0,0,0"))
                           (rule "simplifyUpdate2" (formula "18") (term "1,0,0"))
                           (rule "applyOnRigidFormula" (formula "18") (term "1,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "1,1,0"))
                           (rule "applyOnPV" (formula "18") (term "1,1,0"))
                           (rule "applyOnRigidFormula" (formula "18") (term "0,0,0"))
                           (rule "simplifyUpdate2" (formula "18") (term "0,0,0,0"))
                           (rule "applyOnRigidFormula" (formula "18") (term "1,0,0"))
                           (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "0,0,1,0"))
                           (rule "polySimp_addComm0" (formula "18") (term "0,1,0"))
                           (rule "applyOnRigidFormula" (formula "18") (term "1,0,0,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "0,1,0,0,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "1,1,0,0,0"))
                           (rule "applyOnPV" (formula "18") (term "1,1,0,0,0"))
                           (rule "applyOnRigidFormula" (formula "18") (term "0,0,0,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "1,0,0,0,0"))
                           (rule "applyOnPV" (formula "18") (term "0,0,0,0,0"))
                           (rule "replace_known_left" (formula "18") (term "0,0,0,0") (ifseqformula "13"))
                           (rule "concrete_and_1" (formula "18") (term "0,0,0"))
                           (rule "applyOnRigidFormula" (formula "18") (term "0,1,0,0"))
                           (rule "precOfInt" (formula "18") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "18") (term "0,0,0,0"))
                           (rule "applyOnPV" (formula "18") (term "0,0,0,0,0"))
                           (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0,0"))
                           (rule "applyOnRigidTerm" (formula "18") (term "1,0,1,1,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "1,1,0,1,1,0"))
                           (rule "applyOnPV" (formula "18") (term "0,1,0,1,1,0"))
                           (rule "polySimp_addComm0" (formula "18") (term "0,1,1,0"))
                           (rule "applyOnRigidTerm" (formula "18") (term "0,1,0,1,0"))
                           (rule "applyOnPV" (formula "18") (term "0,0,1,0,1,0"))
                           (rule "applyOnRigidTerm" (formula "18") (term "1,1,0,1,0"))
                           (rule "applyOnPV" (formula "18") (term "0,1,1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "1,1,1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "18") (term "1,0,1,0"))
                           (rule "applyOnRigidTerm" (formula "18") (term "0,0,0,1,0,0"))
                           (rule "applyOnPV" (formula "18") (term "0,0,0,0,1,0,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "2,0,0,0,1,0,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "1,0,0,0,1,0,0"))
                           (rule "eqClose" (formula "18") (term "0,0,1,0,0"))
                           (rule "applyOnRigidTerm" (formula "18") (term "1,0,1,1,0"))
                           (rule "applyOnPV" (formula "18") (term "0,1,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,1,0"))
                           (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "0,1,0,0,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "18") (term "0,0,1,1,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "18") (term "0,1,1,0"))
                           (rule "add_literals" (formula "18") (term "1,1,0,1,1,0"))
                           (rule "times_zero_1" (formula "18") (term "1,0,1,1,0"))
                           (rule "add_zero_right" (formula "18") (term "0,1,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,1,1,0"))
                           (rule "add_literals" (formula "18") (term "1,1,0,1,1,0"))
                           (rule "times_zero_1" (formula "18") (term "1,0,1,1,0"))
                           (rule "add_zero_right" (formula "18") (term "0,1,1,0"))
                           (rule "leq_literals" (formula "18") (term "1,1,0"))
                           (rule "concrete_and_4" (formula "18") (term "1,0"))
                           (rule "concrete_and_4" (formula "18") (term "0"))
                           (rule "concrete_and_2" (formula "18"))
                           (rule "false_right" (formula "18"))
                           (opengoal " ")
                        )
                        (branch "if x_13 false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "18"))
                           (rule "applyOnRigidFormula" (formula "14"))
                           (rule "applyOnPV" (formula "14") (term "0"))
                           (rule "simplifyUpdate1" (formula "14") (term "1"))
                           (rule "postincrement" (formula "18") (term "1"))
                           (rule "compound_int_cast_expression" (formula "18") (term "1") (inst "#v=x"))
                           (rule "variableDeclarationAssign" (formula "18") (term "1"))
                           (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_14"))
                           (rule "remove_parentheses_right" (formula "18") (term "1"))
                           (rule "assignmentAdditionInt" (formula "18") (term "1"))
                           (rule "translateJavaAddInt" (formula "18") (term "0,0,1"))
                           (rule "polySimp_addComm0" (formula "18") (term "0,0,1"))
                           (rule "sequentialToParallel2" (formula "18"))
                           (rule "simplifyUpdate3" (formula "18") (term "1,0"))
                           (rule "applyOnElementary" (formula "18") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "18") (term "1,0,1,0"))
                           (rule "widening_identity_cast_5" (formula "18") (term "1"))
                           (rule "assignment" (formula "18") (term "1"))
                           (rule "sequentialToParallel2" (formula "18"))
                           (rule "simplifyUpdate3" (formula "18") (term "1,0"))
                           (rule "applyOnElementary" (formula "18") (term "1,0"))
                           (rule "applyOnPV" (formula "18") (term "0,1,0"))
                           (rule "simplifyUpdate2" (formula "18"))
                           (rule "tryEmpty" (formula "18") (term "1"))
                           (rule "methodCallEmpty" (formula "18") (term "1"))
                           (rule "emptyModality" (formula "18") (term "1"))
                           (rule "applyOnRigidFormula" (formula "18"))
                           (rule "simplifyUpdate2" (formula "18") (term "1"))
                           (rule "simplifyUpdate2" (formula "18") (term "0"))
                           (rule "applyOnRigidFormula" (formula "18") (term "1"))
                           (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "18") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "18") (term "0"))
                           (rule "simplifyUpdate2" (formula "18") (term "0,0"))
                           (rule "simplifyUpdate2" (formula "18") (term "1,0"))
                           (rule "applyOnRigidFormula" (formula "18") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                           (rule "simplifyUpdate2" (formula "18") (term "0,1,1"))
                           (rule "applyOnRigidFormula" (formula "18") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "18") (term "0,0"))
                           (rule "applyOnPV" (formula "18") (term "0,0,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "1,0,0"))
                           (rule "boolean_not_equal_2" (formula "18") (term "0,0"))
                           (rule "concrete_impl_2" (formula "18") (term "0"))
                           (rule "concrete_and_1" (formula "18"))
                           (rule "impRight" (formula "18"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "19") (term "0"))
                           (rule "simplifyUpdate2" (formula "19") (term "0,0"))
                           (rule "simplifyUpdate2" (formula "19") (term "1,0"))
                           (rule "applyOnRigidFormula" (formula "19") (term "1"))
                           (rule "simplifyUpdate1" (formula "19") (term "2,1"))
                           (rule "simplifyUpdate1" (formula "19") (term "0,1"))
                           (rule "simplifyUpdate1" (formula "19") (term "3,1"))
                           (rule "simplifyUpdate1" (formula "19") (term "1,1"))
                           (rule "applyOnPV" (formula "19") (term "2,1"))
                           (rule "applyOnPV" (formula "19") (term "3,1"))
                           (rule "applyOnPV" (formula "19") (term "1,1"))
                           (rule "applyOnRigidFormula" (formula "14"))
                           (rule "simplifyUpdate1" (formula "14") (term "1"))
                           (rule "applyOnPV" (formula "14") (term "0"))
                           (rule "boolean_not_equal_2" (formula "14"))
                           (rule "false_right" (formula "14"))
                           (rule "applyOnRigidFormula" (formula "18") (term "0,0"))
                           (rule "simplifyUpdate2" (formula "18") (term "0,0,0"))
                           (rule "simplifyUpdate2" (formula "18") (term "1,0,0"))
                           (rule "applyOnRigidFormula" (formula "18") (term "1,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "1,1,0"))
                           (rule "applyOnPV" (formula "18") (term "1,1,0"))
                           (rule "applyOnRigidFormula" (formula "18") (term "0,0,0"))
                           (rule "simplifyUpdate2" (formula "18") (term "0,0,0,0"))
                           (rule "applyOnRigidFormula" (formula "18") (term "1,0,0"))
                           (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "18") (term "0,1,0"))
                           (rule "applyOnRigidFormula" (formula "18") (term "1,0,0,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "0,1,0,0,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "1,1,0,0,0"))
                           (rule "applyOnPV" (formula "18") (term "1,1,0,0,0"))
                           (rule "applyOnRigidFormula" (formula "18") (term "0,0,0,0"))
                           (rule "applyOnPV" (formula "18") (term "0,0,0,0,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "1,0,0,0,0"))
                           (rule "applyOnRigidFormula" (formula "18") (term "0,1,0,0"))
                           (rule "precOfInt" (formula "18") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "18") (term "0,1,0,0,0"))
                           (rule "applyOnPV" (formula "18") (term "0,0,1,0,0,0"))
                           (rule "replace_known_left" (formula "18") (term "1,0,0,0") (ifseqformula "2"))
                           (rule "concrete_and_3" (formula "18") (term "0,0,0"))
                           (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0,0"))
                           (rule "applyOnRigidTerm" (formula "18") (term "0,0,1,1,0"))
                           (rule "applyOnPV" (formula "18") (term "0,0,0,1,1,0"))
                           (rule "applyOnRigidTerm" (formula "18") (term "1,0,1,1,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "1,1,0,1,1,0"))
                           (rule "applyOnPV" (formula "18") (term "0,1,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,0,1,1,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,0,1,1,0"))
                           (rule "polySimp_addComm0" (formula "18") (term "0,1,1,0"))
                           (rule "applyOnRigidTerm" (formula "18") (term "1,1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "1,1,1,0,1,0"))
                           (rule "applyOnPV" (formula "18") (term "0,1,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,1,0,1,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "18") (term "1,0,1,0"))
                           (rule "applyOnRigidTerm" (formula "18") (term "0,0,0,1,0,0"))
                           (rule "applyOnPV" (formula "18") (term "0,0,0,0,1,0,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "2,0,0,0,1,0,0"))
                           (rule "simplifyUpdate1" (formula "18") (term "1,0,0,0,1,0,0"))
                           (rule "eqClose" (formula "18") (term "0,0,1,0,0"))
                           (rule "applyOnRigidTerm" (formula "18") (term "1,1,0,1,0"))
                           (rule "applyOnPV" (formula "18") (term "0,1,1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,1,0"))
                           (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "0,1,0,0,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "18") (term "0,0,1,1,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "18") (term "0,1,1,0"))
                           (rule "add_literals" (formula "18") (term "1,1,0,1,1,0"))
                           (rule "times_zero_1" (formula "18") (term "1,0,1,1,0"))
                           (rule "add_zero_right" (formula "18") (term "0,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "18") (term "0,0,1,1,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,1,1,0"))
                           (rule "add_zero_left" (formula "18") (term "0,0,1,1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,1,0"))
                           (rule "add_literals" (formula "18") (term "1,0,1,1,0"))
                           (rule "times_zero_1" (formula "18") (term "0,1,1,0"))
                           (rule "leq_literals" (formula "18") (term "1,1,0"))
                           (rule "concrete_and_3" (formula "18") (term "1,0"))
                           (rule "inEqSimp_homoInEq0" (formula "18") (term "1,0"))
                           (rule "times_zero_2" (formula "18") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "18") (term "0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
                           (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0"))
                           (rule "replace_known_left" (formula "18") (term "1,0") (ifseqformula "2"))
                           (rule "concrete_and_3" (formula "18") (term "0"))
                           (rule "inEqSimp_subsumption1" (formula "18") (term "0,0") (ifseqformula "12"))
                           (rule "leq_literals" (formula "18") (term "0,0,0"))
                           (rule "concrete_or_1" (formula "18") (term "0,0"))
                           (rule "concrete_and_1" (formula "18") (term "0"))
                           (rule "all_unused" (formula "18") (term "0,0"))
                           (rule "all_unused" (formula "18") (term "0"))
                           (rule "concrete_and_1" (formula "18"))
                           (opengoal " ")
                        )
                     )
                     (branch "Exceptional Post (accept)"
                        (rule "simplifyUpdate2" (formula "13"))
                        (rule "simplifyUpdate2" (formula "13") (term "1"))
                        (rule "andLeft" (formula "13"))
                        (rule "simplifyUpdate2" (formula "13"))
                        (rule "andLeft" (formula "14"))
                        (rule "simplifyUpdate2" (formula "15"))
                        (rule "andLeft" (formula "13"))
                        (rule "notLeft" (formula "13"))
                        (rule "close" (formula "16") (ifseqformula "15"))
                     )
                     (branch "Pre (accept)"
                        (rule "simplifyUpdate2" (formula "16"))
                        (rule "simplifyUpdate2" (formula "16") (term "1"))
                        (rule "applyOnRigidFormula" (formula "16"))
                        (rule "simplifyUpdate2" (formula "16") (term "0"))
                        (rule "simplifyUpdate2" (formula "16") (term "1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0"))
                        (rule "simplifyUpdate1" (formula "16") (term "0,0"))
                        (rule "applyOnPV" (formula "16") (term "1,0"))
                        (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "8"))
                        (rule "concrete_and_1" (formula "16"))
                        (rule "applyOnRigidFormula" (formula "16"))
                        (rule "simplifyUpdate2" (formula "16") (term "0"))
                        (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "4"))
                        (rule "concrete_and_1" (formula "16"))
                        (rule "orRight" (formula "16"))
                        (rule "applyOnRigidFormula" (formula "17"))
                        (rule "simplifyUpdate1" (formula "17") (term "1"))
                        (rule "applyOnRigidFormula" (formula "16"))
                        (rule "applyOnPV" (formula "16") (term "0"))
                        (rule "simplifyUpdate1" (formula "16") (term "1"))
                        (rule "applyOnRigidTerm" (formula "16") (term "0"))
                        (rule "simplifyUpdate1" (formula "16") (term "2,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "0,0"))
                        (rule "applyOnPV" (formula "16") (term "1,0"))
                        (rule "close" (formula "16") (ifseqformula "1"))
                     )
                     (branch "Null reference (var = null)"
                        (rule "simplifyUpdate2" (formula "16"))
                        (rule "notRight" (formula "16"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "close" (formula "16") (ifseqformula "1"))
                     )
                  )
                  (branch "Null Reference (_array = null)"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "close" (formula "13") (ifseqformula "1"))
                  )
                  (branch "Index Out of Bounds (_array != null, but i Out of Bounds!)"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1"))
                     (rule "applyOnRigidFormula" (formula "13"))
                     (rule "simplifyUpdate1" (formula "13") (term "1"))
                     (rule "applyOnPV" (formula "13") (term "0"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "0,0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                     (rule "applyOnPV" (formula "1") (term "1,0"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                     (rule "applyOnPV" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "leq_literals" (formula "1") (term "0,0"))
                     (rule "concrete_and_2" (formula "1") (term "0"))
                     (rule "concrete_or_2" (formula "1"))
                     (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "12") (term "0"))
                     (rule "concrete_and_2" (formula "12"))
                     (rule "closeFalse" (formula "12"))
                  )
               )
               (branch "if x_8 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "simplifyUpdate2" (formula "15"))
                  (rule "applyOnRigidFormula" (formula "12"))
                  (rule "applyOnPV" (formula "12") (term "0"))
                  (rule "simplifyUpdate1" (formula "12") (term "1"))
                  (rule "boolean_equal" (formula "12"))
                  (rule "closeTrue" (formula "12"))
               )
            )
            (branch "Null Reference (_array = null)"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "close" (formula "13") (ifseqformula "1"))
            )
         )
      )
      (branch "Null Reference (_array = null)"
         (rule "simplifyUpdate2" (formula "13"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "close" (formula "14") (ifseqformula "1"))
      )
   )
)
(branch "Use Case"
   (rule "false_to_not_true" (formula "12") (term "0,0,1,1"))
   (rule "inInt" (formula "9") (term "1,1,1,1"))
   (rule "concrete_and_3" (formula "9") (term "1,1,1"))
   (rule "inInt" (formula "9") (term "1,1,1"))
   (rule "concrete_and_3" (formula "9") (term "1,1"))
   (rule "simplifyUpdate2" (formula "9"))
   (rule "simplifyUpdate2" (formula "9") (term "1"))
   (rule "sequentialToParallel2" (formula "12"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "simplifyUpdate3" (formula "12") (term "1,0"))
   (rule "sequentialToParallel2" (formula "9"))
   (rule "simplifyUpdate2" (formula "9"))
   (rule "simplifyUpdate3" (formula "9") (term "1,0"))
   (rule "andLeft" (formula "9"))
   (rule "simplifyUpdate2" (formula "9"))
   (rule "applyOnRigidFormula" (formula "10"))
   (rule "simplifyUpdate1" (formula "10") (term "1"))
   (rule "simplifyUpdate1" (formula "10") (term "0"))
   (rule "applyOnPV" (formula "10") (term "0"))
   (rule "applyOnRigidFormula" (formula "9"))
   (rule "simplifyUpdate1" (formula "9") (term "1"))
   (rule "applyOnPV" (formula "9") (term "0"))
   (rule "applyOnRigidTerm" (formula "10") (term "1"))
   (rule "applyOnPV" (formula "10") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "10"))
   (rule "methodCallReturn" (formula "13") (term "1,0,1"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "b_1"))
   (rule "compound_assignment_3_nonsimple" (formula "13") (term "1"))
   (rule "ifElseUnfold" (formula "13") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "x"))
   (rule "compound_assignment_2" (formula "13") (term "1") (inst "#v=x_1"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_1"))
   (rule "less_than_comparison_simple" (formula "13") (term "1"))
   (rule "sequentialToParallel2" (formula "13"))
   (rule "simplifyUpdate2" (formula "13"))
   (rule "simplifyUpdate3" (formula "13") (term "1,0"))
   (rule "applyOnElementary" (formula "13") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "13") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "13") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "13") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "13") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "13") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "13") (term "1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,0"))
   (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "13") (term "0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1,0"))
   (rule "mul_literals" (formula "13") (term "1,0,0,1,0"))
   (rule "compound_assignment_1_new" (formula "13") (term "1"))
   (rule "sequentialToParallel2" (formula "13"))
   (rule "simplifyUpdate2" (formula "13"))
   (rule "simplifyUpdate3" (formula "13") (term "1,0"))
   (rule "ifElseSplit" (formula "13"))
   (branch "if x true"
      (rule "simplifyUpdate2" (formula "1"))
      (rule "simplifyUpdate2" (formula "14"))
      (rule "applyOnSkip" (formula "14") (term "1,0"))
      (rule "parallelWithSkip2" (formula "14") (term "0"))
      (rule "applyOnElementary" (formula "1") (term "0"))
      (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
      (rule "simplifyUpdate1" (formula "1") (term "1,0,0"))
      (rule "simplifyUpdate1" (formula "1") (term "2,0,0"))
      (rule "applyOnRigidFormula" (formula "1") (term "0,0,0"))
      (rule "applyOnPV" (formula "1") (term "0,0,0,0"))
      (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
      (rule "ifthenelse_concrete3" (formula "1") (term "0,0,0"))
      (rule "boolean_not_equal_2" (formula "1") (term "1,0,0,0"))
      (rule "concrete_or_4" (formula "1") (term "0,0,0"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "ifthenelse_concrete4" (formula "1"))
      (rule "boolean_not_equal_2" (formula "1") (term "1"))
      (rule "concrete_or_4" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_leqRight" (formula "11"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "assignment" (formula "14") (term "1"))
      (rule "sequentialToParallel2" (formula "14"))
      (rule "simplifyUpdate3" (formula "14") (term "1,0"))
      (rule "methodCallEmpty" (formula "14") (term "1"))
      (rule "emptyModality" (formula "14") (term "1"))
      (rule "impRight" (formula "14"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "simplifyUpdate2" (formula "15"))
      (rule "applyOnRigidFormula" (formula "12"))
      (rule "applyOnPV" (formula "12") (term "0"))
      (rule "simplifyUpdate1" (formula "12") (term "1"))
      (rule "boolean_not_equal_2" (formula "12"))
      (rule "false_right" (formula "12"))
      (rule "assignment" (formula "14") (term "1"))
      (rule "simplifyUpdate2" (formula "14") (term "1"))
      (rule "simplifyUpdate2" (formula "14"))
      (rule "methodCallEmpty" (formula "14") (term "1"))
      (rule "tryEmpty" (formula "14") (term "1"))
      (rule "emptyModality" (formula "14") (term "1"))
      (rule "applyOnRigidFormula" (formula "14"))
      (rule "simplifyUpdate2" (formula "14") (term "1"))
      (rule "simplifyUpdate2" (formula "14") (term "0"))
      (rule "applyOnRigidFormula" (formula "14") (term "1"))
      (rule "applyOnRigidFormula" (formula "14") (term "0"))
      (rule "simplifyUpdate2" (formula "14") (term "0,0"))
      (rule "applyOnRigidFormula" (formula "14") (term "0,1"))
      (rule "applyOnRigidFormula" (formula "14") (term "1,0"))
      (rule "simplifyUpdate1" (formula "14") (term "3,1,0"))
      (rule "simplifyUpdate1" (formula "14") (term "2,1,0"))
      (rule "simplifyUpdate1" (formula "14") (term "1,1,0"))
      (rule "simplifyUpdate1" (formula "14") (term "0,1,0"))
      (rule "applyOnPV" (formula "14") (term "3,1,0"))
      (rule "applyOnPV" (formula "14") (term "2,1,0"))
      (rule "applyOnPV" (formula "14") (term "1,1,0"))
      (rule "applyOnRigidFormula" (formula "14") (term "0,0"))
      (rule "simplifyUpdate1" (formula "14") (term "1,0,0"))
      (rule "applyOnPV" (formula "14") (term "0,0,0"))
      (rule "eqClose" (formula "14") (term "0,0"))
      (rule "concrete_and_1" (formula "14") (term "0"))
      (rule "applyOnRigidFormula" (formula "14") (term "0,0,1"))
      (rule "simplifyUpdate1" (formula "14") (term "1,0,0,1"))
      (rule "applyOnRigidTerm" (formula "14") (term "0,0,0,1"))
      (rule "simplifyUpdate1" (formula "14") (term "2,0,0,0,1"))
      (rule "simplifyUpdate1" (formula "14") (term "1,0,0,0,1"))
      (rule "applyOnPV" (formula "14") (term "0,0,0,0,1"))
      (rule "eqClose" (formula "14") (term "0,0,1"))
      (rule "all_unused" (formula "14") (term "0,1"))
      (rule "all_unused" (formula "14") (term "1"))
      (rule "concrete_and_3" (formula "14"))
      (opengoal " ")
   )
   (branch "if x false"
      (rule "false_to_not_true" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "14"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "simplifyUpdate3" (formula "14") (term "1,0"))
      (rule "parallelWithSkip2" (formula "14") (term "0"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnElementary" (formula "11") (term "0"))
      (rule "applyOnRigidFormula" (formula "11"))
      (rule "simplifyUpdate1" (formula "11") (term "1"))
      (rule "applyOnPV" (formula "11") (term "0"))
      (rule "applyOnRigidTerm" (formula "11") (term "0"))
      (rule "simplifyUpdate1" (formula "11") (term "1,0"))
      (rule "simplifyUpdate1" (formula "11") (term "2,0"))
      (rule "ifthenelse_concrete4" (formula "11"))
      (rule "boolean_not_equal_2" (formula "11") (term "1"))
      (rule "concrete_or_4" (formula "11"))
      (rule "notRight" (formula "11"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "ifthenelse_concrete3" (formula "1"))
      (rule "boolean_not_equal_2" (formula "1") (term "1"))
      (rule "concrete_or_4" (formula "1"))
      (rule "compound_less_than_comparison_2" (formula "14") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_2"))
      (rule "assignment" (formula "14") (term "1"))
      (rule "sequentialToParallel2" (formula "14"))
      (rule "simplifyUpdate3" (formula "14") (term "1,0"))
      (rule "applyOnElementary" (formula "14") (term "1,0"))
      (rule "applyOnPV" (formula "14") (term "0,1,0"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_3"))
      (rule "assignment_read_length" (formula "14") (term "1"))
      (branch "Normal Execution (_array != null)"
         (rule "simplifyUpdate2" (formula "14"))
         (rule "sequentialToParallel2" (formula "15"))
         (rule "simplifyUpdate3" (formula "15") (term "1,0"))
         (rule "applyOnElementary" (formula "15") (term "1,0"))
         (rule "applyOnRigidFormula" (formula "14"))
         (rule "simplifyUpdate1" (formula "14") (term "1"))
         (rule "applyOnPV" (formula "14") (term "0"))
         (rule "applyOnRigidTerm" (formula "14") (term "0,1,0"))
         (rule "applyOnPV" (formula "14") (term "0,0,1,0"))
         (rule "less_than_comparison_simple" (formula "14") (term "1"))
         (rule "sequentialToParallel2" (formula "14"))
         (rule "simplifyUpdate2" (formula "14"))
         (rule "simplifyUpdate3" (formula "14") (term "1,0"))
         (rule "applyOnElementary" (formula "14") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "14") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0"))
         (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "14") (term "1,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "14") (term "0,0,0,1,0"))
         (rule "applyOnPV" (formula "14") (term "1,0,0,1,0"))
         (rule "applyOnPV" (formula "14") (term "0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0"))
         (rule "methodCallEmpty" (formula "14") (term "1"))
         (rule "emptyModality" (formula "14") (term "1"))
         (rule "impRight" (formula "14"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "15"))
         (rule "applyOnRigidFormula" (formula "12"))
         (rule "applyOnPV" (formula "12") (term "0"))
         (rule "simplifyUpdate1" (formula "12") (term "1"))
         (rule "ifthenelse_concrete3" (formula "12"))
         (rule "boolean_not_equal_2" (formula "12") (term "1"))
         (rule "concrete_or_4" (formula "12"))
         (rule "inEqSimp_geqRight" (formula "12"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "inEqSimp_antiSymm" (formula "12") (ifseqformula "1"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "12"))
         (rule "inEqSimp_homoInEq0" (formula "1"))
         (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,0"))
         (rule "times_zero_1" (formula "1") (term "0"))
         (rule "qeq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "applyEq" (formula "7") (term "0") (ifseqformula "11"))
         (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
         (rule "inEqSimp_homoInEq1" (formula "11"))
         (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
         (rule "add_literals" (formula "11") (term "1,0"))
         (rule "times_zero_1" (formula "11") (term "0"))
         (rule "leq_literals" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "applyEq" (formula "7") (term "1,1,0,0") (ifseqformula "10"))
         (rule "assignment" (formula "13") (term "1"))
         (rule "simplifyUpdate2" (formula "13") (term "1"))
         (rule "simplifyUpdate2" (formula "13"))
         (rule "methodCallEmpty" (formula "13") (term "1"))
         (rule "tryEmpty" (formula "13") (term "1"))
         (rule "emptyModality" (formula "13") (term "1"))
         (rule "applyOnRigidFormula" (formula "13"))
         (rule "simplifyUpdate2" (formula "13") (term "0"))
         (rule "simplifyUpdate2" (formula "13") (term "1"))
         (rule "applyOnRigidFormula" (formula "13") (term "0"))
         (rule "simplifyUpdate2" (formula "13") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "13") (term "1"))
         (rule "applyOnRigidFormula" (formula "13") (term "1,0"))
         (rule "simplifyUpdate1" (formula "13") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "13") (term "1,1,0"))
         (rule "simplifyUpdate1" (formula "13") (term "2,1,0"))
         (rule "simplifyUpdate1" (formula "13") (term "3,1,0"))
         (rule "applyOnPV" (formula "13") (term "1,1,0"))
         (rule "applyOnPV" (formula "13") (term "2,1,0"))
         (rule "applyOnPV" (formula "13") (term "3,1,0"))
         (rule "applyOnRigidFormula" (formula "13") (term "0,0"))
         (rule "simplifyUpdate1" (formula "13") (term "1,0,0"))
         (rule "applyOnPV" (formula "13") (term "0,0,0"))
         (rule "eqClose" (formula "13") (term "0,0"))
         (rule "concrete_and_1" (formula "13") (term "0"))
         (rule "applyOnRigidFormula" (formula "13") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "13") (term "0,0,1"))
         (rule "simplifyUpdate1" (formula "13") (term "1,0,0,1"))
         (rule "applyOnRigidTerm" (formula "13") (term "0,0,0,1"))
         (rule "simplifyUpdate1" (formula "13") (term "2,0,0,0,1"))
         (rule "applyOnPV" (formula "13") (term "0,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "13") (term "1,0,0,0,1"))
         (rule "eqClose" (formula "13") (term "0,0,1"))
         (rule "all_unused" (formula "13") (term "0,1"))
         (rule "all_unused" (formula "13") (term "1"))
         (rule "concrete_and_3" (formula "13"))
         (opengoal " ")
      )
      (branch "Null Reference (_array = null)"
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "close" (formula "13") (ifseqformula "1"))
      )
   )
)
)

}
