\profile "Java Profile for Symbolic Execution";

\settings {
"#Proof-Settings-Config-File
#Thu Jan 29 12:09:31 CET 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_INSTANTIATE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=1000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=methodExpansion-methodExpansion:noRestriction,Strings-Strings\\:on , reach-reach\\:on , JavaCard-JavaCard\\:off , assertions-assertions\\:on , bigint-bigint\\:on , programRules-programRules\\:Java , intRules-intRules\\:arithmeticSemanticsIgnoringOF , modelFields-modelFields\\:showSatisfiability , initialisation-initialisation\\:disableStaticInitialisation , sequences-sequences\\:on , integerSimplificationRules-integerSimplificationRules\\:full , runtimeExceptions-runtimeExceptions\\:allow , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=Symbolic Execution Strategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Thu Jan 29 12:09:31 CET 2015
name=ArraySumWhile[ArraySumWhile\\:\\:sum([I)].JML operation contract.0
addSymbolicExecutionLabel=true
contract=ArraySumWhile[ArraySumWhile\\:\\:sum([I)].JML operation contract.0
addUninterpretedPredicate=true
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Martin" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "1175")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "heapAtPre"))
(rule "translateJavaCastInt" (formula "1") (term "1,1,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "5") (term "1,0,0,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "4"))
(builtin "One Step Simplification" (formula "2"))
(rule "assignment" (formula "5") (term "1"))
(builtin "One Step Simplification" (formula "5"))
(rule "methodBodyExpand" (formula "5") (term "1") (newnames "heapBefore_sum,savedHeapBefore_sum,_arrayBefore_sum"))
(builtin "One Step Simplification" (formula "5"))
(rule "variableDeclarationAssign" (formula "5") (term "1"))
(rule "variableDeclaration" (formula "5") (term "1") (newnames "result_1"))
(rule "assignment" (formula "5") (term "1"))
(builtin "One Step Simplification" (formula "5"))
(rule "variableDeclarationAssign" (formula "5") (term "1"))
(rule "variableDeclaration" (formula "5") (term "1") (newnames "i"))
(rule "assignment" (formula "5") (term "1"))
(builtin "One Step Simplification" (formula "5"))
(builtin "Loop Invariant" (formula "5") (newnames "variant,b,heapBefore_LOOP,iBefore_LOOP,result_1Before_LOOP,i_0,result_1_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
(branch "Invariant Initially Valid"
   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "1")))
   (rule "bsum_lower_equals_upper" (formula "5") (term "0,1,1"))
   (rule "translateJavaCastInt" (formula "5") (term "1,1"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "qeq_literals" (formula "5") (term "0"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "inEqSimp_leqRight" (formula "5"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "arrayLengthNotNegative" (formula "1") (term "0"))
   (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
   (rule "qeq_literals" (formula "1") (term "0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "Body Preserves Invariant"
   (builtin "One Step Simplification" (formula "7"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "translateJavaSubInt" (formula "7") (term "0,1,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "7") (term "0,1,0,1,1,0,1,1"))
   (rule "translateJavaCastInt" (formula "7") (term "1,1,0,0,0,1,1,0,1,1"))
   (rule "translateJavaCastInt" (formula "5") (term "1,1"))
   (rule "impRight" (formula "7"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "eqSymm" (formula "10") (term "1,0,0,0,1,1,0,1"))
   (rule "eqSymm" (formula "10") (term "0,0,1,0,0,1,1,0,1"))
   (rule "eqSymm" (formula "8"))
   (rule "polySimp_elimSub" (formula "10") (term "0,1,1,1,0"))
   (rule "polySimp_elimSub" (formula "10") (term "0,1,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "10") (term "0,1,1,1,0"))
   (rule "polySimp_addComm0" (formula "10") (term "0,1,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "7"))
   (rule "boxToDiamond" (formula "1") (term "1"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "arrayLengthIsAnInt" (formula "10") (term "1,0,1,1,1,0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "arrayLengthNotNegative" (formula "10") (term "1,0,1,1,1,0"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "b_2"))
   (rule "compound_less_than_comparison_2" (formula "9") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_2"))
   (rule "assignment" (formula "9") (term "1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_3"))
   (rule "assignment_read_length" (formula "9") (term "1"))
   (branch "Normal Execution (_array != null)"
      (builtin "One Step Simplification" (formula "10"))
      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "11")))
      (rule "false_right" (formula "9"))
      (rule "less_than_comparison_simple" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
      (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,0"))
      (rule "polySimp_elimOne" (formula "9") (term "0,0,0,0"))
      (rule "methodCallEmpty" (formula "9") (term "1"))
      (rule "emptyModality" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "notRight" (formula "9"))
      (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
      (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0"))
      (rule "qeq_literals" (formula "8") (term "0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "variableDeclarationAssign" (formula "10") (term "1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "exc_1"))
      (rule "assignment" (formula "10") (term "1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "thrownExc"))
      (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_4"))
      (rule "compound_less_than_comparison_2" (formula "10") (term "1") (inst "#v1=x_6") (inst "#v0=x_5"))
      (rule "variableDeclarationAssign" (formula "10") (term "1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_5"))
      (rule "assignment" (formula "10") (term "1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "variableDeclarationAssign" (formula "10") (term "1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_6"))
      (rule "assignment_read_length" (formula "10") (term "1"))
      (branch "Normal Execution (_array != null)"
         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "9")))
         (rule "false_right" (formula "10"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "less_than_comparison_simple" (formula "10") (term "1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "ifSplit" (formula "10"))
         (branch "if x_4 true"
            (builtin "One Step Simplification" (formula "1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "inEqSimp_ltToLeq" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "compound_assignment_op_plus" (formula "10") (term "1"))
            (rule "compound_int_cast_expression" (formula "10") (term "1") (inst "#v=x"))
            (rule "variableDeclarationAssign" (formula "10") (term "1"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_7"))
            (rule "remove_parentheses_right" (formula "10") (term "1"))
            (rule "compound_addition_2" (formula "10") (term "1") (inst "#v1=x_9") (inst "#v0=x_8"))
            (rule "variableDeclarationAssign" (formula "10") (term "1"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_8"))
            (rule "assignment" (formula "10") (term "1"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "variableDeclarationAssign" (formula "10") (term "1"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_9"))
            (rule "remove_parentheses_right" (formula "10") (term "1"))
            (rule "assignment_array2" (formula "10") (term "1"))
            (branch "Normal Execution (_array != null)"
               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "9")))
               (builtin "One Step Simplification" (formula "11"))
               (rule "orRight" (formula "10"))
               (rule "inEqSimp_leqRight" (formula "10"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_ltRight" (formula "11"))
               (rule "times_zero_1" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "assignmentAdditionInt" (formula "10") (term "1"))
               (rule "translateJavaAddInt" (formula "10") (term "0,0,1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "widening_identity_cast_5" (formula "10") (term "1"))
               (rule "assignment" (formula "10") (term "1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "postincrement" (formula "10") (term "1"))
               (rule "compound_int_cast_expression" (formula "10") (term "1") (inst "#v=x"))
               (rule "variableDeclarationAssign" (formula "10") (term "1"))
               (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_10"))
               (rule "remove_parentheses_right" (formula "10") (term "1"))
               (rule "assignmentAdditionInt" (formula "10") (term "1"))
               (rule "translateJavaAddInt" (formula "10") (term "0,0,1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "polySimp_addComm0" (formula "10") (term "0,1,0"))
               (rule "widening_identity_cast_5" (formula "10") (term "1"))
               (rule "assignment" (formula "10") (term "1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "tryEmpty" (formula "10") (term "1"))
               (rule "methodCallEmpty" (formula "10") (term "1"))
               (rule "emptyModality" (formula "10") (term "1"))
               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "1")))
               (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "0,0,1,0"))
               (rule "mul_literals" (formula "10") (term "0,0,0,1,0"))
               (rule "bsum_induction_upper_concrete" (formula "10") (term "0,1,0,0"))
               (rule "polySimp_homoEq" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0,0"))
               (rule "polySimp_addComm0" (formula "10") (term "1,1,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,1,0,0"))
               (rule "precOfInt" (formula "10") (term "1,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,1,0"))
               (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,1,1,0"))
               (rule "polySimp_addComm1" (formula "10") (term "0,0,1,1,0"))
               (rule "polySimp_pullOutFactor2b" (formula "10") (term "0,1,1,0"))
               (rule "add_literals" (formula "10") (term "1,1,0,1,1,0"))
               (rule "times_zero_1" (formula "10") (term "1,0,1,1,0"))
               (rule "add_zero_right" (formula "10") (term "0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,1,1,0"))
               (rule "polySimp_addComm1" (formula "10") (term "0,0,1,1,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,1,1,0"))
               (rule "add_zero_left" (formula "10") (term "0,0,1,1,0"))
               (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,1,0"))
               (rule "add_literals" (formula "10") (term "1,0,1,1,0"))
               (rule "times_zero_1" (formula "10") (term "0,1,1,0"))
               (rule "leq_literals" (formula "10") (term "1,1,0"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,1,0,0,1,0,0"))
               (rule "replace_known_left" (formula "10") (term "0,0,1,0,0,1,0,0") (ifseqformula "7"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "10") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "10") (term "1,0"))
               (rule "times_zero_2" (formula "10") (term "1,0,1,0"))
               (rule "add_zero_right" (formula "10") (term "0,1,0"))
               (rule "applyEq" (formula "10") (term "0,1,0,1,0,0") (ifseqformula "8"))
               (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,0,0"))
               (rule "add_literals" (formula "10") (term "1,0,1,0,0"))
               (rule "times_zero_1" (formula "10") (term "0,1,0,0"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0"))
               (rule "replace_known_left" (formula "10") (term "1,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0"))
               (rule "mul_literals" (formula "10") (term "1,0"))
               (rule "inEqSimp_subsumption1" (formula "10") (term "0") (ifseqformula "7"))
               (rule "leq_literals" (formula "10") (term "0,0"))
               (builtin "One Step Simplification" (formula "10"))
               (opengoal " ")
            )
            (branch "Null Reference (_array = null)"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Index Out of Bounds (_array != null, but i Out of Bounds!)"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "1,1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "8"))
               (rule "qeq_literals" (formula "1") (term "0,1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
               (rule "andLeft" (formula "2"))
               (rule "inEqSimp_homoInEq1" (formula "2"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "1,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,0"))
               (rule "add_literals" (formula "2") (term "0"))
               (rule "leq_literals" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
         )
         (branch "if x_4 false"
            (builtin "One Step Simplification" (formula "1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "notLeft" (formula "1"))
            (rule "inEqSimp_ltRight" (formula "9"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
            (rule "andLeft" (formula "2"))
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "1,1,0"))
            (rule "times_zero_1" (formula "2") (term "1,0"))
            (rule "add_zero_right" (formula "2") (term "0"))
            (rule "leq_literals" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
      )
      (branch "Null Reference (_array = null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (_array = null)"
      (builtin "One Step Simplification" (formula "10"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Use Case"
   (builtin "One Step Simplification" (formula "7"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "translateJavaCastInt" (formula "5") (term "1,1"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "eqSymm" (formula "7"))
   (rule "inEqSimp_commuteLeq" (formula "6"))
   (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "arrayLengthNotNegative" (formula "6") (term "0"))
   (rule "methodCallReturn" (formula "10") (term "1,0,1"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "b_1"))
   (rule "compound_less_than_comparison_2" (formula "10") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "x"))
   (rule "assignment" (formula "10") (term "1"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_1"))
   (rule "assignment_read_length" (formula "10") (term "1"))
   (branch "Normal Execution (_array != null)"
      (builtin "One Step Simplification" (formula "11"))
      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "9")))
      (rule "false_right" (formula "10"))
      (rule "less_than_comparison_simple" (formula "10") (term "1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0"))
      (rule "methodCallEmpty" (formula "10") (term "1"))
      (rule "emptyModality" (formula "10") (term "1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "impRight" (formula "10"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_geqRight" (formula "9"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
      (rule "polySimp_elimOne" (formula "1") (term "1"))
      (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "1"))
      (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
      (rule "inEqSimp_homoInEq1" (formula "9"))
      (rule "polySimp_pullOutFactor1" (formula "9") (term "0"))
      (rule "add_literals" (formula "9") (term "1,0"))
      (rule "times_zero_1" (formula "9") (term "0"))
      (rule "leq_literals" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "applyEq" (formula "7") (term "0") (ifseqformula "8"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "7"))
      (rule "inEqSimp_homoInEq0" (formula "1"))
      (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,0"))
      (rule "times_zero_1" (formula "1") (term "0"))
      (rule "qeq_literals" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "assignment" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "methodCallEmpty" (formula "9") (term "1"))
      (rule "tryEmpty" (formula "9") (term "1"))
      (rule "emptyModality" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "applyEq" (formula "9") (term "1,0,0") (ifseqformula "6"))
      (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "7"))
      (builtin "One Step Simplification" (formula "9"))
      (opengoal " ")
   )
   (branch "Null Reference (_array = null)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
      (rule "closeFalse" (formula "1"))
   )
)
)

}
