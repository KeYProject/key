<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call AnotherInstanceContractTest.main(x,obj)&gt;" pathCondition="true" pathConditionChanged="false">
      <statement name="return obj.magic(x);" pathCondition="true" pathConditionChanged="false">
         <operationContract name="result_0 = obj.magic(x) catch(exc_0)
pre: (x &gt;= 10 &amp; obj.&lt;inv&gt;&lt;&lt;impl&gt;&gt;)&lt;&lt;SC&gt;&gt;
| (x &lt; -22
&amp; obj.&lt;inv&gt;&lt;&lt;impl&gt;&gt;)&lt;&lt;SC&gt;&gt;
post: (   (x &gt;= 10 &amp; obj.&lt;inv&gt;@heapBefore_magic&lt;&lt;impl&gt;&gt;)&lt;&lt;SC&gt;&gt;
   -&gt;   (result_0 = 10
      &amp; obj.&lt;inv&gt;&lt;&lt;impl&gt;&gt;)&lt;&lt;SC&gt;&gt;
      &amp; (exc_0 = null)&lt;&lt;impl&gt;&gt;)
&amp; (   (x &lt; -22 &amp; obj.&lt;inv&gt;@heapBefore_magic&lt;&lt;impl&gt;&gt;)&lt;&lt;SC&gt;&gt;
   -&gt;   (result_0 = -22
      &amp; obj.&lt;inv&gt;&lt;&lt;impl&gt;&gt;)&lt;&lt;SC&gt;&gt;
      &amp; (exc_0 = null)&lt;&lt;impl&gt;&gt;)
mod: allLocs
termination: diamond" pathCondition="true" pathConditionChanged="false" resultTerm="result_0" exceptionTerm="exc_0" selfTerm="obj" contractParameters="x" preconditionComplied="false" hasNotNullCheck="true" notNullCheckComplied="false">
            <branchCondition name="and(and(and(and(and(equals(exc_0,null),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),or(java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj),geq(x,Z(0(1(#)))))),or(java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj),leq(x,Z(neglit(3(2(#))))))),or(leq(x,Z(neglit(3(2(#))))),geq(x,Z(0(1(#))))))" pathCondition="and(and(and(and(and(equals(exc_0,null),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),or(java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj),geq(x,Z(0(1(#)))))),or(java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj),leq(x,Z(neglit(3(2(#))))))),or(leq(x,Z(neglit(3(2(#))))),geq(x,Z(0(1(#))))))" pathConditionChanged="true" branchCondition="and(and(and(and(and(equals(exc_0,null),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),or(java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj),geq(x,Z(0(1(#)))))),or(java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj),leq(x,Z(neglit(3(2(#))))))),or(leq(x,Z(neglit(3(2(#))))),geq(x,Z(0(1(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Post (magic)">
               <methodReturn name="&lt;return of main&gt;" signature="&lt;return of AnotherInstanceContractTest.main(x,obj)&gt;" pathCondition="and(and(and(and(and(equals(exc_0,null),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),or(java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj),geq(x,Z(0(1(#)))))),or(java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj),leq(x,Z(neglit(3(2(#))))))),or(leq(x,Z(neglit(3(2(#))))),geq(x,Z(0(1(#))))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="and(and(and(and(and(equals(exc_0,null),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),or(java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj),geq(x,Z(0(1(#)))))),or(java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj),leq(x,Z(neglit(3(2(#))))))),or(leq(x,Z(neglit(3(2(#))))),geq(x,Z(0(1(#))))))">
                  <termination name="&lt;end&gt;" pathCondition="and(and(and(and(and(equals(exc_0,null),not(equals(obj,null))),java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj)),or(java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj),geq(x,Z(0(1(#)))))),or(java.lang.Object::&lt;inv&gt;(heapBefore_magic,obj),leq(x,Z(neglit(3(2(#))))))),or(leq(x,Z(neglit(3(2(#))))),geq(x,Z(0(1(#))))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                  </termination>
               </methodReturn>
            </branchCondition>
            <branchCondition name="and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),not(equals(obj,null)))" pathCondition="and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),not(equals(obj,null)))" pathConditionChanged="true" branchCondition="and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),not(equals(obj,null)))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Exceptional Post (magic)">
               <exceptionalMethodReturn name="&lt;throw java.lang.Throwable&gt;" signature="&lt;exceptional return of &lt;call AnotherInstanceContractTest.main(x,obj)&gt;&gt;" pathCondition="and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),not(equals(obj,null)))" pathConditionChanged="false" methodReturnCondition="and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),not(equals(obj,null)))">
                  <termination name="&lt;uncaught java.lang.Throwable&gt;" pathCondition="and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),not(equals(obj,null)))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                  </termination>
               </exceptionalMethodReturn>
            </branchCondition>
         </operationContract>
      </statement>
      <methodReturnEntry path="/0/0/0/0/0"/>
      <methodReturnEntry path="/0/0/0/1/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/1/0/0"/>
</start>
