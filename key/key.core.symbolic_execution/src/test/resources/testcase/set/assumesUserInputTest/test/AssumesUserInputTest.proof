\profile "Java Profile for Symbolic Execution";

\settings {
"#Proof-Settings-Config-File
#Thu Jan 22 14:33:50 CET 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_INSTANTIATE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=1000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=methodExpansion-methodExpansion:noRestriction,Strings-Strings\\:on , reach-reach\\:on , JavaCard-JavaCard\\:off , assertions-assertions\\:on , bigint-bigint\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , modelFields-modelFields\\:showSatisfiability , initialisation-initialisation\\:disableStaticInitialisation , sequences-sequences\\:on , runtimeExceptions-runtimeExceptions\\:allow , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=Symbolic Execution Strategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\rules {
  assumesTestTaclet {
     \schemaVar \formula aExists, bNotExists, cNotExists, dNotExists;
     \assumes (bNotExists, cNotExists ==> dNotExists)
     \find (aExists)
     \replacewith (aExists)
  };
}

\proofObligation "#Proof Obligation Settings
#Thu Jan 22 14:33:50 CET 2015
name=AssumesUserInputTest[AssumesUserInputTest\\:\\:min(int,int,int)].JML normal_behavior operation contract.0
addSymbolicExecutionLabel=true
contract=AssumesUserInputTest[AssumesUserInputTest\\:\\:min(int,int,int)].JML normal_behavior operation contract.0
addUninterpretedPredicate=true
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Martin" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "1" (keyUser "Martin" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "624")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "heapAtPre"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "3") (term "1,0,0,0,1"))
(rule "eqSymm" (formula "3") (term "0,0,0,0,1"))
(rule "assignment" (formula "3") (term "1"))
(builtin "One Step Simplification" (formula "3"))
(rule "methodBodyExpand" (formula "3") (term "1") (newnames "heapBefore_min,savedHeapBefore_min"))
(builtin "One Step Simplification" (formula "3"))
(rule "ifElseUnfold" (formula "3") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "x_1"))
(rule "less_than_comparison_simple" (formula "3") (term "1"))
(builtin "One Step Simplification" (formula "3"))
(rule "ifElseSplit" (formula "3"))
(branch "if x_1 true"
   (rule "assumesTestTaclet" (formula "4") (ifdirectformula "geq(x, Z(1(#)))") (ifdirectformula "geq(y, Z(2(2(#))))") (ifdirectformula "geq(z, Z(3(3(3(#)))))") (userinteraction))
   (branch "Case 1"
      (builtin "One Step Simplification" (formula "1"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "inEqSimp_ltToLeq" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_notGeq" (formula "4") (term "1"))
      (rule "mul_literals" (formula "4") (term "1,0,0,1"))
      (rule "add_literals" (formula "4") (term "0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1"))
      (rule "mul_literals" (formula "4") (term "1,1"))
      (rule "blockReturn" (formula "5") (term "1"))
      (rule "methodCallReturn" (formula "5") (term "1"))
      (rule "assignment" (formula "5") (term "1"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "methodCallEmpty" (formula "5") (term "1"))
      (rule "tryEmpty" (formula "5") (term "1"))
      (rule "emptyModality" (formula "5") (term "1"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "cut_direct" (formula "4") (term "0,0"))
      (branch "CUT: x >= 1 TRUE"
         (builtin "One Step Simplification" (formula "5"))
         (rule "cut_direct" (formula "5") (term "0"))
         (branch "CUT: y >= 22 TRUE"
            (builtin "One Step Simplification" (formula "6"))
            (rule "inEqSimp_leqRight" (formula "6"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (opengoal " ")
         )
         (branch "CUT: y >= 22 FALSE"
            (builtin "One Step Simplification" (formula "6"))
            (rule "false_right" (formula "6"))
            (rule "inEqSimp_geqRight" (formula "5"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
            (rule "polySimp_rightDist" (formula "3") (term "0,0"))
            (rule "mul_literals" (formula "3") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "add_literals" (formula "3") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (opengoal " ")
         )
      )
      (branch "CUT: x >= 1 FALSE"
         (builtin "One Step Simplification" (formula "5"))
         (rule "false_right" (formula "5"))
         (rule "inEqSimp_geqRight" (formula "4"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (opengoal " ")
      )
   )
   (branch "Case 2"
      (builtin "One Step Simplification" (formula "3"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_geqRight" (formula "6"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "4"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "4") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "4"))
      (rule "polySimp_mulLiterals" (formula "4") (term "0"))
      (rule "polySimp_elimOne" (formula "4") (term "0"))
      (rule "blockReturn" (formula "7") (term "1"))
      (rule "methodCallReturn" (formula "7") (term "1"))
      (rule "assignment" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "methodCallEmpty" (formula "7") (term "1"))
      (rule "tryEmpty" (formula "7") (term "1"))
      (rule "emptyModality" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (opengoal " ")
   )
)
(branch "if x_1 false"
   (builtin "One Step Simplification" (formula "1"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "notLeft" (formula "1"))
   (rule "inEqSimp_ltRight" (formula "3"))
   (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
   (rule "polySimp_addComm0" (formula "1") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "blockReturn" (formula "4") (term "1"))
   (rule "methodCallReturn" (formula "4") (term "1"))
   (rule "assignment" (formula "4") (term "1"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "methodCallEmpty" (formula "4") (term "1"))
   (rule "tryEmpty" (formula "4") (term "1"))
   (rule "emptyModality" (formula "4") (term "1"))
   (builtin "One Step Simplification" (formula "4"))
   (opengoal " ")
)
)

}
