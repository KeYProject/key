<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call ArrayUtil.indexOf(array,toSearch)&gt;" pathCondition="true" pathConditionChanged="false">
      <statement name="int i = 0;" pathCondition="true" pathConditionChanged="false">
         <loopInvariant name="invariant: i &gt;= 0
&amp; i &lt;= array.length
&amp; \forall int j;
    (j &gt;= 0 &amp; j &lt; i &amp; inInt(j) -&gt; !array[j] = toSearch);
variant: javaSubInt(array.length, i)
mod: false" pathCondition="true" pathConditionChanged="false" initiallyValid="true">
            <branchCondition name="update-application(parallel-upd(elem-update(exc)(null),elem-update(i)(Z(0(#)))),update-application(parallel-upd(elem-update(heapBefore_LOOP)(heap),elem-update(iBefore_LOOP)(i)),update-application(elem-update(i)(i_0),update-application(elem-update(variant)(javaSubInt(length(array),i)),\[{method-frame(source=indexOf(java.lang.Object[], java.lang.Object)@ArrayUtil): {
    boolean b = i&lt;array.length;
  }
}\] (and(equals(b,TRUE),and(and(and(geq(i,Z(0(#))),leq(i,length(array))),all{j:int}(imp(and(and(geq(j,Z(0(#))),lt(j,i)),inInt(j)),not(equals(java.lang.Object::select(heap,array,arr(j)),toSearch))))),inInt(i))))))))" pathCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(i)(Z(0(#)))),update-application(parallel-upd(elem-update(heapBefore_LOOP)(heap),elem-update(iBefore_LOOP)(i)),update-application(elem-update(i)(i_0),update-application(elem-update(variant)(javaSubInt(length(array),i)),\[{method-frame(source=indexOf(java.lang.Object[], java.lang.Object)@ArrayUtil): {
    boolean b = i&lt;array.length;
  }
}\] (and(equals(b,TRUE),and(and(and(geq(i,Z(0(#))),leq(i,length(array))),all{j:int}(imp(and(and(geq(j,Z(0(#))),lt(j,i)),inInt(j)),not(equals(java.lang.Object::select(heap,array,arr(j)),toSearch))))),inInt(i))))))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(i)(Z(0(#)))),update-application(parallel-upd(elem-update(heapBefore_LOOP)(heap),elem-update(iBefore_LOOP)(i)),update-application(elem-update(i)(i_0),update-application(elem-update(variant)(javaSubInt(length(array),i)),\[{method-frame(source=indexOf(java.lang.Object[], java.lang.Object)@ArrayUtil): {
    boolean b = i&lt;array.length;
  }
}\] (and(equals(b,TRUE),and(and(and(geq(i,Z(0(#))),leq(i,length(array))),all{j:int}(imp(and(and(geq(j,Z(0(#))),lt(j,i)),inInt(j)),not(equals(java.lang.Object::select(heap,array,arr(j)),toSearch))))),inInt(i))))))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Body Preserves Invariant">
               <branchCondition name="not(update-application(elem-update(x)(i_0),equals(array,null)))" pathCondition="and(update-application(parallel-upd(elem-update(exc)(null),elem-update(i)(Z(0(#)))),update-application(parallel-upd(elem-update(heapBefore_LOOP)(heap),elem-update(iBefore_LOOP)(i)),update-application(elem-update(i)(i_0),update-application(elem-update(variant)(javaSubInt(length(array),i)),\[{method-frame(source=indexOf(java.lang.Object[], java.lang.Object)@ArrayUtil): {
    boolean b = i&lt;array.length;
  }
}\] (and(equals(b,TRUE),and(and(and(geq(i,Z(0(#))),leq(i,length(array))),all{j:int}(imp(and(and(geq(j,Z(0(#))),lt(j,i)),inInt(j)),not(equals(java.lang.Object::select(heap,array,arr(j)),toSearch))))),inInt(i)))))))),not(update-application(elem-update(x)(i_0),equals(array,null))))" pathConditionChanged="true" branchCondition="not(update-application(elem-update(x)(i_0),equals(array,null)))" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <loopCondition name="i&lt;array.length" pathCondition="and(update-application(parallel-upd(elem-update(exc)(null),elem-update(i)(Z(0(#)))),update-application(parallel-upd(elem-update(heapBefore_LOOP)(heap),elem-update(iBefore_LOOP)(i)),update-application(elem-update(i)(i_0),update-application(elem-update(variant)(javaSubInt(length(array),i)),\[{method-frame(source=indexOf(java.lang.Object[], java.lang.Object)@ArrayUtil): {
    boolean b = i&lt;array.length;
  }
}\] (and(equals(b,TRUE),and(and(and(geq(i,Z(0(#))),leq(i,length(array))),all{j:int}(imp(and(and(geq(j,Z(0(#))),lt(j,i)),inInt(j)),not(equals(java.lang.Object::select(heap,array,arr(j)),toSearch))))),inInt(i)))))))),not(update-application(elem-update(x)(i_0),equals(array,null))))" pathConditionChanged="false" blockOpened="false">
                  </loopCondition>
               </branchCondition>
               <branchCondition name="update-application(elem-update(x)(i_0),equals(array,null))" pathCondition="and(update-application(parallel-upd(elem-update(exc)(null),elem-update(i)(Z(0(#)))),update-application(parallel-upd(elem-update(heapBefore_LOOP)(heap),elem-update(iBefore_LOOP)(i)),update-application(elem-update(i)(i_0),update-application(elem-update(variant)(javaSubInt(length(array),i)),\[{method-frame(source=indexOf(java.lang.Object[], java.lang.Object)@ArrayUtil): {
    boolean b = i&lt;array.length;
  }
}\] (and(equals(b,TRUE),and(and(and(geq(i,Z(0(#))),leq(i,length(array))),all{j:int}(imp(and(and(geq(j,Z(0(#))),lt(j,i)),inInt(j)),not(equals(java.lang.Object::select(heap,array,arr(j)),toSearch))))),inInt(i)))))))),update-application(elem-update(x)(i_0),equals(array,null)))" pathConditionChanged="true" branchCondition="update-application(elem-update(x)(i_0),equals(array,null))" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <loopCondition name="i&lt;array.length" pathCondition="and(update-application(parallel-upd(elem-update(exc)(null),elem-update(i)(Z(0(#)))),update-application(parallel-upd(elem-update(heapBefore_LOOP)(heap),elem-update(iBefore_LOOP)(i)),update-application(elem-update(i)(i_0),update-application(elem-update(variant)(javaSubInt(length(array),i)),\[{method-frame(source=indexOf(java.lang.Object[], java.lang.Object)@ArrayUtil): {
    boolean b = i&lt;array.length;
  }
}\] (and(equals(b,TRUE),and(and(and(geq(i,Z(0(#))),leq(i,length(array))),all{j:int}(imp(and(and(geq(j,Z(0(#))),lt(j,i)),inInt(j)),not(equals(java.lang.Object::select(heap,array,arr(j)),toSearch))))),inInt(i)))))))),update-application(elem-update(x)(i_0),equals(array,null)))" pathConditionChanged="false" blockOpened="false">
                  </loopCondition>
               </branchCondition>
            </branchCondition>
         </loopInvariant>
      </statement>
   </methodCall>
</start>
