<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <variable name="heapAtPre" isArrayIndex="false">
      <value name="heapAtPre {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
      </value>
   </variable>
   <methodCall name="&lt;call self.average(array)&gt;" pathCondition="true" pathConditionChanged="false">
      <variable name="exc" isArrayIndex="false">
         <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
         </value>
      </variable>
      <branchStatement name="if (array!=null)" pathCondition="true" pathConditionChanged="false" blockOpened="true">
         <variable name="self" isArrayIndex="false">
            <value name="self {true}" typeString="UseOperationContractStatementsInImpliciteConstructor" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
            </value>
         </variable>
         <variable name="array" isArrayIndex="false">
            <value name="array {equals(array,null)}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="equals(array,null)">
            </value>
            <value name="array {not(equals(array,null))}" typeString="int[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="not(equals(array,null))">
               <variable name="length" isArrayIndex="false">
                  <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="array[*]" isArrayIndex="false">
                  <value name="array[*] {imp(geq(length(array),Z(0(#))),and(geq(*,Z(0(#))),gt(length(array),*)))}" typeString="int" valueString="int::select(heap,array,arr(*))" isValueAnObject="false" isValueUnknown="false" conditionString="imp(geq(length(array),Z(0(#))),and(geq(*,Z(0(#))),gt(length(array),*)))">
                  </value>
               </variable>
            </value>
         </variable>
         <variable name="exc" isArrayIndex="false">
            <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
            </value>
         </variable>
         <callStackEntry path="/0"/>
         <branchCondition name="not(equals(array,null))" pathCondition="not(equals(array,null))" pathConditionChanged="true" branchCondition="not(equals(array,null))" mergedBranchCondition="false" isBranchConditionComputed="true">
            <variable name="self" isArrayIndex="false">
               <value name="self {true}" typeString="UseOperationContractStatementsInImpliciteConstructor" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <variable name="array" isArrayIndex="false">
               <value name="array {true}" typeString="int[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                  <variable name="length" isArrayIndex="false">
                     <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="array[*]" isArrayIndex="false">
                     <value name="array[*] {imp(geq(length(array),Z(0(#))),or(or(and(geq(*,Z(0(#))),gt(length(array),*)),and(geq(*,Z(0(#))),or(leq(*,Z(neglit(1(#)))),leq(length(array),*)))),and(leq(*,Z(neglit(1(#)))),or(leq(*,Z(neglit(1(#)))),leq(length(array),*)))))}" isValueAnObject="false" isValueUnknown="true" conditionString="imp(geq(length(array),Z(0(#))),or(or(and(geq(*,Z(0(#))),gt(length(array),*)),and(geq(*,Z(0(#))),or(leq(*,Z(neglit(1(#)))),leq(length(array),*)))),and(leq(*,Z(neglit(1(#)))),or(leq(*,Z(neglit(1(#)))),leq(length(array),*)))))">
                     </value>
                  </variable>
               </value>
            </variable>
            <variable name="exc" isArrayIndex="false">
               <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <variable name="x" isArrayIndex="false">
               <value name="x {true}" typeString="boolean" valueString="TRUE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <callStackEntry path="/0"/>
            <statement name="int sum = sum(array);" pathCondition="not(equals(array,null))" pathConditionChanged="false">
               <variable name="self" isArrayIndex="false">
                  <value name="self {true}" typeString="UseOperationContractStatementsInImpliciteConstructor" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="array" isArrayIndex="false">
                  <value name="array {true}" typeString="int[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     <variable name="length" isArrayIndex="false">
                        <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="array[*]" isArrayIndex="false">
                        <value name="array[*] {imp(geq(length(array),Z(0(#))),and(geq(*,Z(0(#))),gt(length(array),*)))}" typeString="int" valueString="int::select(heap,array,arr(*))" isValueAnObject="false" isValueUnknown="false" conditionString="imp(geq(length(array),Z(0(#))),and(geq(*,Z(0(#))),gt(length(array),*)))">
                        </value>
                     </variable>
                  </value>
               </variable>
               <variable name="exc" isArrayIndex="false">
                  <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <callStackEntry path="/0"/>
               <operationContract name="result_0 = self.sum(array) catch(exc_0)
pre: !array = null &amp; (self.&lt;inv&gt; &amp; !array = null)
post: result_0
  = javaCastInt(bsum{int i;}(0, array.length, array[i]))
&amp; self.&lt;inv&gt;
&amp; exc_0 = null
mod: allLocs
termination: diamond" pathCondition="not(equals(array,null))" pathConditionChanged="false" resultTerm="result_0" exceptionTerm="exc_0" selfTerm="self" contractParameters="array" preconditionComplied="true" hasNotNullCheck="false" notNullCheckComplied="false">
                  <variable name="self" isArrayIndex="false">
                     <value name="self {true}" typeString="UseOperationContractStatementsInImpliciteConstructor" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="array" isArrayIndex="false">
                     <value name="array {true}" typeString="int[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="length" isArrayIndex="false">
                           <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="array[*]" isArrayIndex="false">
                           <value name="array[*] {imp(geq(length(array),Z(0(#))),and(geq(*,Z(0(#))),gt(length(array),*)))}" typeString="int" valueString="int::select(heap,array,arr(*))" isValueAnObject="false" isValueUnknown="false" conditionString="imp(geq(length(array),Z(0(#))),and(geq(*,Z(0(#))),gt(length(array),*)))">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <callStackEntry path="/0"/>
                  <statement name="return sum_1/array.length;" pathCondition="not(equals(array,null))" pathConditionChanged="false">
                     <variable name="self" isArrayIndex="false">
                        <value name="self {true}" typeString="UseOperationContractStatementsInImpliciteConstructor" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="array" isArrayIndex="false">
                        <value name="array {true}" typeString="int[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           <variable name="length" isArrayIndex="false">
                              <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="array[*]" isArrayIndex="false">
                              <value name="array[*] {imp(geq(length(array),Z(0(#))),and(geq(*,Z(0(#))),gt(length(array),*)))}" typeString="int" valueString="int::select(anon_heap_sum&lt;&lt;anonHeapFunction&gt;&gt;,array,arr(*))" isValueAnObject="false" isValueUnknown="false" conditionString="imp(geq(length(array),Z(0(#))),and(geq(*,Z(0(#))),gt(length(array),*)))">
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="heap" isArrayIndex="false">
                        <value name="heap {true}" typeString="Heap" valueString="heapAfter_sum" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="sum_1" isArrayIndex="false">
                        <value name="sum_1 {true}" typeString="int" valueString="result_0" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <callStackEntry path="/0"/>
                     <branchCondition name="equals(length(array),Z(0(#)))" pathCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),equals(length(array),Z(0(#)))))" pathConditionChanged="true" branchCondition="equals(length(array),Z(0(#)))" mergedBranchCondition="false" isBranchConditionComputed="true">
                        <variable name="self" isArrayIndex="false">
                           <value name="self {true}" typeString="UseOperationContractStatementsInImpliciteConstructor" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="array" isArrayIndex="false">
                           <value name="array {true}" typeString="int[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="heap" isArrayIndex="false">
                           <value name="heap {true}" typeString="Heap" valueString="heapAfter_sum" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <exceptionalMethodReturn name="&lt;throw java.lang.ArithmeticException&gt;" signature="&lt;exceptional return of &lt;call self.average(array)&gt;&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),equals(length(array),Z(0(#)))))" pathConditionChanged="false" methodReturnCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),equals(length(array),Z(0(#)))))">
                           <variable name="self" isArrayIndex="false">
                              <value name="self {true}" typeString="UseOperationContractStatementsInImpliciteConstructor" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="array" isArrayIndex="false">
                              <value name="array {true}" typeString="int[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="exc" isArrayIndex="false">
                              <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="a" isArrayIndex="false">
                              <value name="a {true}" typeString="java.lang.ArithmeticException" valueString="a_3" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <callStackEntry path="/0"/>
                           <termination name="&lt;uncaught java.lang.ArithmeticException&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),equals(length(array),Z(0(#)))))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                              <variable name="exc" isArrayIndex="false">
                                 <value name="exc {true}" typeString="java.lang.ArithmeticException" valueString="a_3" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </termination>
                           <callStateVariable name="self" isArrayIndex="false">
                              <value name="self {true}" typeString="UseOperationContractStatementsInImpliciteConstructor" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              </value>
                           </callStateVariable>
                           <callStateVariable name="array" isArrayIndex="false">
                              <value name="array {true}" typeString="int[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                              </value>
                           </callStateVariable>
                           <callStateVariable name="exc" isArrayIndex="false">
                              <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </callStateVariable>
                           <callStateVariable name="heapBefore_average" isArrayIndex="false">
                              <value name="heapBefore_average {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </callStateVariable>
                           <callStateVariable name="savedHeapBefore_average" isArrayIndex="false">
                              <value name="savedHeapBefore_average {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </callStateVariable>
                        </exceptionalMethodReturn>
                     </branchCondition>
                     <branchCondition name="not(equals(length(array),Z(0(#))))" pathCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),not(equals(length(array),Z(0(#))))))" pathConditionChanged="true" branchCondition="not(equals(length(array),Z(0(#))))" mergedBranchCondition="false" isBranchConditionComputed="true">
                        <variable name="self" isArrayIndex="false">
                           <value name="self {true}" typeString="UseOperationContractStatementsInImpliciteConstructor" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="array" isArrayIndex="false">
                           <value name="array {true}" typeString="int[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="array[*]" isArrayIndex="false">
                                 <value name="array[*] {imp(geq(length(array),Z(0(#))),and(geq(*,Z(0(#))),gt(length(array),*)))}" typeString="int" valueString="int::select(anon_heap_sum&lt;&lt;anonHeapFunction&gt;&gt;,array,arr(*))" isValueAnObject="false" isValueUnknown="false" conditionString="imp(geq(length(array),Z(0(#))),and(geq(*,Z(0(#))),gt(length(array),*)))">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="heap" isArrayIndex="false">
                           <value name="heap {true}" typeString="Heap" valueString="heapAfter_sum" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="x_1" isArrayIndex="false">
                           <value name="x_1 {gt(result_0,Z(neglit(1(#))))}" typeString="int" valueString="quotient_3" isValueAnObject="false" isValueUnknown="false" conditionString="gt(result_0,Z(neglit(1(#))))">
                           </value>
                           <value name="x_1 {lt(result_0,Z(0(#)))}" typeString="int" valueString="mul(quotient_2,Z(neglit(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="lt(result_0,Z(0(#)))">
                           </value>
                        </variable>
                        <methodReturn name="&lt;return of average&gt;" signature="&lt;return of self.average(array)&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),not(equals(length(array),Z(0(#))))))" pathConditionChanged="false" nameIncludingReturnValue="&lt;return 
	quotient_3 {gt(result_0,Z(neglit(1(#))))}, 
	mul(quotient_2,Z(neglit(1(#)))) {lt(result_0,Z(0(#)))}
as result of average&gt;" signatureIncludingReturnValue="&lt;return 
	quotient_3 {gt(result_0,Z(neglit(1(#))))}, 
	mul(quotient_2,Z(neglit(1(#)))) {lt(result_0,Z(0(#)))}
as result of self.average(array)&gt;" isReturnValueComputed="true" methodReturnCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),not(equals(length(array),Z(0(#))))))">
                           <methodReturnValue name="quotient_3 {gt(result_0,Z(neglit(1(#))))}" returnValueString="quotient_3" hasCondition="true" conditionString="gt(result_0,Z(neglit(1(#))))">
                           </methodReturnValue>
                           <methodReturnValue name="mul(quotient_2,Z(neglit(1(#)))) {lt(result_0,Z(0(#)))}" returnValueString="mul(quotient_2,Z(neglit(1(#))))" hasCondition="true" conditionString="lt(result_0,Z(0(#)))">
                           </methodReturnValue>
                           <variable name="self" isArrayIndex="false">
                              <value name="self {true}" typeString="UseOperationContractStatementsInImpliciteConstructor" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="array" isArrayIndex="false">
                              <value name="array {true}" typeString="int[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                                 <variable name="array[*]" isArrayIndex="false">
                                    <value name="array[*] {imp(geq(length(array),Z(0(#))),or(and(and(geq(*,Z(0(#))),geq(result_0,Z(0(#)))),gt(length(array),*)),and(and(geq(*,Z(0(#))),leq(result_0,Z(neglit(1(#))))),gt(length(array),*))))}" typeString="int" valueString="int::select(anon_heap_sum&lt;&lt;anonHeapFunction&gt;&gt;,array,arr(*))" isValueAnObject="false" isValueUnknown="false" conditionString="imp(geq(length(array),Z(0(#))),or(and(and(geq(*,Z(0(#))),geq(result_0,Z(0(#)))),gt(length(array),*)),and(and(geq(*,Z(0(#))),leq(result_0,Z(neglit(1(#))))),gt(length(array),*))))">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="exc" isArrayIndex="false">
                              <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="heap" isArrayIndex="false">
                              <value name="heap {true}" typeString="Heap" valueString="heapAfter_sum" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <callStackEntry path="/0"/>
                           <termination name="&lt;end&gt;" pathCondition="imp(geq(length(array),Z(0(#))),and(not(equals(array,null)),not(equals(length(array),Z(0(#))))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                              <variable name="exc" isArrayIndex="false">
                                 <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="heap" isArrayIndex="false">
                                 <value name="heap {true}" typeString="Heap" valueString="heapAfter_sum" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </termination>
                           <callStateVariable name="self" isArrayIndex="false">
                              <value name="self {true}" typeString="UseOperationContractStatementsInImpliciteConstructor" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              </value>
                           </callStateVariable>
                           <callStateVariable name="array" isArrayIndex="false">
                              <value name="array {true}" typeString="int[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                                 <variable name="array[*]" isArrayIndex="false">
                                    <value name="array[*] {imp(geq(length(array),Z(0(#))),and(geq(*,Z(0(#))),gt(length(array),*)))}" typeString="int" valueString="int::select(heap,array,arr(*))" isValueAnObject="false" isValueUnknown="false" conditionString="imp(geq(length(array),Z(0(#))),and(geq(*,Z(0(#))),gt(length(array),*)))">
                                    </value>
                                 </variable>
                              </value>
                           </callStateVariable>
                           <callStateVariable name="exc" isArrayIndex="false">
                              <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </callStateVariable>
                           <callStateVariable name="heapBefore_average" isArrayIndex="false">
                              <value name="heapBefore_average {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </callStateVariable>
                           <callStateVariable name="savedHeapBefore_average" isArrayIndex="false">
                              <value name="savedHeapBefore_average {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </callStateVariable>
                        </methodReturn>
                     </branchCondition>
                  </statement>
               </operationContract>
               <completedBlockEntry path="/0/0" conditionString="not(equals(array,null))"/>
            </statement>
         </branchCondition>
         <branchCondition name="equals(array,null)" pathCondition="equals(array,null)" pathConditionChanged="true" branchCondition="equals(array,null)" mergedBranchCondition="false" isBranchConditionComputed="true">
            <variable name="self" isArrayIndex="false">
               <value name="self {true}" typeString="UseOperationContractStatementsInImpliciteConstructor" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <variable name="array" isArrayIndex="false">
               <value name="array {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <variable name="exc" isArrayIndex="false">
               <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <variable name="x" isArrayIndex="false">
               <value name="x {true}" typeString="boolean" valueString="FALSE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <callStackEntry path="/0"/>
            <statement name="throw new IllegalArgumentException (&quot;Array can&apos;t be null.&quot;);" pathCondition="equals(array,null)" pathConditionChanged="false">
               <variable name="self" isArrayIndex="false">
                  <value name="self {true}" typeString="UseOperationContractStatementsInImpliciteConstructor" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="array" isArrayIndex="false">
                  <value name="array {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="exc" isArrayIndex="false">
                  <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <callStackEntry path="/0"/>
               <exceptionalMethodReturn name="&lt;throw java.lang.IllegalArgumentException&gt;" signature="&lt;exceptional return of &lt;call self.average(array)&gt;&gt;" pathCondition="equals(array,null)" pathConditionChanged="false" methodReturnCondition="equals(array,null)">
                  <variable name="self" isArrayIndex="false">
                     <value name="self {true}" typeString="UseOperationContractStatementsInImpliciteConstructor" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="array" isArrayIndex="false">
                     <value name="array {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="i" isArrayIndex="false">
                     <value name="i {true}" typeString="java.lang.IllegalArgumentException" valueString="i_3" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <callStackEntry path="/0"/>
                  <termination name="&lt;uncaught java.lang.IllegalArgumentException&gt;" pathCondition="equals(array,null)" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                     <variable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="java.lang.IllegalArgumentException" valueString="i_3" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                  </termination>
                  <completedBlockEntry path="/0/0" conditionString="equals(array,null)"/>
                  <callStateVariable name="self" isArrayIndex="false">
                     <value name="self {true}" typeString="UseOperationContractStatementsInImpliciteConstructor" valueString="self" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     </value>
                  </callStateVariable>
                  <callStateVariable name="array" isArrayIndex="false">
                     <value name="array {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </callStateVariable>
                  <callStateVariable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </callStateVariable>
                  <callStateVariable name="heapBefore_average" isArrayIndex="false">
                     <value name="heapBefore_average {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </callStateVariable>
                  <callStateVariable name="savedHeapBefore_average" isArrayIndex="false">
                     <value name="savedHeapBefore_average {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </callStateVariable>
               </exceptionalMethodReturn>
            </statement>
         </branchCondition>
         <blockCompletionEntry path="/0/0/0/0"/>
         <blockCompletionEntry path="/0/0/1/0/0"/>
      </branchStatement>
      <methodReturnEntry path="/0/0/0/0/0/0/0/0"/>
      <methodReturnEntry path="/0/0/0/0/0/0/1/0"/>
      <methodReturnEntry path="/0/0/1/0/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/0/0/1/0/0"/>
   <terminationEntry path="/0/0/1/0/0/0"/>
</start>
