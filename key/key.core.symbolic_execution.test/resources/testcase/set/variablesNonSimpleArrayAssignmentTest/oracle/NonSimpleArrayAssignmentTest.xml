<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <variable name="heapAtPre" isArrayIndex="false">
      <value name="heapAtPre {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
      </value>
   </variable>
   <methodCall name="&lt;call NonSimpleArrayAssignmentTest.main(array)&gt;" pathCondition="true" pathConditionChanged="false">
      <variable name="exc" isArrayIndex="false">
         <value name="exc {or(equals(array,null),and(not(equals(array,null)),not(equals(array,null))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(array,null),and(not(equals(array,null)),not(equals(array,null))))">
         </value>
      </variable>
      <statement name="array[0].value=100;" pathCondition="true" pathConditionChanged="false">
         <variable name="array" isArrayIndex="false">
            <value name="array {equals(array,null)}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="equals(array,null)">
            </value>
            <value name="array {and(not(equals(array,null)),not(equals(array,null)))}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(array,null)),not(equals(array,null)))">
               <variable name="length" isArrayIndex="false">
                  <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="array[*]" isArrayIndex="false">
                  <value name="array[*] {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                     <variable name="value" isArrayIndex="false">
                        <value name="value {equals(array,null)}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,null,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="equals(array,null)">
                        </value>
                        <value name="value {and(not(equals(array,null)),not(equals(array,null)))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(array,null)),not(equals(array,null)))">
                        </value>
                     </variable>
                  </value>
                  <value name="array[*] {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)}" isValueAnObject="false" isValueUnknown="true" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)">
                  </value>
               </variable>
            </value>
         </variable>
         <variable name="exc" isArrayIndex="false">
            <value name="exc {or(equals(array,null),and(not(equals(array,null)),not(equals(array,null))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(array,null),and(not(equals(array,null)),not(equals(array,null))))">
            </value>
         </variable>
         <branchCondition name="not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#))))))" pathCondition="not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#))))))" pathConditionChanged="true" branchCondition="not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true">
            <variable name="array" isArrayIndex="false">
               <value name="array {true}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                  <variable name="length" isArrayIndex="false">
                     <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="array[*]" isArrayIndex="false">
                     <value name="array[*] {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null))))}" isValueAnObject="false" isValueUnknown="true" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null))))">
                     </value>
                  </variable>
               </value>
            </variable>
            <variable name="exc" isArrayIndex="false">
               <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <variable name="n" isArrayIndex="false">
               <value name="n {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),null)}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),null)">
               </value>
               <value name="n {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),null)))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),null)))">
                  <variable name="value" isArrayIndex="false">
                     <value name="value {true}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
               </value>
            </variable>
            <branchCondition name="not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))" pathCondition="and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null))))" pathConditionChanged="true" branchCondition="not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))" mergedBranchCondition="false" isBranchConditionComputed="true">
               <variable name="array" isArrayIndex="false">
                  <value name="array {true}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     <variable name="length" isArrayIndex="false">
                        <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="array[*]" isArrayIndex="false">
                        <value name="array[*] {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                           <variable name="value" isArrayIndex="false">
                              <value name="value {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))">
                              </value>
                              <value name="value {not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                              </value>
                           </variable>
                        </value>
                        <value name="array[*] {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)}" isValueAnObject="false" isValueUnknown="true" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)">
                        </value>
                     </variable>
                  </value>
               </variable>
               <variable name="exc" isArrayIndex="false">
                  <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="n" isArrayIndex="false">
                  <value name="n {true}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     <variable name="value" isArrayIndex="false">
                        <value name="value {true}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                  </value>
               </variable>
               <statement name="array[1].value=array[2].value;" pathCondition="and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null))))" pathConditionChanged="false">
                  <variable name="array" isArrayIndex="false">
                     <value name="array {true}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="length" isArrayIndex="false">
                           <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="array[*]" isArrayIndex="false">
                           <value name="array[*] {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                              <variable name="value" isArrayIndex="false">
                                 <value name="value {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))">
                                 </value>
                                 <value name="value {not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                 </value>
                              </variable>
                           </value>
                           <value name="array[*] {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)}" isValueAnObject="false" isValueUnknown="true" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <branchCondition name="not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))" pathCondition="and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#)))))))" pathConditionChanged="true" branchCondition="not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true">
                     <variable name="array" isArrayIndex="false">
                        <value name="array {true}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           <variable name="length" isArrayIndex="false">
                              <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="array[*]" isArrayIndex="false">
                              <value name="array[*] {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                                 <variable name="value" isArrayIndex="false">
                                    <value name="value {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))">
                                    </value>
                                    <value name="value {not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                    </value>
                                 </variable>
                              </value>
                              <value name="array[*] {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)}" isValueAnObject="false" isValueUnknown="true" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)">
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="n_9" isArrayIndex="false">
                        <value name="n_9 {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)">
                        </value>
                        <value name="n_9 {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))">
                           <variable name="value" isArrayIndex="false">
                              <value name="value {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))">
                              </value>
                              <value name="value {not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <branchCondition name="not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))" pathCondition="and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#)))))))" pathConditionChanged="true" branchCondition="not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true">
                        <variable name="array" isArrayIndex="false">
                           <value name="array {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                 </value>
                              </variable>
                              <variable name="array[*]" isArrayIndex="false">
                                 <value name="array[*] {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))">
                                    <variable name="value" isArrayIndex="false">
                                       <value name="value {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))">
                                       </value>
                                       <value name="value {or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))">
                                       </value>
                                    </variable>
                                 </value>
                                 <value name="array[*] {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" isValueAnObject="false" isValueUnknown="true" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="exc" isArrayIndex="false">
                           <value name="exc {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                           </value>
                        </variable>
                        <variable name="n_10" isArrayIndex="false">
                           <value name="n_10 {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)">
                           </value>
                           <value name="n_10 {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))">
                              <variable name="value" isArrayIndex="false">
                                 <value name="value {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))">
                                 </value>
                                 <value name="value {not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="n_11" isArrayIndex="false">
                           <value name="n_11 {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),null)),and(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),null)))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),null)),and(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),null)))">
                           </value>
                           <value name="n_11 {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),null)))),and(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),null)))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),null)))),and(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),null)))))">
                              <variable name="value" isArrayIndex="false">
                                 <value name="value {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))">
                                 </value>
                                 <value name="value {or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <branchCondition name="not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))" pathCondition="and(and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null))))" pathConditionChanged="true" branchCondition="not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))" mergedBranchCondition="false" isBranchConditionComputed="true">
                           <variable name="array" isArrayIndex="false">
                              <value name="array {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                    </value>
                                 </variable>
                                 <variable name="array[*]" isArrayIndex="false">
                                    <value name="array[*] {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))">
                                       <variable name="value" isArrayIndex="false">
                                          <value name="value {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))">
                                          </value>
                                          <value name="value {or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))">
                                          </value>
                                       </variable>
                                    </value>
                                    <value name="array[*] {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" isValueAnObject="false" isValueUnknown="true" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="exc" isArrayIndex="false">
                              <value name="exc {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                              </value>
                           </variable>
                           <variable name="n_10" isArrayIndex="false">
                              <value name="n_10 {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)">
                              </value>
                              <value name="n_10 {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))">
                                 <variable name="value" isArrayIndex="false">
                                    <value name="value {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))">
                                    </value>
                                    <value name="value {not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="n_11" isArrayIndex="false">
                              <value name="n_11 {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                 <variable name="value" isArrayIndex="false">
                                    <value name="value {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))">
                                    </value>
                                    <value name="value {or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="x_2" isArrayIndex="false">
                              <value name="x_2 {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))">
                              </value>
                              <value name="x_2 {or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))">
                              </value>
                           </variable>
                           <branchCondition name="not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null)))" pathCondition="and(and(and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null))))" pathConditionChanged="true" branchCondition="not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null)))" mergedBranchCondition="false" isBranchConditionComputed="true">
                              <variable name="array" isArrayIndex="false">
                                 <value name="array {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                       </value>
                                    </variable>
                                    <variable name="array[*]" isArrayIndex="false">
                                       <value name="array[*] {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))">
                                          <variable name="value" isArrayIndex="false">
                                             <value name="value {or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))))">
                                             </value>
                                             <value name="value {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))">
                                             </value>
                                             <value name="value {or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))))))">
                                             </value>
                                          </variable>
                                       </value>
                                       <value name="array[*] {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" isValueAnObject="false" isValueUnknown="true" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                              <variable name="exc" isArrayIndex="false">
                                 <value name="exc {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                 </value>
                              </variable>
                              <variable name="n_10" isArrayIndex="false">
                                 <value name="n_10 {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                    <variable name="value" isArrayIndex="false">
                                       <value name="value {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))">
                                       </value>
                                       <value name="value {not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                              <variable name="x_2" isArrayIndex="false">
                                 <value name="x_2 {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))">
                                 </value>
                                 <value name="x_2 {not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                 </value>
                              </variable>
                              <statement name="array[3].value=array[0].value;" pathCondition="and(and(and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null))))" pathConditionChanged="false">
                                 <variable name="array" isArrayIndex="false">
                                    <value name="array {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                       <variable name="length" isArrayIndex="false">
                                          <value name="length {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                          </value>
                                       </variable>
                                       <variable name="array[*]" isArrayIndex="false">
                                          <value name="array[*] {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))">
                                             <variable name="value" isArrayIndex="false">
                                                <value name="value {or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))))">
                                                </value>
                                                <value name="value {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))">
                                                </value>
                                                <value name="value {or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))))))">
                                                </value>
                                             </variable>
                                          </value>
                                          <value name="array[*] {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" isValueAnObject="false" isValueUnknown="true" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                                          </value>
                                       </variable>
                                    </value>
                                 </variable>
                                 <variable name="exc" isArrayIndex="false">
                                    <value name="exc {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                    </value>
                                 </variable>
                                 <branchCondition name="not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),or(or(equals(array,null),leq(length(array),Z(3(#)))),lt(Z(3(#)),Z(0(#))))))" pathCondition="and(and(and(and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),or(or(equals(array,null),leq(length(array),Z(3(#)))),lt(Z(3(#)),Z(0(#)))))))" pathConditionChanged="true" branchCondition="not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),or(or(equals(array,null),leq(length(array),Z(3(#)))),lt(Z(3(#)),Z(0(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true">
                                    <variable name="array" isArrayIndex="false">
                                       <value name="array {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                          <variable name="length" isArrayIndex="false">
                                             <value name="length {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                             </value>
                                          </variable>
                                          <variable name="array[*]" isArrayIndex="false">
                                             <value name="array[*] {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))">
                                                <variable name="value" isArrayIndex="false">
                                                   <value name="value {or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))))">
                                                   </value>
                                                   <value name="value {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))">
                                                   </value>
                                                   <value name="value {or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))))))">
                                                   </value>
                                                </variable>
                                             </value>
                                             <value name="array[*] {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" isValueAnObject="false" isValueUnknown="true" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                                             </value>
                                          </variable>
                                       </value>
                                    </variable>
                                    <variable name="exc" isArrayIndex="false">
                                       <value name="exc {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                       </value>
                                    </variable>
                                    <variable name="n_20" isArrayIndex="false">
                                       <value name="n_20 {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),null)))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),null)))">
                                       </value>
                                       <value name="n_20 {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),null)))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),null)))))">
                                          <variable name="value" isArrayIndex="false">
                                             <value name="value {or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))))">
                                             </value>
                                             <value name="value {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))">
                                             </value>
                                             <value name="value {or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))))))">
                                             </value>
                                          </variable>
                                       </value>
                                    </variable>
                                    <branchCondition name="not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),elem-update(n_21)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))),elem-update(x_3)(NonSimpleArrayAssignmentTest_value_1&lt;&lt;selectSK&gt;&gt;)),equals(n_21,null)))" pathCondition="and(and(and(and(and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),or(or(equals(array,null),leq(length(array),Z(3(#)))),lt(Z(3(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),elem-update(n_21)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))),elem-update(x_3)(NonSimpleArrayAssignmentTest_value_1&lt;&lt;selectSK&gt;&gt;)),equals(n_21,null))))" pathConditionChanged="true" branchCondition="not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),elem-update(n_21)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))),elem-update(x_3)(NonSimpleArrayAssignmentTest_value_1&lt;&lt;selectSK&gt;&gt;)),equals(n_21,null)))" mergedBranchCondition="false" isBranchConditionComputed="true">
                                       <variable name="array" isArrayIndex="false">
                                          <value name="array {or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                             <variable name="length" isArrayIndex="false">
                                                <value name="length {or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                                </value>
                                             </variable>
                                             <variable name="array[*]" isArrayIndex="false">
                                                <value name="array[*] {or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null))))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null))))))">
                                                   <variable name="value" isArrayIndex="false">
                                                      <value name="value {or(or(or(or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(or(or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))))">
                                                      </value>
                                                      <value name="value {or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))))))))">
                                                      </value>
                                                      <value name="value {or(or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))))">
                                                      </value>
                                                   </variable>
                                                </value>
                                                <value name="array[*] {or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null))))}" isValueAnObject="false" isValueUnknown="true" conditionString="or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null))))">
                                                </value>
                                             </variable>
                                          </value>
                                       </variable>
                                       <variable name="exc" isArrayIndex="false">
                                          <value name="exc {or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                          </value>
                                       </variable>
                                       <variable name="n_21" isArrayIndex="false">
                                          <value name="n_21 {or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                             <variable name="value" isArrayIndex="false">
                                                <value name="value {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                                </value>
                                                <value name="value {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                                </value>
                                             </variable>
                                          </value>
                                       </variable>
                                       <variable name="x_3" isArrayIndex="false">
                                          <value name="x_3 {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                          </value>
                                          <value name="x_3 {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                          </value>
                                       </variable>
                                       <statement name="return array;" pathCondition="and(and(and(and(and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),or(or(equals(array,null),leq(length(array),Z(3(#)))),lt(Z(3(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),elem-update(n_21)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))),elem-update(x_3)(NonSimpleArrayAssignmentTest_value_1&lt;&lt;selectSK&gt;&gt;)),equals(n_21,null))))" pathConditionChanged="false">
                                          <variable name="array" isArrayIndex="false">
                                             <value name="array {or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                                <variable name="length" isArrayIndex="false">
                                                   <value name="length {or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                                   </value>
                                                </variable>
                                                <variable name="array[*]" isArrayIndex="false">
                                                   <value name="array[*] {or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null))))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null))))))">
                                                      <variable name="value" isArrayIndex="false">
                                                         <value name="value {or(or(or(or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(or(or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))))">
                                                         </value>
                                                         <value name="value {or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))))))))">
                                                         </value>
                                                         <value name="value {or(or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))))">
                                                         </value>
                                                      </variable>
                                                   </value>
                                                   <value name="array[*] {or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null))))}" isValueAnObject="false" isValueUnknown="true" conditionString="or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null))))">
                                                   </value>
                                                </variable>
                                             </value>
                                          </variable>
                                          <variable name="exc" isArrayIndex="false">
                                             <value name="exc {or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                             </value>
                                          </variable>
                                          <methodReturn name="&lt;return of main&gt;" signature="&lt;return of NonSimpleArrayAssignmentTest.main(array)&gt;" pathCondition="and(and(and(and(and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),or(or(equals(array,null),leq(length(array),Z(3(#)))),lt(Z(3(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),elem-update(n_21)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))),elem-update(x_3)(NonSimpleArrayAssignmentTest_value_1&lt;&lt;selectSK&gt;&gt;)),equals(n_21,null))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="and(and(and(and(and(and(and(not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),elem-update(n_21)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))),elem-update(x_3)(NonSimpleArrayAssignmentTest_value_1&lt;&lt;selectSK&gt;&gt;)),equals(n_21,null))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),or(or(equals(array,null),leq(length(array),Z(3(#)))),lt(Z(3(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null)))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))))">
                                             <variable name="array" isArrayIndex="false">
                                                <value name="array {or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                                   <variable name="length" isArrayIndex="false">
                                                      <value name="length {or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                                      </value>
                                                   </variable>
                                                   <variable name="array[*]" isArrayIndex="false">
                                                      <value name="array[*] {or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null))))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null))))))">
                                                         <variable name="value" isArrayIndex="false">
                                                            <value name="value {or(or(or(or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(or(or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))))">
                                                            </value>
                                                            <value name="value {or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))))))))">
                                                            </value>
                                                            <value name="value {or(or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#))))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))))">
                                                            </value>
                                                         </variable>
                                                      </value>
                                                      <value name="array[*] {or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null))))}" isValueAnObject="false" isValueUnknown="true" conditionString="or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null))))">
                                                      </value>
                                                   </variable>
                                                </value>
                                             </variable>
                                             <variable name="exc" isArrayIndex="false">
                                                <value name="exc {or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                                </value>
                                             </variable>
                                             <termination name="&lt;end&gt;" pathCondition="and(and(and(and(and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),or(or(equals(array,null),leq(length(array),Z(3(#)))),lt(Z(3(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),elem-update(n_21)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))),elem-update(x_3)(NonSimpleArrayAssignmentTest_value_1&lt;&lt;selectSK&gt;&gt;)),equals(n_21,null))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                                                <variable name="exc" isArrayIndex="false">
                                                   <value name="exc {or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                                   </value>
                                                </variable>
                                             </termination>
                                             <callStateVariable name="array" isArrayIndex="false">
                                                <value name="array {true}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                                   <variable name="length" isArrayIndex="false">
                                                      <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                                      </value>
                                                   </variable>
                                                   <variable name="array[*]" isArrayIndex="false">
                                                      <value name="array[*] {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                                                         <variable name="value" isArrayIndex="false">
                                                            <value name="value {true}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                                            </value>
                                                         </variable>
                                                      </value>
                                                      <value name="array[*] {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)}" isValueAnObject="false" isValueUnknown="true" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)">
                                                      </value>
                                                   </variable>
                                                </value>
                                             </callStateVariable>
                                             <callStateVariable name="exc" isArrayIndex="false">
                                                <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                                </value>
                                             </callStateVariable>
                                             <callStateVariable name="heapBefore_main" isArrayIndex="false">
                                                <value name="heapBefore_main {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                                </value>
                                             </callStateVariable>
                                             <callStateVariable name="savedHeapBefore_main" isArrayIndex="false">
                                                <value name="savedHeapBefore_main {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                                </value>
                                             </callStateVariable>
                                          </methodReturn>
                                       </statement>
                                    </branchCondition>
                                    <branchCondition name="update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),elem-update(n_21)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))),elem-update(x_3)(NonSimpleArrayAssignmentTest_value_1&lt;&lt;selectSK&gt;&gt;)),equals(n_21,null))" pathCondition="and(and(and(and(and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),or(or(equals(array,null),leq(length(array),Z(3(#)))),lt(Z(3(#)),Z(0(#))))))),update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),elem-update(n_21)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))),elem-update(x_3)(NonSimpleArrayAssignmentTest_value_1&lt;&lt;selectSK&gt;&gt;)),equals(n_21,null)))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),elem-update(n_21)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))),elem-update(x_3)(NonSimpleArrayAssignmentTest_value_1&lt;&lt;selectSK&gt;&gt;)),equals(n_21,null))" mergedBranchCondition="false" isBranchConditionComputed="true">
                                       <variable name="array" isArrayIndex="false">
                                          <value name="array {or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                             <variable name="length" isArrayIndex="false">
                                                <value name="length {or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                                </value>
                                             </variable>
                                             <variable name="array[*]" isArrayIndex="false">
                                                <value name="array[*] {or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null))))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null))))))">
                                                   <variable name="value" isArrayIndex="false">
                                                      <value name="value {or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))))">
                                                      </value>
                                                      <value name="value {or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))))))))">
                                                      </value>
                                                      <value name="value {or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))">
                                                      </value>
                                                   </variable>
                                                </value>
                                                <value name="array[*] {or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null))))}" isValueAnObject="false" isValueUnknown="true" conditionString="or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null))))">
                                                </value>
                                             </variable>
                                          </value>
                                       </variable>
                                       <variable name="exc" isArrayIndex="false">
                                          <value name="exc {or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                          </value>
                                       </variable>
                                       <variable name="n_21" isArrayIndex="false">
                                          <value name="n_21 {or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                          </value>
                                       </variable>
                                       <variable name="x_3" isArrayIndex="false">
                                          <value name="x_3 {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                          </value>
                                          <value name="x_3 {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                          </value>
                                       </variable>
                                       <exceptionalMethodReturn name="&lt;throw java.lang.NullPointerException&gt;" signature="&lt;exceptional return of &lt;call NonSimpleArrayAssignmentTest.main(array)&gt;&gt;" pathCondition="and(and(and(and(and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),or(or(equals(array,null),leq(length(array),Z(3(#)))),lt(Z(3(#)),Z(0(#))))))),update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),elem-update(n_21)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))),elem-update(x_3)(NonSimpleArrayAssignmentTest_value_1&lt;&lt;selectSK&gt;&gt;)),equals(n_21,null)))" pathConditionChanged="false" methodReturnCondition="and(and(and(and(and(and(and(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),elem-update(n_21)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))),elem-update(x_3)(NonSimpleArrayAssignmentTest_value_1&lt;&lt;selectSK&gt;&gt;)),equals(n_21,null)),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),or(or(equals(array,null),leq(length(array),Z(3(#)))),lt(Z(3(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null)))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))))">
                                          <variable name="array" isArrayIndex="false">
                                             <value name="array {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                                <variable name="length" isArrayIndex="false">
                                                   <value name="length {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                                   </value>
                                                </variable>
                                                <variable name="array[*]" isArrayIndex="false">
                                                   <value name="array[*] {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))">
                                                      <variable name="value" isArrayIndex="false">
                                                         <value name="value {or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))))">
                                                         </value>
                                                         <value name="value {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))))))">
                                                         </value>
                                                         <value name="value {or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))))))">
                                                         </value>
                                                      </variable>
                                                   </value>
                                                   <value name="array[*] {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" isValueAnObject="false" isValueUnknown="true" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                                                   </value>
                                                </variable>
                                             </value>
                                          </variable>
                                          <variable name="exc" isArrayIndex="false">
                                             <value name="exc {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                             </value>
                                          </variable>
                                          <variable name="n_23" isArrayIndex="false">
                                             <value name="n_23 {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="java.lang.NullPointerException" valueString="n_26" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                             </value>
                                          </variable>
                                          <termination name="&lt;uncaught java.lang.NullPointerException&gt;" pathCondition="and(and(and(and(and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),or(or(equals(array,null),leq(length(array),Z(3(#)))),lt(Z(3(#)),Z(0(#))))))),update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),elem-update(n_21)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(3(#)))))),elem-update(x_3)(NonSimpleArrayAssignmentTest_value_1&lt;&lt;selectSK&gt;&gt;)),equals(n_21,null)))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                                             <variable name="exc" isArrayIndex="false">
                                                <value name="exc {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="java.lang.NullPointerException" valueString="n_26" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                                </value>
                                             </variable>
                                          </termination>
                                          <callStateVariable name="array" isArrayIndex="false">
                                             <value name="array {true}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                                <variable name="length" isArrayIndex="false">
                                                   <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                                   </value>
                                                </variable>
                                                <variable name="array[*]" isArrayIndex="false">
                                                   <value name="array[*] {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                                                      <variable name="value" isArrayIndex="false">
                                                         <value name="value {true}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                                         </value>
                                                      </variable>
                                                   </value>
                                                   <value name="array[*] {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)}" isValueAnObject="false" isValueUnknown="true" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)">
                                                   </value>
                                                </variable>
                                             </value>
                                          </callStateVariable>
                                          <callStateVariable name="exc" isArrayIndex="false">
                                             <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                             </value>
                                          </callStateVariable>
                                          <callStateVariable name="heapBefore_main" isArrayIndex="false">
                                             <value name="heapBefore_main {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                             </value>
                                          </callStateVariable>
                                          <callStateVariable name="savedHeapBefore_main" isArrayIndex="false">
                                             <value name="savedHeapBefore_main {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                             </value>
                                          </callStateVariable>
                                       </exceptionalMethodReturn>
                                    </branchCondition>
                                 </branchCondition>
                                 <branchCondition name="update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),and(not(equals(array,null)),or(leq(length(array),Z(3(#))),lt(Z(3(#)),Z(0(#))))))" pathCondition="and(and(and(and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null)))),update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),and(not(equals(array,null)),or(leq(length(array),Z(3(#))),lt(Z(3(#)),Z(0(#)))))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),and(not(equals(array,null)),or(leq(length(array),Z(3(#))),lt(Z(3(#)),Z(0(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true">
                                    <variable name="array" isArrayIndex="false">
                                       <value name="array {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                          <variable name="length" isArrayIndex="false">
                                             <value name="length {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="int" valueString="Z(3(#))" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                             </value>
                                          </variable>
                                          <variable name="[Z(0(#))]" arrayIndex="Z(0(#))" isArrayIndex="true">
                                             <value name="[Z(0(#))] {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                                <variable name="value" isArrayIndex="false">
                                                   <value name="value {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                                   </value>
                                                   <value name="value {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                                   </value>
                                                </variable>
                                             </value>
                                          </variable>
                                          <variable name="[Z(1(#))]" arrayIndex="Z(1(#))" isArrayIndex="true">
                                             <value name="[Z(1(#))] {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                                <variable name="value" isArrayIndex="false">
                                                   <value name="value {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))">
                                                   </value>
                                                   <value name="value {not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                                   </value>
                                                </variable>
                                             </value>
                                          </variable>
                                          <variable name="[Z(2(#))]" arrayIndex="Z(2(#))" isArrayIndex="true">
                                             <value name="[Z(2(#))] {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))">
                                                <variable name="value" isArrayIndex="false">
                                                   <value name="value {true}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                                   </value>
                                                </variable>
                                             </value>
                                             <value name="[Z(2(#))] {not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                                <variable name="value" isArrayIndex="false">
                                                   <value name="value {true}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                                   </value>
                                                </variable>
                                             </value>
                                          </variable>
                                       </value>
                                    </variable>
                                    <variable name="exc" isArrayIndex="false">
                                       <value name="exc {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                       </value>
                                    </variable>
                                    <exceptionalMethodReturn name="&lt;throw java.lang.ArrayIndexOutOfBoundsException&gt;" signature="&lt;exceptional return of &lt;call NonSimpleArrayAssignmentTest.main(array)&gt;&gt;" pathCondition="and(and(and(and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null)))),update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),and(not(equals(array,null)),or(leq(length(array),Z(3(#))),lt(Z(3(#)),Z(0(#)))))))" pathConditionChanged="false" methodReturnCondition="and(and(and(and(and(and(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),and(not(equals(array,null)),or(leq(length(array),Z(3(#))),lt(Z(3(#)),Z(0(#)))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null)))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))))">
                                       <variable name="array" isArrayIndex="false">
                                          <value name="array {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                             <variable name="length" isArrayIndex="false">
                                                <value name="length {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="int" valueString="Z(3(#))" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                                </value>
                                             </variable>
                                             <variable name="[Z(0(#))]" arrayIndex="Z(0(#))" isArrayIndex="true">
                                                <value name="[Z(0(#))] {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                                   <variable name="value" isArrayIndex="false">
                                                      <value name="value {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                                      </value>
                                                      <value name="value {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                                      </value>
                                                   </variable>
                                                </value>
                                             </variable>
                                             <variable name="[Z(1(#))]" arrayIndex="Z(1(#))" isArrayIndex="true">
                                                <value name="[Z(1(#))] {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                                   <variable name="value" isArrayIndex="false">
                                                      <value name="value {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))">
                                                      </value>
                                                      <value name="value {not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                                      </value>
                                                   </variable>
                                                </value>
                                             </variable>
                                             <variable name="[Z(2(#))]" arrayIndex="Z(2(#))" isArrayIndex="true">
                                                <value name="[Z(2(#))] {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))">
                                                   <variable name="value" isArrayIndex="false">
                                                      <value name="value {true}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                                      </value>
                                                   </variable>
                                                </value>
                                                <value name="[Z(2(#))] {not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                                   <variable name="value" isArrayIndex="false">
                                                      <value name="value {true}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                                      </value>
                                                   </variable>
                                                </value>
                                             </variable>
                                          </value>
                                       </variable>
                                       <variable name="exc" isArrayIndex="false">
                                          <value name="exc {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                          </value>
                                       </variable>
                                       <variable name="a_12" isArrayIndex="false">
                                          <value name="a_12 {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="java.lang.ArrayIndexOutOfBoundsException" valueString="a_15" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                          </value>
                                       </variable>
                                       <termination name="&lt;uncaught java.lang.ArrayIndexOutOfBoundsException&gt;" pathCondition="and(and(and(and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null)))),update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value,NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;))),and(not(equals(array,null)),or(leq(length(array),Z(3(#))),lt(Z(3(#)),Z(0(#)))))))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                                          <variable name="exc" isArrayIndex="false">
                                             <value name="exc {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="java.lang.ArrayIndexOutOfBoundsException" valueString="a_15" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                             </value>
                                          </variable>
                                       </termination>
                                       <callStateVariable name="array" isArrayIndex="false">
                                          <value name="array {true}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                             <variable name="length" isArrayIndex="false">
                                                <value name="length {true}" typeString="int" valueString="Z(3(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                                </value>
                                             </variable>
                                             <variable name="[Z(0(#))]" arrayIndex="Z(0(#))" isArrayIndex="true">
                                                <value name="[Z(0(#))] {true}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                                   <variable name="value" isArrayIndex="false">
                                                      <value name="value {true}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                                      </value>
                                                   </variable>
                                                </value>
                                             </variable>
                                             <variable name="[Z(1(#))]" arrayIndex="Z(1(#))" isArrayIndex="true">
                                                <value name="[Z(1(#))] {true}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                                   <variable name="value" isArrayIndex="false">
                                                      <value name="value {true}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                                      </value>
                                                   </variable>
                                                </value>
                                             </variable>
                                             <variable name="[Z(2(#))]" arrayIndex="Z(2(#))" isArrayIndex="true">
                                                <value name="[Z(2(#))] {true}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                                   <variable name="value" isArrayIndex="false">
                                                      <value name="value {true}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                                      </value>
                                                   </variable>
                                                </value>
                                             </variable>
                                          </value>
                                       </callStateVariable>
                                       <callStateVariable name="exc" isArrayIndex="false">
                                          <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </callStateVariable>
                                       <callStateVariable name="heapBefore_main" isArrayIndex="false">
                                          <value name="heapBefore_main {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </callStateVariable>
                                       <callStateVariable name="savedHeapBefore_main" isArrayIndex="false">
                                          <value name="savedHeapBefore_main {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </callStateVariable>
                                    </exceptionalMethodReturn>
                                 </branchCondition>
                              </statement>
                           </branchCondition>
                           <branchCondition name="update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null))" pathCondition="and(and(and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))),update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null)))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null))" mergedBranchCondition="false" isBranchConditionComputed="true">
                              <variable name="array" isArrayIndex="false">
                                 <value name="array {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                       </value>
                                    </variable>
                                    <variable name="array[*]" isArrayIndex="false">
                                       <value name="array[*] {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))">
                                          <variable name="value" isArrayIndex="false">
                                             <value name="value {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                             </value>
                                             <value name="value {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))))">
                                             </value>
                                          </variable>
                                       </value>
                                       <value name="array[*] {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" isValueAnObject="false" isValueUnknown="true" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                              <variable name="exc" isArrayIndex="false">
                                 <value name="exc {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                 </value>
                              </variable>
                              <variable name="n_10" isArrayIndex="false">
                                 <value name="n_10 {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))))">
                                 </value>
                              </variable>
                              <variable name="x_2" isArrayIndex="false">
                                 <value name="x_2 {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))">
                                 </value>
                                 <value name="x_2 {not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                 </value>
                              </variable>
                              <exceptionalMethodReturn name="&lt;throw java.lang.NullPointerException&gt;" signature="&lt;exceptional return of &lt;call NonSimpleArrayAssignmentTest.main(array)&gt;&gt;" pathCondition="and(and(and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))),update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null)))" pathConditionChanged="false" methodReturnCondition="and(and(and(and(and(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null)),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))))">
                                 <variable name="array" isArrayIndex="false">
                                    <value name="array {true}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                       <variable name="length" isArrayIndex="false">
                                          <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                       <variable name="array[*]" isArrayIndex="false">
                                          <value name="array[*] {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                                             <variable name="value" isArrayIndex="false">
                                                <value name="value {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))">
                                                </value>
                                                <value name="value {not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                                </value>
                                             </variable>
                                          </value>
                                          <value name="array[*] {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)}" isValueAnObject="false" isValueUnknown="true" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)">
                                          </value>
                                       </variable>
                                    </value>
                                 </variable>
                                 <variable name="exc" isArrayIndex="false">
                                    <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                                 <variable name="n_16" isArrayIndex="false">
                                    <value name="n_16 {true}" typeString="java.lang.NullPointerException" valueString="n_19" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                                 <termination name="&lt;uncaught java.lang.NullPointerException&gt;" pathCondition="and(and(and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))),update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(x_2)(NonSimpleArrayAssignmentTest_value_0&lt;&lt;selectSK&gt;&gt;)),equals(n_10,null)))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                                    <variable name="exc" isArrayIndex="false">
                                       <value name="exc {true}" typeString="java.lang.NullPointerException" valueString="n_19" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                 </termination>
                                 <callStateVariable name="array" isArrayIndex="false">
                                    <value name="array {true}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                       <variable name="length" isArrayIndex="false">
                                          <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                       <variable name="array[*]" isArrayIndex="false">
                                          <value name="array[*] {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                                             <variable name="value" isArrayIndex="false">
                                                <value name="value {true}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                                </value>
                                             </variable>
                                          </value>
                                          <value name="array[*] {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)}" isValueAnObject="false" isValueUnknown="true" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)">
                                          </value>
                                       </variable>
                                    </value>
                                 </callStateVariable>
                                 <callStateVariable name="exc" isArrayIndex="false">
                                    <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </callStateVariable>
                                 <callStateVariable name="heapBefore_main" isArrayIndex="false">
                                    <value name="heapBefore_main {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </callStateVariable>
                                 <callStateVariable name="savedHeapBefore_main" isArrayIndex="false">
                                    <value name="savedHeapBefore_main {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </callStateVariable>
                              </exceptionalMethodReturn>
                           </branchCondition>
                        </branchCondition>
                        <branchCondition name="update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null))" pathCondition="and(and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null))" mergedBranchCondition="false" isBranchConditionComputed="true">
                           <variable name="array" isArrayIndex="false">
                              <value name="array {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                    </value>
                                 </variable>
                                 <variable name="array[*]" isArrayIndex="false">
                                    <value name="array[*] {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))">
                                       <variable name="value" isArrayIndex="false">
                                          <value name="value {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))">
                                          </value>
                                          <value name="value {or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))">
                                          </value>
                                       </variable>
                                    </value>
                                    <value name="array[*] {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" isValueAnObject="false" isValueUnknown="true" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="exc" isArrayIndex="false">
                              <value name="exc {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                              </value>
                           </variable>
                           <variable name="n_10" isArrayIndex="false">
                              <value name="n_10 {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)">
                              </value>
                              <value name="n_10 {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))">
                                 <variable name="value" isArrayIndex="false">
                                    <value name="value {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))">
                                    </value>
                                    <value name="value {not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="n_11" isArrayIndex="false">
                              <value name="n_11 {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                              </value>
                           </variable>
                           <exceptionalMethodReturn name="&lt;throw java.lang.NullPointerException&gt;" signature="&lt;exceptional return of &lt;call NonSimpleArrayAssignmentTest.main(array)&gt;&gt;" pathCondition="and(and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))" pathConditionChanged="false" methodReturnCondition="and(and(and(and(update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))))">
                              <variable name="array" isArrayIndex="false">
                                 <value name="array {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                       </value>
                                    </variable>
                                    <variable name="array[*]" isArrayIndex="false">
                                       <value name="array[*] {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))),and(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))))">
                                          <variable name="value" isArrayIndex="false">
                                             <value name="value {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))">
                                             </value>
                                             <value name="value {or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="or(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))))">
                                             </value>
                                          </variable>
                                       </value>
                                       <value name="array[*] {or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" isValueAnObject="false" isValueUnknown="true" conditionString="or(and(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),and(and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))),equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                              <variable name="exc" isArrayIndex="false">
                                 <value name="exc {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                 </value>
                              </variable>
                              <variable name="n_10" isArrayIndex="false">
                                 <value name="n_10 {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)">
                                 </value>
                                 <value name="n_10 {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))">
                                    <variable name="value" isArrayIndex="false">
                                       <value name="value {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))">
                                       </value>
                                       <value name="value {not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                              <variable name="n_12" isArrayIndex="false">
                                 <value name="n_12 {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="java.lang.NullPointerException" valueString="n_15" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                 </value>
                              </variable>
                              <termination name="&lt;uncaught java.lang.NullPointerException&gt;" pathCondition="and(and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),or(or(equals(array,null),leq(length(array),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),update-application(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),elem-update(n_11)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(2(#)))))),equals(n_11,null)))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                                 <variable name="exc" isArrayIndex="false">
                                    <value name="exc {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="java.lang.NullPointerException" valueString="n_15" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                    </value>
                                 </variable>
                              </termination>
                              <callStateVariable name="array" isArrayIndex="false">
                                 <value name="array {true}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="array[*]" isArrayIndex="false">
                                       <value name="array[*] {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                                          <variable name="value" isArrayIndex="false">
                                             <value name="value {true}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                             </value>
                                          </variable>
                                       </value>
                                       <value name="array[*] {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)}" isValueAnObject="false" isValueUnknown="true" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)">
                                       </value>
                                    </variable>
                                 </value>
                              </callStateVariable>
                              <callStateVariable name="exc" isArrayIndex="false">
                                 <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </callStateVariable>
                              <callStateVariable name="heapBefore_main" isArrayIndex="false">
                                 <value name="heapBefore_main {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </callStateVariable>
                              <callStateVariable name="savedHeapBefore_main" isArrayIndex="false">
                                 <value name="savedHeapBefore_main {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </callStateVariable>
                           </exceptionalMethodReturn>
                        </branchCondition>
                     </branchCondition>
                     <branchCondition name="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),and(not(equals(array,null)),or(leq(length(array),Z(2(#))),lt(Z(2(#)),Z(0(#))))))" pathCondition="and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),and(not(equals(array,null)),or(leq(length(array),Z(2(#))),lt(Z(2(#)),Z(0(#)))))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),and(not(equals(array,null)),or(leq(length(array),Z(2(#))),lt(Z(2(#)),Z(0(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true">
                        <variable name="array" isArrayIndex="false">
                           <value name="array {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="int" valueString="Z(2(#))" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                 </value>
                              </variable>
                              <variable name="[Z(0(#))]" arrayIndex="Z(0(#))" isArrayIndex="true">
                                 <value name="[Z(0(#))] {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                    <variable name="value" isArrayIndex="false">
                                       <value name="value {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                              <variable name="[Z(1(#))]" arrayIndex="Z(1(#))" isArrayIndex="true">
                                 <value name="[Z(1(#))] {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" isValueAnObject="false" isValueUnknown="true" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="exc" isArrayIndex="false">
                           <value name="exc {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                           </value>
                        </variable>
                        <variable name="n_10" isArrayIndex="false">
                           <value name="n_10 {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)">
                           </value>
                           <value name="n_10 {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))">
                              <variable name="value" isArrayIndex="false">
                                 <value name="value {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))">
                                 </value>
                                 <value name="value {not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <exceptionalMethodReturn name="&lt;throw java.lang.ArrayIndexOutOfBoundsException&gt;" signature="&lt;exceptional return of &lt;call NonSimpleArrayAssignmentTest.main(array)&gt;&gt;" pathCondition="and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),and(not(equals(array,null)),or(leq(length(array),Z(2(#))),lt(Z(2(#)),Z(0(#)))))))" pathConditionChanged="false" methodReturnCondition="and(and(and(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),and(not(equals(array,null)),or(leq(length(array),Z(2(#))),lt(Z(2(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))))">
                           <variable name="array" isArrayIndex="false">
                              <value name="array {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="int" valueString="Z(2(#))" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                    </value>
                                 </variable>
                                 <variable name="[Z(0(#))]" arrayIndex="Z(0(#))" isArrayIndex="true">
                                    <value name="[Z(0(#))] {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                       <variable name="value" isArrayIndex="false">
                                          <value name="value {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                          </value>
                                       </variable>
                                    </value>
                                 </variable>
                                 <variable name="[Z(1(#))]" arrayIndex="Z(1(#))" isArrayIndex="true">
                                    <value name="[Z(1(#))] {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" isValueAnObject="false" isValueUnknown="true" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="exc" isArrayIndex="false">
                              <value name="exc {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                              </value>
                           </variable>
                           <variable name="n_10" isArrayIndex="false">
                              <value name="n_10 {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)">
                              </value>
                              <value name="n_10 {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)))">
                                 <variable name="value" isArrayIndex="false">
                                    <value name="value {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))">
                                    </value>
                                    <value name="value {not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))))">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="a_8" isArrayIndex="false">
                              <value name="a_8 {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="java.lang.ArrayIndexOutOfBoundsException" valueString="a_11" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                              </value>
                           </variable>
                           <termination name="&lt;uncaught java.lang.ArrayIndexOutOfBoundsException&gt;" pathCondition="and(and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),or(or(equals(array,null),leq(length(array),Z(1(#)))),lt(Z(1(#)),Z(0(#))))))),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),elem-update(n_10)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))))),and(not(equals(array,null)),or(leq(length(array),Z(2(#))),lt(Z(2(#)),Z(0(#)))))))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                              <variable name="exc" isArrayIndex="false">
                                 <value name="exc {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" typeString="java.lang.ArrayIndexOutOfBoundsException" valueString="a_11" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                 </value>
                              </variable>
                           </termination>
                           <callStateVariable name="array" isArrayIndex="false">
                              <value name="array {true}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {true}" typeString="int" valueString="Z(2(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                                 <variable name="[Z(0(#))]" arrayIndex="Z(0(#))" isArrayIndex="true">
                                    <value name="[Z(0(#))] {true}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                       <variable name="value" isArrayIndex="false">
                                          <value name="value {true}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                    </value>
                                 </variable>
                                 <variable name="[Z(1(#))]" arrayIndex="Z(1(#))" isArrayIndex="true">
                                    <value name="[Z(1(#))] {or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))}" isValueAnObject="false" isValueUnknown="true" conditionString="or(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null),and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(1(#)))),null))))">
                                    </value>
                                 </variable>
                              </value>
                           </callStateVariable>
                           <callStateVariable name="exc" isArrayIndex="false">
                              <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </callStateVariable>
                           <callStateVariable name="heapBefore_main" isArrayIndex="false">
                              <value name="heapBefore_main {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </callStateVariable>
                           <callStateVariable name="savedHeapBefore_main" isArrayIndex="false">
                              <value name="savedHeapBefore_main {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </callStateVariable>
                        </exceptionalMethodReturn>
                     </branchCondition>
                  </branchCondition>
                  <branchCondition name="update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),and(not(equals(array,null)),or(leq(length(array),Z(1(#))),lt(Z(1(#)),Z(0(#))))))" pathCondition="and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),and(not(equals(array,null)),or(leq(length(array),Z(1(#))),lt(Z(1(#)),Z(0(#)))))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),and(not(equals(array,null)),or(leq(length(array),Z(1(#))),lt(Z(1(#)),Z(0(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true">
                     <variable name="array" isArrayIndex="false">
                        <value name="array {true}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           <variable name="length" isArrayIndex="false">
                              <value name="length {true}" typeString="int" valueString="Z(1(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="[Z(0(#))]" arrayIndex="Z(0(#))" isArrayIndex="true">
                              <value name="[Z(0(#))] {true}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="value" isArrayIndex="false">
                                    <value name="value {true}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <exceptionalMethodReturn name="&lt;throw java.lang.ArrayIndexOutOfBoundsException&gt;" signature="&lt;exceptional return of &lt;call NonSimpleArrayAssignmentTest.main(array)&gt;&gt;" pathCondition="and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),and(not(equals(array,null)),or(leq(length(array),Z(1(#))),lt(Z(1(#)),Z(0(#)))))))" pathConditionChanged="false" methodReturnCondition="and(and(update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),and(not(equals(array,null)),or(leq(length(array),Z(1(#))),lt(Z(1(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))))">
                        <variable name="array" isArrayIndex="false">
                           <value name="array {true}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="Z(1(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="[Z(0(#))]" arrayIndex="Z(0(#))" isArrayIndex="true">
                                 <value name="[Z(0(#))] {true}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                    <variable name="value" isArrayIndex="false">
                                       <value name="value {true}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="a_4" isArrayIndex="false">
                           <value name="a_4 {true}" typeString="java.lang.ArrayIndexOutOfBoundsException" valueString="a_7" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <termination name="&lt;uncaught java.lang.ArrayIndexOutOfBoundsException&gt;" pathCondition="and(and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))),update-application(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value,Z(0(0(1(#))))))),and(not(equals(array,null)),or(leq(length(array),Z(1(#))),lt(Z(1(#)),Z(0(#)))))))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                           <variable name="exc" isArrayIndex="false">
                              <value name="exc {true}" typeString="java.lang.ArrayIndexOutOfBoundsException" valueString="a_7" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                        </termination>
                        <callStateVariable name="array" isArrayIndex="false">
                           <value name="array {true}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="Z(1(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="[Z(0(#))]" arrayIndex="Z(0(#))" isArrayIndex="true">
                                 <value name="[Z(0(#))] {true}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#))))" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                    <variable name="value" isArrayIndex="false">
                                       <value name="value {true}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                           </value>
                        </callStateVariable>
                        <callStateVariable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </callStateVariable>
                        <callStateVariable name="heapBefore_main" isArrayIndex="false">
                           <value name="heapBefore_main {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </callStateVariable>
                        <callStateVariable name="savedHeapBefore_main" isArrayIndex="false">
                           <value name="savedHeapBefore_main {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </callStateVariable>
                     </exceptionalMethodReturn>
                  </branchCondition>
               </statement>
            </branchCondition>
            <branchCondition name="update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null))" pathCondition="and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null))" mergedBranchCondition="false" isBranchConditionComputed="true">
               <variable name="array" isArrayIndex="false">
                  <value name="array {true}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     <variable name="length" isArrayIndex="false">
                        <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="array[*]" isArrayIndex="false">
                        <value name="array[*] {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                           <variable name="value" isArrayIndex="false">
                              <value name="value {true}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                        </value>
                        <value name="array[*] {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)}" isValueAnObject="false" isValueUnknown="true" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)">
                        </value>
                     </variable>
                  </value>
               </variable>
               <variable name="exc" isArrayIndex="false">
                  <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="n" isArrayIndex="false">
                  <value name="n {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <exceptionalMethodReturn name="&lt;throw java.lang.NullPointerException&gt;" signature="&lt;exceptional return of &lt;call NonSimpleArrayAssignmentTest.main(array)&gt;&gt;" pathCondition="and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))" pathConditionChanged="false" methodReturnCondition="and(update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)),not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))))">
                  <variable name="array" isArrayIndex="false">
                     <value name="array {true}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="length" isArrayIndex="false">
                           <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="array[*]" isArrayIndex="false">
                           <value name="array[*] {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                              <variable name="value" isArrayIndex="false">
                                 <value name="value {true}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                           <value name="array[*] {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)}" isValueAnObject="false" isValueUnknown="true" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="n_5" isArrayIndex="false">
                     <value name="n_5 {true}" typeString="java.lang.NullPointerException" valueString="n_8" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <termination name="&lt;uncaught java.lang.NullPointerException&gt;" pathCondition="and(not(update-application(elem-update(exc)(null),or(or(equals(array,null),leq(length(array),Z(0(#)))),lt(Z(0(#)),Z(0(#)))))),update-application(parallel-upd(elem-update(exc)(null),elem-update(n)(NonSimpleArrayAssignmentTest::select(heap,array,arr(Z(0(#)))))),equals(n,null)))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                     <variable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="java.lang.NullPointerException" valueString="n_8" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                  </termination>
                  <callStateVariable name="array" isArrayIndex="false">
                     <value name="array {true}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="length" isArrayIndex="false">
                           <value name="length {true}" typeString="int" valueString="length(array)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="array[*]" isArrayIndex="false">
                           <value name="array[*] {and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))}" typeString="NonSimpleArrayAssignmentTest" valueString="NonSimpleArrayAssignmentTest::select(heap,array,arr(*))" isValueAnObject="true" isValueUnknown="false" conditionString="and(not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)),not(equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)))">
                              <variable name="value" isArrayIndex="false">
                                 <value name="value {true}" typeString="int" valueString="int::select(heap,NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),NonSimpleArrayAssignmentTest::$value)" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                           <value name="array[*] {equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)}" isValueAnObject="false" isValueUnknown="true" conditionString="equals(NonSimpleArrayAssignmentTest::select(heap,array,arr(*)),null)">
                           </value>
                        </variable>
                     </value>
                  </callStateVariable>
                  <callStateVariable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </callStateVariable>
                  <callStateVariable name="heapBefore_main" isArrayIndex="false">
                     <value name="heapBefore_main {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </callStateVariable>
                  <callStateVariable name="savedHeapBefore_main" isArrayIndex="false">
                     <value name="savedHeapBefore_main {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </callStateVariable>
               </exceptionalMethodReturn>
            </branchCondition>
         </branchCondition>
         <branchCondition name="update-application(elem-update(exc)(null),equals(array,null))" pathCondition="update-application(elem-update(exc)(null),equals(array,null))" pathConditionChanged="true" branchCondition="update-application(elem-update(exc)(null),equals(array,null))" mergedBranchCondition="false" isBranchConditionComputed="true">
            <variable name="array" isArrayIndex="false">
               <value name="array {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <variable name="exc" isArrayIndex="false">
               <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <exceptionalMethodReturn name="&lt;throw java.lang.NullPointerException&gt;" signature="&lt;exceptional return of &lt;call NonSimpleArrayAssignmentTest.main(array)&gt;&gt;" pathCondition="update-application(elem-update(exc)(null),equals(array,null))" pathConditionChanged="false" methodReturnCondition="update-application(elem-update(exc)(null),equals(array,null))">
               <variable name="array" isArrayIndex="false">
                  <value name="array {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="exc" isArrayIndex="false">
                  <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="n_1" isArrayIndex="false">
                  <value name="n_1 {true}" typeString="java.lang.NullPointerException" valueString="n_4" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <termination name="&lt;uncaught java.lang.NullPointerException&gt;" pathCondition="update-application(elem-update(exc)(null),equals(array,null))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="java.lang.NullPointerException" valueString="n_4" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
               </termination>
               <callStateVariable name="array" isArrayIndex="false">
                  <value name="array {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </callStateVariable>
               <callStateVariable name="exc" isArrayIndex="false">
                  <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </callStateVariable>
               <callStateVariable name="heapBefore_main" isArrayIndex="false">
                  <value name="heapBefore_main {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </callStateVariable>
               <callStateVariable name="savedHeapBefore_main" isArrayIndex="false">
                  <value name="savedHeapBefore_main {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </callStateVariable>
            </exceptionalMethodReturn>
         </branchCondition>
         <branchCondition name="update-application(elem-update(exc)(null),and(not(equals(array,null)),or(leq(length(array),Z(0(#))),lt(Z(0(#)),Z(0(#))))))" pathCondition="update-application(elem-update(exc)(null),and(not(equals(array,null)),or(leq(length(array),Z(0(#))),lt(Z(0(#)),Z(0(#))))))" pathConditionChanged="true" branchCondition="update-application(elem-update(exc)(null),and(not(equals(array,null)),or(leq(length(array),Z(0(#))),lt(Z(0(#)),Z(0(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true">
            <variable name="array" isArrayIndex="false">
               <value name="array {true}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                  <variable name="length" isArrayIndex="false">
                     <value name="length {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
               </value>
            </variable>
            <variable name="exc" isArrayIndex="false">
               <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <exceptionalMethodReturn name="&lt;throw java.lang.ArrayIndexOutOfBoundsException&gt;" signature="&lt;exceptional return of &lt;call NonSimpleArrayAssignmentTest.main(array)&gt;&gt;" pathCondition="update-application(elem-update(exc)(null),and(not(equals(array,null)),or(leq(length(array),Z(0(#))),lt(Z(0(#)),Z(0(#))))))" pathConditionChanged="false" methodReturnCondition="update-application(elem-update(exc)(null),and(not(equals(array,null)),or(leq(length(array),Z(0(#))),lt(Z(0(#)),Z(0(#))))))">
               <variable name="array" isArrayIndex="false">
                  <value name="array {true}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     <variable name="length" isArrayIndex="false">
                        <value name="length {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                  </value>
               </variable>
               <variable name="exc" isArrayIndex="false">
                  <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="a" isArrayIndex="false">
                  <value name="a {true}" typeString="java.lang.ArrayIndexOutOfBoundsException" valueString="a_3" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <termination name="&lt;uncaught java.lang.ArrayIndexOutOfBoundsException&gt;" pathCondition="update-application(elem-update(exc)(null),and(not(equals(array,null)),or(leq(length(array),Z(0(#))),lt(Z(0(#)),Z(0(#))))))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="java.lang.ArrayIndexOutOfBoundsException" valueString="a_3" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
               </termination>
               <callStateVariable name="array" isArrayIndex="false">
                  <value name="array {true}" typeString="NonSimpleArrayAssignmentTest[]" valueString="array" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     <variable name="length" isArrayIndex="false">
                        <value name="length {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                  </value>
               </callStateVariable>
               <callStateVariable name="exc" isArrayIndex="false">
                  <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </callStateVariable>
               <callStateVariable name="heapBefore_main" isArrayIndex="false">
                  <value name="heapBefore_main {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </callStateVariable>
               <callStateVariable name="savedHeapBefore_main" isArrayIndex="false">
                  <value name="savedHeapBefore_main {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </callStateVariable>
            </exceptionalMethodReturn>
         </branchCondition>
      </statement>
      <methodReturnEntry path="/0/0/0/0/0/0/0/0/0/0/0/0/0/0"/>
      <methodReturnEntry path="/0/0/0/0/0/0/0/0/0/0/0/1/0"/>
      <methodReturnEntry path="/0/0/0/0/0/0/0/0/0/0/1/0"/>
      <methodReturnEntry path="/0/0/0/0/0/0/0/0/1/0"/>
      <methodReturnEntry path="/0/0/0/0/0/0/0/1/0"/>
      <methodReturnEntry path="/0/0/0/0/0/0/1/0"/>
      <methodReturnEntry path="/0/0/0/0/0/1/0"/>
      <methodReturnEntry path="/0/0/0/1/0"/>
      <methodReturnEntry path="/0/0/1/0"/>
      <methodReturnEntry path="/0/0/2/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/0/0/0/0/0/0/0/0/1/0/0"/>
   <terminationEntry path="/0/0/0/0/0/0/0/0/0/0/1/0/0"/>
   <terminationEntry path="/0/0/0/0/0/0/0/0/1/0/0"/>
   <terminationEntry path="/0/0/0/0/0/0/0/1/0/0"/>
   <terminationEntry path="/0/0/0/0/0/0/1/0/0"/>
   <terminationEntry path="/0/0/0/0/0/1/0/0"/>
   <terminationEntry path="/0/0/0/1/0/0"/>
   <terminationEntry path="/0/0/1/0/0"/>
   <terminationEntry path="/0/0/2/0/0"/>
</start>
