<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <variable name="heapAtPre" isArrayIndex="false">
      <value name="heapAtPre {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
      </value>
   </variable>
   <methodCall name="&lt;call ArrayCreationTest.main(n)&gt;" pathCondition="true" pathConditionChanged="false">
      <variable name="exc" isArrayIndex="false">
         <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
         </value>
      </variable>
      <statement name="array=new int[n];" pathCondition="true" pathConditionChanged="false">
         <variable name="n" isArrayIndex="false">
            <value name="n {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
            </value>
         </variable>
         <variable name="exc" isArrayIndex="false">
            <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
            </value>
         </variable>
         <branchCondition name="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,TRUE))" pathCondition="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,TRUE))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,TRUE))" mergedBranchCondition="false" isBranchConditionComputed="true">
            <variable name="n" isArrayIndex="false">
               <value name="n {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <variable name="exc" isArrayIndex="false">
               <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <variable name="dim0" isArrayIndex="false">
               <value name="dim0 {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <variable name="x" isArrayIndex="false">
               <value name="x {true}" typeString="boolean" valueString="TRUE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <exceptionalMethodReturn name="&lt;throw java.lang.NegativeArraySizeException&gt;" signature="&lt;exceptional return of &lt;call ArrayCreationTest.main(n)&gt;&gt;" pathCondition="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,TRUE))" pathConditionChanged="false" methodReturnCondition="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,TRUE))">
               <variable name="n" isArrayIndex="false">
                  <value name="n {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="exc" isArrayIndex="false">
                  <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="n_1" isArrayIndex="false">
                  <value name="n_1 {true}" typeString="java.lang.NegativeArraySizeException" valueString="n_4" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <termination name="&lt;uncaught java.lang.NegativeArraySizeException&gt;" pathCondition="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,TRUE))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="java.lang.NegativeArraySizeException" valueString="n_4" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
               </termination>
               <callStateVariable name="n" isArrayIndex="false">
                  <value name="n {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </callStateVariable>
               <callStateVariable name="exc" isArrayIndex="false">
                  <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </callStateVariable>
               <callStateVariable name="heapBefore_main" isArrayIndex="false">
                  <value name="heapBefore_main {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </callStateVariable>
               <callStateVariable name="savedHeapBefore_main" isArrayIndex="false">
                  <value name="savedHeapBefore_main {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </callStateVariable>
            </exceptionalMethodReturn>
         </branchCondition>
         <branchCondition name="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE))" pathCondition="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE))" mergedBranchCondition="false" isBranchConditionComputed="true">
            <variable name="n" isArrayIndex="false">
               <value name="n {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <variable name="exc" isArrayIndex="false">
               <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <variable name="dim0" isArrayIndex="false">
               <value name="dim0 {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <variable name="x" isArrayIndex="false">
               <value name="x {true}" typeString="boolean" valueString="FALSE" isValueAnObject="false" isValueUnknown="false" conditionString="true">
               </value>
            </variable>
            <statement name="array[0]=100;" pathCondition="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE))" pathConditionChanged="false">
               <variable name="n" isArrayIndex="false">
                  <value name="n {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="exc" isArrayIndex="false">
                  <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                  </value>
               </variable>
               <variable name="ArrayCreationTest::array" isArrayIndex="false">
                  <value name="ArrayCreationTest::array {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                     <variable name="length" isArrayIndex="false">
                        <value name="length {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="x_arr_2[*]" isArrayIndex="false">
                        <value name="x_arr_2[*] {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                  </value>
               </variable>
               <branchCondition name="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(and(not(equals(x_arr_4,null)),lt(Z(0(#)),length(x_arr_4))),geq(Z(0(#)),Z(0(#)))))" pathCondition="and(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(and(not(equals(x_arr_4,null)),lt(Z(0(#)),length(x_arr_4))),geq(Z(0(#)),Z(0(#))))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(and(not(equals(x_arr_4,null)),lt(Z(0(#)),length(x_arr_4))),geq(Z(0(#)),Z(0(#)))))" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <variable name="n" isArrayIndex="false">
                     <value name="n {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="ArrayCreationTest::array" isArrayIndex="false">
                     <value name="ArrayCreationTest::array {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="length" isArrayIndex="false">
                           <value name="length {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="x_arr_2[*]" isArrayIndex="false">
                           <value name="x_arr_2[*] {equals(*,Z(0(#)))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(*,Z(0(#)))">
                           </value>
                           <value name="x_arr_2[*] {not(equals(*,Z(0(#))))}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(*,Z(0(#))))">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="x_arr_4" isArrayIndex="false">
                     <value name="x_arr_4 {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="length" isArrayIndex="false">
                           <value name="length {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="x_arr_2[*]" isArrayIndex="false">
                           <value name="x_arr_2[*] {equals(*,Z(0(#)))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(*,Z(0(#)))">
                           </value>
                           <value name="x_arr_2[*] {not(equals(*,Z(0(#))))}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(*,Z(0(#))))">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <statement name="array[1]=array[2];" pathCondition="and(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(and(not(equals(x_arr_4,null)),lt(Z(0(#)),length(x_arr_4))),geq(Z(0(#)),Z(0(#))))))" pathConditionChanged="false">
                     <variable name="n" isArrayIndex="false">
                        <value name="n {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="ArrayCreationTest::array" isArrayIndex="false">
                        <value name="ArrayCreationTest::array {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           <variable name="length" isArrayIndex="false">
                              <value name="length {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="x_arr_2[*]" isArrayIndex="false">
                              <value name="x_arr_2[*] {equals(*,Z(0(#)))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(*,Z(0(#)))">
                              </value>
                              <value name="x_arr_2[*] {not(equals(*,Z(0(#))))}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(*,Z(0(#))))">
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <branchCondition name="not(update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))))),elem-update(x_arr_6)(x_arr_2)),elem-update(x_3)(Z(1(#)))),elem-update(x_arr_7)(x_arr_2)),or(or(equals(x_arr_7,null),leq(length(x_arr_7),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))" pathCondition="and(and(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(and(not(equals(x_arr_4,null)),lt(Z(0(#)),length(x_arr_4))),geq(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))))),elem-update(x_arr_6)(x_arr_2)),elem-update(x_3)(Z(1(#)))),elem-update(x_arr_7)(x_arr_2)),or(or(equals(x_arr_7,null),leq(length(x_arr_7),Z(2(#)))),lt(Z(2(#)),Z(0(#)))))))" pathConditionChanged="true" branchCondition="not(update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))))),elem-update(x_arr_6)(x_arr_2)),elem-update(x_3)(Z(1(#)))),elem-update(x_arr_7)(x_arr_2)),or(or(equals(x_arr_7,null),leq(length(x_arr_7),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true">
                        <variable name="n" isArrayIndex="false">
                           <value name="n {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="ArrayCreationTest::array" isArrayIndex="false">
                           <value name="ArrayCreationTest::array {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="x_arr_2[*]" isArrayIndex="false">
                                 <value name="x_arr_2[*] {equals(*,Z(0(#)))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(*,Z(0(#)))">
                                 </value>
                                 <value name="x_arr_2[*] {not(equals(*,Z(0(#))))}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(*,Z(0(#))))">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="x_arr_6" isArrayIndex="false">
                           <value name="x_arr_6 {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="x_arr_2[*]" isArrayIndex="false">
                                 <value name="x_arr_2[*] {equals(*,Z(0(#)))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(*,Z(0(#)))">
                                 </value>
                                 <value name="x_arr_2[*] {not(equals(*,Z(0(#))))}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(*,Z(0(#))))">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="x_3" isArrayIndex="false">
                           <value name="x_3 {true}" typeString="int" valueString="Z(1(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="x_arr_7" isArrayIndex="false">
                           <value name="x_arr_7 {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="x_arr_2[*]" isArrayIndex="false">
                                 <value name="x_arr_2[*] {equals(*,Z(0(#)))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(*,Z(0(#)))">
                                 </value>
                                 <value name="x_arr_2[*] {not(equals(*,Z(0(#))))}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(*,Z(0(#))))">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="x_4" isArrayIndex="false">
                           <value name="x_4 {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <statement name="array[3]=array[0];" pathCondition="and(and(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(and(not(equals(x_arr_4,null)),lt(Z(0(#)),length(x_arr_4))),geq(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))))),elem-update(x_arr_6)(x_arr_2)),elem-update(x_3)(Z(1(#)))),elem-update(x_arr_7)(x_arr_2)),or(or(equals(x_arr_7,null),leq(length(x_arr_7),Z(2(#)))),lt(Z(2(#)),Z(0(#)))))))" pathConditionChanged="false">
                           <variable name="n" isArrayIndex="false">
                              <value name="n {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="exc" isArrayIndex="false">
                              <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="ArrayCreationTest::array" isArrayIndex="false">
                              <value name="ArrayCreationTest::array {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                                 <variable name="x_arr_2[*]" isArrayIndex="false">
                                    <value name="x_arr_2[*] {equals(*,Z(0(#)))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(*,Z(0(#)))">
                                    </value>
                                    <value name="x_arr_2[*] {not(equals(*,Z(0(#))))}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(*,Z(0(#))))">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <branchCondition name="update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))),x_arr_2,arr(Z(1(#))),Z(0(#))))),elem-update(x_arr_9)(x_arr_2)),elem-update(x_5)(Z(3(#)))),elem-update(x_6)(Z(0(0(1(#)))))),and(and(not(equals(x_arr_9,null)),lt(x_5,length(x_arr_9))),geq(x_5,Z(0(#)))))" pathCondition="and(and(and(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(and(not(equals(x_arr_4,null)),lt(Z(0(#)),length(x_arr_4))),geq(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))))),elem-update(x_arr_6)(x_arr_2)),elem-update(x_3)(Z(1(#)))),elem-update(x_arr_7)(x_arr_2)),or(or(equals(x_arr_7,null),leq(length(x_arr_7),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))),x_arr_2,arr(Z(1(#))),Z(0(#))))),elem-update(x_arr_9)(x_arr_2)),elem-update(x_5)(Z(3(#)))),elem-update(x_6)(Z(0(0(1(#)))))),and(and(not(equals(x_arr_9,null)),lt(x_5,length(x_arr_9))),geq(x_5,Z(0(#))))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))),x_arr_2,arr(Z(1(#))),Z(0(#))))),elem-update(x_arr_9)(x_arr_2)),elem-update(x_5)(Z(3(#)))),elem-update(x_6)(Z(0(0(1(#)))))),and(and(not(equals(x_arr_9,null)),lt(x_5,length(x_arr_9))),geq(x_5,Z(0(#)))))" mergedBranchCondition="false" isBranchConditionComputed="true">
                              <variable name="n" isArrayIndex="false">
                                 <value name="n {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="exc" isArrayIndex="false">
                                 <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="ArrayCreationTest::array" isArrayIndex="false">
                                 <value name="ArrayCreationTest::array {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="x_arr_2[*]" isArrayIndex="false">
                                       <value name="x_arr_2[*] {or(equals(*,Z(0(#))),and(not(equals(*,Z(0(#)))),equals(*,Z(3(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(*,Z(0(#))),and(not(equals(*,Z(0(#)))),equals(*,Z(3(#)))))">
                                       </value>
                                       <value name="x_arr_2[*] {and(not(equals(*,Z(0(#)))),not(equals(*,Z(3(#)))))}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(*,Z(0(#)))),not(equals(*,Z(3(#)))))">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                              <variable name="x_arr_9" isArrayIndex="false">
                                 <value name="x_arr_9 {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="x_arr_2[*]" isArrayIndex="false">
                                       <value name="x_arr_2[*] {or(equals(*,Z(0(#))),and(not(equals(*,Z(0(#)))),equals(*,Z(3(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(*,Z(0(#))),and(not(equals(*,Z(0(#)))),equals(*,Z(3(#)))))">
                                       </value>
                                       <value name="x_arr_2[*] {and(not(equals(*,Z(0(#)))),not(equals(*,Z(3(#)))))}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(*,Z(0(#)))),not(equals(*,Z(3(#)))))">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                              <variable name="x_5" isArrayIndex="false">
                                 <value name="x_5 {true}" typeString="int" valueString="Z(3(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="x_6" isArrayIndex="false">
                                 <value name="x_6 {true}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <statement name="return array;" pathCondition="and(and(and(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(and(not(equals(x_arr_4,null)),lt(Z(0(#)),length(x_arr_4))),geq(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))))),elem-update(x_arr_6)(x_arr_2)),elem-update(x_3)(Z(1(#)))),elem-update(x_arr_7)(x_arr_2)),or(or(equals(x_arr_7,null),leq(length(x_arr_7),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))),x_arr_2,arr(Z(1(#))),Z(0(#))))),elem-update(x_arr_9)(x_arr_2)),elem-update(x_5)(Z(3(#)))),elem-update(x_6)(Z(0(0(1(#)))))),and(and(not(equals(x_arr_9,null)),lt(x_5,length(x_arr_9))),geq(x_5,Z(0(#))))))" pathConditionChanged="false">
                                 <variable name="n" isArrayIndex="false">
                                    <value name="n {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                                 <variable name="exc" isArrayIndex="false">
                                    <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                                 <variable name="ArrayCreationTest::array" isArrayIndex="false">
                                    <value name="ArrayCreationTest::array {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                       <variable name="length" isArrayIndex="false">
                                          <value name="length {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                       <variable name="x_arr_2[*]" isArrayIndex="false">
                                          <value name="x_arr_2[*] {or(equals(*,Z(0(#))),and(not(equals(*,Z(0(#)))),equals(*,Z(3(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(*,Z(0(#))),and(not(equals(*,Z(0(#)))),equals(*,Z(3(#)))))">
                                          </value>
                                          <value name="x_arr_2[*] {and(not(equals(*,Z(0(#)))),not(equals(*,Z(3(#)))))}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(*,Z(0(#)))),not(equals(*,Z(3(#)))))">
                                          </value>
                                       </variable>
                                    </value>
                                 </variable>
                                 <methodReturn name="&lt;return of main&gt;" signature="&lt;return of ArrayCreationTest.main(n)&gt;" pathCondition="and(and(and(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(and(not(equals(x_arr_4,null)),lt(Z(0(#)),length(x_arr_4))),geq(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))))),elem-update(x_arr_6)(x_arr_2)),elem-update(x_3)(Z(1(#)))),elem-update(x_arr_7)(x_arr_2)),or(or(equals(x_arr_7,null),leq(length(x_arr_7),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))),x_arr_2,arr(Z(1(#))),Z(0(#))))),elem-update(x_arr_9)(x_arr_2)),elem-update(x_5)(Z(3(#)))),elem-update(x_6)(Z(0(0(1(#)))))),and(and(not(equals(x_arr_9,null)),lt(x_5,length(x_arr_9))),geq(x_5,Z(0(#))))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="and(and(and(update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))),x_arr_2,arr(Z(1(#))),Z(0(#))))),elem-update(x_arr_9)(x_arr_2)),elem-update(x_5)(Z(3(#)))),elem-update(x_6)(Z(0(0(1(#)))))),and(and(not(equals(x_arr_9,null)),lt(x_5,length(x_arr_9))),geq(x_5,Z(0(#))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))))),elem-update(x_arr_6)(x_arr_2)),elem-update(x_3)(Z(1(#)))),elem-update(x_arr_7)(x_arr_2)),or(or(equals(x_arr_7,null),leq(length(x_arr_7),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(and(not(equals(x_arr_4,null)),lt(Z(0(#)),length(x_arr_4))),geq(Z(0(#)),Z(0(#)))))),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)))">
                                    <variable name="n" isArrayIndex="false">
                                       <value name="n {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="exc" isArrayIndex="false">
                                       <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="ArrayCreationTest::array" isArrayIndex="false">
                                       <value name="ArrayCreationTest::array {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                          <variable name="length" isArrayIndex="false">
                                             <value name="length {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                             </value>
                                          </variable>
                                          <variable name="x_arr_2[*]" isArrayIndex="false">
                                             <value name="x_arr_2[*] {or(equals(*,Z(0(#))),and(not(equals(*,Z(0(#)))),equals(*,Z(3(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(*,Z(0(#))),and(not(equals(*,Z(0(#)))),equals(*,Z(3(#)))))">
                                             </value>
                                             <value name="x_arr_2[*] {and(not(equals(*,Z(0(#)))),not(equals(*,Z(3(#)))))}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(*,Z(0(#)))),not(equals(*,Z(3(#)))))">
                                             </value>
                                          </variable>
                                       </value>
                                    </variable>
                                    <termination name="&lt;end&gt;" pathCondition="and(and(and(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(and(not(equals(x_arr_4,null)),lt(Z(0(#)),length(x_arr_4))),geq(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))))),elem-update(x_arr_6)(x_arr_2)),elem-update(x_3)(Z(1(#)))),elem-update(x_arr_7)(x_arr_2)),or(or(equals(x_arr_7,null),leq(length(x_arr_7),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))),x_arr_2,arr(Z(1(#))),Z(0(#))))),elem-update(x_arr_9)(x_arr_2)),elem-update(x_5)(Z(3(#)))),elem-update(x_6)(Z(0(0(1(#)))))),and(and(not(equals(x_arr_9,null)),lt(x_5,length(x_arr_9))),geq(x_5,Z(0(#))))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                                       <variable name="exc" isArrayIndex="false">
                                          <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                       <variable name="ArrayCreationTest::array" isArrayIndex="false">
                                          <value name="ArrayCreationTest::array {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                             <variable name="length" isArrayIndex="false">
                                                <value name="length {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                                </value>
                                             </variable>
                                             <variable name="x_arr_2[*]" isArrayIndex="false">
                                                <value name="x_arr_2[*] {or(equals(*,Z(0(#))),and(not(equals(*,Z(0(#)))),equals(*,Z(3(#)))))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="or(equals(*,Z(0(#))),and(not(equals(*,Z(0(#)))),equals(*,Z(3(#)))))">
                                                </value>
                                                <value name="x_arr_2[*] {and(not(equals(*,Z(0(#)))),not(equals(*,Z(3(#)))))}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="and(not(equals(*,Z(0(#)))),not(equals(*,Z(3(#)))))">
                                                </value>
                                             </variable>
                                          </value>
                                       </variable>
                                    </termination>
                                    <callStateVariable name="n" isArrayIndex="false">
                                       <value name="n {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </callStateVariable>
                                    <callStateVariable name="exc" isArrayIndex="false">
                                       <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </callStateVariable>
                                    <callStateVariable name="heapBefore_main" isArrayIndex="false">
                                       <value name="heapBefore_main {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </callStateVariable>
                                    <callStateVariable name="savedHeapBefore_main" isArrayIndex="false">
                                       <value name="savedHeapBefore_main {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </callStateVariable>
                                 </methodReturn>
                              </statement>
                           </branchCondition>
                           <branchCondition name="update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))),x_arr_2,arr(Z(1(#))),Z(0(#))))),elem-update(x_arr_9)(x_arr_2)),elem-update(x_5)(Z(3(#)))),elem-update(x_6)(Z(0(0(1(#)))))),and(not(equals(x_arr_9,null)),or(leq(length(x_arr_9),x_5),lt(x_5,Z(0(#))))))" pathCondition="and(and(and(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(and(not(equals(x_arr_4,null)),lt(Z(0(#)),length(x_arr_4))),geq(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))))),elem-update(x_arr_6)(x_arr_2)),elem-update(x_3)(Z(1(#)))),elem-update(x_arr_7)(x_arr_2)),or(or(equals(x_arr_7,null),leq(length(x_arr_7),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))),x_arr_2,arr(Z(1(#))),Z(0(#))))),elem-update(x_arr_9)(x_arr_2)),elem-update(x_5)(Z(3(#)))),elem-update(x_6)(Z(0(0(1(#)))))),and(not(equals(x_arr_9,null)),or(leq(length(x_arr_9),x_5),lt(x_5,Z(0(#)))))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))),x_arr_2,arr(Z(1(#))),Z(0(#))))),elem-update(x_arr_9)(x_arr_2)),elem-update(x_5)(Z(3(#)))),elem-update(x_6)(Z(0(0(1(#)))))),and(not(equals(x_arr_9,null)),or(leq(length(x_arr_9),x_5),lt(x_5,Z(0(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true">
                              <variable name="n" isArrayIndex="false">
                                 <value name="n {true}" typeString="int" valueString="Z(3(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="exc" isArrayIndex="false">
                                 <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="ArrayCreationTest::array" isArrayIndex="false">
                                 <value name="ArrayCreationTest::array {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {true}" typeString="int" valueString="Z(3(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="[Z(0(#))]" arrayIndex="Z(0(#))" isArrayIndex="true">
                                       <value name="[Z(0(#))] {true}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="[Z(1(#))]" arrayIndex="Z(1(#))" isArrayIndex="true">
                                       <value name="[Z(1(#))] {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="[Z(2(#))]" arrayIndex="Z(2(#))" isArrayIndex="true">
                                       <value name="[Z(2(#))] {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                              <variable name="x_arr_9" isArrayIndex="false">
                                 <value name="x_arr_9 {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {true}" typeString="int" valueString="Z(3(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="[Z(0(#))]" arrayIndex="Z(0(#))" isArrayIndex="true">
                                       <value name="[Z(0(#))] {true}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="[Z(1(#))]" arrayIndex="Z(1(#))" isArrayIndex="true">
                                       <value name="[Z(1(#))] {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="[Z(2(#))]" arrayIndex="Z(2(#))" isArrayIndex="true">
                                       <value name="[Z(2(#))] {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                              <variable name="x_5" isArrayIndex="false">
                                 <value name="x_5 {true}" typeString="int" valueString="Z(3(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="x_6" isArrayIndex="false">
                                 <value name="x_6 {true}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <exceptionalMethodReturn name="&lt;throw java.lang.ArrayIndexOutOfBoundsException&gt;" signature="&lt;exceptional return of &lt;call ArrayCreationTest.main(n)&gt;&gt;" pathCondition="and(and(and(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(and(not(equals(x_arr_4,null)),lt(Z(0(#)),length(x_arr_4))),geq(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))))),elem-update(x_arr_6)(x_arr_2)),elem-update(x_3)(Z(1(#)))),elem-update(x_arr_7)(x_arr_2)),or(or(equals(x_arr_7,null),leq(length(x_arr_7),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))),x_arr_2,arr(Z(1(#))),Z(0(#))))),elem-update(x_arr_9)(x_arr_2)),elem-update(x_5)(Z(3(#)))),elem-update(x_6)(Z(0(0(1(#)))))),and(not(equals(x_arr_9,null)),or(leq(length(x_arr_9),x_5),lt(x_5,Z(0(#)))))))" pathConditionChanged="false" methodReturnCondition="and(and(and(update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))),x_arr_2,arr(Z(1(#))),Z(0(#))))),elem-update(x_arr_9)(x_arr_2)),elem-update(x_5)(Z(3(#)))),elem-update(x_6)(Z(0(0(1(#)))))),and(not(equals(x_arr_9,null)),or(leq(length(x_arr_9),x_5),lt(x_5,Z(0(#)))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))))),elem-update(x_arr_6)(x_arr_2)),elem-update(x_3)(Z(1(#)))),elem-update(x_arr_7)(x_arr_2)),or(or(equals(x_arr_7,null),leq(length(x_arr_7),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(and(not(equals(x_arr_4,null)),lt(Z(0(#)),length(x_arr_4))),geq(Z(0(#)),Z(0(#)))))),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)))">
                                 <variable name="n" isArrayIndex="false">
                                    <value name="n {true}" typeString="int" valueString="Z(3(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                                 <variable name="exc" isArrayIndex="false">
                                    <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                                 <variable name="ArrayCreationTest::array" isArrayIndex="false">
                                    <value name="ArrayCreationTest::array {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                       <variable name="length" isArrayIndex="false">
                                          <value name="length {true}" typeString="int" valueString="Z(3(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                       <variable name="[Z(0(#))]" arrayIndex="Z(0(#))" isArrayIndex="true">
                                          <value name="[Z(0(#))] {true}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                       <variable name="[Z(1(#))]" arrayIndex="Z(1(#))" isArrayIndex="true">
                                          <value name="[Z(1(#))] {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                       <variable name="[Z(2(#))]" arrayIndex="Z(2(#))" isArrayIndex="true">
                                          <value name="[Z(2(#))] {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                          </value>
                                       </variable>
                                    </value>
                                 </variable>
                                 <variable name="a_8" isArrayIndex="false">
                                    <value name="a_8 {true}" typeString="java.lang.ArrayIndexOutOfBoundsException" valueString="a_11" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                                 <termination name="&lt;uncaught java.lang.ArrayIndexOutOfBoundsException&gt;" pathCondition="and(and(and(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(and(not(equals(x_arr_4,null)),lt(Z(0(#)),length(x_arr_4))),geq(Z(0(#)),Z(0(#)))))),not(update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))))),elem-update(x_arr_6)(x_arr_2)),elem-update(x_3)(Z(1(#)))),elem-update(x_arr_7)(x_arr_2)),or(or(equals(x_arr_7,null),leq(length(x_arr_7),Z(2(#)))),lt(Z(2(#)),Z(0(#))))))),update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))),x_arr_2,arr(Z(1(#))),Z(0(#))))),elem-update(x_arr_9)(x_arr_2)),elem-update(x_5)(Z(3(#)))),elem-update(x_6)(Z(0(0(1(#)))))),and(not(equals(x_arr_9,null)),or(leq(length(x_arr_9),x_5),lt(x_5,Z(0(#)))))))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                                    <variable name="ArrayCreationTest::array" isArrayIndex="false">
                                       <value name="ArrayCreationTest::array {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                          <variable name="length" isArrayIndex="false">
                                             <value name="length {true}" typeString="int" valueString="Z(3(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                             </value>
                                          </variable>
                                          <variable name="[Z(0(#))]" arrayIndex="Z(0(#))" isArrayIndex="true">
                                             <value name="[Z(0(#))] {true}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                             </value>
                                          </variable>
                                          <variable name="[Z(1(#))]" arrayIndex="Z(1(#))" isArrayIndex="true">
                                             <value name="[Z(1(#))] {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                             </value>
                                          </variable>
                                          <variable name="[Z(2(#))]" arrayIndex="Z(2(#))" isArrayIndex="true">
                                             <value name="[Z(2(#))] {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                             </value>
                                          </variable>
                                       </value>
                                    </variable>
                                    <variable name="exc" isArrayIndex="false">
                                       <value name="exc {true}" typeString="java.lang.ArrayIndexOutOfBoundsException" valueString="a_11" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                 </termination>
                                 <callStateVariable name="n" isArrayIndex="false">
                                    <value name="n {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </callStateVariable>
                                 <callStateVariable name="exc" isArrayIndex="false">
                                    <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </callStateVariable>
                                 <callStateVariable name="heapBefore_main" isArrayIndex="false">
                                    <value name="heapBefore_main {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </callStateVariable>
                                 <callStateVariable name="savedHeapBefore_main" isArrayIndex="false">
                                    <value name="savedHeapBefore_main {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </callStateVariable>
                              </exceptionalMethodReturn>
                           </branchCondition>
                        </statement>
                     </branchCondition>
                     <branchCondition name="update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))))),elem-update(x_arr_6)(x_arr_2)),elem-update(x_3)(Z(1(#)))),elem-update(x_arr_7)(x_arr_2)),and(not(equals(x_arr_7,null)),or(leq(length(x_arr_7),Z(2(#))),lt(Z(2(#)),Z(0(#))))))" pathCondition="and(and(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(and(not(equals(x_arr_4,null)),lt(Z(0(#)),length(x_arr_4))),geq(Z(0(#)),Z(0(#)))))),update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))))),elem-update(x_arr_6)(x_arr_2)),elem-update(x_3)(Z(1(#)))),elem-update(x_arr_7)(x_arr_2)),and(not(equals(x_arr_7,null)),or(leq(length(x_arr_7),Z(2(#))),lt(Z(2(#)),Z(0(#)))))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))))),elem-update(x_arr_6)(x_arr_2)),elem-update(x_3)(Z(1(#)))),elem-update(x_arr_7)(x_arr_2)),and(not(equals(x_arr_7,null)),or(leq(length(x_arr_7),Z(2(#))),lt(Z(2(#)),Z(0(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true">
                        <variable name="n" isArrayIndex="false">
                           <value name="n {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="ArrayCreationTest::array" isArrayIndex="false">
                           <value name="ArrayCreationTest::array {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="x_arr_2[*]" isArrayIndex="false">
                                 <value name="x_arr_2[*] {equals(*,Z(0(#)))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(*,Z(0(#)))">
                                 </value>
                                 <value name="x_arr_2[*] {not(equals(*,Z(0(#))))}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(*,Z(0(#))))">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="x_arr_6" isArrayIndex="false">
                           <value name="x_arr_6 {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="x_arr_2[*]" isArrayIndex="false">
                                 <value name="x_arr_2[*] {equals(*,Z(0(#)))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(*,Z(0(#)))">
                                 </value>
                                 <value name="x_arr_2[*] {not(equals(*,Z(0(#))))}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(*,Z(0(#))))">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="x_3" isArrayIndex="false">
                           <value name="x_3 {true}" typeString="int" valueString="Z(1(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                        <variable name="x_arr_7" isArrayIndex="false">
                           <value name="x_arr_7 {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                              <variable name="x_arr_2[*]" isArrayIndex="false">
                                 <value name="x_arr_2[*] {equals(*,Z(0(#)))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(*,Z(0(#)))">
                                 </value>
                                 <value name="x_arr_2[*] {not(equals(*,Z(0(#))))}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(*,Z(0(#))))">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <exceptionalMethodReturn name="&lt;throw java.lang.ArrayIndexOutOfBoundsException&gt;" signature="&lt;exceptional return of &lt;call ArrayCreationTest.main(n)&gt;&gt;" pathCondition="and(and(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(and(not(equals(x_arr_4,null)),lt(Z(0(#)),length(x_arr_4))),geq(Z(0(#)),Z(0(#)))))),update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))))),elem-update(x_arr_6)(x_arr_2)),elem-update(x_3)(Z(1(#)))),elem-update(x_arr_7)(x_arr_2)),and(not(equals(x_arr_7,null)),or(leq(length(x_arr_7),Z(2(#))),lt(Z(2(#)),Z(0(#)))))))" pathConditionChanged="false" methodReturnCondition="and(and(update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))))),elem-update(x_arr_6)(x_arr_2)),elem-update(x_3)(Z(1(#)))),elem-update(x_arr_7)(x_arr_2)),and(not(equals(x_arr_7,null)),or(leq(length(x_arr_7),Z(2(#))),lt(Z(2(#)),Z(0(#)))))),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(and(not(equals(x_arr_4,null)),lt(Z(0(#)),length(x_arr_4))),geq(Z(0(#)),Z(0(#)))))),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)))">
                           <variable name="n" isArrayIndex="false">
                              <value name="n {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="exc" isArrayIndex="false">
                              <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="x_arr_6" isArrayIndex="false">
                              <value name="x_arr_6 {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                                 <variable name="x_arr_2[*]" isArrayIndex="false">
                                    <value name="x_arr_2[*] {equals(*,Z(0(#)))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(*,Z(0(#)))">
                                    </value>
                                    <value name="x_arr_2[*] {not(equals(*,Z(0(#))))}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(*,Z(0(#))))">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="x_3" isArrayIndex="false">
                              <value name="x_3 {true}" typeString="int" valueString="Z(1(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <variable name="ArrayCreationTest::array" isArrayIndex="false">
                              <value name="ArrayCreationTest::array {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                 <variable name="length" isArrayIndex="false">
                                    <value name="length {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                    </value>
                                 </variable>
                                 <variable name="x_arr_2[*]" isArrayIndex="false">
                                    <value name="x_arr_2[*] {equals(*,Z(0(#)))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(*,Z(0(#)))">
                                    </value>
                                    <value name="x_arr_2[*] {not(equals(*,Z(0(#))))}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(*,Z(0(#))))">
                                    </value>
                                 </variable>
                              </value>
                           </variable>
                           <variable name="a_4" isArrayIndex="false">
                              <value name="a_4 {true}" typeString="java.lang.ArrayIndexOutOfBoundsException" valueString="a_7" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                           <termination name="&lt;uncaught java.lang.ArrayIndexOutOfBoundsException&gt;" pathCondition="and(and(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(and(not(equals(x_arr_4,null)),lt(Z(0(#)),length(x_arr_4))),geq(Z(0(#)),Z(0(#)))))),update-application(parallel-upd(parallel-upd(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2),x_arr_2,arr(Z(0(#))),Z(0(0(1(#))))))),elem-update(x_arr_6)(x_arr_2)),elem-update(x_3)(Z(1(#)))),elem-update(x_arr_7)(x_arr_2)),and(not(equals(x_arr_7,null)),or(leq(length(x_arr_7),Z(2(#))),lt(Z(2(#)),Z(0(#)))))))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                              <variable name="ArrayCreationTest::array" isArrayIndex="false">
                                 <value name="ArrayCreationTest::array {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                                    <variable name="length" isArrayIndex="false">
                                       <value name="length {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                       </value>
                                    </variable>
                                    <variable name="x_arr_2[*]" isArrayIndex="false">
                                       <value name="x_arr_2[*] {equals(*,Z(0(#)))}" typeString="int" valueString="Z(0(0(1(#))))" isValueAnObject="false" isValueUnknown="false" conditionString="equals(*,Z(0(#)))">
                                       </value>
                                       <value name="x_arr_2[*] {not(equals(*,Z(0(#))))}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="not(equals(*,Z(0(#))))">
                                       </value>
                                    </variable>
                                 </value>
                              </variable>
                              <variable name="exc" isArrayIndex="false">
                                 <value name="exc {true}" typeString="java.lang.ArrayIndexOutOfBoundsException" valueString="a_7" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </termination>
                           <callStateVariable name="n" isArrayIndex="false">
                              <value name="n {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </callStateVariable>
                           <callStateVariable name="exc" isArrayIndex="false">
                              <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </callStateVariable>
                           <callStateVariable name="heapBefore_main" isArrayIndex="false">
                              <value name="heapBefore_main {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </callStateVariable>
                           <callStateVariable name="savedHeapBefore_main" isArrayIndex="false">
                              <value name="savedHeapBefore_main {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </callStateVariable>
                        </exceptionalMethodReturn>
                     </branchCondition>
                  </statement>
               </branchCondition>
               <branchCondition name="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(not(equals(x_arr_4,null)),or(leq(length(x_arr_4),Z(0(#))),lt(Z(0(#)),Z(0(#))))))" pathCondition="and(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(not(equals(x_arr_4,null)),or(leq(length(x_arr_4),Z(0(#))),lt(Z(0(#)),Z(0(#)))))))" pathConditionChanged="true" branchCondition="update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(not(equals(x_arr_4,null)),or(leq(length(x_arr_4),Z(0(#))),lt(Z(0(#)),Z(0(#))))))" mergedBranchCondition="false" isBranchConditionComputed="true">
                  <variable name="n" isArrayIndex="false">
                     <value name="n {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="exc" isArrayIndex="false">
                     <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                     </value>
                  </variable>
                  <variable name="ArrayCreationTest::array" isArrayIndex="false">
                     <value name="ArrayCreationTest::array {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="length" isArrayIndex="false">
                           <value name="length {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <variable name="x_arr_4" isArrayIndex="false">
                     <value name="x_arr_4 {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                        <variable name="length" isArrayIndex="false">
                           <value name="length {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                     </value>
                  </variable>
                  <exceptionalMethodReturn name="&lt;throw java.lang.ArrayIndexOutOfBoundsException&gt;" signature="&lt;exceptional return of &lt;call ArrayCreationTest.main(n)&gt;&gt;" pathCondition="and(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(not(equals(x_arr_4,null)),or(leq(length(x_arr_4),Z(0(#))),lt(Z(0(#)),Z(0(#)))))))" pathConditionChanged="false" methodReturnCondition="and(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(not(equals(x_arr_4,null)),or(leq(length(x_arr_4),Z(0(#))),lt(Z(0(#)),Z(0(#)))))),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)))">
                     <variable name="n" isArrayIndex="false">
                        <value name="n {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <variable name="ArrayCreationTest::array" isArrayIndex="false">
                        <value name="ArrayCreationTest::array {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                           <variable name="length" isArrayIndex="false">
                              <value name="length {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                              </value>
                           </variable>
                        </value>
                     </variable>
                     <variable name="a" isArrayIndex="false">
                        <value name="a {true}" typeString="java.lang.ArrayIndexOutOfBoundsException" valueString="a_3" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </variable>
                     <termination name="&lt;uncaught java.lang.ArrayIndexOutOfBoundsException&gt;" pathCondition="and(update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(dim0)(n)),elem-update(x)(if-then-else(lt(n,Z(0(#))),TRUE,FALSE))),equals(x,FALSE)),update-application(parallel-upd(parallel-upd(elem-update(exc)(null),elem-update(heap)(store(store(memset(store(store(store(create(heap,x_arr_2),x_arr_2,java.lang.Object::&lt;transient&gt;,Z(0(#))),x_arr_2,java.lang.Object::&lt;transactionConditionallyUpdated&gt;,FALSE),x_arr_2,java.lang.Object::&lt;initialized&gt;,FALSE),arrayRange(x_arr_2,Z(0(#)),add(Z(neglit(1(#))),n)),Z(0(#))),x_arr_2,java.lang.Object::&lt;initialized&gt;,TRUE),null,ArrayCreationTest::$array,x_arr_2))),elem-update(x_arr_4)(x_arr_2)),and(not(equals(x_arr_4,null)),or(leq(length(x_arr_4),Z(0(#))),lt(Z(0(#)),Z(0(#)))))))" pathConditionChanged="false" terminationKind="EXCEPTIONAL" branchVerified="true">
                        <variable name="ArrayCreationTest::array" isArrayIndex="false">
                           <value name="ArrayCreationTest::array {true}" typeString="int[]" valueString="x_arr_2" isValueAnObject="true" isValueUnknown="false" conditionString="true">
                              <variable name="length" isArrayIndex="false">
                                 <value name="length {true}" typeString="int" valueString="Z(0(#))" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                                 </value>
                              </variable>
                           </value>
                        </variable>
                        <variable name="exc" isArrayIndex="false">
                           <value name="exc {true}" typeString="java.lang.ArrayIndexOutOfBoundsException" valueString="a_3" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                           </value>
                        </variable>
                     </termination>
                     <callStateVariable name="n" isArrayIndex="false">
                        <value name="n {true}" typeString="int" valueString="n" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </callStateVariable>
                     <callStateVariable name="exc" isArrayIndex="false">
                        <value name="exc {true}" typeString="Null" valueString="null" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </callStateVariable>
                     <callStateVariable name="heapBefore_main" isArrayIndex="false">
                        <value name="heapBefore_main {true}" typeString="Heap" valueString="heap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </callStateVariable>
                     <callStateVariable name="savedHeapBefore_main" isArrayIndex="false">
                        <value name="savedHeapBefore_main {true}" typeString="Heap" valueString="savedHeap" isValueAnObject="false" isValueUnknown="false" conditionString="true">
                        </value>
                     </callStateVariable>
                  </exceptionalMethodReturn>
               </branchCondition>
            </statement>
         </branchCondition>
      </statement>
      <methodReturnEntry path="/0/0/0/0"/>
      <methodReturnEntry path="/0/0/1/0/0/0/0/0/0/0/0"/>
      <methodReturnEntry path="/0/0/1/0/0/0/0/0/1/0"/>
      <methodReturnEntry path="/0/0/1/0/0/0/1/0"/>
      <methodReturnEntry path="/0/0/1/0/1/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0"/>
   <terminationEntry path="/0/0/1/0/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/1/0/0/0/0/0/1/0/0"/>
   <terminationEntry path="/0/0/1/0/0/0/1/0/0"/>
   <terminationEntry path="/0/0/1/0/1/0/0"/>
</start>
