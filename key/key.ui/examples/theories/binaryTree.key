// ----------------------------------------------------------------------
// A simple algebraic data type of binary trees w/o payload
//
// @author bruns
// ----------------------------------------------------------------------

\sorts { Free; }

\functions {
    \unique Free atom;
    \unique Free branch(Free,Free);

    int height(Free);
    int leaves(Free);
}

\rules {

  // definitory rules for height and leaves

  heightBranch {
    \schemaVar \term Free x,y;
    \schemaVar \term int hx,hy;
    \find(height(branch(x,y)))
    \replacewith(add(1, \if (hx > hy) \then (hx) \else (hy)))
    \add(hx = height(x) & hy = height(y) ==>)
    \heuristics(simplify)
  };

  heightAtom {
    \find(height(atom))
    \replacewith(0)
    \heuristics(concrete)
  };

  leavesAtom {
    \find(leaves(atom))
    \replacewith(1)
    \heuristics(concrete)
  };

  leavesBranch {
    \schemaVar \term Free x,y;
    \find(leaves(branch(x,y)))
    \replacewith(leaves(x)+leaves(y))
    \heuristics(simplify)
  };

  // Quantifier rules are justified by the fact that this is an algebraic DT.
  // We assume that the data type is completely defined by atom and branch.

  forallTreeLeftUnfold {
    \schemaVar \variables Free g,g1,g2;
    \schemaVar \formula phi;
    \find(\forall g; phi ==>)
    \varcond(\notFreeIn(g1,phi),\notFreeIn(g2,phi))
    \replacewith({\subst g; atom}phi &
         \forall g1,g2; {\subst g; branch(g1,g2)}phi ==>)
    \heuristics(simplify_enlarging)
  };

  existsTreeRightUnfold {
    \schemaVar \variables Free g,g1,g2;
    \schemaVar \formula phi;
    \find(==> \exists g; phi)
    \varcond(\notFreeIn(g1,phi),\notFreeIn(g2,phi))
    \replacewith(==> {\subst g; atom}phi |
             \exists g1,g2; {\subst g; branch(g1,g2)}phi)
    \heuristics(simplify_enlarging)
  };

  forallTreeRightInduction {
    \schemaVar \variables Free g;
    \schemaVar \skolemTerm Free gl,gr;
    \schemaVar \formula phi;
    \find(==> \forall g; phi)
    \varcond(
               \newDependingOn(gl, phi),
               \newDependingOn(gr, phi)
             )
    "base case": \replacewith(==> {\subst g; atom} phi);
    "step case": 
      \replacewith(==> {\subst g; branch(gl,gr)} phi)
      \add({\subst g; gl}phi & {\subst g; gr}phi ==>)
    \heuristics(auto_induction)
  };

  existsTreeLeftInduction {
    \schemaVar \variables Free g;
    \schemaVar \skolemTerm Free gl,gr;
    \schemaVar \formula phi;
    \find(\exists g; phi ==>)
    \varcond(
               \newDependingOn(gl, phi),
               \newDependingOn(gr, phi)
             )
    "base case": \replacewith(==> {\subst g; atom} !phi);
    "step case": 
      \replacewith(==> ({\subst g; gl}!phi & {\subst g; gr}!phi)
                  -> {\subst g; branch(gl,gr)} !phi)
    \heuristics(auto_induction)
  };
   

  // To use trees in variants. Again justified by induction over ADT.
  precAtom {
    \schemaVar \term Free x;
    \find( prec(x,atom) )
    \replacewith(false)
    \heuristics(concrete)
  }

  precBranch {
    \schemaVar \term Free t,x,y;
    \find( prec(t,branch(x,y) )
    \replacewith( t=x | prec(t,x) | t=y | prec(t,y) )
    \heuristics(simplify_enlarging)
  }

  precAtomBranch {
    \schemaVar \term Free x,y;
    \find( prec(atom,branch(x,y)) )
    \replacewith(true)
    \heuristics(concrete)
  }

}
