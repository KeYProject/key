\programVariables {
  int i;
  int j;
  int k;
  int[] a;
  int[] b;
  int sum;
  int x;
  boolean cond;
  int M;
  int N;
}

\problem {
wellFormed(heap) & a!=null & b!=null & a!=b &
noW(infiniteUnion{int k;}(\if(k>=0 & k<a.length)\then(singleton(a,arr(k)))\else(empty))) &
noR(infiniteUnion{int k;}(\if(k>=0 & k<a.length)\then(singleton(a,arr(k)))\else(empty))) &
a.length > 10 &
noW(infiniteUnion{int k;}(\if (k>=0 & k<b.length)\then(singleton(b,arr(k)))\else(empty))) &
noR(infiniteUnion{int k;}(\if (k>=0 & k<b.length)\then(singleton(b,arr(k)))\else(empty))) &
b.length > 10
->{i:=0 || j:=0}
\<{
while (i<a.length-1) {
    while (j<b.length-1) {
        a[i] = b[j];
        j++;}
    i++;}
}\>true
}