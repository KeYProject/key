\programVariables {
  int i;
  int j;
  int k;
  int[][] a;
  int[] b;
  int sum;
  int x;
  boolean cond;
  int M;
  int N;
}

\problem {
wellFormed(heap) & a!=null & b!=null & a!=b &
noW(infiniteUnion{int k;}(\if(k>=0 & k<=a.length-1)\then(arrayRange(a[k],0,a.length))\else (empty))) &
noR(infiniteUnion{int k;}(\if(k>=0 & k<=a.length-1)\then(arrayRange(a[k],0,a.length))\else(empty))) &
a.length > 10 &
noW(infiniteUnion{int k;}(\if (k>=0 & k<=b.length-1)\then(arrayRange(b[k],0,b.length))\else(empty))) &
noR(infiniteUnion{int k;}(\if (k>=0 & k<=b.length-1)\then(arrayRange(b[k],0,b.length))\else(empty))) &
b.length > 10 &
a.length = b.length
->{i:=0 || j:=0}
\<{
while (i<a.length-1) {
    while (j<b.length-1) {
        a[i][i] = 0;
        j++;}
    i++;}
}\>true
}