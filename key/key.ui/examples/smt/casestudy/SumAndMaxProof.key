\settings {
"#Proof-Settings-Config-File
#Sun Jul 01 18:10:14 CEST 2012
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , assertions-assertions\\:on , programRules-programRules\\:Java , intRules-intRules\\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\\:disableStaticInitialisation , runtimeExceptions-runtimeExceptions\\:ban
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[View]HideIntermediateProofsteps=false
[View]HideClosedSubtrees=false
[General]UseOCL=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[View]ShowWholeTaclet=false
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMinimum=-2147483645
[General]StupidMode=false
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[General]UseJML=true
[SMTSettings]integersMaximum=2147483645
[General]DnDDirectionSensitive=true
[View]FontIndex=2
[View]UseSystemLookAndFeel=false
[SMTSettings]useUninterpretedMultiplication=true
[Strategy]MaximumNumberOfAutomaticApplications=7
[View]MaxTooltipLines=40
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[SMTSettings]explicitTypeHierarchy=false
"
}

\javaSource "";

\chooseContract "SumAndMax[SumAndMax::sumAndMax([I)].JML normal_behavior operation contract.0";

\proof {
(keyLog "0" (keyUser "benjamin" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "136411")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "9") (term "1"))
(builtin "One Step Simplification" (formula "9"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "9") (term "1,0,1,0,1,0,0,0,1"))
(rule "translateJavaMulInt" (formula "9") (term "1,0,1,1,1,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "0,1,1,0,0,0,1"))
(rule "replace_known_right" (formula "4") (term "1") (ifseqformula "8"))
(builtin "One Step Simplification" (formula "4"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_gtToGeq" (formula "9") (term "0,0,1,0,0,0,1"))
(rule "times_zero_1" (formula "9") (term "1,0,0,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "9") (term "0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "1,0"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "9") (term "0,1,1,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "9") (term "1,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
(rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0,1,0,0,0,1"))
(rule "elementOfUnion" (formula "9") (term "0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "9") (term "1,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "9") (term "0,0,0,0,0,1,0,1"))
(rule "nnf_imp2or" (formula "5") (term "0"))
(rule "nnf_notAnd" (formula "5") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
(rule "mul_literals" (formula "5") (term "1,0,0,0"))
(rule "nnf_imp2or" (formula "9") (term "0,0,0,0,0,1"))
(rule "nnf_notAnd" (formula "9") (term "0,0,0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,0,0,0,1"))
(rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,0,0,0,1"))
(rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0,0,0,0,1"))
(rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0,0,1"))
(rule "Class_invariant_axiom_for_SumAndMax" (formula "6") (inst "sk=sk_0") (ifseqformula "3"))
(branch "Use Axiom"
   (rule "true_left" (formula "6"))
   (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_sumAndMax"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "assignment" (formula "8") (term "1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "assignment" (formula "8") (term "1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "k"))
   (rule "assignment" (formula "8") (term "1"))
   (builtin "One Step Simplification" (formula "8"))
   (builtin "Loop Invariant" (formula "8") (newnames "heapBeforeLoop,kBeforeLoop,k_0,anon_heap_loop,o,f,variant,b"))
   (branch "Invariant Initially Valid"
      (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
      (rule "leq_literals" (formula "8") (term "0,0,1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "greater_literals" (formula "8") (term "0,0,1,1,1,0,1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "eqSymm" (formula "8") (term "0,1,1,1,0,1"))
      (rule "translateJavaMulInt" (formula "8") (term "1,1,1,1,1,0,1"))
      (rule "times_zero_2" (formula "8") (term "1,1,1,1,1,0,1"))
      (rule "translateJavaSubInt" (formula "8") (term "1,0"))
      (rule "polySimp_elimSub" (formula "8") (term "1,0"))
      (rule "mul_literals" (formula "8") (term "1,1,0"))
      (rule "add_zero_right" (formula "8") (term "1,0"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,0,1,0,1"))
      (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0,0,1,0,1"))
      (rule "add_zero_right" (formula "8") (term "0,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0"))
      (rule "bsum_lower_equals_upper" (formula "8") (term "0,0,1,1,1,0,1"))
      (rule "eqSymm" (formula "8") (term "0,1,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0,1,0,1"))
      (rule "mul_literals" (formula "8") (term "1,1,0,0,0,1,0,1"))
      (rule "selectOfStore" (formula "8") (term "0,1,1,1,1,0,1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "selectOfStore" (formula "8") (term "0,0,1,1,1,0,1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "selectOfStore" (formula "8") (term "0,1,1,1,1,0,1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "castDel" (formula "8") (term "0,1,1,1,1,0,1"))
      (rule "leq_literals" (formula "8") (term "1,1,1,1,0,1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "selectOfStore" (formula "8") (term "0,1,0,0,1,0,1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "selectOfStore" (formula "8") (term "0,0,1,1,0,1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "castDel" (formula "8") (term "0,0,1,1,0,1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "selectOfStore" (formula "8") (term "1,1,0,0,1,0,1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "castDel" (formula "8") (term "1,1,0,0,1,0,1"))
      (rule "selectOfStore" (formula "8") (term "0,1,1,0,1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "castDel" (formula "8") (term "0,1,1,0,1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "selectOfStore" (formula "8") (term "0,0,1,1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "selectOfStore" (formula "8") (term "0,0,1,1"))
      (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "4")))
      (rule "selectOfStore" (formula "8") (term "0,1,0,1,0,1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "nnf_imp2or" (formula "8") (term "0,1,0,1"))
      (rule "nnf_notAnd" (formula "8") (term "0,0,1,0,1"))
      (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,1,0,1"))
      (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0,1,0,1"))
      (rule "add_literals" (formula "8") (term "0,0,1,0,0,1,0,1"))
      (rule "add_zero_left" (formula "8") (term "0,1,0,0,1,0,1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "arrayLengthNotNegative" (formula "5") (term "1,1,0,0"))
      (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "5"))
      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "5")))
      (rule "wellFormedStorePrimitive" (formula "9"))
      (rule "wellFormedStorePrimitive" (formula "9"))
      (rule "close" (formula "9") (ifseqformula "1"))
   )
   (branch "Body Preserves Invariant"
      (builtin "One Step Simplification" (formula "10"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "12"))
      (rule "variableDeclarationAssign" (formula "17") (term "1"))
      (rule "variableDeclaration" (formula "17") (term "1") (newnames "b_2"))
      (rule "variableDeclarationAssign" (formula "17") (term "1,0,1"))
      (rule "blockThrow" (formula "17") (term "1,0,0,1,0,1"))
      (rule "variableDeclaration" (formula "17") (term "1,0,1") (newnames "exc_1"))
      (rule "assignment" (formula "17") (term "1,0,1"))
      (rule "variableDeclaration" (formula "17") (term "1,1,0,1") (newnames "thrownExc"))
      (rule "translateJavaSubInt" (formula "14") (term "1"))
      (rule "eqSymm" (formula "11") (term "1,0,1"))
      (rule "translateJavaMulInt" (formula "13") (term "1"))
      (rule "eqSymm" (formula "12"))
      (rule "eqSymm" (formula "17") (term "1,0,0,1,0,1,1,0,1,1,0,1"))
      (rule "translateJavaSubInt" (formula "17") (term "0,1,1,1,0"))
      (rule "translateJavaSubInt" (formula "17") (term "1,0,1,1,1,0,1,1,0,1"))
      (rule "translateJavaSubInt" (formula "17") (term "0,1,1,1,1,0,1,1,0,1"))
      (rule "translateJavaMulInt" (formula "17") (term "1,1,1,1,1,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "eqSymm" (formula "17") (term "0,1,1,1,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "eqSymm" (formula "17") (term "1,0,1,0,1,1,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "14") (term "1"))
      (rule "polySimp_elimSub" (formula "17") (term "0,1,1,1,0"))
      (rule "polySimp_elimSub" (formula "17") (term "1,0,1,1,1,0,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "17") (term "0,1,1,1,1,0,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "13") (term "1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,1,1,1,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
      (rule "inEqSimp_gtToGeq" (formula "11") (term "0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "11") (term "0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1,0,1,1,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_gtToGeq" (formula "17") (term "0,0,1,1,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,1,1,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "0,0,0,0,1,1,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1,0,1,1,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,1,1,1,0,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,1,1,1,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "7"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
      (rule "polySimp_addComm0" (formula "14") (term "1"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1"))
      (rule "polySimp_addComm0" (formula "17") (term "0,1,1,1,0"))
      (rule "polySimp_addComm0" (formula "17") (term "1,0,1,1,1,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1,0,1,1,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,1,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_addComm0" (formula "17") (term "1,0,1,1,1,1,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "13"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "1,1,1,1,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_addAssoc" (formula "17") (term "0,1,1,1,1,0,1,1,0,1"))
      (rule "polySimp_addComm1" (formula "17") (term "0,0,1,1,1,1,0,1,1,0,1"))
      (rule "inEqSimp_homoInEq0" (formula "14"))
      (rule "mul_literals" (formula "14") (term "1,0"))
      (rule "add_zero_right" (formula "14") (term "0"))
      (rule "inEqSimp_homoInEq0" (formula "17") (term "0,1,1,1,0,1,1,0,1"))
      (rule "mul_literals" (formula "17") (term "1,0,0,1,1,1,0,1,1,0,1"))
      (rule "add_zero_right" (formula "17") (term "0,0,1,1,1,0,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0"))
      (rule "mul_literals" (formula "11") (term "1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,1,1,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "mul_literals" (formula "17") (term "1,0,0,1,1,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1,0,1,1,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1,0,1,1,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1,0,1,1,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1,0,1,1,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1,0,1,1,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1,0,1,1,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "mul_literals" (formula "17") (term "0,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,1,1,1,0,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,1,1,1,0,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,1,1,1,0,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,1,1,1,0,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,1,1,1,0,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "17") (term "0,1,1,1,1,1,0,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,1,1,1,1,0,1,1,0,1"))
      (rule "mul_literals" (formula "17") (term "0,0,1,1,1,1,1,0,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,0,1,1,1,1,1,0,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1"))
      (rule "polySimp_elimOne" (formula "14") (term "1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,1,1,1,0,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,1,1,0,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "16") (term "1,0,1,1,1,0,1,1,0,1"))
      (rule "selectOfAnon" (formula "9") (term "1,1,0"))
      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "14")))
      (rule "selectOfAnon" (formula "10") (term "0,1"))
      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")))
      (rule "elementOfUnion" (formula "16") (term "0,0,0,0,1,0,1,1,0,1,1,0,1"))
      (rule "elementOfSingleton" (formula "16") (term "0,0,0,0,0,1,0,1,1,0,1,1,0,1"))
      (rule "elementOfSingleton" (formula "16") (term "1,0,0,0,0,1,0,1,1,0,1,1,0,1"))
      (rule "selectOfAnon" (formula "11") (term "1,1,0,1"))
      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")))
      (rule "selectOfAnon" (formula "12") (term "2,0"))
      (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "15")))
      (rule "selectOfAnon" (formula "13") (term "1"))
      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")))
      (rule "elementOfUnion" (formula "9") (term "0,0,1,1,0"))
      (rule "elementOfSingleton" (formula "9") (term "0,0,0,1,1,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "elementOfSingleton" (formula "9") (term "0,0,1,1,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "selectOfStore" (formula "10") (term "0,0,1,0,0,1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "elementOfUnion" (formula "11") (term "0,0,1,1,0,1"))
      (rule "elementOfSingleton" (formula "11") (term "1,0,0,1,1,0,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "selectOfAnon" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")))
      (rule "selectOfAnon" (formula "13") (term "0,0"))
      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")))
      (rule "selectOfAnon" (formula "9") (term "0,1,0"))
      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "15")))
      (rule "selectOfStore" (formula "10") (term "2,0,1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "castDel" (formula "10") (term "2,0,1"))
      (rule "selectOfAnon" (formula "11") (term "0,1,0,1"))
      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "15")))
      (rule "elementOfUnion" (formula "12") (term "0,0,2,0"))
      (rule "elementOfSingleton" (formula "12") (term "1,0,0,2,0"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "elementOfSingleton" (formula "12") (term "0,0,2,0"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "ifthenelse_negated" (formula "12") (term "2,0"))
      (rule "selectOfStore" (formula "13") (term "2,1"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "elementOfUnion" (formula "9") (term "0,0,0,1,0"))
      (rule "elementOfSingleton" (formula "9") (term "1,0,0,0,1,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "elementOfSingleton" (formula "9") (term "0,0,0,1,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "ifthenelse_negated" (formula "9") (term "0,1,0"))
      (rule "selectOfStore" (formula "10") (term "0,0,1,0,0,1"))
      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "2")))
      (rule "selectOfStore" (formula "11") (term "2,0,1,0,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "selectOfStore" (formula "12") (term "2,1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "selectOfStore" (formula "13") (term "2,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "castDel" (formula "13") (term "2,0,0"))
      (rule "selectOfStore" (formula "9") (term "1,0,1,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "elementOfUnion" (formula "10") (term "0,0,1"))
      (rule "elementOfSingleton" (formula "10") (term "0,0,0,1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "elementOfSingleton" (formula "10") (term "0,0,1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "selectOfStore" (formula "11") (term "0,0,1,0,0,1,0,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "selectOfStore" (formula "12") (term "2,1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "castDel" (formula "12") (term "2,1"))
      (rule "selectOfStore" (formula "13") (term "2,1"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "castDel" (formula "13") (term "2,1"))
      (rule "selectOfStore" (formula "9") (term "0,0,0,1,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "selectOfStore" (formula "11") (term "0,0,1,0,0,1,0,1"))
      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "4")))
      (rule "elementOfUnion" (formula "12") (term "0,0,1"))
      (rule "elementOfSingleton" (formula "12") (term "1,0,0,1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "elementOfSingleton" (formula "12") (term "0,0,1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "elementOfUnion" (formula "13") (term "0,0,0,0"))
      (rule "elementOfSingleton" (formula "13") (term "0,0,0,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "elementOfSingleton" (formula "13") (term "0,0,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "9") (term "1,0,1,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "elementOfUnion" (formula "11") (term "0,0,1,0,1"))
      (rule "elementOfSingleton" (formula "11") (term "1,0,0,1,0,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "elementOfSingleton" (formula "11") (term "0,0,1,0,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "selectOfStore" (formula "12") (term "1,2,0"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "elementOfUnion" (formula "13") (term "0,0,1"))
      (rule "elementOfSingleton" (formula "13") (term "1,0,0,1"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "elementOfSingleton" (formula "13") (term "0,0,1"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "9") (term "0,0,0,1,0"))
      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "4")))
      (rule "selectOfStore" (formula "11") (term "0,1,0,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "selectOfStore" (formula "12") (term "1,2,0"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "selectOfStore" (formula "12") (term "0,0,2,0"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "selectOfStore" (formula "12") (term "0,0,2,0"))
      (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "4")))
      (rule "nnf_imp2or" (formula "9") (term "0"))
      (rule "nnf_imp2or" (formula "16") (term "0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "nnf_notAnd" (formula "9") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
      (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
      (rule "mul_literals" (formula "9") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "16") (term "0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0,0,1,1,0,0,1,1,0,1,1,0,1"))
      (rule "arrayLengthIsAShort" (formula "5") (term "1,1,0,0"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "arrayLengthNotNegative" (formula "5") (term "1,1,0,0"))
      (rule "compound_less_equal_than_comparison_2" (formula "17") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
      (rule "variableDeclarationAssign" (formula "17") (term "1"))
      (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_2"))
      (rule "assignment" (formula "17") (term "1"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "variableDeclarationAssign" (formula "17") (term "1"))
      (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_3"))
      (rule "assignment_read_length" (formula "17"))
      (branch "Normal Execution (_a != null)"
         (builtin "One Step Simplification" (formula "17"))
         (rule "less_equal_than_comparison_new" (formula "17") (term "1"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "assignment" (formula "17") (term "1,2"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "assignment" (formula "17") (term "1,1"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "inEqSimp_commuteLeq" (formula "17") (term "0"))
         (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "methodCallEmpty" (formula "17") (term "1"))
         (rule "emptyModality" (formula "17") (term "1"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "ifUnfold" (formula "17") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_4"))
         (rule "compound_less_equal_than_comparison_2" (formula "17") (term "1") (inst "#v1=x_6") (inst "#v0=x_5"))
         (rule "variableDeclarationAssign" (formula "17") (term "1"))
         (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_5"))
         (rule "assignment" (formula "17") (term "1"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "variableDeclarationAssign" (formula "17") (term "1"))
         (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_6"))
         (rule "assignment_read_length" (formula "17"))
         (branch "Normal Execution (_a != null)"
            (builtin "One Step Simplification" (formula "17"))
            (rule "less_equal_than_comparison_new" (formula "17") (term "1"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "assignment" (formula "17") (term "1,1"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "assignment" (formula "17") (term "1,2"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "inEqSimp_commuteLeq" (formula "17") (term "0"))
            (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "9"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "ifSplit" (formula "17"))
            (branch "if x_4 true"
               (builtin "One Step Simplification" (formula "18"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "ifUnfold" (formula "17") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_7"))
               (rule "compound_less_than_comparison_2" (formula "17") (term "1") (inst "#v1=x_9") (inst "#v0=x_8"))
               (rule "variableDeclarationAssign" (formula "17") (term "1"))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_8"))
               (rule "assignment" (formula "17") (term "1"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "variableDeclarationAssign" (formula "17") (term "1"))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_9"))
               (rule "assignment_array2" (formula "17"))
               (branch "Normal Execution (_a != null)"
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "selectOfAnon" (formula "17") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "replace_known_right" (formula "17") (term "0,0,1,0,0,1,0") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "selectOfStore" (formula "17") (term "0,0,1,0,0,1,0"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "selectOfStore" (formula "17") (term "2,0,1,0"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "selectOfStore" (formula "17") (term "0,0,1,0,0,1,0"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "replace_known_left" (formula "17") (term "0,1,0,0,1,0") (ifseqformula "4"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "selectOfAnon" (formula "17") (term "0,1,0,0"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "replace_known_right" (formula "17") (term "0,0,1,0,0,1,0,0") (ifseqformula "15"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "elementOfUnion" (formula "17") (term "0,0,0,1,0,0"))
                  (rule "elementOfSingleton" (formula "17") (term "0,0,0,0,1,0,0"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "elementOfSingleton" (formula "17") (term "0,0,0,1,0,0"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "selectOfStore" (formula "17") (term "2,0,1,0"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "elementOfUnion" (formula "17") (term "0,0,1,0"))
                  (rule "elementOfSingleton" (formula "17") (term "0,0,0,1,0"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "elementOfSingleton" (formula "17") (term "0,0,1,0"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "less_than_comparison_new" (formula "17") (term "1"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "assignment" (formula "17") (term "1,2"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "assignment" (formula "17") (term "1,1"))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,0"))
                  (rule "ifthenelse_split_for" (formula "17"))
                  (branch "int::select(anon_heap_loop, self, max) <= -1 + a[k_0] TRUE"
                     (rule "ifSplit" (formula "18"))
                     (branch "if x_7 true"
                        (builtin "One Step Simplification" (formula "1"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "1"))
                        (rule "assignment_array2" (formula "18"))
                        (branch "Normal Execution (_a != null)"
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "blockEmpty" (formula "18") (term "1"))
                           (rule "selectOfAnon" (formula "18") (term "3,0,1,0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "replace_known_right" (formula "18") (term "0,0,1,0,3,0,1,0") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "selectOfStore" (formula "18") (term "0,0,1,0,3,0,1,0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "selectOfStore" (formula "18") (term "2,3,0,1,0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "selectOfStore" (formula "18") (term "2,3,0,1,0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "elementOfUnion" (formula "18") (term "0,0,3,0,1,0"))
                           (rule "elementOfSingleton" (formula "18") (term "1,0,0,3,0,1,0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "elementOfSingleton" (formula "18") (term "0,0,3,0,1,0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "ifthenelse_negated" (formula "18") (term "3,0,1,0"))
                           (rule "selectOfStore" (formula "18") (term "0,0,3,0,1,0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "replace_known_left" (formula "18") (term "0,3,0,1,0") (ifseqformula "5"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "compound_assignment_op_plus" (formula "18") (term "1"))
                           (rule "compound_int_cast_expression" (formula "18") (term "1") (inst "#v=x"))
                           (rule "variableDeclarationAssign" (formula "18") (term "1"))
                           (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_14"))
                           (rule "remove_parentheses_right" (formula "18") (term "1"))
                           (rule "compound_addition_2" (formula "18") (term "1") (inst "#v1=x_16") (inst "#v0=x_15"))
                           (rule "variableDeclarationAssign" (formula "18") (term "1"))
                           (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_15"))
                           (rule "assignment" (formula "18") (term "1"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "variableDeclarationAssign" (formula "18") (term "1"))
                           (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_16"))
                           (rule "selectOfStore" (formula "18") (term "0,1,0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "selectOfAnon" (formula "18") (term "0,1,0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "replace_known_right" (formula "18") (term "0,0,1,0,0,1,0") (ifseqformula "16"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "elementOfUnion" (formula "18") (term "0,0,0,1,0"))
                           (rule "elementOfSingleton" (formula "18") (term "0,0,0,0,1,0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "remove_parentheses_right" (formula "18") (term "1"))
                           (rule "assignment_array2" (formula "18"))
                           (branch "Normal Execution (_a != null)"
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfAnon" (formula "18") (term "0,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "replace_known_right" (formula "18") (term "0,0,1,0,0,1,0") (ifseqformula "17"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "2,0,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "2,0,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "elementOfUnion" (formula "18") (term "0,0,0,1,0"))
                              (rule "elementOfSingleton" (formula "18") (term "1,0,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "elementOfSingleton" (formula "18") (term "0,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "ifthenelse_negated" (formula "18") (term "0,1,0"))
                              (rule "selectOfStore" (formula "18") (term "0,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "0,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "replace_known_left" (formula "18") (term "0,0,1,0") (ifseqformula "5"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "assignmentAdditionInt" (formula "18") (term "1"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "translateJavaAddInt" (formula "18") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "18") (term "0,1,0"))
                              (rule "widening_identity_cast_5" (formula "18") (term "1"))
                              (rule "assignment" (formula "18") (term "1"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "postincrement" (formula "18") (term "1"))
                              (rule "compound_int_cast_expression" (formula "18") (term "1") (inst "#v=x"))
                              (rule "variableDeclarationAssign" (formula "18") (term "1"))
                              (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_17"))
                              (rule "remove_parentheses_right" (formula "18") (term "1"))
                              (rule "assignmentAdditionInt" (formula "18") (term "1"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "translateJavaAddInt" (formula "18") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "18") (term "0,1,0"))
                              (rule "widening_identity_cast_5" (formula "18") (term "1"))
                              (rule "assignment" (formula "18") (term "1"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "tryEmpty" (formula "18") (term "1"))
                              (rule "methodCallEmpty" (formula "18") (term "1"))
                              (rule "emptyModality" (formula "18") (term "1"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "eqSymm" (formula "18") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "0,1,1,1,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "0,0,1,1,1,1,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,1,1,1,1,1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "18") (term "1,1,0,0,1,0,1,1,1,1,0,0"))
                              (rule "add_literals" (formula "18") (term "0,1,1,0,0,1,0,1,1,1,1,0,0"))
                              (rule "add_zero_left" (formula "18") (term "1,1,0,0,1,0,1,1,1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "18") (term "0,1,1,1"))
                              (rule "add_literals" (formula "18") (term "0,0,1,1,1"))
                              (rule "add_zero_left" (formula "18") (term "0,1,1,1"))
                              (rule "inEqSimp_homoInEq1" (formula "18") (term "0,0,1,1,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1,1,1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,1,1,1,1,0,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,0,0,0,1,1,1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "18") (term "1,1,1"))
                              (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,1,1"))
                              (rule "add_literals" (formula "18") (term "1,0,1,1,1"))
                              (rule "times_zero_1" (formula "18") (term "0,1,1,1"))
                              (rule "add_zero_left" (formula "18") (term "1,1,1"))
                              (rule "inEqSimp_homoInEq1" (formula "18") (term "1,1,1,1,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,1,1,1,1,1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,0,1,1,1,1,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "0,1,0,1,1,1,1,1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,1,1,1,1,0,0"))
                              (rule "add_literals" (formula "18") (term "0,0,0,0,1,1,1,1,0,0"))
                              (rule "add_zero_left" (formula "18") (term "0,0,0,1,1,1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "18") (term "0,1,1,1,1,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "18") (term "0,0,1,1,1,1,1,1,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "18") (term "1,1"))
                              (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,1"))
                              (rule "add_literals" (formula "18") (term "1,0,1,1"))
                              (rule "times_zero_1" (formula "18") (term "0,1,1"))
                              (rule "qeq_literals" (formula "18") (term "1,1"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "polySimp_sepPosMonomial" (formula "18") (term "0,0,1,1,1,0,0"))
                              (rule "mul_literals" (formula "18") (term "1,0,0,1,1,1,0,0"))
                              (rule "inEqSimp_invertInEq0" (formula "18") (term "0,0,1,1,1,1,0,0"))
                              (rule "times_zero_2" (formula "18") (term "1,0,0,1,1,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,1,1,1,0,0"))
                              (rule "replace_known_left" (formula "18") (term "0,0,1,1,1,1,0,0") (ifseqformula "9"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "1,1,1,1,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "0,1,1,1,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "0,1,1,1,1,1,1,0,0"))
                              (rule "bsum_induction_upper_concrete" (formula "18") (term "0,0,1,1,1,1,1,0,0"))
                              (rule "polySimp_homoEq" (formula "18") (term "0,1,1,1,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,1,1,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "18") (term "1,1,0,0,1,1,1,1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,1,1,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "0,1,0,0,1,1,1,1,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0,0,1,1,1,1,1,0,0"))
                              (rule "replace_known_left" (formula "18") (term "0,0,0,1,0,0,1,1,1,1,1,0,0") (ifseqformula "9"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,1,1,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "18") (term "0,0,0,1,1,1,1,1,0,0"))
                              (rule "polySimp_sepNegMonomial" (formula "18") (term "0,1,1,1,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,1,1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "0,0,1,1,1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
                              (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                              (rule "inEqSimp_contradEq7" (formula "18") (term "0,0,1,1,1,0,0") (ifseqformula "9"))
                              (rule "mul_literals" (formula "18") (term "1,0,0,0,0,1,1,1,0,0"))
                              (rule "add_zero_left" (formula "18") (term "0,0,0,0,1,1,1,0,0"))
                              (rule "leq_literals" (formula "18") (term "0,0,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "inEqSimp_subsumption1" (formula "18") (term "0,0,0") (ifseqformula "9"))
                              (rule "leq_literals" (formula "18") (term "0,0,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "0,0,1,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "1,1,0,0,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "1,1,1,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "castDel" (formula "18") (term "1,1,1,1,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "18") (term "1,1,1,1,1,0,0"))
                              (rule "selectOfStore" (formula "18") (term "0,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "castDel" (formula "18") (term "1,0,1,0,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "1,0,0,1,0,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "0,0,0,1,0,0,1,0"))
                              (rule "selectOfStore" (formula "18") (term "1,1,0,0,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "1,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "castDel" (formula "18") (term "1,1,1,0,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "1,0,1,1,0,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "0,0,1,1,0,0,1,0"))
                              (rule "selectOfStore" (formula "18") (term "0,0,1,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "0,0,1,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "castDel" (formula "18") (term "0,0,1,1,1,1,0,0"))
                              (rule "selectOfStore" (formula "18") (term "2,0,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "castDel" (formula "18") (term "1,2,0,1,0,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "1,0,2,0,1,0,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "0,0,2,0,1,0,0,1,0"))
                              (rule "selectOfStore" (formula "18") (term "0,0,1,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "2,0,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfAnon" (formula "18") (term "2,2,0,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "0,0,1,1,0,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "0,0,1,1,0,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "elementOfUnion" (formula "18") (term "0,0,0,2,2,0,1,0,0,1,0"))
                              (rule "elementOfSingleton" (formula "18") (term "0,0,0,0,2,2,0,1,0,0,1,0"))
                              (rule "elementOfSingleton" (formula "18") (term "1,0,0,0,2,2,0,1,0,0,1,0"))
                              (rule "selectOfStore" (formula "18") (term "0,0,1,1,0,2,2,0,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "0,0,1,1,0,2,2,0,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "2,1,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "castDel" (formula "18") (term "1,2,1,1,0,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "1,0,2,1,1,0,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "0,0,2,1,1,0,0,1,0"))
                              (rule "selectOfStore" (formula "18") (term "2,2,2,0,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "castDel" (formula "18") (term "1,2,2,2,0,1,0,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "1,0,2,2,2,0,1,0,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "0,0,2,2,2,0,1,0,0,1,0"))
                              (rule "selectOfStore" (formula "18") (term "1,1,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "castDel" (formula "18") (term "1,1,0,1,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "18") (term "1,0,1,1,1,0,0"))
                              (rule "selectOfStore" (formula "18") (term "0,1,0,0,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "1,1,0,0,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "castDel" (formula "18") (term "1,1,0,0,1,0,0"))
                              (rule "selectOfStore" (formula "18") (term "0,1,0,0,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "0,1,0,0,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfAnon" (formula "18") (term "0,1,0,0,1,0,0"))
                              (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                              (rule "elementOfUnion" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
                              (rule "elementOfSingleton" (formula "18") (term "1,0,0,0,1,0,0,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "elementOfSingleton" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "ifthenelse_negated" (formula "18") (term "0,1,0,0,1,0,0"))
                              (rule "selectOfStore" (formula "18") (term "2,2,2,2,0,1,0,0,1,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "castDel" (formula "18") (term "1,2,2,2,2,0,1,0,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "1,0,2,2,2,2,0,1,0,0,1,0"))
                              (rule "eqSymm" (formula "18") (term "0,0,2,2,2,2,0,1,0,0,1,0"))
                              (rule "selectOfStore" (formula "18") (term "2,0,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "1,0,1,0,0,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfAnon" (formula "18") (term "0,1,1,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                              (rule "selectOfAnon" (formula "18") (term "2,0,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                              (rule "selectOfStore" (formula "18") (term "1,1,0,0,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "castDel" (formula "18") (term "1,1,0,0,1,1,0,0"))
                              (rule "elementOfUnion" (formula "18") (term "0,0,0,1,1,0,1,1,1,0,0"))
                              (rule "elementOfSingleton" (formula "18") (term "0,0,0,0,1,1,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "elementOfSingleton" (formula "18") (term "0,0,0,1,1,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "ifthenelse_negated" (formula "18") (term "0,1,1,0,1,1,1,0,0"))
                              (rule "selectOfStore" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
                              (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "5")))
                              (rule "elementOfUnion" (formula "18") (term "0,0,2,0,0,1,1,1,0,0"))
                              (rule "elementOfSingleton" (formula "18") (term "0,0,0,2,0,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "elementOfSingleton" (formula "18") (term "0,0,2,0,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "ifthenelse_negated" (formula "18") (term "2,0,0,1,1,1,0,0"))
                              (rule "selectOfStore" (formula "18") (term "0,0,0,1,1,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "1,0,1,1,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "0,0,0,1,1,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "5")))
                              (rule "selectOfStore" (formula "18") (term "0,1,0,0,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "0,1,1,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "polySimp_addComm1" (formula "18") (term "1,0,1,1,1,0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,0,1,1,1,0,0"))
                              (rule "add_literals" (formula "18") (term "1,0,1,0,1,1,1,0,0"))
                              (rule "times_zero_1" (formula "18") (term "0,1,0,1,1,1,0,0"))
                              (rule "add_zero_left" (formula "18") (term "1,0,1,1,1,0,0"))
                              (rule "selectOfStore" (formula "18") (term "0,1,0,0,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "0,0,2,0,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "1,2,0,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfAnon" (formula "18") (term "0,1,0,0,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                              (rule "selectOfStore" (formula "18") (term "0,0,1,0,0,1,0,0,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "0,1,1,1,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "2,0,1,0,0,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "2,0,1,0,0,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "1,2,0,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "selectOfStore" (formula "18") (term "0,0,2,0,0,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "5")) (ifInst ""  (formula "14")))
                              (rule "selectOfStore" (formula "18") (term "0,1,1,1,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "castDel" (formula "18") (term "0,1,1,1,1,1,0,0"))
                              (rule "polySimp_addComm1" (formula "18") (term "1,1,1,1,0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,1,1,1,0,0"))
                              (rule "add_literals" (formula "18") (term "1,0,1,1,1,1,0,0"))
                              (rule "times_zero_1" (formula "18") (term "0,1,1,1,1,0,0"))
                              (rule "add_zero_left" (formula "18") (term "1,1,1,1,0,0"))
                              (rule "elementOfUnion" (formula "18") (term "0,0,0,1,0,0,1,1,0,0"))
                              (rule "elementOfSingleton" (formula "18") (term "1,0,0,0,1,0,0,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "elementOfSingleton" (formula "18") (term "0,0,0,1,0,0,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "ifthenelse_negated" (formula "18") (term "0,1,0,0,1,1,0,0"))
                              (rule "selectOfStore" (formula "18") (term "0,0,0,1,0,0,1,1,0,0"))
                              (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "5")))
                              (rule "cut_direct" (formula "13") (term "0"))
                              (branch "CUT: k_0 >= 1 TRUE"
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "exLeft" (formula "14") (inst "sk=i_8"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "eqSymm" (formula "16"))
                                 (rule "inEqSimp_homoInEq0" (formula "15"))
                                 (rule "polySimp_addComm1" (formula "15") (term "0"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "16"))
                                 (rule "inEqSimp_homoInEq0" (formula "1"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "16"))
                                 (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "16"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1"))
                                 (rule "mul_literals" (formula "15") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_contradEq7" (formula "12") (term "0") (ifseqformula "13"))
                                 (rule "times_zero_1" (formula "12") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,0"))
                                 (rule "leq_literals" (formula "12") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "12"))
                                 (rule "leq_literals" (formula "9") (term "0"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "cut_direct" (formula "19") (term "1"))
                                 (branch "CUT: a.length >= 1 + k_0 TRUE"
                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "1")))
                                    (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                                    (rule "add_literals" (formula "10") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "10") (term "1,0,0"))
                                    (rule "add_literals" (formula "10") (term "0,0"))
                                    (rule "qeq_literals" (formula "10") (term "0"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "true_left" (formula "10"))
                                    (rule "allLeft" (formula "8") (inst "t=k_0"))
                                    (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0") (ifseqformula "12"))
                                    (rule "qeq_literals" (formula "8") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0"))
                                    (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0,0,0"))
                                    (rule "add_literals" (formula "8") (term "0,0,0"))
                                    (rule "leq_literals" (formula "8") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "andRight" (formula "20"))
                                    (branch "Case 1"
                                       (rule "andRight" (formula "20"))
                                       (branch "Case 1"
                                          (rule "allRight" (formula "20") (inst "sk=i_9"))
                                          (rule "orRight" (formula "20"))
                                          (rule "orRight" (formula "20"))
                                          (rule "inEqSimp_leqRight" (formula "22"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_leqRight" (formula "21"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_geqRight" (formula "22"))
                                          (rule "polySimp_addComm1" (formula "3") (term "0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                          (rule "polySimp_elimOne" (formula "3") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "3"))
                                          (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                                          (rule "mul_literals" (formula "5") (term "0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                          (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                                          (rule "add_literals" (formula "5") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                          (rule "polySimp_rightDist" (formula "5") (term "1"))
                                          (rule "mul_literals" (formula "5") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                          (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "3"))
                                          (rule "times_zero_1" (formula "12") (term "0,0"))
                                          (rule "add_zero_left" (formula "12") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                                          (rule "mul_literals" (formula "12") (term "1"))
                                          (rule "allLeft" (formula "16") (inst "t=i_9"))
                                          (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0") (ifseqformula "2"))
                                          (rule "qeq_literals" (formula "16") (term "0,0,0"))
                                          (builtin "One Step Simplification" (formula "16"))
                                          (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "5"))
                                          (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                                          (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "16") (term "0,0,1"))
                                          (rule "leq_literals" (formula "16") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "16"))
                                          (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "16"))
                                          (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq0" (formula "17"))
                                          (rule "polySimp_pullOutFactor1" (formula "17") (term "0"))
                                          (rule "add_literals" (formula "17") (term "1,0"))
                                          (rule "times_zero_1" (formula "17") (term "0"))
                                          (rule "qeq_literals" (formula "17"))
                                          (rule "true_left" (formula "17"))
                                          (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "7") (term "0,2,0") (ifseqformula "1"))
                                          (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "17") (term "1,1,0,0") (ifseqformula "1"))
                                          (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                                          (rule "add_literals" (formula "2") (term "1,0"))
                                          (rule "times_zero_1" (formula "2") (term "0"))
                                          (rule "leq_literals" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "applyEqRigid" (formula "13") (term "0,2,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "3") (term "0,2,0") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq0" (formula "3"))
                                          (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                          (rule "add_literals" (formula "3") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "3") (term "1,0"))
                                          (rule "add_literals" (formula "3") (term "0"))
                                          (rule "qeq_literals" (formula "3"))
                                          (rule "closeFalse" (formula "3"))
                                       )
                                       (branch "Case 2"
                                          (rule "andRight" (formula "20"))
                                          (branch "Case 1"
                                             (rule "nnf_ex2all" (formula "20"))
                                             (rule "nnf_notAnd" (formula "1") (term "0"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                             (rule "allLeft" (formula "1") (inst "t=k_0"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,1"))
                                             (rule "add_literals" (formula "1") (term "1,1,0,1"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,1"))
                                             (rule "add_literals" (formula "1") (term "0,1"))
                                             (rule "leq_literals" (formula "1") (term "1"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "14"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "Case 2"
                                             (rule "inEqSimp_geqRight" (formula "20"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                             (rule "allLeft" (formula "10") (inst "t=i_8"))
                                             (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0") (ifseqformula "15"))
                                             (rule "qeq_literals" (formula "10") (term "0,0,0"))
                                             (builtin "One Step Simplification" (formula "10"))
                                             (rule "cut_direct" (formula "10") (term "0"))
                                             (branch "CUT: a.length <= i_8 TRUE"
                                                (builtin "One Step Simplification" (formula "11"))
                                                (rule "true_left" (formula "11"))
                                                (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "10"))
                                                (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "17"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "2"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                                (rule "add_literals" (formula "2") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                (rule "add_literals" (formula "2") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "2") (term "1,0"))
                                                (rule "add_literals" (formula "2") (term "0"))
                                                (rule "leq_literals" (formula "2"))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: a.length <= i_8 FALSE"
                                                (builtin "One Step Simplification" (formula "10"))
                                                (rule "inEqSimp_leqRight" (formula "20"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                (rule "mul_literals" (formula "1") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                (opengoal " ")
                                             )
                                          )
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "allRight" (formula "20") (inst "sk=f_3"))
                                       (rule "allRight" (formula "20") (inst "sk=o_3"))
                                       (rule "orRight" (formula "20"))
                                       (rule "orRight" (formula "20"))
                                       (rule "orRight" (formula "20"))
                                       (rule "replace_known_right" (formula "23") (term "0,2,2,2,2,0") (ifseqformula "20"))
                                       (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "20")) (ifInst ""  (formula "21")) (ifInst ""  (formula "20")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "21")) (ifInst ""  (formula "21")) (ifInst ""  (formula "20")))
                                       (rule "closeTrue" (formula "23"))
                                    )
                                 )
                                 (branch "CUT: a.length >= 1 + k_0 FALSE"
                                    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "19")))
                                    (rule "false_right" (formula "20"))
                                    (rule "inEqSimp_geqRight" (formula "19"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                    (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                                    (rule "inEqSimp_homoInEq0" (formula "1"))
                                    (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,0"))
                                    (rule "times_zero_1" (formula "1") (term "0"))
                                    (rule "qeq_literals" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "applyEq" (formula "7") (term "1,1,0,0") (ifseqformula "9"))
                                    (rule "applyEq" (formula "6") (term "0") (ifseqformula "9"))
                                    (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                                    (rule "inEqSimp_homoInEq1" (formula "10"))
                                    (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
                                    (rule "add_literals" (formula "10") (term "1,0"))
                                    (rule "times_zero_1" (formula "10") (term "0"))
                                    (rule "leq_literals" (formula "10"))
                                    (rule "true_left" (formula "10"))
                                    (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "11"))
                                    (rule "leq_literals" (formula "6") (term "0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "allLeft" (formula "6") (inst "t=i_8"))
                                    (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0") (ifseqformula "13"))
                                    (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "6") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "6") (term "1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "6") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "6") (term "0,1,0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "12"))
                                    (rule "qeq_literals" (formula "6") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (opengoal " ")
                                 )
                              )
                              (branch "CUT: k_0 >= 1 FALSE"
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "inEqSimp_geqRight" (formula "15"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                                 (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "10"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "applyEqRigid" (formula "12") (term "1") (ifseqformula "10"))
                                 (rule "applyEqRigid" (formula "15") (term "1,0") (ifseqformula "10"))
                                 (rule "times_zero_1" (formula "15") (term "0"))
                                 (rule "inEqSimp_commuteGeq" (formula "15"))
                                 (rule "applyEq" (formula "18") (term "1,1,0,0,0,1,1,0,0") (ifseqformula "10"))
                                 (rule "applyEq" (formula "18") (term "0,2,0,0,1,1,1,0,0") (ifseqformula "10"))
                                 (rule "applyEq" (formula "12") (term "1,1,0,0") (ifseqformula "10"))
                                 (rule "applyEq" (formula "18") (term "1,1,1") (ifseqformula "10"))
                                 (rule "add_zero_right" (formula "18") (term "1,1"))
                                 (rule "applyEqRigid" (formula "18") (term "0,2,1,1,0,0,1,0,0") (ifseqformula "10"))
                                 (rule "applyEq" (formula "18") (term "1,1,1,0,0,0,1,0,0") (ifseqformula "10"))
                                 (rule "add_zero_right" (formula "18") (term "1,1,0,0,0,1,0,0"))
                                 (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "10"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                                 (rule "qeq_literals" (formula "10"))
                                 (rule "true_left" (formula "10"))
                                 (rule "applyEqRigid" (formula "16") (term "0,2,1,2,0,1,0,0,1,0") (ifseqformula "9"))
                                 (rule "applyEqRigid" (formula "16") (term "1,0,1,1,1,0,0") (ifseqformula "9"))
                                 (rule "times_zero_1" (formula "16") (term "0,1,1,1,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "16") (term "1,1,1,0,0"))
                                 (rule "replace_known_left" (formula "16") (term "1,1,1,0,0") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "11"))
                                 (rule "applyEqRigid" (formula "1") (term "0,2,1,1") (ifseqformula "9"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
                                 (rule "inEqSimp_homoInEq0" (formula "1"))
                                 (rule "times_zero_2" (formula "1") (term "1,0"))
                                 (rule "add_zero_right" (formula "1") (term "0"))
                                 (rule "applyEqRigid" (formula "12") (term "1,0") (ifseqformula "9"))
                                 (rule "applyEq" (formula "16") (term "1,1,0,0,0") (ifseqformula "9"))
                                 (rule "add_zero_right" (formula "16") (term "1,0,0,0"))
                                 (rule "applyEqRigid" (formula "16") (term "0,2,0,1,0,1,0,0,1,0") (ifseqformula "9"))
                                 (rule "applyEq" (formula "16") (term "0,2,1,1,0,1,1,0,0") (ifseqformula "9"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "bsum_lower_equals_upper" (formula "12") (term "0"))
                                 (rule "eqSymm" (formula "12"))
                                 (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
                                 (rule "leq_literals" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "applyEq" (formula "15") (term "1,1,0,1,0,0,1,0") (ifseqformula "12"))
                                 (rule "add_zero_right" (formula "15") (term "1,0,1,0,0,1,0"))
                                 (rule "inEqSimp_or_tautInEq0" (formula "10") (term "0,0"))
                                 (rule "add_zero_right" (formula "10") (term "1,1,0,0"))
                                 (rule "qeq_literals" (formula "10") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "true_left" (formula "10"))
                                 (rule "inEqSimp_or_antiSymm0" (formula "14") (term "0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "14") (term "1,0,1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,0,0"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "cut_direct" (formula "14") (term "1"))
                                 (branch "CUT: a.length >= 1 TRUE"
                                    (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
                                    (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "7") (term "0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "andRight" (formula "14"))
                                    (branch "Case 1"
                                       (rule "andRight" (formula "14"))
                                       (branch "Case 1"
                                          (rule "allRight" (formula "14") (inst "sk=i_7"))
                                          (rule "orRight" (formula "14"))
                                          (rule "notRight" (formula "14"))
                                          (rule "inEqSimp_leqRight" (formula "15"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "applyEqRigid" (formula "1") (term "0,2,1,0") (ifseqformula "2"))
                                          (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0"))
                                          (rule "add_literals" (formula "1") (term "0"))
                                          (rule "qeq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "Case 2"
                                          (rule "nnf_ex2all" (formula "14"))
                                          (rule "nnf_notAnd" (formula "1") (term "0"))
                                          (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                                          (rule "inEqSimp_or_antiSymm0" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "1,0,1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "commute_or" (formula "1") (term "0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "typeEqDerived2" (formula "1") (term "0,0,1") (ifseqformula "10"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "castDel" (formula "1") (term "0,2,0,0"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "allRight" (formula "14") (inst "sk=f_2"))
                                       (rule "allRight" (formula "14") (inst "sk=o_2"))
                                       (rule "orRight" (formula "14"))
                                       (rule "orRight" (formula "14"))
                                       (rule "orRight" (formula "14"))
                                       (rule "replace_known_right" (formula "17") (term "0,2,2,2,2,0") (ifseqformula "14"))
                                       (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "15")) (ifInst ""  (formula "15")) (ifInst ""  (formula "14")))
                                       (rule "closeTrue" (formula "17"))
                                    )
                                 )
                                 (branch "CUT: a.length >= 1 FALSE"
                                    (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
                                    (rule "false_right" (formula "15"))
                                    (rule "inEqSimp_geqRight" (formula "14"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "1"))
                                    (rule "applyEq" (formula "9") (term "1,1,0,0") (ifseqformula "7"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "7"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "inEqSimp_or_tautInEq0" (formula "7") (term "0,0"))
                                    (rule "add_zero_right" (formula "7") (term "1,1,0,0"))
                                    (rule "qeq_literals" (formula "7") (term "1,0,0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (opengoal " ")
                                 )
                              )
                           )
                           (branch "Null Reference (_a = null)"
                              (builtin "One Step Simplification" (formula "19"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Index Out of Bounds (_a != null, but k Out of Bounds!)"
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "false_right" (formula "19"))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "1") (term "0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                              (rule "mul_literals" (formula "1") (term "1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "1") (term "0,1"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
                              (rule "applyEq" (formula "8") (term "1,1,0,0") (ifseqformula "11"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "11"))
                              (rule "inEqSimp_homoInEq1" (formula "12"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0"))
                              (rule "add_literals" (formula "12") (term "1,0"))
                              (rule "times_zero_1" (formula "12") (term "0"))
                              (rule "leq_literals" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "applyEq" (formula "7") (term "0") (ifseqformula "11"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq0" (formula "1"))
                              (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,0"))
                              (rule "times_zero_1" (formula "1") (term "0"))
                              (rule "qeq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "cut_direct" (formula "12") (term "0"))
                              (branch "CUT: k_0 >= 1 TRUE"
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "exLeft" (formula "13") (inst "sk=i_6"))
                                 (rule "andLeft" (formula "13"))
                                 (rule "andLeft" (formula "13"))
                                 (rule "eqSymm" (formula "15"))
                                 (rule "inEqSimp_homoInEq0" (formula "14"))
                                 (rule "polySimp_addComm1" (formula "14") (term "0"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "15"))
                                 (rule "inEqSimp_homoInEq0" (formula "1"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "15"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1"))
                                 (rule "mul_literals" (formula "14") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_contradEq7" (formula "11") (term "0") (ifseqformula "12"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0"))
                                 (rule "leq_literals" (formula "11") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "11"))
                                 (rule "leq_literals" (formula "8") (term "0"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "true_left" (formula "8"))
                                 (rule "allLeft" (formula "6") (inst "t=i_6"))
                                 (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0") (ifseqformula "12"))
                                 (rule "qeq_literals" (formula "6") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "13"))
                                 (rule "inEqSimp_homoInEq1" (formula "6") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0"))
                                 (rule "add_literals" (formula "6") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,0,0"))
                                 (rule "leq_literals" (formula "6") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (opengoal " ")
                              )
                              (branch "CUT: k_0 >= 1 FALSE"
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "inEqSimp_geqRight" (formula "14"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "1"))
                                 (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "9"))
                                 (builtin "One Step Simplification" (formula "13"))
                                 (rule "applyEqRigid" (formula "12") (term "1,1,0,0") (ifseqformula "9"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "9"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "12"))
                                 (rule "inEqSimp_homoInEq0" (formula "1"))
                                 (rule "times_zero_2" (formula "1") (term "1,0"))
                                 (rule "add_zero_right" (formula "1") (term "0"))
                                 (rule "applyEqRigid" (formula "14") (term "1,0") (ifseqformula "8"))
                                 (rule "times_zero_1" (formula "14") (term "0"))
                                 (rule "inEqSimp_commuteGeq" (formula "14"))
                                 (rule "applyEqRigid" (formula "6") (term "1,1,0,0") (ifseqformula "8"))
                                 (rule "applyEqRigid" (formula "13") (term "1,0") (ifseqformula "8"))
                                 (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "11"))
                                 (rule "applyEq" (formula "1") (term "0,2,1,0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "9") (term "1") (ifseqformula "8"))
                                 (rule "bsum_lower_equals_upper" (formula "12") (term "0"))
                                 (rule "eqSymm" (formula "12"))
                                 (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
                                 (rule "leq_literals" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_or_tautInEq0" (formula "10") (term "0,0"))
                                 (rule "add_zero_right" (formula "10") (term "1,1,0,0"))
                                 (rule "qeq_literals" (formula "10") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "10"))
                                 (rule "true_left" (formula "10"))
                                 (rule "inEqSimp_or_tautInEq0" (formula "6") (term "0,0"))
                                 (rule "add_zero_right" (formula "6") (term "1,1,0,0"))
                                 (rule "qeq_literals" (formula "6") (term "1,0,0"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (opengoal " ")
                              )
                           )
                        )
                        (branch "Null Reference (_a = null)"
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "Index Out of Bounds (_a != null, but k Out of Bounds!)"
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "false_right" (formula "19"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "1") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "1,1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "10"))
                           (rule "qeq_literals" (formula "1") (term "0,1"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
                           (rule "applyEq" (formula "7") (term "0") (ifseqformula "11"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                           (rule "inEqSimp_homoInEq0" (formula "1"))
                           (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,0"))
                           (rule "times_zero_1" (formula "1") (term "0"))
                           (rule "qeq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq1" (formula "10"))
                           (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
                           (rule "add_literals" (formula "10") (term "1,0"))
                           (rule "times_zero_1" (formula "10") (term "0"))
                           (rule "leq_literals" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "applyEq" (formula "6") (term "1,1,0,0") (ifseqformula "9"))
                           (rule "cut_direct" (formula "12") (term "0"))
                           (branch "CUT: k_0 >= 1 TRUE"
                              (builtin "One Step Simplification" (formula "13"))
                              (rule "exLeft" (formula "13") (inst "sk=i_5"))
                              (rule "andLeft" (formula "13"))
                              (rule "andLeft" (formula "13"))
                              (rule "eqSymm" (formula "15"))
                              (rule "inEqSimp_homoInEq0" (formula "14"))
                              (rule "polySimp_addComm1" (formula "14") (term "0"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "15"))
                              (rule "inEqSimp_homoInEq0" (formula "1"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "15"))
                              (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "15"))
                              (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "15"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1"))
                              (rule "polySimp_rightDist" (formula "14") (term "1"))
                              (rule "mul_literals" (formula "14") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                              (rule "inEqSimp_contradEq7" (formula "11") (term "0") (ifseqformula "12"))
                              (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                              (rule "add_literals" (formula "11") (term "0,0,0"))
                              (rule "leq_literals" (formula "11") (term "0,0"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "11"))
                              (rule "leq_literals" (formula "8") (term "0"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "allLeft" (formula "6") (inst "t=i_5"))
                              (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0") (ifseqformula "12"))
                              (rule "qeq_literals" (formula "6") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "13"))
                              (rule "inEqSimp_homoInEq1" (formula "6") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0"))
                              (rule "add_literals" (formula "6") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "6") (term "0,0,0"))
                              (rule "leq_literals" (formula "6") (term "0,0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (opengoal " ")
                           )
                           (branch "CUT: k_0 >= 1 FALSE"
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "inEqSimp_geqRight" (formula "14"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "1"))
                              (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "9"))
                              (builtin "One Step Simplification" (formula "13"))
                              (rule "applyEq" (formula "7") (term "1,1,0,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "13"))
                              (rule "times_zero_2" (formula "15") (term "0"))
                              (rule "inEqSimp_commuteGeq" (formula "15"))
                              (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "9"))
                              (rule "leq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "8"))
                              (rule "applyEqRigid" (formula "1") (term "0,2,1,1") (ifseqformula "8"))
                              (rule "applyEqRigid" (formula "13") (term "1,0") (ifseqformula "8"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
                              (rule "qeq_literals" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "11"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
                              (rule "inEqSimp_homoInEq0" (formula "1"))
                              (rule "times_zero_2" (formula "1") (term "1,0"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "applyEq" (formula "9") (term "1") (ifseqformula "8"))
                              (rule "bsum_lower_equals_upper" (formula "12") (term "0"))
                              (rule "eqSymm" (formula "12"))
                              (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
                              (rule "leq_literals" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_or_tautInEq0" (formula "6") (term "0,0"))
                              (rule "add_zero_right" (formula "6") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "6") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "inEqSimp_or_tautInEq0" (formula "9") (term "0,0"))
                              (rule "add_zero_right" (formula "9") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "9") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (opengoal " ")
                           )
                        )
                     )
                     (branch "if x_7 false"
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "int::select(anon_heap_loop, self, max) <= -1 + a[k_0] FALSE"
                     (rule "inEqSimp_leqRight" (formula "17"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "if" (formula "18") (term "1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "compound_assignment_op_plus" (formula "18") (term "1"))
                     (rule "compound_int_cast_expression" (formula "18") (term "1") (inst "#v=x"))
                     (rule "variableDeclarationAssign" (formula "18") (term "1"))
                     (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_10"))
                     (rule "remove_parentheses_right" (formula "18") (term "1"))
                     (rule "compound_addition_2" (formula "18") (term "1") (inst "#v1=x_12") (inst "#v0=x_11"))
                     (rule "variableDeclarationAssign" (formula "18") (term "1"))
                     (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_11"))
                     (rule "assignment" (formula "18") (term "1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "variableDeclarationAssign" (formula "18") (term "1"))
                     (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_12"))
                     (rule "selectOfAnon" (formula "18") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "replace_known_right" (formula "18") (term "0,0,1,0,0,1,0") (ifseqformula "16"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "selectOfStore" (formula "18") (term "0,0,1,0,0,1,0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "selectOfStore" (formula "18") (term "2,0,1,0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "elementOfUnion" (formula "18") (term "0,0,0,1,0"))
                     (rule "elementOfSingleton" (formula "18") (term "0,0,0,0,1,0"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "remove_parentheses_right" (formula "18") (term "1"))
                     (rule "assignment_array2" (formula "18"))
                     (branch "Normal Execution (_a != null)"
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfAnon" (formula "18") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "replace_known_right" (formula "18") (term "0,0,1,0,0,1,0") (ifseqformula "17"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "elementOfUnion" (formula "18") (term "0,0,0,1,0"))
                        (rule "elementOfSingleton" (formula "18") (term "1,0,0,0,1,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "elementOfSingleton" (formula "18") (term "0,0,0,1,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "ifthenelse_negated" (formula "18") (term "0,1,0"))
                        (rule "selectOfStore" (formula "18") (term "0,0,0,1,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "1,0,1,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "0,0,0,1,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "replace_known_left" (formula "18") (term "0,0,1,0") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "assignmentAdditionInt" (formula "18") (term "1"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "translateJavaAddInt" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "18") (term "0,1,0"))
                        (rule "widening_identity_cast_5" (formula "18") (term "1"))
                        (rule "assignment" (formula "18") (term "1"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "postincrement" (formula "18") (term "1"))
                        (rule "compound_int_cast_expression" (formula "18") (term "1") (inst "#v=x"))
                        (rule "variableDeclarationAssign" (formula "18") (term "1"))
                        (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_13"))
                        (rule "remove_parentheses_right" (formula "18") (term "1"))
                        (rule "assignmentAdditionInt" (formula "18") (term "1"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "translateJavaAddInt" (formula "18") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "18") (term "0,1,0"))
                        (rule "widening_identity_cast_5" (formula "18") (term "1"))
                        (rule "assignment" (formula "18") (term "1"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "tryEmpty" (formula "18") (term "1"))
                        (rule "methodCallEmpty" (formula "18") (term "1"))
                        (rule "emptyModality" (formula "18") (term "1"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "eqSymm" (formula "18") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "0,1,1,1,1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "0,0,1,1,1,1,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,1,1,1,1,1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "1,1,0,0,1,0,1,1,1,1,0,0"))
                        (rule "add_literals" (formula "18") (term "0,1,1,0,0,1,0,1,1,1,1,0,0"))
                        (rule "add_zero_left" (formula "18") (term "1,1,0,0,1,0,1,1,1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1,1,1"))
                        (rule "add_literals" (formula "18") (term "0,0,1,1,1"))
                        (rule "add_zero_left" (formula "18") (term "0,1,1,1"))
                        (rule "inEqSimp_homoInEq1" (formula "18") (term "0,0,1,1,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1,1,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,1,1,1,1,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,0,1,1,1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "1,1,1"))
                        (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,1,1"))
                        (rule "add_literals" (formula "18") (term "1,0,1,1,1"))
                        (rule "times_zero_1" (formula "18") (term "0,1,1,1"))
                        (rule "add_zero_left" (formula "18") (term "1,1,1"))
                        (rule "inEqSimp_homoInEq1" (formula "18") (term "1,1,1,1,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,1,1,1,1,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,1,1,1,1,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "0,1,0,1,1,1,1,1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,1,1,1,1,0,0"))
                        (rule "add_literals" (formula "18") (term "0,0,0,0,1,1,1,1,0,0"))
                        (rule "add_zero_left" (formula "18") (term "0,0,0,1,1,1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1,1,1,1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "18") (term "0,0,1,1,1,1,1,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "18") (term "1,1"))
                        (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,1"))
                        (rule "add_literals" (formula "18") (term "1,0,1,1"))
                        (rule "times_zero_1" (formula "18") (term "0,1,1"))
                        (rule "qeq_literals" (formula "18") (term "1,1"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "polySimp_sepPosMonomial" (formula "18") (term "0,0,1,1,1,0,0"))
                        (rule "mul_literals" (formula "18") (term "1,0,0,1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "1,1,1,1,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "0,1,1,1,1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "0,1,1,1,1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
                        (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                        (rule "bsum_induction_upper_concrete" (formula "18") (term "0,0,1,1,1,1,1,0,0"))
                        (rule "polySimp_homoEq" (formula "18") (term "0,1,1,1,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,1,1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "18") (term "1,1,0,0,1,1,1,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,1,1,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "0,1,0,0,1,1,1,1,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0,0,1,1,1,1,1,0,0"))
                        (rule "replace_known_left" (formula "18") (term "0,0,0,1,0,0,1,1,1,1,1,0,0") (ifseqformula "9"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,1,1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "18") (term "0,0,0,1,1,1,1,1,0,0"))
                        (rule "polySimp_sepNegMonomial" (formula "18") (term "0,1,1,1,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "0,0,1,1,1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "0,0,1,1,1,1,1,0,0"))
                        (rule "inEqSimp_invertInEq0" (formula "18") (term "0,0,1,1,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0,1,1,1,1,0,0"))
                        (rule "times_zero_2" (formula "18") (term "1,0,0,1,1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "0,0,0,1,1,1,1,0,0"))
                        (rule "replace_known_left" (formula "18") (term "0,0,1,1,1,1,0,0") (ifseqformula "9"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "inEqSimp_contradEq7" (formula "18") (term "0,0,1,1,1,0,0") (ifseqformula "9"))
                        (rule "add_zero_left" (formula "18") (term "0,0,0,0,1,1,1,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,0,0,0,1,1,1,0,0"))
                        (rule "leq_literals" (formula "18") (term "0,0,0,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "inEqSimp_subsumption1" (formula "18") (term "0,0,0") (ifseqformula "9"))
                        (rule "leq_literals" (formula "18") (term "0,0,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "1,1,1,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "castDel" (formula "18") (term "1,1,1,1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "18") (term "1,1,1,1,1,0,0"))
                        (rule "selectOfStore" (formula "18") (term "1,1,0,0,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "0,1,1,1,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "0,0,1,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "2,0,0,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "0,1,0,0,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "1,1,0,0,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "1,1,0,0,1,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "castDel" (formula "18") (term "1,1,1,0,0,1,0"))
                        (rule "eqSymm" (formula "18") (term "1,0,1,1,0,0,1,0"))
                        (rule "eqSymm" (formula "18") (term "0,0,1,1,0,0,1,0"))
                        (rule "eqSymm" (formula "18") (term "1,0,0,1,0"))
                        (rule "selectOfStore" (formula "18") (term "0,0,1,1,0,0,0,1,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "0,0,1,0,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfAnon" (formula "18") (term "0,0,1,0,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                        (rule "polySimp_addComm0" (formula "18") (term "1,0,1,1,1,0,0"))
                        (rule "selectOfAnon" (formula "18") (term "1,1,0,0,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "16")))
                        (rule "selectOfStore" (formula "18") (term "0,1,0,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "castDel" (formula "18") (term "0,1,0,1,1,1,0,0"))
                        (rule "selectOfAnon" (formula "18") (term "0,1,0,0,1,0,0"))
                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                        (rule "selectOfStore" (formula "18") (term "2,0,1,0,0,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "2,0,1,0,0,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "elementOfUnion" (formula "18") (term "0,0,0,1,1,0,1,1,1,0,0"))
                        (rule "elementOfSingleton" (formula "18") (term "1,0,0,0,1,1,0,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "elementOfSingleton" (formula "18") (term "0,0,0,1,1,0,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "ifthenelse_negated" (formula "18") (term "0,1,1,0,1,1,1,0,0"))
                        (rule "elementOfUnion" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "elementOfSingleton" (formula "18") (term "0,0,0,0,1,0,0,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "elementOfSingleton" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "ifthenelse_negated" (formula "18") (term "0,1,0,0,1,0,0"))
                        (rule "selectOfStore" (formula "18") (term "0,0,0,1,1,0,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "2,1,1,0,0,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "castDel" (formula "18") (term "2,1,1,0,0,1,1,0,0"))
                        (rule "elementOfUnion" (formula "18") (term "0,0,1,1,0,0,1,1,0,0"))
                        (rule "elementOfSingleton" (formula "18") (term "1,0,0,1,1,0,0,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "1,1,0,0,1,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "castDel" (formula "18") (term "1,1,1,0,0,1,0"))
                        (rule "eqSymm" (formula "18") (term "1,0,1,1,0,0,1,0"))
                        (rule "eqSymm" (formula "18") (term "0,0,1,1,0,0,1,0"))
                        (rule "eqSymm" (formula "18") (term "1,0,0,1,0"))
                        (rule "selectOfAnon" (formula "18") (term "0,1,1,1,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "16")))
                        (rule "elementOfUnion" (formula "18") (term "0,0,0,1,1,1,1,1,1,0,0"))
                        (rule "elementOfSingleton" (formula "18") (term "1,0,0,0,1,1,1,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "polySimp_addComm1" (formula "18") (term "1,1,1,1,1,0,0"))
                        (rule "selectOfStore" (formula "18") (term "0,0,0,1,1,0,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "5")))
                        (rule "selectOfStore" (formula "18") (term "0,1,1,0,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfAnon" (formula "18") (term "2,0,1,0,0,1,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "0,1,1,0,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "polySimp_addComm1" (formula "18") (term "1,0,1,1,1,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "18") (term "0,1,0,1,1,1,0,0"))
                        (rule "add_literals" (formula "18") (term "1,0,1,0,1,1,1,0,0"))
                        (rule "times_zero_1" (formula "18") (term "0,1,0,1,1,1,0,0"))
                        (rule "add_zero_left" (formula "18") (term "1,0,1,1,1,0,0"))
                        (rule "selectOfStore" (formula "18") (term "0,0,1,1,0,2,0,1,0,0,1,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfAnon" (formula "18") (term "2,0,0,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                        (rule "selectOfStore" (formula "18") (term "0,0,1,1,0,2,0,1,0,0,1,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "elementOfUnion" (formula "18") (term "0,0,2,0,0,1,1,1,0,0"))
                        (rule "elementOfSingleton" (formula "18") (term "1,0,0,2,0,0,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "elementOfSingleton" (formula "18") (term "0,0,2,0,0,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "ifthenelse_negated" (formula "18") (term "2,0,0,1,1,1,0,0"))
                        (rule "selectOfAnon" (formula "18") (term "1,1,0,0,1,0,0"))
                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "16")))
                        (rule "selectOfAnon" (formula "18") (term "0,0,1,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "16")))
                        (rule "elementOfUnion" (formula "18") (term "0,0,1,1,0,0,1,0,0"))
                        (rule "elementOfSingleton" (formula "18") (term "1,0,0,1,1,0,0,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "2,1,1,0,0,1,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "castDel" (formula "18") (term "1,2,1,1,0,0,1,0"))
                        (rule "eqSymm" (formula "18") (term "1,0,2,1,1,0,0,1,0"))
                        (rule "eqSymm" (formula "18") (term "0,0,2,1,1,0,0,1,0"))
                        (rule "selectOfStore" (formula "18") (term "1,2,0,0,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "0,0,1,1,0,0,0,1,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "0,0,2,0,0,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "elementOfUnion" (formula "18") (term "0,0,0,0,1,1,1,1,0,0"))
                        (rule "elementOfSingleton" (formula "18") (term "1,0,0,0,0,1,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "5")))
                        (rule "selectOfStore" (formula "18") (term "1,2,0,0,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "0,0,2,0,0,1,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "5")) (ifInst ""  (formula "14")))
                        (rule "elementOfUnion" (formula "18") (term "0,0,0,2,0,1,0,0,1,0"))
                        (rule "elementOfSingleton" (formula "18") (term "0,0,0,0,2,0,1,0,0,1,0"))
                        (rule "elementOfSingleton" (formula "18") (term "1,0,0,0,2,0,1,0,0,1,0"))
                        (rule "selectOfStore" (formula "18") (term "0,1,0,0,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "2,2,0,1,0,0,1,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "castDel" (formula "18") (term "1,2,2,0,1,0,0,1,0"))
                        (rule "eqSymm" (formula "18") (term "1,0,2,2,0,1,0,0,1,0"))
                        (rule "eqSymm" (formula "18") (term "0,0,2,2,0,1,0,0,1,0"))
                        (rule "selectOfStore" (formula "18") (term "2,2,2,0,1,0,0,1,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "castDel" (formula "18") (term "1,2,2,2,0,1,0,0,1,0"))
                        (rule "eqSymm" (formula "18") (term "1,0,2,2,2,0,1,0,0,1,0"))
                        (rule "eqSymm" (formula "18") (term "0,0,2,2,2,0,1,0,0,1,0"))
                        (rule "selectOfAnon" (formula "18") (term "0,1,0,0,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                        (rule "selectOfStore" (formula "18") (term "2,0,1,0,0,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "elementOfUnion" (formula "18") (term "0,0,0,1,0,0,1,1,0,0"))
                        (rule "elementOfSingleton" (formula "18") (term "0,0,0,0,1,0,0,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "elementOfSingleton" (formula "18") (term "0,0,0,1,0,0,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "ifthenelse_negated" (formula "18") (term "0,1,0,0,1,1,0,0"))
                        (rule "selectOfStore" (formula "18") (term "0,0,0,1,0,0,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "1,0,1,0,0,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "selectOfStore" (formula "18") (term "0,0,0,1,0,0,1,1,0,0"))
                        (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "5")))
                        (rule "cut_direct" (formula "13") (term "0"))
                        (branch "CUT: k_0 >= 1 TRUE"
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "exLeft" (formula "14") (inst "sk=i_3"))
                           (rule "andLeft" (formula "14"))
                           (rule "andLeft" (formula "14"))
                           (rule "eqSymm" (formula "16"))
                           (rule "inEqSimp_homoInEq0" (formula "15"))
                           (rule "polySimp_addComm1" (formula "15") (term "0"))
                           (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "16"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "16"))
                           (rule "inEqSimp_commuteGeq" (formula "1"))
                           (rule "applyEq" (formula "21") (term "1,1,0,0,1,0,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "21") (term "0,0,1,1,1,0,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "21") (term "1,1,0,0,1,1,0,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "21") (term "0,1,0,1,1,1,1,0,0") (ifseqformula "16"))
                           (rule "polySimp_addComm0" (formula "21") (term "0,1,1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1"))
                           (rule "polySimp_rightDist" (formula "15") (term "1"))
                           (rule "mul_literals" (formula "15") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                           (rule "inEqSimp_contradEq7" (formula "12") (term "0") (ifseqformula "13"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0"))
                           (rule "leq_literals" (formula "12") (term "0,0"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "12"))
                           (rule "leq_literals" (formula "9") (term "0"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "cut_direct" (formula "19") (term "0,0,0"))
                           (branch "CUT: a.length >= 1 + k_0 TRUE"
                              (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "1")))
                              (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0"))
                              (rule "add_literals" (formula "10") (term "0,0"))
                              (rule "qeq_literals" (formula "10") (term "0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "allLeft" (formula "8") (inst "t=k_0"))
                              (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0") (ifseqformula "12"))
                              (rule "qeq_literals" (formula "8") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0"))
                              (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0"))
                              (rule "leq_literals" (formula "8") (term "0,0"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "2"))
                              (rule "times_zero_1" (formula "8") (term "0,0"))
                              (rule "add_zero_left" (formula "8") (term "0"))
                              (rule "andRight" (formula "21"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "21"))
                                 (branch "Case 1"
                                    (rule "allRight" (formula "21") (inst "sk=i_4"))
                                    (rule "orRight" (formula "21"))
                                    (rule "orRight" (formula "21"))
                                    (rule "inEqSimp_leqRight" (formula "23"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_leqRight" (formula "22"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_geqRight" (formula "23"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                    (rule "mul_literals" (formula "3") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "allLeft" (formula "15") (inst "t=i_4"))
                                    (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "15") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                    (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "15") (term "0,0,1"))
                                    (rule "leq_literals" (formula "15") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "15"))
                                    (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "2"))
                                    (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                                    (rule "add_literals" (formula "2") (term "1,0"))
                                    (rule "times_zero_1" (formula "2") (term "0"))
                                    (rule "leq_literals" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "5") (term "0,2,0") (ifseqformula "1"))
                                    (rule "applyEqRigid" (formula "22") (term "1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "12") (term "0,2,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "15") (term "0") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "15"))
                                    (rule "polySimp_pullOutFactor1" (formula "15") (term "0"))
                                    (rule "add_literals" (formula "15") (term "1,0"))
                                    (rule "times_zero_1" (formula "15") (term "0"))
                                    (rule "qeq_literals" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "applyEq" (formula "15") (term "1,1,0,0") (ifseqformula "1"))
                                    (rule "applyEqRigid" (formula "20") (term "1,0") (ifseqformula "1"))
                                    (rule "applyEqRigid" (formula "4") (term "1,1") (ifseqformula "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "3"))
                                    (rule "andLeft" (formula "5"))
                                    (rule "inEqSimp_homoInEq1" (formula "5"))
                                    (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                                    (rule "add_literals" (formula "5") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "5") (term "1,0"))
                                    (rule "add_zero_right" (formula "5") (term "0"))
                                    (rule "leq_literals" (formula "5"))
                                    (rule "closeFalse" (formula "5"))
                                 )
                                 (branch "Case 2"
                                    (rule "andRight" (formula "21"))
                                    (branch "Case 1"
                                       (rule "nnf_ex2all" (formula "21"))
                                       (rule "nnf_notAnd" (formula "1") (term "0"))
                                       (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                       (rule "allLeft" (formula "1") (inst "t=i_3"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1,1"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "17"))
                                       (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                                       (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "1") (term "0,0,1"))
                                       (rule "leq_literals" (formula "1") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "16") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "16") (term "0"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "closeFalse" (formula "16"))
                                    )
                                    (branch "Case 2"
                                       (rule "inEqSimp_geqRight" (formula "21"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "1") (term "0,0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "0,0,1"))
                                       (rule "mul_literals" (formula "1") (term "0,0,0,1"))
                                       (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "1"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "19") (term "0"))
                                       (rule "polySimp_addComm0" (formula "19") (term "0,0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "19") (term "0"))
                                       (rule "add_literals" (formula "19") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "19") (term "1,0"))
                                       (rule "add_zero_right" (formula "19") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1"))
                                       (rule "polySimp_rightDist" (formula "19") (term "1"))
                                       (rule "mul_literals" (formula "19") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                                       (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "19"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "3"))
                                       (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                       (rule "add_literals" (formula "3") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0"))
                                       (rule "add_literals" (formula "3") (term "0"))
                                       (rule "leq_literals" (formula "3"))
                                       (rule "closeFalse" (formula "3"))
                                    )
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "21") (inst "sk=f_1"))
                                 (rule "allRight" (formula "21") (inst "sk=o_1"))
                                 (rule "orRight" (formula "21"))
                                 (rule "orRight" (formula "21"))
                                 (rule "orRight" (formula "21"))
                                 (rule "replace_known_right" (formula "24") (term "0,0,0,0,2,0") (ifseqformula "21"))
                                 (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "23")) (ifInst ""  (formula "22")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "21")))
                                 (rule "closeTrue" (formula "24"))
                              )
                           )
                           (branch "CUT: a.length >= 1 + k_0 FALSE"
                              (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "19")))
                              (rule "false_right" (formula "20"))
                              (rule "inEqSimp_geqRight" (formula "19"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                              (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "11"))
                              (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                              (rule "add_literals" (formula "11") (term "1,0"))
                              (rule "times_zero_1" (formula "11") (term "0"))
                              (rule "leq_literals" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "applyEq" (formula "8") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "7") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq0" (formula "1"))
                              (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,0"))
                              (rule "times_zero_1" (formula "1") (term "0"))
                              (rule "qeq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "11"))
                              (rule "leq_literals" (formula "6") (term "0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "allLeft" (formula "6") (inst "t=i_3"))
                              (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0") (ifseqformula "12"))
                              (rule "qeq_literals" (formula "6") (term "0,0,0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "13"))
                              (rule "inEqSimp_homoInEq1" (formula "6") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0"))
                              (rule "add_literals" (formula "6") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "6") (term "0,0,0"))
                              (rule "leq_literals" (formula "6") (term "0,0"))
                              (builtin "One Step Simplification" (formula "6"))
                              (opengoal " ")
                           )
                        )
                        (branch "CUT: k_0 >= 1 FALSE"
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "inEqSimp_geqRight" (formula "15"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                           (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "applyEq" (formula "19") (term "1,1,0,0,0,1,1,0,0") (ifseqformula "10"))
                           (rule "applyEqRigid" (formula "16") (term "1,0") (ifseqformula "10"))
                           (rule "times_zero_1" (formula "16") (term "0"))
                           (rule "inEqSimp_commuteGeq" (formula "16"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "13"))
                           (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "9"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                           (rule "qeq_literals" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "applyEq" (formula "17") (term "1,0,1,1,1,0,0") (ifseqformula "9"))
                           (rule "times_zero_1" (formula "17") (term "0,1,1,1,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "17") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "17") (term "1,0,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "17") (term "0,1,1,1,0,0"))
                           (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "9"))
                           (rule "applyEq" (formula "17") (term "1,1,0,0,0") (ifseqformula "9"))
                           (rule "add_zero_right" (formula "17") (term "1,0,0,0"))
                           (rule "applyEq" (formula "10") (term "1") (ifseqformula "9"))
                           (rule "applyEq" (formula "1") (term "0,2,1") (ifseqformula "9"))
                           (rule "applyEq" (formula "16") (term "1,1,1") (ifseqformula "9"))
                           (rule "add_literals" (formula "16") (term "1,1"))
                           (rule "applyEq" (formula "16") (term "1,1,0,0,1,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
                           (rule "inEqSimp_commuteGeq" (formula "1"))
                           (rule "applyEq" (formula "16") (term "1,1,1,0,0,0,1,0,0") (ifseqformula "9"))
                           (rule "add_literals" (formula "16") (term "1,1,0,0,0,1,0,0"))
                           (rule "applyEq" (formula "16") (term "0,2,0,1,0,1,0,0,1,0") (ifseqformula "9"))
                           (rule "applyEq" (formula "16") (term "1,1,0,0,1,1,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "16") (term "0,1,0,0,1,1,1,0,0") (ifseqformula "11"))
                           (rule "times_zero_2" (formula "16") (term "1,0,0,1,1,1,0,0"))
                           (rule "add_zero_right" (formula "16") (term "0,0,1,1,1,0,0"))
                           (rule "applyEqRigid" (formula "16") (term "0,2,0,0,1,1,1,0,0") (ifseqformula "9"))
                           (rule "bsum_lower_equals_upper" (formula "12") (term "0"))
                           (rule "eqSymm" (formula "12"))
                           (rule "applyEq" (formula "16") (term "1,1,0,1,0,0,1,0") (ifseqformula "12"))
                           (rule "add_zero_right" (formula "16") (term "1,0,1,0,0,1,0"))
                           (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
                           (rule "leq_literals" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "applyEq" (formula "15") (term "1,0,1,1,1,0,0") (ifseqformula "12"))
                           (rule "add_zero_right" (formula "15") (term "0,1,1,1,0,0"))
                           (rule "replace_known_left" (formula "15") (term "1,1,1,0,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "inEqSimp_or_tautInEq0" (formula "10") (term "0,0"))
                           (rule "add_zero_right" (formula "10") (term "1,1,0,0"))
                           (rule "qeq_literals" (formula "10") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "inEqSimp_or_antiSymm0" (formula "14") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,0,0"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "add_literals" (formula "14") (term "1,0,0,0,0,1,0,0"))
                           (rule "cut_direct" (formula "14") (term "0,0,0"))
                           (branch "CUT: a.length >= 1 TRUE"
                              (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
                              (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "1"))
                              (rule "leq_literals" (formula "7") (term "0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "andRight" (formula "14"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "14"))
                                 (branch "Case 1"
                                    (rule "allRight" (formula "14") (inst "sk=i_2"))
                                    (rule "orRight" (formula "14"))
                                    (rule "notRight" (formula "14"))
                                    (rule "inEqSimp_leqRight" (formula "15"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "applyEqRigid" (formula "1") (term "0,2,1,0") (ifseqformula "2"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "Case 2"
                                    (rule "nnf_ex2all" (formula "14"))
                                    (rule "nnf_notAnd" (formula "1") (term "0"))
                                    (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                    (rule "inEqSimp_or_antiSymm0" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "1,0,1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "commute_or" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "typeEqDerived2" (formula "1") (term "0,0,1") (ifseqformula "10"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "castDel" (formula "1") (term "0,2,0,0"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "12"))
                                    (rule "add_zero_right" (formula "2") (term "1"))
                                    (rule "inEqSimp_contradEq3" (formula "12") (ifseqformula "2"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "12") (term "0,0"))
                                    (rule "qeq_literals" (formula "12") (term "0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "false_right" (formula "12"))
                                    (rule "allLeft" (formula "7") (inst "t=Z(0(#))"))
                                    (rule "leq_literals" (formula "7") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_commuteGeq" (formula "7") (term "0"))
                                    (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "7") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "7") (term "0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "closeFalse" (formula "7"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "14") (inst "sk=f_0"))
                                 (rule "allRight" (formula "14") (inst "sk=o_0"))
                                 (rule "orRight" (formula "14"))
                                 (rule "orRight" (formula "14"))
                                 (rule "orRight" (formula "14"))
                                 (rule "replace_known_right" (formula "17") (term "0,2,2,0") (ifseqformula "15"))
                                 (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "14")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "14")))
                                 (rule "closeTrue" (formula "17"))
                              )
                           )
                           (branch "CUT: a.length >= 1 FALSE"
                              (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
                              (rule "false_right" (formula "15"))
                              (rule "inEqSimp_geqRight" (formula "14"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "1"))
                              (rule "applyEq" (formula "9") (term "1,1,0,0") (ifseqformula "7"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "7"))
                              (rule "leq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                              (rule "qeq_literals" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "inEqSimp_or_tautInEq0" (formula "7") (term "0,0"))
                              (rule "add_zero_right" (formula "7") (term "1,1,0,0"))
                              (rule "qeq_literals" (formula "7") (term "1,0,0"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (opengoal " ")
                           )
                        )
                     )
                     (branch "Null Reference (_a = null)"
                        (builtin "One Step Simplification" (formula "19"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "Index Out of Bounds (_a != null, but k Out of Bounds!)"
                        (builtin "One Step Simplification" (formula "19"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                        (rule "false_right" (formula "19"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "1") (term "0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "1") (term "0,1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
                        (rule "applyEq" (formula "7") (term "0") (ifseqformula "11"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                        (rule "inEqSimp_homoInEq0" (formula "1"))
                        (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,0"))
                        (rule "times_zero_1" (formula "1") (term "0"))
                        (rule "qeq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "6") (term "1,1,0,0") (ifseqformula "9"))
                        (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq1" (formula "10"))
                        (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "1,0"))
                        (rule "times_zero_1" (formula "10") (term "0"))
                        (rule "leq_literals" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "cut_direct" (formula "12") (term "0"))
                        (branch "CUT: k_0 >= 1 TRUE"
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "exLeft" (formula "13") (inst "sk=i_1"))
                           (rule "andLeft" (formula "13"))
                           (rule "andLeft" (formula "13"))
                           (rule "eqSymm" (formula "15"))
                           (rule "inEqSimp_homoInEq0" (formula "14"))
                           (rule "polySimp_addComm1" (formula "14") (term "0"))
                           (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "15"))
                           (rule "inEqSimp_commuteGeq" (formula "1"))
                           (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "15"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1"))
                           (rule "polySimp_rightDist" (formula "14") (term "1"))
                           (rule "mul_literals" (formula "14") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                           (rule "inEqSimp_contradEq7" (formula "11") (term "0") (ifseqformula "12"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,0"))
                           (rule "leq_literals" (formula "11") (term "0,0"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "11"))
                           (rule "leq_literals" (formula "8") (term "0"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "allLeft" (formula "6") (inst "t=i_1"))
                           (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0") (ifseqformula "13"))
                           (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0"))
                           (rule "add_literals" (formula "6") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0,1,0"))
                           (rule "add_zero_right" (formula "6") (term "0,0,1,0"))
                           (rule "leq_literals" (formula "6") (term "0,1,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "12"))
                           (rule "qeq_literals" (formula "6") (term "0,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (opengoal " ")
                        )
                        (branch "CUT: k_0 >= 1 FALSE"
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "inEqSimp_geqRight" (formula "14"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "1"))
                           (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "9"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "applyEqRigid" (formula "12") (term "1,1,0,0") (ifseqformula "9"))
                           (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "9"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEqRigid" (formula "14") (term "1,0") (ifseqformula "8"))
                           (rule "times_zero_1" (formula "14") (term "0"))
                           (rule "inEqSimp_commuteGeq" (formula "14"))
                           (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "8"))
                           (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "12"))
                           (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
                           (rule "qeq_literals" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
                           (rule "inEqSimp_commuteGeq" (formula "1"))
                           (rule "applyEq" (formula "6") (term "1,1,0,0") (ifseqformula "8"))
                           (rule "applyEqRigid" (formula "1") (term "0,2,0") (ifseqformula "8"))
                           (rule "applyEq" (formula "9") (term "1") (ifseqformula "8"))
                           (rule "bsum_lower_equals_upper" (formula "12") (term "0"))
                           (rule "eqSymm" (formula "12"))
                           (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
                           (rule "leq_literals" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "inEqSimp_or_tautInEq0" (formula "10") (term "0,0"))
                           (rule "add_zero_right" (formula "10") (term "1,1,0,0"))
                           (rule "qeq_literals" (formula "10") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "inEqSimp_or_tautInEq0" (formula "6") (term "0,0"))
                           (rule "add_zero_right" (formula "6") (term "1,1,0,0"))
                           (rule "qeq_literals" (formula "6") (term "1,0,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (opengoal " ")
                        )
                     )
                  )
               )
               (branch "Null Reference (_a = null)"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Index Out of Bounds (_a != null, but k Out of Bounds!)"
                  (builtin "One Step Simplification" (formula "1") (newnames "x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0,x_0") (ifInst ""  (formula "17")))
                  (builtin "One Step Simplification" (formula "18"))
                  (opengoal " ")
               )
            )
            (branch "if x_4 false"
               (builtin "One Step Simplification" (formula "18"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Null Reference (_a = null)"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (_a = null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Use Case"
      (builtin "One Step Simplification" (formula "7"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "12"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "b_1"))
      (rule "eqSymm" (formula "11") (term "1,0,1"))
      (rule "eqSymm" (formula "12"))
      (rule "translateJavaMulInt" (formula "13") (term "1"))
      (rule "polySimp_mulComm0" (formula "13") (term "1"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1"))
      (rule "inEqSimp_gtToGeq" (formula "11") (term "0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "11") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "7"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "13"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1"))
      (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0"))
      (rule "mul_literals" (formula "11") (term "1,0"))
      (rule "selectOfAnon" (formula "9") (term "1,1,0"))
      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "14")))
      (rule "selectOfAnon" (formula "10") (term "0,1"))
      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")))
      (rule "selectOfAnon" (formula "11") (term "1,1,0,1"))
      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")))
      (rule "selectOfAnon" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")))
      (rule "selectOfAnon" (formula "13") (term "1"))
      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")))
      (rule "selectOfStore" (formula "9") (term "0,0,1,0,1,1,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "selectOfStore" (formula "10") (term "0,0,1,0,0,1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "elementOfUnion" (formula "11") (term "0,0,1,1,0,1"))
      (rule "elementOfSingleton" (formula "11") (term "0,0,0,1,1,0,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "elementOfSingleton" (formula "11") (term "0,0,1,1,0,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "selectOfAnon" (formula "12") (term "2,0"))
      (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "15")))
      (rule "elementOfUnion" (formula "13") (term "0,0,1"))
      (rule "elementOfSingleton" (formula "13") (term "1,0,0,1"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "elementOfSingleton" (formula "13") (term "0,0,1"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfAnon" (formula "9") (term "0,1,0"))
      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "15")))
      (rule "selectOfStore" (formula "10") (term "2,0,1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "castDel" (formula "10") (term "2,0,1"))
      (rule "selectOfAnon" (formula "11") (term "0,1,0,1"))
      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "15")))
      (rule "selectOfStore" (formula "12") (term "2,2,0"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "selectOfAnon" (formula "13") (term "0,0"))
      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")))
      (rule "selectOfStore" (formula "9") (term "0,0,1,0,1,1,0"))
      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "2")))
      (rule "elementOfUnion" (formula "10") (term "0,0,0,1"))
      (rule "elementOfSingleton" (formula "10") (term "1,0,0,0,1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "selectOfStore" (formula "11") (term "2,0,1,0,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "selectOfStore" (formula "12") (term "0,0,1,0,2,0"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "elementOfUnion" (formula "13") (term "0,0,0,0"))
      (rule "elementOfSingleton" (formula "13") (term "1,0,0,0,0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "selectOfStore" (formula "9") (term "2,1,1,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "castDel" (formula "9") (term "2,1,1,0"))
      (rule "elementOfUnion" (formula "11") (term "0,0,0,1,0,1"))
      (rule "elementOfSingleton" (formula "11") (term "1,0,0,0,1,0,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "elementOfSingleton" (formula "11") (term "0,0,0,1,0,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "ifthenelse_negated" (formula "11") (term "0,1,0,1"))
      (rule "selectOfStore" (formula "12") (term "2,2,0"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "selectOfStore" (formula "9") (term "2,0,1,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "selectOfStore" (formula "11") (term "1,0,1,0,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "elementOfUnion" (formula "12") (term "0,0,2,0"))
      (rule "elementOfSingleton" (formula "12") (term "1,0,0,2,0"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "elementOfSingleton" (formula "12") (term "0,0,2,0"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "ifthenelse_negated" (formula "12") (term "2,0"))
      (rule "selectOfStore" (formula "9") (term "2,0,1,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "selectOfStore" (formula "11") (term "0,0,0,1,0,1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "elementOfUnion" (formula "12") (term "0,0,1"))
      (rule "elementOfSingleton" (formula "12") (term "1,0,0,1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "elementOfSingleton" (formula "12") (term "0,0,1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "elementOfUnion" (formula "9") (term "0,1,1,0"))
      (rule "elementOfSingleton" (formula "9") (term "1,0,1,1,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "selectOfStore" (formula "11") (term "0,0,0,1,0,1"))
      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "4")))
      (rule "selectOfStore" (formula "12") (term "0,0,2,0"))
      (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "4")))
      (rule "elementOfUnion" (formula "9") (term "0,0,0,1,0"))
      (rule "elementOfSingleton" (formula "9") (term "1,0,0,0,1,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "elementOfSingleton" (formula "9") (term "0,0,0,1,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "ifthenelse_negated" (formula "9") (term "0,1,0"))
      (rule "selectOfStore" (formula "9") (term "0,0,0,1,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "selectOfStore" (formula "9") (term "0,0,0,1,0"))
      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "4")))
      (rule "nnf_imp2or" (formula "9") (term "0"))
      (rule "nnf_notAnd" (formula "9") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
      (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
      (rule "mul_literals" (formula "9") (term "1,0,0,0"))
      (rule "compound_less_equal_than_comparison_2" (formula "16") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "x"))
      (rule "assignment" (formula "16") (term "1"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_1"))
      (rule "assignment_read_length" (formula "16"))
      (branch "Normal Execution (_a != null)"
         (builtin "One Step Simplification" (formula "16"))
         (rule "arrayLengthIsAShort" (formula "5") (term "1,1,0,0"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "arrayLengthNotNegative" (formula "5") (term "1,1,0,0"))
         (rule "less_equal_than_comparison_new" (formula "17") (term "1"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "assignment" (formula "17") (term "1,1"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "assignment" (formula "17") (term "1,2"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "inEqSimp_commuteLeq" (formula "17") (term "0"))
         (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "9"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "methodCallEmpty" (formula "17") (term "1"))
         (rule "emptyModality" (formula "17") (term "1"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "closeTrue" (formula "17"))
      )
      (branch "Null Reference (_a = null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Show Axiom Satisfiability"
   (builtin "One Step Simplification" (formula "7"))
   (rule "closeTrue" (formula "7"))
)
)

}
