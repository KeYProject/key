\settings {
"#Proof-Settings-Config-File
#Thu Sep 10 14:48:26 CEST 2009
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[General]DnDDirectionSensitive=true
[General]StupidMode=true
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[Choice]DefaultChoices=assertions-assertions\:on , programRules-programRules\:Java , intRules-intRules\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\:disableStaticInitialisation , runtimeExceptions-runtimeExceptions\:ban
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[General]UseJML=true
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}


\javaSource "src";


\programVariables {
  MyClient self;
  Heap heapAtPre;
  java.lang.Exception exc;
}



\rules {
  Class_invariant_axiom {  
  \schemaVar \term Heap h;  
  \find ( java.lang.Object::<inv>(h, self) )
  \replacewith (
      {heap:=h} (!self.(MyClient::mc) = null
                 & java.lang.Object::<inv>(heap, self.(MyClient::mc))
       		 & disjoint(allFields(self), self.(MyClient::mc).(MyClass::footprint))) 
  )
  \heuristics ( simplify )
  };
}


\problem {
     wellFormed(heap)
   & !self = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & MyClient::exactInstance(self) = TRUE
   & java.lang.Object::<inv>(heap, self)
-> {heapAtPre:=heap}
     \[{
         exc=null;try {
           self.dependencyContracts()@MyClient;
         }  catch (java.lang.Throwable e) {
           exc=e;
         }
       }\] (  (   exc = null
               -> java.lang.Object::<inv>(heap, self))
            & exc = null
            & \forall java.lang.Object o;
                \forall Field f;
                  (  elementOf(o, f,
                               union(union(singleton(self,
                                                     MyClient::$mc),
                                           singleton(self, MyClient::$i)),
                                     freshLocs(heapAtPre)))
                   |   any::select(heap, o, f)
                     = any::select(heapAtPre, o, f)))

}
