/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Wed Nov 26 11:26:00 CET 2014
 */
package java.nio;

public abstract class DoubleBuffer extends java.nio.Buffer implements java.lang.Comparable
{
   final double[] hb;
   final int offset;
   boolean isReadOnly;


   /*@ requires true; ensures true; assignable \everything; */
   public static java.nio.DoubleBuffer allocate(int arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.nio.DoubleBuffer wrap(double[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.nio.DoubleBuffer wrap(double[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public abstract java.nio.DoubleBuffer slice();

   /*@ requires true; ensures true; assignable \everything; */
   public abstract java.nio.DoubleBuffer duplicate();

   /*@ requires true; ensures true; assignable \everything; */
   public abstract java.nio.DoubleBuffer asReadOnlyBuffer();

   /*@ requires true; ensures true; assignable \everything; */
   public abstract double get();

   /*@ requires true; ensures true; assignable \everything; */
   public abstract java.nio.DoubleBuffer put(double arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public abstract double get(int arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public abstract java.nio.DoubleBuffer put(int arg0, double arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public java.nio.DoubleBuffer get(double[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public java.nio.DoubleBuffer get(double[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public java.nio.DoubleBuffer put(java.nio.DoubleBuffer arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public java.nio.DoubleBuffer put(double[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public final java.nio.DoubleBuffer put(double[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public final boolean hasArray();

   /*@ requires true; ensures true; assignable \everything; */
   public final double[] array();

   /*@ requires true; ensures true; assignable \everything; */
   public final int arrayOffset();

   /*@ requires true; ensures true; assignable \everything; */
   public abstract java.nio.DoubleBuffer compact();

   /*@ requires true; ensures true; assignable \everything; */
   public abstract boolean isDirect();

   /*@ requires true; ensures true; assignable \everything; */
   public java.lang.String toString();

   /*@ requires true; ensures true; assignable \everything; */
   public int hashCode();

   /*@ requires true; ensures true; assignable \everything; */
   public boolean equals(java.lang.Object arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public int compareTo(java.nio.DoubleBuffer arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public abstract java.nio.ByteOrder order();

   /*@ requires true; ensures true; assignable \everything; */
   public java.lang.Object array();

   /*@ requires true; ensures true; assignable \everything; */
   public int compareTo(java.lang.Object arg0);
}
