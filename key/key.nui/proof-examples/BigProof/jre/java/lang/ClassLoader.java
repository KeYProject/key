/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Wed Nov 26 11:26:00 CET 2014
 */
package java.lang;

public abstract class ClassLoader extends java.lang.Object
{
   final java.lang.Object assertionLock;
   java.util.Map classAssertionStatus;


   /*@ requires true; ensures true; assignable \everything; */
   protected ClassLoader(java.lang.ClassLoader arg0);

   /*@ requires true; ensures true; assignable \everything; */
   protected ClassLoader();

   /*@ requires true; ensures true; assignable \everything; signals (java.lang.ClassNotFoundException e) true; */
   public java.lang.Class loadClass(java.lang.String arg0) throws java.lang.ClassNotFoundException;

   /*@ requires true; ensures true; assignable \everything; signals (java.lang.ClassNotFoundException e) true; */
   protected java.lang.Class loadClass(java.lang.String arg0, boolean arg1) throws java.lang.ClassNotFoundException;

   /*@ requires true; ensures true; assignable \everything; */
   protected java.lang.Object getClassLoadingLock(java.lang.String arg0);

   /*@ requires true; ensures true; assignable \everything; signals (java.lang.ClassNotFoundException e) true; */
   protected java.lang.Class findClass(java.lang.String arg0) throws java.lang.ClassNotFoundException;

   /*@ requires true; ensures true; assignable \everything; signals (java.lang.ClassFormatError e) true; */
   protected final java.lang.Class defineClass(byte[] arg0, int arg1, int arg2) throws java.lang.ClassFormatError;

   /*@ requires true; ensures true; assignable \everything; signals (java.lang.ClassFormatError e) true; */
   protected final java.lang.Class defineClass(java.lang.String arg0, byte[] arg1, int arg2, int arg3) throws java.lang.ClassFormatError;

   /*@ requires true; ensures true; assignable \everything; signals (java.lang.ClassFormatError e) true; */
   protected final java.lang.Class defineClass(java.lang.String arg0, byte[] arg1, int arg2, int arg3, java.security.ProtectionDomain arg4) throws java.lang.ClassFormatError;

   /*@ requires true; ensures true; assignable \everything; signals (java.lang.ClassFormatError e) true; */
   protected final java.lang.Class defineClass(java.lang.String arg0, java.nio.ByteBuffer arg1, java.security.ProtectionDomain arg2) throws java.lang.ClassFormatError;

   /*@ requires true; ensures true; assignable \everything; */
   protected final void resolveClass(java.lang.Class arg0);

   /*@ requires true; ensures true; assignable \everything; signals (java.lang.ClassNotFoundException e) true; */
   protected final java.lang.Class findSystemClass(java.lang.String arg0) throws java.lang.ClassNotFoundException;

   /*@ requires true; ensures true; assignable \everything; */
   protected final java.lang.Class findLoadedClass(java.lang.String arg0);

   /*@ requires true; ensures true; assignable \everything; */
   protected final void setSigners(java.lang.Class arg0, java.lang.Object[] arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public java.net.URL getResource(java.lang.String arg0);

   /*@ requires true; ensures true; assignable \everything; signals (java.io.IOException e) true; */
   public java.util.Enumeration getResources(java.lang.String arg0) throws java.io.IOException;

   /*@ requires true; ensures true; assignable \everything; */
   protected java.net.URL findResource(java.lang.String arg0);

   /*@ requires true; ensures true; assignable \everything; signals (java.io.IOException e) true; */
   protected java.util.Enumeration findResources(java.lang.String arg0) throws java.io.IOException;

   /*@ requires true; ensures true; assignable \everything; */
   protected static boolean registerAsParallelCapable();

   /*@ requires true; ensures true; assignable \everything; */
   public static java.net.URL getSystemResource(java.lang.String arg0);

   /*@ requires true; ensures true; assignable \everything; signals (java.io.IOException e) true; */
   public static java.util.Enumeration getSystemResources(java.lang.String arg0) throws java.io.IOException;

   /*@ requires true; ensures true; assignable \everything; */
   public java.io.InputStream getResourceAsStream(java.lang.String arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.io.InputStream getSystemResourceAsStream(java.lang.String arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public final java.lang.ClassLoader getParent();

   /*@ requires true; ensures true; assignable \everything; */
   public static java.lang.ClassLoader getSystemClassLoader();

   /*@ requires true; ensures true; assignable \everything; signals (java.lang.IllegalArgumentException e) true; */
   protected java.lang.Package definePackage(java.lang.String arg0, java.lang.String arg1, java.lang.String arg2, java.lang.String arg3, java.lang.String arg4, java.lang.String arg5, java.lang.String arg6, java.net.URL arg7) throws java.lang.IllegalArgumentException;

   /*@ requires true; ensures true; assignable \everything; */
   protected java.lang.Package getPackage(java.lang.String arg0);

   /*@ requires true; ensures true; assignable \everything; */
   protected java.lang.Package[] getPackages();

   /*@ requires true; ensures true; assignable \everything; */
   protected java.lang.String findLibrary(java.lang.String arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public void setDefaultAssertionStatus(boolean arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public void setPackageAssertionStatus(java.lang.String arg0, boolean arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public void setClassAssertionStatus(java.lang.String arg0, boolean arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public void clearAssertionStatus();
}
