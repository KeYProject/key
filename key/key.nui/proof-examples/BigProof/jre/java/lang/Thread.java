/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Wed Nov 26 11:26:00 CET 2014
 */
package java.lang;

public class Thread extends java.lang.Object implements java.lang.Runnable
{
   java.lang.ThreadLocal$ThreadLocalMap threadLocals;
   java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals;
   java.lang.Object parkBlocker;
   public final static int MIN_PRIORITY = 1;
   public final static int NORM_PRIORITY = 5;
   public final static int MAX_PRIORITY = 10;


   /*@ requires true; ensures true; assignable \everything; */
   public static java.lang.Thread currentThread();

   /*@ requires true; ensures true; assignable \everything; */
   public static void yield();

   /*@ requires true; ensures true; assignable \everything; signals (java.lang.InterruptedException e) true; */
   public static void sleep(long arg0) throws java.lang.InterruptedException;

   /*@ requires true; ensures true; assignable \everything; signals (java.lang.InterruptedException e) true; */
   public static void sleep(long arg0, int arg1) throws java.lang.InterruptedException;

   /*@ requires true; ensures true; assignable \everything; signals (java.lang.CloneNotSupportedException e) true; */
   protected java.lang.Object clone() throws java.lang.CloneNotSupportedException;

   /*@ requires true; ensures true; assignable \everything; */
   public Thread();

   /*@ requires true; ensures true; assignable \everything; */
   public Thread(java.lang.Runnable arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public Thread(java.lang.ThreadGroup arg0, java.lang.Runnable arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public Thread(java.lang.String arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public Thread(java.lang.ThreadGroup arg0, java.lang.String arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public Thread(java.lang.Runnable arg0, java.lang.String arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public Thread(java.lang.ThreadGroup arg0, java.lang.Runnable arg1, java.lang.String arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public Thread(java.lang.ThreadGroup arg0, java.lang.Runnable arg1, java.lang.String arg2, long arg3);

   /*@ requires true; ensures true; assignable \everything; */
   public void start();

   /*@ requires true; ensures true; assignable \everything; */
   public void run();

   /*@ requires true; ensures true; assignable \everything; */
   public final void stop();

   /*@ requires true; ensures true; assignable \everything; */
   public final void stop(java.lang.Throwable arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public void interrupt();

   /*@ requires true; ensures true; assignable \everything; */
   public static boolean interrupted();

   /*@ requires true; ensures true; assignable \everything; */
   public boolean isInterrupted();

   /*@ requires true; ensures true; assignable \everything; */
   public void destroy();

   /*@ requires true; ensures true; assignable \everything; */
   public final boolean isAlive();

   /*@ requires true; ensures true; assignable \everything; */
   public final void suspend();

   /*@ requires true; ensures true; assignable \everything; */
   public final void resume();

   /*@ requires true; ensures true; assignable \everything; */
   public final void setPriority(int arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public final int getPriority();

   /*@ requires true; ensures true; assignable \everything; */
   public final void setName(java.lang.String arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public final java.lang.String getName();

   /*@ requires true; ensures true; assignable \everything; */
   public final java.lang.ThreadGroup getThreadGroup();

   /*@ requires true; ensures true; assignable \everything; */
   public static int activeCount();

   /*@ requires true; ensures true; assignable \everything; */
   public static int enumerate(java.lang.Thread[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public int countStackFrames();

   /*@ requires true; ensures true; assignable \everything; signals (java.lang.InterruptedException e) true; */
   public final void join(long arg0) throws java.lang.InterruptedException;

   /*@ requires true; ensures true; assignable \everything; signals (java.lang.InterruptedException e) true; */
   public final void join(long arg0, int arg1) throws java.lang.InterruptedException;

   /*@ requires true; ensures true; assignable \everything; signals (java.lang.InterruptedException e) true; */
   public final void join() throws java.lang.InterruptedException;

   /*@ requires true; ensures true; assignable \everything; */
   public static void dumpStack();

   /*@ requires true; ensures true; assignable \everything; */
   public final void setDaemon(boolean arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public final boolean isDaemon();

   /*@ requires true; ensures true; assignable \everything; */
   public final void checkAccess();

   /*@ requires true; ensures true; assignable \everything; */
   public java.lang.String toString();

   /*@ requires true; ensures true; assignable \everything; */
   public java.lang.ClassLoader getContextClassLoader();

   /*@ requires true; ensures true; assignable \everything; */
   public void setContextClassLoader(java.lang.ClassLoader arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static boolean holdsLock(java.lang.Object arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public java.lang.StackTraceElement[] getStackTrace();

   /*@ requires true; ensures true; assignable \everything; */
   public static java.util.Map getAllStackTraces();

   /*@ requires true; ensures true; assignable \everything; */
   public long getId();

   /*@ requires true; ensures true; assignable \everything; */
   public java.lang.Thread$State getState();

   /*@ requires true; ensures true; assignable \everything; */
   public static void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler();

   /*@ requires true; ensures true; assignable \everything; */
   public java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler();

   /*@ requires true; ensures true; assignable \everything; */
   public void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler arg0);
}
