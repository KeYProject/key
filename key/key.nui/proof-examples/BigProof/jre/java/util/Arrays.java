/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Wed Nov 26 11:26:00 CET 2014
 */
package java.util;

public class Arrays extends java.lang.Object
{
   final static boolean $assertionsDisabled;


   /*@ requires true; ensures true; assignable \everything; */
   public static void sort(int[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static void sort(int[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static void sort(long[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static void sort(long[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static void sort(short[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static void sort(short[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static void sort(char[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static void sort(char[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static void sort(byte[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static void sort(byte[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static void sort(float[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static void sort(float[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static void sort(double[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static void sort(double[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static void sort(java.lang.Object[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static void sort(java.lang.Object[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static void sort(java.lang.Object[] arg0, java.util.Comparator arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static void sort(java.lang.Object[] arg0, int arg1, int arg2, java.util.Comparator arg3);

   /*@ requires true; ensures true; assignable \everything; */
   public static int binarySearch(long[] arg0, long arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static int binarySearch(long[] arg0, int arg1, int arg2, long arg3);

   /*@ requires true; ensures true; assignable \everything; */
   public static int binarySearch(int[] arg0, int arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static int binarySearch(int[] arg0, int arg1, int arg2, int arg3);

   /*@ requires true; ensures true; assignable \everything; */
   public static int binarySearch(short[] arg0, short arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static int binarySearch(short[] arg0, int arg1, int arg2, short arg3);

   /*@ requires true; ensures true; assignable \everything; */
   public static int binarySearch(char[] arg0, char arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static int binarySearch(char[] arg0, int arg1, int arg2, char arg3);

   /*@ requires true; ensures true; assignable \everything; */
   public static int binarySearch(byte[] arg0, byte arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static int binarySearch(byte[] arg0, int arg1, int arg2, byte arg3);

   /*@ requires true; ensures true; assignable \everything; */
   public static int binarySearch(double[] arg0, double arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static int binarySearch(double[] arg0, int arg1, int arg2, double arg3);

   /*@ requires true; ensures true; assignable \everything; */
   public static int binarySearch(float[] arg0, float arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static int binarySearch(float[] arg0, int arg1, int arg2, float arg3);

   /*@ requires true; ensures true; assignable \everything; */
   public static int binarySearch(java.lang.Object[] arg0, java.lang.Object arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static int binarySearch(java.lang.Object[] arg0, int arg1, int arg2, java.lang.Object arg3);

   /*@ requires true; ensures true; assignable \everything; */
   public static int binarySearch(java.lang.Object[] arg0, java.lang.Object arg1, java.util.Comparator arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static int binarySearch(java.lang.Object[] arg0, int arg1, int arg2, java.lang.Object arg3, java.util.Comparator arg4);

   /*@ requires true; ensures true; assignable \everything; */
   public static boolean equals(long[] arg0, long[] arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static boolean equals(int[] arg0, int[] arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static boolean equals(short[] arg0, short[] arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static boolean equals(char[] arg0, char[] arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static boolean equals(byte[] arg0, byte[] arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static boolean equals(boolean[] arg0, boolean[] arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static boolean equals(double[] arg0, double[] arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static boolean equals(float[] arg0, float[] arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static boolean equals(java.lang.Object[] arg0, java.lang.Object[] arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static void fill(long[] arg0, long arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static void fill(long[] arg0, int arg1, int arg2, long arg3);

   /*@ requires true; ensures true; assignable \everything; */
   public static void fill(int[] arg0, int arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static void fill(int[] arg0, int arg1, int arg2, int arg3);

   /*@ requires true; ensures true; assignable \everything; */
   public static void fill(short[] arg0, short arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static void fill(short[] arg0, int arg1, int arg2, short arg3);

   /*@ requires true; ensures true; assignable \everything; */
   public static void fill(char[] arg0, char arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static void fill(char[] arg0, int arg1, int arg2, char arg3);

   /*@ requires true; ensures true; assignable \everything; */
   public static void fill(byte[] arg0, byte arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static void fill(byte[] arg0, int arg1, int arg2, byte arg3);

   /*@ requires true; ensures true; assignable \everything; */
   public static void fill(boolean[] arg0, boolean arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static void fill(boolean[] arg0, int arg1, int arg2, boolean arg3);

   /*@ requires true; ensures true; assignable \everything; */
   public static void fill(double[] arg0, double arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static void fill(double[] arg0, int arg1, int arg2, double arg3);

   /*@ requires true; ensures true; assignable \everything; */
   public static void fill(float[] arg0, float arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static void fill(float[] arg0, int arg1, int arg2, float arg3);

   /*@ requires true; ensures true; assignable \everything; */
   public static void fill(java.lang.Object[] arg0, java.lang.Object arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static void fill(java.lang.Object[] arg0, int arg1, int arg2, java.lang.Object arg3);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.lang.Object[] copyOf(java.lang.Object[] arg0, int arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.lang.Object[] copyOf(java.lang.Object[] arg0, int arg1, java.lang.Class arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static byte[] copyOf(byte[] arg0, int arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static short[] copyOf(short[] arg0, int arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static int[] copyOf(int[] arg0, int arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static long[] copyOf(long[] arg0, int arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static char[] copyOf(char[] arg0, int arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static float[] copyOf(float[] arg0, int arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static double[] copyOf(double[] arg0, int arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static boolean[] copyOf(boolean[] arg0, int arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.lang.Object[] copyOfRange(java.lang.Object[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.lang.Object[] copyOfRange(java.lang.Object[] arg0, int arg1, int arg2, java.lang.Class arg3);

   /*@ requires true; ensures true; assignable \everything; */
   public static byte[] copyOfRange(byte[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static short[] copyOfRange(short[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static int[] copyOfRange(int[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static long[] copyOfRange(long[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static char[] copyOfRange(char[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static float[] copyOfRange(float[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static double[] copyOfRange(double[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static boolean[] copyOfRange(boolean[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.util.List asList(java.lang.Object[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static int hashCode(long[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static int hashCode(int[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static int hashCode(short[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static int hashCode(char[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static int hashCode(byte[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static int hashCode(boolean[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static int hashCode(float[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static int hashCode(double[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static int hashCode(java.lang.Object[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static int deepHashCode(java.lang.Object[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static boolean deepEquals(java.lang.Object[] arg0, java.lang.Object[] arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.lang.String toString(long[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.lang.String toString(int[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.lang.String toString(short[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.lang.String toString(char[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.lang.String toString(byte[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.lang.String toString(boolean[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.lang.String toString(float[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.lang.String toString(double[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.lang.String toString(java.lang.Object[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.lang.String deepToString(java.lang.Object[] arg0);
}
