\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Dec 10 15:26:12 CET 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=\\#begboolean_equal_2\\#end,\\#begboolean_not_equal_1\\#end,\\#begboolean_not_equal_2\\#end,\\#begtrue_to_not_false\\#end,\\#begfalse_to_not_true\\#end,\\#begboolean_true_commute\\#end,\\#begboolean_false_commute\\#end,\\#begapply_eq_boolean\\#end,\\#begapply_eq_boolean_2\\#end,\\#begapply_eq_boolean_rigid\\#end,\\#begapply_eq_boolean_rigid_2\\#end,\\#begexpand_inByte\\#end,\\#begexpand_inChar\\#end,\\#begexpand_inShort\\#end,\\#begexpand_inInt\\#end,\\#begexpand_inLong\\#end,\\#begreplace_byte_MAX\\#end,\\#begreplace_byte_MIN\\#end,\\#begreplace_char_MAX\\#end,\\#begreplace_char_MIN\\#end,\\#begreplace_short_MAX\\#end,\\#begreplace_short_MIN\\#end,\\#begreplace_int_MAX\\#end,\\#begreplace_int_MIN\\#end,\\#begreplace_long_MAX\\#end,\\#begreplace_long_MIN\\#end,\\#begreplace_byte_RANGE\\#end,\\#begreplace_byte_HALFRANGE\\#end,\\#begreplace_short_RANGE\\#end,\\#begreplace_short_HALFRANGE\\#end,\\#begreplace_char_RANGE\\#end,\\#begreplace_int_RANGE\\#end,\\#begreplace_int_HALFRANGE\\#end,\\#begreplace_long_RANGE\\#end,\\#begreplace_long_HALFRANGE\\#end,\\#begtranslateJavaUnaryMinusInt\\#end,\\#begtranslateJavaUnaryMinusLong\\#end,\\#begtranslateJavaBitwiseNegation\\#end,\\#begtranslateJavaAddInt\\#end,\\#begtranslateJavaAddLong\\#end,\\#begtranslateJavaSubInt\\#end,\\#begtranslateJavaSubLong\\#end,\\#begtranslateJavaMulInt\\#end,\\#begtranslateJavaMulLong\\#end,\\#begtranslateJavaMod\\#end,\\#begtranslateJavaDivInt\\#end,\\#begtranslateJavaDivLong\\#end,\\#begtranslateJavaCastByte\\#end,\\#begtranslateJavaCastShort\\#end,\\#begtranslateJavaCastInt\\#end,\\#begtranslateJavaCastLong\\#end,\\#begtranslateJavaCastChar\\#end,\\#begtranslateJavaShiftRightInt\\#end,\\#begtranslateJavaShiftRightLong\\#end,\\#begtranslateJavaShiftLeftInt\\#end,\\#begtranslateJavaShiftLeftLong\\#end,\\#begtranslateJavaUnsignedShiftRightInt\\#end,\\#begtranslateJavaUnsignedShiftRightLong\\#end,\\#begtranslateJavaBitwiseOrInt\\#end,\\#begtranslateJavaBitwiseOrLong\\#end,\\#begtranslateJavaBitwiseAndInt\\#end,\\#begtranslateJavaBitwiseAndLong\\#end,\\#begtranslateJavaBitwiseXOrInt\\#end,\\#begtranslateJavaBitwiseXOrLong\\#end,\\#begselectOfStore\\#end,\\#begselectOfCreate\\#end,\\#begselectOfAnon\\#end,\\#begselectOfMemset\\#end,\\#begonlyCreatedObjectsAreReferenced\\#end,\\#begonlyCreatedObjectsAreInLocSets\\#end,\\#begonlyCreatedObjectsAreInLocSetsEQ\\#end,\\#begarrayLengthNotNegative\\#end,\\#begwellFormedStoreObject\\#end,\\#begwellFormedStoreLocSet\\#end,\\#begwellFormedStorePrimitive\\#end,\\#begwellFormedCreate\\#end,\\#begwellFormedAnon\\#end,\\#begwellFormedMemsetObject\\#end,\\#begwellFormedMemsetLocSet\\#end,\\#begwellFormedMemsetPrimitive\\#end,\\#begselectOfStoreEQ\\#end,\\#begselectOfCreateEQ\\#end,\\#begselectOfAnonEQ\\#end,\\#begselectOfMemsetEQ\\#end,\\#begmemsetEmpty\\#end,\\#begselectCreatedOfAnonEQ\\#end,\\#begwellFormedStoreObjectEQ\\#end,\\#begwellFormedStoreLocSetEQ\\#end,\\#begwellFormedStorePrimitiveEQ\\#end,\\#begwellFormedAnonEQ\\#end,\\#begwellFormedMemsetObjectEQ\\#end,\\#begwellFormedMemsetPrimitiveEQ\\#end
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=7000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:off , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , permissions-permissions\\:off , moreSeqRules-moreSeqRules\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Thu Dec 10 15:26:12 CET 2015
name=Gcd[Gcd\\:\\:gcd(int,int)].JML normal_behavior operation contract.0
contract=Gcd[Gcd\\:\\:gcd(int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "dscheurer" ) (keyVersion "95467a458722ff3a384af8dde73de2b9f173c436"))

(autoModeTime "1367847564")

(branch "dummy ID"
(rule "elementOfAllLocs" (formula "1") (term "0,0,0,0,1,0,1,1") (newnames "a,b,result,exc,heapAtPre,o,f"))
(rule "concrete_or_1" (formula "1") (term "0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,1,0,1,1"))
(rule "expand_inInt" (formula "1") (term "1,0,0,1,1,0,0,0,1,1"))
(rule "expand_inInt" (formula "1") (term "0,1,0,0"))
(rule "expand_inInt" (formula "1") (term "1,1,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,1,1,0,0,0,1,1"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,1,1,0,0,0,1,1"))
(rule "replace_int_MAX" (formula "1") (term "1,0,0,1,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,0,1,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,1,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,1,0,0"))
(rule "simplifyUpdate2" (formula "1") (term "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "2"))
(rule "translateJavaMod" (formula "7") (term "0,1,0,1,1,0,0,0,1"))
(rule "translateJavaMod" (formula "7") (term "0,0,0,1,0,0,0,1"))
(rule "translateJavaMod" (formula "7") (term "0,1,0,1,0,0,0,1"))
(rule "translateJavaMod" (formula "7") (term "0,1,0,0,0,0,1,1,0,0,0,1"))
(rule "translateJavaMod" (formula "7") (term "0,1,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_gtToGeq" (formula "7") (term "0,0,0,0,0,1,1,0,0,0,1"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,0,0,1,1,0,0,0,1"))
(rule "add_zero_right" (formula "7") (term "0,0,0,0,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "inEqSimp_commuteLeq" (formula "3"))
(rule "assignment" (formula "7") (term "1"))
(rule "sequentialToParallel2" (formula "7"))
(rule "simplifyUpdate3" (formula "7") (term "1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0,0,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,0,0,0,0,1,1,0,0,0,1"))
(rule "all_unused" (formula "7") (term "1,0,1"))
(rule "all_unused" (formula "7") (term "1,0,1"))
(rule "concrete_and_3" (formula "7") (term "0,1"))
(rule "nnf_imp2or" (formula "7") (term "0,1,1,0,0,1"))
(rule "nnf_notAnd" (formula "7") (term "0,0,1,1,0,0,1"))
(rule "nnf_notAnd" (formula "7") (term "0,0,0,1,1,0,0,1"))
(rule "nnf_notAnd" (formula "7") (term "1,0,0,1,1,0,0,1"))
(rule "inEqSimp_notLeq" (formula "7") (term "0,1,0,0,1,1,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,0,0,1,0,0,1,1,0,0,1"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,1,0,0,1,1,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,1,0,0,1,1,0,0,1"))
(rule "inEqSimp_notGeq" (formula "7") (term "1,1,0,0,1,1,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,0,1,1,0,0,1,1,0,0,1"))
(rule "add_literals" (formula "7") (term "0,0,1,1,0,0,1,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,1,0,0,1,1,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,1,1,0,0,1,1,0,0,1"))
(rule "nnf_notAnd" (formula "7") (term "0,0,0,0,1,1,0,0,1"))
(rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,0,0,1,1,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,0,0,0,0,0,0,1,1,0,0,1"))
(rule "add_literals" (formula "7") (term "0,0,0,0,0,0,0,1,1,0,0,1"))
(rule "add_zero_left" (formula "7") (term "0,0,0,0,0,0,1,1,0,0,1"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_gcd,savedHeapBefore_gcd"))
(rule "simplifyUpdate2" (formula "7") (term "1"))
(rule "ifUnfold" (formula "7") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x"))
(rule "less_than_comparison_simple" (formula "7") (term "1"))
(rule "sequentialToParallel2" (formula "7"))
(rule "simplifyUpdate3" (formula "7") (term "1,0"))
(rule "applyOnElementary" (formula "7") (term "1,0"))
(rule "applyOnRigidTerm" (formula "7") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "7") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "7") (term "2,0,1,0"))
(rule "applyOnRigidFormula" (formula "7") (term "0,0,1,0"))
(rule "applyOnPV" (formula "7") (term "0,0,0,1,0"))
(rule "simplifyUpdate1" (formula "7") (term "1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,0"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,1,0"))
(rule "add_zero_right" (formula "7") (term "0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,1,0"))
(rule "mul_literals" (formula "7") (term "1,0,0,1,0"))
(rule "ifSplit" (formula "7"))
(branch "if x true"
   (rule "simplifyUpdate2" (formula "1"))
   (rule "simplifyUpdate2" (formula "8"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "applyOnPV" (formula "1") (term "0"))
   (rule "simplifyUpdate1" (formula "1") (term "1"))
   (rule "ifthenelse_concrete3" (formula "1"))
   (rule "boolean_not_equal_2" (formula "1") (term "1"))
   (rule "concrete_or_4" (formula "1"))
   (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "1"))
   (rule "leq_literals" (formula "3") (term "0"))
   (rule "concrete_or_1" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "unaryMinusInt" (formula "7") (term "1"))
   (rule "translateJavaUnaryMinusInt" (formula "7") (term "0,0,1"))
   (rule "sequentialToParallel2" (formula "7"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "simplifyUpdate3" (formula "7") (term "1,0"))
   (rule "applyOnElementary" (formula "7") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "7") (term "0,1,0"))
   (rule "applyOnPV" (formula "7") (term "0,0,1,0"))
   (rule "blockEmpty" (formula "7") (term "1"))
   (builtin "JoinRule" (formula "7") (newnames "_a_0") (joinProc "JoinByIfThenElseAntecedent") (nrJoinPartners "1") (joinId "114") (distFormula "null"))
   (rule "ifUnfold" (formula "9") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_1"))
   (rule "less_than_comparison_simple" (formula "9") (term "1"))
   (rule "sequentialToParallel2" (formula "9"))
   (rule "simplifyUpdate3" (formula "9") (term "1,0"))
   (rule "applyOnElementary" (formula "9") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0"))
   (rule "applyOnRigidFormula" (formula "9") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "9") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,1,0"))
   (rule "mul_literals" (formula "9") (term "1,0,0,1,0"))
   (rule "ifSplit" (formula "9"))
   (branch "if x_1 true"
      (rule "simplifyUpdate2" (formula "10"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "ifthenelse_concrete3" (formula "1"))
      (rule "boolean_not_equal_2" (formula "1") (term "1"))
      (rule "concrete_or_4" (formula "1"))
      (rule "unaryMinusInt" (formula "10") (term "1"))
      (rule "translateJavaUnaryMinusInt" (formula "10") (term "0,0,1"))
      (rule "sequentialToParallel2" (formula "10"))
      (rule "simplifyUpdate2" (formula "10"))
      (rule "simplifyUpdate3" (formula "10") (term "1,0"))
      (rule "applyOnElementary" (formula "10") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
      (rule "applyOnPV" (formula "10") (term "0,0,1,0"))
      (rule "blockEmpty" (formula "10") (term "1"))
      (builtin "JoinRule" (formula "10") (newnames "_b_0") (joinProc "JoinByIfThenElseAntecedent") (nrJoinPartners "1") (joinId "167") (distFormula "null"))
      (rule "variableDeclarationMult" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "big"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "small"))
      (rule "blockEmpty" (formula "11") (term "1"))
      (rule "ifElseUnfold" (formula "11") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_2"))
      (rule "greater_than_comparison_simple" (formula "11") (term "1"))
      (rule "sequentialToParallel2" (formula "11"))
      (rule "simplifyUpdate3" (formula "11") (term "1,0"))
      (rule "applyOnElementary" (formula "11") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "11") (term "1,0,1,0"))
      (rule "simplifyUpdate1" (formula "11") (term "2,0,1,0"))
      (rule "applyOnRigidFormula" (formula "11") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "11") (term "0,0,0,1,0"))
      (rule "simplifyUpdate1" (formula "11") (term "1,0,0,1,0"))
      (rule "applyOnPV" (formula "11") (term "0,0,0,1,0"))
      (rule "applyOnPV" (formula "11") (term "1,0,0,1,0"))
      (rule "inEqSimp_gtToGeq" (formula "11") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0"))
      (rule "ifElseSplit" (formula "11"))
      (branch "if x_2 true"
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "12"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "ifthenelse_concrete3" (formula "1"))
         (rule "boolean_not_equal_2" (formula "1") (term "1"))
         (rule "concrete_or_4" (formula "1"))
         (rule "assignment" (formula "12") (term "1"))
         (rule "sequentialToParallel2" (formula "12"))
         (rule "simplifyUpdate2" (formula "12"))
         (rule "simplifyUpdate3" (formula "12") (term "1,0"))
         (rule "applyOnElementary" (formula "12") (term "1,0"))
         (rule "applyOnPV" (formula "12") (term "0,1,0"))
         (rule "assignment" (formula "12") (term "1"))
         (rule "sequentialToParallel2" (formula "12"))
         (rule "simplifyUpdate2" (formula "12"))
         (rule "simplifyUpdate3" (formula "12") (term "1,0"))
         (rule "applyOnElementary" (formula "12") (term "1,0"))
         (rule "applyOnPV" (formula "12") (term "0,1,0"))
         (rule "blockEmpty" (formula "12") (term "1"))
         (rule "returnUnfold" (formula "12") (term "1") (inst "#v0=x"))
         (rule "variableDeclarationAssign" (formula "12") (term "1"))
         (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_4"))
         (builtin "Use Operation Contract" (formula "12") (newnames "heapBefore_gcdHelp_0,result_1,exc_1,heapAfter_gcdHelp_0,anon_heap_gcdHelp_0") (contract "Gcd[Gcd::gcdHelp(int,int)].JML normal_behavior operation contract.0"))
         (branch "Post (gcdHelp)"
            (rule "simplifyUpdate2" (formula "14"))
            (rule "expand_inInt" (formula "13") (term "1,0,0,1,1,0,1,1,1,1,1"))
            (rule "expand_inInt" (formula "13") (term "1,0,1,1,1,1"))
            (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,1,1,0,1,1,1,1,1"))
            (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,1,1,0,1,1,1,1,1"))
            (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,1,1,1,1"))
            (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,1,1,1,1"))
            (rule "simplifyUpdate2" (formula "13"))
            (rule "simplifyUpdate2" (formula "13") (term "1"))
            (rule "simplifyUpdate2" (formula "13") (term "1,1"))
            (rule "andLeft" (formula "13"))
            (rule "simplifyUpdate2" (formula "13"))
            (rule "andLeft" (formula "14"))
            (rule "simplifyUpdate2" (formula "14"))
            (rule "andLeft" (formula "15"))
            (rule "simplifyUpdate2" (formula "16"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "translateJavaMod" (formula "16") (term "0,1,0,1,1"))
            (rule "translateJavaMod" (formula "16") (term "0,0,0,1,1"))
            (rule "translateJavaMod" (formula "16") (term "0,1,0,0,0,0,1,1,1"))
            (rule "translateJavaMod" (formula "16") (term "0,1,0,0,0,1,1,1"))
            (rule "translateJavaMod" (formula "16") (term "0,1,0,1,1,1"))
            (rule "sequentialToParallel2" (formula "18"))
            (rule "simplifyUpdate3" (formula "18") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "16"))
            (rule "simplifyUpdate2" (formula "16") (term "0"))
            (rule "applyOnRigidFormula" (formula "16") (term "1"))
            (rule "applyOnRigidFormula" (formula "16") (term "0"))
            (rule "applyOnRigidFormula" (formula "16") (term "0,1"))
            (rule "simplifyUpdate2" (formula "16") (term "0,0,1"))
            (rule "simplifyUpdate2" (formula "16") (term "1,0,1"))
            (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "16") (term "0,0"))
            (rule "applyOnPV" (formula "16") (term "0,0,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,0"))
            (rule "applyOnRigidFormula" (formula "16") (term "0,0,1"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1"))
            (rule "applyOnRigidFormula" (formula "16") (term "1,0,1"))
            (rule "simplifyUpdate1" (formula "16") (term "1,1,0,1"))
            (rule "applyOnRigidFormula" (formula "16") (term "0,1,1"))
            (rule "simplifyUpdate2" (formula "16") (term "1,0,1,1"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,0,0,1"))
            (rule "applyOnPV" (formula "16") (term "0,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,0,0,1"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,1,0,1"))
            (rule "applyOnPV" (formula "16") (term "0,0,1,0,1"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0,1"))
            (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,1"))
            (rule "simplifyUpdate2" (formula "16") (term "1,0,0,1,1"))
            (rule "applyOnRigidFormula" (formula "16") (term "0,0,0,1,1"))
            (rule "simplifyUpdate2" (formula "16") (term "1,0,0,0,1,1"))
            (rule "simplifyUpdate2" (formula "16") (term "0,0,0,0,1,1"))
            (rule "applyOnRigidFormula" (formula "16") (term "1,0,0,0,1,1"))
            (rule "simplifyUpdate1" (formula "16") (term "1,1,0,0,0,1,1"))
            (rule "applyOnRigidFormula" (formula "16") (term "0,0,0,0,1,1"))
            (rule "simplifyUpdate2" (formula "16") (term "0,0,0,0,0,1,1"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,1,0,0,0,1,1"))
            (rule "applyOnPV" (formula "16") (term "0,0,1,0,0,0,1,1"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0,0,0,1,1"))
            (rule "applyOnRigidFormula" (formula "16") (term "1,0,0,0,0,1,1"))
            (rule "simplifyUpdate1" (formula "16") (term "1,1,0,0,0,0,1,1"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,1,0,0,0,0,1,1"))
            (rule "applyOnPV" (formula "16") (term "0,0,1,0,0,0,0,1,1"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0,0,0,0,1,1"))
            (rule "inEqSimp_gtToGeq" (formula "16") (term "0,0,0,0,0,1,1"))
            (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0,0,1,1"))
            (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0,0,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "15"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "1,1,0,0,1,1"))
            (rule "assignment" (formula "18") (term "1"))
            (rule "sequentialToParallel2" (formula "18"))
            (rule "simplifyUpdate3" (formula "18") (term "1,0"))
            (rule "jmod_axiom" (formula "16") (term "0,1,0,1,1"))
            (rule "polySimp_mulComm1" (formula "16") (term "1,0,1,0,1,1"))
            (rule "jmod_axiom" (formula "16") (term "0,0,0,1"))
            (rule "polySimp_mulComm1" (formula "16") (term "1,0,0,0,1"))
            (rule "jmod_axiom" (formula "16") (term "0,1,0,1"))
            (rule "polySimp_mulComm1" (formula "16") (term "1,0,1,0,1"))
            (rule "jmod_axiom" (formula "16") (term "0,1,0,0,0,1,1"))
            (rule "polySimp_mulComm1" (formula "16") (term "1,0,1,0,0,0,1,1"))
            (rule "jmod_axiom" (formula "16") (term "0,1,0,0,0,0,1,1"))
            (rule "polySimp_mulComm1" (formula "16") (term "1,0,1,0,0,0,0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "16") (term "1,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,1,1"))
            (rule "polySimp_elimOne" (formula "16") (term "0,1,0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "16") (term "0,0,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1"))
            (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "16") (term "1,0,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,1"))
            (rule "polySimp_elimOne" (formula "16") (term "0,1,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "16") (term "1,0,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "16") (term "1,0,0,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0,0,1,1"))
            (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,1,1"))
            (rule "nnf_imp2or" (formula "16") (term "0,1,1"))
            (rule "nnf_notAnd" (formula "16") (term "0,0,1,1"))
            (rule "nnf_notAnd" (formula "16") (term "0,0,0,1,1"))
            (rule "nnf_notAnd" (formula "16") (term "1,0,0,1,1"))
            (rule "inEqSimp_notLeq" (formula "16") (term "0,1,0,0,1,1"))
            (rule "mul_literals" (formula "16") (term "1,0,0,0,1,0,0,1,1"))
            (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,1,0,0,1,1"))
            (rule "mul_literals" (formula "16") (term "1,0,1,0,0,1,1"))
            (rule "inEqSimp_notGeq" (formula "16") (term "1,1,0,0,1,1"))
            (rule "mul_literals" (formula "16") (term "1,0,0,1,1,0,0,1,1"))
            (rule "add_literals" (formula "16") (term "0,0,1,1,0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,1,0,0,1,1"))
            (rule "mul_literals" (formula "16") (term "1,1,1,0,0,1,1"))
            (rule "nnf_notAnd" (formula "16") (term "0,0,0,0,1,1"))
            (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0,0,1,1"))
            (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,0,0,1,1"))
            (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0,1,1"))
            (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0,1,1"))
            (rule "commute_or_2" (formula "16") (term "0,0,1,1"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,1,1"))
            (rule "methodCallReturn" (formula "18") (term "1"))
            (rule "assignment" (formula "18") (term "1"))
            (rule "sequentialToParallel2" (formula "18"))
            (rule "simplifyUpdate2" (formula "18"))
            (rule "simplifyUpdate3" (formula "18") (term "1,0"))
            (rule "applyOnElementary" (formula "18") (term "1,0"))
            (rule "applyOnPV" (formula "18") (term "0,1,0"))
            (rule "commute_or" (formula "16") (term "1,0,0,0,0,1,1"))
            (rule "shift_paren_or" (formula "16") (term "0,0,0,0,1,1"))
            (rule "commute_or" (formula "16") (term "0,0,0,0,0,1,1"))
            (rule "inEqSimp_or_subsumption0" (formula "16") (term "0,0,0,0,0,1,1"))
            (rule "qeq_literals" (formula "16") (term "0,0,0,0,0,0,0,1,1"))
            (rule "concrete_and_2" (formula "16") (term "0,0,0,0,0,0,1,1"))
            (rule "concrete_or_2" (formula "16") (term "0,0,0,0,0,1,1"))
            (rule "methodCallEmpty" (formula "18") (term "1"))
            (rule "tryEmpty" (formula "18") (term "1"))
            (rule "simplifyUpdate2" (formula "18"))
            (rule "emptyModality" (formula "18") (term "1"))
            (opengoal " ")
         )
         (branch "Exceptional Post (gcdHelp)"
            (rule "expand_inInt" (formula "13") (term "1,0,0,1,1,0,1,1,1,1,1"))
            (rule "simplifyUpdate2" (formula "14"))
            (rule "simplifyUpdate2" (formula "13"))
            (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,1,1,0,1,1,1,1,1"))
            (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,1,1,0,1,1,1,1,1"))
            (rule "simplifyUpdate2" (formula "13") (term "1"))
            (rule "andLeft" (formula "13"))
            (rule "simplifyUpdate2" (formula "13"))
            (rule "translateJavaMod" (formula "14") (term "0,0,0,1,0,1,1,1"))
            (rule "translateJavaMod" (formula "14") (term "0,1,0,0,0,1,1,0,1,1,1"))
            (rule "translateJavaMod" (formula "14") (term "0,1,0,1,1,0,1,1,1"))
            (rule "translateJavaMod" (formula "14") (term "0,1,0,1,0,1,1,1"))
            (rule "translateJavaMod" (formula "14") (term "0,1,0,0,0,0,1,1,0,1,1,1"))
            (rule "sequentialToParallel2" (formula "15"))
            (rule "simplifyUpdate3" (formula "15") (term "1,0"))
            (rule "sequentialToParallel2" (formula "14"))
            (rule "simplifyUpdate3" (formula "14") (term "1,0"))
            (rule "andLeft" (formula "14"))
            (rule "simplifyUpdate2" (formula "14"))
            (rule "simplifyUpdate2" (formula "15"))
            (rule "andLeft" (formula "14"))
            (rule "simplifyUpdate2" (formula "14"))
            (rule "andLeft" (formula "16"))
            (rule "simplifyUpdate2" (formula "17"))
            (rule "notLeft" (formula "14"))
            (rule "close" (formula "17") (ifseqformula "16"))
         )
         (branch "Pre (gcdHelp)"
            (opengoal " ")
         )
      )
      (branch "if x_2 false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "12"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "11"))
         (rule "applyOnPV" (formula "11") (term "0"))
         (rule "simplifyUpdate1" (formula "11") (term "1"))
         (rule "ifthenelse_concrete3" (formula "11"))
         (rule "boolean_not_equal_2" (formula "11") (term "1"))
         (rule "concrete_or_4" (formula "11"))
         (rule "inEqSimp_leqRight" (formula "11"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "assignment" (formula "12") (term "1"))
         (rule "sequentialToParallel2" (formula "12"))
         (rule "simplifyUpdate2" (formula "12"))
         (rule "simplifyUpdate3" (formula "12") (term "1,0"))
         (rule "applyOnElementary" (formula "12") (term "1,0"))
         (rule "applyOnPV" (formula "12") (term "0,1,0"))
         (rule "assignment" (formula "12") (term "1"))
         (rule "sequentialToParallel2" (formula "12"))
         (rule "simplifyUpdate2" (formula "12"))
         (rule "simplifyUpdate3" (formula "12") (term "1,0"))
         (rule "applyOnElementary" (formula "12") (term "1,0"))
         (rule "applyOnPV" (formula "12") (term "0,1,0"))
         (rule "blockEmpty" (formula "12") (term "1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "returnUnfold" (formula "12") (term "1") (inst "#v0=x"))
         (rule "variableDeclarationAssign" (formula "12") (term "1"))
         (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_3"))
         (builtin "Use Operation Contract" (formula "12") (newnames "heapBefore_gcdHelp,result_0,exc_0,heapAfter_gcdHelp,anon_heap_gcdHelp") (contract "Gcd[Gcd::gcdHelp(int,int)].JML normal_behavior operation contract.0"))
         (branch "Post (gcdHelp)"
            (rule "expand_inInt" (formula "13") (term "1,0,0,1,1,0,1,1,1,1,1"))
            (rule "expand_inInt" (formula "13") (term "1,0,1,1,1,1"))
            (rule "simplifyUpdate2" (formula "14"))
            (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,1,1,0,1,1,1,1,1"))
            (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,1,1,0,1,1,1,1,1"))
            (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,1,1,1,1"))
            (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,1,1,1,1"))
            (rule "simplifyUpdate2" (formula "13"))
            (rule "simplifyUpdate2" (formula "13") (term "1"))
            (rule "simplifyUpdate2" (formula "13") (term "1,1"))
            (rule "andLeft" (formula "13"))
            (rule "simplifyUpdate2" (formula "13"))
            (rule "andLeft" (formula "14"))
            (rule "simplifyUpdate2" (formula "14"))
            (rule "andLeft" (formula "15"))
            (rule "simplifyUpdate2" (formula "16"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "14"))
            (rule "translateJavaMod" (formula "16") (term "0,1,0,1,1"))
            (rule "translateJavaMod" (formula "16") (term "0,0,0,1,1"))
            (rule "translateJavaMod" (formula "16") (term "0,1,0,0,0,0,1,1,1"))
            (rule "translateJavaMod" (formula "16") (term "0,1,0,0,0,1,1,1"))
            (rule "translateJavaMod" (formula "16") (term "0,1,0,1,1,1"))
            (rule "sequentialToParallel2" (formula "18"))
            (rule "simplifyUpdate3" (formula "18") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "16"))
            (rule "simplifyUpdate2" (formula "16") (term "0"))
            (rule "applyOnRigidFormula" (formula "16") (term "1"))
            (rule "applyOnRigidFormula" (formula "16") (term "0"))
            (rule "applyOnRigidFormula" (formula "16") (term "0,1"))
            (rule "simplifyUpdate2" (formula "16") (term "0,0,1"))
            (rule "simplifyUpdate2" (formula "16") (term "1,0,1"))
            (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "16") (term "0,0"))
            (rule "applyOnPV" (formula "16") (term "0,0,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,0"))
            (rule "applyOnRigidFormula" (formula "16") (term "0,0,1"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1"))
            (rule "applyOnRigidFormula" (formula "16") (term "1,0,1"))
            (rule "simplifyUpdate1" (formula "16") (term "1,1,0,1"))
            (rule "applyOnRigidFormula" (formula "16") (term "0,1,1"))
            (rule "simplifyUpdate2" (formula "16") (term "1,0,1,1"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,0,0,1"))
            (rule "applyOnPV" (formula "16") (term "0,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,0,0,1"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,1,0,1"))
            (rule "applyOnPV" (formula "16") (term "0,0,1,0,1"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0,1"))
            (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,1"))
            (rule "simplifyUpdate2" (formula "16") (term "1,0,0,1,1"))
            (rule "applyOnRigidFormula" (formula "16") (term "0,0,0,1,1"))
            (rule "simplifyUpdate2" (formula "16") (term "1,0,0,0,1,1"))
            (rule "simplifyUpdate2" (formula "16") (term "0,0,0,0,1,1"))
            (rule "applyOnRigidFormula" (formula "16") (term "1,0,0,0,1,1"))
            (rule "simplifyUpdate1" (formula "16") (term "1,1,0,0,0,1,1"))
            (rule "applyOnRigidFormula" (formula "16") (term "0,0,0,0,1,1"))
            (rule "simplifyUpdate2" (formula "16") (term "0,0,0,0,0,1,1"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,1,0,0,0,1,1"))
            (rule "applyOnPV" (formula "16") (term "0,0,1,0,0,0,1,1"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0,0,0,1,1"))
            (rule "applyOnRigidFormula" (formula "16") (term "1,0,0,0,0,1,1"))
            (rule "simplifyUpdate1" (formula "16") (term "1,1,0,0,0,0,1,1"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,1,0,0,0,0,1,1"))
            (rule "applyOnPV" (formula "16") (term "0,0,1,0,0,0,0,1,1"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0,0,0,0,1,1"))
            (rule "inEqSimp_gtToGeq" (formula "16") (term "0,0,0,0,0,1,1"))
            (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0,0,1,1"))
            (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0,0,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "15"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "1,1,0,0,1,1"))
            (rule "assignment" (formula "18") (term "1"))
            (rule "sequentialToParallel2" (formula "18"))
            (rule "simplifyUpdate3" (formula "18") (term "1,0"))
            (rule "jmod_axiom" (formula "16") (term "0,1,0,1,1"))
            (rule "polySimp_mulComm1" (formula "16") (term "1,0,1,0,1,1"))
            (rule "jmod_axiom" (formula "16") (term "0,0,0,1"))
            (rule "polySimp_mulComm1" (formula "16") (term "1,0,0,0,1"))
            (rule "jmod_axiom" (formula "16") (term "0,1,0,1"))
            (rule "polySimp_mulComm1" (formula "16") (term "1,0,1,0,1"))
            (rule "jmod_axiom" (formula "16") (term "0,1,0,0,0,1,1"))
            (rule "polySimp_mulComm1" (formula "16") (term "1,0,1,0,0,0,1,1"))
            (rule "jmod_axiom" (formula "16") (term "0,1,0,0,0,0,1,1"))
            (rule "polySimp_mulComm1" (formula "16") (term "1,0,1,0,0,0,0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "16") (term "1,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,1,1"))
            (rule "polySimp_elimOne" (formula "16") (term "0,1,0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "16") (term "0,0,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,1"))
            (rule "polySimp_elimOne" (formula "16") (term "0,0,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "16") (term "1,0,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,1"))
            (rule "polySimp_elimOne" (formula "16") (term "0,1,0,1"))
            (rule "polySimp_sepNegMonomial" (formula "16") (term "1,0,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "16") (term "1,0,0,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0,0,1,1"))
            (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,1,1"))
            (rule "nnf_imp2or" (formula "16") (term "0,1,1"))
            (rule "nnf_notAnd" (formula "16") (term "0,0,1,1"))
            (rule "nnf_notAnd" (formula "16") (term "1,0,0,1,1"))
            (rule "inEqSimp_notGeq" (formula "16") (term "1,1,0,0,1,1"))
            (rule "mul_literals" (formula "16") (term "1,0,0,1,1,0,0,1,1"))
            (rule "add_literals" (formula "16") (term "0,0,1,1,0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,1,0,0,1,1"))
            (rule "mul_literals" (formula "16") (term "1,1,1,0,0,1,1"))
            (rule "inEqSimp_notLeq" (formula "16") (term "0,1,0,0,1,1"))
            (rule "mul_literals" (formula "16") (term "1,0,0,0,1,0,0,1,1"))
            (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,1,0,0,1,1"))
            (rule "mul_literals" (formula "16") (term "1,0,1,0,0,1,1"))
            (rule "nnf_notAnd" (formula "16") (term "0,0,0,1,1"))
            (rule "nnf_notAnd" (formula "16") (term "0,0,0,0,1,1"))
            (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0,0,1,1"))
            (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,0,0,1,1"))
            (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0,1,1"))
            (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0,1,1"))
            (rule "commute_and" (formula "16") (term "0,1"))
            (rule "commute_or_2" (formula "16") (term "0,0,1,1"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,1,1"))
            (rule "methodCallReturn" (formula "18") (term "1"))
            (rule "assignment" (formula "18") (term "1"))
            (rule "sequentialToParallel2" (formula "18"))
            (rule "simplifyUpdate2" (formula "18"))
            (rule "simplifyUpdate3" (formula "18") (term "1,0"))
            (rule "applyOnElementary" (formula "18") (term "1,0"))
            (rule "applyOnPV" (formula "18") (term "0,1,0"))
            (rule "commute_or" (formula "16") (term "1,0,0,0,0,1,1"))
            (rule "shift_paren_or" (formula "16") (term "0,0,0,0,1,1"))
            (rule "commute_or_2" (formula "16") (term "0,0,1,1"))
            (rule "commute_or" (formula "16") (term "0,0,0,0,0,1,1"))
            (rule "inEqSimp_or_subsumption0" (formula "16") (term "0,0,0,0,0,1,1"))
            (rule "qeq_literals" (formula "16") (term "0,0,0,0,0,0,0,1,1"))
            (rule "concrete_and_2" (formula "16") (term "0,0,0,0,0,0,1,1"))
            (rule "concrete_or_2" (formula "16") (term "0,0,0,0,0,1,1"))
            (rule "methodCallEmpty" (formula "18") (term "1"))
            (rule "tryEmpty" (formula "18") (term "1"))
            (rule "simplifyUpdate2" (formula "18"))
            (rule "emptyModality" (formula "18") (term "1"))
            (opengoal " ")
         )
         (branch "Exceptional Post (gcdHelp)"
            (rule "expand_inInt" (formula "13") (term "1,0,0,1,1,0,1,1,1,1,1"))
            (rule "simplifyUpdate2" (formula "14"))
            (rule "simplifyUpdate2" (formula "13"))
            (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,1,1,0,1,1,1,1,1"))
            (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,1,1,0,1,1,1,1,1"))
            (rule "simplifyUpdate2" (formula "13") (term "1"))
            (rule "andLeft" (formula "13"))
            (rule "simplifyUpdate2" (formula "13"))
            (rule "translateJavaMod" (formula "14") (term "0,1,0,0,0,0,1,1,0,1,1,1"))
            (rule "translateJavaMod" (formula "14") (term "0,0,0,1,0,1,1,1"))
            (rule "translateJavaMod" (formula "14") (term "0,1,0,0,0,1,1,0,1,1,1"))
            (rule "translateJavaMod" (formula "14") (term "0,1,0,1,0,1,1,1"))
            (rule "translateJavaMod" (formula "14") (term "0,1,0,1,1,0,1,1,1"))
            (rule "sequentialToParallel2" (formula "15"))
            (rule "simplifyUpdate3" (formula "15") (term "1,0"))
            (rule "sequentialToParallel2" (formula "14"))
            (rule "simplifyUpdate3" (formula "14") (term "1,0"))
            (rule "andLeft" (formula "14"))
            (rule "simplifyUpdate2" (formula "14"))
            (rule "simplifyUpdate2" (formula "15"))
            (rule "andLeft" (formula "14"))
            (rule "simplifyUpdate2" (formula "14"))
            (rule "andLeft" (formula "16"))
            (rule "simplifyUpdate2" (formula "17"))
            (rule "notLeft" (formula "14"))
            (rule "close" (formula "17") (ifseqformula "16"))
         )
         (branch "Pre (gcdHelp)"
            (opengoal " ")
         )
      )
   )
   (branch "if x_1 false"
      (rule "false_to_not_true" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "10"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "9"))
      (rule "applyOnPV" (formula "9") (term "0"))
      (rule "simplifyUpdate1" (formula "9") (term "1"))
      (rule "ifthenelse_concrete3" (formula "9"))
      (rule "boolean_not_equal_2" (formula "9") (term "1"))
      (rule "concrete_or_4" (formula "9"))
      (rule "inEqSimp_leqRight" (formula "9"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "blockEmpty" (formula "10") (term "1"))
      (builtin "CloseAfterJoin" (formula "10") (joinNode "167"))
      (opengoal " ")
   )
)
(branch "if x false"
   (rule "false_to_not_true" (formula "1") (term "1"))
   (rule "simplifyUpdate2" (formula "8"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "applyOnRigidFormula" (formula "7"))
   (rule "applyOnPV" (formula "7") (term "0"))
   (rule "simplifyUpdate1" (formula "7") (term "1"))
   (rule "ifthenelse_concrete3" (formula "7"))
   (rule "boolean_not_equal_2" (formula "7") (term "1"))
   (rule "concrete_or_4" (formula "7"))
   (rule "inEqSimp_leqRight" (formula "7"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (rule "blockEmpty" (formula "8") (term "1"))
   (builtin "CloseAfterJoin" (formula "8") (joinNode "114"))
   (opengoal " ")
)
)

}
