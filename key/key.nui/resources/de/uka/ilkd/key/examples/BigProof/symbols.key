\predicates {
	elemInv(Heap, int[], int, int);
	elemBiggerThanNext(Heap, int[], int);
	elemBiggerThanNext2(Heap, int[], int);
	elemLargerThanBound(Heap, int[], int, int);
}


\rules {
	elemInv {
		\schemaVar \term Heap heapSV;
		\schemaVar \term int[] a;
		\schemaVar \term int idx;
		\schemaVar \term int lb;

		\find(elemInv(heapSV, a, idx, lb))
		\replacewith(  elemBiggerThanNext(heapSV, a, idx)
                             & elemBiggerThanNext2(heapSV, a, idx)
                             & elemLargerThanBound(heapSV, a, idx, lb))
		\heuristics (userTaclets1)
	};

	elem_bigger_than_next {
		\schemaVar \term Heap heapSV;
		\schemaVar \term int[] a;
		\schemaVar \term int idx;

		\find(elemBiggerThanNext(heapSV, a, idx))
		\replacewith(\if   (a != null & 0 <= idx & idx < a.length)
                             \then (idx+1 < a.length -> int::select(heapSV, a, arr(idx)) > int::select(heapSV, a, arr(idx+1)))
                             \else (true))
		\heuristics (userTaclets1)
	};

	elem_bigger_than_next_2 {
		\schemaVar \term Heap heapSV;
		\schemaVar \term int[] a;
		\schemaVar \term int idx;

		\find(elemBiggerThanNext2(heapSV, a, idx))
		\replacewith(\if   (a != null & 0 <= idx & idx < a.length)
                             \then (idx+2 < a.length -> int::select(heapSV, a, arr(idx)) >int::select(heapSV, a, arr(idx+1)) + int::select(heapSV, a, arr(idx+2)) )
                             \else (true))
		\heuristics (userTaclets1)
	};

	elem_larger_than_bound {
		\schemaVar \term Heap heapSV;
		\schemaVar \term int[] a;
		\schemaVar \term int idx;
		\schemaVar \term int lb;

		\find(elemLargerThanBound(heapSV, a, idx, lb))
		\replacewith(\if   (a != null & 0 <= idx & idx < a.length)
                             \then (int::select(heapSV, a, arr(idx)) >= lb)
                             \else (true))
		\heuristics (userTaclets1)
	};
}
