/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Wed Nov 26 11:26:00 CET 2014
 */
package java.nio;

public abstract class ShortBuffer extends java.nio.Buffer implements java.lang.Comparable
{
   final short[] hb;
   final int offset;
   boolean isReadOnly;


   /*@ requires true; ensures true; assignable \everything; */
   public static java.nio.ShortBuffer allocate(int arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.nio.ShortBuffer wrap(short[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public static java.nio.ShortBuffer wrap(short[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public abstract java.nio.ShortBuffer slice();

   /*@ requires true; ensures true; assignable \everything; */
   public abstract java.nio.ShortBuffer duplicate();

   /*@ requires true; ensures true; assignable \everything; */
   public abstract java.nio.ShortBuffer asReadOnlyBuffer();

   /*@ requires true; ensures true; assignable \everything; */
   public abstract short get();

   /*@ requires true; ensures true; assignable \everything; */
   public abstract java.nio.ShortBuffer put(short arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public abstract short get(int arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public abstract java.nio.ShortBuffer put(int arg0, short arg1);

   /*@ requires true; ensures true; assignable \everything; */
   public java.nio.ShortBuffer get(short[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public java.nio.ShortBuffer get(short[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public java.nio.ShortBuffer put(java.nio.ShortBuffer arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public java.nio.ShortBuffer put(short[] arg0, int arg1, int arg2);

   /*@ requires true; ensures true; assignable \everything; */
   public final java.nio.ShortBuffer put(short[] arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public final boolean hasArray();

   /*@ requires true; ensures true; assignable \everything; */
   public final short[] array();

   /*@ requires true; ensures true; assignable \everything; */
   public final int arrayOffset();

   /*@ requires true; ensures true; assignable \everything; */
   public abstract java.nio.ShortBuffer compact();

   /*@ requires true; ensures true; assignable \everything; */
   public abstract boolean isDirect();

   /*@ requires true; ensures true; assignable \everything; */
   public java.lang.String toString();

   /*@ requires true; ensures true; assignable \everything; */
   public int hashCode();

   /*@ requires true; ensures true; assignable \everything; */
   public boolean equals(java.lang.Object arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public int compareTo(java.nio.ShortBuffer arg0);

   /*@ requires true; ensures true; assignable \everything; */
   public abstract java.nio.ByteOrder order();

   /*@ requires true; ensures true; assignable \everything; */
   public java.lang.Object array();

   /*@ requires true; ensures true; assignable \everything; */
   public int compareTo(java.lang.Object arg0);
}
