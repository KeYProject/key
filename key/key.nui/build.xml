<?xml version="1.0"?>
<project name="key.nui" default="deploy" basedir=".">

	<!-- Properties definition (global variables for paths) -->
	<property name="src.dir" value="${basedir}/src" />
	<property name="build.dir" value="${basedir}/bin" />
	<property name="dist.dir" value="${basedir}/../deployment" />
	<!-- <property name="NUIdefault" value="${basedir}/resources/de/uka/ilkd/key/nui/NUIdefault.fxml" /> -->
	<property name="NUIdefault" value="${build.dir}/de/uka/ilkd/key/nui/NUIdefault.fxml" />
	<property name="components" value="${basedir}/resources/de/uka/ilkd/key/nui/components/" />
	<tstamp>
		<format property="time.stamp" pattern="yyyyMMdd-HHmmss" />
	</tstamp>

	<!-- Definition of classpath -->
	<path id="key.nui.class.path">
		<pathelement path="${basedir}/../key.util/bin" />
		<pathelement path="${basedir}/../key.core/bin" />
		<pathelement location="${basedir}/../key.core/lib/antlr.jar" />
		<pathelement location="${basedir}/../key.core/lib/recoderKey.jar" />
	</path>

	<path id="key.nui.run.class.path">
		<pathelement path="${basedir}/../key.nui/bin" />
		<path refid="key.nui.class.path" />
	</path>

	<!-- Set properties ============== -->
	<!-- Sets the property taclet.match to ${taclet.match} if it is not set yet, else it is set to 'vm' -->
	<condition property="taclet.match" value="${taclet.match}" else="vm">
		<isset property="taclet.match" />
	</condition>

	<condition property="tacletindex.threading.enabled" value="${tacletindex.threading.enabled}" else="false">
		<isset property="tacletindex.threading.enabled" />
	</condition>
	<!-- ============================= -->

	<!-- Includes ANT-CONTRIB library -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<fileset dir="${basedir}/ant-lib/" />
		</classpath>
	</taskdef>

	<!-- Reporting -->
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
		<classpath>
			<fileset dir="${basedir}/ant-lib/findbugs" />
		</classpath>
	</taskdef>

	<taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" classpath="${basedir}/ant-lib/checkstyle/checkstyle-6.14.1-all.jar" />

	<path id="pmd.classpath">
		<pathelement location="${basedir}" />
		<fileset dir="${basedir}/ant-lib/pmd">
			<include name="*.jar" />
		</fileset>
	</path>

	<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.classpath" />

	<!-- Definition of target START -->
	<target name="start" depends="compile" description="Starts KeY.">
		<java classname="de.uka.ilkd.key.nui.NUI" classpathref="key.nui.run.class.path" fork="true">
			<jvmarg value="-Xmx2048m" />
			<jvmarg value="-XX:MaxPermSize=256m" />
			<jvmarg value="-ea" />
			<jvmarg value="-Dtaclet.match=${taclet.match}" />
			<jvmarg value="-Dtacletindex.threading.enabled=${tacletindex.threading.enabled}" />
		</java>
	</target>

	<!-- Definition of target DEPLOY -->
	<target name="deploy" depends="compile" description="Create a JAR archive in the destination directory.">
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.dir}/components" />
		<jar destfile="${dist.dir}/components/key.nui.jar" basedir="${build.dir}" manifest="${basedir}/META-INF/MANIFEST.MF" />
	</target>

	<!-- Definition of target COMPILE -->
	<target name="compile" depends="generate" description="Compile all source files into the build directory.">
		<mkdir dir="${build.dir}" />
		<javac srcdir="${src.dir}" destdir="${build.dir}" includeantruntime="false" source="1.8" target="1.8" deprecation="off" debug="on" depend="${build.depend}" optimize="off">
			<exclude name="**/guitests/*.java" />
			<!-- GUI tests are not compiled by ANT Buildfile-->
			<classpath refid="key.nui.class.path" />
		</javac>
	</target>

	<!-- Definition of target COPY -->
	<target name="copy" description="Copy all resources into the binary directory.">
		<copy todir="${build.dir}" overwrite="true">
			<fileset dir="${basedir}/resources/" />
		</copy>
	</target>

	<!-- Generate Reports -->

	<!-- Definition of target FINDBUGS -->
	<target name="findbugs" description="Generates FindBugs Report.">
		<findbugs home="${basedir}/ant-lib/findbugs" output="html" outputFile="${basedir}/reports/findBugs_${time.stamp}.html">
			<class location="${basedir}/bin" />
			<auxClasspath path="${basedir}/testfx-4/" />
			<auxClasspath path="${basedir}/ant-lib/" />
		</findbugs>
	</target>

	<!-- Definition of target CHECKSTYLE -->
	<target name="checkstyle" description="Generates Checkstyle Report.">
		<checkstyle config="${basedir}/config/checkstyle/sun_checks.xml" classpath="${basedir}/ant-lib/checkstyle/checkstyle-6.14.1-all.jar">
			<fileset dir="${basedir}/src" includes="**/*.java" />
			<formatter type="xml" tofile="${basedir}/reports/checkstyle_${time.stamp}.xml" />
		</checkstyle>
	</target>

	<!-- Definition of target PMD -->
	<target name="pmd" description="Generates PMD Report.">
		<pmd shortFilenames="true">
			<sourceLanguage name="java" version="1.8" />
			<ruleset>rulesets/java/design.xml</ruleset>
			<ruleset>java-basic</ruleset>
			<formatter type="html" toFile="${basedir}/reports/pmd_${time.stamp}.xml" toConsole="true">
				<param name="linkPrefix" value="http://pmd.sourceforge.net/xref/" />
			</formatter>
			<fileset dir="${basedir}/src/">
				<include name="**/*.java" />
			</fileset>
		</pmd>
	</target>


	<!-- Author: Stefan Pilot <stef@n-pilot.de>
	This will add new menu entries for each	GUI component defined as 
	.fxml-File in the ${components} folder.
	Possible problem: For n GUI-Components, it will use the fx:ids 
	'toggleGroup`0`' to 'toggleGroup`n`'.
	
	If any questions should occur or you are editing this target,
	please do not hesitate to write an email to the author.  
	-->
	<!-- Definition of target GENERATE -->
	<target name="generate" depends="copy" description="Generates the Add-View-Menu by parsing the existing fxml files in /components">

		<!-- Add the new GUI components -->
		<var name="i" value="0" />
		<for param="file">
			<path>
				<!--  For each .fxml-File in the components folder that is not a dotfile-->
				<fileset dir="${components}">
					<include name="*.fxml" />
					<exclude name=".*" />
				</fileset>
			</path>
			<sequential>
				<var name="filename" unset="true" />
				<!-- ${filename} = ${file} just without the '.fxml' -->
				<basename property="filename" file="@{file}" suffix=".fxml" />
				<!-- Define a new toggle group -->
				<replaceregexp file="${NUIdefault}" match="(&lt;\!\-\- ANT DEFINE TOGGLE GROUP No [0-9\.]+ HERE \-\-&gt;)" replace="&lt;ToggleGroup fx:id=&quot;toggleGroup${i}&quot;/&gt;&#10;\1" />
				<!-- and make the 'Menu' -->
				<replaceregexp file="${NUIdefault}" match="(&lt;\!\-\- ANT DEFINE MENU HERE \-\-&gt;)" replace="&lt;Menu fx:id=&quot;toggle${filename}&quot; text=&quot;%${filename}&quot;&gt;&#10;&lt;properties componentName=&quot;${filename}&quot; componentResource=&quot;${filename}.fxml&quot;/&gt;&#10;&lt;items&gt;&#10;&lt;RadioMenuItem fx:id=&quot;hideTG${i}&quot; text=&quot;%hide&quot; selected=&quot;true&quot; onAction=&quot;#handleLoadComponent&quot; toggleGroup=&quot;$$toggleGroup${i}&quot;/&gt;&#10;&lt;RadioMenuItem fx:id=&quot;leftTG${i}&quot; text=&quot;%left&quot; selected=&quot;false&quot; onAction=&quot;#handleLoadComponent&quot; toggleGroup=&quot;$$toggleGroup${i}&quot;/&gt;&#10;&lt;RadioMenuItem fx:id=&quot;middleTG${i}&quot; text=&quot;%middle&quot; selected=&quot;false&quot; onAction=&quot;#handleLoadComponent&quot; toggleGroup=&quot;$$toggleGroup${i}&quot;/&gt;&#10;&lt;RadioMenuItem fx:id=&quot;rightTG${i}&quot; text=&quot;%right&quot; selected=&quot;false&quot; onAction=&quot;#handleLoadComponent&quot; toggleGroup=&quot;$$toggleGroup${i}&quot;/&gt;&#10;&lt;RadioMenuItem fx:id=&quot;bottomTG${i}&quot; text=&quot;%bottom&quot; selected=&quot;false&quot; onAction=&quot;#handleLoadComponent&quot; toggleGroup=&quot;$$toggleGroup${i}&quot;/&gt;&#10;&lt;/items&gt;&#10;&lt;/Menu&gt;&#10;\1" />
				<!-- Increment the toggle group counter.
   			Possible bug: If at some point there will be more than one group of 
   			toggle groups defined in this fmxl file, each of them must have a
   			number greater than the number of Views / GUI Components. -->
				<math result="i" operand1="${i}" operation="+" operand2="1" datatype="int" />
			</sequential>
		</for>
	</target>

	<!-- Definition of target CLEAN -->
	<target name="clean" description="Deletes all generated files and folders.">
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${build.dir}" includes="**/*" />
			<fileset file="${dist.dir}/components/key.nui.jar" />
		</delete>
	</target>
</project>
