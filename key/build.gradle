// TODO figure out why javacc is always executed

plugins {
    //Support for IntelliJ IDEA
    //https://docs.gradle.org/current/userguide/idea_plugin.html
    id("idea")

    //Support for Eclipse
    //https://docs.gradle.org/current/userguide/eclipse_plugin.html
    id("eclipse")  //support for Eclipse

    //Checks and adds the license header of the source files:
    // Task: `licenseMain' and `licenseFormatMain'
    //https://github.com/hierynomus/license-gradle-plugin
    id "com.github.hierynomus.license-base" version "0.15.0"
    //Generates reports on the license of used packages: Task `downloadLicenses'
    //Some Licenses requires an entry in the credits (MIT, BSD)
    id "com.github.hierynomus.license-report" version "0.15.0"

    id "org.sonarqube" version "3.0"
}

// Configure this project for use inside IntelliJ:
idea {
    module {
        downloadJavadoc = false
        downloadSources = true
    }
}

// Helper function that calls "git rev-parse" to
// find names/SHAs for commits
static def gitRevParse(String args) {
    try {
        return "git rev-parse $args".execute().text.trim()
    } catch (Exception e) {
        return ""
    }
}

static def getDate() {
    return new Date().format('yyyyMMdd')
}

// The $BUILD_NUMBER is an environment variable set by Jenkins.
def build = System.env.BUILD_NUMBER == null ? "" : "-${System.env.BUILD_NUMBER}"

group = "org.key_project"
version = "2.9$build"

sonarqube {
    properties {
        property "sonar.projectKey", "key-main"
        property "sonar.organization", "keyproject"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "key-main"
        property "sonar.organization", "keyproject"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "idea"
    apply plugin: "eclipse"

    group = rootProject.group
    version = rootProject.version

    repositories {
        mavenCentral()
        flatDir { dirs "lib", "$rootDir/key.core/lib", "$rootDir/key.ui/lib" }
    }

    dependencies {
        implementation 'com.google.code.findbugs:jsr305:3.0.2'
        testImplementation 'junit:junit:4.12'
        testImplementation project(':key.util')
    }

    // Setting UTF-8 as the java source encoding.
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    tasks.withType(Javadoc) {
        failOnError = false
        options.addBooleanOption 'Xdoclint:none', true
        //options.verbose()
        options.encoding = 'UTF-8'
        if (JavaVersion.current().isJava9Compatible()) {
            //options.addBooleanOption('html5', true)
        }
    }

    tasks.withType(Test) {//Configure all tests
        systemProperty "test-resources", "src/test/resources"
        systemProperty "testcases", "src/test/resources/testcase"
        systemProperty "TACLET_PROOFS", "tacletProofs"
        systemProperty "EXAMPLES_DIR", file("$rootProject/key.ui/examples")
        systemProperty "RUNALLPROOFS_DIR", "$buildDir/report/runallproves"

        systemProperty "key.disregardSettings", "true"
        maxHeapSize = "4g"

        forkEvery = 0 //default
        maxParallelForks = 1 // weigl: test on master
    }

    test {
        // TODO consider moving this to key.core where it is repeated ...
        // weigl: This has to be here. We repeat this in key.core because I was not sure whether
        // it gets overwritten or not on a redeclaration of `test'.

        useJUnit {
            excludeCategories 'org.key_project.util.testcategories.Interactive', 'org.key_project.util.testcategories.Performance'
        }

        afterTest { desc, result -> logger.error "${result.resultType}: ${desc.className}#${desc.name}" }
        beforeTest { desc -> logger.error "> ${desc.className}#${desc.name}" }
        
        testLogging {
           outputs.upToDateWhen {false}
            showStandardStreams = true
        }
    }

    task testFast(type: Test) {
        group "verification"
        useJUnit {
            // CAUTION! These settings do not affect :key.core since the
            // detection mechanism is different there.
            excludeCategories 'org.key_project.util.testcategories.Slow'
            excludeCategories 'org.key_project.util.testcategories.Interactive'
        }

        testLogging {
            // set options for log level LIFECYCLE
            events "failed"
            exceptionFormat "short"

            // set options for log level DEBUG
            debug {
                events "started", "skipped", "failed"
                exceptionFormat "full"
            }

            // remove standard output/error logging from --info builds
            // by assigning only 'failed' and 'skipped' events
            info.events = ["failed", "skipped"]
        }
    }

    // The following two tasks can be used to execute main methods from the project
    // The main class is set via "gradle -DmainClass=... execute --args ..."
    // see https://stackoverflow.com/questions/21358466/gradle-to-execute-java-class-without-modifying-build-gradle
    task execute(type:JavaExec) {
        description 'Execute main method from the project. Set main class via "gradle -DmainClass=... execute --args ..."'
        group "application"
        main = System.getProperty('mainClass')
        classpath = sourceSets.main.runtimeClasspath
    }

    task executeInTests(type:JavaExec) {
        description 'Execute main method from the project (tests loaded). Set main class via "gradle -DmainClass=... execute --args ..."'
        group "application"
        main = System.getProperty('mainClass')
        classpath = sourceSets.test.runtimeClasspath
    }

    // findbugs { findbugsTest.enabled = false; ignoreFailures = true }
    // pmd { pmdTest.enabled = false; ignoreFailures = true }
    // tasks.withType(Checkstyle) {
    //     configFile file("$rootDir/scripts/tools/checkstyle/key_checks.xml")
    // }
    // tasks.withType(FindBugs) {
    //     reports {
    //         xml.enabled = false
    //         html.enabled = true
    //     }
    // }
    // tasks.withType(Pmd) {
    //     reports {
    //         xml.enabled = true
    //         html.enabled = true
    //     }
    // }
    
    task sourcesJar(type: Jar) {
        description = 'Create a jar file with the sources from this project'
        from sourceSets.main.allJava
        archiveClassifier = 'sources'
    }

    task javadocJar(type: Jar) {
        description = 'Create a jar file with the javadocs from this project'
        from javadoc
        archiveClassifier = 'javadoc'
    }

    publishing {
        publications {
            gpr(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = projects.name
                    description = project.description
                    url = 'http://key-project.org/'

                    licenses {
                        license {
                            name = "GNU General Public License (GPL), Version 2"
                            url = "http://www.gnu.org/licenses/old-licenses/gpl-2.0.html"
                        }
                    }
                    developers {
                        developer {
                            id = 'key'
                            name = 'KeY Developers'
                            email = 'support@key-project.org'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://git.key-project.org/key/key.git'
                        developerConnection = 'scm:git:git://git.key-project.org/key/key.git'
                        url = 'https://git.key-project.org/'
                    }
                }
            }
        }
        repositories {
            maven {
                name = "GitlabPackages"
		        url "https://git.key-project.org/api/v4/projects/35/packages/maven"
		        credentials(HttpHeaderCredentials) {
			        name = 'Private-Token'
			        value = System.getenv("TOKEN")
		        }
		        authentication {
			        header(HttpHeaderAuthentication)
		        }           
            }
        }
    }

    license {//configures the license file header
        header = file("$rootDir/gradle/header")

        mapping {
            //find styles here:
            // http://code.mycila.com/license-maven-plugin/#supported-comment-types
            java="SLASHSTAR_STYLE" // DOUBLESLASH_STYLE
            javascript="SLASHSTAR_STYLE"
        }
        mapping("key", "SLASHSTAR_STYLE")
    }

    eclipse { //configures the generated .project and .classpath files.
        classpath {
            file {
                whenMerged { // This adds the exclude entry for every resource and antlr folder.
                    //As eclipse is so stupid, that it does not distuinguish between resource and java folder correctly.
                    entries.findAll { it.path.endsWith('src/test/antlr') }.each { it.excludes = ["**/*.java"] }
                    entries.findAll { it.path.endsWith('/resources') }.each { it.excludes = ["**/*.java"] }
                }
            }
        }
    }
}

task start {
    description "Use :key.ui:run instead"
    doFirst {
        println "Use :key.ui:run instead"
    }
}

// Generation of a JavaDoc across sub projects.
task alldoc(type: Javadoc) {
    group "documentation"
    description "Generate a JavaDoc across sub projects"
    def projects = subprojects
    //key.ui javadoc is broken
    source projects.collect { it.sourceSets.main.allJava }
    classpath = files(projects.collect { it.sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")

    if (JavaVersion.current().isJava9Compatible()) {
        //notworking on jenkins
        //options.addBooleanOption('html5', true)
    }

    configure(options) {
        //showFromPrivate()
        encoding = 'UTF-8'
        addBooleanOption 'Xdoclint:none', true
        // overview = new File( projectDir, 'src/javadoc/package.html' )
        //stylesheetFile = new File( projectDir, 'src/javadoc/stylesheet.css' )
        windowTitle = 'KeY API Documentation'
        docTitle = "KeY JavaDoc ($project.version) -- ${getDate()}"
        bottom = "Copyright &copy; 2003-2019 <a href=\"http://key-project.org\">The KeY-Project</a>."
        use = true
        links += 'http://download.oracle.com/javase/8/docs/api/'
        links += "http://www.antlr2.org/javadoc/"
        links += "http://www.antlr3.org/api/Java/"
        links += "http://recoder.sourceforge.net/doc/api/"
    }
}

// Creates a jar file with the javadoc over all sub projects.
task alldocJar(type: Zip) {
    dependsOn alldoc
    description 'Create a jar file with the javadoc over all sub projects'
    from alldoc
    archiveFileName = "key-api-doc-${project.version}.zip"
    destinationDirectory = file("$buildDir/distribution")
}

//conditionally enable jacoco coverage when `-DjacocoEnabled=true` is given on CLI.
def jacocoEnabled = System.properties.getProperty("jacocoEnabled") ?: "false"
if (jacocoEnabled.toBoolean()) {
    project.logger.lifecycle("Jacoco enabled. Test performance will be slower.")
    apply from: rootProject.file("scripts/jacocokey.gradle")
}
