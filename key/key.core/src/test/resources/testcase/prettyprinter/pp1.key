// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 

/*
  This input file is used for a pretty printer test case.
  (Idea: parse the problem term, pretty print it as String and parse the String
  again. Then compare both parsed terms to be equal modulo renaming.)
  Focus is on the binding strength of certain operators.
  What remains untested is if unnecessary parentheses are printed.
*/
\problem {
\<{int i;}\> ( 
(1=1 & 2=2 | 3=3 & (4=4 | 5=5)) &
(1=1->2=2->3=3->((4=4->5=5)->6=6)) &
{i:=5} i = 5 &
{i:=5} (i = 5) &
{\subst int x; 5} x = 5 &
{\subst int x; 5} (x = 5) &
\if (true) \then (false) \else (true) & false &
\if (true) \then (false) \else (true & false) &
1+2-3+4+5+(6-7)+10 = 0 &
\forall int a; \forall int b; ( mul(add(a,b),add(a,b))=add(mul(a,a),mul(mul(Z(2(#)),a),b)) + mul(b,b) ) &
--1=-(1+2) &
-(1-2)=-1-2 &
-(1+2)=-1+2 &
-(1*2)=-1*2 &
-(1/2)=-1/2 &
-(1%2)=-1%2 &
({i:=5}1=1 & 2=2) &
({i:=5}(1=1 & 2=2)))
}
