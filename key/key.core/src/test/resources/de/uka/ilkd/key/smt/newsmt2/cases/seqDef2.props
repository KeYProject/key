### Comment

Essentially the same test case as seqDef1 but with an additional artificial
free variable

### KeY

\problem {
   \forall int x; (x > 3 -> int::seqGet(seqDef{int i;}(1, x, i*i), 2) = 9)
}

### contains.1

(assert (not (forall ((var_x Int))
  (=> (> var_x 3)
    (= (cast (k_seqGet (seqDef1 (i2u var_x)) (i2u 2)) sort_int)
       (i2u 9))))))

### contains.2

(assert (forall ((var_0 U)) (! (instanceof (seqDef1 var_0) sort_Seq) :pattern ((seqDef1 var_0)))))

### contains.3

(assert (forall ((var_x Int) (var_i Int))
  (=> (and
        (<= 0 var_i) (< var_i (- var_x 1)))
      (= (k_seqGet (seqDef1 (i2u var_x)) (i2u var_i))
         (let ((var_i (+ var_i 1))) (i2u (* var_i var_i)))))))

### contains.4

(assert (forall ((var_x Int))
   (= (k_seqLen (seqDef1 (i2u var_x)))
      (ite (>= (- var_x 1) 0)
           (i2u (- var_x 1))
           (i2u 0)))))

### expected

valid

### state

ignore