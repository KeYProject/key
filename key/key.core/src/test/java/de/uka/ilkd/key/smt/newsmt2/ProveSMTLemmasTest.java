package de.uka.ilkd.key.smt.newsmt2;

import de.uka.ilkd.key.control.DefaultUserInterfaceControl;
import de.uka.ilkd.key.control.KeYEnvironment;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.sort.Sort;
import de.uka.ilkd.key.parser.DefaultTermParser;
import de.uka.ilkd.key.pp.AbbrevMap;
import de.uka.ilkd.key.proof.Proof;
import de.uka.ilkd.key.proof.io.ProofSaver;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameter;
import org.junit.runners.Parameterized.Parameters;
import org.key_project.util.Streams;
import org.key_project.util.collection.PropertiesUtil;
import org.key_project.util.testcategories.Slow;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import static org.junit.Assert.*;

/**
 * TODO
 *
 * JUnit test class for re-running taclet proofs (formerly implemented as Perl
 * script proveRules.pl). The following procedure is executed during test run:
 *
 * 1) Retrieve names of all taclets that have annotation "\lemma" in their
 * declaration. <br>
 * 2) Retrieve all names of taclets for which there is a taclet proof available.
 * Expected file name pattern is as follows: Taclet_$TACLETNAME.proof<br>
 * 3) Create a test case for each registered taclet name.<br>
 * 4) Run the test cases. Each test case will check that its corresponding
 * taclet is annotated with "\lemma" and then attempt to load the proof of the
 * taclet.
 *
 * @author Mattias Ulbrich
 *
 */
@RunWith(Parameterized.class)
@Category(Slow.class)
public class ProveSMTLemmasTest {

   private static String HEADER;

   @Parameter(0)
   public String name;

   @Parameter(1)
   public String lemmaString;

   @BeforeClass
   public static void setUpPreamble() throws IOException {
      HEADER = Streams.toString(ProveSMTLemmasTest.class.getResourceAsStream("smt-lemma-header.key"));
   }

   @AfterClass
   public static void tearDownClass() {
      HEADER = null;
   }

   @Test
   public void testSMTLemmaSoundness() throws Exception {

      URL proofFile = getClass().getResource("SMT_lemma_" + name + ".proof");

      Path path;
      if (proofFile != null) {
         assert proofFile.getProtocol().equals("file");
         path = Paths.get(proofFile.toURI());
      } else {
         path = Files.createTempFile("SMT_lemma_" + name + "_", ".key");
         // TODO Use writeString in Java 11
         Files.write(path, (HEADER + "\\problem { " + lemmaString + "}").getBytes());
      }

      File file = path.toFile();

      System.err.println("Now processing file " + file);

      KeYEnvironment<DefaultUserInterfaceControl> env = KeYEnvironment.load(file);
      try {
         Proof loadedProof = env.getLoadedProof();
         env.getProofControl().startAndWaitForAutoMode(loadedProof);
         if (!loadedProof.closed()) {
            File saveFile = new File(file.getAbsoluteFile() + ".proof");
            ProofSaver saver = new ProofSaver(loadedProof, saveFile);
            saver.save();
            fail("Proof does not close. See " + file + " and " + saveFile);
         } else {
            if (proofFile == null) {
               // delete temp files
               file.delete();
            } else {
               // and check if proofs are actually for the right theorem!
               DefaultTermParser tp = new DefaultTermParser();
               Term parsedLemma = tp.parse(new StringReader(lemmaString), Sort.FORMULA,
                       loadedProof.getServices(), loadedProof.getNamespaces(), new AbbrevMap());
               Term actual = loadedProof.root().sequent().succedent().get(0).formula();
               if (!actual.equalsModRenaming(parsedLemma)) {
                  System.out.println("Stored : " + parsedLemma);
                  System.out.println("Proven : " + actual);
                  fail("The proven lemma is different from the stored one.");
               }
            }

         }
      } finally {
         env.dispose();
      }
   }

   @Parameters(name = "{0}")
   public static List<String[]> data() throws IOException {

      URL url = DefinedSymbolsHandler.class.getResource("DefinedSymbolsHandler.preamble.xml");
      if (url == null) {
         throw new FileNotFoundException("Cannot find resource file which should have been generated by gradle");
      }

      Properties props = new Properties();
      try (InputStream in = url.openStream()) {
         props.loadFromXML(in);
      }

      List<String[]> result = new ArrayList<>();

      for (String name : props.stringPropertyNames()) {
         if (name.matches(".*\\.dl(\\.[0-9]+)?")) {
            String[] params = { name, props.getProperty(name) };
            result.add(params);
         }
      }

      return result;
   }

}
