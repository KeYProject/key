\rules(Strings:on){

  equalRegEx {
      \schemaVar \term RegEx rexp1, rexp2;
      \schemaVar \variables Seq string;
      \find (rexp1 = rexp2)
     \varcond(\notFreeIn(string, rexp1, rexp2))
      \replacewith (\forall string; (match(rexp1, string) <-> match(rexp2, string)))
  };


  //repeat

  repeatAxiom {
     \schemaVar \term RegEx rexp;
     \schemaVar \term Seq string;
     \schemaVar \term int nTimes;
     \schemaVar \variables int endIdx;

     \find (match(repeat(rexp, nTimes), string))
     \varcond(\notFreeIn(endIdx, rexp, nTimes, string))
     \replacewith(\if (nTimes < 0) 
                  \then ( 
                     false
                  ) \else (
		      \if (nTimes = 0) 
                      \then ( 
                         string = empty
                      ) \else (
			    \exists endIdx;(
                                endIdx   >= 0 &
                        	endIdx   <= seqLen(string) &
                                match(rexp, seqSub(string, 0, endIdx)) &
				match(repeat(rexp, nTimes-1), seqSub(string, endIdx, seqLen(string)))
                           )
		      )
                 )        
     )
  };


  // optional
  
  optAxiom {
     \schemaVar \term RegEx rexp;
     \schemaVar \term Seq string;

     \find (match(opt(rexp), string))
     \replacewith(match(repeat(rexp,0), string) | match(rexp, string))
     \heuristics (simplify)
  };

  // alternative
  altAxiom {
     \schemaVar \term RegEx rexp1, rexp2;
     \schemaVar \term Seq string;

     \find (match(alt(rexp1, rexp2), string))
     \replacewith (match(rexp1, string) | match(rexp2, string))
     \heuristics (simplify)
  };

  // regExConcat
  regExConcatAxiom {
     \schemaVar \term RegEx rexp1, rexp2;
     \schemaVar \term Seq string;
     \schemaVar \variables int endIdx;

     \find (match(regExConcat(rexp1, rexp2), string))
     \varcond(\notFreeIn(endIdx, rexp1, rexp2, string))
     \replacewith (
     		  \exists endIdx; (
                        endIdx >= 0 &
                        endIdx <= seqLen(string) &
                        match(rexp1, seqSub(string, 0, endIdx)) &
                        match(rexp2, seqSub(string, endIdx, seqLen(string)))
	          )
     )
     \heuristics (simplify)
  };


  // regEx
  regExAxiom {
     \schemaVar \term Seq stringAsPattern, string;

     \find (match(regEx(stringAsPattern), string))
     \replacewith (string = stringAsPattern)
     \heuristics (concrete)
  };

  // star

  repeatStarAxiom {
     \schemaVar \term RegEx rexp;
     \schemaVar \term Seq string;
     \schemaVar \variables int nTimes;

     \find (match(repeatStar(rexp), string))
     \varcond(\notFreeIn(nTimes, rexp, string))
     \replacewith (\exists nTimes;(nTimes >=0 & match(repeat(rexp, nTimes), string)))
     \heuristics (simplify)
  };

  // plus
  repeatPlusAxiom {
     \schemaVar \term RegEx rexp;
     \schemaVar \term Seq string;
     \schemaVar \variables int nTimes;

     \find (match(repeatPlus(rexp), string))
     \varcond(\notFreeIn(nTimes, rexp, string))
     \replacewith (\exists nTimes;(nTimes >=1 & match(repeat(rexp, nTimes), string)))
     \heuristics (simplify)
  };

}
