
\rules(reach:on){
    
    //--------------------------------------------------------------------------
    //axioms
    //--------------------------------------------------------------------------

    accDefinition {
	\schemaVar \term Heap h;
	\schemaVar \term LocSet s;
	\schemaVar \term Object o;
	\schemaVar \term deltaObject o2;
	\schemaVar \variables Field fv;
   
	\find(acc(h, s, o, o2))
	\varcond(\notFreeIn(fv, h), \notFreeIn(fv, s), \notFreeIn(fv, o), \notFreeIn(fv, o2))
	
	\replacewith(o != null & o2 != null & \exists fv; (elementOf(o, fv, s) & deltaObject::select(h, o, fv) = o2))
	
      	\heuristics(simplify)
    };
    
    
    reachDefinition {
	\schemaVar \term Heap h;
	\schemaVar \term LocSet s;
	\schemaVar \term Object o, o2;
	\schemaVar \term int n;
	\schemaVar \variables Object ov;
   
	\find(reach(h, s, o, o2, n))
	\varcond(\notFreeIn(ov, h), \notFreeIn(ov, s), \notFreeIn(ov, o), \notFreeIn(ov, o2), \notFreeIn(ov, n))
		
	\replacewith(n >= 0
	             & o != null
	             & o2 != null
	             & (n = 0 & o = o2 
	                | \exists ov; (reach(h, s, o, ov, n-1) & acc(h, s, ov, o2))))
    };
    
    
    
    //--------------------------------------------------------------------------
    //lemmata
    //--------------------------------------------------------------------------


    reachZero {
	\schemaVar \term Heap h;
	\schemaVar \term LocSet s;
	\schemaVar \term Object o, o2;
   
	\find(reach(h, s, o, o2, 0))
		
	\replacewith(o != null & o = o2)
	
	\heuristics(simplify)
    };
    
    
    reachOne {
	\schemaVar \term Heap h;
	\schemaVar \term LocSet s;
	\schemaVar \term Object o, o2;
   
	\find(reach(h, s, o, o2, 1))
		
	\replacewith(acc(h, s, o, o2))
	
	\heuristics(simplify)
    };   
    
    
    reachNull {
	\schemaVar \term Heap h;
	\schemaVar \term LocSet s;
	\schemaVar \term Object o;
	\schemaVar \term int n;
   
	\find(reach(h, s, o, null, n))
		
	\replacewith(false)
	
	\heuristics(simplify)
    };
    
    
    reachNull2 {
	\schemaVar \term Heap h;
	\schemaVar \term LocSet s;
	\schemaVar \term Object o2;
	\schemaVar \term int n;
   
	\find(reach(h, s, null, o2, n))
		
	\replacewith(false)
	
	\heuristics(simplify)
    };    
    
    
    reachAddOne {
	\schemaVar \term Heap h;
	\schemaVar \term LocSet s;
	\schemaVar \term Object o, o2;
	\schemaVar \term int n;
	\schemaVar \variables Object ov;	
   
	\find(reach(h, s, o, o2, 1 + n))
	\varcond(\notFreeIn(ov, h), \notFreeIn(ov, s), \notFreeIn(ov, o), \notFreeIn(ov, o2), \notFreeIn(ov, n))
		
	\replacewith(n >= -1
	             & o != null
	             & o2 != null
	             & (n = -1 & o = o2 
	                | \exists ov; (reach(h, s, o, ov, n) & acc(h, s, ov, o2))))
	
	\heuristics(simplify)
    };
    
    
    reachAddOne2 {
	\schemaVar \term Heap h;
	\schemaVar \term LocSet s;
	\schemaVar \term Object o, o2;
	\schemaVar \term int n;
	\schemaVar \variables Object ov;
   
	\find(reach(h, s, o, o2, n + 1))
	\varcond(\notFreeIn(ov, h), \notFreeIn(ov, s), \notFreeIn(ov, o), \notFreeIn(ov, o2), \notFreeIn(ov, n))
				
	\replacewith(n >= -1
	             & o != null
	             & o2 != null
	             & (n = -1 & o = o2 
	                | \exists ov; (reach(h, s, o, ov, n) & acc(h, s, ov, o2))))
	
	\heuristics(simplify)
    };    
    
    
    reachUniquePathSameSteps {
	\schemaVar \term Heap h;
	\schemaVar \term LocSet s;
	\schemaVar \term Object o, o2, o3;
	\schemaVar \term int n;
	\schemaVar \term Field f;
   
	\assumes(reach(h, allObjects(f), o, o2, n) ==>)    
	\find(reach(h, allObjects(f), o, o3, n) ==>)
	\varcond(\different(o2, o3))

	\add(o2 = o3 ==>)
	
	\heuristics(inReachableStateImplication)
    };    
    
    
    reachEndOfUniquePath {
	\schemaVar \term Heap h;
	\schemaVar \term LocSet s;
	\schemaVar \term Object o, o2, o3;
	\schemaVar \term int n, n2;
	\schemaVar \term Field f;
   
	\assumes(reach(h, allObjects(f), o, o2, n), 
	         alpha::select(h, o2, f) = null, 
	         alpha::select(h, o3, f) = null ==>)    
	\find(reach(h, allObjects(f), o, o3, n2) ==>)
	\varcond(\different(n, n2))

	\add(o2 = o3 & n = n2 ==>)
	
	\heuristics(inReachableStateImplication)
    };
    
         
    reachEndOfUniquePath2 {
	\schemaVar \term Heap h;
	\schemaVar \term LocSet s;
	\schemaVar \term Object o, o2, o3;
	\schemaVar \term int n, n2;
	\schemaVar \term Field f;
   
	\assumes(reach(h, allObjects(f), o, o2, n), 
	         alpha::select(h, o2, f) = null ==>)    
	\find(reach(h, allObjects(f), o, o3, n2) ==>)
	\varcond(\different(o, o2), \different(n, n2))

	\add(n2 < n | (o2 = o3 & n = n2) ==>)
	
	\heuristics(inReachableStateImplication)
    };
        
    reachDependenciesStoreSimple {
	\schemaVar \term Heap h;
	\schemaVar \term Field f, f2;
	\schemaVar \term any x;
	\schemaVar \term Object o, o2, o3;
	\schemaVar \term int n;
   
	\find(reach(store(h, o3, f2, x), allObjects(f), o, o2, n))
	\varcond(\metaDisjoint(f, f2))
	
	\replacewith(reach(h, allObjects(f), o, o2, n))
	       
	\heuristics(simplify)
    };


    reachDependenciesStoreSimpleEQ {
	\schemaVar \term Heap h, h2;
	\schemaVar \term Field f, f2;
	\schemaVar \term any x;
	\schemaVar \term Object o, o2, o3;
	\schemaVar \term int n;
   
        \assumes(store(h, o3, f2, x) = h2 ==>)
	\find(reach(h2, allObjects(f), o, o2, n))
	\varcond(\metaDisjoint(f, f2))
	
	\replacewith(reach(h, allObjects(f), o, o2, n))
	       
	\heuristics(simplify)
    };


    reachDoesNotDependOnCreatedness {
	\schemaVar \term Heap h;
	\schemaVar \term LocSet s;
	\schemaVar \term Object o, o2, o3;
	\schemaVar \term int n;   
	\find(reach(create(h, o3), s, o, o2, n))
	
	\replacewith(reach(h, s, o, o2, n))
	       
	\heuristics(simplify)
    };
    
    reachDependenciesStore {
	\schemaVar \term Heap h;
	\schemaVar \term Field f;
	\schemaVar \term any x;
	\schemaVar \term LocSet s;
	\schemaVar \term Object o, o2, o3;
	\schemaVar \term int n;
	\schemaVar \variables int nv;
   
	\find(reach(store(h, o3, f, x), s, o, o2, n))
	\sameUpdateLevel	
	\varcond(\notFreeIn(nv, h), 
	         \notFreeIn(nv, o3),
	         \notFreeIn(nv, f),
	         \notFreeIn(nv, x),
	         \notFreeIn(nv, s),
	         \notFreeIn(nv, o),
	         \notFreeIn(nv, o2),
	         \notFreeIn(nv, n))
		
	"Dependencies changed":
	  \add(==> !(\exists nv; (nv < n & reach(h, s, o, o3, nv)) & elementOf(o3, f, s)));
	
	"Dependencies unchanged":
	  \replacewith(reach(h, s, o, o2, n)) 
	  \add(!(\exists nv; (nv < n & reach(h, s, o, o3, nv)) & elementOf(o3, f, s)) ==>)
    };         
    

    reachDependenciesStoreEQ {
	\schemaVar \term Heap h, h2;
	\schemaVar \term Field f;
	\schemaVar \term any x;
	\schemaVar \term LocSet s;
	\schemaVar \term Object o, o2, o3;
	\schemaVar \term int n;
	\schemaVar \variables int nv;
   
        \assumes(store(h, o3, f, x) = h2 ==>)
	\find(reach(h2, s, o, o2, n))
	\sameUpdateLevel	
	\varcond(\notFreeIn(nv, h), 
	         \notFreeIn(nv, o3),
	         \notFreeIn(nv, f),
	         \notFreeIn(nv, x),
	         \notFreeIn(nv, s),
	         \notFreeIn(nv, o),
	         \notFreeIn(nv, o2),
	         \notFreeIn(nv, n))
		
	"Dependencies changed":
	  \add(==> !(\exists nv; (nv < n & reach(h, s, o, o3, nv)) & elementOf(o3, f, s)));
	
	"Dependencies unchanged":
	  \replacewith(reach(h, s, o, o2, n)) 
	  \add(!(\exists nv; (nv < n & reach(h, s, o, o3, nv)) & elementOf(o3, f, s)) ==>)
    };         
    
    
    reachDependenciesAnon {
	\schemaVar \term Heap h, h2;
	\schemaVar \term LocSet s, s2;
	\schemaVar \term Object o, o2;
	\schemaVar \term int n;
	\schemaVar \variables Object ov;
	\schemaVar \variables Field fv;
	\schemaVar \variables int nv;
   
	\find(reach(anon(h, s2, h2), s, o, o2, n))
	\sameUpdateLevel	
	\varcond(\notFreeIn(ov, h), 
	         \notFreeIn(ov, s2),
	         \notFreeIn(ov, h2),
	         \notFreeIn(ov, s),
	         \notFreeIn(ov, o),
	         \notFreeIn(ov, o2),
	         \notFreeIn(ov, n),
	         \notFreeIn(fv, h), 
	         \notFreeIn(fv, s2),
	         \notFreeIn(fv, h2),
	         \notFreeIn(fv, s),
	         \notFreeIn(fv, o),
	         \notFreeIn(fv, o2),
	         \notFreeIn(fv, n),
	         \notFreeIn(nv, h), 
	         \notFreeIn(nv, s2),
	         \notFreeIn(nv, h2),
	         \notFreeIn(nv, s),
	         \notFreeIn(nv, o),
	         \notFreeIn(nv, o2),
	         \notFreeIn(nv, n))
		
	"Dependencies changed":
	  \add(==> \forall ov; \forall fv; !(elementOf(ov, fv, s2) & \exists nv; (nv < n & reach(h, s, o, ov, nv)) & elementOf(ov, fv, s)));
	
	"Dependencies unchanged":
	  \replacewith(reach(h, s, o, o2, n)) 
	  \add(\forall ov; \forall fv; !(elementOf(ov, fv, s2) & \exists nv; (nv < n & reach(h, s, o, ov, nv)) & elementOf(ov, fv, s)) ==>)
    };
    
    
    reachDependenciesAnonCoarse {
	\schemaVar \term Heap h, h2;
	\schemaVar \term LocSet s, s2;
	\schemaVar \term Object o, o2;
	\schemaVar \term int n;
	\schemaVar \variables Object ov;
	\schemaVar \variables Field fv;
	\schemaVar \variables int nv;
   
	\find(reach(anon(h, s2, h2), s, o, o2, n))
	\sameUpdateLevel	
	\varcond(\notFreeIn(ov, h), 
	         \notFreeIn(ov, s2),
	         \notFreeIn(ov, h2),
	         \notFreeIn(ov, s),
	         \notFreeIn(ov, o),
	         \notFreeIn(ov, o2),
	         \notFreeIn(ov, n),
	         \notFreeIn(fv, h), 
	         \notFreeIn(fv, s2),
	         \notFreeIn(fv, h2),
	         \notFreeIn(fv, s),
	         \notFreeIn(fv, o),
	         \notFreeIn(fv, o2),
	         \notFreeIn(fv, n),
	         \notFreeIn(nv, h), 
	         \notFreeIn(nv, s2),
	         \notFreeIn(nv, h2),
	         \notFreeIn(nv, s),
	         \notFreeIn(nv, o),
	         \notFreeIn(nv, o2),
	         \notFreeIn(nv, n))
		
	"Dependencies changed":
	  \add(==> \forall ov; \forall fv; !(elementOf(ov, fv, s2) & \exists nv; (reach(h, s, o, ov, nv)) & elementOf(ov, fv, s)));
	
	"Dependencies unchanged":
	  \replacewith(reach(h, s, o, o2, n)) 
	  \add(\forall ov; \forall fv; !(elementOf(ov, fv, s2) & \exists nv; (reach(h, s, o, ov, nv)) & elementOf(ov, fv, s)) ==>)
    };        
    
    
    only_created_objects_are_reachable {
         \schemaVar \term Heap h;
         \schemaVar \term LocSet s;
         \schemaVar \term Object o, o2;
         \schemaVar \term int n;
         
         \assumes(wellFormed(h) ==> o = null)
         \find(reach(h, s, o, o2, n) ==> )
         \add(!boolean::select(h, o, java.lang.Object::<created>) = TRUE  
              | boolean::select(h, o2, java.lang.Object::<created>) = TRUE ==>)
         \heuristics(inReachableStateImplication)
    };
    
    
    reach_does_not_depend_on_fresh_locs {
	\schemaVar \term Heap h, h2;
	\schemaVar \term LocSet s;
	\schemaVar \term Object o, o2;
	\schemaVar \term int n;
   
   	\assumes(==> o = null)
	\find(reach(anon(h, empty, h2), s, o, o2, n))
				
        \replacewith(reach(h, s, o, o2, n));
        \add(==> wellFormed(h) & boolean::select(h, o, java.lang.Object::<created>) = TRUE)
	
	\heuristics(simplify)
     };    
     
     
    reach_does_not_depend_on_fresh_locs_EQ {
	\schemaVar \term Heap h, h2;
	\schemaVar \term LocSet s;
	\schemaVar \term Object o, o2;
	\schemaVar \term int n;
	\schemaVar \term Heap EQ;
   
   	\assumes(anon(h, empty, h2) = EQ ==> o = null)
	\find(reach(EQ, s, o, o2, n))
				
        \replacewith(reach(h, s, o, o2, n));
        \add(==> wellFormed(h) & boolean::select(h, o, java.lang.Object::<created>) = TRUE)
	
	\heuristics(simplify)
     };       
}
