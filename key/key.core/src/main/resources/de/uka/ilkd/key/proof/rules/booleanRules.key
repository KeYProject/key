// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 

\schemaVariables{
  \term boolean bo, b1, b2;  
}


\rules {
	boolean_equal { \find (bo = bo) \replacewith(true)
	\heuristics(simplify_boolean, concrete)};

	boolean_equal_2 { \find (b1=TRUE <-> b2=TRUE) \replacewith(b1=b2) 
			       \heuristics(simplify_boolean, concrete)
			       \displayname "boolean_equal"
			};

	boolean_not_equal_1 { \find (TRUE = FALSE) \replacewith(false) 
                              \heuristics(simplify_boolean, concrete)
                              \displayname "boolean_not_equal"
                            };
	boolean_not_equal_2 { \find (FALSE = TRUE) \replacewith(false) 
                              \heuristics(simplify_boolean, concrete)
                              \displayname "boolean_not_equal"
                            };


	true_to_not_false {\find (bo=TRUE) \replacewith(!bo=FALSE)};

 //anything to ...=TRUE:

        false_to_not_true {
		\find (bo = FALSE) 
		\replacewith(!bo=TRUE)
		\heuristics(simplify_boolean, concrete)};       

	boolean_true_commute { 
           \find (TRUE = bo) \replacewith (bo = TRUE) 
           \heuristics(simplify_boolean)
           \displayname "boolean commute"};

	boolean_false_commute { 
           \find (FALSE = bo) \replacewith (bo = FALSE) 
           \heuristics(simplify_boolean)
           \displayname "boolean commute"};


	ex_bool {
	   \schemaVar \variables boolean x;
	   \schemaVar \formula c;
	   \find(\exists x; c) 
           \replacewith({\subst x; FALSE}c | {\subst x; TRUE}c)
           \heuristics(boolean_cases) 
        };

	all_bool {
	   \schemaVar \variables boolean x;	
	   \schemaVar \formula c;	
	   \find(\forall x; c)
           \replacewith({\subst x; FALSE}c & {\subst x; TRUE}c)
           \heuristics(boolean_cases) 
        };


///////////////////////////////////////////////////////////////////////////////

  apply_eq_boolean { \assumes ( ==> bo = TRUE ) \find ( bo ) \sameUpdateLevel
                                          \replacewith ( FALSE )
                     \heuristics ( apply_equations ) };

  apply_eq_boolean_2 { \assumes ( ==> bo = FALSE ) \find ( bo ) \sameUpdateLevel
                                           \replacewith ( TRUE )
                     \heuristics ( apply_equations )
                     \displayname "apply_eq_boolean" };

  apply_eq_boolean_rigid { \schemaVar \term[rigid] boolean br;
  			   \assumes ( ==> br = TRUE ) \find ( br )
                                                \replacewith ( FALSE )
                           \heuristics ( apply_equations )
                           \displayname "apply_eq_boolean" };

  apply_eq_boolean_rigid_2 { \schemaVar \term[rigid] boolean br;
                             \assumes ( ==> br = FALSE ) \find ( br )
                                                   \replacewith ( TRUE )
                             \heuristics ( apply_equations )
                             \displayname "apply_eq_boolean" };

}
