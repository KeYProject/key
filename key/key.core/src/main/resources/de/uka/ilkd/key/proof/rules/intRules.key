// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 



\schemaVariables {
  \term int left, right, i, i0, i1 ;
  \term numbers iz, jz;
}


/**
  READ FIRST BEFORE EDITING:
    This file interpretes integer semantics sensitive functions
  faithfully to their definition in the Java Language Specification.

  In case of changes PLEASE preserve the files intended meaning. If
  you want to test some rules before implementing them completely,
  please create a new file and include it into the standardRules.key

  Files:
     // rules treating Java programs 

     integerAssignment2UpdateRules.key: all integer related assignment
                                        rules      
  

     integerCommonRules.key: integer semantics independent rules which 
         transform programs

     // rules treating integer semantics sensitive functions 

     intRules.key: rules interpreting the generic translation
        functions 'java...' faithfully according to the Java Language
        Specification (sound, but a lot of divisions and modulo
        computation need to be performed)

     intRulesIgnoringOverflow.key: rules interpreting the generic translation
        functions 'java...' without overflow (not sound)  

     intRulesArith.key: rules interpreting the generic translation
        functions 'java...' as in intRulesIgnoringOverflow.key, but 
        requires to show absence of overflow or that the property to
        be proven does not depend on the value of an expression where
        an overflow occurred (sound, but incomplete)
   
     // rules treating integer semantics insensitive functions 

     integerSimplificationRules.key: rules for arithmetic functions
         that do not depend on the chosen integer semantics
        
*/


\rules(programRules:Java, intRules:javaSemantics){

//------------------------------------------------------------------------
// Rules to expand the predicates inByte, inShort, inInt, and inLong
//------------------------------------------------------------------------

  //reviewed 04/16/2004, St.S.
  expand_inByte {\find (inByte(i)) 
                 \replacewith ( leq(i, byte_MAX) & leq(byte_MIN, i) ) 
                 \heuristics (defOps_expandRanges) };
  //reviewed 04/16/2004, St.S.
  expand_inChar {\find (inChar(i)) 
                 \replacewith ( leq(i, char_MAX) & leq(char_MIN, i) ) 
                 \heuristics (defOps_expandRanges) };
  //reviewed 04/16/2004, St.S.
  expand_inShort {\find (inShort(i)) 
                  \replacewith ( leq(i, short_MAX) & leq(short_MIN, i) ) 
                  \heuristics (defOps_expandRanges) };
  //reviewed 04/16/2004, St.S.
  expand_inInt {\find (inInt(i)) 
                \replacewith ( leq(i, int_MAX) & leq(int_MIN, i) ) 
                \heuristics (defOps_expandRanges) }; 
  //reviewed 04/16/2004, St.S.
  expand_inLong {\find (inLong(i)) 
		 \replacewith ( leq(i, long_MAX) & leq(long_MIN, i) )
                 \heuristics (defOps_expandRanges)}; 


//--------------------------------------------------------------------------
// Axioms defining the integer translation functions 
//--------------------------------------------------------------------------

  translateJavaUnaryMinusInt {
     \find(javaUnaryMinusInt(left))
     \replacewith(unaryMinusJint(left))
     \heuristics(javaIntegerSemantics)
     \displayname "translateJavaUnaryMinus"
  };


  translateJavaUnaryMinusLong {
     \find(javaUnaryMinusLong(left))
     \replacewith(unaryMinusJlong(left))
     \heuristics(javaIntegerSemantics)  
     \displayname "translateJavaUnaryMinus"
  };


  translateJavaBitwiseNegation {
     \find(javaBitwiseNegation(left))
     \replacewith(sub(neg(left),1))
     \heuristics(javaIntegerSemantics)  
     \displayname "translateJavaUnaryMinus"
  };
  
  translateJavaAddInt {
     \find(javaAddInt(left,right))
     \replacewith(addJint(left, right))
     \heuristics(javaIntegerSemantics)
     \displayname "translateJavaAdd"
  };


  translateJavaAddLong{
    \find(javaAddLong(left,right))
    \replacewith(addJlong(left, right))
    \heuristics(javaIntegerSemantics)
    \displayname "translateJavaAdd"
  };

  translateJavaSubInt{
    \find(javaSubInt(left,right))
    \replacewith(subJint(left, right))
    \heuristics(javaIntegerSemantics)
    \displayname "translateJavaSub"
  };
  
  translateJavaSubLong{
    \find(javaSubLong(left,right))
    \replacewith(subJlong(left, right))  
    \heuristics(javaIntegerSemantics)
    \displayname "translateJavaSub"
  };
  
  translateJavaMulInt{
    \find(javaMulInt(left,right))
    \replacewith(mulJint(left,right))
    \heuristics(javaIntegerSemantics)
    \displayname "translateJavaMul"
  };
  
  translateJavaMulLong{
    \find(javaMulLong(left,right))
    \replacewith(mulJlong(left,right))
    \heuristics(javaIntegerSemantics)
    \displayname "translateJavaMul"
  };
  
  translateJavaMod{
    \find(javaMod(left,right))
    \replacewith(jmod(left,right))
    \heuristics(javaIntegerSemantics)
    \displayname "translateJavaMod"
  };
  
  translateJavaDivInt{
    \find(javaDivInt(left,right))
    \replacewith(divJint(left,right))
    \heuristics(javaIntegerSemantics)
    \displayname "translateJavaDiv"
  };
  
  translateJavaDivLong{
    \find(javaDivLong(left,right))
    \replacewith(divJlong(left,right))
    \heuristics(javaIntegerSemantics)
    \displayname "translateJavaDiv"
  };
    
  translateJavaCastByte{
      \find(javaCastByte(left))
      \replacewith(moduloByte(left))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaCast"
  };
  
  translateJavaCastShort{
      \find(javaCastShort(left))
      \replacewith(moduloShort(left))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaCast"
  };
  
  translateJavaCastInt{
      \find(javaCastInt(left))
      \replacewith(moduloInt(left))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaCast"
  };
  
  translateJavaCastLong{
      \find(javaCastLong(left))
      \replacewith(moduloLong(left))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaCast"
  };
  
  translateJavaCastChar{
      \find(javaCastChar(left))
      \replacewith(moduloChar(left))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaCast"
  };

  translateJavaShiftRightInt{
      \find(javaShiftRightInt(left,right))
      \replacewith(shiftrightJint(left,right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaShiftRight"
  };
  
  translateJavaShiftRightLong{
      \find(javaShiftRightLong(left,right))
      \replacewith(shiftrightJlong(left,right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaShiftRight"
  };
  
  translateJavaShiftLeftInt{
      \find(javaShiftLeftInt(left,right))
      \replacewith(shiftleftJint(left,right))      
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaShiftLeft"
  };
  
  translateJavaShiftLeftLong{
      \find(javaShiftLeftLong(left,right))
      \replacewith(shiftleftJlong(left,right))      
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaShiftLeft"
  };

//added for a demo
//================================================
/*  javaShiftLeftJInt2Mult{
      \find(shiftleftJint(left,Z(iz)))
      \replacewith(mulJint(left, shiftleftJint(1,Z(iz))))
      \heuristics(javaIntegerSemantics)
  };

  javaShiftLeftJLong2Mult{
      \find(shiftleftJlong(left,Z(iz)))
      \replacewith(mulJlong(left, shiftleftJlong(1,Z(iz))))
      \heuristics(javaIntegerSemantics)
  };

  javaShiftRightJInt2DivCut{
      \find(shiftrightJint(left,right))\sameUpdateLevel
      \replacewith(divJint(left, shiftleftJint(1,right)))
      \add(left>=0 ==>);
      \add(==> left>=0)
      \heuristics(javaIntegerSemantics)
  };

  javaShiftRightJLong2DivCut{
      \find(shiftrightJlong(left,Z(iz)))\sameUpdateLevel
      \replacewith(divJlong(left, shiftleftJlong(1,Z(iz))))
      \add(left>=0 ==>);
      \add(==> left>=0)
      \heuristics(javaIntegerSemantics)
  };
*/
//================================================
  
  translateJavaUnsignedShiftRightInt{
      \find(javaUnsignedShiftRightInt(left,right))
      \replacewith(unsignedshiftrightJint(left,right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaUnsignedShiftRight"
  };
  
  translateJavaUnsignedShiftRightLong{
      \find(javaUnsignedShiftRightLong(left,right))
      \replacewith(unsignedshiftrightJlong(left,right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaUnsignedShiftRight"
  };
  
  translateJavaBitwiseOrInt{
      \find(javaBitwiseOrInt(left,right))
      \replacewith(orJint(left,right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaBitwiseOr"
  };
  
  translateJavaBitwiseOrLong{
      \find(javaBitwiseOrLong(left,right))
      \replacewith(orJlong(left,right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaBitwiseOr"
  };
  
  translateJavaBitwiseAndInt{
      \find(javaBitwiseAndInt(left,right))
      \replacewith(andJint(left,right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaBitwiseAnd"
  };
  
  translateJavaBitwiseAndLong{
      \find(javaBitwiseAndLong(left,right))
      \replacewith(andJlong(left,right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaBitwiseAnd"
  };
  
  translateJavaBitwiseXOrInt{
      \find(javaBitwiseXOrInt(left,right))
      \replacewith(xorJint(left,right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaBitwiseXOr"
  };
  
  translateJavaBitwiseXOrLong{
      \find(javaBitwiseXOrLong(left,right))
      \replacewith(xorJlong(left,right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaBitwiseXOr"
  };


}



\rules {

// --------------------------------------------------------------------
// -- Rules to replace the min/max constants by concrete values
// --------------------------------------------------------------------

  //reviewed 04/16/2004, St.S.
  replace_byte_MAX {\find (byte_MAX)   \replacewith(127)
          \heuristics(defOps_expandRanges)};
  //reviewed 04/16/2004, St.S.
  replace_byte_MIN {\find (byte_MIN)   \replacewith(-128)
          \heuristics(defOps_expandRanges)};
  //reviewed 04/16/2004, St.S.
  replace_char_MAX {\find (char_MAX)   \replacewith(65535)
          \heuristics(defOps_expandRanges)};
  //reviewed 04/16/2004, St.S.
  replace_char_MIN {\find (char_MIN)   \replacewith(0)
          \heuristics(defOps_expandRanges)};
  //reviewed 04/16/2004, St.S.
  replace_short_MAX {\find (short_MAX)   \replacewith(32767)
          \heuristics(defOps_expandRanges)};
  //reviewed 04/16/2004, St.S.
  replace_short_MIN {\find (short_MIN)   \replacewith(-32768)
          \heuristics(defOps_expandRanges)};
  //reviewed 04/16/2004, St.S.
  replace_int_MAX {\find (int_MAX)   \replacewith(2147483647)
          \heuristics(defOps_expandRanges)};
  //reviewed 04/16/2004, St.S.
  replace_int_MIN {\find (int_MIN)   \replacewith(-2147483648)
          \heuristics(defOps_expandRanges)};
  //reviewed 04/16/2004, St.S.
  replace_long_MAX {\find (long_MAX)   \replacewith(9223372036854775807)
          \heuristics(defOps_expandRanges)};
  //reviewed 04/16/2004, St.S.
  replace_long_MIN {\find (long_MIN)   \replacewith(-9223372036854775808)
          \heuristics(defOps_expandRanges)};


// --------------------------------------------------------------------
// -- Rules to replace the min/max constants by concrete values
// --------------------------------------------------------------------

  //reviewed 04/19/2004, St.S.
  replace_byte_RANGE {\find (byte_RANGE)   \replacewith(256)
          \heuristics(defOps_expandRanges) };

  //reviewed 04/19/2004, St.S.
  replace_byte_HALFRANGE {\find (byte_HALFRANGE)  \replacewith(128)
          \heuristics(defOps_expandRanges) };

  //reviewed 04/19/2004, St.S.
  replace_short_RANGE {\find (short_RANGE)   \replacewith(65536)
          \heuristics(defOps_expandRanges) };

  //reviewed 04/19/2004, St.S.
  replace_short_HALFRANGE {\find (short_HALFRANGE)  \replacewith(32768)
          \heuristics(defOps_expandRanges) };  

  //reviewed 04/19/2004, St.S.
  replace_char_RANGE {\find (char_RANGE)   \replacewith(65536)
          \heuristics(defOps_expandRanges) };

  //reviewed 04/19/2004, St.S.
  replace_int_RANGE {\find (int_RANGE)   \replacewith(4294967296)
          \heuristics(defOps_expandRanges) };

  //reviewed 04/19/2004, St.S.
  replace_int_HALFRANGE {\find (int_HALFRANGE)  \replacewith(2147483648)
          \heuristics(defOps_expandRanges) };  

  //reviewed 04/19/2004, St.S.
  replace_long_RANGE {\find (long_RANGE)   \replacewith(18446744073709551616)
          \heuristics(defOps_expandRanges) };
  //reviewed 04/19/2004, St.S.
  replace_long_HALFRANGE {\find (long_HALFRANGE)  \replacewith(9223372036854775808)
          \heuristics(defOps_expandRanges) };  
  

//------------------------------------------------------------------------
// rules handling modulo functions which simulate Java overflow
//------------------------------------------------------------------------

  //reviewed 04/20/2004, St.S.
  expand_addJint {\find (addJint(i,i1))
    \replacewith (moduloInt(add(i,i1)))
    \heuristics(defOps_expandJNumericOp) };

  //reviewed 04/20/2004, St.S.
  expand_unaryMinusJint {\find (unaryMinusJint(i))
    \replacewith (moduloInt(neg(i)))
    \heuristics(defOps_expandJNumericOp)};

  //reviewed 04/20/2004, St.S.
  expand_subJint {\find (subJint(i,i1))
    \replacewith (moduloInt(sub(i,i1)))
    \heuristics(defOps_expandJNumericOp)};

  //reviewed 04/20/2004, St.S.
  expand_mulJint {\find (mulJint(i,i1))
    \replacewith (moduloInt(mul(i,i1)))
    \heuristics(defOps_expandJNumericOp)};

  //reviewed 04/20/2004, St.S.
  expand_divJint {\find (divJint(i,i1))
    \replacewith (moduloInt(jdiv(i,i1)))
    \heuristics(defOps_expandJNumericOp)};

  //reviewed 04/20/2004, St.S.
  expand_modJint {\find (modJint(i,i1))
    \replacewith (moduloInt(jmod(i,i1)))
    \heuristics(defOps_expandJNumericOp)};

  //reviewed 11/30/2004, St.S.
  expand_addJlong {\find (addJlong(i,i1))
    \replacewith (moduloLong(add(i,i1)))
    \heuristics(defOps_expandJNumericOp)};

  //reviewed 11/30/2004, St.S.
  expand_unaryMinusJlong {\find (unaryMinusJlong(i))
    \replacewith (moduloLong(neg(i)))
    \heuristics(defOps_expandJNumericOp)};

  //reviewed 11/30/2004, St.S.
  expand_subJlong {\find (subJlong(i,i1))
    \replacewith (moduloLong(sub(i,i1)))
    \heuristics(defOps_expandJNumericOp)};

  //reviewed 11/30/2004, St.S.
  expand_mulJlong {\find (mulJlong(i,i1))
    \replacewith (moduloLong(mul(i,i1)))
    \heuristics(defOps_expandJNumericOp)};

  //reviewed 11/30/2004, St.S.
  expand_divJlong {\find (divJlong(i,i1))
    \replacewith (moduloLong(jdiv(i,i1)))
    \heuristics(defOps_expandJNumericOp)};

  //reviewed 11/30/2004, St.S.
  expand_modJlong {\find (modJlong(i,i1))
    \replacewith (moduloLong(jmod(i,i1)))
    \heuristics(defOps_expandJNumericOp)};


  //reviewed 04/20/2004, St.S.
  expand_moduloByte {\find (moduloByte(i)) 
    \replacewith (add(byte_MIN,mod(add(byte_HALFRANGE,i),byte_RANGE)))
    \heuristics(defOps_expandJNumericOp)};

  //reviewed 04/20/2004, St.S.
  expand_moduloShort {\find (moduloShort(i)) 
    \replacewith (add(short_MIN,mod(add(short_HALFRANGE,i),short_RANGE)))
    \heuristics(defOps_expandJNumericOp)};

  //reviewed 04/20/2004, St.S.
  expand_moduloInteger {\find (moduloInt(i)) 
    \replacewith (add(int_MIN,mod(add(int_HALFRANGE,i), int_RANGE)))
    \heuristics(defOps_expandJNumericOp)};

  //reviewed 04/20/2004, St.S.
  expand_moduloLong {\find (moduloLong(i)) 
    \replacewith (add(long_MIN,mod(add(long_HALFRANGE,i), long_RANGE)))
    \heuristics(defOps_expandJNumericOp)};

  expand_moduloChar {\find (moduloChar(i)) 
    \replacewith (mod(i,char_MAX + 1))
    \heuristics(defOps_expandJNumericOp)};

}

\rules(intRules:javaSemantics) {
//--------------------------------------------------------------------------
// Lemmas for easy elimination of moduloInt
//--------------------------------------------------------------------------

  // soundness proofs exists but can currently not be loaded
  moduloIntFixpoint {
    \schemaVar \term int t;
    
    \assumes( inInt(t) ==> )
    \find( moduloInt( t ) ) \sameUpdateLevel
    \replacewith ( t )
    
  };
 
  moduloIntFixpointInline {
    \schemaVar \term int t;
    \schemaVar \skolemTerm int moduloT;
    
    \find( moduloInt( t ) ) \sameUpdateLevel
    \varcond ( \newDependingOn(moduloT, t) )
    \replacewith( moduloT )
    \add(\if ( inInt(t) ) \then ( t ) \else ( moduloT ) = moduloT, moduloInt(t) = moduloT ==>)
     
//    \heuristics ( defOps_expandModulo )
  };
 
 
 
  // soundness proofs exists but can currently not be loaded
  moduloLongFixpoint {
    \schemaVar \term int t;
    
    \assumes( inLong(t) ==> )
    \find( moduloLong( t ) ) \sameUpdateLevel
    \replacewith ( t )
    
  };
  
            
  moduloLongFixpointInline {
    \schemaVar \term int t;
    \schemaVar \skolemTerm int moduloT;
    
    \find( moduloLong( t ) ) \sameUpdateLevel
    \varcond ( \newDependingOn(moduloT, t) )
    \replacewith( moduloT )
    \add(\if ( inLong(t) ) \then ( t ) \else ( moduloT ) = moduloT, moduloLong(t) = moduloT ==>)
    
 //   \heuristics ( defOps_expandModulo )
  };


  // soundness proofs exists but can currently not be loaded
  moduloShortFixpoint {
    \schemaVar \term int t;
    
    \assumes( inShort(t) ==> )
    \find( moduloShort( t ) ) \sameUpdateLevel
    \replacewith ( t )
    
  };

  moduloShortFixpointInline {
    \schemaVar \term int t;
    \schemaVar \skolemTerm int moduloT;
    
    \find( moduloShort( t ) ) \sameUpdateLevel
    \varcond ( \newDependingOn(moduloT, t) )
    \replacewith ( moduloT ) 
    \add( \if ( inShort(t) ) \then ( t ) \else ( moduloT ) = moduloT, moduloShort(t) = moduloT ==> )
    
 //   \heuristics ( defOps_expandModulo )
  };


  // soundness proofs exists but can currently not be loaded
  moduloByteFixpoint {
    \schemaVar \term int t;
    
    \assumes( inByte(t) ==> )
    \find( moduloByte( t ) ) \sameUpdateLevel
    \replacewith ( t )
  };
 
  moduloByteFixpointInline {
    \schemaVar \term int t;
    \schemaVar \skolemTerm int moduloT;
  
    \find( moduloByte( t ) ) \sameUpdateLevel
    \varcond ( \newDependingOn(moduloT, t) )
    \replacewith ( moduloT ) 
    \add( \if ( inByte(t) ) \then ( t ) \else ( moduloT ) = moduloT, moduloByte(t) = moduloT ==> )
    
 //   \heuristics ( defOps_expandModulo )
  };
 
  // soundness proofs exists but can currently not be loaded
  moduloCharFixpoint {
    \schemaVar \term int t;
    
    \assumes( inChar(t) ==> )
    \find( moduloChar( t ) ) \sameUpdateLevel
    \replacewith ( t )
  };

  moduloCharFixpointInline {
    \schemaVar \term int t;
    \schemaVar \skolemTerm int moduloT;
    
    \find( moduloChar( t ) ) \sameUpdateLevel
    \varcond ( \newDependingOn(moduloT, t) )
    \replacewith ( moduloT ) 
    \add( \if ( inChar(t) ) \then ( t ) \else ( moduloT ) = moduloT, moduloChar(t) = moduloT ==> )
    
 //   \heuristics ( defOps_expandModulo )
  };
 

}