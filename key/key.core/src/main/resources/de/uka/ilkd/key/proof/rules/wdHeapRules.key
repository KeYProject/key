// This file is part of KeY - Integrated Deductive Software Design
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General
// Public License. See LICENSE.TXT for details.
//

\schemaVariables {
	\term any a, b;
	\term int i;
	\term Heap g, h;
	\term Object o;
	\term Field f;
	\term LocSet l;
}

\rules(wdChecks:on) {
	wd_Heap_ArrLength {

		\find (
			wd( length(o) )
		)
		\varcond (
			\isArray(o)
		)
		\replacewith (
			wd(o) & o != null
		)
		\heuristics ( simplify )
	};

	wd_Heap_Create {

		\find (
			wd( create(h, o) )
		 )
		\replacewith (
			wd(h) & wd(o) & wellFormed(h) & o != null
		 )
		\heuristics ( simplify )
	};

	wd_Heap_Reference_Created {

		\find (
			wd( alpha::select(h, o, java.lang.Object::<created>) )
		)
		\replacewith (
			wd(h) & wd(o) & wellFormed(h) & o != null
		)
		\heuristics ( simplify )
	};

	wd_Heap_Reference {

		\find (
			wd( alpha::select(h, o, f) )
		)
		\varcond (
			\not \isArray(o),
			\not \isStaticField(f)
		)
		\replacewith (
			wd(h) & wd(o) & wd(f) & wellFormed(h) & o != null
			& (f = java.lang.Object::<created> | boolean::select(h, o, java.lang.Object::<created>) = TRUE)
		)
		\heuristics ( simplify )
	};

	wd_Heap_Reference_Static {

		\find (
			wd( alpha::select(h, o, f) )
		)
		\varcond (
			\not \isArray(o),
			\isStaticField(f)
		)
		\replacewith (
			wd(h) & wd(o) & wd(f) & wellFormed(h) & o = null
		)
		\heuristics ( simplify )
	};

	wd_Heap_Reference_Array {

		\find (
			wd( alpha::select(h, o, arr(i)) )
		)
		\varcond (
			\isArray(o)
		)
		\replacewith (
			wd(h) & wd(o) & wd(i) & wellFormed(h) & o != null
			& boolean::select(h, o, java.lang.Object::<created>) = TRUE
			& leq(0,i) & lt(i,length(o))
		)
		\heuristics ( simplify )
	};

	wd_Heap_Anon {

		\find (
			wd( anon(h, l, g) )
		 )
		\replacewith (
			wd(h) & wd(l) & wd(g) & wellFormed(h) & wellFormed(g)
		 )
		\heuristics ( simplify )
	};

	wd_Heap_Memset {

		\find (
			wd( memset(h, l, a) )
		 )
		\replacewith (
			wd(h) & wd(l) & wd(a) & wellFormed(h)
		 )
		\heuristics ( simplify )
	};

	wd_Heap_Store {

		\find (
			wd( store(h, o, f, a) )
		 )
		\replacewith (
			wd(h) & wd(o) & wd(f) & wd(a) & wellFormed(h) & o != null
			& boolean::select(h, o, java.lang.Object::<created>) = TRUE
		 )
		\heuristics ( simplify )
	};

	wd_Heap_Pred_WellFormed {

		\find (
			WD( wellFormed(h) )
		)
		\replacewith (
			wd(h)
		)
		\heuristics ( simplify )
	};

	wd_Heap_Pred_ArrStoreValid {
		\find (
			WD( arrayStoreValid(a, b) )
		 )
		\replacewith (
			wd(a) & wd(b)
		 )
		\heuristics ( simplify )
	};

	wd_Heap_Pred_NonNull {
		\find (
			WD( nonNull(h, o, i) )
		 )
		\replacewith (
			wd(h) & wd(o) & wd(i)
		 )
		\heuristics ( simplify )
	};
}