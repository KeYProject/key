// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 


// This file contains rules for JML's \bigint type (i.e. mathematical integers).
// The semantics of \bigint are independent of the respectively used Java int semantics,
// i.e. every operation is mapped to the corresponding mathematical operation.
// Bitwise operations do not exist for \bigint.
// Author: Daniel Bruns, last changed 2011-12-05

\schemaVariables {

  \modalOperator { diamond, box } #allmodal;
  \program Variable #loc ;
  \program LeftHandSide #lhs;
  \formula post;
  \program JavaBigintExpression #seBigint;
  \program AnyNumberTypeExpression #seAny;
}


\rules(programRules:Java,bigint:on) {

// identity and widening casts

  widening_identity_cast_bigint { 
      \find (\modality{#allmodal}{.. #lhs = (\bigint) #seAny; ...}\endmodality(post))
      \replacewith (\modality{#allmodal}{.. #lhs = #seAny;  ...}\endmodality(post)) 
      \heuristics (simplify_expression)
      \displayname "cast" 
   };


// arithmetic operations
         
  assignmentAdditionBigint1  { 
     \find(\modality{#allmodal}{.. 
                #loc=#seBigint + #seAny; 
            ...}\endmodality(post)) 
     \replacewith(
         {#loc:=add(#seBigint,#seAny)}
             \modality{#allmodal}{.. ...}\endmodality(post)) 
     \heuristics(executeIntegerAssignment)
     \displayname "addition"
  };
  
  assignmentAdditionBigint2  { 
     \find(\modality{#allmodal}{.. 
                #loc=#seAny + #seBigint; 
            ...}\endmodality(post)) 
     \replacewith(
         {#loc:=add(#seAny,#seBigint)}
             \modality{#allmodal}{.. ...}\endmodality(post)) 
     \heuristics(executeIntegerAssignment)
     \displayname "addition"
  };


  assignmentMultiplicationBigint1  { 
      \find (\modality{#allmodal}{.. 
                 #loc = #seBigint * #seAny; 
             ...}\endmodality(post)) 
      \replacewith ({#loc:=mul(#seBigint,#seAny)}
                        \modality{#allmodal}{.. ...}\endmodality(post)) 
      \heuristics(executeIntegerAssignment)
      \displayname "multiplication"
  };


  assignmentMultiplicationBigint2  { 
      \find (\modality{#allmodal}{.. 
                 #loc = #seAny * #seBigint; 
             ...}\endmodality(post)) 
      \replacewith ({#loc:=mul(#seAny,#seBigint)}
                        \modality{#allmodal}{.. ...}\endmodality(post)) 
      \heuristics(executeIntegerAssignment)
      \displayname "multiplication"
  };
}  
 
\rules(programRules:Java,bigint:on,runtimeExceptions:ban) {

  assignmentDivisionBigint1  { 
      \find(==> \modality{#allmodal}{.. 
                #loc=#seBigint / #seAny; 
            ...}\endmodality(post)) 
      \replacewith 
           (==> {#loc:= div(#seBigint, #seAny)}
                            \modality{#allmodal}{.. ...}\endmodality(post));
      \replacewith (==> #seAny != 0)
      \heuristics(executeIntegerAssignment)
      \displayname "division"
  };
  
  
  assignmentDivisionBigint2  { 
      \find(==> \modality{#allmodal}{.. 
                #loc=#seAny / #seBigint; 
            ...}\endmodality(post)) 
      \replacewith 
           (==> {#loc:= div(#seAny, #seBigint)}
                            \modality{#allmodal}{.. ...}\endmodality(post));
      \replacewith (==> #seBigint != 0)
      \heuristics(executeIntegerAssignment)
      \displayname "division"
  };
  
  assignmentModuloBigint1 {
      \find(==> \modality{#allmodal}{..
                #loc=#seBigint % #seAny; 
            ...}\endmodality(post)) 
      \replacewith 
            (==> {#loc:=mod(#seBigint, #seAny)}
                      \modality{#allmodal}{.. ...}\endmodality(post));
      \replacewith (==> #seAny != 0)
      \heuristics(executeIntegerAssignment)
      \displayname "modulo"
  };
  
  assignmentModuloBigint2 {
      \find(==> \modality{#allmodal}{..
                #loc=#seAny % #seBigint; 
            ...}\endmodality(post)) 
      \replacewith 
            (==> {#loc:=mod(#seAny, #seBigint)}
                      \modality{#allmodal}{.. ...}\endmodality(post));
      \replacewith (==> #seBigint != 0)
      \heuristics(executeIntegerAssignment)
      \displayname "modulo"
  };

}

 
\rules(programRules:Java,bigint:on,runtimeExceptions:ignore) {

  assignmentDivisionBigint1  { 
      \find(\modality{#allmodal}{.. 
                #loc=#seBigint / #seAny; 
            ...}\endmodality(post)) 
      \replacewith 
           ({#loc:= div(#seBigint, #seAny)}
                            \modality{#allmodal}{.. ...}\endmodality(post))
      \heuristics(executeIntegerAssignment)
      \displayname "division"
  };
  
  
  assignmentDivisionBigint2  { 
      \find(\modality{#allmodal}{.. 
                #loc=#seAny / #seBigint; 
            ...}\endmodality(post)) 
      \replacewith 
           ({#loc:= div(#seAny, #seBigint)}
                            \modality{#allmodal}{.. ...}\endmodality(post))
      \heuristics(executeIntegerAssignment)
      \displayname "division"
  };
  
  assignmentModuloBigint1 {
      \find(\modality{#allmodal}{..
                #loc=#seBigint % #seAny; 
            ...}\endmodality(post)) 
      \replacewith 
            ({#loc:=mod(#seBigint, #seAny)}
                      \modality{#allmodal}{.. ...}\endmodality(post))
      \heuristics(executeIntegerAssignment)
      \displayname "modulo"
  };
  
  assignmentModuloBigint2 {
      \find(\modality{#allmodal}{..
                #loc=#seAny % #seBigint; 
            ...}\endmodality(post)) 
      \replacewith 
            ({#loc:=mod(#seAny, #seBigint)}
                      \modality{#allmodal}{.. ...}\endmodality(post))
      \heuristics(executeIntegerAssignment)
      \displayname "modulo"
  };

}

  
\rules(programRules:Java,bigint:on,runtimeExceptions:allow) {

  assignmentDivisionBigint1  { 
      \find(\modality{#allmodal}{.. 
                #loc=#seBigint / #seAny; 
            ...}\endmodality(post)) 
      \replacewith (\if (#seAny!=0)
           \then ({#loc:= div(#seBigint, #seAny)}
                            \modality{#allmodal}{.. ...}\endmodality(post))
           \else (\modality{#allmodal}{.. 
                       throw new java.lang.ArithmeticException(); 
                   ...}\endmodality(post)))
      \heuristics(executeIntegerAssignment)
      \displayname "division"
  };
  
  
  assignmentDivisionBigint2  { 
      \find(\modality{#allmodal}{.. 
                #loc=#seAny / #seBigint; 
            ...}\endmodality(post)) 
      \replacewith (\if (#seBigint!=0)
           \then ({#loc:= div(#seAny, #seBigint)}
                            \modality{#allmodal}{.. ...}\endmodality(post))
           \else (\modality{#allmodal}{.. 
                       throw new java.lang.ArithmeticException(); 
                   ...}\endmodality(post)))
      \heuristics(executeIntegerAssignment)
      \displayname "division"
  };
  
  assignmentModuloBigint1 {
      \find(\modality{#allmodal}{..
                #loc=#seBigint % #seAny; 
            ...}\endmodality(post)) 
      \replacewith (\if (#seAny!=0)
            \then ({#loc:=mod(#seBigint, #seAny)}
                      \modality{#allmodal}{.. ...}\endmodality(post))
            \else (\modality{#allmodal}{.. 
                        throw new java.lang.ArithmeticException(); 
                     ...}\endmodality(post)))
      \heuristics(executeIntegerAssignment)
      \displayname "modulo"
  };
  
  assignmentModuloBigint2 {
      \find(\modality{#allmodal}{..
                #loc=#seAny % #seBigint; 
            ...}\endmodality(post)) 
      \replacewith (\if (#seBigint!=0)
            \then ({#loc:=mod(#seAny, #seBigint)}
                      \modality{#allmodal}{.. ...}\endmodality(post))
            \else (\modality{#allmodal}{.. 
                        throw new java.lang.ArithmeticException(); 
                     ...}\endmodality(post)))
      \heuristics(executeIntegerAssignment)
      \displayname "modulo"
  };

}

  
\rules(programRules:Java,bigint:on) {
  
  assignmentSubtractionBigint1  { 
      \find (\modality{#allmodal}{.. 
                 #loc = #seBigint - #seAny; 
             ...}\endmodality(post)) 
      \replacewith ({#loc:=sub(#seBigint,#seAny)}
           \modality{#allmodal}{.. ...}\endmodality(post)) 
      \heuristics(executeIntegerAssignment)
      \displayname "subtraction"
  };
  
  
  
  assignmentSubtractionBigint2  { 
      \find (\modality{#allmodal}{.. 
                 #loc = #seAny - #seBigint; 
             ...}\endmodality(post)) 
      \replacewith ({#loc:=sub(#seAny,#seBigint)}
           \modality{#allmodal}{.. ...}\endmodality(post)) 
      \heuristics(executeIntegerAssignment)
      \displayname "subtraction"
  };
  
  unaryMinusBigint { 
     \find (\modality{#allmodal}{.. 
                #loc = - #seBigint; 
            ...}\endmodality(post)) 
     \replacewith({#loc:= - #seBigint}
                      \modality{#allmodal}{..  ...}\endmodality(post))
     \heuristics (executeIntegerAssignment)
     \displayname "unaryMinus"
  };
  
  // there are no bitwise operations since they would make no sense
  
  
  // narrowing casts
  
  narrowingShortCastBigint { 
      \find (\modality{#allmodal}{.. 
                 #loc = (short) #seBigint; 
             ...}\endmodality(post))
      \replacewith ({#loc := javaCastShort(#seBigint)}
            \modality{#allmodal}{..  ...}\endmodality(post)) 
      \heuristics (executeIntegerAssignment)
      \displayname "cast" 
  };

  narrowingIntCastBigint { 
      \find (\modality{#allmodal}{.. #loc = (int) #seBigint; ...}\endmodality(post))
      \replacewith ({#loc := javaCastInt(#seBigint)}
                        \modality{#allmodal}{..  ...}\endmodality(post)) 
      \heuristics (executeIntegerAssignment)
      \displayname "cast" 
  };

  narrowingLongCastBigint { 
      \find (\modality{#allmodal}{.. #loc = (long) #seBigint; ...}\endmodality(post))
      \replacewith ({#loc := javaCastLong(#seBigint)}
                        \modality{#allmodal}{..  ...}\endmodality(post)) 
      \heuristics (executeIntegerAssignment)
      \displayname "cast" 
  };
  
  narrowingCharCastBigint { 
      \find (\modality{#allmodal}{.. 
                 #loc = (char) #seBigint; 
             ...}\endmodality(post))
      \replacewith (
           {#loc := javaCastChar(#seBigint)}
               \modality{#allmodal}{..  ...}\endmodality(post)) 
      \heuristics (executeIntegerAssignment)
      \displayname "cast" 
  };
  
  
  narrowingByteCastBigint { 
     \find(\modality{#allmodal}{..
               #loc = (byte) #seBigint; 
           ...}\endmodality(post))
     \replacewith ({#loc := javaCastByte(#seBigint)}
           \modality{#allmodal}{..  ...}\endmodality(post)) 
     \heuristics (executeIntegerAssignment)
     \displayname "cast" 
  };
  
}
