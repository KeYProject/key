<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>

    <comment>Snippets for the preamble of the SMT translation</comment>

    <!-- This is auto-loaded as it defines properties of the type hierarchy and fundamental functions -->
    <entry key="types.auto">true</entry>

    <entry key="types.axioms">
(assert (forall ((t1 T)) (subtype t1 t1)))
(assert (forall ((t1 T) (t2 T)) (! (=> (and (subtype t1 t2) (subtype t2 t1)) (= t1 t2)) :pattern ((subtype t1 t2) (subtype t2 t1)))))
(assert (forall ((t1 T) (t2 T) (t3 T)) (! (=> (and (subtype t1 t2) (subtype t2 t3)) (subtype t1 t3)) :pattern ((subtype t1 t2) (subtype t2 t3)))))
(assert (forall ((x U) (t T)) (! (subtype (typeof (cast x t)) t) :pattern ((cast x t)))))
(assert (forall ((x U) (t T)) (! (=> (subtype (typeof x) t) (= (cast x t) x)) :pattern ((cast x t)))))
    </entry>

    <entry key="types.decls">
(declare-fun subtype (T T) Bool)
(declare-fun typeof (U) T)
(declare-fun cast (U T) U)
    </entry>


    <!-- the theory for null is very small and hence always added -->
    <entry key="null.auto">true</entry>

    <entry key="null.axioms">
(assert (= (typeof null) sort_Null))
    </entry>

    <entry key="null.decls">
(declare-const null U)
(declare-const sort_Null T)
    </entry>


    <!-- This is auto-loaded as it introduces U and T as the most important SMT sorts -->
    <entry key="general.auto">true</entry>

    <entry key="general.decls">
(declare-sort T 0)
(declare-sort U 0)
(declare-const sort_any T)
    </entry>

    <entry key="opts">
(set-option :print-success true)
(set-option :produce-unsat-cores true)
(set-option :produce-models true)
(set-logic ALL)
    </entry>

    <!-- These two predicates are used throught the preamble and are required to be present -->
    <entry key="instanceof.auto">true</entry>

    <entry key="instanceof.decls">
(declare-fun instanceof (U T) Bool)
(declare-fun exactinstanceof (U T) Bool)
    </entry>
    <entry key="instanceof.axioms">
(assert (forall ((u U) (t T)) (! (= (instanceof u t) (subtype (typeof u) t)) :pattern ((instanceof u t)))))
(assert (forall ((u U) (t T)) (! (= (exactinstanceof u t) (= (typeof u) t)) :pattern ((exactinstanceof u t)))))
    </entry>


</properties>


