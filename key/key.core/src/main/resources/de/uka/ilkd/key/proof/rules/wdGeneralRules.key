// This file is part of KeY - Integrated Deductive Software Design
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General
// Public License. See LICENSE.TXT for details.
//

\schemaVariables {
	\formula f;
	\term any s, t;
	\term alpha u;
	\variables alpha v;
	\termlabel l;
}

\rules(wdChecks:on) {
	wd_Constant_Formula {

		\find (
			WD( (f)<<l>> )
		)
		\varcond (
			\isConstant(f),
			\not \hasLabel(l, undef)
		)
		\replacewith (
			true
		)
		\heuristics ( simplify )
	};

	wd_Constant_Term {

		\find (
			wd( (t)<<l>> )
		)
		\varcond (
			\isConstant(t),
			\not \hasLabel(l, undef)
		)
		\replacewith (
			true
		)
		\heuristics ( simplify )
	};

	wd_Undef_Formula {

		\find (
			WD( (f)<<l>> )
		)
		\varcond (
			\isConstant(f),
			\hasLabel(l, undef)
		)
		\replacewith (
			false
		)
		\heuristics ( simplify )
	};

	wd_Undef_Term {

		\find (
			wd( (t)<<l>> )
		)
		\varcond (
			\isConstant(t),
			\hasLabel(l, undef)
		)
		\replacewith (
			false
		)
		\heuristics ( simplify )
	};

	wd_Subst_Formula {

		\find (
			WD( {\subst v; u} f )
		)
		\replacewith (
			wd( u ) & {\subst v; u} WD( f )
		)
		\heuristics ( simplify )
	};

	wd_T_Subst_Formula {

		\find (
			T( {\subst v; u} f )
		)
		\replacewith (
			wd( u ) & {\subst v; u} T( f )
		)
		\heuristics ( simplify )
	};

	wd_F_Subst_Formula {

		\find (
			F( {\subst v; u} f )
		)
		\replacewith (
			wd( u ) & {\subst v; u} F( f )
		)
		\heuristics ( simplify )
	};

	wd_Subst_Term {

		\find (
			wd( {\subst v; u} t )
		)
		\replacewith (
			wd( u ) & {\subst v; u} wd( t )
		)
		\heuristics ( simplify )
	};

	wd_Type_Cast {

		\find (
			wd( alpha::cast(t) )
		)
		\replacewith (
			wd(t) & (alpha::instance(t) = TRUE)
		)
		\heuristics ( simplify )
	};

	wd_Type_ExactInstance {

		\find (
			wd( alpha::exactInstance(t) )
		)
		\replacewith (
			wd(t)
		)
		\heuristics ( simplify )
	};

	wd_Type_Instance {

		\find (
			wd( alpha::instance(t) )
		)
		\replacewith (
			wd(t)
		)
		\heuristics ( simplify )
	};

	wd_Pair {

		\find (
			wd( pair(s, t) )
		)
		\replacewith (
			wd(s) & wd(t)
		)
		\heuristics ( simplify )
	};



	wd_Equality_Pred {

		\find (
			WD( (s = t) )
		)
		\replacewith (
			wd(s) & wd(t)
		)
		\heuristics ( simplify )
	};
}
