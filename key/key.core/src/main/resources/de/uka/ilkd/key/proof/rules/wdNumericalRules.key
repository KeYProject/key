// This file is part of KeY - Integrated Deductive Software Design
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General
// Public License. See LICENSE.TXT for details.
//

\schemaVariables {
	\term int a, b, c;
	\term boolean f;
	\variables int i;
	\variables alpha j;
	\term numbers n;
}

\rules(wdChecks:on) {
	wd_Numerical_Const {

		\find (
			wd( n )
		)
		\replacewith (
			true
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Const_Z {

		\find (
			wd( Z(n) )
		)
		\replacewith (
			true
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Const"
	};

	wd_Numerical_Const_C {

		\find (
			wd( C(n) )
		)
		\replacewith (
			true
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Const"
	};

	wd_Numerical_Op_Neg {
		\find (
			wd( neg(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_BitNeg {

		\find (
			wd( javaBitwiseNegation(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Neg"
	};

	wd_Numerical_Op_MinusJInt {

		\find (
			wd( unaryMinusJint(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Minus"
	};

	wd_Numerical_Op_MinusJLong {

		\find (
			wd( unaryMinusJlong(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Minus"
	};

	wd_Numerical_Op_MinusInt {

		\find (
			wd( javaUnaryMinusInt(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Minus"
	};

	wd_Numerical_Op_MinusLong {

		\find (
			wd( javaUnaryMinusLong(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Minus"
	};

	wd_Numerical_Op_MinusIntOverFlow {

		\find (
			wd( javaUnaryMinusIntOverFlow(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Minus"
	};

	wd_Numerical_Op_MinusLongOverFlow {

		\find (
			wd( javaUnaryMinusLongOverFlow(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Minus"
	};

	wd_Numerical_Cast_Byte {

		\find (
			wd( javaCastByte(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Cast"
	};

	wd_Numerical_Cast_Short {

		\find (
			wd( javaCastShort(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Cast"
	};

	wd_Numerical_Cast_Int {

		\find (
			wd( javaCastInt(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Cast"
	};

	wd_Numerical_Cast_Long {

		\find (
			wd( javaCastLong(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Cast"
	};

	wd_Numerical_Cast_Char {

		\find (
			wd( javaCastChar(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Cast"
	};

	wd_Numerical_Cast_ByteOverFlow {

		\find (
			wd( javaCastByteOverFlow(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Cast"
	};

	wd_Numerical_Cast_ShortOverFlow {

		\find (
			wd( javaCastShortOverFlow(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Cast"
	};

	wd_Numerical_Cast_IntOverFlow {

		\find (
			wd( javaCastIntOverFlow(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Cast"
	};

	wd_Numerical_Cast_LongOverFlow {

		\find (
			wd( javaCastLongOverFlow(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Cast"
	};

	wd_Numerical_Cast_CharOverFlow {

		\find (
			wd( javaCastCharOverFlow(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Cast"
	};

	wd_Numerical_Mod_Byte {

		\find (
			wd( moduloByte(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Mod"
	};

	wd_Numerical_Mod_Short {

		\find (
			wd( moduloShort(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Mod"
	};

	wd_Numerical_Mod_Int {

		\find (
			wd( moduloInt(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Mod"
	};

	wd_Numerical_Mod_Long {

		\find (
			wd( moduloLong(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Mod"
	};

	wd_Numerical_Mod_Char {

		\find (
			wd( moduloChar(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Mod"
	};

	wd_Numerical_Op_Add {

		\find (
			wd( add(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_AddJInt {

		\find (
			wd( addJint(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Add"
	};

	wd_Numerical_Op_AddJLong {

		\find (
			wd( addJlong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Add"
	};

	wd_Numerical_Op_AddInt {

		\find (
			wd( javaAddInt(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Add"
	};

	wd_Numerical_Op_AddLong {

		\find (
			wd( javaAddLong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Add"
	};

	wd_Numerical_Op_AddIntOverFlow {

		\find (
			wd( javaAddIntOverFlow(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Add"
	};

	wd_Numerical_Op_AddLongOverFlow {

		\find (
			wd( javaAddLongOverFlow(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Add"
	};

	wd_Numerical_Op_Sub {

		\find (
			wd( sub(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_SubJInt {

		\find (
			wd( subJint(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Sub"
	};

	wd_Numerical_Op_SubJLong {

		\find (
			wd( subJlong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Sub"
	};

	wd_Numerical_Op_SubInt {

		\find (
			wd( javaSubInt(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Sub"
	};

	wd_Numerical_Op_SubLong {

		\find (
			wd( javaSubLong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Sub"
	};

	wd_Numerical_Op_SubIntOverFlow {

		\find (
			wd( javaSubIntOverFlow(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Sub"
	};

	wd_Numerical_Op_SubLongOverFlow {

		\find (
			wd( javaSubLongOverFlow(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Sub"
	};

	wd_Numerical_Op_Mul {

		\find (
			wd( mul(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_MulJInt {

		\find (
			wd( mulJint(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Mul"
	};

	wd_Numerical_Op_MulJLong {

		\find (
			wd( mulJlong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Mul"
	};

	wd_Numerical_Op_MulInt {

		\find (
			wd( javaMulInt(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Mul"
	};

	wd_Numerical_Op_MulLong {

		\find (
			wd( javaMulLong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Mul"
	};

	wd_Numerical_Op_MulIntOverFlow {

		\find (
			wd( javaMulIntOverFlow(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Mul"
	};

	wd_Numerical_Op_MulLongOverFlow {

		\find (
			wd( javaMulLongOverFlow(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Mul"
	};

	wd_Numerical_Op_Div {

		\find (
			wd( div(a, b) )
		)
		\replacewith (
			wd(a) & wd(b) & (b != 0)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_JDiv {

		\find (
			wd( jdiv(a, b) )
		)
		\replacewith (
			wd(a) & wd(b) & (b != 0)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Div"
	};

	wd_Numerical_Op_DivJInt {

		\find (
			wd( divJint(a, b) )
		)
		\replacewith (
			wd(a) & wd(b) & (b != 0)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Div"
	};

	wd_Numerical_Op_DivJLong {

		\find (
			wd( divJlong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b) & (b != 0)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Div"
	};

	wd_Numerical_Op_DivInt {

		\find (
			wd( javaDivInt(a, b) )
		)
		\replacewith (
			wd(a) & wd(b) & (b != 0)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Div"
	};

	wd_Numerical_Op_DivLong {

		\find (
			wd( javaDivLong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b) & (b != 0)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Div"
	};

	wd_Numerical_Op_DivIntOverFlow {

		\find (
			wd( javaDivIntOverFlow(a, b) )
		)
		\replacewith (
			wd(a) & wd(b) & (b != 0)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Div"
	};

	wd_Numerical_Op_DivLongOverFlow {

		\find (
			wd( javaDivLongOverFlow(a, b) )
		)
		\replacewith (
			wd(a) & wd(b) & (b != 0)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Div"
	};

	wd_Numerical_Op_ShiftRightInt {

		\find (
			wd( shiftrightJint(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_ShiftRight"
	};

	wd_Numerical_Op_ShiftRightLong {

		\find (
			wd( shiftrightJlong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_ShiftRight"
	};

	wd_Numerical_Op_ShiftLeftInt {

		\find (
			wd( shiftleftJint(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_ShiftLeft"
	};

	wd_Numerical_Op_ShiftLeftLong {

		\find (
			wd( shiftleftJlong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_ShiftLeft"
	};

	wd_Numerical_Op_UShiftRightInt {

		\find (
			wd( unsignedshiftrightJint(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_ShiftRight"
	};

	wd_Numerical_Op_UShiftRightLong {

		\find (
			wd( unsignedshiftrightJlong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_ShiftRight"
	};

	wd_Numerical_Op_OrJInt {

		\find (
			wd( orJint(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Or"
	};

	wd_Numerical_Op_OrJLong {

		\find (
			wd( orJlong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Or"
	};

	wd_Numerical_Op_BitOrInt {

		\find (
			wd( javaBitwiseOrInt(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Or"
	};

	wd_Numerical_Op_BitOrLong {

		\find (
			wd( javaBitwiseOrLong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Or"
	};

	wd_Numerical_Op_AndJInt {

		\find (
			wd( andJint(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_And"
	};

	wd_Numerical_Op_AndJLong {

		\find (
			wd( andJlong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_And"
	};

	wd_Numerical_Op_BitAndInt {

		\find (
			wd( javaBitwiseAndInt(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_And"
	};

	wd_Numerical_Op_BitAndLong {

		\find (
			wd( javaBitwiseAndLong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_And"
	};

	wd_Numerical_Op_XorJInt {

		\find (
			wd( xorJint(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Xor"
	};

	wd_Numerical_Op_XorJLong {

		\find (
			wd( xorJlong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Xor"
	};

	wd_Numerical_Op_BitXOrInt {

		\find (
			wd( javaBitwiseXOrInt(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Xor"
	};

	wd_Numerical_Op_BitXOrLong {

		\find (
			wd( javaBitwiseXOrLong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Xor"
	};

	wd_Numerical_Op_Mod {

		\find (
			wd( mod(a, b) )
		)
		\replacewith (
			wd(a) & wd(b) & (b != 0)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Op_JMod {

		\find (
			wd( jmod(a, b) )
		)
		\replacewith (
			wd(a) & wd(b) & (b != 0)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Mod"
	};

	wd_Numerical_Op_ModJInt {

		\find (
			wd( modJint(a, b) )
		)
		\replacewith (
			wd(a) & wd(b) & (b != 0)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Mod"
	};

	wd_Numerical_Op_ModJLong {

		\find (
			wd( modJlong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b) & (b != 0)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Mod"
	};

	wd_Numerical_Op_JavaMod {

		\find (
			wd( javaMod(a, b) )
		)
		\replacewith (
			wd(a) & wd(b) & (b != 0)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Mod"
	};

	wd_Numerical_Op_JavaModOverFlow {

		\find (
			wd( javaModOverFlow(a, b) )
		)
		\replacewith (
			wd(a) & wd(b) & (b != 0)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_Mod"
	};

	wd_Numerical_Op_JavaShiftRightInt {

		\find (
			wd( javaShiftRightInt(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_ShiftRight"
	};

	wd_Numerical_Op_JavaShiftRightLong {

		\find (
			wd( javaShiftRightLong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_ShiftRight"
	};

	wd_Numerical_Op_JavaShiftLeftInt {

		\find (
			wd( javaShiftLeftInt(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_ShiftLeft"
	};

	wd_Numerical_Op_JavaShiftLeftLong {

		\find (
			wd( javaShiftLeftLong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_ShiftLeft"
	};

	wd_Numerical_Op_JavaUnsignedShiftRightInt {

		\find (
			wd( javaUnsignedShiftRightInt(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_ShiftRight"
	};

	wd_Numerical_Op_JavaUnsignedShiftRightLong {

		\find (
			wd( javaUnsignedShiftRightLong(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
		\displayname "wd_Numerical_Op_ShiftRight"
	};

	wd_Numerical_Quant_Bsum {

		\find (
			wd( bsum{i;} (a, b, c) )
		)
		\varcond (
			\notFreeIn(i, a),
			\notFreeIn(i, b)
		)
		\replacewith (
			wd(a) & wd(b) & \forall i; ((leq(a,i) & lt(i,b)) -> wd(c))
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Quant_Sum {

		\find (
			wd( sum{j;} (f, c) )
		)
		\replacewith (
			\forall j; wd(f) & \forall j; ((f = TRUE) -> wd(c))
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Quant_Bprod {

		\find (
			wd( bprod{i;} (a, b, c) )
		)
		\varcond (
			\notFreeIn(i, a),
			\notFreeIn(i, b)
		)
		\replacewith (
			wd(a) & wd(b) & \forall i; ((leq(a,i) & lt(i,b)) -> wd(c))
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Quant_Prod {

		\find (
			wd( prod{j;} (f, c) )
		)
		\replacewith (
			\forall j; wd(f) & \forall j; ((f = TRUE) -> wd(c))
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Quant_Min {

		\find (
			wd( min{j;} (f, c) )
		)
		\replacewith (
			\forall j; wd(f) & \forall j; ((f = TRUE) -> wd(c))
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Quant_Max {

		\find (
			wd( max{j;} (f, c) )
		)
		\replacewith (
			\forall j; wd(f) & \forall j; ((f = TRUE) -> wd(c))
		)
		\heuristics ( simplify )
	};



	wd_Numerical_Pred_InByte {

		\find (
			WD( inByte(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Pred_InChar {

		\find (
			WD( inChar(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Pred_InShort {

		\find (
			WD( inShort(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Pred_InInt {

		\find (
			WD( inInt(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Pred_InLong {

		\find (
			WD( inLong(a) )
		)
		\replacewith (
			wd(a)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Pred_Lt {

		\find (
			WD( lt(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Pred_Leq {

		\find (
			WD( leq(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Pred_Gt {

		\find (
			WD( gt(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Pred_Geq {

		\find (
			WD( geq(a, b) )
		)
		\replacewith (
			wd(a) & wd(b)
		)
		\heuristics ( simplify )
	};

	wd_Numerical_Pred_WellOrdered {

		\find (
			WD( wellOrderLeqInt(a, b) )
		 )
		\replacewith (
			wd(a) & wd(b)
		 )
		\heuristics ( simplify )
	};
}
