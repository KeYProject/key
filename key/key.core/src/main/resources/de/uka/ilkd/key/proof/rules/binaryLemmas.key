\rules {

  binaryOrNeutralRight {
    \schemaVar \term int left;

    \find (binaryOr(left, 0))
    \replacewith (left)
    
    \heuristics(concrete)  
  };

  binaryOrNeutralLeft {
    \schemaVar \term int right;

    \find (binaryOr(0, right))
    \replacewith(right)
    
    \heuristics(concrete)  
  };

  binaryOrSign {
    \schemaVar \term int left, right;

    \find (binaryOr(left,right)) \sameUpdateLevel
    \add(\if (left >= 0 & right >= 0) \then (1) \else (-1) * binaryOr(left, right) >= 0 ==>)
    \heuristics(userTaclets1)
  };


  binaryOrInInt {
    \schemaVar \term int left, right;

    \find (binaryOr(left,right)) \sameUpdateLevel
    \add((inInt(left) & inInt(right)) -> inInt(binaryOr(left,right)) ==>)
    \heuristics(userTaclets1)
  };


  binaryOrGte {
    \schemaVar \term int left, right; 
    \find (binaryOr(left,right)) \sameUpdateLevel

    // could be more general, moduloInt(left) >= 0
    \add((left >= 0 & right >= 0) -> (binaryOr(left, right) >= left & binaryOr(left,right) >= right &
	   binaryOr(left,right) <= 2*\if (left>right) \then (left) \else (right))
	  ==>)
    \heuristics(userTaclets1)
  };


  // orJint like divJint etc is always inInt as the result is moduloInt(result)
  orJintInInt {
    \schemaVar \term int left, right;

    \find (orJint(left,right)) \sameUpdateLevel
    \add(inInt(orJint(left,right)) ==> )
    \heuristics(userTaclets1)
  };


// binaryAnd

   binaryAndZeroRight {
     \schemaVar \term int left;
     \find ( binaryAnd(left, 0) )
     \replacewith (0)
     \heuristics (concrete)
   };

   binaryAndZeroLeft {
     \schemaVar \term int right;
     \find ( binaryAnd(0, right) )
     \replacewith (0)
     \heuristics (concrete)
   };


   binaryAndSymm {
     \schemaVar \term int left, right;
     \find ( binaryAnd (left, right) ) 
     \replacewith ( binaryAnd(right, left) )
   };

   binaryAndOne {
     \schemaVar \term int left;
     \find ( binaryAnd(left, 1) )
     \replacewith( \if (left % 2 = 0 ) \then ( 0 ) \else ( 1 ) )    
     \heuristics ( simplify_enlarging )
   };

}



\rules {

   // Literal rules for binary &, |, ^  
   binaryAnd_literals {
     \schemaVar \term numbers iz,jz;
   
     \find (binaryAnd(Z(iz),Z(jz)))    
     \replacewith (#BinaryAnd(Z(iz),Z(jz)))

     \heuristics (simplify_literals)
     \displayname "binary_AND" 
   };

   binaryOr_literals {
      \schemaVar \term numbers iz,jz;
   
      \find (binaryOr(Z(iz),Z(jz)))    
      \replacewith (#BinaryOr(Z(iz),Z(jz)))

      \heuristics (simplify_literals)
      \displayname "binary_OR" 
   };

   binaryXOr_literals {
      \schemaVar \term numbers iz,jz;
   
      \find (binaryXOr(Z(iz),Z(jz)))   
      \replacewith (#BinaryXOr(Z(iz),Z(jz)))

      \heuristics (simplify_literals)
      \displayname "binary_XOR"
   };


   // Shift operations 
   
   shiftright_literals {
      \schemaVar \term numbers iz,jz;

      \find (shiftright(Z(iz),Z(jz)))        
      \replacewith (#ShiftRight(Z(iz), Z(jz)))

      \heuristics (simplify_literals)
      \displayname "shift" 
   };
   
   shiftleft_literals {
      \schemaVar \term numbers iz,jz;

      \find (shiftleft(Z(iz),Z(jz)))        
      \replacewith (#ShiftLeft(Z(iz), Z(jz)))

      \heuristics (simplify_literals)
      \displayname "shift" 
   };

}