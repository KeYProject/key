<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
<entry key="seqGetOutside.dl"><![CDATA[
    \forall int i; \forall Seq s; ( i < 0 | i >= seqLen(s) -> any::seqGet(s, i)<<Trigger>> = seqGetOutside )
]]></entry>

<entry key="seqLen.dl"><![CDATA[
    \forall Seq s; seqLen(s)<<Trigger>> >= 0
]]></entry>

<entry key="seqConcat.dl"><![CDATA[
    \forall int i; \forall Seq s1; \forall Seq s2; ( 0 <= i & i < seqLen(s1) + seqLen(s2) ->
        any::seqGet(seqConcat(s1, s2), i) =
            \if (i < seqLen(s1)) \then (any::seqGet(s1, i)) \else (any::seqGet(s2, i-seqLen(s1))))
]]>
</entry>

<entry key="seqConcat.dl.2"><![CDATA[
    \forall Seq s1; \forall Seq s2; seqLen(seqConcat(s1,s2)<<Trigger>>) = seqLen(s1) + seqLen(s2)
]]>
</entry>

<entry key="seqEmpty.dl"><![CDATA[
    seqLen(seqEmpty) = 0
]]>
</entry>

<entry key="seqSingleton.dl"><![CDATA[
    \forall any x; any::seqGet(seqSingleton(x)<<Trigger>>, 0) = x
]]>
</entry>

<entry key="seqSingleton.dl.2"><![CDATA[
    \forall any x; seqLen(seqSingleton(x)<<Trigger>>) = 1
]]>
</entry>

<entry key="seqSub.dl"><![CDATA[
    \forall Seq seq;
    \forall int from;
    \forall int to;
    \forall int idx;
        any::seqGet(seqSub(seq, from, to)<<Trigger>>, idx)
      = \if(0 <= idx & idx < (to - from))
        \then(any::seqGet(seq, idx + from))
        \else(seqGetOutside)
]]></entry>

<entry key="seqSub.dl.2"><![CDATA[
    \forall Seq seq;
    \forall int from;
    \forall int to;
        seqLen(seqSub(seq, from, to)<<Trigger>>)
      = \if(from < to)\then(to - from)\else(0)
]]></entry>
<entry key="store.dl"><![CDATA[
    \forall Heap h; \forall Object o; \forall Field f; \forall Object o2; \forall Field f2; \forall any v;
      any::select(store(h,o,f,v), o2, f2)<<Trigger>> =
         \if(o = o2 & f = f2 & f != java.lang.Object::<created>)
         \then(v)
         \else(any::select(h, o2, f2))
]]></entry>

<entry key="length.dl"><![CDATA[
    \forall Object o; length(o) >= 0
]]></entry>

<entry key="anon.dl"><![CDATA[
    \forall Heap h; \forall Object o; \forall Field f; \forall Heap h2; \forall LocSet ls;
      any::select(anon(h, ls, h2), o, f)<<Trigger>> =
         \if(elementOf(o, f, ls) & f != java.lang.Object::<created>
           | elementOf(o, f, freshLocs(h)))
         \then(any::select(h2, o, f))
         \else(any::select(h, o, f))
]]></entry>

<entry key="memset.dl"><![CDATA[
    \forall Heap h; \forall LocSet s; \forall any x; \forall Object o; \forall Field f;
      any::select(memset(h, s, x), o, f)<<Trigger>> =
         \if(elementOf(o, f, s) & f != java.lang.Object::<created>)
         \then(x)
         \else(any::select(h, o, f))
]]></entry>

<entry key="create.dl"><![CDATA[
  \forall Heap h; \forall Object o; \forall Object o2; \forall Field f;
      any::select(create(h, o), o2, f)<<Trigger>> =
         \if(o = o2 & o != null & f = java.lang.Object::<created>)
         \then(TRUE)
         \else(any::select(h, o2, f))
]]></entry>

<entry key="wellFormed.dl"><![CDATA[
  \forall Heap h; \forall Object o; \forall Field f; (wellFormed(h) ->
      boolean::select(h, (java.lang.Object::select(h, o, f))<<Trigger>>, java.lang.Object::<created>) = TRUE
    | (java.lang.Object::select(h, o, f)) = null)
]]></entry>

<!-- to be done: all objects inside location sets in fields in wellFormed heaps are created or null -->
<!-- null is the special singleton object in Sort "Null" -->
<entry key="null.dl">
    <![CDATA[ \forall any x; ((Null::instance(x))<<Trigger>> = TRUE -> x = null) ]]>
</entry>
<!-- The function symbols required for Java arithmetics -->
<entry key="javaMulInt.taclets">
    translateJavaMulInt
</entry>

<entry key="javaAddInt.taclets">
    translateJavaAddInt
</entry>

<!-- The function symbols required for Java arithmetics -->
<entry key="prec.taclets">
    precOfInt
</entry>
<entry key="empty.dl">
  \forall Object o; \forall Field f; ( elementOf(o,f,empty)&lt;&lt;Trigger&gt;&gt; &lt;-&gt; false )
</entry>

<entry key="union.dl">
  \forall Object o; \forall Field f; \forall LocSet l1; \forall LocSet l2;
     ( elementOf(o, f, union(l1, l2))&lt;&lt;Trigger&gt;&gt; &lt;-&gt; elementOf(o,f,l1) | elementOf(o,f,l2) )
</entry>

<entry key="allLocs.dl">
  \forall Object o; \forall Field f; ( elementOf(o,f,allLocs)&lt;&lt;Trigger&gt;&gt; &lt;-&gt; true )
</entry>

<entry key="freshLocs.dl">
  \forall Heap h; \forall Object o; \forall Field f;
     ( elementOf(o,f,freshLocs(h))&lt;&lt;Trigger&gt;&gt; &lt;-&gt;
        o != null &amp; !boolean::select(h,o,java.lang.Object::&lt;created&gt;)=TRUE )
</entry>

<entry key="singleton.dl">
  \forall Object o; \forall Field f; \forall Object o2; \forall Field f2;
    ( elementOf(o,f, singleton(o2,f2))&lt;&lt;Trigger&gt;&gt; &lt;-&gt;
      o = o2 &amp; f = f2 )
</entry>

<entry key="allFields.dl"><![CDATA[
  \forall Object o; \forall Field f; \forall Object o2;
    ( elementOf(o,f, allFields(o2))<<Trigger>> <->
       o = o2 )
]]></entry>

<entry key="arrayRange.dl"><![CDATA[
  \forall Object o; \forall Object o2; \forall Field f; \forall int lo; \forall int hi;
    (elementOf(o,f, arrayRange(o2, lo, hi))<<Trigger>> <->
      o = o2 & \exists int iv; (f = arr(iv) & lo <= iv & iv <= hi))
]]></entry>

</properties>
