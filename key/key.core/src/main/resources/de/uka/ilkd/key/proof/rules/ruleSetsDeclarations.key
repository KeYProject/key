// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 

//
// This file contains rules for handling java programs

 
\sorts {
  any;
  java.lang.Object;
  \abstract java.lang.Cloneable \extends java.lang.Object;
  \abstract java.io.Serializable \extends java.lang.Object;
  
  \generic alpha, beta, gamma;
  \generic deltaObject \extends java.lang.Object;
}

\functions {
  alpha alpha::cast(any);
  boolean alpha::exactInstance(any);
  boolean alpha::instance(any);
}
/*
   return "runtimeExceptions:ignore".equals(choice) ||
                "initialisation:disableStaticInitialisation".equals(choice) ||
                "intRules:arithmeticSemanticsIgnoringOF".equals(choice);

<entry key="optimisedSelectRules">
The optimized select rules can be turned off by setting this option to off.

The unoptimized rules use inplace rewriting for the evaluation of select terms. This may lead to heap terms growing exponentially in the number of anons/stores to be evaluated. However, in some rare cases the usage of the unoptimized rules may lead to more human readable sequents.

The optimized rules pull out select terms before they evaluate them. Because other occurences of the same select term are replaced by the Skolem constant introduced by the pullout rule (application of equalities), each select term has to be evaluated only once. Intelligent hiding of no longer needed auxiliary equations holds the sequent human readable and increases performance. The result of the evaluation of a select term is stored such that it can be reapplied immediately if the same select term occurs again.
</entry>

*/
\optionsDecl {

  /*!
  Treatment of Java assertion statements. Java assertions can be handled in three different ways in KeY.
  */
  assertions:{
    /*!
    If set to 'safe', the following proof obligations have to be shown:
        - The program with assertions removed must fulfill the specification
        - The asserted conditions must hold (without throwing an exception,
          and with termination)
        - The assertions do not have side effects influencing the post
          conditions.
    This is the default option. Proofs with this option are typically harder.

    @choiceDefaultOption
    */
    safe,

    /*! If switched 'on', assertions are treated like Java would treat them:
    Asserted Statements are evaluated and an AssertionException is
    raised if they turn out to be false. */
    on,

    /*! If switched 'off', assert statements are skipped. */
    off};

  /*! Specifies whether static (class loading) initialization should be
  taken in consideration.

  Both specifications and proof obligations become significantly more
  difficult since class loading may take place at many places.*/
  initialisation:{/*! @choiceUnsound */
    disableStaticInitialisation,
    enableStaticInitialisation
  };

  /*! This option controls how integer numbers are modeled. */
  intRules:{
    /*! 'Arithmetic without overflow checking' treats integers as pure
    mathematical objects. The proof obligations are often easier to
    discharge. However, the model does not allow the verification of all
    properties which hold with Java semantics. Moreover, it allows the
    verification of properties which do not hold on Java's actual
    semantics. This is the default option.

    @choiceDefaultOption @choiceUnsound
    */
    arithmeticSemanticsIgnoringOF,

    /*! 'Arithmetic with overflow checking' also treats integers as
    mathematical objects, but ensures that no overflow occurs.  While
    this model also has a completeness gap, it prevents proving
    incorrect properties.

    @choiceIncomplete */
    arithmeticSemanticsCheckingOF,

    /*! 'Java semantics' treat integers the same way Java would treat them.
    The different integer types operate within their respective value
    ranges. The bitvector arithmetic is modeled in KeY using modulo
    expressions. This is sound and complete. Proof obligations tend
    to get more complex with this setting.*/
    javaSemantics
  };

  /*! Rules dealing Java language constructs can be turned off by setting this to 'None'. */
  programRules:{Java, /*! @choiceIncomplete */ None};
  /*! Treatment of implicit runtime exceptions */
  runtimeExceptions: {
    /*! If set to 'allow', implicit runtime exceptions are raised as specified
    in the Java language specification.

    @choiceIncomplete
    */
    ban,
    /*!
    If set to 'ban', any occurrence of an implicit runtime exception is
    considered an unrecoverable program failure. For programs which do not
    raise implicit runtime exceptions, this is usually easier to prove than
    'allow'. This is the default option.
    */
    allow,
    /*! If set to 'ignore', it is assumed that no implicit runtime exception occurs.
    Warning: Reasoning with these rules is unsound.

    @choiceUnsound
    */
    ignore
  };

  /*! JavaCard is a dialect of Java designed for the use in SmartCards.  It
  lacks floating point operations and concurrency, but provides stronger
  object persistence guarantees.

  There are two values for this option 'on' and 'off'. Switching
  on or off all taclets axiomatising JavaCard specific features like transaction.
  */
  JavaCard:{off, on};

  /*! Loading rules dealing with Strings (charLists) can be disabled.*/
  Strings:{on, /*!     @choiceIncomplete */ off};

  /*!
  Rules for model field representation clauses. JML model fields are given
  a semantics by represents clauses. This switch sets how the rules handle these clauses.
  */
  modelFields:{
    /*!
  * If set to 'treatAsAxiom', the representation is seen as an axiom,
    satisfiability will not be checked. This may introduce inconsistent
    specifications, for example the following contradictory JML clause
    will not be rejected:
       //@ represents modelField == modelField + 1;
    This is the default option since KeY 2.4.
    */
    treatAsAxiom,
    /*!
    If set to 'showSatisfiability', for every expansion of the represents
    clause, it must be shown that the definition is _locally_
    satisfiable. Cross-definition inconsistencies can still be
    formulated, however:
    ```
       //@ represents modelField1 == modelField2;
       //@ represents modelField2 == modelField1 + 1;
    ```
    This had been the default option previously, until KeY 2.2.
    */
    showSatisfiability
  };
  /*! Loading program rules dealing with JML's \bigint datatype can be disabled. */
  bigint:{on, off};
  /*! Loading rules dealing with sequences can be disabled. */
  sequences:{on, off};
  /*! This option allows more fine-grained control over rules dealing with sequences.
  By default, it is disabled because the additional rules are known to have a negative impact on overall performance.
  Activate this option if your problem is concerned with permutations or information flow.*/
  moreSeqRules:{off, on};
  /*! Loading rules dealing with reachability can be disabled. */
  reach:{on, off};
  /*!
  Loading less commonly used rules for (mathematical) integers,
  such as rules for bounded sums and products, modulo, or polynomials,
  can be disabled. If they are loaded, their application in the strategy
  can still be controlled as usual.

  This option is experimental. Depending of your understanding of 'less common',
  you may experience incompleteness. Doing proofs with Java int semantics will not work, definitely.

  Not to be confused with intRules, which controls the semantics of the Java type int.
  */
  integerSimplificationRules:{full, /*! @choiceIncomplete*/ minimal}; // TODO: further refine this option
  permissions:{off, on};

  /*!
  Treatment of formulas and terms for welldefinedness checks:
  */
  wdOperator: {
    /*!
    More intuitive for software developers and along the lines of
    runtime assertion semantics. Well-Definedness checks will be
    stricter using this operator, since the order of terms/formulas
    matters. It is based on McCarthy logic.
    Cf. "Are the Logical Foundations of Verifying Compiler
    Prototypes Matching User Expectations?" by Patrice Chalin.

    @choiceDefaultOption
    */
    L,
    /*!
    Complete and along the lines of classical logic, where the
    order of terms/formulas is irrelevant. This operator is
    equivalent to the D-operator, but more efficient.
    Cf. "Efficient Well-Definedness Checking" by Ádám Darvas,
    Farhad Mehta, and Arsenii Rudich.
    */
    Y,
    /*!
    Complete and along the lines of classical logic, where the
    order of terms/formulas is irrelevant. This operator is not as
    strict as the L-operator, based on strong Kleene logic. To be
    used with care, since formulas may blow up exponentially.
    Cf. "Well Defined B" by Patrick Behm, Lilian Burdy, and
    Jean-Marc Meynadier */
    D
  };

  /*!
  Welldefinedness checks of JML specifications can be turned on/off.
  This includes class invariants, operation contracts, model fields
  as well as JML (annotation) statements as loop invariants and
  block contracts. The former ones are checked "on-the-fly", i.e.,
  directly when they are applied in the code while proving an operation
  contract, since the context is needed.
  */
  wdChecks:{off, on};
  /*!
  Specifies whether a special goal "Joined node is weakening" should be
  generated as a child of the partner node of a join operation.

  For join procedures formally proven correct, this should not be necessary.
  Enable this option when you are not sure whether a newly implemented join
  procedure is sound. In this case, the generated "is weakening" goals should
  only be closable if the concrete join instance is correct.
  */
  mergeGenerateIsWeakeningGoal:{off, on};

  /*!
  Method calls in KeY can be either handled by inlining the method body or
  by applying the method's contract. Inlining a method body is only modularly
  sound if it is guaranteed that no new method body can override the known
  implementation.
  */
  methodExpansion:{
    /*! Inlining is modularly sound: Methods can only be inlined if private,
        static, final, or in a final method.
        @choiceDefaultOption
    */
    modularOnly,
    /*! Inlining is liberal: Methods can always be inlined, and all known
        method implementations are taken into consideration. This setting
        is sound under a closed program assumption.
    */
    noRestriction
  };

  /*!
  Missing documentation
  */
  javaLoopTreatment:{efficient, teaching};
}





// ***************************************
// Places in KeY with hard-coded rule sets
// (check there when changing rule sets):
// ***************************************
// 1) NodeInfo#symbolicExecNames
// 2) 



\heuristicsDecl{
  notHumanReadable;

  modal_tautology;
  simplify_prog;

  // updates
  update_elim;
  update_apply;
  update_join;
  update_apply_on_update;

  
  // the rule set split if is currently also used to mark program rule applications which
  // would usually be considered to split, but don't because usage of
  // the "if-then-else" operator in logic or by encoding it as 
  //   (cond-> <a>phi) & (!cond -> <b>phi)  
  split_if;
  
  split_cond;
  simplify;
  simplify_enlarging;
  simplify_ENLARGING; // Simplification rules which make formulas much bigger
                      // and therefore should be used less frequently than
                      // the rules from simplify_enlarging set.
  simplify_prog_subset;
  simplify_expression;
  simplify_autoname;
  method_expand;
  query_axiom;
  simplify_instanceof_static;
  evaluate_instanceof;
  instanceof_to_exists;
  loop_expand;
  loop_scope_inv_taclet;
  loop_scope_expand;

  javaIntegerSemantics;
  executeIntegerAssignment;

  triggered;

  comprehension_split;
  comprehensions;
  comprehensions_high_costs;
  comprehensions_low_costs;

  std_taclets;
  closure;
  replace_known_left;
  replace_known_right;
  confluence_restricted;
  delta;
  beta;
  gamma;
  gamma_destructive;
  test_gen;
  test_gen_empty_modality_hide;
  test_gen_quan;
  test_gen_quan_num;
  order_terms;
  apply_equations;
  insert_eq_nonrigid;
  simplify_literals;
  eval_literals;
  int_arithmetic;
  charLiteral_to_intLiteral;
  delta;
  pull_out_quantifier;
  simplify_boolean;
  boolean_cases;
  alpha;
  concrete;
  try_apply_subst;
  type_hierarchy_def;  

  userTaclets1;
  userTaclets2;
  userTaclets3;

  cut;
  cut_direct;
  
  // Set obsolete applies to rules which use is discouraged 
  // in both automated and interactive proofs.
  obsolete;
  
  // sequents
  defOpsSeqEquality;
  
  
  // strings
  stringNormalisationReduce;
  integerToString;

  defOpsConcat;
  stringsSimplify;
  defOpsReplaceInline;
  defOpsReplace;
  defOpsStartsEndsWith;
  stringsReduceSubstring;
  stringsConcatNotBothLiterals;
  stringsReduceConcat;
  stringsExpandDefNormalOp;
  stringsContainsDefInline;
  stringsMoveReplaceInside;
  stringsReduceOrMoveOutsideConcat;
  stringsIntroduceNewSym;

  // primary categories for Buchberger
  polySimp_expand;
  polySimp_directEquations;
  polySimp_saturate;
  polySimp_pullOutGcd;
  polySimp_leftNonUnit;

  // secondary categories for Buchberger
  polySimp_elimSubNeg;
  polySimp_dist;
  polySimp_addAssoc;
  polySimp_mulAssoc;
  polySimp_addOrder;
  polySimp_mulOrder;
  polySimp_mulOne;
  polySimp_balance;
  polySimp_elimOneLeft;
  polySimp_elimOneRight;
  polySimp_normalise;
  polySimp_applyEq;
  polySimp_applyEqRigid;
  polySimp_homo;
  polySimp_pullOutFactor;
  polySimp_critPair;
  polySimp_newSym;
  polySimp_applyEqPseudo;

  // the symbols introduced by rules of the following
  // category will be considered as very small by the
  // term ordering
  polySimp_newSmallSym;

  polyDivision;

  // primary categories for Omega
  inEqSimp_expand;
  inEqSimp_directInEquations;
  inEqSimp_saturate;
  inEqSimp_propagation;
  inEqSimp_pullOutGcd;
  inEqSimp_nonLin;
  inEqSimp_special_nonLin;
  inEqSimp_signCases;
  inEqSimp_forNormalisation;

  // secondary categories for Omega
  inEqSimp_moveLeft;
  inEqSimp_makeNonStrict;
  inEqSimp_homo;
  inEqSimp_commute;
  inEqSimp_balance;
  inEqSimp_antiSymm;
  inEqSimp_exactShadow;
  inEqSimp_normalise;
  inEqSimp_subsumption;
  inEqSimp_contradInEqs;
  inEqSimp_contradEqs;
  inEqSimp_strengthen;
  inEqSimp_nonLin_multiply;
  inEqSimp_nonLin_divide;
  inEqSimp_nonLin_pos;
  inEqSimp_nonLin_neg;
  inEqSimp_nonNegSquares;
  inEqSimp_split_eq;
  inEqSimp_pullOutGcd_antec;
  inEqSimp_pullOutGcd_leq;
  inEqSimp_pullOutGcd_geq;
  inEqSimp_and_contradInEqs;
  inEqSimp_andOr_subsumption;
  inEqSimp_and_subsumptionEq;
  inEqSimp_or_tautInEqs;
  inEqSimp_or_weaken;
  inEqSimp_or_antiSymm;

  // primary categories for defined operations
  defOps_div;
  defOps_jdiv;
  defOps_jdiv_inline;
  defOps_mod;
  defOps_expandRanges;
  defOps_expandModulo;
  defOps_expandJNumericOp;
  defOps_modHomoEq;

  // secondary categories for defined operations
  defOps_divModPullOut;

  // used to solve several issues with system invariants
  system_invariant;

  // used to avoid infinite loops when removing casts
  cast_deletion;

  // rules for adding assertions like x.length >= 0,
  // o.a.<created> = TRUE, etc. that can be derived
  // from wellFormed(heap)
  inReachableStateImplication;
  
  limitObserver;
  classAxiom;
  partialInvAxiom;

  boxDiamondConv;

  // normalisation of formulas that cannot be analysed directly
  // (e.g., quantified formulas)

  // primary categories
  moveQuantToLeft;
  negationNormalForm;
  conjNormalForm;
  apply_equations_andOr;
  elimQuantifier;
  distrQuantifier;
  pullOutQuantifierAll;
  pullOutQuantifierEx;
  swapQuantifiers;

  // secondary categories
  cnf_andAssoc;
  cnf_orAssoc;
  cnf_andComm;
  cnf_orComm;
  cnf_dist;
  cnf_expandIfThenElse;
  elimQuantifierWithCast;
  pullOutQuantifierUnifying;
  cnf_setComm;

  // LocSets
  setEqualityBlastingRight;

  // heap simplification
  pull_out_select;
  simplify_select;
  apply_select_eq;
  apply_auxiliary_eq;
  hide_auxiliary_eq;
  hide_auxiliary_eq_const;
  simplify_heap_high_costs;

  //chrisg: pattern-based automation rules
  auto_induction;
  auto_induction_lemma;
  induction_var;

  // information flow
  information_flow_contract_appl;

  // for equality versions of rules
  no_self_application;
  find_term_not_in_assumes;

  //semantics blasting
  semantics_blasting;

  //automation of loop invariants
  loopInvariant;
  
  // deletion of merge point statements
  merge_point;

  // included for integer simplification macro
  simplify_int;
}
