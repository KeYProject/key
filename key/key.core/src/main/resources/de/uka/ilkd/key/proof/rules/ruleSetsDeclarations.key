// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 

//
// This file contains rules for handling java programs

 
\sorts {
  any;
  java.lang.Object;
  \abstract java.lang.Cloneable \extends java.lang.Object;
  \abstract java.io.Serializable \extends java.lang.Object;
  
  \generic alpha, beta, gamma;
  \generic deltaObject \extends java.lang.Object;
}

\functions {
  alpha alpha::cast(any);
  boolean alpha::exactInstance(any);
  boolean alpha::instance(any);
}

\optionsDecl {
  assertions:{safe, on, off};
  initialisation:{disableStaticInitialisation, enableStaticInitialisation};
  intRules:{arithmeticSemanticsIgnoringOF, arithmeticSemanticsCheckingOF, javaSemantics};
  programRules:{Java, None};  
  runtimeExceptions:{ban, allow, ignore};
  JavaCard:{off, on};
  Strings:{on, off};
  modelFields:{treatAsAxiom, showSatisfiability};
  bigint:{on, off};
  sequences:{on, off};
  moreSeqRules:{off, on};
  reach:{on, off};
  integerSimplificationRules:{full, minimal}; // TODO: further refine this option
  permissions:{off, on};
  wdOperator:{L, Y, D};
  wdChecks:{off, on};
  mergeGenerateIsWeakeningGoal:{off, on};
  methodExpansion:{modularOnly, noRestriction};
}





// ***************************************
// Places in KeY with hard-coded rule sets
// (check there when changing rule sets):
// ***************************************
// 1) NodeInfo#symbolicExecNames
// 2) 



\heuristicsDecl{
  notHumanReadable;

  modal_tautology;
  simplify_prog;

  // updates
  update_elim;
  update_apply;
  update_join;
  update_apply_on_update;

  
  // the rule set split if is currently also used to mark program rule applications which
  // would usually be considered to split, but don't because usage of
  // the "if-then-else" operator in logic or by encoding it as 
  //   (cond-> <a>phi) & (!cond -> <b>phi)  
  split_if;
  
  split_cond;
  simplify;
  simplify_enlarging;
  simplify_ENLARGING; // Simplification rules which make formulas much bigger
                      // and therefore should be used less frequently than
                      // the rules from simplify_enlarging set.
  simplify_prog_subset;
  simplify_expression;
  simplify_autoname;
  method_expand;
  query_axiom;
  simplify_instanceof_static;
  evaluate_instanceof;
  instanceof_to_exists;
  loop_expand;

  javaIntegerSemantics;
  executeIntegerAssignment;

  triggered;

  comprehension_split;
  comprehensions;
  comprehensions_high_costs;
  comprehensions_low_costs;

  std_taclets;
  closure;
  replace_known_left;
  replace_known_right;
  confluence_restricted;
  delta;
  beta;
  gamma;
  gamma_destructive;
  test_gen;
  test_gen_empty_modality_hide;
  test_gen_quan;
  test_gen_quan_num;
  order_terms;
  apply_equations;
  insert_eq_nonrigid;
  simplify_literals;
  eval_literals;
  int_arithmetic;
  charLiteral_to_intLiteral;
  delta;
  pull_out_quantifier;
  simplify_boolean;
  boolean_cases;
  alpha;
  concrete;
  try_apply_subst;
  type_hierarchy_def;  

  userTaclets1;
  userTaclets2;
  userTaclets3;

  cut;
  cut_direct;
  
  // Set obsolete applies to rules which use is discouraged 
  // in both automated and interactive proofs.
  obsolete;
  
  // sequents
  defOpsSeqEquality;
  
  
  // strings
  stringNormalisationReduce;
  integerToString;

  defOpsConcat;
  stringsSimplify;
  defOpsReplaceInline;
  defOpsReplace;
  defOpsStartsEndsWith;
  stringsReduceSubstring;
  stringsConcatNotBothLiterals;
  stringsReduceConcat;
  stringsExpandDefNormalOp;
  stringsContainsDefInline;
  stringsMoveReplaceInside;
  stringsReduceOrMoveOutsideConcat;
  stringsIntroduceNewSym;

  // primary categories for Buchberger
  polySimp_expand;
  polySimp_directEquations;
  polySimp_saturate;
  polySimp_pullOutGcd;
  polySimp_leftNonUnit;

  // secondary categories for Buchberger
  polySimp_elimSubNeg;
  polySimp_dist;
  polySimp_addAssoc;
  polySimp_mulAssoc;
  polySimp_addOrder;
  polySimp_mulOrder;
  polySimp_mulOne;
  polySimp_balance;
  polySimp_elimOneLeft;
  polySimp_elimOneRight;
  polySimp_normalise;
  polySimp_applyEq;
  polySimp_applyEqRigid;
  polySimp_homo;
  polySimp_pullOutFactor;
  polySimp_critPair;
  polySimp_newSym;
  polySimp_applyEqPseudo;

  // the symbols introduced by rules of the following
  // category will be considered as very small by the
  // term ordering
  polySimp_newSmallSym;

  polyDivision;

  // primary categories for Omega
  inEqSimp_expand;
  inEqSimp_directInEquations;
  inEqSimp_saturate;
  inEqSimp_propagation;
  inEqSimp_pullOutGcd;
  inEqSimp_nonLin;
  inEqSimp_special_nonLin;
  inEqSimp_signCases;
  inEqSimp_forNormalisation;

  // secondary categories for Omega
  inEqSimp_moveLeft;
  inEqSimp_makeNonStrict;
  inEqSimp_homo;
  inEqSimp_commute;
  inEqSimp_balance;
  inEqSimp_antiSymm;
  inEqSimp_exactShadow;
  inEqSimp_normalise;
  inEqSimp_subsumption;
  inEqSimp_contradInEqs;
  inEqSimp_contradEqs;
  inEqSimp_strengthen;
  inEqSimp_nonLin_multiply;
  inEqSimp_nonLin_divide;
  inEqSimp_nonLin_pos;
  inEqSimp_nonLin_neg;
  inEqSimp_nonNegSquares;
  inEqSimp_split_eq;
  inEqSimp_pullOutGcd_antec;
  inEqSimp_pullOutGcd_leq;
  inEqSimp_pullOutGcd_geq;
  inEqSimp_and_contradInEqs;
  inEqSimp_andOr_subsumption;
  inEqSimp_and_subsumptionEq;
  inEqSimp_or_tautInEqs;
  inEqSimp_or_weaken;
  inEqSimp_or_antiSymm;

  // primary categories for defined operations
  defOps_div;
  defOps_jdiv;
  defOps_jdiv_inline;
  defOps_mod;
  defOps_expandRanges;
  defOps_expandModulo;
  defOps_expandJNumericOp;
  defOps_modHomoEq;

  // secondary categories for defined operations
  defOps_divModPullOut;

  // used to solve several issues with system invariants
  system_invariant;

  // used to avoid infinite loops when removing casts
  cast_deletion;

  // rules for adding assertions like x.length >= 0,
  // o.a.<created> = TRUE, etc. that can be derived
  // from wellFormed(heap)
  inReachableStateImplication;
  
  limitObserver;
  classAxiom;
  partialInvAxiom;

  boxDiamondConv;

  // normalisation of formulas that cannot be analysed directly
  // (e.g., quantified formulas)

  // primary categories
  moveQuantToLeft;
  negationNormalForm;
  conjNormalForm;
  apply_equations_andOr;
  elimQuantifier;
  distrQuantifier;
  pullOutQuantifierAll;
  pullOutQuantifierEx;
  swapQuantifiers;

  // secondary categories
  cnf_andAssoc;
  cnf_orAssoc;
  cnf_andComm;
  cnf_orComm;
  cnf_dist;
  cnf_expandIfThenElse;
  elimQuantifierWithCast;
  pullOutQuantifierUnifying;
  cnf_setComm;

  // LocSets
  setEqualityBlastingRight;

  // heap simplification
  pull_out_select;
  simplify_select;
  apply_select_eq;
  apply_auxiliary_eq;
  hide_auxiliary_eq;
  hide_auxiliary_eq_const;
  simplify_heap_high_costs;

  //chrisg: pattern-based automation rules
  auto_induction;
  auto_induction_lemma;
  induction_var;

  // information flow
  information_flow_contract_appl;

  // for equality versions of rules
  no_self_application;
  find_term_not_in_assumes;

  //semantics blasting
  semantics_blasting;

  //automation of loop invariants
  loopInvariant;
  
  // deletion of merge point statements
  merge_point;

  // included for integer simplification macro
  simplify_int;
}
