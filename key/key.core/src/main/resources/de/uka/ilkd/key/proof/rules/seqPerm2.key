// This file contains some advanced and experimental rules 
// for permutations in the sequence data type
// author P.H. Schmitt


// Find the DECLARATIONS in file seq.key and
// definitional extensions in file seqRules.key

\rules{



// taclet schiffl-lemma_1 has been removed
\lemma
  schiffl_lemma_2 {
    \schemaVar \term Seq s, t;
    \schemaVar \variable  Seq r;
    \schemaVar \variable  int x, y, iv;

    \find (seqPerm(s,t)==>)
     \varcond (\notFreeIn (iv,s,t), 
               \notFreeIn (r ,s,t),
               \notFreeIn (x ,s,t), 
               \notFreeIn (y ,s,t))

    \add(\forall x;\forall y;(
         any::seqGet(s,x)=any::seqGet(t,x) &
         any::seqGet(s,y)=any::seqGet(t,y) & 0 <= x & x < seqLen(s) &
         0 <= y & y < seqLen(s)
      -> \exists r; (seqLen(r) = seqLen(s) & seqNPerm(r) & 
          (\forall iv; (0 <= iv &  iv < seqLen(s) ->  
           any::seqGet(s,iv) = any::seqGet(t,int::seqGet(r,iv)))) &
           int::seqGet(r,x)= x &  int::seqGet(r,y)= y))
      ==> )
  };

 \lemma
  schiffl_thm_1 {
    \schemaVar \term Seq s, t;
    \schemaVar \term int x, y;
    \schemaVar \term any a, b;
    \schemaVar \variables int idx;

    \find (seqPerm(s,t)==>)
    \varcond (\notFreeIn(idx, x),  \notFreeIn(idx, y), 
              \notFreeIn(idx, a),  \notFreeIn(idx, b),
              \notFreeIn(idx, s),  \notFreeIn(idx, t))

    \add(seqPerm(s,t) & any::seqGet(s,x)=any::seqGet(t,x) &
         any::seqGet(s,y)=any::seqGet(t,y) & 0 <= x & x < seqLen(s) &
         0 <= y & y < seqLen(s)
      -> seqPerm(seqDef{idx;}(0, s.length,\if(idx=y)\then(b)\else(\if(idx=x)\then(a)\else(any::seqGet(s, idx))))
                ,seqDef{idx;}(0, s.length,\if(idx=y)\then(b)\else(\if(idx=x)\then(a)\else(any::seqGet(t, idx)))))
==> )
  };




//  seqUpd(seqUpd(s,x,a),y,b) =
//  seqDef{idx;}(0, s.length,
//  \if(idx=y)\then(b)\else(\if(idx=x)\then(a)
//  \else(int::seqGet(s, idx))))

//  seqUpd(seqUpd(t,x,a),y,b) =
//  seqDef{idx;}(0, s.length,
//  \if(idx=y)\then(b)\else(\if(idx=x)\then(a)
//  \else(int::seqGet(t, idx))))


}
