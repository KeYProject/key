// This file is part of KeY - Integrated Deductive Software Design
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General
// Public License. See LICENSE.TXT for details.
//



//--------------------------------------------------------------------
// rules for bounded products
//--------------------------------------------------------------------

\schemaVariables{

  \term int i,i0,i1,i2,i3,i4,j,j0,j1,t,t1,t2;
  \skolemTerm int sk, sk2 ;
  \term numbers iz, jz ;
  \formula b, psi, phi, post, inv;
  \variables int uSub, uSub1, uSub2;
}


\rules(integerSimplificationRules:full){

  // axiom
  bprod_empty {
	\find(bprod{uSub;} (i0, i1, t))\sameUpdateLevel
	\varcond (\notFreeIn(uSub, i0),
		  \notFreeIn(uSub, i1))
	"Precondition": \add(==> i1<=i0);
	"Empty Sum": \replacewith(1)
  };


  // axiom
  bprod_induction_upper {
	\find(bprod{uSub;} (i0, i2, t))
	\varcond ( \notFreeIn(uSub, i0),
		   \notFreeIn(uSub, i2))
	\replacewith(bprod{uSub;} (i0, i2-1, t)
			* \if(i0<i2)\then({\subst uSub; (i2-1)}t)\else(1))
  };

  bprod_find {

	\schemaVar \term int low, high, middle;

        \find (bprod{uSub;} (low, high, t))
	\varcond ( \notFreeIn(uSub, low),
		   \notFreeIn(uSub, middle),
		   \notFreeIn(uSub, high) )
	\replacewith(\if(low<=middle & middle<=high)
	             \then(bprod{uSub;}(low, middle, t)
				* bprod{uSub;}(middle,high,t))
	             \else(bprod{uSub;}(low, high, t)))

	\heuristics (comprehension_split, triggered)

	\trigger{middle} bprod{uSub;}(low, middle, t) \avoid middle <= low, middle >= high;
  };


  bprod_commutative_associative {
	\find(bprod{uSub;} (i0, i2, t*t2))
	\varcond ( \notFreeIn(uSub1, i0),
		   \notFreeIn(uSub1, i2),
                   \notFreeIn(uSub, i0),
		   \notFreeIn(uSub, i2),
                   \notFreeIn(uSub1, t2) )
	\replacewith(bprod{uSub;}(i0, i2, t)
			* bprod{uSub1;}(i0, i2, {\subst uSub; uSub1}t2))
  };

  bprod_induction_upper_concrete {
	\find(bprod{uSub;} (i0, 1+i2, t))
	\varcond ( \notFreeIn(uSub, i0),
		   \notFreeIn(uSub, i2))
	\replacewith(bprod{uSub;} (i0, i2, t)
			* \if(i0<=i2)\then({\subst uSub; (i2)}t)\else(1))
	\heuristics(simplify)
  };

  bprod_induction_lower {
	\find(bprod{uSub;} (i0, i2, t))
	\varcond ( \notFreeIn(uSub, i0),
		   \notFreeIn(uSub, i2))
	\replacewith(bprod{uSub;} (i0+1, i2, t)
			* \if(i0<i2)\then({\subst uSub; (i0)}t)\else(1))
  };

  bprod_induction_lower_concrete {
	\find(bprod{uSub;} (-1+i0, i2, t))
	\varcond ( \notFreeIn(uSub, i0),
		   \notFreeIn(uSub, i2))
	\replacewith(bprod{uSub;} (i0, i2, t)
			* \if(-1+i0<i2)\then({\subst uSub; (-1+i0)}t)\else(1))
	\heuristics(simplify)
  };

  // proven in KeY -- DB 25/10/2013
  bprod_shift_index {
     \find(bprod{uSub;}(i0,i1,t))
     \varcond (\notFreeIn(uSub, i0),\notFreeIn(uSub, i1),
               \notFreeIn(uSub1, i0),\notFreeIn(uSub1, i1),\notFreeIn(uSub1,t))
     \replacewith( bprod{uSub1;}(0, i1-i0, {\subst uSub; uSub1+i0} t) )
  };


  // proven in KeY -- DB 19/10/2012
  bprod_equal_zero_right {
	\find(==> bprod{uSub;} (i0, i2, t)=0)
	\varcond ( \notFreeIn(uSub, i0),
		   \notFreeIn(uSub, i2))
	\add(==> \exists uSub; {\subst uSub; uSub}(uSub>=i0 & uSub<i2 & t=0))
	\heuristics(comprehensions)
  };

  bprod_equal_one_right {
	\find(==> bprod{uSub;} (i0, i2, t)=1)
	\varcond ( \notFreeIn(uSub, i0),
		   \notFreeIn(uSub, i2))
	\add(==> \forall uSub; {\subst uSub; uSub}(uSub>=i0 & uSub<i2 -> t=1))
	\heuristics(comprehensions)
  };

  // proven in KeY -- DB 19/10/2012
  bprod_one_factor {
	\find(bprod{uSub;} (i0, i1, t))\sameUpdateLevel
	\varcond (\notFreeIn(uSub, i0),
		  \notFreeIn(uSub, i1))
	\replacewith(\if(i0+1=i1)\then({\subst uSub;  i0} t)
				\else(bprod{uSub;} (i0, i1, t)))
  };

  // proven in KeY -- DB 19/10/2012
  bprod_one_factor_concrete1 {
	\find(bprod{uSub;} (i0, 1+i0, t))\sameUpdateLevel
	\varcond (\notFreeIn(uSub, i0))
	\replacewith({\subst uSub; i0} t)
        \heuristics(concrete)
  };

  // proven in KeY -- DB 19/10/2012
  bprod_one_factor_concrete2 {
	\find(bprod{uSub;} (-1+i0, i0, t))\sameUpdateLevel
	\varcond (\notFreeIn(uSub, i0))
	\replacewith({\subst uSub; -1+i0} t)
        \heuristics(concrete)
  };

  // proven in KeY -- DB 27/09/2013
  bprod_zero {
	\find(bprod{uSub;} (i0, i1, 0))
	\varcond (\notFreeIn(uSub, i0),
		  \notFreeIn(uSub, i1))
	\replacewith( \if(i0 < i1) \then(0) \else(1) )
        \heuristics(simplify)
  };

  // proven in KeY -- DB 19/10/2012
  bprod_one {
	\find(bprod{uSub;} (i0, i1, 1))
	\varcond (\notFreeIn(uSub, i0),
		  \notFreeIn(uSub, i1))
	\replacewith(1)
	\heuristics(concrete)
  };

  // proven in KeY -- DB 19/10/2012
  bprod_lower_equals_upper {
	\find(bprod{uSub;} (i0, i0, t))\sameUpdateLevel
	\varcond (\notFreeIn(uSub, i0))
	\replacewith(1)
	\heuristics(concrete)
  };

  equal_bprod1 {
        \find(==> bprod{uSub1;} (i0, i1, t1) = bprod{uSub2;} (i0, i1, t2))
	\varcond (\notFreeIn(uSub2, t1),
		  \notFreeIn(uSub1, t2),
		  \notFreeIn(uSub1, i0),
                  \notFreeIn(uSub1, i1),
		  \notFreeIn(uSub2, i0),
                  \notFreeIn(uSub2, i1))
	\add(==>\forall uSub1; ((uSub1>=i0 & uSub1<i1)
			-> t1=({\subst uSub2; uSub1}t2)))
	\heuristics(comprehensions)
        \displayname "equal_bprod_same_index"
  };

  equal_bprod2 {
	\assumes(bprod{uSub1;} (i0, i1, t1) = i ==>)
        \find(==>  bprod{uSub2;} (i0, i1, t2) = i)
	\varcond (\notFreeIn(uSub2, t1),
		  \notFreeIn(uSub1, t2),
		  \notFreeIn(uSub1, i0),
                  \notFreeIn(uSub1, i1),
		  \notFreeIn(uSub2, i0),
                  \notFreeIn(uSub2, i1))
	\add(==>\forall uSub1; ((uSub1>=i0 & uSub1<i1)
			-> t1=({\subst uSub2; uSub1}t2)))
	\heuristics(comprehensions)
        \displayname "equal_bprod_same_index"
  };

  equal_bprod3 {
	\assumes(bprod{uSub1;} (i0, i1, t1) = i, bprod{uSub2;} (i0, i1, t2) = j ==>)
        \find(==>  j = i)
	\varcond (\notFreeIn(uSub2, t1),
		  \notFreeIn(uSub1, t2),
		  \notFreeIn(uSub1, i0),
                  \notFreeIn(uSub1, i1),
		  \notFreeIn(uSub2, i0),
                  \notFreeIn(uSub2, i1))
	\add(==>\forall uSub1; ((uSub1>=i0 & uSub1<i1)
			-> t1=({\subst uSub2; uSub1}t2)))
	\heuristics(comprehensions)
        \displayname "equal_bprod_same_index"
  };

 equal_bprod5 {
        \find(==> bprod{uSub1;} (i0, i1, t1) = bprod{uSub2;} (i2, i3, t2))
	\varcond (\notFreeIn(uSub2, t1),
		  \notFreeIn(uSub1, t2),
		  \notFreeIn(uSub1, i0), \notFreeIn(uSub2, i0),
                  \notFreeIn(uSub1, i1), \notFreeIn(uSub2, i1),
		  \notFreeIn(uSub1, i2), \notFreeIn(uSub2, i2),
                  \notFreeIn(uSub1, i3), \notFreeIn(uSub2, i3))
        "Equal length" :\add(==> i1-i0 = i3-i2);
        "Equal elements":
	\add(==>\forall uSub1; ((uSub1>=i0 & uSub1<i1) -> t1=({\subst uSub2; uSub1+i2-i0}t2)))
	\heuristics(comprehensions_high_costs)
        \displayname "equal_bprod"
 };

  bprod_invert_index {
     \find ( bprod{uSub;}(i0, i1, t) )
     \varcond(\notFreeIn(uSub,i0,i1),
              \notFreeIn(uSub1,i0,i1,t))
     \replacewith( bprod{uSub1;}(-i1, -i0, {\subst uSub; -uSub1}t) )
  };

  bprod_invert_index_concrete {
     \find ( bprod{uSub;}(i0 * -1, i1 * -1, t) )
     \varcond(\notFreeIn(uSub,i0,i1),
              \notFreeIn(uSub1,i0,i1,t))
     \replacewith( bprod{uSub1;}(i1, i0, {\subst uSub; -uSub1}t) )
     \heuristics(simplify)
  };

}

\rules(integerSimplificationRules:full, sequences:on) {
  equal_bprod_perm1 {
      \find(==> bprod{uSub1;} (i0, i1, t1) = bprod{uSub2;} (i2, i3, t2))
      \varcond (\notFreeIn(uSub2, t1),
	        \notFreeIn(uSub1, t2),
	        \notFreeIn(uSub1, i0), \notFreeIn(uSub2, i0),
                \notFreeIn(uSub1, i1), \notFreeIn(uSub2, i1),
                \notFreeIn(uSub1, i2), \notFreeIn(uSub2, i2),
                \notFreeIn(uSub1, i3), \notFreeIn(uSub2, i3))
      \add ( ==> seqPerm( seqDef{uSub1;}(i0, i1, t1), seqDef{uSub2;}(i2, i3, t2) ) )
      \displayname "equal_bprod_perm"
  };

  equal_bprod_perm2 {
      \assumes(bprod{uSub2;} (i2,i3,t2) = t ==>)
      \find(==> bprod{uSub1;} (i0, i1, t1) = t)
      \varcond (\notFreeIn(uSub2, t1),
	        \notFreeIn(uSub1, t2),
	        \notFreeIn(uSub1, i0), \notFreeIn(uSub2, i0),
                \notFreeIn(uSub1, i1), \notFreeIn(uSub2, i1),
                \notFreeIn(uSub1, i2), \notFreeIn(uSub2, i2),
                \notFreeIn(uSub1, i3), \notFreeIn(uSub2, i3))
      \add ( ==> seqPerm( seqDef{uSub1;}(i0, i1, t1), seqDef{uSub2;}(i2, i3, t2) ) )
      \displayname "equal_bprod_perm"
  };
}


//--------------------------------------------------------------------
// rules for general products
//--------------------------------------------------------------------
\rules(integerSimplificationRules:full) {

  prod_empty {
    \schemaVar\variables alpha x;
    \find( prod{x;}(FALSE, t) )
    \replacewith (1)
    \heuristics(concrete)
  };

  prod_one {
    \schemaVar\variables alpha x;
    \schemaVar\term boolean range;
    \find( prod{x;}(range, 1) )
    \replacewith (1)
    \heuristics(concrete)
  };

}
