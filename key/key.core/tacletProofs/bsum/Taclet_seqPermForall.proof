\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Mar 07 13:18:55 CET 2022
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\proofObligation "#Proof Obligation Settings
#Mon Mar 07 13:18:55 CET 2022
definitionFile=unknown
name=seqPermForall
tacletFile=/home/mattias/sync/key/key/key.core/src/main/resources/de/uka/ilkd/key/proof/rules/seqCount.key
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "mattias" ) (keyVersion "6e9a3bc895080585635c1442cd178f3c0b6e17ca"))

(autoModeTime "3610")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "v_iv,f_s1,v_x,f_phi,f_s2") (userinteraction))
(rule "notRight" (formula "2") (userinteraction))
(rule "notLeft" (formula "2") (userinteraction))
(rule "apply_subst_for" (formula "2") (term "1,0,0") (userinteraction))
(rule "apply_subst_for" (formula "2") (term "1,0,1") (userinteraction))
(rule "seqPermDef" (formula "1") (inst "s=s") (inst "iv=iv") (userinteraction))
(rule "andLeft" (formula "1") (userinteraction))
(rule "equiv_right" (formula "3") (userinteraction))
(branch "Case '->'"
   (rule "exLeft" (formula "3") (inst "sk=s_0") (userinteraction))
   (rule "seqNPermDefReplace" (formula "3") (term "1,0") (inst "iv=iv") (inst "jv=jv") (userinteraction))
    (builtin "SMTRule")
)
(branch "Case '<-'"
   (rule "exLeft" (formula "3") (inst "sk=s_0") (userinteraction))
   (rule "commute_and" (formula "3") (term "0") (userinteraction))
   (rule "andLeft" (formula "3") (userinteraction))
   (rule "andLeft" (formula "3") (userinteraction))
   (rule "seqNPermRange" (formula "3") (inst "iv=iv") (userinteraction))
   (rule "seqNPermDefLeft" (formula "4") (inst "iv=iv") (inst "jv=jv") (userinteraction))
   (rule "allRight" (formula "8") (inst "sk=v_iv_0"))
   (rule "impRight" (formula "8"))
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "4"))
   (rule "eqSymm" (formula "9") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "1"))
   (rule "applyEqRigid" (formula "5") (term "0,1,0,0,1,0,1,0") (ifseqformula "8"))
   (rule "applyEqRigid" (formula "5") (term "0,1,0,0,1,0,0") (ifseqformula "8"))
   (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "8"))
   (rule "applyEq" (formula "6") (term "0,1,0,0,1,0,0") (ifseqformula "8"))
   (rule "applyEqRigid" (formula "6") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "8"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,1,0"))
   (rule "mul_literals" (formula "5") (term "0,1,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
   (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
   (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0"))
   (rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0"))
   (rule "nnf_imp2or" (formula "3") (term "0"))
   (rule "nnf_imp2or" (formula "5") (term "0"))
   (rule "nnf_imp2or" (formula "9") (term "0"))
   (rule "nnf_imp2or" (formula "6") (term "0"))
   (rule "nnf_notAnd" (formula "3") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0"))
   (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "3") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0"))
   (rule "mul_literals" (formula "3") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "3") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "5") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
   (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
   (rule "mul_literals" (formula "5") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "9") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
   (rule "mul_literals" (formula "9") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "6") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
   (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
   (rule "mul_literals" (formula "6") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
   (rule "commute_or_2" (formula "3") (term "0"))
   (rule "commute_or_2" (formula "9") (term "0"))
   (rule "commute_and_2" (formula "5") (term "1,0"))
   (rule "commute_and_2" (formula "6") (term "0,1,0"))
   (rule "commute_or" (formula "3") (term "0,0"))
   (rule "commute_or" (formula "9") (term "0,0"))
   (rule "cnf_rightDist" (formula "5") (term "0"))
   (rule "distr_forallAnd" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "commute_or" (formula "6") (term "0"))
   (rule "cnf_rightDist" (formula "5") (term "0"))
   (rule "distr_forallAnd" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "shift_paren_or" (formula "6") (term "0"))
   (rule "commute_and" (formula "8") (term "0,0,1,0"))
   (rule "lenNonNegative" (formula "10") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "10"))
   (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
   (rule "lenNonNegative" (formula "11") (term "1"))
   (rule "inEqSimp_commuteLeq" (formula "11"))
   (rule "seqGetAlphaCast" (formula "13") (term "0"))
   (rule "castDel" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "lenNonNegative" (formula "4") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "4"))
   (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
   (rule "ex_pull_out3" (formula "8") (term "0"))
   (rule "cnf_rightDist" (formula "8") (term "0,0"))
   (rule "commute_or" (formula "8") (term "1,0,0"))
   (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
   (rule "commute_or" (formula "8") (term "1,0,0,0"))
   (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
   (rule "commute_or" (formula "8") (term "0,0,0,0,0"))
   (rule "commute_and" (formula "8") (term "0,0,0"))
   (rule "commute_and_2" (formula "8") (term "0,0"))
   (rule "allLeft" (formula "12") (inst "t=v_iv_0"))
   (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
   (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "2"))
   (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
   (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
   (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
   (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "12") (term "0,0,1"))
   (rule "leq_literals" (formula "12") (term "0,1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "1"))
   (rule "qeq_literals" (formula "12") (term "0,1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "allLeft" (formula "5") (inst "t=v_iv_0"))
   (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0"))
   (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0") (ifseqformula "1"))
   (rule "qeq_literals" (formula "5") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "2"))
   (rule "inEqSimp_homoInEq1" (formula "5") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
   (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
   (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "5") (term "0,0,0"))
   (rule "leq_literals" (formula "5") (term "0,0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "allLeft" (formula "8") (inst "t=v_iv_0"))
   (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
   (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0") (ifseqformula "2"))
   (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0"))
   (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0"))
   (rule "add_literals" (formula "8") (term "1,1,0,0,1,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,1,0"))
   (rule "add_literals" (formula "8") (term "0,0,1,0"))
   (rule "leq_literals" (formula "8") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "1"))
   (rule "qeq_literals" (formula "8") (term "0,0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "8"))
   (rule "times_zero_1" (formula "5") (term "0,0"))
   (rule "add_zero_left" (formula "5") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "5"))
   (rule "mul_literals" (formula "5") (term "1"))
   (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "5"))
   (rule "leq_literals" (formula "13") (term "0"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "true_left" (formula "13"))
   (rule "allLeft" (formula "3") (inst "t=int::seqGet(s_0, v_iv_0)"))
   (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "15"))
   (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "17"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "inEqSimp_contradInEq0" (formula "3") (term "1") (ifseqformula "10"))
   (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1"))
   (rule "mul_literals" (formula "3") (term "0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,0,1"))
   (rule "polySimp_addComm0" (formula "3") (term "0,0,0,1"))
   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1"))
   (rule "add_literals" (formula "3") (term "1,1,0,0,1"))
   (rule "times_zero_1" (formula "3") (term "1,0,0,1"))
   (rule "add_literals" (formula "3") (term "0,0,1"))
   (rule "leq_literals" (formula "3") (term "0,1"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "7"))
   (rule "qeq_literals" (formula "3") (term "0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "closeFalse" (formula "3"))
)
)
}
