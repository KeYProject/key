\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Jan 16 11:36:19 CET 2014
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_COMPLETION
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]RETREAT_MODE_OPTIONS_KEY=RETREAT_MODE_NONE
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=1000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , assertions-assertions\\:on , modelFields-modelFields\\:showSatisfiability , initialisation-initialisation\\:disableStaticInitialisation , Strings-Strings\\:on , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , optimisedSelectRules-optimisedSelectRules\\:on , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Thu Jan 16 11:36:19 CET 2014
name=seqDefOfSeq
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "mattias" ) (keyVersion "5ed59f29395c1a5b462ee136666be80924e10503"))

(autoModeTime "4130")

(branch "dummy ID"
(rule "equalityToSeqGetAndSeqLen" (formula "1") (inst "iv=iv") (userinteraction))
(rule "andRight" (formula "1") (userinteraction))
(branch "Case 1"
   (rule "lenOfSeqDef" (formula "1") (term "0") (userinteraction))
   (rule "ifthenelse_split" (formula "1") (term "0,1") (userinteraction))
   (branch "seqLen(f_s) = f_x TRUE"
      (rule "polySimp_elimSub" (formula "2") (term "1,0"))
      (rule "times_zero_2" (formula "2") (term "1,1,0"))
      (rule "add_zero_right" (formula "2") (term "1,0"))
      (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
      (rule "add_zero_right" (formula "2") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
      (rule "applyEq" (formula "2") (term "1") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "orRight" (formula "2"))
      (rule "eqSymm" (formula "3"))
      (rule "inEqSimp_leqRight" (formula "2"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_invertInEq1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "times_zero_2" (formula "1") (term "1"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "3"))
      (rule "add_literals" (formula "1") (term "1"))
      (rule "inEqSimp_contradEq3" (formula "3") (ifseqformula "1"))
      (rule "times_zero_1" (formula "3") (term "1,0,0"))
      (rule "add_zero_right" (formula "3") (term "0,0"))
      (rule "qeq_literals" (formula "3") (term "0"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "false_right" (formula "3"))
      (rule "lenNonNegative" (formula "2") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "2"))
      (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
      (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
      (rule "qeq_literals" (formula "2") (term "0"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "closeFalse" (formula "2"))
   )
   (branch "seqLen(f_s) = f_x FALSE"
      (rule "polySimp_elimSub" (formula "2") (term "1,0"))
      (rule "mul_literals" (formula "2") (term "1,1,0"))
      (rule "add_zero_right" (formula "2") (term "1,0"))
      (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
      (rule "add_zero_right" (formula "2") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
      (rule "inEqSimp_gtToGeq" (formula "2") (term "0,0,1"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
      (rule "eqSymm" (formula "2"))
      (rule "polySimp_elimOne" (formula "2") (term "0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
      (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0"))
      (rule "ifthenelse_split" (formula "2") (term "1"))
      (branch "f_x >= 1 TRUE"
         (rule "ifthenelse_split" (formula "3") (term "0,0"))
         (branch "seqLen(f_s) >= 1 + f_x TRUE"
            (rule "lenOfSeqSub" (formula "4") (term "0"))
            (rule "polySimp_elimSub" (formula "4") (term "1,0"))
            (rule "times_zero_2" (formula "4") (term "1,1,0"))
            (rule "add_zero_right" (formula "4") (term "1,0"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "orRight" (formula "4"))
            (rule "eqSymm" (formula "5"))
            (rule "inEqSimp_ltRight" (formula "4"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "polySimp_mulComm0" (formula "1") (term "0"))
            (rule "inEqSimp_invertInEq1" (formula "1"))
            (rule "times_zero_2" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_contradEq7" (formula "5") (ifseqformula "3"))
            (rule "times_zero_1" (formula "5") (term "1,0,0"))
            (rule "add_literals" (formula "5") (term "0,0"))
            (rule "leq_literals" (formula "5") (term "0"))
            (builtin "One Step Simplification" (formula "5"))
            (rule "false_right" (formula "5"))
            (rule "inEqSimp_contradEq7" (formula "4") (ifseqformula "2"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
            (rule "add_literals" (formula "4") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "4") (term "1,0,0"))
            (rule "add_zero_right" (formula "4") (term "0,0"))
            (rule "leq_literals" (formula "4") (term "0"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "false_right" (formula "4"))
            (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
            (rule "qeq_literals" (formula "3") (term "0"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "closeFalse" (formula "3"))
         )
         (branch "seqLen(f_s) >= 1 + f_x FALSE"
            (rule "inEqSimp_geqRight" (formula "3"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "lenOfSeqConcat" (formula "4") (term "0"))
            (rule "polySimp_homoEq" (formula "4"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
            (rule "polySimp_rightDist" (formula "4") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "4") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "4") (term "0"))
            (rule "polySimp_sepNegMonomial" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0"))
            (rule "polySimp_elimOne" (formula "4") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
            (rule "polySimp_elimOne" (formula "1") (term "1"))
            (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "3"))
            (rule "inEqSimp_contradEq3" (formula "3") (ifseqformula "1"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
            (rule "add_literals" (formula "3") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "3") (term "1,0,0"))
            (rule "add_literals" (formula "3") (term "0,0"))
            (rule "qeq_literals" (formula "3") (term "0"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "false_right" (formula "3"))
            (rule "lenOfSeqDef" (formula "3") (term "0"))
            (rule "polySimp_elimSub" (formula "3") (term "1,0"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "orRight" (formula "3"))
            (rule "polySimp_homoEq" (formula "4"))
            (rule "times_zero_2" (formula "4") (term "1,0"))
            (rule "add_zero_right" (formula "4") (term "0"))
            (rule "inEqSimp_ltRight" (formula "3"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "polySimp_sepNegMonomial" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0"))
            (rule "polySimp_elimOne" (formula "4") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
            (rule "polySimp_elimOne" (formula "1") (term "1"))
            (rule "inEqSimp_contradEq3" (formula "4") (ifseqformula "2"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
            (rule "add_literals" (formula "4") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "4") (term "1,0,0"))
            (rule "add_zero_right" (formula "4") (term "0,0"))
            (rule "qeq_literals" (formula "4") (term "0"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "false_right" (formula "4"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_homoInEq1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addComm0" (formula "1") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "add_literals" (formula "1") (term "0"))
            (rule "leq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "f_x >= 1 FALSE"
         (rule "inEqSimp_geqRight" (formula "2"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "ifthenelse_split" (formula "3") (term "0,0"))
         (branch "seqLen(f_s) >= 1 + f_x TRUE"
            (rule "lenOfSeqSub" (formula "4") (term "0"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "orRight" (formula "4"))
            (rule "notRight" (formula "4"))
            (rule "polySimp_elimSub" (formula "5") (term "0"))
            (rule "times_zero_2" (formula "5") (term "1,0"))
            (rule "add_zero_right" (formula "5") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "1"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_contradEq7" (formula "5") (ifseqformula "1"))
            (rule "times_zero_1" (formula "5") (term "1,0,0"))
            (rule "add_zero_right" (formula "5") (term "0,0"))
            (rule "leq_literals" (formula "5") (term "0"))
            (builtin "One Step Simplification" (formula "5"))
            (rule "false_right" (formula "5"))
            (rule "inEqSimp_contradEq7" (formula "4") (ifseqformula "2"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
            (rule "add_literals" (formula "4") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "4") (term "1,0,0"))
            (rule "add_literals" (formula "4") (term "0,0"))
            (rule "leq_literals" (formula "4") (term "0"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "false_right" (formula "4"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "3"))
            (rule "qeq_literals" (formula "1") (term "0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "seqLen(f_s) >= 1 + f_x FALSE"
            (rule "inEqSimp_geqRight" (formula "3"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "lenOfSeqConcat" (formula "4") (term "0"))
            (rule "polySimp_sepPosMonomial" (formula "4"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
            (rule "polySimp_elimOne" (formula "1") (term "1"))
            (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "3"))
            (rule "inEqSimp_contradEq3" (formula "3") (ifseqformula "1"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
            (rule "add_literals" (formula "3") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "3") (term "1,0,0"))
            (rule "add_zero_right" (formula "3") (term "0,0"))
            (rule "qeq_literals" (formula "3") (term "0"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "false_right" (formula "3"))
            (rule "lenOfSeqDef" (formula "3") (term "0"))
            (rule "polySimp_elimSub" (formula "3") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
            (rule "mul_literals" (formula "3") (term "0,1,0,0"))
            (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
            (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "polySimp_homoEq" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
            (rule "polySimp_rightDist" (formula "3") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
            (rule "polySimp_elimOne" (formula "3") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "3") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "3") (term "0"))
            (rule "polySimp_addComm0" (formula "3") (term "0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "3") (term "0"))
            (rule "add_literals" (formula "3") (term "1,1,0"))
            (rule "times_zero_1" (formula "3") (term "1,0"))
            (rule "add_zero_right" (formula "3") (term "0"))
            (rule "polySimp_invertEq" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "times_zero_2" (formula "3") (term "1"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "3"))
            (rule "add_zero_right" (formula "2") (term "1"))
            (rule "inEqSimp_contradEq3" (formula "3") (ifseqformula "2"))
            (rule "times_zero_1" (formula "3") (term "1,0,0"))
            (rule "add_zero_right" (formula "3") (term "0,0"))
            (rule "qeq_literals" (formula "3") (term "0"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "false_right" (formula "3"))
            (rule "lenNonNegative" (formula "1") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
            (rule "times_zero_1" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "4"))
            (rule "qeq_literals" (formula "1") (term "0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
)
(branch "Case 2"
   (rule "allRight" (formula "1") (inst "sk=iv_0") (userinteraction))
   (rule "impRight" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "getOfSeqDef" (formula "3") (term "0") (userinteraction))
   (rule "ifthenelse_split" (formula "3") (term "0,1") (userinteraction))
   (branch "seqLen(f_s) = f_x TRUE"
      (rule "castDel" (formula "4") (term "1,0"))
      (rule "castDel" (formula "4") (term "2,0"))
      (rule "add_zero_right" (formula "4") (term "1,1,0"))
      (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "2")))
      (rule "orRight" (formula "4"))
      (rule "eqSymm" (formula "5"))
      (rule "polySimp_elimSub" (formula "4") (term "1"))
      (rule "times_zero_2" (formula "4") (term "1,1"))
      (rule "add_zero_right" (formula "4") (term "1"))
      (rule "inEqSimp_ltRight" (formula "4"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "4"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "4") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "3"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
      (rule "polySimp_elimOne" (formula "1") (term "1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "4"))
      (rule "polySimp_mulLiterals" (formula "4") (term "0"))
      (rule "polySimp_elimOne" (formula "4") (term "0"))
      (rule "lenOfSeqDef" (formula "4") (term "0"))
      (rule "polySimp_elimSub" (formula "4") (term "1,0"))
      (rule "times_zero_2" (formula "4") (term "1,1,0"))
      (rule "add_zero_right" (formula "4") (term "1,0"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0"))
      (rule "add_zero_right" (formula "4") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
      (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
      (rule "ifthenelse_split" (formula "4") (term "0"))
      (branch "f_x >= 1 TRUE"
         (rule "inEqSimp_homoInEq1" (formula "5"))
         (rule "polySimp_addComm1" (formula "5") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "1"))
         (rule "polySimp_rightDist" (formula "5") (term "1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
         (rule "mul_literals" (formula "5") (term "0,1"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1"))
         (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "1"))
         (rule "andLeft" (formula "5"))
         (rule "inEqSimp_homoInEq1" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0"))
         (rule "polySimp_addComm0" (formula "5") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
         (rule "add_literals" (formula "5") (term "1,1,0"))
         (rule "times_zero_1" (formula "5") (term "1,0"))
         (rule "add_zero_right" (formula "5") (term "0"))
         (rule "leq_literals" (formula "5"))
         (rule "closeFalse" (formula "5"))
      )
      (branch "f_x >= 1 FALSE"
         (rule "inEqSimp_geqRight" (formula "5"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_homoInEq1" (formula "5"))
         (rule "times_zero_2" (formula "5") (term "1,0"))
         (rule "add_zero_right" (formula "5") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5"))
         (rule "mul_literals" (formula "5") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "4"))
         (rule "qeq_literals" (formula "5") (term "0"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "closeFalse" (formula "5"))
      )
   )
   (branch "seqLen(f_s) = f_x FALSE"
      (rule "ifthenelse_split" (formula "4") (term "0,1") (userinteraction))
      (branch "seqLen(f_s) > f_x TRUE"
         (rule "castDel" (formula "5") (term "2,0"))
         (rule "castDel" (formula "5") (term "1,0"))
         (rule "add_zero_right" (formula "5") (term "1,1,0"))
         (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_elimSub" (formula "5") (term "1,0,0"))
         (rule "mul_literals" (formula "5") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "5") (term "1,0,0"))
         (rule "inEqSimp_gtToGeq" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "2"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "inEqSimp_contradEq7" (formula "4") (ifseqformula "1"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
         (rule "add_literals" (formula "4") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "4") (term "1,0,0"))
         (rule "add_zero_right" (formula "4") (term "0,0"))
         (rule "leq_literals" (formula "4") (term "0"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "false_right" (formula "4"))
         (rule "getOfSeqSub" (formula "4") (term "1"))
         (rule "castDel" (formula "4") (term "2,1"))
         (rule "add_zero_right" (formula "4") (term "1,1,1"))
         (rule "eqSymm" (formula "4"))
         (rule "polySimp_elimSub" (formula "4") (term "1,1,0,0"))
         (rule "times_zero_2" (formula "4") (term "1,1,1,0,0"))
         (rule "add_zero_right" (formula "4") (term "1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
         (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
         (rule "mul_literals" (formula "4") (term "0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "closeTrue" (formula "4"))
      )
      (branch "seqLen(f_s) > f_x FALSE"
         (rule "lenOfSeqDef" (formula "2") (term "1") (userinteraction))
         (rule "ifthenelse_split" (formula "2") (term "1") (userinteraction))
         (branch "0 < f_x TRUE"
            (rule "ifthenelse_split" (formula "6") (term "0") (userinteraction))
            (branch "0 <= iv_0 & iv_0 < f_x - 0 TRUE"
               (rule "castedGetAny" (formula "7") (term "0") (userinteraction))
               (rule "add_zero_right" (formula "7") (term "1,0") (userinteraction))
               (rule "getOfSeqConcat" (formula "7") (term "1") (userinteraction))
               (rule "ifthenelse_split" (formula "7") (term "1") (userinteraction))
               (branch "iv_0 < seqLen(f_s) TRUE"
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "closeTrue" (formula "8"))
               )
               (branch "iv_0 < seqLen(f_s) FALSE"
                  (rule "getOfSeqDef" (formula "8") (term "1") (userinteraction))
                  (rule "ifthenelse_split" (formula "8") (term "1") (userinteraction))
                  (branch " 0 <= iv_0 - seqLen(f_s) & iv_0 - seqLen(f_s) < f_x - seqLen(f_s) TRUE"
                     (rule "castDel" (formula "9") (term "1") (userinteraction))
                     (rule "andLeft" (formula "1") (userinteraction))
                     (rule "seqSelfDefinition" (formula "10") (term "0,0") (newnames "x,x") (inst "s=s") (inst "u=u") (userinteraction))
                     (rule "instAll" (formula "11") (term "0,0") (ifseqformula "1") (userinteraction))
                     (rule "applyEqRigid" (formula "12") (term "0,0") (ifseqformula "1") (userinteraction))
                     (rule "getOfSeqDef" (formula "12") (term "0") (userinteraction))
                     (rule "castDel" (formula "12") (term "2,0"))
                     (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "6")))
                     (rule "castDel" (formula "12") (term "0,1"))
                     (rule "add_zero_right" (formula "12") (term "1,0,1"))
                     (rule "andLeft" (formula "5"))
                     (rule "orRight" (formula "11"))
                     (rule "notRight" (formula "11"))
                     (rule "eqSymm" (formula "3") (term "0"))
                     (rule "eqSymm" (formula "2"))
                     (rule "polySimp_elimSub" (formula "4") (term "1"))
                     (rule "polySimp_elimSub" (formula "5") (term "1"))
                     (rule "polySimp_elimSub" (formula "8") (term "1"))
                     (rule "times_zero_2" (formula "8") (term "1,1"))
                     (rule "add_zero_right" (formula "8") (term "1"))
                     (rule "polySimp_elimSub" (formula "5") (term "0"))
                     (rule "polySimp_elimSub" (formula "1") (term "1"))
                     (rule "times_zero_2" (formula "1") (term "1,1"))
                     (rule "add_zero_right" (formula "1") (term "1"))
                     (rule "close" (formula "11") (ifseqformula "1"))
                  )
                  (branch " 0 <= iv_0 - seqLen(f_s) & iv_0 - seqLen(f_s) < f_x - seqLen(f_s) FALSE"
                     (rule "castDel" (formula "9") (term "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "polySimp_elimSub" (formula "7") (term "1,1"))
                     (rule "polySimp_elimSub" (formula "7") (term "0,1"))
                     (rule "polySimp_elimSub" (formula "7") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "3") (term "1"))
                     (rule "times_zero_2" (formula "3") (term "1,1"))
                     (rule "add_zero_right" (formula "3") (term "1"))
                     (rule "inEqSimp_gtRight" (formula "5"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "inEqSimp_ltRight" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "4"))
                     (rule "add_zero_right" (formula "4") (term "0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "7") (term "1"))
                     (rule "inEqSimp_ltToLeq" (formula "5"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "3"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                     (rule "times_zero_2" (formula "7") (term "1,0,0"))
                     (rule "add_zero_right" (formula "7") (term "0,0"))
                     (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "7"))
                     (rule "inEqSimp_leqRight" (formula "7"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "1,0"))
                     (rule "add_literals" (formula "1") (term "1,1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,1,0"))
                     (rule "add_zero_right" (formula "1") (term "1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                     (rule "polySimp_elimOne" (formula "5") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1"))
                     (rule "mul_literals" (formula "6") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "inEqSimp_strengthen0" (formula "3") (ifseqformula "7"))
                     (rule "inEqSimp_contradEq3" (formula "7") (ifseqformula "3"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                     (rule "add_literals" (formula "7") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "7") (term "1,0,0"))
                     (rule "add_zero_right" (formula "7") (term "0,0"))
                     (rule "qeq_literals" (formula "7") (term "0"))
                     (builtin "One Step Simplification" (formula "7"))
                     (rule "false_right" (formula "7"))
                     (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "6"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch "0 <= iv_0 & iv_0 < f_x - 0 FALSE"
               (rule "castDel" (formula "7") (term "0"))
               (rule "eqSymm" (formula "7"))
               (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "3")))
               (rule "closeTrue" (formula "6"))
            )
         )
         (branch "0 < f_x FALSE"
            (rule "castDel" (formula "6") (term "1,0"))
            (rule "castDel" (formula "6") (term "2,0"))
            (rule "add_zero_right" (formula "6") (term "1,1,0"))
            (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "polySimp_elimSub" (formula "6") (term "1,0,0"))
            (rule "mul_literals" (formula "6") (term "1,1,0,0"))
            (rule "add_zero_right" (formula "6") (term "1,0,0"))
            (rule "inEqSimp_gtRight" (formula "5"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "inEqSimp_ltRight" (formula "4"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "polySimp_mulComm0" (formula "1") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "4"))
            (rule "times_zero_1" (formula "4") (term "1,0,0"))
            (rule "add_zero_right" (formula "4") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "3"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1"))
            (rule "polySimp_elimOne" (formula "2") (term "1"))
            (rule "inEqSimp_invertInEq1" (formula "1"))
            (rule "times_zero_2" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4"))
            (rule "mul_literals" (formula "4") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
            (rule "mul_literals" (formula "6") (term "0,1,0,0"))
            (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
            (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "5"))
            (rule "inEqSimp_contradEq3" (formula "5") (ifseqformula "2"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0"))
            (rule "add_literals" (formula "5") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "5") (term "1,0,0"))
            (rule "add_zero_right" (formula "5") (term "0,0"))
            (rule "qeq_literals" (formula "5") (term "0"))
            (builtin "One Step Simplification" (formula "5"))
            (rule "false_right" (formula "5"))
            (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
            (rule "qeq_literals" (formula "4") (term "0"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "closeFalse" (formula "4"))
         )
      )
   )
)
)

}
