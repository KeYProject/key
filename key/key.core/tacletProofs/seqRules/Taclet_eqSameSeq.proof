\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Oct 03 10:55:20 CEST 2014
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=9000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=programRules-programRules\\:Java , intRules-intRules\\:arithmeticSemanticsIgnoringOF , assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Fri Oct 03 10:55:20 CEST 2014
name=eqSameSeq
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "mi-ki" ) (keyVersion "a7e1ff112b5be633ea9d95e5722c27360429488f"))

(autoModeTime "1131")

(branch "dummy ID"
(rule "equalityToSeqGetAndSeqLen" (formula "1") (term "0") (newnames "f_seq,f_from,f_to,v_iv") (inst "iv=iv") (userinteraction))
(rule "eqSymm" (formula "1") (term "1,0,1,1,1"))
(rule "polySimp_elimSub" (formula "1") (term "1,0,1,1"))
(rule "polySimp_addComm0" (formula "1") (term "1,0,1,0,1,1,1"))
(rule "polySimp_addComm0" (formula "1") (term "1,0,1,1"))
(rule "lenOfSeqSub" (formula "1") (term "1,1,0,0,1,0"))
(rule "polySimp_elimSub" (formula "1") (term "1,1,1,0,0,1,0"))
(rule "polySimp_addComm0" (formula "1") (term "1,1,1,0,0,1,0"))
(rule "lenOfSeqSub" (formula "1") (term "0,0,0"))
(rule "polySimp_elimSub" (formula "1") (term "1,0,0,0"))
(rule "polySimp_addComm0" (formula "1") (term "1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,1,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,1,1"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,1,0,0,1,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,0,1,1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,1,1"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,1,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,1,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,1,1"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,1,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,1,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,1,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1,1,1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "0,0,1,1,1,0,0,1,0"))
(rule "getOfSeqSub" (formula "1") (term "0,1,0,1,0"))
(rule "castDel" (formula "1") (term "2,0,1,0,1,0"))
(rule "polySimp_elimSub" (formula "1") (term "1,1,0,0,1,0,1,0"))
(rule "polySimp_addComm0" (formula "1") (term "1,1,0,1,0,1,0"))
(rule "polySimp_addComm0" (formula "1") (term "1,1,0,0,1,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,1,0"))
(rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0,1,0,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,1,0,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "0,1,0,0,1,0,0,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0,1,0,1,0"))
(rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,1,0,1,0"))
(rule "nnf_imp2or" (formula "1") (term "0,1,1,1"))
(rule "nnf_imp2or" (formula "1") (term "0,1,0"))
(rule "nnf_notAnd" (formula "1") (term "0,0,1,0"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,0"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,0"))
(rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,1,0"))
(rule "add_literals" (formula "1") (term "0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,0"))
(rule "mul_literals" (formula "1") (term "1,0,0,0,1,0"))
(rule "nnf_notAnd" (formula "1") (term "0,0,1,1,1"))
(rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,1,1"))
(rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,1,1,1"))
(rule "add_literals" (formula "1") (term "0,0,0,0,0,1,1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,1,1"))
(rule "mul_literals" (formula "1") (term "1,0,0,0,1,1,1"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,1,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,1,1"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,1,1"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,1,1"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,1,1"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0,1,1,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,1,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,1,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,1,1,1"))
(rule "cnf_rightDist" (formula "1") (term "0,1"))
(rule "commute_or" (formula "1") (term "0,0,1"))
(rule "cnf_rightDist" (formula "1") (term "1,0,1"))
(rule "commute_or" (formula "1") (term "1,1,0,1"))
(rule "commute_or" (formula "1") (term "0,1,0,1"))
(rule "cnf_rightDist" (formula "1") (term "0,0,1"))
(rule "commute_or" (formula "1") (term "0,0,0,1"))
(rule "commute_or" (formula "1") (term "1,0,0,1"))
(rule "equiv_right" (formula "1"))
(branch
   (rule "orRight" (formula "2"))
   (rule "andLeft" (formula "1"))
   (rule "applyEqRigid" (formula "2") (term "1,1,0,0") (ifseqformula "1"))
   (rule "shift_paren_and" (formula "3"))
   (rule "ifthenelse_to_or_left" (formula "2") (term "1,0"))
   (rule "eqSymm" (formula "2") (term "1,1,1,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1,0"))
   (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "2") (term "0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,1,0"))
   (rule "mul_literals" (formula "2") (term "1,0,0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "2") (term "0,0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0,1,0"))
   (rule "add_zero_left" (formula "2") (term "0,0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,1,0,0,1,0"))
   (rule "commute_or" (formula "2") (term "1,1,0"))
   (rule "cnf_rightDist" (formula "2") (term "1,1,0"))
   (rule "cnf_rightDist" (formula "2") (term "0"))
   (rule "distr_forallAnd" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "commute_or" (formula "3") (term "0"))
   (rule "shift_paren_or" (formula "2") (term "0"))
   (rule "commute_or_2" (formula "2") (term "0,0"))
   (rule "commute_or" (formula "3") (term "0,1,0"))
   (rule "cnf_rightDist" (formula "3") (term "0"))
   (rule "distr_forallAnd" (formula "3"))
   (rule "andLeft" (formula "3"))
   (rule "commute_or_2" (formula "4") (term "0"))
   (rule "shift_paren_or" (formula "3") (term "0"))
   (rule "commute_or_2" (formula "3") (term "0,0"))
   (rule "inEqSimp_or_tautInEq0" (formula "3") (term "0,0,0"))
   (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
   (rule "qeq_literals" (formula "3") (term "1,0,0,0"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "shift_paren_or" (formula "3") (term "0,0"))
   (rule "commute_or" (formula "3") (term "0,0,0"))
   (rule "shift_paren_or" (formula "2") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "commute_and_2" (formula "4") (term "0"))
   (rule "ifthenelse_split" (formula "1") (term "0"))
   (branch "f_to ≥ 1 + f_from TRUE"
      (rule "eqSymm" (formula "2"))
      (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "2"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "allRight" (formula "6") (inst "sk=v_iv_0"))
      (rule "orRight" (formula "6"))
      (rule "orRight" (formula "6"))
      (rule "inEqSimp_geqRight" (formula "7"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_leqRight" (formula "7"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "4"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
      (rule "polySimp_rightDist" (formula "2") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "2") (term "0,1,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
      (rule "applyEq" (formula "7") (term "0,0,1") (ifseqformula "4"))
      (rule "applyEq" (formula "5") (term "1,1,0,0") (ifseqformula "4"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "applyEq" (formula "7") (term "0,1,1,0,0") (ifseqformula "4"))
      (rule "applyEqRigid" (formula "7") (term "0,1,1,0") (ifseqformula "4"))
      (rule "polySimp_homoEq" (formula "7") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,1,1,0"))
      (rule "polySimp_mulAssoc" (formula "7") (term "0,1,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "7") (term "0,1,0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,1,1,0"))
      (rule "polySimp_addComm0" (formula "7") (term "0,0,1,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1,1,0"))
      (rule "add_literals" (formula "7") (term "1,1,0,1,1,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,1,1,0"))
      (rule "add_zero_right" (formula "7") (term "0,1,1,0"))
      (rule "applyEq" (formula "7") (term "0,1,1") (ifseqformula "4"))
      (rule "polySimp_homoEq" (formula "7") (term "1,1"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,1,1"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,1,1"))
      (rule "polySimp_mulAssoc" (formula "7") (term "0,1,0,1,1"))
      (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0,1,1"))
      (rule "polySimp_elimOne" (formula "7") (term "0,1,0,1,1"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,1,1"))
      (rule "polySimp_addComm0" (formula "7") (term "0,0,1,1"))
      (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1,1"))
      (rule "add_literals" (formula "7") (term "1,1,0,1,1"))
      (rule "times_zero_1" (formula "7") (term "1,0,1,1"))
      (rule "add_zero_right" (formula "7") (term "0,1,1"))
      (rule "applyEq" (formula "6") (term "1,1,0,0") (ifseqformula "4"))
      (rule "polySimp_sepPosMonomial" (formula "7") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
      (rule "polySimp_elimOne" (formula "7") (term "1,0,1"))
      (rule "polySimp_sepPosMonomial" (formula "7") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1"))
      (rule "polySimp_rightDist" (formula "2") (term "1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
      (rule "polySimp_elimOne" (formula "2") (term "1,1"))
      (rule "polySimp_rightDist" (formula "2") (term "0,1"))
      (rule "mul_literals" (formula "2") (term "0,0,1"))
      (rule "inEqSimp_contradEq7" (formula "7") (term "1,1,0,0") (ifseqformula "3"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,1,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,1,0,0"))
      (rule "add_literals" (formula "7") (term "1,1,0,0,1,1,0,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0,1,1,0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0,1,1,0,0"))
      (rule "leq_literals" (formula "7") (term "0,1,1,0,0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_contradEq7" (formula "7") (term "0,1") (ifseqformula "3"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0,1"))
      (rule "add_literals" (formula "7") (term "1,1,0,0,0,1"))
      (rule "times_zero_1" (formula "7") (term "1,0,0,0,1"))
      (rule "add_literals" (formula "7") (term "0,0,0,1"))
      (rule "leq_literals" (formula "7") (term "0,0,1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_contradInEq1" (formula "7") (term "0,1,0") (ifseqformula "3"))
      (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0,1,0"))
      (rule "add_literals" (formula "7") (term "1,1,0,0,0,1,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0,0,1,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,1,0"))
      (rule "leq_literals" (formula "7") (term "0,0,1,0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0") (ifseqformula "3"))
      (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
      (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
      (rule "add_literals" (formula "7") (term "0,0,1,0"))
      (rule "leq_literals" (formula "7") (term "0,1,0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
      (rule "mul_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "inEqSimp_or_tautInEq1" (formula "6") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "6") (term "1,1,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "6") (term "1,0,0"))
      (rule "polySimp_pullOutFactor1" (formula "6") (term "0,1,0,0"))
      (rule "add_literals" (formula "6") (term "1,0,1,0,0"))
      (rule "times_zero_1" (formula "6") (term "0,1,0,0"))
      (rule "leq_literals" (formula "6") (term "1,0,0"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "allLeft" (formula "5") (inst "t=v_iv_0"))
      (rule "replace_known_right" (formula "5") (term "1") (ifseqformula "8"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "inEqSimp_contradInEq0" (formula "5") (term "1") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "5") (term "0,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0,0,1"))
      (rule "mul_literals" (formula "5") (term "0,0,1,0,0,1"))
      (rule "polySimp_elimOne" (formula "5") (term "1,0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "5") (term "0,0,1"))
      (rule "polySimp_addComm1" (formula "5") (term "0,0,0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1"))
      (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "5") (term "0,0,1"))
      (rule "polySimp_addAssoc" (formula "5") (term "0,0,1"))
      (rule "polySimp_addComm0" (formula "5") (term "0,0,0,1"))
      (rule "polySimp_pullOutFactor2b" (formula "5") (term "0,0,1"))
      (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
      (rule "add_literals" (formula "5") (term "0,0,1"))
      (rule "leq_literals" (formula "5") (term "0,1"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "1"))
      (rule "qeq_literals" (formula "5") (term "0"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "closeFalse" (formula "5"))
   )
   (branch "f_to ≥ 1 + f_from FALSE"
      (rule "eqSymm" (formula "1"))
      (rule "replace_known_left" (formula "5") (term "1,1,0,0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "1")))
      (rule "inEqSimp_geqRight" (formula "4"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "applyEq" (formula "5") (term "0,1,1") (ifseqformula "2"))
      (rule "eqSymm" (formula "5") (term "1,1"))
      (rule "applyEqRigid" (formula "4") (term "1,1,0,0") (ifseqformula "2"))
      (rule "applyEqRigid" (formula "6") (term "1,1,0,0,1") (ifseqformula "2"))
      (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "2"))
      (rule "polySimp_homoEq" (formula "6") (term "0"))
      (rule "mul_literals" (formula "6") (term "1,0,0"))
      (rule "add_zero_right" (formula "6") (term "0,0"))
      (rule "applyEqRigid" (formula "3") (term "1,1,0,0") (ifseqformula "2"))
      (rule "polySimp_sepPosMonomial" (formula "6") (term "0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
      (rule "polySimp_elimOne" (formula "1") (term "1"))
      (rule "replace_known_left" (formula "5") (term "1,0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "1")))
      (rule "closeTrue" (formula "5"))
   )
)
(branch
   (rule "orLeft" (formula "1"))
   (branch " (f_from = 0 ∨ f_to ≤ f_from) ∧ (f_to ≤ f_from ∨ f_seq.length = f_to) ∧ ( (f_from = 0 ∨ f_seq.length = 0) ∧ (f_seq.length = 0 ∨ f_seq.length = f_to))"
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "1"))
      (rule "ifthenelse_split" (formula "5") (term "0,0"))
      (branch "f_to ≥ 1 + f_from TRUE"
         (rule "eqSymm" (formula "6") (term "0"))
         (rule "replace_known_left" (formula "6") (term "0,1,1,0,0,1") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
         (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0"))
         (rule "leq_literals" (formula "3") (term "0,0"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "applyEqRigid" (formula "4") (term "0,1") (ifseqformula "3"))
         (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "3"))
         (rule "polySimp_homoEq" (formula "5") (term "0"))
         (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0"))
         (rule "add_literals" (formula "5") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "5") (term "1,0,0"))
         (rule "add_zero_right" (formula "5") (term "0,0"))
         (rule "polySimp_invertEq" (formula "5") (term "0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "0,0"))
         (rule "mul_literals" (formula "5") (term "1,0"))
         (rule "polySimp_elimOne" (formula "5") (term "0,0"))
         (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1"))
         (rule "add_literals" (formula "2") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "leq_literals" (formula "2") (term "0,1"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "true_left" (formula "4"))
         (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "allRight" (formula "4") (inst "sk=iv_1"))
         (rule "orRight" (formula "4"))
         (rule "orRight" (formula "4"))
         (rule "inEqSimp_geqRight" (formula "5"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "inEqSimp_leqRight" (formula "5"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "applyEqRigid" (formula "3") (term "1,1") (ifseqformula "4"))
         (rule "add_literals" (formula "3") (term "1"))
         (rule "applyEqRigid" (formula "6") (term "0,1,1,0") (ifseqformula "4"))
         (rule "add_zero_left" (formula "6") (term "1,1,0"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "orRight" (formula "6"))
         (rule "eqSymm" (formula "7"))
         (rule "inEqSimp_leqRight" (formula "6"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,0"))
         (rule "applyEqRigid" (formula "3") (term "1,0,0,0") (ifseqformula "5"))
         (rule "add_literals" (formula "3") (term "0,0,0"))
         (rule "applyEqRigid" (formula "1") (term "0,0,0") (ifseqformula "5"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1"))
         (rule "polySimp_rightDist" (formula "3") (term "1"))
         (rule "mul_literals" (formula "3") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "1"))
         (rule "andLeft" (formula "3"))
         (rule "inEqSimp_homoInEq1" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0"))
         (rule "polySimp_addComm0" (formula "3") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "1,1,0"))
         (rule "times_zero_1" (formula "3") (term "1,0"))
         (rule "add_literals" (formula "3") (term "0"))
         (rule "leq_literals" (formula "3"))
         (rule "closeFalse" (formula "3"))
      )
      (branch "f_to ≥ 1 + f_from FALSE"
         (rule "eqSymm" (formula "6") (term "0"))
         (rule "replace_known_right" (formula "6") (term "0,1,1,0,0,1") (ifseqformula "5"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_geqRight" (formula "5"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "inEqSimp_or_tautInEq0" (formula "4") (term "0,0,1"))
         (rule "add_literals" (formula "4") (term "1,1,0,0,1"))
         (rule "qeq_literals" (formula "4") (term "1,0,0,1"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "4"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "4"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "applyEq" (formula "1") (term "1") (ifseqformula "2"))
         (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
         (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "4"))
         (rule "add_literals" (formula "1") (term "1"))
         (rule "inEqSimp_contradEq3" (formula "4") (ifseqformula "1"))
         (rule "mul_literals" (formula "4") (term "1,0,0"))
         (rule "add_literals" (formula "4") (term "0,0"))
         (rule "qeq_literals" (formula "4") (term "0"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "false_right" (formula "4"))
         (rule "lenNonNegative" (formula "3") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "3"))
         (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
         (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
         (rule "qeq_literals" (formula "3") (term "0"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "closeFalse" (formula "3"))
      )
   )
   (branch " f_seq.length = f_from * -1 + f_to ∧ ∀ int v_iv; ( v_iv ≤ -1 ∨ v_iv ≥ f_seq.length ∨ any::seqGet(f_seq, f_from + v_iv) = any::seqGet(f_seq, v_iv))"
      (rule "andLeft" (formula "1"))
      (rule "applyEqRigid" (formula "2") (term "1,1,0,0") (ifseqformula "1"))
      (rule "applyEqRigid" (formula "3") (term "1,0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "polySimp_homoEq" (formula "3") (term "1,0"))
      (rule "mul_literals" (formula "3") (term "1,0,1,0"))
      (rule "add_zero_right" (formula "3") (term "0,1,0"))
      (rule "polySimp_sepPosMonomial" (formula "3") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
      (rule "polySimp_elimOne" (formula "3") (term "1,1,0"))
      (rule "commute_or" (formula "3") (term "0"))
      (rule "inEqSimp_or_weaken1" (formula "3") (term "0"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "ifthenelse_split" (formula "3") (term "1,1,0,0,1"))
      (branch "f_to ≥ 1 + f_from TRUE"
         (rule "inEqSimp_subsumption1" (formula "4") (term "0") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0"))
         (rule "add_literals" (formula "4") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
         (rule "add_literals" (formula "4") (term "0,0,0"))
         (rule "qeq_literals" (formula "4") (term "0,0"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "allRight" (formula "4") (inst "sk=iv_0"))
         (rule "orRight" (formula "4"))
         (rule "orRight" (formula "4"))
         (rule "inEqSimp_geqRight" (formula "5"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "inEqSimp_leqRight" (formula "5"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "polySimp_rightDist" (formula "2") (term "0,1"))
         (rule "mul_literals" (formula "2") (term "0,0,1"))
         (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
         (rule "mul_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "allLeft" (formula "5") (inst "t=iv_0"))
         (rule "replace_known_right" (formula "5") (term "1") (ifseqformula "7"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "inEqSimp_contradInEq0" (formula "5") (term "1") (ifseqformula "2"))
         (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1"))
         (rule "polySimp_rightDist" (formula "5") (term "0,1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0,0,1"))
         (rule "mul_literals" (formula "5") (term "0,0,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "5") (term "1,0,1,0,0,1"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,0,1"))
         (rule "polySimp_addComm1" (formula "5") (term "0,0,0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1"))
         (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "5") (term "0,0,1"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,0,1"))
         (rule "polySimp_addComm0" (formula "5") (term "0,0,0,1"))
         (rule "polySimp_pullOutFactor2b" (formula "5") (term "0,0,1"))
         (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
         (rule "add_literals" (formula "5") (term "0,0,1"))
         (rule "leq_literals" (formula "5") (term "0,1"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "5"))
         (rule "qeq_literals" (formula "1") (term "0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "f_to ≥ 1 + f_from FALSE"
         (rule "inEqSimp_geqRight" (formula "3"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "inEqSimp_or_tautInEq0" (formula "4") (term "0,0,1"))
         (rule "add_literals" (formula "4") (term "1,1,0,0,1"))
         (rule "qeq_literals" (formula "4") (term "1,0,0,1"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "inEqSimp_geqRight" (formula "4"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
         (rule "mul_literals" (formula "2") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
         (rule "polySimp_addComm0" (formula "2") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
         (rule "add_literals" (formula "2") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "2") (term "1,0,0"))
         (rule "add_literals" (formula "2") (term "0,0"))
         (rule "qeq_literals" (formula "2") (term "0"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "lenNonNegative" (formula "2") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "2"))
         (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "3"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1"))
         (rule "polySimp_elimOne" (formula "2") (term "1"))
         (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
         (rule "andLeft" (formula "2"))
         (rule "inEqSimp_homoInEq1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0"))
         (rule "mul_literals" (formula "2") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0"))
         (rule "polySimp_addComm0" (formula "2") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
         (rule "add_literals" (formula "2") (term "1,1,0"))
         (rule "times_zero_1" (formula "2") (term "1,0"))
         (rule "add_literals" (formula "2") (term "0"))
         (rule "leq_literals" (formula "2"))
         (rule "closeFalse" (formula "2"))
      )
   )
)
)

}
