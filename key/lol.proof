\settings {
"#Proof-Settings-Config-File
#Mon Nov 23 18:41:15 CET 2015
[DecisionProcedure]Command_Simplify=simplify
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[DecisionProcedure]showSMTResDialog=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NONE
[DecisionProcedure]Parameters_CVC3=\\ -lang smt +model %f
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_NORMAL
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[DecisionProcedure]ActiveRule=EMPTY_RULE
[DecisionProcedure]multprovers=Z3\\=true\\:Simplify\\=true\\:Yices\\=true\\:CVC3\\=true
[DecisionProcedure]Command_Z3=z3
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , memory-memory\\:off , testGeneration-testGeneration\\:testOff , stringRules-stringRules\\:withStringPool , javacard-javacard\\:jcOff , rtsj-rtsj\\:off , transactions-transactions\\:transactionsOn , dfaPolicy-dfaPolicy\\:off , nullPointerPolicy-nullPointerPolicy\\:nullCheck , throughout-throughout\\:toutOn , transactionAbort-transactionAbort\\:abortOn , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java
[TacletTranslation]filename=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[View]HideIntermediateProofsteps=false
[SimultaneousUpdateSimplifier]EagerSimplification=true
[View]HideClosedSubtrees=false
[General]UseOCL=false
[DecisionProcedure]WeakenSMTTranslation=false
[View]ShowWholeTaclet=true
[Strategy]ActiveStrategy=JavaCardDLStrategy
[DecisionProcedure]Parameters_Z3=-smt -m %f
[DecisionProcedure]Parameters_Simplify=%f
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[DecisionProcedure]savefile_path=
[DecisionProcedure]Command_Yices=yices
[General]StupidMode=true
[DecisionProcedure]SolverTimeout=60
[General]UseJML=true
[General]DnDDirectionSensitive=false
[General]ProofAssistant=false
[View]FontIndex=4
[DecisionProcedure]Command_CVC3=cvc3
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_NONE
[DecisionProcedure]pd_mode=0
[StrategyProperty]GOALCHOOSER_OPTIONS_KEY=GOALCHOOSER_DEFAULT
[View]MaxTooltipLines=40
[Strategy]MaximumNumberOfAutomaticApplications=10000
[General]SoundNotification=false
[DecisionProcedure]cache_goals=false
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[TacletTranslation]assignment=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
[Choice]Choices=initialisation-initialisation\\:disableStaticInitialisation-initialisation\\:enableStaticInitialisation , memory-memory\\:off-memory\\:on , testGeneration-testGeneration\\:testOn-testGeneration\\:testOff , stringRules-stringRules\\:withoutStringPool-stringRules\\:withStringPool , javacard-javacard\\:jcOn-javacard\\:jcOff , transactions-transactions\\:transactionsOff-transactions\\:transactionsOn , rtsj-rtsj\\:off-rtsj\\:on , dfaPolicy-dfaPolicy\\:off-dfaPolicy\\:on , throughout-throughout\\:toutOff-throughout\\:toutOn , nullPointerPolicy-nullPointerPolicy\\:nullCheck-nullPointerPolicy\\:noNullCheck , transactionAbort-transactionAbort\\:abortOn-transactionAbort\\:abortOff , assertions-assertions\\:safe-assertions\\:on-assertions\\:off , intRules-intRules\\:javaSemantics-intRules\\:arithmeticSemanticsIgnoringOF-intRules\\:arithmeticSemanticsCheckingOF , programRules-programRules\\:ODL-programRules\\:Java
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_COMPLETION
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[TacletTranslation]maxGeneric=2
[DecisionProcedure]Parameters_Yices=-tc -e -smt %f
"
}





\functions {
	int a; int b; int c; int d;
}


\problem {
  (a * a <= 3 <-> a >= -1 & a <= 1)
& (a * a * a <= 3 <-> a <= 1)
& (a * a * a >= 11 <-> a >= 3)
& (a * a * a * a * a >= 40 <-> a >= 3)

}

\proof {
(keyLog "0" (keyUser "Patrick" ) (keyVersion "f1f77fb16a99ab62abeb51b814a50c54bfb2e9d9"))
(keyLog "1" (keyUser "Patrick" ) (keyVersion "f1f77fb16a99ab62abeb51b814a50c54bfb2e9d9"))

(autoModeTime "808")

(branch "dummy ID"
(rule "andRight" (formula "1"))
(branch " Case 1"
   (rule "andRight" (formula "1"))
   (branch " Case 1"
      (rule "andRight" (formula "1"))
      (branch " Case 1"
         (rule "equiv_right" (formula "1"))
         (branch " Case 1"
            (rule "add_non_neg_square" (inst "squareFac=a"))
            (rule "cut_direct" (formula "3") (term "1"))
            (branch " CUT: a <= 1 TRUE"
               (rule "concrete_and_3" (formula "4"))
               (rule "inEqSimp_geqRight" (formula "4"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "1"))
               (rule "leq_literals" (formula "2") (term "0"))
               (rule "concrete_or_1" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "divide_inEq4" (formula "2") (inst "divY=a") (ifseqformula "1"))
               (rule "eqClose" (formula "2") (term "0"))
               (rule "concrete_impl_1" (formula "2"))
               (rule "leq_literals" (formula "2") (term "0"))
               (rule "concrete_impl_1" (formula "2"))
               (rule "leq_literals" (formula "2") (term "0"))
               (rule "concrete_impl_1" (formula "2"))
               (rule "div_literals" (formula "2") (term "1"))
               (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "1"))
               (rule "leq_literals" (formula "2") (term "0"))
               (rule "concrete_or_1" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "divide_inEq6" (formula "3") (inst "divY=a") (ifseqformula "1"))
               (rule "eqClose" (formula "3") (term "0"))
               (rule "concrete_impl_1" (formula "3"))
               (rule "qeq_literals" (formula "3") (term "0,1"))
               (rule "concrete_impl_1" (formula "3") (term "1"))
               (rule "leq_literals" (formula "3") (term "0"))
               (rule "concrete_impl_1" (formula "3"))
               (rule "div_literals" (formula "3") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
               (rule "qeq_literals" (formula "1") (term "0"))
               (rule "concrete_and_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch " CUT: a <= 1 FALSE"
               (rule "concrete_and_4" (formula "4"))
               (rule "false_right" (formula "4"))
               (rule "inEqSimp_leqRight" (formula "3"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "divide_inEq0" (formula "3") (inst "divY=a") (ifseqformula "1"))
               (rule "eqClose" (formula "3") (term "0"))
               (rule "concrete_impl_1" (formula "3"))
               (rule "qeq_literals" (formula "3") (term "0"))
               (rule "concrete_impl_1" (formula "3"))
               (rule "div_literals" (formula "3") (term "1,1"))
               (rule "qeq_literals" (formula "3") (term "0"))
               (rule "concrete_impl_1" (formula "3"))
               (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "1"))
               (rule "qeq_literals" (formula "3") (term "0"))
               (rule "concrete_and_2" (formula "3"))
               (rule "closeFalse" (formula "3"))
            )
         )
         (branch " Case 2"
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_leqRight" (formula "3"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "add_non_neg_square" (inst "squareFac=a"))
            (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "2"))
            (rule "leq_literals" (formula "1") (term "0"))
            (rule "concrete_or_1" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "cut" (inst "cutFormula=a <= -2 | a >= 2"))
            (branch " CUT: a <= -2 | a >= 2 TRUE"
               (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "3"))
               (rule "qeq_literals" (formula "1") (term "0,0"))
               (rule "concrete_and_2" (formula "1") (term "0"))
               (rule "concrete_or_2" (formula "1"))
               (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "1"))
               (rule "qeq_literals" (formula "4") (term "0"))
               (rule "concrete_and_2" (formula "4"))
               (rule "closeFalse" (formula "4"))
            )
            (branch " CUT: a <= -2 | a >= 2 FALSE"
               (rule "orRight" (formula "4"))
               (rule "inEqSimp_leqRight" (formula "4"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "5"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "multiply_2_inEq3" (formula "2") (ifseqformula "2"))
               (rule "neg_literal" (formula "2") (term "0,0,0,1"))
               (rule "mul_literals" (formula "2") (term "0,0,1"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,1"))
               (rule "polySimp_pullOutFactor0b" (formula "2") (term "1"))
               (rule "add_literals" (formula "2") (term "1,1,1"))
               (rule "multiply_2_inEq1" (formula "4") (ifseqformula "3"))
               (rule "neg_literal" (formula "4") (term "0,0,0,1"))
               (rule "mul_literals" (formula "4") (term "0,0,1"))
               (rule "polySimp_elimOneLeft0" (formula "4") (term "1,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "4") (term "1"))
               (rule "add_literals" (formula "4") (term "1,1,1"))
               (rule "times_zero_1" (formula "4") (term "1,1"))
               (rule "add_zero_right" (formula "4") (term "1"))
               (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "4"))
               (rule "qeq_literals" (formula "1") (term "0"))
               (rule "concrete_and_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch " Case 2"
         (rule "equiv_right" (formula "1"))
         (branch " Case 1"
            (rule "inEqSimp_leqRight" (formula "2"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "divide_inEq0" (formula "2") (inst "divY=a * a") (ifseqformula "1"))
            (rule "qeq_literals" (formula "2") (term "0,1"))
            (rule "concrete_impl_1" (formula "2") (term "1"))
            (rule "div_literals" (formula "2") (term "1,1,1"))
            (rule "qeq_literals" (formula "2") (term "0,1"))
            (rule "concrete_impl_1" (formula "2") (term "1"))
            (rule "polySimp_mulAssoc" (formula "2") (term "1,0"))
            (rule "eqClose" (formula "2") (term "0"))
            (rule "concrete_impl_1" (formula "2"))
            (rule "add_non_neg_square" (inst "squareFac=a"))
            (rule "divide_inEq0" (formula "3") (inst "divY=a") (ifseqformula "2"))
            (rule "eqClose" (formula "3") (term "0"))
            (rule "concrete_impl_1" (formula "3"))
            (rule "qeq_literals" (formula "3") (term "0,1"))
            (rule "concrete_impl_1" (formula "3") (term "1"))
            (rule "qeq_literals" (formula "3") (term "0"))
            (rule "concrete_impl_1" (formula "3"))
            (rule "div_literals" (formula "3") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "2"))
            (rule "qeq_literals" (formula "3") (term "0"))
            (rule "concrete_and_2" (formula "3"))
            (rule "closeFalse" (formula "3"))
         )
         (branch " Case 2"
            (rule "inEqSimp_leqRight" (formula "2"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "add_non_neg_square" (inst "squareFac=a"))
            (rule "divide_inEq3" (formula "2") (inst "divY=a") (ifseqformula "1"))
            (rule "eqClose" (formula "2") (term "0"))
            (rule "concrete_impl_1" (formula "2"))
            (rule "qeq_literals" (formula "2") (term "0"))
            (rule "concrete_impl_1" (formula "2"))
            (rule "qeq_literals" (formula "2") (term "0"))
            (rule "concrete_impl_1" (formula "2"))
            (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "4"))
            (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
            (rule "qeq_literals" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "applyEq" (formula "3") (term "1,0,0") (ifseqformula "2"))
            (rule "polySimp_elimOne" (formula "3") (term "0,0"))
            (rule "applyEq" (formula "4") (term "0") (ifseqformula "2"))
            (rule "leq_literals" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "applyEqRigid" (formula "3") (term "1,0") (ifseqformula "2"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "2"))
            (rule "qeq_literals" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
      )
   )
   (branch " Case 2"
      (rule "equiv_right" (formula "1"))
      (branch " Case 1"
         (rule "inEqSimp_geqRight" (formula "2"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "add_non_neg_square" (inst "squareFac=a"))
         (rule "divide_inEq3" (formula "3") (inst "divY=a") (ifseqformula "1"))
         (rule "eqClose" (formula "3") (term "0"))
         (rule "concrete_impl_1" (formula "3"))
         (rule "qeq_literals" (formula "3") (term "0"))
         (rule "concrete_impl_1" (formula "3"))
         (rule "qeq_literals" (formula "3") (term "0"))
         (rule "concrete_impl_1" (formula "3"))
         (rule "divide_inEq3" (formula "4") (inst "divY=a * a") (ifseqformula "3"))
         (rule "qeq_literals" (formula "4") (term "0,1"))
         (rule "concrete_impl_1" (formula "4") (term "1"))
         (rule "qeq_literals" (formula "4") (term "0,1"))
         (rule "concrete_impl_1" (formula "4") (term "1"))
         (rule "polySimp_mulAssoc" (formula "4") (term "1,0"))
         (rule "eqClose" (formula "4") (term "0"))
         (rule "concrete_impl_1" (formula "4"))
         (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
         (rule "leq_literals" (formula "1") (term "0"))
         (rule "concrete_or_1" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "cut" (inst "cutFormula=a >= 3"))
         (branch " CUT: a >= 3 TRUE"
            (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
            (rule "leq_literals" (formula "3") (term "0"))
            (rule "concrete_or_1" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
            (rule "qeq_literals" (formula "1") (term "0"))
            (rule "concrete_and_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch " CUT: a >= 3 FALSE"
            (rule "inEqSimp_geqRight" (formula "5"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "cut" (inst "cutFormula=a <= -1 | a >= 1"))
            (branch " CUT: a <= -1 | a >= 1 TRUE"
               (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "3"))
               (rule "concrete_or_3" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "multiply_2_inEq0" (formula "1") (ifseqformula "1"))
               (rule "neg_literal" (formula "1") (term "0,0,0,1"))
               (rule "mul_literals" (formula "1") (term "0,0,1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,1"))
               (rule "polySimp_pullOutFactor0b" (formula "1") (term "1"))
               (rule "add_literals" (formula "1") (term "1,1,1"))
               (rule "multiply_2_inEq1" (formula "2") (ifseqformula "3"))
               (rule "neg_literal" (formula "2") (term "0,0,0,1"))
               (rule "mul_literals" (formula "2") (term "0,0,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,1"))
               (rule "polySimp_pullOutFactor2b" (formula "2") (term "1"))
               (rule "add_literals" (formula "2") (term "1,1,1"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "2"))
               (rule "mul_literals" (formula "5") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0"))
               (rule "add_literals" (formula "5") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "5"))
               (rule "mul_literals" (formula "5") (term "1"))
               (rule "inEqSimp_subsumption6" (formula "5") (ifseqformula "4"))
               (rule "mul_literals" (formula "5") (term "1,1,0"))
               (rule "greater_literals" (formula "5") (term "0,0"))
               (rule "concrete_and_1" (formula "5") (term "0"))
               (rule "leq_literals" (formula "5") (term "0"))
               (rule "concrete_or_1" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "multiply_2_inEq1" (formula "3") (ifseqformula "5"))
               (rule "neg_literal" (formula "3") (term "0,0,0,1"))
               (rule "mul_literals" (formula "3") (term "0,0,1"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,1"))
               (rule "polySimp_mulAssoc" (formula "3") (term "0"))
               (rule "polySimp_addComm1" (formula "3") (term "1"))
               (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "3"))
               (rule "mul_literals" (formula "7") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
               (rule "add_literals" (formula "7") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1"))
               (rule "polySimp_rightDist" (formula "7") (term "1"))
               (rule "mul_literals" (formula "7") (term "0,1"))
               (rule "inEqSimp_exactShadow1" (formula "7") (ifseqformula "2"))
               (rule "greater_literals" (formula "7") (term "0"))
               (rule "concrete_impl_1" (formula "7"))
               (rule "polySimp_rightDist" (formula "7") (term "0,0"))
               (rule "mul_literals" (formula "7") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0"))
               (rule "mul_literals" (formula "7") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0"))
               (rule "polySimp_addComm1" (formula "7") (term "0,0"))
               (rule "add_literals" (formula "7") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
               (rule "add_literals" (formula "7") (term "1,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7"))
               (rule "mul_literals" (formula "7") (term "1"))
               (rule "inEqSimp_contradInEq3" (formula "7") (ifseqformula "4"))
               (rule "greater_literals" (formula "7") (term "0,0"))
               (rule "concrete_impl_1" (formula "7") (term "0"))
               (rule "mul_literals" (formula "7") (term "0,0"))
               (rule "qeq_literals" (formula "7") (term "0"))
               (rule "concrete_and_2" (formula "7"))
               (rule "closeFalse" (formula "7"))
            )
            (branch " CUT: a <= -1 | a >= 1 FALSE"
               (rule "orRight" (formula "5"))
               (rule "close" (formula "6") (ifseqformula "2"))
            )
         )
      )
      (branch " Case 2"
         (rule "inEqSimp_geqRight" (formula "2"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "add_non_neg_square" (inst "squareFac=a"))
         (rule "divide_inEq0" (formula "2") (inst "divY=a * a") (ifseqformula "3"))
         (rule "qeq_literals" (formula "2") (term "0,1"))
         (rule "concrete_impl_1" (formula "2") (term "1"))
         (rule "div_literals" (formula "2") (term "1,1,1"))
         (rule "qeq_literals" (formula "2") (term "0,1"))
         (rule "concrete_impl_1" (formula "2") (term "1"))
         (rule "polySimp_mulAssoc" (formula "2") (term "1,0"))
         (rule "eqClose" (formula "2") (term "0"))
         (rule "concrete_impl_1" (formula "2"))
         (rule "divide_inEq0" (formula "2") (inst "divY=a") (ifseqformula "4"))
         (rule "eqClose" (formula "2") (term "0"))
         (rule "concrete_impl_1" (formula "2"))
         (rule "qeq_literals" (formula "2") (term "0,1"))
         (rule "concrete_impl_1" (formula "2") (term "1"))
         (rule "qeq_literals" (formula "2") (term "0"))
         (rule "concrete_impl_1" (formula "2"))
         (rule "div_literals" (formula "2") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "5"))
         (rule "qeq_literals" (formula "2") (term "0"))
         (rule "concrete_and_2" (formula "2"))
         (rule "closeFalse" (formula "2"))
      )
   )
)
(branch " Case 2"
   (rule "equiv_right" (formula "1"))
   (branch " Case 1"
      (rule "inEqSimp_geqRight" (formula "2"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "add_non_neg_square" (inst "squareFac=a"))
      (rule "divide_inEq3" (formula "3") (inst "divY=a * a * a") (ifseqformula "1"))
      (rule "qeq_literals" (formula "3") (term "0,1"))
      (rule "concrete_impl_1" (formula "3") (term "1"))
      (rule "qeq_literals" (formula "3") (term "0,1"))
      (rule "concrete_impl_1" (formula "3") (term "1"))
      (rule "polySimp_mulAssoc" (formula "3") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "3") (term "0,1,0"))
      (rule "eqClose" (formula "3") (term "0"))
      (rule "concrete_impl_1" (formula "3"))
      (rule "divide_inEq3" (formula "4") (inst "divY=a * a") (ifseqformula "3"))
      (rule "qeq_literals" (formula "4") (term "0,1"))
      (rule "concrete_impl_1" (formula "4") (term "1"))
      (rule "qeq_literals" (formula "4") (term "0,1"))
      (rule "concrete_impl_1" (formula "4") (term "1"))
      (rule "polySimp_mulAssoc" (formula "4") (term "1,0"))
      (rule "eqClose" (formula "4") (term "0"))
      (rule "concrete_impl_1" (formula "4"))
      (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
      (rule "leq_literals" (formula "1") (term "0"))
      (rule "concrete_or_1" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "divide_inEq3" (formula "2") (inst "divY=a") (ifseqformula "3"))
      (rule "eqClose" (formula "2") (term "0"))
      (rule "concrete_impl_1" (formula "2"))
      (rule "qeq_literals" (formula "2") (term "0"))
      (rule "concrete_impl_1" (formula "2"))
      (rule "qeq_literals" (formula "2") (term "0"))
      (rule "concrete_impl_1" (formula "2"))
      (rule "divide_inEq3" (formula "5") (inst "divY=a * a * a * a") (ifseqformula "2"))
      (rule "qeq_literals" (formula "5") (term "0,1"))
      (rule "concrete_impl_1" (formula "5") (term "1"))
      (rule "qeq_literals" (formula "5") (term "0,1"))
      (rule "concrete_impl_1" (formula "5") (term "1"))
      (rule "polySimp_mulAssoc" (formula "5") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "5") (term "0,1,0"))
      (rule "polySimp_mulAssoc" (formula "5") (term "0,0,1,0"))
      (rule "eqClose" (formula "5") (term "0"))
      (rule "concrete_impl_1" (formula "5"))
      (rule "cut" (inst "cutFormula=a >= 1"))
      (branch " CUT: a >= 1 TRUE"
         (rule "cut" (inst "cutFormula=a >= 3"))
         (branch " CUT: a >= 3 TRUE"
            (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
            (rule "leq_literals" (formula "3") (term "0"))
            (rule "concrete_or_1" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
            (rule "qeq_literals" (formula "1") (term "0"))
            (rule "concrete_and_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch " CUT: a >= 3 FALSE"
            (rule "inEqSimp_geqRight" (formula "7"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "cut" (inst "cutFormula=a <= -1 | a >= 1"))
            (branch " CUT: a <= -1 | a >= 1 TRUE"
               (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "3"))
               (rule "concrete_or_3" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "multiply_2_inEq1" (formula "1") (ifseqformula "2"))
               (rule "neg_literal" (formula "1") (term "0,0,0,1"))
               (rule "mul_literals" (formula "1") (term "0,0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,1"))
               (rule "polySimp_pullOutFactor2b" (formula "1") (term "1"))
               (rule "add_literals" (formula "1") (term "1,1,1"))
               (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "1"))
               (rule "mul_literals" (formula "5") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0"))
               (rule "add_literals" (formula "5") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "5"))
               (rule "mul_literals" (formula "5") (term "1"))
               (rule "inEqSimp_subsumption6" (formula "5") (ifseqformula "3"))
               (rule "greater_literals" (formula "5") (term "0,0"))
               (rule "concrete_and_1" (formula "5") (term "0"))
               (rule "mul_literals" (formula "5") (term "1,0"))
               (rule "leq_literals" (formula "5") (term "0"))
               (rule "concrete_or_1" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "multiply_2_inEq1" (formula "2") (ifseqformula "4"))
               (rule "neg_literal" (formula "2") (term "0,0,0,1"))
               (rule "mul_literals" (formula "2") (term "0,0,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,1"))
               (rule "polySimp_mulAssoc" (formula "2") (term "0"))
               (rule "polySimp_mulAssoc" (formula "2") (term "0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "1"))
               (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "2"))
               (rule "mul_literals" (formula "7") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
               (rule "add_literals" (formula "7") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1"))
               (rule "polySimp_rightDist" (formula "7") (term "1"))
               (rule "mul_literals" (formula "7") (term "0,1"))
               (rule "multiply_2_inEq1" (formula "3") (ifseqformula "6"))
               (rule "neg_literal" (formula "3") (term "0,0,0,1"))
               (rule "mul_literals" (formula "3") (term "0,0,1"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,1"))
               (rule "polySimp_mulAssoc" (formula "3") (term "0"))
               (rule "polySimp_addComm1" (formula "3") (term "1"))
               (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "3"))
               (rule "mul_literals" (formula "6") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
               (rule "add_literals" (formula "6") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1"))
               (rule "polySimp_rightDist" (formula "6") (term "1"))
               (rule "mul_literals" (formula "6") (term "0,1"))
               (rule "inEqSimp_exactShadow1" (formula "9") (ifseqformula "3"))
               (rule "greater_literals" (formula "9") (term "0"))
               (rule "concrete_impl_1" (formula "9"))
               (rule "polySimp_rightDist" (formula "9") (term "0,0"))
               (rule "mul_literals" (formula "9") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "9") (term "0,1,0"))
               (rule "mul_literals" (formula "9") (term "0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
               (rule "polySimp_addComm1" (formula "9") (term "0,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0"))
               (rule "add_literals" (formula "9") (term "1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "9"))
               (rule "polySimp_mulComm0" (formula "9") (term "1"))
               (rule "polySimp_rightDist" (formula "9") (term "1"))
               (rule "mul_literals" (formula "9") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
               (rule "inEqSimp_exactShadow1" (formula "6") (ifseqformula "1"))
               (rule "greater_literals" (formula "6") (term "0"))
               (rule "concrete_impl_1" (formula "6"))
               (rule "polySimp_rightDist" (formula "6") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0"))
               (rule "mul_literals" (formula "6") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0"))
               (rule "add_literals" (formula "6") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
               (rule "add_literals" (formula "6") (term "1,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "6"))
               (rule "mul_literals" (formula "6") (term "1"))
               (rule "inEqSimp_subsumption6" (formula "6") (ifseqformula "5"))
               (rule "greater_literals" (formula "6") (term "0,0"))
               (rule "concrete_and_1" (formula "6") (term "0"))
               (rule "mul_literals" (formula "6") (term "1,0"))
               (rule "leq_literals" (formula "6") (term "0"))
               (rule "concrete_or_1" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "inEqSimp_exactShadow1" (formula "9") (ifseqformula "1"))
               (rule "greater_literals" (formula "9") (term "0"))
               (rule "concrete_impl_1" (formula "9"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "9") (term "0,0"))
               (rule "mul_literals" (formula "9") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0"))
               (rule "polySimp_addComm1" (formula "9") (term "0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "9") (term "0"))
               (rule "add_literals" (formula "9") (term "1,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "9"))
               (rule "mul_literals" (formula "9") (term "1"))
               (rule "inEqSimp_subsumption6" (formula "9") (ifseqformula "5"))
               (rule "greater_literals" (formula "9") (term "0,0"))
               (rule "concrete_and_1" (formula "9") (term "0"))
               (rule "mul_literals" (formula "9") (term "1,0"))
               (rule "leq_literals" (formula "9") (term "0"))
               (rule "concrete_or_1" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "multiply_2_inEq1" (formula "4") (ifseqformula "11"))
               (rule "neg_literal" (formula "4") (term "0,0,0,1"))
               (rule "mul_literals" (formula "4") (term "0,0,1"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,1"))
               (rule "polySimp_mulAssoc" (formula "4") (term "0"))
               (rule "polySimp_mulAssoc" (formula "4") (term "0,0"))
               (rule "polySimp_mulAssoc" (formula "4") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "1"))
               (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "4"))
               (rule "mul_literals" (formula "13") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
               (rule "add_literals" (formula "13") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1"))
               (rule "polySimp_rightDist" (formula "13") (term "1"))
               (rule "mul_literals" (formula "13") (term "0,1"))
               (rule "inEqSimp_exactShadow1" (formula "13") (ifseqformula "2"))
               (rule "greater_literals" (formula "13") (term "0"))
               (rule "concrete_impl_1" (formula "13"))
               (rule "polySimp_rightDist" (formula "13") (term "0,0"))
               (rule "mul_literals" (formula "13") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "0,1,0"))
               (rule "mul_literals" (formula "13") (term "0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
               (rule "add_literals" (formula "13") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
               (rule "add_literals" (formula "13") (term "1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1"))
               (rule "polySimp_rightDist" (formula "13") (term "1"))
               (rule "mul_literals" (formula "13") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
               (rule "inEqSimp_exactShadow1" (formula "13") (ifseqformula "3"))
               (rule "greater_literals" (formula "13") (term "0"))
               (rule "concrete_impl_1" (formula "13"))
               (rule "polySimp_rightDist" (formula "13") (term "0,0"))
               (rule "mul_literals" (formula "13") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "0,1,0"))
               (rule "mul_literals" (formula "13") (term "0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
               (rule "add_literals" (formula "13") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
               (rule "add_literals" (formula "13") (term "1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1"))
               (rule "polySimp_rightDist" (formula "13") (term "1"))
               (rule "mul_literals" (formula "13") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
               (rule "inEqSimp_exactShadow1" (formula "13") (ifseqformula "1"))
               (rule "greater_literals" (formula "13") (term "0"))
               (rule "concrete_impl_1" (formula "13"))
               (rule "polySimp_rightDist" (formula "13") (term "0,0"))
               (rule "mul_literals" (formula "13") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0"))
               (rule "mul_literals" (formula "13") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0"))
               (rule "polySimp_addComm1" (formula "13") (term "0,0"))
               (rule "add_literals" (formula "13") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "0"))
               (rule "add_literals" (formula "13") (term "1,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13"))
               (rule "mul_literals" (formula "13") (term "1"))
               (rule "inEqSimp_contradInEq3" (formula "13") (ifseqformula "5"))
               (rule "greater_literals" (formula "13") (term "0,0"))
               (rule "concrete_impl_1" (formula "13") (term "0"))
               (rule "mul_literals" (formula "13") (term "0,0"))
               (rule "qeq_literals" (formula "13") (term "0"))
               (rule "concrete_and_2" (formula "13"))
               (rule "closeFalse" (formula "13"))
            )
            (branch " CUT: a <= -1 | a >= 1 FALSE"
               (rule "orRight" (formula "7"))
               (rule "close" (formula "8") (ifseqformula "2"))
            )
         )
      )
      (branch " CUT: a >= 1 FALSE"
         (rule "close" (formula "7") (ifseqformula "2"))
      )
   )
   (branch " Case 2"
      (rule "inEqSimp_geqRight" (formula "2"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "add_non_neg_square" (inst "squareFac=a"))
      (rule "divide_inEq0" (formula "2") (inst "divY=a * a * a * a") (ifseqformula "3"))
      (rule "qeq_literals" (formula "2") (term "0,1"))
      (rule "concrete_impl_1" (formula "2") (term "1"))
      (rule "div_literals" (formula "2") (term "1,1,1"))
      (rule "qeq_literals" (formula "2") (term "0,1"))
      (rule "concrete_impl_1" (formula "2") (term "1"))
      (rule "polySimp_mulAssoc" (formula "2") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0"))
      (rule "polySimp_mulAssoc" (formula "2") (term "0,0,1,0"))
      (rule "eqClose" (formula "2") (term "0"))
      (rule "concrete_impl_1" (formula "2"))
      (rule "divide_inEq2" (formula "1") (inst "divY=a") (ifseqformula "4"))
      (rule "eqClose" (formula "1") (term "0"))
      (rule "concrete_impl_1" (formula "1"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (rule "concrete_impl_1" (formula "1"))
      (rule "leq_literals" (formula "1") (term "0"))
      (rule "concrete_impl_1" (formula "1"))
      (rule "add_zero_left" (formula "1") (term "0,0,1"))
      (rule "sub_literals" (formula "1") (term "0,1"))
      (rule "div_literals" (formula "1") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "5"))
      (rule "leq_literals" (formula "1") (term "0"))
      (rule "concrete_or_1" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "divide_inEq0" (formula "2") (inst "divY=a * a * a") (ifseqformula "4"))
      (rule "qeq_literals" (formula "2") (term "0,1"))
      (rule "concrete_impl_1" (formula "2") (term "1"))
      (rule "div_literals" (formula "2") (term "1,1,1"))
      (rule "qeq_literals" (formula "2") (term "0,1"))
      (rule "concrete_impl_1" (formula "2") (term "1"))
      (rule "polySimp_mulAssoc" (formula "2") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0"))
      (rule "eqClose" (formula "2") (term "0"))
      (rule "concrete_impl_1" (formula "2"))
      (rule "divide_inEq0" (formula "2") (inst "divY=a * a") (ifseqformula "5"))
      (rule "qeq_literals" (formula "2") (term "0,1"))
      (rule "concrete_impl_1" (formula "2") (term "1"))
      (rule "div_literals" (formula "2") (term "1,1,1"))
      (rule "qeq_literals" (formula "2") (term "0,1"))
      (rule "concrete_impl_1" (formula "2") (term "1"))
      (rule "polySimp_mulAssoc" (formula "2") (term "1,0"))
      (rule "eqClose" (formula "2") (term "0"))
      (rule "concrete_impl_1" (formula "2"))
      (rule "divide_inEq0" (formula "2") (inst "divY=a") (ifseqformula "6"))
      (rule "eqClose" (formula "2") (term "0"))
      (rule "concrete_impl_1" (formula "2"))
      (rule "qeq_literals" (formula "2") (term "0,1"))
      (rule "concrete_impl_1" (formula "2") (term "1"))
      (rule "qeq_literals" (formula "2") (term "0"))
      (rule "concrete_impl_1" (formula "2"))
      (rule "div_literals" (formula "2") (term "1"))
      (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "2"))
      (rule "qeq_literals" (formula "7") (term "0"))
      (rule "concrete_and_2" (formula "7"))
      (rule "closeFalse" (formula "7"))
   )
)
)

}
